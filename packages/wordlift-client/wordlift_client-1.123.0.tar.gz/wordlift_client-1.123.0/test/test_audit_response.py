# coding: utf-8

"""
    WordLift API

    WordLift API

    The version of the OpenAPI document: 1.0
    Contact: hello@wordlift.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wordlift_client.models.audit_response import AuditResponse

class TestAuditResponse(unittest.TestCase):
    """AuditResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuditResponse:
        """Test AuditResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuditResponse`
        """
        model = AuditResponse()
        if include_optional:
            return AuditResponse(
                success = True,
                data = wordlift_client.models.audit_data.AuditData(
                    url = '', 
                    domain = '', 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    overall_score = 0, 
                    summary = '', 
                    site_files = wordlift_client.models.site_files.SiteFiles(
                        status = 'Excellent', 
                        explanation = '', 
                        robots_txt = 'found', 
                        llms_txt = 'found', 
                        bot_access = wordlift_client.models.site_files_bot_access.SiteFiles_botAccess(
                            gptbot = 'allowed', 
                            claude = 'allowed', 
                            googlebot = 'allowed', ), ), 
                    seo_fundamentals = wordlift_client.models.seo_fundamentals.SeoFundamentals(
                        status = 'Excellent', 
                        explanation = '', 
                        title = '', 
                        description = '', 
                        h1_count = 56, ), 
                    structured_data = wordlift_client.models.structured_data.StructuredData(
                        status = 'Excellent', 
                        explanation = '', 
                        has_schema = True, 
                        has_json_ld = True, 
                        detected_schemas = [
                            ''
                            ], ), 
                    content_structure = wordlift_client.models.content_structure.ContentStructure(
                        status = 'Excellent', 
                        explanation = '', 
                        semantic_html_score = 0, ), 
                    image_accessibility = wordlift_client.models.image_accessibility.ImageAccessibility(
                        status = 'Excellent', 
                        explanation = '', 
                        missing_alt_percentage = 0, 
                        total_images = 56, 
                        images_without_alt = 56, ), 
                    automation_readiness = wordlift_client.models.automation_readiness.AutomationReadiness(
                        status = 'Excellent', 
                        explanation = '', 
                        issues = [
                            ''
                            ], ), 
                    js_rendering = wordlift_client.models.js_rendering.JsRendering(
                        status = 'Excellent', 
                        explanation = '', 
                        framework_detected = '', 
                        rendering_type = 'Static', 
                        ai_accessibility = 'Excellent', 
                        content_availability = '', 
                        recommendations = [
                            ''
                            ], ), 
                    quick_wins = [
                        wordlift_client.models.quick_win.QuickWin(
                            title = '', 
                            description = '', 
                            impact = 'High', )
                        ], 
                    status = 'completed', 
                    account_id = 56, 
                    account_url = '', )
            )
        else:
            return AuditResponse(
        )
        """

    def testAuditResponse(self):
        """Test AuditResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
