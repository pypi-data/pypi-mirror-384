[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-openproject"
version = "0.0.2"
description = "OpenProject MCP Server for AI Integration - Production Ready v0.0.1"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "MCP OpenProject Team", email = "contact@mcp-openproject.dev"},
]
keywords = ["mcp", "openproject", "ai", "integration", "windsurf", "claude"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Scheduling",
]

# Core dependencies - minimal for basic MCP functionality
dependencies = [
    "fastmcp>=0.3.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "backoff>=2.2.1",
    "python-dateutil>=2.8.0",
    "urllib3>=1.26.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "fastapi-mcp>=0.4.0",
    "structlog>=23.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Full-featured installation (recommended for most users)
full = [
    "mcp-openproject[dev]",
    "uvicorn[standard]>=0.24.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.1",
    "cryptography>=41.0.0",
]

# HTTP transport support for MCP OpenProject
http-transport = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "fastapi_mcp>=0.4.0",
    "structlog>=23.0.0",
]

# OpenProject API client generation
openproject-client = [
    "openapi-generator-cli>=7.0.0",
]

# AI website backend
ai-backend = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.2",
    "langchain-mcp-adapters>=0.1.11",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "watchfiles>=0.20.0",
    "PyJWT>=2.8.0",
    "prometheus-client>=0.19.0",
]

# Database support
database = [
    "asyncpg>=0.30.0,<0.31.0",
]

# Everything for development and production
all = [
    "mcp-openproject[full,openproject-client,ai-backend,database]"
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-openproject"
Repository = "https://github.com/your-org/mcp-openproject.git"
Issues = "https://github.com/your-org/mcp-openproject/issues"

[project.scripts]
# Main MCP server command - user-friendly entry points
mcp-openproject = "mcp_server.cli:main"
openproject-mcp = "mcp_server.cli:main"
mcp-openproject-server = "mcp_server.cli:server"
openproject-mcp-server = "mcp_server.cli:server"

# Management commands
mcp-openproject-config = "mcp_server.cli:config"
mcp-openproject-status = "mcp_server.cli:status"
mcp-openproject-test = "mcp_server.cli:test"

[project.entry-points."mcp.servers"]
openproject = "mcp_server.main:get_server"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp_server*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["mcp_server", "mcp_client"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "build>=1.3.0",
    "twine>=6.2.0",
]
