# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.background_image import BackgroundImage
from openapi_client.models.close_button_style import CloseButtonStyle
from openapi_client.models.drop_shadow import DropShadow
from openapi_client.models.margin import Margin
from typing import Optional, Set
from typing_extensions import Self

class TeaserStyles(BaseModel):
    """
    TeaserStyles
    """ # noqa: E501
    background_color: Optional[StrictStr] = '#FFFFFF'
    drop_shadow: Optional[DropShadow] = None
    corner_radius: Optional[StrictInt] = 4
    background_image: Optional[BackgroundImage] = None
    close_button: Optional[CloseButtonStyle] = None
    margin: Optional[Margin] = None
    __properties: ClassVar[List[str]] = ["background_color", "drop_shadow", "corner_radius", "background_image", "close_button", "margin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeaserStyles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drop_shadow
        if self.drop_shadow:
            _dict['drop_shadow'] = self.drop_shadow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_image
        if self.background_image:
            _dict['background_image'] = self.background_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of close_button
        if self.close_button:
            _dict['close_button'] = self.close_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin
        if self.margin:
            _dict['margin'] = self.margin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeaserStyles from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background_color": obj.get("background_color") if obj.get("background_color") is not None else '#FFFFFF',
            "drop_shadow": DropShadow.from_dict(obj["drop_shadow"]) if obj.get("drop_shadow") is not None else None,
            "corner_radius": obj.get("corner_radius") if obj.get("corner_radius") is not None else 4,
            "background_image": BackgroundImage.from_dict(obj["background_image"]) if obj.get("background_image") is not None else None,
            "close_button": CloseButtonStyle.from_dict(obj["close_button"]) if obj.get("close_button") is not None else None,
            "margin": Margin.from_dict(obj["margin"]) if obj.get("margin") is not None else None
        })
        return _obj


