# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BackgroundImageStyles(BaseModel):
    """
    BackgroundImageStyles
    """ # noqa: E501
    horizontal_alignment: Optional[StrictStr] = Field(default='center', description="Horizontal alignment enumeration.")
    width: Optional[StrictInt] = None
    position: Optional[StrictStr] = Field(default='contain', description="Image position enumeration.")
    vertical_alignment: Optional[StrictStr] = Field(default='center', description="Vertical alignment enumeration.")
    custom_width: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["horizontal_alignment", "width", "position", "vertical_alignment", "custom_width"]

    @field_validator('horizontal_alignment')
    def horizontal_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['center', 'left', 'right']):
            raise ValueError("must be one of enum values ('center', 'left', 'right')")
        return value

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['contain', 'cover', 'custom']):
            raise ValueError("must be one of enum values ('contain', 'cover', 'custom')")
        return value

    @field_validator('vertical_alignment')
    def vertical_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bottom', 'center', 'top']):
            raise ValueError("must be one of enum values ('bottom', 'center', 'top')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackgroundImageStyles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if custom_width (nullable) is None
        # and model_fields_set contains the field
        if self.custom_width is None and "custom_width" in self.model_fields_set:
            _dict['custom_width'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackgroundImageStyles from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "horizontal_alignment": obj.get("horizontal_alignment") if obj.get("horizontal_alignment") is not None else 'center',
            "width": obj.get("width"),
            "position": obj.get("position") if obj.get("position") is not None else 'contain',
            "vertical_alignment": obj.get("vertical_alignment") if obj.get("vertical_alignment") is not None else 'center',
            "custom_width": obj.get("custom_width")
        })
        return _obj


