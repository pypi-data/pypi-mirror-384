# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BackInStockDynamicButtonTextStyles(BaseModel):
    """
    BackInStockDynamicButtonTextStyles
    """ # noqa: E501
    font_family: Optional[Any] = None
    font_size: Optional[StrictInt] = 16
    font_weight: Optional[StrictInt] = Field(default=400, description="Font weight enumeration.")
    font_color: Optional[StrictStr] = '#FFFFFF'
    font_style: Optional[StrictStr] = None
    text_decoration: Optional[StrictStr] = None
    letter_spacing: Optional[StrictInt] = 0
    __properties: ClassVar[List[str]] = ["font_family", "font_size", "font_weight", "font_color", "font_style", "text_decoration", "letter_spacing"]

    @field_validator('font_weight')
    def font_weight_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([100, 200, 300, 400, 500, 600, 700, 800, 900]):
            raise ValueError("must be one of enum values (100, 200, 300, 400, 500, 600, 700, 800, 900)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackInStockDynamicButtonTextStyles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if font_family (nullable) is None
        # and model_fields_set contains the field
        if self.font_family is None and "font_family" in self.model_fields_set:
            _dict['font_family'] = None

        # set to None if font_style (nullable) is None
        # and model_fields_set contains the field
        if self.font_style is None and "font_style" in self.model_fields_set:
            _dict['font_style'] = None

        # set to None if text_decoration (nullable) is None
        # and model_fields_set contains the field
        if self.text_decoration is None and "text_decoration" in self.model_fields_set:
            _dict['text_decoration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackInStockDynamicButtonTextStyles from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "font_family": obj.get("font_family"),
            "font_size": obj.get("font_size") if obj.get("font_size") is not None else 16,
            "font_weight": obj.get("font_weight") if obj.get("font_weight") is not None else 400,
            "font_color": obj.get("font_color") if obj.get("font_color") is not None else '#FFFFFF',
            "font_style": obj.get("font_style"),
            "text_decoration": obj.get("text_decoration"),
            "letter_spacing": obj.get("letter_spacing") if obj.get("letter_spacing") is not None else 0
        })
        return _obj


