# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.back_in_stock_dynamic_button_border_styles import BackInStockDynamicButtonBorderStyles
from openapi_client.models.back_in_stock_dynamic_button_drop_shadow_styles import BackInStockDynamicButtonDropShadowStyles
from typing import Optional, Set
from typing_extensions import Self

class BackInStockDynamicButtonStyles(BaseModel):
    """
    BackInStockDynamicButtonStyles
    """ # noqa: E501
    color: Optional[StrictStr] = '#000000'
    border_radius: Optional[StrictInt] = 0
    height: Optional[StrictInt] = 44
    width: Optional[StrictStr] = Field(default='fullWidth', description="Back In Stock Dynamic Button display type enumeration.")
    alignment: Optional[StrictStr] = Field(default='center', description="Horizontal alignment enumeration.")
    border: Optional[BackInStockDynamicButtonBorderStyles] = None
    drop_shadow: Optional[BackInStockDynamicButtonDropShadowStyles] = None
    __properties: ClassVar[List[str]] = ["color", "border_radius", "height", "width", "alignment", "border", "drop_shadow"]

    @field_validator('width')
    def width_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fitToText', 'fullWidth']):
            raise ValueError("must be one of enum values ('fitToText', 'fullWidth')")
        return value

    @field_validator('alignment')
    def alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['center', 'left', 'right']):
            raise ValueError("must be one of enum values ('center', 'left', 'right')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackInStockDynamicButtonStyles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of border
        if self.border:
            _dict['border'] = self.border.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drop_shadow
        if self.drop_shadow:
            _dict['drop_shadow'] = self.drop_shadow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackInStockDynamicButtonStyles from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": obj.get("color") if obj.get("color") is not None else '#000000',
            "border_radius": obj.get("border_radius") if obj.get("border_radius") is not None else 0,
            "height": obj.get("height") if obj.get("height") is not None else 44,
            "width": obj.get("width") if obj.get("width") is not None else 'fullWidth',
            "alignment": obj.get("alignment") if obj.get("alignment") is not None else 'center',
            "border": BackInStockDynamicButtonBorderStyles.from_dict(obj["border"]) if obj.get("border") is not None else None,
            "drop_shadow": BackInStockDynamicButtonDropShadowStyles.from_dict(obj["drop_shadow"]) if obj.get("drop_shadow") is not None else None
        })
        return _obj


