# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WhatsappConversationalChannel(BaseModel):
    """
    WhatsappConversationalChannel
    """ # noqa: E501
    consent: StrictStr = Field(description="The consent status for the channel.")
    consent_timestamp: Optional[datetime] = Field(default=None, description="The timestamp when consent was recorded or updated for the channel, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).")
    last_updated: Optional[datetime] = Field(default=None, description="The timestamp when the channel was last modified, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).")
    created_timestamp: Optional[datetime] = Field(default=None, description="The timestamp when the channel was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Channel-specific metadata containing additional information about the permission.")
    can_receive: StrictBool = Field(description="Whether the profile can receive messages on this channel.")
    valid_until: Optional[datetime] = Field(default=None, description="Optional expiration date for the permission, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).")
    phone_number: StrictStr = Field(description="Phone number to which the consent was granted for.")
    __properties: ClassVar[List[str]] = ["consent", "consent_timestamp", "last_updated", "created_timestamp", "metadata", "can_receive", "valid_until", "phone_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhatsappConversationalChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if consent_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.consent_timestamp is None and "consent_timestamp" in self.model_fields_set:
            _dict['consent_timestamp'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if created_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.created_timestamp is None and "created_timestamp" in self.model_fields_set:
            _dict['created_timestamp'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if valid_until (nullable) is None
        # and model_fields_set contains the field
        if self.valid_until is None and "valid_until" in self.model_fields_set:
            _dict['valid_until'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhatsappConversationalChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consent": obj.get("consent"),
            "consent_timestamp": obj.get("consent_timestamp"),
            "last_updated": obj.get("last_updated"),
            "created_timestamp": obj.get("created_timestamp"),
            "metadata": obj.get("metadata"),
            "can_receive": obj.get("can_receive"),
            "valid_until": obj.get("valid_until"),
            "phone_number": obj.get("phone_number")
        })
        return _obj


