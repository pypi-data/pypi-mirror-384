#!/usr/bin/env python
"""Oskar - Finite Element Analysis Framework."""
import numpy as np
import pygimli as pg

from . mpatch import *

from . op import DZ
from . feaSpace import (ScalarSpace, VectorSpace, ConstantSpace, TaylorHood)
from . feaSolution import FEASolution
from . feaFunction import (FEAFunction, FEAFunction3, FEAFunctionRegionDict)
from . feaOp import (findForms)

from . mathOp import (Laplace, Div, I, PDE,
                     derive, div, dirac, grad, identity, integrate, laplace,
                     norm, sym, tr, trace,
                     )
from . solve import (DirichletManager, NeumannManager, solve,
                     parse, asFunction, asFunctions,
                     applyRHSBoundaryConditions,
                     applyBoundaryConditions,
                     applyDirichlet,
                     normL2, normSemiH1)
from . elasticity import (strain, stress, toLameCoeff, asVoigtMapping,
                         createElasticityMatrix)
from . units import Parameters, entity
from . utils import (Report, asLatex, bulk, etaWater, comparingLabels, pprint,
                     drawConvergenceOrder, quadratureRules, fitShapeFunctions,
                     asAnisotropyMatrix)
from . linSolve import (linSolve, LinSolver)

from . processes import (AdvectionDiffusionSolver,
                         DarcySolver,
                         HeatConductionSolver,
                         LinearElasticitySolver,
                         ThermoElasticitySolver,
                         PoroElasticitySolver,
                         ThermoPoroElasticitySolver,
                         solveDarcy,
                         solveHeatConduction,
                         solveLinearElasticity,
                         solveAdvectionDiffusion,
                         solveThermoElasticity,
                         solvePoroElasticity,
                         solveThermoPoroElasticity,
                         )
from . tests import test, assertEqual

from . import _version


@pg.singleton
class Globals:
    """Store private global variables."""

    testCounter = 0
    versionCache = None



def findVersion(cache=True):
    """Find current version.

    Find current version either generated by
    [versioneer](https://github.com/python-versioneer/python-versioneer)
    (git based) or from local cache to avoid extensive git system calls.

    ARGS
    ----
    cache: bool [True]
        Use version from cache to avoid extensive git calls.
    """
    if cache:
        # implementme
        pass
    #pg.tic()
    v = _version.get_versions()['version']
    #pg.toc('getting version:' + v)
    return v


def version(cache=False):  # imported cache will be overwritten
    """Shortcut to show and return current version.

    ARGS
    ----
    cache: bool [True]
        Use version from cache to avoid extensive git calls.
    """
    v = findVersion(cache=cache)

    if cache is True:
        pg.info('Version (cached): ' + v)
    else:
        pg.info('Version: ' + v)
    return v


class oskar(sys.modules[__name__].__class__):
    __version__ = property(lambda self: self.findVersion(cache=False))
sys.modules[__name__].__class__ = oskar
