# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

###########
# PROJECT #
###########

[project]
name = "dvsim"
version = "1.0.0"
description = "DV system"
authors = [{name = "lowRISC contributors (OpenTitan project)"}]
readme = "README.md"
licence = "Apache-2.0"
license-files = ["LICENSE"]
requires-python = ">=3.10"
dependencies = [
    # Keep sorted
    "click>=8.1.7",
    "enlighten>=1.12.4",
    "hjson>=3.1.0",
    "logzero>=1.7.0",
    "mistletoe>=1.4.0",
    "premailer>=3.10.0",
    "pydantic>=2.9.2",
    "pyyaml>=6.0.2",
    "tabulate>=0.9.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
typing = [
    "pyright>=1.1.381",
]
linting = [
    "ruff>=0.6.7",
]
debug = [
    "ipython>=8.18.1",
]
test = [
    "pyhamcrest>=2.1.0",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
]
release = [
    "python-semantic-release>=10.4.1",
]

dev = [
    "dvsim[linting,typing,test,debug]"
]
ci = [
    "dvsim[linting,typing,test]",
    "gitpython",
]
# Dependency set to be installed automatically in the direnv-activated nix devshell
# - Leave out ruff(linting) as it contains a rust binary that needs to be installed by the flake
nix = [
    "dvsim[typing,test,debug]",
    "gitpython",
]

[project.scripts]
dvsim = "dvsim.cli:main"

################
# BUILD-SYSTEM #
################

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

########
# TOOL #
########

[tool.hatch]
metadata.allow-direct-references = true

[tool.pyright]
include = ["src"]
reportMissingImports = "error"
reportMissingTypeStubs = false
venv = ".venv"
executionEnvironments = [
    { root = "src" },
]

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = ["ALL"]
extend-select = ["W391", "E303"]
allowed-confusables = ["âˆ’"]
ignore = [
    "D203",   # Blank line after class def (we do not use this style)
    "D213",   # Multi-line summary second line (we do not use this style)
    "COM812", # Missing trailing comma (unnecessary with auto format)
    "FIX",    # FIX related rules
    "TD",     # TODO related rules
    "S603",   # Start process without shell
    "S607",   # Start process with partial path
    "TRY003", # Custom exception with vanilla args. This is reasonable if the
              # exception is used as a sentinel.
    "EM101",  # String literals in exception
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
    # Checks for boolean passed as positional argument which is useful in the
    # main codebase for clarity. However it's common to assert against a boolean
    # in tests and having to use kwargs in all cases will clutter the tests.
    "FBT003",
]

[tool.pytest.ini_options]
addopts = "--cov=dvsim --cov-report term-missing"
norecursedirs = ["*.egg", ".*", "_darcs", "build", "dist", "venv", "scratch", "doc"]

[tool.semantic_release]
commit_parser = "conventional"
version_toml = ["pyproject.toml:project.version"]
commit_author = "semantic-release <actions@github.com>"
commit_message = "Bump version to v{version}"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.branches.main]
match = "master"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.remote]
name = "origin"
ignore_token_for_push = true
