---
# The schema for 'Workflow' YAML files.
#
# See https://json-schema.org/understanding-json-schema/index.html

$schema: http://json-schema.org/draft-07/schema#

title: Data Manager Workflow Schema
description: >-
  The Schema for Data Manager Workflows

# The root-level object -------------------------------------------------------

type: object
properties:
  kind:
    const: DataManagerWorkflow
  kind-version:
    enum:
    - '2025.2'
  name:
    $ref: '#/definitions/rfc1035-label-name'
  description:
    type: string
    description: A description of the workflow
  steps:
    type: array
    items:
      $ref: "#/definitions/step"
  variables:
    # A Job-compliant set of variable declarations for the workflow.
    # This block structure is a reproduction of that used in Job definitions
    # and, like Jobs, has no current schema so we permit anything here.
    type: object
    additionalProperties: true
required:
- kind
- kind-version
- name
- steps

# Sub-object definitions ------------------------------------------------------

definitions:

  # RFC 1035 Label Names (as used in Kubernetes)
  # See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
  rfc1035-label-name:
    type: string
    pattern: ^[a-z][a-z0-9-]{0,63}$(?<!-)
    description: >-
      A value compatible with Kubernetes variables
      to allow it to be used ins Pod Label

  # What does a Job specification template variable look like?
  # The values found in Jinja variables like '{{ x }}'.
  # Stuff like 'candidateMolecules' or 'clustered_molecules'
  variable-name:
    type: string
    pattern: ^[a-zA-Z_][a-zA-Z0-9_-]*$

  # A Step variable
  # (whose value is derived from a variable used in a prior step)
  step-variable-from-step:
    type: object
    additionalProperties: false
    properties:
      variable:
        $ref: '#/definitions/variable-name'
      from-step:
        type: object
        additionalProperties: false
        properties:
          name:
            $ref: '#/definitions/rfc1035-label-name'
          variable:
            $ref: '#/definitions/variable-name'
        required:
        - name
        - variable
    required:
    - variable
    - from-step

  # A Step variable
  # (whose value is derived from a workflow variable)
  step-variable-from-workflow:
    type: object
    additionalProperties: false
    properties:
      variable:
        $ref: '#/definitions/variable-name'
      from-workflow:
        type: object
        additionalProperties: false
        properties:
          variable:
            $ref: '#/definitions/variable-name'
        required:
        - variable
    required:
    - variable
    - from-workflow

  # A Step variable
  # (whose value is set to the value of a pre-defined engine variable)
  step-variable-from-predefined:
    type: object
    additionalProperties: false
    properties:
      variable:
        $ref: '#/definitions/variable-name'
      from-predefined:
        type: object
        additionalProperties: false
        properties:
          variable:
            $ref: '#/definitions/variable-name'
        required:
        - variable
    required:
    - variable
    - from-predefined

  # A step specification variable
  # (there must be at least one if a variables block is defined).
  # Typical variable syntax based on Python's definition of a variable
  # but with the inclusion of 'hyphen' within the variable.
  # The value of the variable (the object itself) is quite relaxed...
  # it simply needs to be a string, number (integer or float), or boolean.
  step-specification-variable:
    type: object
    additionalProperties: false
    patternProperties:
      '^[a-zA-Z]{1}[a-zA-Z0-9_]{0,79}$':
        oneOf:
        - type: string
        - type: integer
        - type: boolean
    minProperties: 1

  # Step specification
  step-specification:
    type: object
    additionalProperties: false
    properties:
      collection:
        type: string
      job:
        type: string
      version:
        type: string
      variables:
        $ref: "#/definitions/step-specification-variable"
    required:
    - collection
    - job
    - version

  # Steps (in a workflow)
  step:
    type: object
    additionalProperties: false
    properties:
      name:
        # A unique name for the step
        $ref: '#/definitions/rfc1035-label-name'
      description:
        # An optional description
        type: string
        description: A description of the step
      specification:
        # The step Job specification.
        # This MUST define `collection`, a 'job', and a 'version'.
        # 'variables' (a map of name and value)can also be provided.
        # The format of this is essentially identical to the specification
        # used when a Job is launched via the DM API.
        $ref: '#/definitions/step-specification'
      plumbing:
        # The map of the source of the step's variables.
        # All variables the step needs (that aren't already in the specification)
        # need to be declared here. They either come "from" a prior step
        # or are expected to be a workflow variable. Here we simply
        # associate every required variable to a source.
        type: array
        items:
          anyOf:
          - $ref: "#/definitions/step-variable-from-step"
          - $ref: "#/definitions/step-variable-from-workflow"
          - $ref: "#/definitions/step-variable-from-predefined"
        minItems: 1
    required:
    - name
    - specification
