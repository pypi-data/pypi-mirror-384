# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from rbt.mcp.v1 import stream_pb2 as rbt_dot_mcp_dot_v1_dot_stream__pb2

GRPC_GENERATED_VERSION = '1.64.3'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rbt/mcp/v1/stream_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class StreamMethodsStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/rbt.mcp.v1.StreamMethods/Create',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Put = channel.unary_unary(
                '/rbt.mcp.v1.StreamMethods/Put',
                request_serializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.PutRequest.SerializeToString,
                response_deserializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.PutResponse.FromString,
                _registered_method=True)
        self.Replay = channel.unary_unary(
                '/rbt.mcp.v1.StreamMethods/Replay',
                request_serializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayRequest.SerializeToString,
                response_deserializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayResponse.FromString,
                _registered_method=True)
        self.Messages = channel.unary_unary(
                '/rbt.mcp.v1.StreamMethods/Messages',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.MessagesResponse.FromString,
                _registered_method=True)


class StreamMethodsServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Put(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Replay(self, request, context):
        """Replay all _outgoing_ messages, which are also considered
        events and have an `event_id`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Messages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.PutRequest.FromString,
                    response_serializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.PutResponse.SerializeToString,
            ),
            'Replay': grpc.unary_unary_rpc_method_handler(
                    servicer.Replay,
                    request_deserializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayRequest.FromString,
                    response_serializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayResponse.SerializeToString,
            ),
            'Messages': grpc.unary_unary_rpc_method_handler(
                    servicer.Messages,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=rbt_dot_mcp_dot_v1_dot_stream__pb2.MessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.mcp.v1.StreamMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.mcp.v1.StreamMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamMethods(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.mcp.v1.StreamMethods/Create',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.mcp.v1.StreamMethods/Put',
            rbt_dot_mcp_dot_v1_dot_stream__pb2.PutRequest.SerializeToString,
            rbt_dot_mcp_dot_v1_dot_stream__pb2.PutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Replay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.mcp.v1.StreamMethods/Replay',
            rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayRequest.SerializeToString,
            rbt_dot_mcp_dot_v1_dot_stream__pb2.ReplayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Messages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.mcp.v1.StreamMethods/Messages',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            rbt_dot_mcp_dot_v1_dot_stream__pb2.MessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
