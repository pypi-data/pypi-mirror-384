Metadata-Version: 2.4
Name: floydr
Version: 1.0.3
Summary: A zero-boilerplate framework for building interactive ChatGPT widgets
Home-page: https://github.com/floydr-framework/floydr
Author: Floydr Team
Author-email: Floydr Team <hello@floydr.dev>
License: MIT
Project-URL: Homepage, https://floydr.dev
Project-URL: Documentation, https://floydr.dev/docs
Project-URL: Repository, https://github.com/floydr-framework/floydr
Project-URL: Bug Reports, https://github.com/floydr-framework/floydr/issues
Keywords: chatgpt,widgets,mcp,framework,react
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastmcp>=0.1.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=13.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Flick

A zero-boilerplate framework for building interactive ChatGPT widgets.

## Features

- ðŸš€ Zero Configuration - Just create your widget and tool, everything else is automated
- ðŸ”„ Auto-Discovery - Tools are automatically detected and registered  
- ðŸ“¦ Auto-Build - Mounting logic injected at build time
- âš¡ Hot Reload - Changes detected and rebuilt automatically
- ðŸŽ¨ React + Vite - Modern frontend development experience

## Installation

```bash
pip install flick
```

## Quick Start

```python
from flick import BaseWidget
from pydantic import BaseModel, ConfigDict
from typing import Dict, Any

class MyWidgetInput(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

class MyWidgetTool(BaseWidget):
    identifier = "my_widget"
    title = "My Widget"
    input_schema = MyWidgetInput
    
    async def execute(self, input_data: MyWidgetInput) -> Dict[str, Any]:
        return {"message": "Hello from Flick!"}
```

Create your React component in `widgets/my_widget/index.jsx`:

```jsx
import React from 'react';
import { useWidgetProps } from 'flick-react';

export default function MyWidget() {
  const { message } = useWidgetProps();
  return <h1>{message}</h1>;
}
```

That's it! No boilerplate files needed.

## Documentation

Visit [flick.dev/docs](https://flick.dev/docs) for full documentation.

## License

MIT

