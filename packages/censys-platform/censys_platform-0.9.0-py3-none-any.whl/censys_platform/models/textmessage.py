"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from censys_platform.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class TextMessageTypedDict(TypedDict):
    actor: NotRequired[int]
    channel_id: NotRequired[Nullable[List[int]]]
    message: NotRequired[str]
    session: NotRequired[Nullable[List[int]]]
    tree_id: NotRequired[Nullable[List[int]]]


class TextMessage(BaseModel):
    actor: Optional[int] = None

    channel_id: OptionalNullable[List[int]] = UNSET

    message: Optional[str] = None

    session: OptionalNullable[List[int]] = UNSET

    tree_id: OptionalNullable[List[int]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["actor", "channel_id", "message", "session", "tree_id"]
        nullable_fields = ["channel_id", "session", "tree_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
