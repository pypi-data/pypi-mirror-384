"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from censys_platform.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import List
from typing_extensions import TypedDict


class Targets(str, Enum):
    HOST = "host"
    WEB = "web"
    CERT = "cert"
    UNKNOWN = "unknown"


class AlternativeQueryTypedDict(TypedDict):
    query: str
    r"""An alternative query that may be used."""
    targets: Nullable[List[Targets]]
    r"""The types of Platform data records (host, cert, and web) that can be targeted by the alternative query."""


class AlternativeQuery(BaseModel):
    query: str
    r"""An alternative query that may be used."""

    targets: Nullable[List[Targets]]
    r"""The types of Platform data records (host, cert, and web) that can be targeted by the alternative query."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["targets"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
