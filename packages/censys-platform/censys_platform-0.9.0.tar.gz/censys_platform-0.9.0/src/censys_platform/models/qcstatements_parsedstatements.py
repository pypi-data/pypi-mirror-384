"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .qcstatements_monetaryvalue import (
    QcStatementsMonetaryValue,
    QcStatementsMonetaryValueTypedDict,
)
from .qcstatements_pdslocation import (
    QcStatementsPdsLocation,
    QcStatementsPdsLocationTypedDict,
)
from .qcstatements_qclegislation import (
    QCStatementsQCLegislation,
    QCStatementsQCLegislationTypedDict,
)
from .qcstatements_qctype import QcStatementsQcType, QcStatementsQcTypeTypedDict
from censys_platform.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class QcStatementsParsedStatementsTypedDict(TypedDict):
    etsi_compliance: NotRequired[Nullable[List[bool]]]
    legislation: NotRequired[Nullable[List[QCStatementsQCLegislationTypedDict]]]
    limit: NotRequired[Nullable[List[QcStatementsMonetaryValueTypedDict]]]
    pds_locations: NotRequired[Nullable[List[QcStatementsPdsLocationTypedDict]]]
    retention_period: NotRequired[Nullable[List[int]]]
    sscd: NotRequired[Nullable[List[bool]]]
    types: NotRequired[Nullable[List[QcStatementsQcTypeTypedDict]]]


class QcStatementsParsedStatements(BaseModel):
    etsi_compliance: OptionalNullable[List[bool]] = UNSET

    legislation: OptionalNullable[List[QCStatementsQCLegislation]] = UNSET

    limit: OptionalNullable[List[QcStatementsMonetaryValue]] = UNSET

    pds_locations: OptionalNullable[List[QcStatementsPdsLocation]] = UNSET

    retention_period: OptionalNullable[List[int]] = UNSET

    sscd: OptionalNullable[List[bool]] = UNSET

    types: OptionalNullable[List[QcStatementsQcType]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "etsi_compliance",
            "legislation",
            "limit",
            "pds_locations",
            "retention_period",
            "sscd",
            "types",
        ]
        nullable_fields = [
            "etsi_compliance",
            "legislation",
            "limit",
            "pds_locations",
            "retention_period",
            "sscd",
            "types",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
