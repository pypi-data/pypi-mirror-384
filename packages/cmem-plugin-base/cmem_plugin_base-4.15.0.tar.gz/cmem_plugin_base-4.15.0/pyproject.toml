[tool.poetry]
name = "cmem-plugin-base"
version = "4.15.0"
license = "Apache-2.0"
description = "Base classes for developing eccenca Corporate Memory plugins."
authors = ["eccenca GmbH <cmempy-developer@eccenca.com>"]
maintainers = [
    "Sebastian Tramp <sebastian.tramp@eccenca.com>",
    "Robert Isele <robert.isele@eccenca.com>"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Plugins",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
readme = "README-public.md"
keywords = [
    "eccenca Corporate Memory", "plugins", "DataIntegration"
]

homepage = "https://github.com/eccenca/cmem-plugin-base"

[tool.poetry.dependencies]
python = "^3.13"
cmem-cmempy = ">=25.2.0"
pydantic = "^2.12.2"
python-ulid = "^3.1.0"

[tool.poetry.group.dev.dependencies]
deptry = "^0.23.1"
genbadge = {extras = ["coverage"], version = "^1.1.2"}
mypy = "^1.18.2"
pip = "^25.2"
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
pytest-dotenv = "^0.5.2"
pytest-html = "^4.1.1"
pytest-memray = { version = "^1.8.0",  markers = "platform_system != 'Windows'" }
ruff = "^0.13.3"
safety = "^1.10.3"
types-requests = "^2.32.0.20240907"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
dirty = true
bump = true

[tool.mypy]
warn_return_any = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "cmem_plugin_base.dataintegration.context",
    "cmem_plugin_base.dataintegration.plugins",
    "cmem_plugin_base.dataintegration.types"
]
disable_error_code = "empty-body"

[tool.pytest.ini_options]
addopts = ""

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
line-ending = "lf" # Use `\n` line endings for all files

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN204",  # Missing return type annotation for special method `__init__`
    "COM812",  # missing-trailing-comma
    "D107",    # Missing docstring in __init__
    "D203",    # [*] 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D415",    # First line should end with a period, question mark, or exclamation point
    "EM",      # Exception texts - https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "FBT",     # The Boolean Trap - https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "FIX002",  # Allow to add TODO notes in the code
    "G004",    # Logging statement uses f-string
    "ISC001",  # single-line-implicit-string-concatenation
    "PD",      # opinionated linting for pandas code
    "S101",    # use of assert detected
    "TRY003",  # Avoid specifying long messages outside the exception class
    "ARG002"   # Checks for the presence of unused arguments in instance method definitions.
]

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = [
    "PLR2004", # Checks for the use of unnamed numerical constants ("magic") values in comparisons.
    "PT009",   # Use a regular `assert` instead of unittest-style `assertListEqual`
    "PT027"    # Use pytest.raises instead of unittest-style {assertion}
]
