
# DO NOT EDIT MANUALLY; THIS FILE IS AUTOGENERATED by the `gen-gitlab-ci`
# script. Rerun the script to update this file, and commit it to version
# control.

stages:
    - build-base
    - publish-base
    - build
    - publish

.docker:
    image: docker:20.10-dind
    services:
        - name: docker:20.10-dind
    before_script:
        - apk add make python3
        - cd support/docker/
        - ./configure
        - 'docker login --username="${DOCKER_USERNAME}" --password-stdin < "${DOCKER_PASSWORD_FILE}"'


docker-images-base-amd64:
    stage: build-base
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-base"
    tags: [saas-linux-medium-amd64]
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "base")'


docker-images-base-arm64:
    stage: build-base
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-base"
    tags: [saas-linux-medium-arm64]
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "base")'


docker-images-base-multiarch:
    stage: publish-base
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-base"
    needs: ['docker-images-base-amd64', 'docker-images-base-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "base")'


docker-images-clang_11_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_11_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_11_all")'


docker-images-clang_11_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_11_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_11_all")'


docker-images-clang_11_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_11_all"
    needs: ['docker-images-clang_11_all-amd64', 'docker-images-clang_11_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_11_all")'


docker-images-clang_12_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_12_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_12_all")'


docker-images-clang_12_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_12_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_12_all")'


docker-images-clang_12_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_12_all"
    needs: ['docker-images-clang_12_all-amd64', 'docker-images-clang_12_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_12_all")'


docker-images-clang_13_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_13_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_13_all")'


docker-images-clang_13_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_13_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_13_all")'


docker-images-clang_13_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_13_all"
    needs: ['docker-images-clang_13_all-amd64', 'docker-images-clang_13_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_13_all")'


docker-images-clang_14_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_14_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_14_all")'


docker-images-clang_14_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_14_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_14_all")'


docker-images-clang_14_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_14_all"
    needs: ['docker-images-clang_14_all-amd64', 'docker-images-clang_14_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_14_all")'


docker-images-clang_15_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_15_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_15_all")'


docker-images-clang_15_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_15_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_15_all")'


docker-images-clang_15_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_15_all"
    needs: ['docker-images-clang_15_all-amd64', 'docker-images-clang_15_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_15_all")'


docker-images-clang_16_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_16_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_16_all")'


docker-images-clang_16_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_16_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_16_all")'


docker-images-clang_16_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_16_all"
    needs: ['docker-images-clang_16_all-amd64', 'docker-images-clang_16_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_16_all")'


docker-images-clang_17_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_17_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_17_all")'


docker-images-clang_17_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_17_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_17_all")'


docker-images-clang_17_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_17_all"
    needs: ['docker-images-clang_17_all-amd64', 'docker-images-clang_17_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_17_all")'


docker-images-clang_18_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_18_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_18_all")'


docker-images-clang_18_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_18_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_18_all")'


docker-images-clang_18_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_18_all"
    needs: ['docker-images-clang_18_all-amd64', 'docker-images-clang_18_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_18_all")'


docker-images-clang_19_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_19_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_19_all")'


docker-images-clang_19_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_19_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_19_all")'


docker-images-clang_19_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_19_all"
    needs: ['docker-images-clang_19_all-amd64', 'docker-images-clang_19_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_19_all")'


docker-images-clang_20_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_20_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_20_all")'


docker-images-clang_20_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_20_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_20_all")'


docker-images-clang_20_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_20_all"
    needs: ['docker-images-clang_20_all-amd64', 'docker-images-clang_20_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_20_all")'


docker-images-clang_21_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_21_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_21_all")'


docker-images-clang_21_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_21_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_21_all")'


docker-images-clang_21_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_21_all"
    needs: ['docker-images-clang_21_all-amd64', 'docker-images-clang_21_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_21_all")'


docker-images-clang_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_all")'


docker-images-clang_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_all")'


docker-images-clang_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_all"
    needs: ['docker-images-clang_all-amd64', 'docker-images-clang_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_all")'


docker-images-clang_android_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_android_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_android_all")'


docker-images-clang_android_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_android_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_android_all")'


docker-images-clang_android_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_android_all"
    needs: ['docker-images-clang_android_all-amd64', 'docker-images-clang_android_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "clang_android_all")'


docker-images-clang_nightly_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-clang_nightly_all"
    tags: [saas-linux-medium-amd64]
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "daily" || $TUXMAKE_DOCKER_IMAGES == "clang_nightly_all")'


docker-images-clang_nightly_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-clang_nightly_all"
    tags: [saas-linux-medium-arm64]
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "daily" || $TUXMAKE_DOCKER_IMAGES == "clang_nightly_all")'


docker-images-clang_nightly_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-clang_nightly_all"
    needs: ['docker-images-clang_nightly_all-amd64', 'docker-images-clang_nightly_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "daily" || $TUXMAKE_DOCKER_IMAGES == "clang_nightly_all")'


docker-images-gcc_11_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_11_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_11_all")'


docker-images-gcc_11_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_11_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_11_all")'


docker-images-gcc_11_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_11_all"
    needs: ['docker-images-gcc_11_all-amd64', 'docker-images-gcc_11_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_11_all")'


docker-images-gcc_12_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_12_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_12_all")'


docker-images-gcc_12_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_12_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_12_all")'


docker-images-gcc_12_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_12_all"
    needs: ['docker-images-gcc_12_all-amd64', 'docker-images-gcc_12_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_12_all")'


docker-images-gcc_13_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_13_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_13_all")'


docker-images-gcc_13_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_13_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_13_all")'


docker-images-gcc_13_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_13_all"
    needs: ['docker-images-gcc_13_all-amd64', 'docker-images-gcc_13_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_13_all")'


docker-images-gcc_14_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_14_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_14_all")'


docker-images-gcc_14_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_14_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_14_all")'


docker-images-gcc_14_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_14_all"
    needs: ['docker-images-gcc_14_all-amd64', 'docker-images-gcc_14_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_14_all")'


docker-images-gcc_15_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_15_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_15_all")'


docker-images-gcc_15_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_15_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_15_all")'


docker-images-gcc_15_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_15_all"
    needs: ['docker-images-gcc_15_all-amd64', 'docker-images-gcc_15_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_15_all")'


docker-images-gcc_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-gcc_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_all")'


docker-images-gcc_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-gcc_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_all")'


docker-images-gcc_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-gcc_all"
    needs: ['docker-images-gcc_all-amd64', 'docker-images-gcc_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "gcc_all")'


docker-images-korg_clang_11_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_11_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_11_all")'


docker-images-korg_clang_11_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_11_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_11_all")'


docker-images-korg_clang_11_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_11_all"
    needs: ['docker-images-korg_clang_11_all-amd64', 'docker-images-korg_clang_11_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_11_all")'


docker-images-korg_clang_12_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_12_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_12_all")'


docker-images-korg_clang_12_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_12_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_12_all")'


docker-images-korg_clang_12_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_12_all"
    needs: ['docker-images-korg_clang_12_all-amd64', 'docker-images-korg_clang_12_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_12_all")'


docker-images-korg_clang_13_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_13_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_13_all")'


docker-images-korg_clang_13_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_13_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_13_all")'


docker-images-korg_clang_13_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_13_all"
    needs: ['docker-images-korg_clang_13_all-amd64', 'docker-images-korg_clang_13_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_13_all")'


docker-images-korg_clang_14_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_14_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_14_all")'


docker-images-korg_clang_14_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_14_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_14_all")'


docker-images-korg_clang_14_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_14_all"
    needs: ['docker-images-korg_clang_14_all-amd64', 'docker-images-korg_clang_14_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_14_all")'


docker-images-korg_clang_15_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_15_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_15_all")'


docker-images-korg_clang_15_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_15_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_15_all")'


docker-images-korg_clang_15_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_15_all"
    needs: ['docker-images-korg_clang_15_all-amd64', 'docker-images-korg_clang_15_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_15_all")'


docker-images-korg_clang_16_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_16_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_16_all")'


docker-images-korg_clang_16_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_16_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_16_all")'


docker-images-korg_clang_16_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_16_all"
    needs: ['docker-images-korg_clang_16_all-amd64', 'docker-images-korg_clang_16_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_16_all")'


docker-images-korg_clang_17_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_17_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_17_all")'


docker-images-korg_clang_17_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_17_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_17_all")'


docker-images-korg_clang_17_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_17_all"
    needs: ['docker-images-korg_clang_17_all-amd64', 'docker-images-korg_clang_17_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_17_all")'


docker-images-korg_clang_18_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_18_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_18_all")'


docker-images-korg_clang_18_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_18_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_18_all")'


docker-images-korg_clang_18_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_18_all"
    needs: ['docker-images-korg_clang_18_all-amd64', 'docker-images-korg_clang_18_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_18_all")'


docker-images-korg_clang_19_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_19_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_19_all")'


docker-images-korg_clang_19_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_19_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_19_all")'


docker-images-korg_clang_19_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_19_all"
    needs: ['docker-images-korg_clang_19_all-amd64', 'docker-images-korg_clang_19_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_19_all")'


docker-images-korg_clang_20_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_20_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_20_all")'


docker-images-korg_clang_20_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_20_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_20_all")'


docker-images-korg_clang_20_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_20_all"
    needs: ['docker-images-korg_clang_20_all-amd64', 'docker-images-korg_clang_20_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_20_all")'


docker-images-korg_clang_21_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_21_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_21_all")'


docker-images-korg_clang_21_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_21_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_21_all")'


docker-images-korg_clang_21_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_21_all"
    needs: ['docker-images-korg_clang_21_all-amd64', 'docker-images-korg_clang_21_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_21_all")'


docker-images-korg_clang_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_clang_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_all")'


docker-images-korg_clang_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_clang_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_all")'


docker-images-korg_clang_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_clang_all"
    needs: ['docker-images-korg_clang_all-amd64', 'docker-images-korg_clang_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_clang_all")'


docker-images-korg_gcc_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-korg_gcc_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_gcc_all")'


docker-images-korg_gcc_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-korg_gcc_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_gcc_all")'


docker-images-korg_gcc_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-korg_gcc_all"
    needs: ['docker-images-korg_gcc_all-amd64', 'docker-images-korg_gcc_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "korg_gcc_all")'


docker-images-rust_all-amd64:
    stage: build
    extends: .docker
    variables:
        TAG: "-amd64"
    script:
        - "make publish-rust_all"
    tags: [saas-linux-medium-amd64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "rust_all")'


docker-images-rust_all-arm64:
    stage: build
    extends: .docker
    variables:
        TAG: "-arm64"
    script:
        - "make publish-rust_all"
    tags: [saas-linux-medium-arm64]
    needs: ['docker-images-base-multiarch']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "rust_all")'


docker-images-rust_all-multiarch:
    stage: publish
    extends: .docker
    variables:
        DOCKER_CLI_EXPERIMENTAL: "enabled"
        ARCH_TAGS: "-amd64 -arm64"
    script:
        - "make publish-multiarch-rust_all"
    needs: ['docker-images-rust_all-amd64', 'docker-images-rust_all-arm64']
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule" && ($TUXMAKE_DOCKER_IMAGES == "monthly" || $TUXMAKE_DOCKER_IMAGES == "rust_all")'

