[project]
name = "galileo-core"
version = "3.67.1"
description = "Shared schemas and configuration for Galileo's Python packages."
authors = [{ name = "Galileo Technologies Inc.", email = "team@rungalileo.io" }]
readme = "README.md"
requires-python = ">=3.8.1"
license = "Apache-2.0"
license-files = ["LICENSE"]
keywords = ["llm", "quality", "language_models", "galileo"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pydantic",
    "License :: OSI Approved :: Apache Software License",
    "Framework :: IPython",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: ML",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dynamic = ["dependencies"]

[project.urls]
homepage = "https://www.galileo.ai/"

[tool.poetry.dependencies]
python = "^3.8.1"
pydantic = "^2.6.0"
pydantic-settings = "^2.2.1"
pyjwt = "^2.8.0"
httpx = ">=0.27.0,<0.29.0"
pytest = { version = "^8.2.1", optional = true }
respx = { version = "^0.22.0", optional = true }
typing-extensions = "^4.12.2"
uvloop = { version = "^0.21.0", markers = "sys_platform != 'win32'" }


[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
coverage = "^7.3.4"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.5.0"
pytest-socket = "^0.7.0"
respx = "^0.22.0"
pytest-asyncio = "^0.24.0"


[tool.poetry.group.dev.dependencies]
# Can't update until https://github.com/python/mypy/issues/17535 is resolved.
mypy = "^1.13.0"
pre-commit = "^3.5.0"
invoke = "^2.2.0"
types-jwt = "^0.1.3"
pydantic = { extras = ["mypy"], version = "^2.6.0" }


[tool.poetry.extras]
testing = ["pytest", "respx"]


[tool.poetry.plugins]
# Required for packages that install this to discover the plugin.
[tool.poetry.plugins."pytest11"]
"mock_request" = "galileo_core.testing.request_mocker"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# Test.
[tool.pytest.ini_options]
pythonpath = ["./src/"]
addopts = [
    # Run tests in parallel.
    "-n",
    "auto",
    # Show local variables in tracebacks.
    "--showlocals",
    # Show extra test summary info as specified by chars.
    "-o",
    "console_output_style=progress",
    # Show slowest 10 test durations.
    "--durations=10",
    # Disable internet access.
    "--disable-socket",
    # Enable local socket access.
    "--allow-hosts=127.0.0.1,localhost",
]
asyncio_default_fixture_loop_scope = "function"

[tool.docformatter]
style = "numpy"
recursive = true
wrap-summaries = 120
wrap-descriptions = 120

# Linters.
[tool.ruff]
line-length = 120
fix = true
src = ["src"]
target-version = "py38"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "UP", "ASYNC"]
ignore = []

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
mypy_path = ["src"]
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

# Release.
[tool.semantic_release]
version_variables = ["src/galileo_core/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
version_source = "tag"
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"

[tool.semantic_release.commit_parser_options]
# Release patch version on these tags,
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html#commit-parser-options-dict-str-any
patch_tags = ["fix", "perf", "chore", "docs", "style", "refactor"]
