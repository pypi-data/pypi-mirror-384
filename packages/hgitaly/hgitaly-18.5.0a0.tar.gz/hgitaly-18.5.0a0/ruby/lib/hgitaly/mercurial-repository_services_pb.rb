# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: mercurial-repository.proto for package 'hgitaly'

require 'grpc'
require 'mercurial-repository_pb'

module Hgitaly
  module MercurialRepositoryService
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'hgitaly.MercurialRepositoryService'

      # Will back Rails method `hg_create_repository`,
      # currently implemented on `Gitlab::Mercurial::HgGitRepository`
      # Together with `RepositoryService.CreateRepository` (see hgitaly!64)
      rpc :InitConfig, ::Hgitaly::InitConfigRequest, ::Hgitaly::InitConfigResponse
      # Will back Rails method `hg_config_item_bool?`  currently
      # implemented on `Gitlab::Mercurial::HgGitRepository`
      rpc :GetConfigItem, ::Hgitaly::GetConfigItemRequest, ::Hgitaly::GetConfigItemResponse
      # / Recover after abandoned transaction
      # /
      # / Equivalent of `hg recover`
      rpc :Recover, ::Hgitaly::RecoverRequest, ::Hgitaly::RecoverResponse
      # / Optimize repository
      # /
      # / Recompute stuff, switch to more efficient caches and compression, etc.
      rpc :Optimize, ::Hgitaly::OptimizeRequest, ::Hgitaly::OptimizeResponse
      # / Reset caches utility
      rpc :ResetCaches, ::Hgitaly::ResetCachesRequest, ::Hgitaly::ResetCachesResponse
      # / Generic run of `hg` on the repository
      # /
      # / To be used when there is no well-specified rpc for the intended action
      # / and it would be too ad-hoc to make one (e.g., run `debugrepairsomething`).
      # /
      # / This is not meant to return the subprocess stdout as bytes lines and is not suited
      # / if is expected to be purely binary content (in which EOL characters have no special
      # / meaning). In that case, making an ad-hoc call is the preferred way to go.
      rpc :HgCall, ::Hgitaly::HgCallRequest, stream(::Hgitaly::HgCallResponse)
      #
      # Managed configuration methods.
      #
      #
      # These are about the part of the repository-local configuration that is
      # entirely managed by Heptapod
      # (implemented as of this writing with the separate `.hg/hgrc.managed` file)
      #
      # Will back Rails methods `get_hgrc` and `get_hg_heptapod_config` currently
      # implemented on `Gitlab::Mercurial::HgGitRepository`
      rpc :GetManagedConfig, ::Hgitaly::GetManagedConfigRequest, ::Hgitaly::GetManagedConfigResponse
      # Will back Rails methods `set_hgrc` currently implemented on
      # `Gitlab::Mercurial::HgGitRepository` (but will be more restrictive,
      # handling a closed list of sections and items, which is currently
      # implemented by the upper layers of the Rails application).
      rpc :SetManagedConfig, ::Hgitaly::SetManagedConfigRequest, ::Hgitaly::SetManagedConfigResponse
      # / Will back Rails method `hg_push` (has never been implemented with a
      # / subprocess)
      # /
      # / Main use-case is push mirroring, as in upstream's
      # / `Remote.UpdateRemoteMirror`. A difference with the latter, that we can
      # / accept for now, is the streaming request of `UpdateRemoteMirror`,
      # / which is meant to pass very long lists of branch patterns in
      # / `only_branches_matching`.
      rpc :Push, ::Hgitaly::PushRequest, ::Hgitaly::PushResponse
      # / Pull from some remote repo.
      # /
      # / Not very different from RepositoryService.FetchRemote, but we'll avoid
      # / a few Git-specific concepts.
      rpc :Pull, ::Hgitaly::PullRequest, ::Hgitaly::PullResponse
      # / General tidying and optimization for this repository
      rpc :Housekeeping, ::Hgitaly::HousekeepingRequest, ::Hgitaly::HousekeepingResponse
    end

    Stub = Service.rpc_stub_class
  end
end
