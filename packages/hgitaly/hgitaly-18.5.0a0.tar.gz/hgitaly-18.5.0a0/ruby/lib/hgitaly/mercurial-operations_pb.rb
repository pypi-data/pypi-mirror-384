# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mercurial-operations.proto

require 'errors_pb'
require 'lint_pb'
require 'shared_pb'
require 'google/protobuf/timestamp_pb'
require 'operations_pb'
require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("mercurial-operations.proto", :syntax => :proto3) do
    add_message "hgitaly.MergeAnalysisRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :source_revision, :bytes, 2
      optional :target_revision, :bytes, 3
      optional :skip_conflicts_check, :bool, 4
    end
    add_message "hgitaly.MergeAnalysisResponse" do
      optional :is_fast_forward, :bool, 1
      optional :has_obsolete_changesets, :bool, 2
      optional :has_unstable_changesets, :bool, 3
      optional :has_conflicts, :bool, 4
      optional :target_is_public, :bool, 5
      optional :target_node_id, :string, 6
      optional :target_branch, :bytes, 7
      optional :target_topic, :bytes, 8
      optional :source_node_id, :string, 9
      optional :source_branch, :bytes, 10
      optional :source_topic, :bytes, 11
    end
    add_message "hgitaly.InvalidateMergeAnalysisRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
    end
    add_message "hgitaly.InvalidateMergeAnalysisResponse" do
      optional :invalidated_count, :uint32, 1
    end
    add_message "hgitaly.PublishChangesetRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :user, :message, 2, "gitaly.User"
      optional :hg_perms, :enum, 3, "hgitaly.MercurialPermissions"
      optional :gitlab_revision, :bytes, 4
    end
    add_message "hgitaly.PublishChangesetResponse" do
    end
    add_message "hgitaly.PublishChangesetError" do
      oneof :error do
        optional :gitlab_hook, :message, 1, "gitaly.CustomHookError"
      end
    end
    add_message "hgitaly.MergeBranchRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :user, :message, 2, "gitaly.User"
      optional :hg_perms, :enum, 3, "hgitaly.MercurialPermissions"
      optional :commit_id, :string, 4
      optional :branch, :bytes, 5
      optional :message, :bytes, 6
      optional :timestamp, :message, 7, "google.protobuf.Timestamp"
      optional :expected_old_oid, :string, 8
      optional :semi_linear, :bool, 9
    end
    add_message "hgitaly.MergeBranchResponse" do
      optional :branch_update, :message, 1, "gitaly.OperationBranchUpdate"
    end
    add_message "hgitaly.MergeBranchError" do
      oneof :error do
        optional :gitlab_hook, :message, 1, "gitaly.CustomHookError"
        optional :conflict, :message, 2, "gitaly.MergeConflictError"
        optional :reference_check, :message, 3, "gitaly.ReferenceUpdateError"
        optional :pre_check, :enum, 4, "hgitaly.PreCheckUpdateError"
      end
    end
    add_message "hgitaly.RebaseRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :user, :message, 2, "gitaly.User"
      optional :source, :bytes, 3
      optional :source_head_sha, :string, 4
      optional :destination, :bytes, 5
    end
    add_message "hgitaly.RebaseResponse" do
      optional :branch_update, :message, 1, "gitaly.OperationBranchUpdate"
    end
    add_message "hgitaly.RebaseError" do
      oneof :error do
        optional :gitlab_hook, :message, 1, "gitaly.CustomHookError"
        optional :conflict, :message, 2, "gitaly.MergeConflictError"
        optional :reference_check, :message, 3, "gitaly.ReferenceUpdateError"
        optional :pre_check, :enum, 4, "hgitaly.PreCheckUpdateError"
        optional :ref_mismatch, :message, 5, "gitaly.ReferenceStateMismatchError"
        optional :resolve_rev, :message, 6, "gitaly.ResolveRevisionError"
      end
    end
    add_message "hgitaly.CensorRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :user, :message, 2, "gitaly.User"
      optional :changeset_node_id, :string, 3
      optional :file_path, :bytes, 4
      optional :tombstone, :bytes, 5
    end
    add_message "hgitaly.CensorResponse" do
    end
    add_message "hgitaly.GetWorkingDirectoryRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :client_id, :string, 2
      optional :incarnation_id, :string, 3
      optional :revision, :bytes, 4
    end
    add_message "hgitaly.GetWorkingDirectoryResponse" do
      optional :working_directory_id, :uint32, 1
      optional :relative_path, :string, 2
    end
    add_message "hgitaly.ReleaseWorkingDirectoryRequest" do
      optional :repository, :message, 1, "gitaly.Repository"
      optional :client_id, :string, 2
      optional :incarnation_id, :string, 3
      optional :working_directory_id, :uint32, 4
    end
    add_message "hgitaly.ReleaseWorkingDirectoryResponse" do
    end
    add_enum "hgitaly.MercurialPermissions" do
      value :READ, 0
      value :WRITE, 1
      value :PUBLISH, 2
    end
    add_enum "hgitaly.PreCheckUpdateError" do
      value :NO_PROBLEM, 0
      value :NOT_FAST_FORWARD, 1
      value :OBSOLETE_CHANGESET, 2
      value :UNSTABLE_CHANGESET, 3
      value :NOT_A_TOPIC, 4
    end
  end
end

module Hgitaly
  MergeAnalysisRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MergeAnalysisRequest").msgclass
  MergeAnalysisResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MergeAnalysisResponse").msgclass
  InvalidateMergeAnalysisRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.InvalidateMergeAnalysisRequest").msgclass
  InvalidateMergeAnalysisResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.InvalidateMergeAnalysisResponse").msgclass
  PublishChangesetRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.PublishChangesetRequest").msgclass
  PublishChangesetResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.PublishChangesetResponse").msgclass
  PublishChangesetError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.PublishChangesetError").msgclass
  MergeBranchRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MergeBranchRequest").msgclass
  MergeBranchResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MergeBranchResponse").msgclass
  MergeBranchError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MergeBranchError").msgclass
  RebaseRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.RebaseRequest").msgclass
  RebaseResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.RebaseResponse").msgclass
  RebaseError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.RebaseError").msgclass
  CensorRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.CensorRequest").msgclass
  CensorResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.CensorResponse").msgclass
  GetWorkingDirectoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.GetWorkingDirectoryRequest").msgclass
  GetWorkingDirectoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.GetWorkingDirectoryResponse").msgclass
  ReleaseWorkingDirectoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.ReleaseWorkingDirectoryRequest").msgclass
  ReleaseWorkingDirectoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.ReleaseWorkingDirectoryResponse").msgclass
  MercurialPermissions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.MercurialPermissions").enummodule
  PreCheckUpdateError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hgitaly.PreCheckUpdateError").enummodule
end
