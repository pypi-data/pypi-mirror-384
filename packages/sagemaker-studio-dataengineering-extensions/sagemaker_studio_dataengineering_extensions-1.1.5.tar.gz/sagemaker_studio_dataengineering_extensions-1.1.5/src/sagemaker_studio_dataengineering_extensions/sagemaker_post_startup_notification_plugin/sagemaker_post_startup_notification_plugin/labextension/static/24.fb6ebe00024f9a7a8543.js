"use strict";(self.webpackChunk_amzn_sagemaker_post_startup_notification_plugin=self.webpackChunk_amzn_sagemaker_post_startup_notification_plugin||[]).push([[24],{24:(t,s,i)=>{i.r(s),i.d(s,{default:()=>p});var a=i(296),o=i(23);const e=[200,201];var n;!function(t){t.POST="POST",t.GET="GET",t.PUT="PUT"}(n||(n={}));class r extends Error{constructor(t,s,i,a){super(t),this.errorStatus=s,this.errorCode=i,this.cause=a,Object.setPrototypeOf(this,r.prototype)}}var c,u=i(794);!function(t){t.INFO="info",t.IN_PROGRESS="in-progress",t.SUCCESS="success",t.WARNING="warning",t.ERROR="error",t.DEFAULT="default"}(c||(c={}));class l{constructor(){this.inProgressNotificationId=void 0}async initialize(){const t=await this.getPostStartupStatus();(null==t?void 0:t.status)&&"success"!==t.status&&(this.dispatchNotification(t),this.isTerminalStatus(t.status)||this.pollStartupStatus())}async getPostStartupStatus(){try{const t=await(async(t,s)=>{var i,n;const c=a.ServerConnection.makeSettings({}),u=o.URLExt.join(c.baseUrl,"/api/poststartup"),l={method:s},p=await a.ServerConnection.makeRequest(u,l,c);if(!e.includes(p.status)){const t=await p.json(),s=null!==(i=t.errorCode)&&void 0!==i?i:void 0,a=null!==(n=t.errorMessage)&&void 0!==n?n:"unable to fetch data";throw new r(a,p.status,s)}return p})(0,n.GET);return await t.json()}catch(t){return void this.dispatchNotification({status:c.ERROR,message:"Failed to fetch post-startup status."})}}pollStartupStatus(t=3e5,s=2e3){const i=setInterval((async()=>{const t=await this.getPostStartupStatus();(null==t?void 0:t.status)&&this.isTerminalStatus(null==t?void 0:t.status)&&(this.dispatchNotification(t),clearInterval(i),clearTimeout(a))}),s),a=setTimeout((()=>{clearInterval(i),this.clearInProgressNotification(),this.dispatchNotification({status:c.INFO,message:"IDE configuration is still running. Refresh the page to retry and contact your administrator if configuration fails to complete."})}),t)}dispatchNotification(t){const{message:s,status:i,link:a,label:o}=t;this.isTerminalStatus(i)&&this.inProgressNotificationId&&this.clearInProgressNotification();const e=u.Notification.emit(s,i,{actions:t.link?[{label:null!=o?o:"Learn more",callback:()=>window.open(a,"_blank")}]:void 0,autoClose:i===c.SUCCESS&&5e3});i===c.IN_PROGRESS&&(this.inProgressNotificationId=e)}clearInProgressNotification(){u.Notification.dismiss(this.inProgressNotificationId)}isTerminalStatus(t){return[c.SUCCESS,c.ERROR].includes(t)}}const p={id:"@amzn/sagemaker-post-startup-notification-plugin:plugin",description:"A JupyterLab extension.",autoStart:!0,activate:t=>{console.log("JupyterLab extension sagemaker-post-startup-notification-plugin is activated!"),t.restored.then((async()=>{const t=new l;await t.initialize()}))}}}}]);