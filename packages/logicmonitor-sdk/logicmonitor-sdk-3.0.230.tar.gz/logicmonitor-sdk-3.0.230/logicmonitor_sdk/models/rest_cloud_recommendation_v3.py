# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestCloudRecommendationV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_display_name': 'str',
        'resource_id': 'int',
        'provider_console_url': 'str',
        'annual_savings': 'float',
        'recommendation_category': 'str',
        'created_at_ms': 'int',
        'criteria': 'str',
        'cloud_account_id': 'str',
        'device_subtype': 'str',
        'recommendation': 'str',
        'recommendation_id': 'int',
        'recommendation_status': 'str',
        'updated_at_ms': 'int',
        'cloud_provider': 'str',
        'cloud_service_type': 'str',
        'id': 'str'
    }

    attribute_map = {
        'resource_display_name': 'resourceDisplayName',
        'resource_id': 'resourceId',
        'provider_console_url': 'providerConsoleUrl',
        'annual_savings': 'annualSavings',
        'recommendation_category': 'recommendationCategory',
        'created_at_ms': 'createdAtMS',
        'criteria': 'criteria',
        'cloud_account_id': 'cloudAccountId',
        'device_subtype': 'deviceSubtype',
        'recommendation': 'recommendation',
        'recommendation_id': 'recommendationId',
        'recommendation_status': 'recommendationStatus',
        'updated_at_ms': 'updatedAtMS',
        'cloud_provider': 'cloudProvider',
        'cloud_service_type': 'cloudServiceType',
        'id': 'id'
    }

    def __init__(self, resource_display_name=None, resource_id=None, provider_console_url=None, annual_savings=None, recommendation_category=None, created_at_ms=None, criteria=None, cloud_account_id=None, device_subtype=None, recommendation=None, recommendation_id=None, recommendation_status=None, updated_at_ms=None, cloud_provider=None, cloud_service_type=None, id=None):  # noqa: E501
        """RestCloudRecommendationV3 - a model defined in Swagger"""  # noqa: E501
        self._resource_display_name = None
        self._resource_id = None
        self._provider_console_url = None
        self._annual_savings = None
        self._recommendation_category = None
        self._created_at_ms = None
        self._criteria = None
        self._cloud_account_id = None
        self._device_subtype = None
        self._recommendation = None
        self._recommendation_id = None
        self._recommendation_status = None
        self._updated_at_ms = None
        self._cloud_provider = None
        self._cloud_service_type = None
        self._id = None
        self.discriminator = None
        if resource_display_name is not None:
            self.resource_display_name = resource_display_name
        if resource_id is not None:
            self.resource_id = resource_id
        if provider_console_url is not None:
            self.provider_console_url = provider_console_url
        if annual_savings is not None:
            self.annual_savings = annual_savings
        if recommendation_category is not None:
            self.recommendation_category = recommendation_category
        if created_at_ms is not None:
            self.created_at_ms = created_at_ms
        if criteria is not None:
            self.criteria = criteria
        if cloud_account_id is not None:
            self.cloud_account_id = cloud_account_id
        if device_subtype is not None:
            self.device_subtype = device_subtype
        if recommendation is not None:
            self.recommendation = recommendation
        if recommendation_id is not None:
            self.recommendation_id = recommendation_id
        if recommendation_status is not None:
            self.recommendation_status = recommendation_status
        if updated_at_ms is not None:
            self.updated_at_ms = updated_at_ms
        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if cloud_service_type is not None:
            self.cloud_service_type = cloud_service_type
        if id is not None:
            self.id = id

    @property
    def resource_display_name(self):
        """Gets the resource_display_name of this RestCloudRecommendationV3.  # noqa: E501

        Display name of the resource associated with the recommendation  # noqa: E501

        :return: The resource_display_name of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._resource_display_name

    @resource_display_name.setter
    def resource_display_name(self, resource_display_name):
        """Sets the resource_display_name of this RestCloudRecommendationV3.

        Display name of the resource associated with the recommendation  # noqa: E501

        :param resource_display_name: The resource_display_name of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._resource_display_name = resource_display_name

    @property
    def resource_id(self):
        """Gets the resource_id of this RestCloudRecommendationV3.  # noqa: E501

        ID of the resource associated with the recommendation  # noqa: E501

        :return: The resource_id of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this RestCloudRecommendationV3.

        ID of the resource associated with the recommendation  # noqa: E501

        :param resource_id: The resource_id of this RestCloudRecommendationV3.  # noqa: E501
        :type: int
        """

        self._resource_id = resource_id

    @property
    def provider_console_url(self):
        """Gets the provider_console_url of this RestCloudRecommendationV3.  # noqa: E501

        URL to the resource in the cloud provider's console  # noqa: E501

        :return: The provider_console_url of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._provider_console_url

    @provider_console_url.setter
    def provider_console_url(self, provider_console_url):
        """Sets the provider_console_url of this RestCloudRecommendationV3.

        URL to the resource in the cloud provider's console  # noqa: E501

        :param provider_console_url: The provider_console_url of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._provider_console_url = provider_console_url

    @property
    def annual_savings(self):
        """Gets the annual_savings of this RestCloudRecommendationV3.  # noqa: E501

        Potential annual cost savings in USD  # noqa: E501

        :return: The annual_savings of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: float
        """
        return self._annual_savings

    @annual_savings.setter
    def annual_savings(self, annual_savings):
        """Sets the annual_savings of this RestCloudRecommendationV3.

        Potential annual cost savings in USD  # noqa: E501

        :param annual_savings: The annual_savings of this RestCloudRecommendationV3.  # noqa: E501
        :type: float
        """

        self._annual_savings = annual_savings

    @property
    def recommendation_category(self):
        """Gets the recommendation_category of this RestCloudRecommendationV3.  # noqa: E501

        Recommendation category  # noqa: E501

        :return: The recommendation_category of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_category

    @recommendation_category.setter
    def recommendation_category(self, recommendation_category):
        """Sets the recommendation_category of this RestCloudRecommendationV3.

        Recommendation category  # noqa: E501

        :param recommendation_category: The recommendation_category of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._recommendation_category = recommendation_category

    @property
    def created_at_ms(self):
        """Gets the created_at_ms of this RestCloudRecommendationV3.  # noqa: E501

        Date when the recommendation was generated, in epoch milliseconds  # noqa: E501

        :return: The created_at_ms of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: int
        """
        return self._created_at_ms

    @created_at_ms.setter
    def created_at_ms(self, created_at_ms):
        """Sets the created_at_ms of this RestCloudRecommendationV3.

        Date when the recommendation was generated, in epoch milliseconds  # noqa: E501

        :param created_at_ms: The created_at_ms of this RestCloudRecommendationV3.  # noqa: E501
        :type: int
        """

        self._created_at_ms = created_at_ms

    @property
    def criteria(self):
        """Gets the criteria of this RestCloudRecommendationV3.  # noqa: E501

        Criteria for the recommendation  # noqa: E501

        :return: The criteria of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this RestCloudRecommendationV3.

        Criteria for the recommendation  # noqa: E501

        :param criteria: The criteria of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._criteria = criteria

    @property
    def cloud_account_id(self):
        """Gets the cloud_account_id of this RestCloudRecommendationV3.  # noqa: E501

        ID of the cloud account associated with the recommendation  # noqa: E501

        :return: The cloud_account_id of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._cloud_account_id

    @cloud_account_id.setter
    def cloud_account_id(self, cloud_account_id):
        """Sets the cloud_account_id of this RestCloudRecommendationV3.

        ID of the cloud account associated with the recommendation  # noqa: E501

        :param cloud_account_id: The cloud_account_id of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._cloud_account_id = cloud_account_id

    @property
    def device_subtype(self):
        """Gets the device_subtype of this RestCloudRecommendationV3.  # noqa: E501

        Device subtype associated with the recommendation  # noqa: E501

        :return: The device_subtype of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._device_subtype

    @device_subtype.setter
    def device_subtype(self, device_subtype):
        """Sets the device_subtype of this RestCloudRecommendationV3.

        Device subtype associated with the recommendation  # noqa: E501

        :param device_subtype: The device_subtype of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._device_subtype = device_subtype

    @property
    def recommendation(self):
        """Gets the recommendation of this RestCloudRecommendationV3.  # noqa: E501

        Recommendation details  # noqa: E501

        :return: The recommendation of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this RestCloudRecommendationV3.

        Recommendation details  # noqa: E501

        :param recommendation: The recommendation of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this RestCloudRecommendationV3.  # noqa: E501

        Unique numerical identifier for the recommendation  # noqa: E501

        :return: The recommendation_id of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: int
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this RestCloudRecommendationV3.

        Unique numerical identifier for the recommendation  # noqa: E501

        :param recommendation_id: The recommendation_id of this RestCloudRecommendationV3.  # noqa: E501
        :type: int
        """

        self._recommendation_id = recommendation_id

    @property
    def recommendation_status(self):
        """Gets the recommendation_status of this RestCloudRecommendationV3.  # noqa: E501

        Status of the recommendation  # noqa: E501

        :return: The recommendation_status of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_status

    @recommendation_status.setter
    def recommendation_status(self, recommendation_status):
        """Sets the recommendation_status of this RestCloudRecommendationV3.

        Status of the recommendation  # noqa: E501

        :param recommendation_status: The recommendation_status of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._recommendation_status = recommendation_status

    @property
    def updated_at_ms(self):
        """Gets the updated_at_ms of this RestCloudRecommendationV3.  # noqa: E501

        Date when the recommendation was last updated, in epoch milliseconds  # noqa: E501

        :return: The updated_at_ms of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: int
        """
        return self._updated_at_ms

    @updated_at_ms.setter
    def updated_at_ms(self, updated_at_ms):
        """Sets the updated_at_ms of this RestCloudRecommendationV3.

        Date when the recommendation was last updated, in epoch milliseconds  # noqa: E501

        :param updated_at_ms: The updated_at_ms of this RestCloudRecommendationV3.  # noqa: E501
        :type: int
        """

        self._updated_at_ms = updated_at_ms

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this RestCloudRecommendationV3.  # noqa: E501

        Cloud provider type associated with the recommendation  # noqa: E501

        :return: The cloud_provider of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this RestCloudRecommendationV3.

        Cloud provider type associated with the recommendation  # noqa: E501

        :param cloud_provider: The cloud_provider of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def cloud_service_type(self):
        """Gets the cloud_service_type of this RestCloudRecommendationV3.  # noqa: E501

        Cloud service type associated with the recommendation  # noqa: E501

        :return: The cloud_service_type of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._cloud_service_type

    @cloud_service_type.setter
    def cloud_service_type(self, cloud_service_type):
        """Sets the cloud_service_type of this RestCloudRecommendationV3.

        Cloud service type associated with the recommendation  # noqa: E501

        :param cloud_service_type: The cloud_service_type of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._cloud_service_type = cloud_service_type

    @property
    def id(self):
        """Gets the id of this RestCloudRecommendationV3.  # noqa: E501

        Unique identifier for the recommendation, including the recommendation category  # noqa: E501

        :return: The id of this RestCloudRecommendationV3.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestCloudRecommendationV3.

        Unique identifier for the recommendation, including the recommendation category  # noqa: E501

        :param id: The id of this RestCloudRecommendationV3.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestCloudRecommendationV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestCloudRecommendationV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
