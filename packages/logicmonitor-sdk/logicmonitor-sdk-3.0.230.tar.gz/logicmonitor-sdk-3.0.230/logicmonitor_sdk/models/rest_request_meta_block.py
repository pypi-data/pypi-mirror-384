# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestRequestMetaBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paging_info': 'PagingInfo',
        'scope_id': 'ObjectIdentifier',
        'selected_id': 'ObjectIdentifier',
        'columns': 'JsonNode',
        'default_filter': 'str',
        'paging': 'JsonNode',
        'sort': 'str',
        'type': 'str',
        'sort_expression': 'SortInfo',
        'filter': 'FilterBlock',
        'filter_collection': 'IModelFilterCollection',
        'selected_ids': 'list[ObjectIdentifier]',
        'column_filter_collection': 'IColumnFilterCollection',
        'paging_info_or_default': 'PagingInfo'
    }

    attribute_map = {
        'paging_info': 'pagingInfo',
        'scope_id': 'scopeId',
        'selected_id': 'selectedId',
        'columns': 'columns',
        'default_filter': 'defaultFilter',
        'paging': 'paging',
        'sort': 'sort',
        'type': 'type',
        'sort_expression': 'sortExpression',
        'filter': 'filter',
        'filter_collection': 'filterCollection',
        'selected_ids': 'selectedIds',
        'column_filter_collection': 'columnFilterCollection',
        'paging_info_or_default': 'pagingInfoOrDefault'
    }

    def __init__(self, paging_info=None, scope_id=None, selected_id=None, columns=None, default_filter=None, paging=None, sort=None, type=None, sort_expression=None, filter=None, filter_collection=None, selected_ids=None, column_filter_collection=None, paging_info_or_default=None):  # noqa: E501
        """RestRequestMetaBlock - a model defined in Swagger"""  # noqa: E501
        self._paging_info = None
        self._scope_id = None
        self._selected_id = None
        self._columns = None
        self._default_filter = None
        self._paging = None
        self._sort = None
        self._type = None
        self._sort_expression = None
        self._filter = None
        self._filter_collection = None
        self._selected_ids = None
        self._column_filter_collection = None
        self._paging_info_or_default = None
        self.discriminator = None
        if paging_info is not None:
            self.paging_info = paging_info
        if scope_id is not None:
            self.scope_id = scope_id
        if selected_id is not None:
            self.selected_id = selected_id
        if columns is not None:
            self.columns = columns
        if default_filter is not None:
            self.default_filter = default_filter
        if paging is not None:
            self.paging = paging
        if sort is not None:
            self.sort = sort
        if type is not None:
            self.type = type
        if sort_expression is not None:
            self.sort_expression = sort_expression
        if filter is not None:
            self.filter = filter
        if filter_collection is not None:
            self.filter_collection = filter_collection
        if selected_ids is not None:
            self.selected_ids = selected_ids
        if column_filter_collection is not None:
            self.column_filter_collection = column_filter_collection
        if paging_info_or_default is not None:
            self.paging_info_or_default = paging_info_or_default

    @property
    def paging_info(self):
        """Gets the paging_info of this RestRequestMetaBlock.  # noqa: E501


        :return: The paging_info of this RestRequestMetaBlock.  # noqa: E501
        :rtype: PagingInfo
        """
        return self._paging_info

    @paging_info.setter
    def paging_info(self, paging_info):
        """Sets the paging_info of this RestRequestMetaBlock.


        :param paging_info: The paging_info of this RestRequestMetaBlock.  # noqa: E501
        :type: PagingInfo
        """

        self._paging_info = paging_info

    @property
    def scope_id(self):
        """Gets the scope_id of this RestRequestMetaBlock.  # noqa: E501


        :return: The scope_id of this RestRequestMetaBlock.  # noqa: E501
        :rtype: ObjectIdentifier
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this RestRequestMetaBlock.


        :param scope_id: The scope_id of this RestRequestMetaBlock.  # noqa: E501
        :type: ObjectIdentifier
        """

        self._scope_id = scope_id

    @property
    def selected_id(self):
        """Gets the selected_id of this RestRequestMetaBlock.  # noqa: E501


        :return: The selected_id of this RestRequestMetaBlock.  # noqa: E501
        :rtype: ObjectIdentifier
        """
        return self._selected_id

    @selected_id.setter
    def selected_id(self, selected_id):
        """Sets the selected_id of this RestRequestMetaBlock.


        :param selected_id: The selected_id of this RestRequestMetaBlock.  # noqa: E501
        :type: ObjectIdentifier
        """

        self._selected_id = selected_id

    @property
    def columns(self):
        """Gets the columns of this RestRequestMetaBlock.  # noqa: E501


        :return: The columns of this RestRequestMetaBlock.  # noqa: E501
        :rtype: JsonNode
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this RestRequestMetaBlock.


        :param columns: The columns of this RestRequestMetaBlock.  # noqa: E501
        :type: JsonNode
        """

        self._columns = columns

    @property
    def default_filter(self):
        """Gets the default_filter of this RestRequestMetaBlock.  # noqa: E501


        :return: The default_filter of this RestRequestMetaBlock.  # noqa: E501
        :rtype: str
        """
        return self._default_filter

    @default_filter.setter
    def default_filter(self, default_filter):
        """Sets the default_filter of this RestRequestMetaBlock.


        :param default_filter: The default_filter of this RestRequestMetaBlock.  # noqa: E501
        :type: str
        """
        allowed_values = ["accessLogs", "accessGroups", "adminNotifications", "aggregateSavings", "alerts", "visualizationAggregateEntry", "visualizationAggregateValue", "alertDependencyRules", "alertRoutings", "alertRules", "diagnosticRules", "alertTuningConfigAncestry", "alertTuningConfigs", "alertTuningConfigsHistory", "alertTuningConfigSlots", "alertTuningGraphs", "alertsTuningSeries", "asnMappings", "billingConfigurations", "cloudAccounts", "cloudResourceProperty", "clusterAlertRoutings", "clusterAlertTuningConfigs", "collectors", "collectorEvents", "collectorGroups", "collectorStatus", "collectorUpgradeHistory", "collectorUpgradeInfo", "configSources", "collectorLogs", "config", "configAlert", "correlationGraphs", "dashboards", "datapoints", "dataQueries", "dataSources", "dataSourceInstances", "dataSourceInstanceAlertSettings", "dataSourceInstanceGroups", "datasets", "dnsMappings", "escalationChains", "eventSources", "integrations", "integrationAuditLogs", "logSources", "exchangeAccessGroups", "exchangeActiveDiscoveryFilters", "exchangeAppliesToFunctions", "exchangeChangelogs", "exchangeConfigSources", "exchangeConfigSourceConfigChecks", "exchangeDataSources", "exchangeDataSourceDataPoints", "exchangeDataSourceGraphs", "exchangeDataSourceGraphSeries", "exchangeDataSourceGraphVirtualSeries", "exchangeDataSourceOverviewGraphs", "exchangeDataSourceOverviewGraphSeries", "exchangeDataSourceOverviewGraphVirtualSeries", "exchangeDiagnosticSources", "exchangeEventSources", "exchangeEventSourceFilters", "exchangeEventSourceLogFiles", "exchangeJobMonitors", "exchangeLogSources", "exchangeLogSourceFilters", "exchangeSnmpTrapLogSourceFilters", "exchangeLogSourceLogFields", "exchangeLogSourceResourceMappings", "exchangeLogSourceCollectorMappings", "exchangeLogicModules", "exchangeLogicModulePackages", "exchangeLogicModulePermissions", "exchangePackagedLogicModules", "exchangePropertySources", "exchangeSNMPSysOIDMaps", "exchangeTopologySources", "externalResourceIdentifiers", "failedDataSourceInfo", "filterFieldList", "graphs", "graphMeta", "healthMetrics", "hierarchy", "hostclusterAlertDefs", "hostDiagnosticSourceDetails", "diagnosticExecutionContext", "latestDiagnosticExecutionResultContext", "diagnosticExecutionSearchContext", "diagnosticSourceAssociatedDevices", "hostGroups", "internalAlertSettings", "jobMonitors", "jobMonitorExecutions", "lmSupportAccessHasConnection", "lmSupportAccessState", "lmotelCollectors", "lmotelCollectorVersions", "lmCollectorVersions", "logalerts", "logicModuleGroups", "logpipelinesources", "logpipelineprocessors", "matchedEvents", "metaGroupings", "metricsCorrelation", "monitoredResources", "netscanGroups", "netscans", "netflow", "netflowAlertRule", "allLevels", "nocWidgets", "normalizedProperties", "netscanPolicies", "netscanExecutions", "opsNotes", "opsNoteResourceScopes", "opsNoteServiceScopes", "opsNoteResourceGroupScopes", "opsNoteServiceGroupScopes", "opsNoteGroupAllScopes", "opsNoteTags", "orgTreeNodes", "portMappings", "productIds", "properties", "propertySources", "rawData", "recentlyDeletedItems", "recipientGroups", "cloudRecommendations", "cloudRecommendationAdditionalData", "recommendationTypes", "relationships", "reports", "reportHistories", "reportGroups", "resources", "resourceDashboards", "resourceDataSources", "resourceDatapoints", "resourceEventSources", "resourceConfigSources", "ConfigSourcesGoldStandard", "ConfigSourceConfiguration", "resourceDashboardTemplates", "resourceGroups", "resourceGroupDataSourceConfigs", "resourceGroupEventSourceConfigs", "resourceGroupInfoSourceConfigs", "resourceJobMonitors", "resourceLogPipelineResources", "resourceLogSources", "sdts", "services", "serviceCheckpoints", "serviceGroups", "sharedQueries", "siteMonitors", "slaWidgets", "spanCount", "securityRecommendations", "subscriptions", "topology", "topologyMaps", "topologyMapsHistogram", "topologyMapsGraphs", "subEntities", "subEntitiesDetails", "topologySavedMapsGroupType", "topologySavedMapsGroup", "topologyManualMapping", "topologyManualInterfaceList", "traffic", "treeNodes", "unmonitoredResources", "userdata", "users", "userSettings", "websiteCheckpoints", "websiteGroups", "websites", "ServicePreview", "ServiceTemplateView", "ServiceMemberPreview", "RestServiceTemplate", "ServiceTemplateServiceStats", "synthetics", "usage", "tracesDevicesNamesIds", "tracesGraphIds", "tracesServices", "tracesDeviceDatasources", "tracesDeviceDatasourceInstances", "tracesNamespaceGraphDetails", "tracesResourceNamesIds", "tracesTopologyEdgeData", "members", "apiTokens", "roleGroups", "roles", "userGroups", "sharingTokens", "syntheticsDSInstanceRawData", "syntheticsDSInstanceStepData", "syntheticsDSInstanceAlerts", "usageDimensions", "vizResourceInfo", "lmqlResult", "partitions", "logPartitionChangelog", "cloudRecommendationStatus", "recommendationStatusUpdateRequest", "websiteDevice"]  # noqa: E501
        if default_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `default_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(default_filter, allowed_values)
            )

        self._default_filter = default_filter

    @property
    def paging(self):
        """Gets the paging of this RestRequestMetaBlock.  # noqa: E501


        :return: The paging of this RestRequestMetaBlock.  # noqa: E501
        :rtype: JsonNode
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this RestRequestMetaBlock.


        :param paging: The paging of this RestRequestMetaBlock.  # noqa: E501
        :type: JsonNode
        """

        self._paging = paging

    @property
    def sort(self):
        """Gets the sort of this RestRequestMetaBlock.  # noqa: E501


        :return: The sort of this RestRequestMetaBlock.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this RestRequestMetaBlock.


        :param sort: The sort of this RestRequestMetaBlock.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def type(self):
        """Gets the type of this RestRequestMetaBlock.  # noqa: E501


        :return: The type of this RestRequestMetaBlock.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestRequestMetaBlock.


        :param type: The type of this RestRequestMetaBlock.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sort_expression(self):
        """Gets the sort_expression of this RestRequestMetaBlock.  # noqa: E501


        :return: The sort_expression of this RestRequestMetaBlock.  # noqa: E501
        :rtype: SortInfo
        """
        return self._sort_expression

    @sort_expression.setter
    def sort_expression(self, sort_expression):
        """Sets the sort_expression of this RestRequestMetaBlock.


        :param sort_expression: The sort_expression of this RestRequestMetaBlock.  # noqa: E501
        :type: SortInfo
        """

        self._sort_expression = sort_expression

    @property
    def filter(self):
        """Gets the filter of this RestRequestMetaBlock.  # noqa: E501


        :return: The filter of this RestRequestMetaBlock.  # noqa: E501
        :rtype: FilterBlock
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this RestRequestMetaBlock.


        :param filter: The filter of this RestRequestMetaBlock.  # noqa: E501
        :type: FilterBlock
        """

        self._filter = filter

    @property
    def filter_collection(self):
        """Gets the filter_collection of this RestRequestMetaBlock.  # noqa: E501


        :return: The filter_collection of this RestRequestMetaBlock.  # noqa: E501
        :rtype: IModelFilterCollection
        """
        return self._filter_collection

    @filter_collection.setter
    def filter_collection(self, filter_collection):
        """Sets the filter_collection of this RestRequestMetaBlock.


        :param filter_collection: The filter_collection of this RestRequestMetaBlock.  # noqa: E501
        :type: IModelFilterCollection
        """

        self._filter_collection = filter_collection

    @property
    def selected_ids(self):
        """Gets the selected_ids of this RestRequestMetaBlock.  # noqa: E501


        :return: The selected_ids of this RestRequestMetaBlock.  # noqa: E501
        :rtype: list[ObjectIdentifier]
        """
        return self._selected_ids

    @selected_ids.setter
    def selected_ids(self, selected_ids):
        """Sets the selected_ids of this RestRequestMetaBlock.


        :param selected_ids: The selected_ids of this RestRequestMetaBlock.  # noqa: E501
        :type: list[ObjectIdentifier]
        """

        self._selected_ids = selected_ids

    @property
    def column_filter_collection(self):
        """Gets the column_filter_collection of this RestRequestMetaBlock.  # noqa: E501


        :return: The column_filter_collection of this RestRequestMetaBlock.  # noqa: E501
        :rtype: IColumnFilterCollection
        """
        return self._column_filter_collection

    @column_filter_collection.setter
    def column_filter_collection(self, column_filter_collection):
        """Sets the column_filter_collection of this RestRequestMetaBlock.


        :param column_filter_collection: The column_filter_collection of this RestRequestMetaBlock.  # noqa: E501
        :type: IColumnFilterCollection
        """

        self._column_filter_collection = column_filter_collection

    @property
    def paging_info_or_default(self):
        """Gets the paging_info_or_default of this RestRequestMetaBlock.  # noqa: E501


        :return: The paging_info_or_default of this RestRequestMetaBlock.  # noqa: E501
        :rtype: PagingInfo
        """
        return self._paging_info_or_default

    @paging_info_or_default.setter
    def paging_info_or_default(self, paging_info_or_default):
        """Sets the paging_info_or_default of this RestRequestMetaBlock.


        :param paging_info_or_default: The paging_info_or_default of this RestRequestMetaBlock.  # noqa: E501
        :type: PagingInfo
        """

        self._paging_info_or_default = paging_info_or_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestRequestMetaBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestRequestMetaBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
