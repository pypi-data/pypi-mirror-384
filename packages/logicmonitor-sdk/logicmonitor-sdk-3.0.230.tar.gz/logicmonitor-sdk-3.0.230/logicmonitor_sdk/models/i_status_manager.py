# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IStatusManager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successes': 'RestRequestAllIds',
        'warnings': 'RestRequestAllIds',
        'warning_count': 'int',
        'error_count': 'int',
        'errors': 'RestRequestAllIds'
    }

    attribute_map = {
        'successes': 'successes',
        'warnings': 'warnings',
        'warning_count': 'warningCount',
        'error_count': 'errorCount',
        'errors': 'errors'
    }

    def __init__(self, successes=None, warnings=None, warning_count=None, error_count=None, errors=None):  # noqa: E501
        """IStatusManager - a model defined in Swagger"""  # noqa: E501
        self._successes = None
        self._warnings = None
        self._warning_count = None
        self._error_count = None
        self._errors = None
        self.discriminator = None
        if successes is not None:
            self.successes = successes
        if warnings is not None:
            self.warnings = warnings
        if warning_count is not None:
            self.warning_count = warning_count
        if error_count is not None:
            self.error_count = error_count
        if errors is not None:
            self.errors = errors

    @property
    def successes(self):
        """Gets the successes of this IStatusManager.  # noqa: E501


        :return: The successes of this IStatusManager.  # noqa: E501
        :rtype: RestRequestAllIds
        """
        return self._successes

    @successes.setter
    def successes(self, successes):
        """Sets the successes of this IStatusManager.


        :param successes: The successes of this IStatusManager.  # noqa: E501
        :type: RestRequestAllIds
        """

        self._successes = successes

    @property
    def warnings(self):
        """Gets the warnings of this IStatusManager.  # noqa: E501


        :return: The warnings of this IStatusManager.  # noqa: E501
        :rtype: RestRequestAllIds
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this IStatusManager.


        :param warnings: The warnings of this IStatusManager.  # noqa: E501
        :type: RestRequestAllIds
        """

        self._warnings = warnings

    @property
    def warning_count(self):
        """Gets the warning_count of this IStatusManager.  # noqa: E501


        :return: The warning_count of this IStatusManager.  # noqa: E501
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this IStatusManager.


        :param warning_count: The warning_count of this IStatusManager.  # noqa: E501
        :type: int
        """

        self._warning_count = warning_count

    @property
    def error_count(self):
        """Gets the error_count of this IStatusManager.  # noqa: E501


        :return: The error_count of this IStatusManager.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this IStatusManager.


        :param error_count: The error_count of this IStatusManager.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def errors(self):
        """Gets the errors of this IStatusManager.  # noqa: E501


        :return: The errors of this IStatusManager.  # noqa: E501
        :rtype: RestRequestAllIds
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this IStatusManager.


        :param errors: The errors of this IStatusManager.  # noqa: E501
        :type: RestRequestAllIds
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IStatusManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IStatusManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
