# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_slices_can_be_shown': 'int',
        'granularity_drill_down_steps': 'list[str]',
        'hide_zero_values': 'bool',
        'show_labels_and_lines_on_pc': 'bool',
        'group_by_drill_down_steps': 'list[list[str]]',
        'start_inclusive': 'int',
        'end_exclusive': 'int',
        'group_remaining_as_others': 'bool',
        'filters': 'JSONArray',
        'title': 'str'
    }

    attribute_map = {
        'max_slices_can_be_shown': 'maxSlicesCanBeShown',
        'granularity_drill_down_steps': 'granularityDrillDownSteps',
        'hide_zero_values': 'hideZeroValues',
        'show_labels_and_lines_on_pc': 'showLabelsAndLinesOnPC',
        'group_by_drill_down_steps': 'groupByDrillDownSteps',
        'start_inclusive': 'startInclusive',
        'end_exclusive': 'endExclusive',
        'group_remaining_as_others': 'groupRemainingAsOthers',
        'filters': 'filters',
        'title': 'title'
    }

    def __init__(self, max_slices_can_be_shown=None, granularity_drill_down_steps=None, hide_zero_values=None, show_labels_and_lines_on_pc=None, group_by_drill_down_steps=None, start_inclusive=None, end_exclusive=None, group_remaining_as_others=None, filters=None, title=None):  # noqa: E501
        """BillingInfo - a model defined in Swagger"""  # noqa: E501
        self._max_slices_can_be_shown = None
        self._granularity_drill_down_steps = None
        self._hide_zero_values = None
        self._show_labels_and_lines_on_pc = None
        self._group_by_drill_down_steps = None
        self._start_inclusive = None
        self._end_exclusive = None
        self._group_remaining_as_others = None
        self._filters = None
        self._title = None
        self.discriminator = None
        if max_slices_can_be_shown is not None:
            self.max_slices_can_be_shown = max_slices_can_be_shown
        if granularity_drill_down_steps is not None:
            self.granularity_drill_down_steps = granularity_drill_down_steps
        if hide_zero_values is not None:
            self.hide_zero_values = hide_zero_values
        if show_labels_and_lines_on_pc is not None:
            self.show_labels_and_lines_on_pc = show_labels_and_lines_on_pc
        if group_by_drill_down_steps is not None:
            self.group_by_drill_down_steps = group_by_drill_down_steps
        if start_inclusive is not None:
            self.start_inclusive = start_inclusive
        if end_exclusive is not None:
            self.end_exclusive = end_exclusive
        if group_remaining_as_others is not None:
            self.group_remaining_as_others = group_remaining_as_others
        if filters is not None:
            self.filters = filters
        if title is not None:
            self.title = title

    @property
    def max_slices_can_be_shown(self):
        """Gets the max_slices_can_be_shown of this BillingInfo.  # noqa: E501

        The maximum number of slices you'd like displayed in the pie chart  # noqa: E501

        :return: The max_slices_can_be_shown of this BillingInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_slices_can_be_shown

    @max_slices_can_be_shown.setter
    def max_slices_can_be_shown(self, max_slices_can_be_shown):
        """Sets the max_slices_can_be_shown of this BillingInfo.

        The maximum number of slices you'd like displayed in the pie chart  # noqa: E501

        :param max_slices_can_be_shown: The max_slices_can_be_shown of this BillingInfo.  # noqa: E501
        :type: int
        """

        self._max_slices_can_be_shown = max_slices_can_be_shown

    @property
    def granularity_drill_down_steps(self):
        """Gets the granularity_drill_down_steps of this BillingInfo.  # noqa: E501

        The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget  # noqa: E501

        :return: The granularity_drill_down_steps of this BillingInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._granularity_drill_down_steps

    @granularity_drill_down_steps.setter
    def granularity_drill_down_steps(self, granularity_drill_down_steps):
        """Sets the granularity_drill_down_steps of this BillingInfo.

        The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget  # noqa: E501

        :param granularity_drill_down_steps: The granularity_drill_down_steps of this BillingInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DAY", "WEEK", "MONTH", "QUARTER", "NONE"]  # noqa: E501
        if not set(granularity_drill_down_steps).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `granularity_drill_down_steps` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(granularity_drill_down_steps) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._granularity_drill_down_steps = granularity_drill_down_steps

    @property
    def hide_zero_values(self):
        """Gets the hide_zero_values of this BillingInfo.  # noqa: E501

        Whether items at 0% should be hidden  # noqa: E501

        :return: The hide_zero_values of this BillingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._hide_zero_values

    @hide_zero_values.setter
    def hide_zero_values(self, hide_zero_values):
        """Sets the hide_zero_values of this BillingInfo.

        Whether items at 0% should be hidden  # noqa: E501

        :param hide_zero_values: The hide_zero_values of this BillingInfo.  # noqa: E501
        :type: bool
        """

        self._hide_zero_values = hide_zero_values

    @property
    def show_labels_and_lines_on_pc(self):
        """Gets the show_labels_and_lines_on_pc of this BillingInfo.  # noqa: E501

        Whether or not labels and lines should be displayed on the pie chart  # noqa: E501

        :return: The show_labels_and_lines_on_pc of this BillingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._show_labels_and_lines_on_pc

    @show_labels_and_lines_on_pc.setter
    def show_labels_and_lines_on_pc(self, show_labels_and_lines_on_pc):
        """Sets the show_labels_and_lines_on_pc of this BillingInfo.

        Whether or not labels and lines should be displayed on the pie chart  # noqa: E501

        :param show_labels_and_lines_on_pc: The show_labels_and_lines_on_pc of this BillingInfo.  # noqa: E501
        :type: bool
        """

        self._show_labels_and_lines_on_pc = show_labels_and_lines_on_pc

    @property
    def group_by_drill_down_steps(self):
        """Gets the group_by_drill_down_steps of this BillingInfo.  # noqa: E501

        The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget  # noqa: E501

        :return: The group_by_drill_down_steps of this BillingInfo.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._group_by_drill_down_steps

    @group_by_drill_down_steps.setter
    def group_by_drill_down_steps(self, group_by_drill_down_steps):
        """Sets the group_by_drill_down_steps of this BillingInfo.

        The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget  # noqa: E501

        :param group_by_drill_down_steps: The group_by_drill_down_steps of this BillingInfo.  # noqa: E501
        :type: list[list[str]]
        """

        self._group_by_drill_down_steps = group_by_drill_down_steps

    @property
    def start_inclusive(self):
        """Gets the start_inclusive of this BillingInfo.  # noqa: E501

        The title that will be displayed above the pie chart  # noqa: E501

        :return: The start_inclusive of this BillingInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_inclusive

    @start_inclusive.setter
    def start_inclusive(self, start_inclusive):
        """Sets the start_inclusive of this BillingInfo.

        The title that will be displayed above the pie chart  # noqa: E501

        :param start_inclusive: The start_inclusive of this BillingInfo.  # noqa: E501
        :type: int
        """

        self._start_inclusive = start_inclusive

    @property
    def end_exclusive(self):
        """Gets the end_exclusive of this BillingInfo.  # noqa: E501

        The title that will be displayed above the pie chart  # noqa: E501

        :return: The end_exclusive of this BillingInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_exclusive

    @end_exclusive.setter
    def end_exclusive(self, end_exclusive):
        """Sets the end_exclusive of this BillingInfo.

        The title that will be displayed above the pie chart  # noqa: E501

        :param end_exclusive: The end_exclusive of this BillingInfo.  # noqa: E501
        :type: int
        """

        self._end_exclusive = end_exclusive

    @property
    def group_remaining_as_others(self):
        """Gets the group_remaining_as_others of this BillingInfo.  # noqa: E501

        If the number of slices exceeds the maxSlicesCanBeShown, this value indicates whether the remaining slices should be grouped together  # noqa: E501

        :return: The group_remaining_as_others of this BillingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._group_remaining_as_others

    @group_remaining_as_others.setter
    def group_remaining_as_others(self, group_remaining_as_others):
        """Sets the group_remaining_as_others of this BillingInfo.

        If the number of slices exceeds the maxSlicesCanBeShown, this value indicates whether the remaining slices should be grouped together  # noqa: E501

        :param group_remaining_as_others: The group_remaining_as_others of this BillingInfo.  # noqa: E501
        :type: bool
        """

        self._group_remaining_as_others = group_remaining_as_others

    @property
    def filters(self):
        """Gets the filters of this BillingInfo.  # noqa: E501


        :return: The filters of this BillingInfo.  # noqa: E501
        :rtype: JSONArray
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this BillingInfo.


        :param filters: The filters of this BillingInfo.  # noqa: E501
        :type: JSONArray
        """

        self._filters = filters

    @property
    def title(self):
        """Gets the title of this BillingInfo.  # noqa: E501

        The title that will be displayed above the pie chart  # noqa: E501

        :return: The title of this BillingInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BillingInfo.

        The title that will be displayed above the pie chart  # noqa: E501

        :param title: The title of this BillingInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
