# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class SDTinventoryReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_range': 'str',
        'group_entity_table': 'list[SDTGroupEntityDataHolder]',
        'active': 'bool',
        'historical': 'bool',
        'metrics': 'list[SDTInventoryMetric]',
        'sdt_settings': 'str',
        'user': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'date_range': 'dateRange',
        'group_entity_table': 'groupEntityTable',
        'active': 'active',
        'historical': 'historical',
        'metrics': 'metrics',
        'sdt_settings': 'sdtSettings',
        'user': 'user'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, date_range=None, group_entity_table=None, active=None, historical=None, metrics=None, sdt_settings=None, user=None, *args, **kwargs):  # noqa: E501
        """SDTinventoryReport - a model defined in Swagger"""  # noqa: E501
        self._date_range = None
        self._group_entity_table = None
        self._active = None
        self._historical = None
        self._metrics = None
        self._sdt_settings = None
        self._user = None
        self.discriminator = None
        if date_range is not None:
            self.date_range = date_range
        if group_entity_table is not None:
            self.group_entity_table = group_entity_table
        if active is not None:
            self.active = active
        if historical is not None:
            self.historical = historical
        if metrics is not None:
            self.metrics = metrics
        self.sdt_settings = sdt_settings
        if user is not None:
            self.user = user
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def date_range(self):
        """Gets the date_range of this SDTinventoryReport.  # noqa: E501

        The Time Range configured for the report.   # noqa: E501

        :return: The date_range of this SDTinventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this SDTinventoryReport.

        The Time Range configured for the report.   # noqa: E501

        :param date_range: The date_range of this SDTinventoryReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def group_entity_table(self):
        """Gets the group_entity_table of this SDTinventoryReport.  # noqa: E501


        :return: The group_entity_table of this SDTinventoryReport.  # noqa: E501
        :rtype: list[SDTGroupEntityDataHolder]
        """
        return self._group_entity_table

    @group_entity_table.setter
    def group_entity_table(self, group_entity_table):
        """Sets the group_entity_table of this SDTinventoryReport.


        :param group_entity_table: The group_entity_table of this SDTinventoryReport.  # noqa: E501
        :type: list[SDTGroupEntityDataHolder]
        """

        self._group_entity_table = group_entity_table

    @property
    def active(self):
        """Gets the active of this SDTinventoryReport.  # noqa: E501

        true: active sdts will be displayed in the report false: active sdts will not be displayed in the report the default value is false  # noqa: E501

        :return: The active of this SDTinventoryReport.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SDTinventoryReport.

        true: active sdts will be displayed in the report false: active sdts will not be displayed in the report the default value is false  # noqa: E501

        :param active: The active of this SDTinventoryReport.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def historical(self):
        """Gets the historical of this SDTinventoryReport.  # noqa: E501

        true: historical sdts will be displayed in the report  false: historical sdts will not be displayed in the report  # noqa: E501

        :return: The historical of this SDTinventoryReport.  # noqa: E501
        :rtype: bool
        """
        return self._historical

    @historical.setter
    def historical(self, historical):
        """Sets the historical of this SDTinventoryReport.

        true: historical sdts will be displayed in the report  false: historical sdts will not be displayed in the report  # noqa: E501

        :param historical: The historical of this SDTinventoryReport.  # noqa: E501
        :type: bool
        """

        self._historical = historical

    @property
    def metrics(self):
        """Gets the metrics of this SDTinventoryReport.  # noqa: E501


        :return: The metrics of this SDTinventoryReport.  # noqa: E501
        :rtype: list[SDTInventoryMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this SDTinventoryReport.


        :param metrics: The metrics of this SDTinventoryReport.  # noqa: E501
        :type: list[SDTInventoryMetric]
        """

        self._metrics = metrics

    @property
    def sdt_settings(self):
        """Gets the sdt_settings of this SDTinventoryReport.  # noqa: E501

        The sdt settings selected for the report  # noqa: E501

        :return: The sdt_settings of this SDTinventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._sdt_settings

    @sdt_settings.setter
    def sdt_settings(self, sdt_settings):
        """Sets the sdt_settings of this SDTinventoryReport.

        The sdt settings selected for the report  # noqa: E501

        :param sdt_settings: The sdt_settings of this SDTinventoryReport.  # noqa: E501
        :type: str
        """
        if sdt_settings is None:
            raise ValueError("Invalid value for `sdt_settings`, must not be `None`")  # noqa: E501

        self._sdt_settings = sdt_settings

    @property
    def user(self):
        """Gets the user of this SDTinventoryReport.  # noqa: E501

        The user name selected for the report  # noqa: E501

        :return: The user of this SDTinventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SDTinventoryReport.

        The user name selected for the report  # noqa: E501

        :param user: The user of this SDTinventoryReport.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SDTinventoryReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SDTinventoryReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
