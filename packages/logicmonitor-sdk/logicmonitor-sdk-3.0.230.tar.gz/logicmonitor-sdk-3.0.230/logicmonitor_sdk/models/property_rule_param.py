# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyRuleParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_rule_id': 'int',
        'name': 'str',
        'comment': 'str',
        'id': 'int',
        'value': 'str'
    }

    attribute_map = {
        'property_rule_id': 'propertyRuleId',
        'name': 'name',
        'comment': 'comment',
        'id': 'id',
        'value': 'value'
    }

    def __init__(self, property_rule_id=None, name=None, comment=None, id=None, value=None):  # noqa: E501
        """PropertyRuleParam - a model defined in Swagger"""  # noqa: E501
        self._property_rule_id = None
        self._name = None
        self._comment = None
        self._id = None
        self._value = None
        self.discriminator = None
        if property_rule_id is not None:
            self.property_rule_id = property_rule_id
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value

    @property
    def property_rule_id(self):
        """Gets the property_rule_id of this PropertyRuleParam.  # noqa: E501


        :return: The property_rule_id of this PropertyRuleParam.  # noqa: E501
        :rtype: int
        """
        return self._property_rule_id

    @property_rule_id.setter
    def property_rule_id(self, property_rule_id):
        """Sets the property_rule_id of this PropertyRuleParam.


        :param property_rule_id: The property_rule_id of this PropertyRuleParam.  # noqa: E501
        :type: int
        """

        self._property_rule_id = property_rule_id

    @property
    def name(self):
        """Gets the name of this PropertyRuleParam.  # noqa: E501


        :return: The name of this PropertyRuleParam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyRuleParam.


        :param name: The name of this PropertyRuleParam.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this PropertyRuleParam.  # noqa: E501


        :return: The comment of this PropertyRuleParam.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PropertyRuleParam.


        :param comment: The comment of this PropertyRuleParam.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this PropertyRuleParam.  # noqa: E501


        :return: The id of this PropertyRuleParam.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PropertyRuleParam.


        :param id: The id of this PropertyRuleParam.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this PropertyRuleParam.  # noqa: E501


        :return: The value of this PropertyRuleParam.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyRuleParam.


        :param value: The value of this PropertyRuleParam.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyRuleParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyRuleParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
