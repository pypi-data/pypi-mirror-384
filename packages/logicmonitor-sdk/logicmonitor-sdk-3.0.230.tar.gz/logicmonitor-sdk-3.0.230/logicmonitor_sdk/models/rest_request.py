# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_manager': 'IStatusManager',
        'diagnostics': 'RestRequestDiagnosticInfo',
        'diagnostic_block': 'RestRequestDiagnosticInfo',
        'data': 'RestRequestDataBlock',
        'meta': 'RestRequestMetaBlock',
        'all_ids': 'RestRequestAllIds'
    }

    attribute_map = {
        'status_manager': 'statusManager',
        'diagnostics': 'diagnostics',
        'diagnostic_block': 'diagnosticBlock',
        'data': 'data',
        'meta': 'meta',
        'all_ids': 'allIds'
    }

    def __init__(self, status_manager=None, diagnostics=None, diagnostic_block=None, data=None, meta=None, all_ids=None):  # noqa: E501
        """RestRequest - a model defined in Swagger"""  # noqa: E501
        self._status_manager = None
        self._diagnostics = None
        self._diagnostic_block = None
        self._data = None
        self._meta = None
        self._all_ids = None
        self.discriminator = None
        if status_manager is not None:
            self.status_manager = status_manager
        if diagnostics is not None:
            self.diagnostics = diagnostics
        if diagnostic_block is not None:
            self.diagnostic_block = diagnostic_block
        if data is not None:
            self.data = data
        if meta is not None:
            self.meta = meta
        if all_ids is not None:
            self.all_ids = all_ids

    @property
    def status_manager(self):
        """Gets the status_manager of this RestRequest.  # noqa: E501


        :return: The status_manager of this RestRequest.  # noqa: E501
        :rtype: IStatusManager
        """
        return self._status_manager

    @status_manager.setter
    def status_manager(self, status_manager):
        """Sets the status_manager of this RestRequest.


        :param status_manager: The status_manager of this RestRequest.  # noqa: E501
        :type: IStatusManager
        """

        self._status_manager = status_manager

    @property
    def diagnostics(self):
        """Gets the diagnostics of this RestRequest.  # noqa: E501


        :return: The diagnostics of this RestRequest.  # noqa: E501
        :rtype: RestRequestDiagnosticInfo
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this RestRequest.


        :param diagnostics: The diagnostics of this RestRequest.  # noqa: E501
        :type: RestRequestDiagnosticInfo
        """

        self._diagnostics = diagnostics

    @property
    def diagnostic_block(self):
        """Gets the diagnostic_block of this RestRequest.  # noqa: E501


        :return: The diagnostic_block of this RestRequest.  # noqa: E501
        :rtype: RestRequestDiagnosticInfo
        """
        return self._diagnostic_block

    @diagnostic_block.setter
    def diagnostic_block(self, diagnostic_block):
        """Sets the diagnostic_block of this RestRequest.


        :param diagnostic_block: The diagnostic_block of this RestRequest.  # noqa: E501
        :type: RestRequestDiagnosticInfo
        """

        self._diagnostic_block = diagnostic_block

    @property
    def data(self):
        """Gets the data of this RestRequest.  # noqa: E501


        :return: The data of this RestRequest.  # noqa: E501
        :rtype: RestRequestDataBlock
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RestRequest.


        :param data: The data of this RestRequest.  # noqa: E501
        :type: RestRequestDataBlock
        """

        self._data = data

    @property
    def meta(self):
        """Gets the meta of this RestRequest.  # noqa: E501


        :return: The meta of this RestRequest.  # noqa: E501
        :rtype: RestRequestMetaBlock
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this RestRequest.


        :param meta: The meta of this RestRequest.  # noqa: E501
        :type: RestRequestMetaBlock
        """

        self._meta = meta

    @property
    def all_ids(self):
        """Gets the all_ids of this RestRequest.  # noqa: E501


        :return: The all_ids of this RestRequest.  # noqa: E501
        :rtype: RestRequestAllIds
        """
        return self._all_ids

    @all_ids.setter
    def all_ids(self, all_ids):
        """Sets the all_ids of this RestRequest.


        :param all_ids: The all_ids of this RestRequest.  # noqa: E501
        :type: RestRequestAllIds
        """

        self._all_ids = all_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
