# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventSourceFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_source_id': 'int',
        'op': 'str',
        'origin_id': 'str',
        'name': 'str',
        'comment': 'str',
        'id': 'int',
        'value': 'str'
    }

    attribute_map = {
        'event_source_id': 'eventSourceId',
        'op': 'op',
        'origin_id': 'originId',
        'name': 'name',
        'comment': 'comment',
        'id': 'id',
        'value': 'value'
    }

    def __init__(self, event_source_id=None, op=None, origin_id=None, name=None, comment=None, id=None, value=None):  # noqa: E501
        """EventSourceFilter - a model defined in Swagger"""  # noqa: E501
        self._event_source_id = None
        self._op = None
        self._origin_id = None
        self._name = None
        self._comment = None
        self._id = None
        self._value = None
        self.discriminator = None
        if event_source_id is not None:
            self.event_source_id = event_source_id
        if op is not None:
            self.op = op
        if origin_id is not None:
            self.origin_id = origin_id
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value

    @property
    def event_source_id(self):
        """Gets the event_source_id of this EventSourceFilter.  # noqa: E501


        :return: The event_source_id of this EventSourceFilter.  # noqa: E501
        :rtype: int
        """
        return self._event_source_id

    @event_source_id.setter
    def event_source_id(self, event_source_id):
        """Sets the event_source_id of this EventSourceFilter.


        :param event_source_id: The event_source_id of this EventSourceFilter.  # noqa: E501
        :type: int
        """

        self._event_source_id = event_source_id

    @property
    def op(self):
        """Gets the op of this EventSourceFilter.  # noqa: E501


        :return: The op of this EventSourceFilter.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this EventSourceFilter.


        :param op: The op of this EventSourceFilter.  # noqa: E501
        :type: str
        """

        self._op = op

    @property
    def origin_id(self):
        """Gets the origin_id of this EventSourceFilter.  # noqa: E501


        :return: The origin_id of this EventSourceFilter.  # noqa: E501
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this EventSourceFilter.


        :param origin_id: The origin_id of this EventSourceFilter.  # noqa: E501
        :type: str
        """

        self._origin_id = origin_id

    @property
    def name(self):
        """Gets the name of this EventSourceFilter.  # noqa: E501


        :return: The name of this EventSourceFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventSourceFilter.


        :param name: The name of this EventSourceFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this EventSourceFilter.  # noqa: E501


        :return: The comment of this EventSourceFilter.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EventSourceFilter.


        :param comment: The comment of this EventSourceFilter.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this EventSourceFilter.  # noqa: E501


        :return: The id of this EventSourceFilter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSourceFilter.


        :param id: The id of this EventSourceFilter.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this EventSourceFilter.  # noqa: E501


        :return: The value of this EventSourceFilter.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventSourceFilter.


        :param value: The value of this EventSourceFilter.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventSourceFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventSourceFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
