# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class AlertsHealthCheckReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'active_only': 'bool',
        'chain': 'str',
        'instance': 'str',
        'anomaly': 'str',
        'date_range': 'str',
        'columns': 'list[DynamicColumn]',
        'data_point': 'str',
        'sdt_filter': 'str',
        'rule': 'str',
        'ack_filter': 'str',
        'dependency_routing_state': 'str',
        'dependency_role': 'str',
        'host': 'str',
        'host_group': 'str',
        'data_source': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'severity': 'severity',
        'active_only': 'activeOnly',
        'chain': 'chain',
        'instance': 'instance',
        'anomaly': 'anomaly',
        'date_range': 'dateRange',
        'columns': 'columns',
        'data_point': 'dataPoint',
        'sdt_filter': 'sdtFilter',
        'rule': 'rule',
        'ack_filter': 'ackFilter',
        'dependency_routing_state': 'dependencyRoutingState',
        'dependency_role': 'dependencyRole',
        'host': 'host',
        'host_group': 'hostGroup',
        'data_source': 'dataSource'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, severity=None, active_only=None, chain=None, instance=None, anomaly=None, date_range=None, columns=None, data_point=None, sdt_filter=None, rule=None, ack_filter=None, dependency_routing_state=None, dependency_role=None, host=None, host_group=None, data_source=None, *args, **kwargs):  # noqa: E501
        """AlertsHealthCheckReport - a model defined in Swagger"""  # noqa: E501
        self._severity = None
        self._active_only = None
        self._chain = None
        self._instance = None
        self._anomaly = None
        self._date_range = None
        self._columns = None
        self._data_point = None
        self._sdt_filter = None
        self._rule = None
        self._ack_filter = None
        self._dependency_routing_state = None
        self._dependency_role = None
        self._host = None
        self._host_group = None
        self._data_source = None
        self.discriminator = None
        if severity is not None:
            self.severity = severity
        if active_only is not None:
            self.active_only = active_only
        if chain is not None:
            self.chain = chain
        if instance is not None:
            self.instance = instance
        if anomaly is not None:
            self.anomaly = anomaly
        if date_range is not None:
            self.date_range = date_range
        if columns is not None:
            self.columns = columns
        if data_point is not None:
            self.data_point = data_point
        if sdt_filter is not None:
            self.sdt_filter = sdt_filter
        if rule is not None:
            self.rule = rule
        if ack_filter is not None:
            self.ack_filter = ack_filter
        if dependency_routing_state is not None:
            self.dependency_routing_state = dependency_routing_state
        if dependency_role is not None:
            self.dependency_role = dependency_role
        if host is not None:
            self.host = host
        if host_group is not None:
            self.host_group = host_group
        if data_source is not None:
            self.data_source = data_source
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def severity(self):
        """Gets the severity of this AlertsHealthCheckReport.  # noqa: E501

        Filter for the alert level (e.g., all, error, critical).  # noqa: E501

        :return: The severity of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertsHealthCheckReport.

        Filter for the alert level (e.g., all, error, critical).  # noqa: E501

        :param severity: The severity of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def active_only(self):
        """Gets the active_only of this AlertsHealthCheckReport.  # noqa: E501

        true: only alerts that are still alerting (i.e. haven't yet cleared) will be displayed in the report false: active alerts and cleared alerts will both be displayed in the report  # noqa: E501

        :return: The active_only of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: bool
        """
        return self._active_only

    @active_only.setter
    def active_only(self, active_only):
        """Sets the active_only of this AlertsHealthCheckReport.

        true: only alerts that are still alerting (i.e. haven't yet cleared) will be displayed in the report false: active alerts and cleared alerts will both be displayed in the report  # noqa: E501

        :param active_only: The active_only of this AlertsHealthCheckReport.  # noqa: E501
        :type: bool
        """

        self._active_only = active_only

    @property
    def chain(self):
        """Gets the chain of this AlertsHealthCheckReport.  # noqa: E501

        Filter for the escalation chain. Glob expressions are supported.  # noqa: E501

        :return: The chain of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this AlertsHealthCheckReport.

        Filter for the escalation chain. Glob expressions are supported.  # noqa: E501

        :param chain: The chain of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def instance(self):
        """Gets the instance of this AlertsHealthCheckReport.  # noqa: E501

        Filter to restrict the report to a specific  instance. Glob expressions are supported.  # noqa: E501

        :return: The instance of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this AlertsHealthCheckReport.

        Filter to restrict the report to a specific  instance. Glob expressions are supported.  # noqa: E501

        :param instance: The instance of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def anomaly(self):
        """Gets the anomaly of this AlertsHealthCheckReport.  # noqa: E501

        Filter alerts by anomaly status.  # noqa: E501

        :return: The anomaly of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly):
        """Sets the anomaly of this AlertsHealthCheckReport.

        Filter alerts by anomaly status.  # noqa: E501

        :param anomaly: The anomaly of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._anomaly = anomaly

    @property
    def date_range(self):
        """Gets the date_range of this AlertsHealthCheckReport.  # noqa: E501

        The Time Range configured for the report. For example, Last 2 hours, Last 24 hours, etc.  # noqa: E501

        :return: The date_range of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this AlertsHealthCheckReport.

        The Time Range configured for the report. For example, Last 2 hours, Last 24 hours, etc.  # noqa: E501

        :param date_range: The date_range of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def columns(self):
        """Gets the columns of this AlertsHealthCheckReport.  # noqa: E501

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not. Severity, Group, Device, Instance, Datapoint, Thresholds, Value, Began, End, Rule, Chain, Acked, Acked By, Acked On, Notes, In SDT,Dependancy Role,Notification State  # noqa: E501

        :return: The columns of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: list[DynamicColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this AlertsHealthCheckReport.

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not. Severity, Group, Device, Instance, Datapoint, Thresholds, Value, Began, End, Rule, Chain, Acked, Acked By, Acked On, Notes, In SDT,Dependancy Role,Notification State  # noqa: E501

        :param columns: The columns of this AlertsHealthCheckReport.  # noqa: E501
        :type: list[DynamicColumn]
        """

        self._columns = columns

    @property
    def data_point(self):
        """Gets the data_point of this AlertsHealthCheckReport.  # noqa: E501

        Filter to restrict the report to a specific datapoint. Glob expressions are supported.  # noqa: E501

        :return: The data_point of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._data_point

    @data_point.setter
    def data_point(self, data_point):
        """Sets the data_point of this AlertsHealthCheckReport.

        Filter to restrict the report to a specific datapoint. Glob expressions are supported.  # noqa: E501

        :param data_point: The data_point of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._data_point = data_point

    @property
    def sdt_filter(self):
        """Gets the sdt_filter of this AlertsHealthCheckReport.  # noqa: E501

        Filter alerts based on SDT status.  # noqa: E501

        :return: The sdt_filter of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._sdt_filter

    @sdt_filter.setter
    def sdt_filter(self, sdt_filter):
        """Sets the sdt_filter of this AlertsHealthCheckReport.

        Filter alerts based on SDT status.  # noqa: E501

        :param sdt_filter: The sdt_filter of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._sdt_filter = sdt_filter

    @property
    def rule(self):
        """Gets the rule of this AlertsHealthCheckReport.  # noqa: E501

        Filter for the rule. Glob expressions are supported.  # noqa: E501

        :return: The rule of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this AlertsHealthCheckReport.

        Filter for the rule. Glob expressions are supported.  # noqa: E501

        :param rule: The rule of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def ack_filter(self):
        """Gets the ack_filter of this AlertsHealthCheckReport.  # noqa: E501

        Filter by acknowledgement status: all, acked, or nonacked.  # noqa: E501

        :return: The ack_filter of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._ack_filter

    @ack_filter.setter
    def ack_filter(self, ack_filter):
        """Sets the ack_filter of this AlertsHealthCheckReport.

        Filter by acknowledgement status: all, acked, or nonacked.  # noqa: E501

        :param ack_filter: The ack_filter of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._ack_filter = ack_filter

    @property
    def dependency_routing_state(self):
        """Gets the dependency_routing_state of this AlertsHealthCheckReport.  # noqa: E501


        :return: The dependency_routing_state of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._dependency_routing_state

    @dependency_routing_state.setter
    def dependency_routing_state(self, dependency_routing_state):
        """Sets the dependency_routing_state of this AlertsHealthCheckReport.


        :param dependency_routing_state: The dependency_routing_state of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._dependency_routing_state = dependency_routing_state

    @property
    def dependency_role(self):
        """Gets the dependency_role of this AlertsHealthCheckReport.  # noqa: E501


        :return: The dependency_role of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._dependency_role

    @dependency_role.setter
    def dependency_role(self, dependency_role):
        """Sets the dependency_role of this AlertsHealthCheckReport.


        :param dependency_role: The dependency_role of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._dependency_role = dependency_role

    @property
    def host(self):
        """Gets the host of this AlertsHealthCheckReport.  # noqa: E501

        Filter to restrict the report to a specific device. Glob expressions are supported.  # noqa: E501

        :return: The host of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AlertsHealthCheckReport.

        Filter to restrict the report to a specific device. Glob expressions are supported.  # noqa: E501

        :param host: The host of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def host_group(self):
        """Gets the host_group of this AlertsHealthCheckReport.  # noqa: E501

        Filter to restrict the report to a specific group. Glob expressions are supported.  # noqa: E501

        :return: The host_group of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._host_group

    @host_group.setter
    def host_group(self, host_group):
        """Sets the host_group of this AlertsHealthCheckReport.

        Filter to restrict the report to a specific group. Glob expressions are supported.  # noqa: E501

        :param host_group: The host_group of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._host_group = host_group

    @property
    def data_source(self):
        """Gets the data_source of this AlertsHealthCheckReport.  # noqa: E501

        Filter to restrict the report to a specific datasource instance. Glob expressions are supported.  # noqa: E501

        :return: The data_source of this AlertsHealthCheckReport.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this AlertsHealthCheckReport.

        Filter to restrict the report to a specific datasource instance. Glob expressions are supported.  # noqa: E501

        :param data_source: The data_source of this AlertsHealthCheckReport.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertsHealthCheckReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertsHealthCheckReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
