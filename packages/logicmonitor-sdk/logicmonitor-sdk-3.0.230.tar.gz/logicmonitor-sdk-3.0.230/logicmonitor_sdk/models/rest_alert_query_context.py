# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestAlertQueryContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_only': 'bool',
        'anomaly': 'str',
        'pivot_type': 'str',
        'suppressor_filters': 'list[FieldFilter]',
        'for_services': 'bool',
        'refresh_active_alert_cache': 'bool',
        'pivot_dimensions': 'list[str]',
        'dependency_routing_state_filters': 'list[FieldFilter]',
        'exclude_phatom_flag': 'bool',
        'dependency_role_filters_v4': 'list[AdvancedFieldFilter]',
        'pivot_dimension_es_field': 'list[str]',
        'lmconfig_enabled': 'bool',
        'dependency_routing_state_filters_v4': 'list[AdvancedFieldFilter]',
        'dependency_role_filters': 'list[FieldFilter]',
        'cleared_only': 'bool',
        'suppressor_filters_v4': 'list[AdvancedFieldFilter]'
    }

    attribute_map = {
        'active_only': 'activeOnly',
        'anomaly': 'anomaly',
        'pivot_type': 'pivotType',
        'suppressor_filters': 'suppressorFilters',
        'for_services': 'forServices',
        'refresh_active_alert_cache': 'refreshActiveAlertCache',
        'pivot_dimensions': 'pivotDimensions',
        'dependency_routing_state_filters': 'dependencyRoutingStateFilters',
        'exclude_phatom_flag': 'excludePhatomFlag',
        'dependency_role_filters_v4': 'dependencyRoleFiltersV4',
        'pivot_dimension_es_field': 'pivotDimensionESField',
        'lmconfig_enabled': 'lmconfigEnabled',
        'dependency_routing_state_filters_v4': 'dependencyRoutingStateFiltersV4',
        'dependency_role_filters': 'dependencyRoleFilters',
        'cleared_only': 'clearedOnly',
        'suppressor_filters_v4': 'suppressorFiltersV4'
    }

    def __init__(self, active_only=None, anomaly=None, pivot_type=None, suppressor_filters=None, for_services=None, refresh_active_alert_cache=None, pivot_dimensions=None, dependency_routing_state_filters=None, exclude_phatom_flag=None, dependency_role_filters_v4=None, pivot_dimension_es_field=None, lmconfig_enabled=None, dependency_routing_state_filters_v4=None, dependency_role_filters=None, cleared_only=None, suppressor_filters_v4=None):  # noqa: E501
        """RestAlertQueryContext - a model defined in Swagger"""  # noqa: E501
        self._active_only = None
        self._anomaly = None
        self._pivot_type = None
        self._suppressor_filters = None
        self._for_services = None
        self._refresh_active_alert_cache = None
        self._pivot_dimensions = None
        self._dependency_routing_state_filters = None
        self._exclude_phatom_flag = None
        self._dependency_role_filters_v4 = None
        self._pivot_dimension_es_field = None
        self._lmconfig_enabled = None
        self._dependency_routing_state_filters_v4 = None
        self._dependency_role_filters = None
        self._cleared_only = None
        self._suppressor_filters_v4 = None
        self.discriminator = None
        if active_only is not None:
            self.active_only = active_only
        if anomaly is not None:
            self.anomaly = anomaly
        if pivot_type is not None:
            self.pivot_type = pivot_type
        if suppressor_filters is not None:
            self.suppressor_filters = suppressor_filters
        if for_services is not None:
            self.for_services = for_services
        if refresh_active_alert_cache is not None:
            self.refresh_active_alert_cache = refresh_active_alert_cache
        if pivot_dimensions is not None:
            self.pivot_dimensions = pivot_dimensions
        if dependency_routing_state_filters is not None:
            self.dependency_routing_state_filters = dependency_routing_state_filters
        if exclude_phatom_flag is not None:
            self.exclude_phatom_flag = exclude_phatom_flag
        if dependency_role_filters_v4 is not None:
            self.dependency_role_filters_v4 = dependency_role_filters_v4
        if pivot_dimension_es_field is not None:
            self.pivot_dimension_es_field = pivot_dimension_es_field
        if lmconfig_enabled is not None:
            self.lmconfig_enabled = lmconfig_enabled
        if dependency_routing_state_filters_v4 is not None:
            self.dependency_routing_state_filters_v4 = dependency_routing_state_filters_v4
        if dependency_role_filters is not None:
            self.dependency_role_filters = dependency_role_filters
        if cleared_only is not None:
            self.cleared_only = cleared_only
        if suppressor_filters_v4 is not None:
            self.suppressor_filters_v4 = suppressor_filters_v4

    @property
    def active_only(self):
        """Gets the active_only of this RestAlertQueryContext.  # noqa: E501


        :return: The active_only of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._active_only

    @active_only.setter
    def active_only(self, active_only):
        """Sets the active_only of this RestAlertQueryContext.


        :param active_only: The active_only of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._active_only = active_only

    @property
    def anomaly(self):
        """Gets the anomaly of this RestAlertQueryContext.  # noqa: E501


        :return: The anomaly of this RestAlertQueryContext.  # noqa: E501
        :rtype: str
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly):
        """Sets the anomaly of this RestAlertQueryContext.


        :param anomaly: The anomaly of this RestAlertQueryContext.  # noqa: E501
        :type: str
        """

        self._anomaly = anomaly

    @property
    def pivot_type(self):
        """Gets the pivot_type of this RestAlertQueryContext.  # noqa: E501


        :return: The pivot_type of this RestAlertQueryContext.  # noqa: E501
        :rtype: str
        """
        return self._pivot_type

    @pivot_type.setter
    def pivot_type(self, pivot_type):
        """Sets the pivot_type of this RestAlertQueryContext.


        :param pivot_type: The pivot_type of this RestAlertQueryContext.  # noqa: E501
        :type: str
        """

        self._pivot_type = pivot_type

    @property
    def suppressor_filters(self):
        """Gets the suppressor_filters of this RestAlertQueryContext.  # noqa: E501


        :return: The suppressor_filters of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[FieldFilter]
        """
        return self._suppressor_filters

    @suppressor_filters.setter
    def suppressor_filters(self, suppressor_filters):
        """Sets the suppressor_filters of this RestAlertQueryContext.


        :param suppressor_filters: The suppressor_filters of this RestAlertQueryContext.  # noqa: E501
        :type: list[FieldFilter]
        """

        self._suppressor_filters = suppressor_filters

    @property
    def for_services(self):
        """Gets the for_services of this RestAlertQueryContext.  # noqa: E501


        :return: The for_services of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._for_services

    @for_services.setter
    def for_services(self, for_services):
        """Sets the for_services of this RestAlertQueryContext.


        :param for_services: The for_services of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._for_services = for_services

    @property
    def refresh_active_alert_cache(self):
        """Gets the refresh_active_alert_cache of this RestAlertQueryContext.  # noqa: E501


        :return: The refresh_active_alert_cache of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._refresh_active_alert_cache

    @refresh_active_alert_cache.setter
    def refresh_active_alert_cache(self, refresh_active_alert_cache):
        """Sets the refresh_active_alert_cache of this RestAlertQueryContext.


        :param refresh_active_alert_cache: The refresh_active_alert_cache of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._refresh_active_alert_cache = refresh_active_alert_cache

    @property
    def pivot_dimensions(self):
        """Gets the pivot_dimensions of this RestAlertQueryContext.  # noqa: E501


        :return: The pivot_dimensions of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._pivot_dimensions

    @pivot_dimensions.setter
    def pivot_dimensions(self, pivot_dimensions):
        """Sets the pivot_dimensions of this RestAlertQueryContext.


        :param pivot_dimensions: The pivot_dimensions of this RestAlertQueryContext.  # noqa: E501
        :type: list[str]
        """

        self._pivot_dimensions = pivot_dimensions

    @property
    def dependency_routing_state_filters(self):
        """Gets the dependency_routing_state_filters of this RestAlertQueryContext.  # noqa: E501


        :return: The dependency_routing_state_filters of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[FieldFilter]
        """
        return self._dependency_routing_state_filters

    @dependency_routing_state_filters.setter
    def dependency_routing_state_filters(self, dependency_routing_state_filters):
        """Sets the dependency_routing_state_filters of this RestAlertQueryContext.


        :param dependency_routing_state_filters: The dependency_routing_state_filters of this RestAlertQueryContext.  # noqa: E501
        :type: list[FieldFilter]
        """

        self._dependency_routing_state_filters = dependency_routing_state_filters

    @property
    def exclude_phatom_flag(self):
        """Gets the exclude_phatom_flag of this RestAlertQueryContext.  # noqa: E501


        :return: The exclude_phatom_flag of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_phatom_flag

    @exclude_phatom_flag.setter
    def exclude_phatom_flag(self, exclude_phatom_flag):
        """Sets the exclude_phatom_flag of this RestAlertQueryContext.


        :param exclude_phatom_flag: The exclude_phatom_flag of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._exclude_phatom_flag = exclude_phatom_flag

    @property
    def dependency_role_filters_v4(self):
        """Gets the dependency_role_filters_v4 of this RestAlertQueryContext.  # noqa: E501


        :return: The dependency_role_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[AdvancedFieldFilter]
        """
        return self._dependency_role_filters_v4

    @dependency_role_filters_v4.setter
    def dependency_role_filters_v4(self, dependency_role_filters_v4):
        """Sets the dependency_role_filters_v4 of this RestAlertQueryContext.


        :param dependency_role_filters_v4: The dependency_role_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :type: list[AdvancedFieldFilter]
        """

        self._dependency_role_filters_v4 = dependency_role_filters_v4

    @property
    def pivot_dimension_es_field(self):
        """Gets the pivot_dimension_es_field of this RestAlertQueryContext.  # noqa: E501


        :return: The pivot_dimension_es_field of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._pivot_dimension_es_field

    @pivot_dimension_es_field.setter
    def pivot_dimension_es_field(self, pivot_dimension_es_field):
        """Sets the pivot_dimension_es_field of this RestAlertQueryContext.


        :param pivot_dimension_es_field: The pivot_dimension_es_field of this RestAlertQueryContext.  # noqa: E501
        :type: list[str]
        """

        self._pivot_dimension_es_field = pivot_dimension_es_field

    @property
    def lmconfig_enabled(self):
        """Gets the lmconfig_enabled of this RestAlertQueryContext.  # noqa: E501


        :return: The lmconfig_enabled of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._lmconfig_enabled

    @lmconfig_enabled.setter
    def lmconfig_enabled(self, lmconfig_enabled):
        """Sets the lmconfig_enabled of this RestAlertQueryContext.


        :param lmconfig_enabled: The lmconfig_enabled of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._lmconfig_enabled = lmconfig_enabled

    @property
    def dependency_routing_state_filters_v4(self):
        """Gets the dependency_routing_state_filters_v4 of this RestAlertQueryContext.  # noqa: E501


        :return: The dependency_routing_state_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[AdvancedFieldFilter]
        """
        return self._dependency_routing_state_filters_v4

    @dependency_routing_state_filters_v4.setter
    def dependency_routing_state_filters_v4(self, dependency_routing_state_filters_v4):
        """Sets the dependency_routing_state_filters_v4 of this RestAlertQueryContext.


        :param dependency_routing_state_filters_v4: The dependency_routing_state_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :type: list[AdvancedFieldFilter]
        """

        self._dependency_routing_state_filters_v4 = dependency_routing_state_filters_v4

    @property
    def dependency_role_filters(self):
        """Gets the dependency_role_filters of this RestAlertQueryContext.  # noqa: E501


        :return: The dependency_role_filters of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[FieldFilter]
        """
        return self._dependency_role_filters

    @dependency_role_filters.setter
    def dependency_role_filters(self, dependency_role_filters):
        """Sets the dependency_role_filters of this RestAlertQueryContext.


        :param dependency_role_filters: The dependency_role_filters of this RestAlertQueryContext.  # noqa: E501
        :type: list[FieldFilter]
        """

        self._dependency_role_filters = dependency_role_filters

    @property
    def cleared_only(self):
        """Gets the cleared_only of this RestAlertQueryContext.  # noqa: E501


        :return: The cleared_only of this RestAlertQueryContext.  # noqa: E501
        :rtype: bool
        """
        return self._cleared_only

    @cleared_only.setter
    def cleared_only(self, cleared_only):
        """Sets the cleared_only of this RestAlertQueryContext.


        :param cleared_only: The cleared_only of this RestAlertQueryContext.  # noqa: E501
        :type: bool
        """

        self._cleared_only = cleared_only

    @property
    def suppressor_filters_v4(self):
        """Gets the suppressor_filters_v4 of this RestAlertQueryContext.  # noqa: E501


        :return: The suppressor_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :rtype: list[AdvancedFieldFilter]
        """
        return self._suppressor_filters_v4

    @suppressor_filters_v4.setter
    def suppressor_filters_v4(self, suppressor_filters_v4):
        """Sets the suppressor_filters_v4 of this RestAlertQueryContext.


        :param suppressor_filters_v4: The suppressor_filters_v4 of this RestAlertQueryContext.  # noqa: E501
        :type: list[AdvancedFieldFilter]
        """

        self._suppressor_filters_v4 = suppressor_filters_v4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestAlertQueryContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestAlertQueryContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
