# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class LogsReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'partitions': 'list[str]',
        'date_range': 'str',
        'timezone': 'str',
        'columns': 'list[RestLogsDynamicColumnV3]',
        'query': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'partitions': 'partitions',
        'date_range': 'dateRange',
        'timezone': 'timezone',
        'columns': 'columns',
        'query': 'query'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, partitions=None, date_range=None, timezone=None, columns=None, query=None, *args, **kwargs):  # noqa: E501
        """LogsReport - a model defined in Swagger"""  # noqa: E501
        self._partitions = None
        self._date_range = None
        self._timezone = None
        self._columns = None
        self._query = None
        self.discriminator = None
        if partitions is not None:
            self.partitions = partitions
        if date_range is not None:
            self.date_range = date_range
        if timezone is not None:
            self.timezone = timezone
        if columns is not None:
            self.columns = columns
        if query is not None:
            self.query = query
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def partitions(self):
        """Gets the partitions of this LogsReport.  # noqa: E501

        The partition for the report  # noqa: E501

        :return: The partitions of this LogsReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this LogsReport.

        The partition for the report  # noqa: E501

        :param partitions: The partitions of this LogsReport.  # noqa: E501
        :type: list[str]
        """

        self._partitions = partitions

    @property
    def date_range(self):
        """Gets the date_range of this LogsReport.  # noqa: E501

        The Time Range configured for the report. For example, Last 2 hours, Last 24 hours, etc.  # noqa: E501

        :return: The date_range of this LogsReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this LogsReport.

        The Time Range configured for the report. For example, Last 2 hours, Last 24 hours, etc.  # noqa: E501

        :param date_range: The date_range of this LogsReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def timezone(self):
        """Gets the timezone of this LogsReport.  # noqa: E501

        The specific timezone for the report  # noqa: E501

        :return: The timezone of this LogsReport.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this LogsReport.

        The specific timezone for the report  # noqa: E501

        :param timezone: The timezone of this LogsReport.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def columns(self):
        """Gets the columns of this LogsReport.  # noqa: E501

        The columns displayed in the report  # noqa: E501

        :return: The columns of this LogsReport.  # noqa: E501
        :rtype: list[RestLogsDynamicColumnV3]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this LogsReport.

        The columns displayed in the report  # noqa: E501

        :param columns: The columns of this LogsReport.  # noqa: E501
        :type: list[RestLogsDynamicColumnV3]
        """

        self._columns = columns

    @property
    def query(self):
        """Gets the query of this LogsReport.  # noqa: E501

        The query for the report  # noqa: E501

        :return: The query of this LogsReport.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this LogsReport.

        The query for the report  # noqa: E501

        :param query: The query of this LogsReport.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogsReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
