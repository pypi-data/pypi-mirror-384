# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AwsAccountTestResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warnings': 'list[str]',
        'no_permission_services': 'list[str]',
        'detail_link': 'str',
        'non_permission_errors': 'list[str]'
    }

    attribute_map = {
        'warnings': 'warnings',
        'no_permission_services': 'noPermissionServices',
        'detail_link': 'detailLink',
        'non_permission_errors': 'nonPermissionErrors'
    }

    def __init__(self, warnings=None, no_permission_services=None, detail_link=None, non_permission_errors=None):  # noqa: E501
        """AwsAccountTestResult - a model defined in Swagger"""  # noqa: E501
        self._warnings = None
        self._no_permission_services = None
        self._detail_link = None
        self._non_permission_errors = None
        self.discriminator = None
        if warnings is not None:
            self.warnings = warnings
        if no_permission_services is not None:
            self.no_permission_services = no_permission_services
        if detail_link is not None:
            self.detail_link = detail_link
        if non_permission_errors is not None:
            self.non_permission_errors = non_permission_errors

    @property
    def warnings(self):
        """Gets the warnings of this AwsAccountTestResult.  # noqa: E501


        :return: The warnings of this AwsAccountTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this AwsAccountTestResult.


        :param warnings: The warnings of this AwsAccountTestResult.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLIENT_ID_ISSUE", "TENANT_ID_ISSUE", "KEY_ISSUE", "SUBSCRIPTION_ID_ISSUE", "SERVICE_NAME_ERROR", "TEMPORARY_WARNING", "PROJECT_ID_ISSUE", "CLIENT_EMAIL_ISSUE", "TOKEN_URI_ISSUE", "ROLE_ARN_ISSUE", "PERMISSION_TEST_BYPASSED", "POLICY_OR_NAME_ISSUE", "SERVICE_PERMISION_FAILURE", "MISSING_REQUIRED_CREDENTIAL_DATA", "MISSING_CREDENTIALS", "MISSING_SUBSCRIPTION_IDS", "NO_SERVICES_CHECKED", "MAXIMUM_RECORDS_EXCEEDED", "FILTER_UNUSED", "ID_NOT_FOUND", "TYPE_INVALID", "INVALID_TIME_RANGE", "UNAUTHORIZED", "OPTIONAL_FIELD_NOT_FOUND", "EXTRA_FIELDS_PROVIDED", "DEFAULT_COLUMNS_FILTER", "SAAS_O365_EXTRA_PERMISSION", "SAAS_O365_API_INACCESSIBLE", "SAAS_O365_NO_PERMISSION_GRANTED", "PATCH_NOT_ALLOWED_ON_READ_ONLY", "PATCH_NOT_ALLOWED_ON_MULTI", "IGNORED_COMPONENT_OF_PAYLOAD", "INVALID_FIELD_VALUE", "NO_ALERT_RULE_MATCHES_THIS_ALERT", "INVALID_PROPERTY_NAMES_IGNORED", "NO_STAGE_1_RECEIPIENTS_DEFINED_FOR_ALERT", "NO_ESCALATING_CHAIN_MATCHES_THIS_ALERT", "ASSUMED_TYPE", "NO_DATA_FOR_MODEL", "GET_INTEGRATION_FAIL", "DASHBOARDS_NOT_CREATED", "MISSING_PERMISSION_OR_MISSING_DATAPOINT", "DISABLED_CLOUD_TYPE", "SERVICE_API_DISABLED", "ALERT_GENERATION_DISABLED", "ALERT_GENERATION_DISABLED_WITH_NAME"]  # noqa: E501
        if not set(warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `warnings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(warnings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._warnings = warnings

    @property
    def no_permission_services(self):
        """Gets the no_permission_services of this AwsAccountTestResult.  # noqa: E501


        :return: The no_permission_services of this AwsAccountTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._no_permission_services

    @no_permission_services.setter
    def no_permission_services(self, no_permission_services):
        """Sets the no_permission_services of this AwsAccountTestResult.


        :param no_permission_services: The no_permission_services of this AwsAccountTestResult.  # noqa: E501
        :type: list[str]
        """

        self._no_permission_services = no_permission_services

    @property
    def detail_link(self):
        """Gets the detail_link of this AwsAccountTestResult.  # noqa: E501


        :return: The detail_link of this AwsAccountTestResult.  # noqa: E501
        :rtype: str
        """
        return self._detail_link

    @detail_link.setter
    def detail_link(self, detail_link):
        """Sets the detail_link of this AwsAccountTestResult.


        :param detail_link: The detail_link of this AwsAccountTestResult.  # noqa: E501
        :type: str
        """

        self._detail_link = detail_link

    @property
    def non_permission_errors(self):
        """Gets the non_permission_errors of this AwsAccountTestResult.  # noqa: E501


        :return: The non_permission_errors of this AwsAccountTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._non_permission_errors

    @non_permission_errors.setter
    def non_permission_errors(self, non_permission_errors):
        """Sets the non_permission_errors of this AwsAccountTestResult.


        :param non_permission_errors: The non_permission_errors of this AwsAccountTestResult.  # noqa: E501
        :type: list[str]
        """

        self._non_permission_errors = non_permission_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwsAccountTestResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsAccountTestResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
