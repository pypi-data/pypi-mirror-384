# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormDataContentDisposition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'modification_date': 'datetime',
        'size': 'int',
        'read_date': 'datetime',
        'name': 'str',
        'type': 'str',
        'creation_date': 'datetime',
        'parameters': 'dict(str, str)'
    }

    attribute_map = {
        'file_name': 'fileName',
        'modification_date': 'modificationDate',
        'size': 'size',
        'read_date': 'readDate',
        'name': 'name',
        'type': 'type',
        'creation_date': 'creationDate',
        'parameters': 'parameters'
    }

    def __init__(self, file_name=None, modification_date=None, size=None, read_date=None, name=None, type=None, creation_date=None, parameters=None):  # noqa: E501
        """FormDataContentDisposition - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._modification_date = None
        self._size = None
        self._read_date = None
        self._name = None
        self._type = None
        self._creation_date = None
        self._parameters = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if modification_date is not None:
            self.modification_date = modification_date
        if size is not None:
            self.size = size
        if read_date is not None:
            self.read_date = read_date
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if creation_date is not None:
            self.creation_date = creation_date
        if parameters is not None:
            self.parameters = parameters

    @property
    def file_name(self):
        """Gets the file_name of this FormDataContentDisposition.  # noqa: E501


        :return: The file_name of this FormDataContentDisposition.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FormDataContentDisposition.


        :param file_name: The file_name of this FormDataContentDisposition.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def modification_date(self):
        """Gets the modification_date of this FormDataContentDisposition.  # noqa: E501


        :return: The modification_date of this FormDataContentDisposition.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this FormDataContentDisposition.


        :param modification_date: The modification_date of this FormDataContentDisposition.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def size(self):
        """Gets the size of this FormDataContentDisposition.  # noqa: E501


        :return: The size of this FormDataContentDisposition.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FormDataContentDisposition.


        :param size: The size of this FormDataContentDisposition.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def read_date(self):
        """Gets the read_date of this FormDataContentDisposition.  # noqa: E501


        :return: The read_date of this FormDataContentDisposition.  # noqa: E501
        :rtype: datetime
        """
        return self._read_date

    @read_date.setter
    def read_date(self, read_date):
        """Sets the read_date of this FormDataContentDisposition.


        :param read_date: The read_date of this FormDataContentDisposition.  # noqa: E501
        :type: datetime
        """

        self._read_date = read_date

    @property
    def name(self):
        """Gets the name of this FormDataContentDisposition.  # noqa: E501


        :return: The name of this FormDataContentDisposition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormDataContentDisposition.


        :param name: The name of this FormDataContentDisposition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this FormDataContentDisposition.  # noqa: E501


        :return: The type of this FormDataContentDisposition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormDataContentDisposition.


        :param type: The type of this FormDataContentDisposition.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def creation_date(self):
        """Gets the creation_date of this FormDataContentDisposition.  # noqa: E501


        :return: The creation_date of this FormDataContentDisposition.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this FormDataContentDisposition.


        :param creation_date: The creation_date of this FormDataContentDisposition.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def parameters(self):
        """Gets the parameters of this FormDataContentDisposition.  # noqa: E501


        :return: The parameters of this FormDataContentDisposition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this FormDataContentDisposition.


        :param parameters: The parameters of this FormDataContentDisposition.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormDataContentDisposition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormDataContentDisposition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
