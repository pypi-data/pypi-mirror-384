# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_uuid': 'str',
        'original_uuid': 'str',
        'locator_id': 'str',
        'checksum': 'str',
        'registry_version': 'str',
        'author_company_uuid': 'str',
        'invalid': 'bool'
    }

    attribute_map = {
        'current_uuid': 'currentUUID',
        'original_uuid': 'originalUUID',
        'locator_id': 'locatorId',
        'checksum': 'checksum',
        'registry_version': 'registryVersion',
        'author_company_uuid': 'authorCompanyUUID',
        'invalid': 'invalid'
    }

    def __init__(self, current_uuid=None, original_uuid=None, locator_id=None, checksum=None, registry_version=None, author_company_uuid=None, invalid=None):  # noqa: E501
        """RegistryMetadata - a model defined in Swagger"""  # noqa: E501
        self._current_uuid = None
        self._original_uuid = None
        self._locator_id = None
        self._checksum = None
        self._registry_version = None
        self._author_company_uuid = None
        self._invalid = None
        self.discriminator = None
        if current_uuid is not None:
            self.current_uuid = current_uuid
        if original_uuid is not None:
            self.original_uuid = original_uuid
        if locator_id is not None:
            self.locator_id = locator_id
        if checksum is not None:
            self.checksum = checksum
        if registry_version is not None:
            self.registry_version = registry_version
        if author_company_uuid is not None:
            self.author_company_uuid = author_company_uuid
        if invalid is not None:
            self.invalid = invalid

    @property
    def current_uuid(self):
        """Gets the current_uuid of this RegistryMetadata.  # noqa: E501


        :return: The current_uuid of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._current_uuid

    @current_uuid.setter
    def current_uuid(self, current_uuid):
        """Sets the current_uuid of this RegistryMetadata.


        :param current_uuid: The current_uuid of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._current_uuid = current_uuid

    @property
    def original_uuid(self):
        """Gets the original_uuid of this RegistryMetadata.  # noqa: E501


        :return: The original_uuid of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._original_uuid

    @original_uuid.setter
    def original_uuid(self, original_uuid):
        """Sets the original_uuid of this RegistryMetadata.


        :param original_uuid: The original_uuid of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._original_uuid = original_uuid

    @property
    def locator_id(self):
        """Gets the locator_id of this RegistryMetadata.  # noqa: E501


        :return: The locator_id of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._locator_id

    @locator_id.setter
    def locator_id(self, locator_id):
        """Sets the locator_id of this RegistryMetadata.


        :param locator_id: The locator_id of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._locator_id = locator_id

    @property
    def checksum(self):
        """Gets the checksum of this RegistryMetadata.  # noqa: E501


        :return: The checksum of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this RegistryMetadata.


        :param checksum: The checksum of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def registry_version(self):
        """Gets the registry_version of this RegistryMetadata.  # noqa: E501


        :return: The registry_version of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._registry_version

    @registry_version.setter
    def registry_version(self, registry_version):
        """Sets the registry_version of this RegistryMetadata.


        :param registry_version: The registry_version of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._registry_version = registry_version

    @property
    def author_company_uuid(self):
        """Gets the author_company_uuid of this RegistryMetadata.  # noqa: E501


        :return: The author_company_uuid of this RegistryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._author_company_uuid

    @author_company_uuid.setter
    def author_company_uuid(self, author_company_uuid):
        """Sets the author_company_uuid of this RegistryMetadata.


        :param author_company_uuid: The author_company_uuid of this RegistryMetadata.  # noqa: E501
        :type: str
        """

        self._author_company_uuid = author_company_uuid

    @property
    def invalid(self):
        """Gets the invalid of this RegistryMetadata.  # noqa: E501


        :return: The invalid of this RegistryMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this RegistryMetadata.


        :param invalid: The invalid of this RegistryMetadata.  # noqa: E501
        :type: bool
        """

        self._invalid = invalid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
