# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdvancedFieldFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'support_glob': 'bool',
        'values': 'list[str]',
        'operator': 'str'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'support_glob': 'supportGlob',
        'values': 'values',
        'operator': 'operator'
    }

    def __init__(self, field_name=None, support_glob=None, values=None, operator=None):  # noqa: E501
        """AdvancedFieldFilter - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._support_glob = None
        self._values = None
        self._operator = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if support_glob is not None:
            self.support_glob = support_glob
        if values is not None:
            self.values = values
        if operator is not None:
            self.operator = operator

    @property
    def field_name(self):
        """Gets the field_name of this AdvancedFieldFilter.  # noqa: E501


        :return: The field_name of this AdvancedFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this AdvancedFieldFilter.


        :param field_name: The field_name of this AdvancedFieldFilter.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def support_glob(self):
        """Gets the support_glob of this AdvancedFieldFilter.  # noqa: E501


        :return: The support_glob of this AdvancedFieldFilter.  # noqa: E501
        :rtype: bool
        """
        return self._support_glob

    @support_glob.setter
    def support_glob(self, support_glob):
        """Sets the support_glob of this AdvancedFieldFilter.


        :param support_glob: The support_glob of this AdvancedFieldFilter.  # noqa: E501
        :type: bool
        """

        self._support_glob = support_glob

    @property
    def values(self):
        """Gets the values of this AdvancedFieldFilter.  # noqa: E501


        :return: The values of this AdvancedFieldFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AdvancedFieldFilter.


        :param values: The values of this AdvancedFieldFilter.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def operator(self):
        """Gets the operator of this AdvancedFieldFilter.  # noqa: E501


        :return: The operator of this AdvancedFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AdvancedFieldFilter.


        :param operator: The operator of this AdvancedFieldFilter.  # noqa: E501
        :type: str
        """

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedFieldFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedFieldFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
