# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdvancedMetricsGraphInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'float',
        'max_value': 'float',
        'query': 'str',
        'vertical_label': 'str',
        'desc': 'bool',
        'scale_unit': 'int',
        'global_consolidate_function': 'str'
    }

    attribute_map = {
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'query': 'query',
        'vertical_label': 'verticalLabel',
        'desc': 'desc',
        'scale_unit': 'scaleUnit',
        'global_consolidate_function': 'globalConsolidateFunction'
    }

    def __init__(self, min_value=None, max_value=None, query=None, vertical_label=None, desc=None, scale_unit=None, global_consolidate_function=None):  # noqa: E501
        """AdvancedMetricsGraphInfo - a model defined in Swagger"""  # noqa: E501
        self._min_value = None
        self._max_value = None
        self._query = None
        self._vertical_label = None
        self._desc = None
        self._scale_unit = None
        self._global_consolidate_function = None
        self.discriminator = None
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if query is not None:
            self.query = query
        if vertical_label is not None:
            self.vertical_label = vertical_label
        if desc is not None:
            self.desc = desc
        if scale_unit is not None:
            self.scale_unit = scale_unit
        if global_consolidate_function is not None:
            self.global_consolidate_function = global_consolidate_function

    @property
    def min_value(self):
        """Gets the min_value of this AdvancedMetricsGraphInfo.  # noqa: E501

        The minimum value that can be displayed in the widget. A minValue must be referenced in the lmqlGraphInfo object in order to be displayed. Default is 'NaN'.  # noqa: E501

        :return: The min_value of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AdvancedMetricsGraphInfo.

        The minimum value that can be displayed in the widget. A minValue must be referenced in the lmqlGraphInfo object in order to be displayed. Default is 'NaN'.  # noqa: E501

        :param min_value: The min_value of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this AdvancedMetricsGraphInfo.  # noqa: E501

        The maximum value that can be displayed in the widget. A maxValue must be referenced in the lmqlGraphInfo object in order to be displayed. Default is 'NaN'.  # noqa: E501

        :return: The max_value of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AdvancedMetricsGraphInfo.

        The maximum value that can be displayed in the widget. A maxValue must be referenced in the lmqlGraphInfo object in order to be displayed. Default is 'NaN'.  # noqa: E501

        :param max_value: The max_value of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def query(self):
        """Gets the query of this AdvancedMetricsGraphInfo.  # noqa: E501

        The query used for saving logs and related queries.  # noqa: E501

        :return: The query of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AdvancedMetricsGraphInfo.

        The query used for saving logs and related queries.  # noqa: E501

        :param query: The query of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def vertical_label(self):
        """Gets the vertical_label of this AdvancedMetricsGraphInfo.  # noqa: E501

        The label for the vertical axis of the graph. Default is 'ms'.  # noqa: E501

        :return: The vertical_label of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._vertical_label

    @vertical_label.setter
    def vertical_label(self, vertical_label):
        """Sets the vertical_label of this AdvancedMetricsGraphInfo.

        The label for the vertical axis of the graph. Default is 'ms'.  # noqa: E501

        :param vertical_label: The vertical_label of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """

        self._vertical_label = vertical_label

    @property
    def desc(self):
        """Gets the desc of this AdvancedMetricsGraphInfo.  # noqa: E501

        Indicates whether the description field is enabled or not. Default is false.  # noqa: E501

        :return: The desc of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: bool
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this AdvancedMetricsGraphInfo.

        Indicates whether the description field is enabled or not. Default is false.  # noqa: E501

        :param desc: The desc of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: bool
        """

        self._desc = desc

    @property
    def scale_unit(self):
        """Gets the scale_unit of this AdvancedMetricsGraphInfo.  # noqa: E501

        The scale unit used for graph data. The scale unit helps adjust the graph's scale. Default is 1000.  # noqa: E501

        :return: The scale_unit of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: int
        """
        return self._scale_unit

    @scale_unit.setter
    def scale_unit(self, scale_unit):
        """Sets the scale_unit of this AdvancedMetricsGraphInfo.

        The scale unit used for graph data. The scale unit helps adjust the graph's scale. Default is 1000.  # noqa: E501

        :param scale_unit: The scale_unit of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: int
        """

        self._scale_unit = scale_unit

    @property
    def global_consolidate_function(self):
        """Gets the global_consolidate_function of this AdvancedMetricsGraphInfo.  # noqa: E501

        The global consolidate function used for processing the graph data. Default is 'VaST'.  # noqa: E501

        :return: The global_consolidate_function of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._global_consolidate_function

    @global_consolidate_function.setter
    def global_consolidate_function(self, global_consolidate_function):
        """Sets the global_consolidate_function of this AdvancedMetricsGraphInfo.

        The global consolidate function used for processing the graph data. Default is 'VaST'.  # noqa: E501

        :param global_consolidate_function: The global_consolidate_function of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """

        self._global_consolidate_function = global_consolidate_function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedMetricsGraphInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedMetricsGraphInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
