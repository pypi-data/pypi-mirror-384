# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quick': 'str',
        'scope': 'str',
        'exclude': 'str',
        'quickregex': 'str',
        'timerange': 'str',
        'include': 'str'
    }

    attribute_map = {
        'quick': 'QUICK',
        'scope': 'SCOPE',
        'exclude': 'EXCLUDE',
        'quickregex': 'QUICKREGEX',
        'timerange': 'TIMERANGE',
        'include': 'INCLUDE'
    }

    def __init__(self, quick=None, scope=None, exclude=None, quickregex=None, timerange=None, include=None):  # noqa: E501
        """FilterBlock - a model defined in Swagger"""  # noqa: E501
        self._quick = None
        self._scope = None
        self._exclude = None
        self._quickregex = None
        self._timerange = None
        self._include = None
        self.discriminator = None
        if quick is not None:
            self.quick = quick
        if scope is not None:
            self.scope = scope
        if exclude is not None:
            self.exclude = exclude
        if quickregex is not None:
            self.quickregex = quickregex
        if timerange is not None:
            self.timerange = timerange
        if include is not None:
            self.include = include

    @property
    def quick(self):
        """Gets the quick of this FilterBlock.  # noqa: E501


        :return: The quick of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._quick

    @quick.setter
    def quick(self, quick):
        """Sets the quick of this FilterBlock.


        :param quick: The quick of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._quick = quick

    @property
    def scope(self):
        """Gets the scope of this FilterBlock.  # noqa: E501


        :return: The scope of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this FilterBlock.


        :param scope: The scope of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def exclude(self):
        """Gets the exclude of this FilterBlock.  # noqa: E501


        :return: The exclude of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this FilterBlock.


        :param exclude: The exclude of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._exclude = exclude

    @property
    def quickregex(self):
        """Gets the quickregex of this FilterBlock.  # noqa: E501


        :return: The quickregex of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._quickregex

    @quickregex.setter
    def quickregex(self, quickregex):
        """Sets the quickregex of this FilterBlock.


        :param quickregex: The quickregex of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._quickregex = quickregex

    @property
    def timerange(self):
        """Gets the timerange of this FilterBlock.  # noqa: E501


        :return: The timerange of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._timerange

    @timerange.setter
    def timerange(self, timerange):
        """Sets the timerange of this FilterBlock.


        :param timerange: The timerange of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._timerange = timerange

    @property
    def include(self):
        """Gets the include of this FilterBlock.  # noqa: E501


        :return: The include of this FilterBlock.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this FilterBlock.


        :param include: The include of this FilterBlock.  # noqa: E501
        :type: str
        """

        self._include = include

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
