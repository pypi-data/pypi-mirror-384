# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiagnosticsSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_groups': 'list[RestAccessGroupV4]',
        'groovy_script': 'str',
        'data_type': 'int',
        'description': 'str',
        'applies_to': 'str',
        'technology': 'str',
        'source': 'str',
        'lineage_id': 'str',
        'tags': 'str',
        'installation_metadata': 'IntegrationMetadata',
        'origin_registry_id': 'str',
        'name': 'str',
        'in_use': 'str',
        'checksum': 'str',
        'id': 'int',
        'access_group_ids': 'list[int]',
        'installation_statuses': 'list[str]',
        'group': 'str'
    }

    attribute_map = {
        'access_groups': 'accessGroups',
        'groovy_script': 'groovyScript',
        'data_type': 'dataType',
        'description': 'description',
        'applies_to': 'appliesTo',
        'technology': 'technology',
        'source': 'source',
        'lineage_id': 'lineageId',
        'tags': 'tags',
        'installation_metadata': 'installationMetadata',
        'origin_registry_id': 'originRegistryId',
        'name': 'name',
        'in_use': 'inUse',
        'checksum': 'checksum',
        'id': 'id',
        'access_group_ids': 'accessGroupIds',
        'installation_statuses': 'installationStatuses',
        'group': 'group'
    }

    def __init__(self, access_groups=None, groovy_script=None, data_type=None, description=None, applies_to=None, technology=None, source=None, lineage_id=None, tags=None, installation_metadata=None, origin_registry_id=None, name=None, in_use=None, checksum=None, id=None, access_group_ids=None, installation_statuses=None, group=None):  # noqa: E501
        """DiagnosticsSource - a model defined in Swagger"""  # noqa: E501
        self._access_groups = None
        self._groovy_script = None
        self._data_type = None
        self._description = None
        self._applies_to = None
        self._technology = None
        self._source = None
        self._lineage_id = None
        self._tags = None
        self._installation_metadata = None
        self._origin_registry_id = None
        self._name = None
        self._in_use = None
        self._checksum = None
        self._id = None
        self._access_group_ids = None
        self._installation_statuses = None
        self._group = None
        self.discriminator = None
        if access_groups is not None:
            self.access_groups = access_groups
        if groovy_script is not None:
            self.groovy_script = groovy_script
        if data_type is not None:
            self.data_type = data_type
        if description is not None:
            self.description = description
        if applies_to is not None:
            self.applies_to = applies_to
        if technology is not None:
            self.technology = technology
        if source is not None:
            self.source = source
        if lineage_id is not None:
            self.lineage_id = lineage_id
        if tags is not None:
            self.tags = tags
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        if origin_registry_id is not None:
            self.origin_registry_id = origin_registry_id
        if name is not None:
            self.name = name
        if in_use is not None:
            self.in_use = in_use
        if checksum is not None:
            self.checksum = checksum
        if id is not None:
            self.id = id
        if access_group_ids is not None:
            self.access_group_ids = access_group_ids
        if installation_statuses is not None:
            self.installation_statuses = installation_statuses
        if group is not None:
            self.group = group

    @property
    def access_groups(self):
        """Gets the access_groups of this DiagnosticsSource.  # noqa: E501

        Access group Details in response  # noqa: E501

        :return: The access_groups of this DiagnosticsSource.  # noqa: E501
        :rtype: list[RestAccessGroupV4]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this DiagnosticsSource.

        Access group Details in response  # noqa: E501

        :param access_groups: The access_groups of this DiagnosticsSource.  # noqa: E501
        :type: list[RestAccessGroupV4]
        """

        self._access_groups = access_groups

    @property
    def groovy_script(self):
        """Gets the groovy_script of this DiagnosticsSource.  # noqa: E501

        groovy script  # noqa: E501

        :return: The groovy_script of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._groovy_script

    @groovy_script.setter
    def groovy_script(self, groovy_script):
        """Sets the groovy_script of this DiagnosticsSource.

        groovy script  # noqa: E501

        :param groovy_script: The groovy_script of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._groovy_script = groovy_script

    @property
    def data_type(self):
        """Gets the data_type of this DiagnosticsSource.  # noqa: E501

        The data type of diagnostics source, default is 0. The values can be  0: diagnostics source  1: raw ERI     # noqa: E501

        :return: The data_type of this DiagnosticsSource.  # noqa: E501
        :rtype: int
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DiagnosticsSource.

        The data type of diagnostics source, default is 0. The values can be  0: diagnostics source  1: raw ERI     # noqa: E501

        :param data_type: The data_type of this DiagnosticsSource.  # noqa: E501
        :type: int
        """

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this DiagnosticsSource.  # noqa: E501

        The diagnostics source description  # noqa: E501

        :return: The description of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DiagnosticsSource.

        The diagnostics source description  # noqa: E501

        :param description: The description of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def applies_to(self):
        """Gets the applies_to of this DiagnosticsSource.  # noqa: E501

        The diagnostics source applies to  # noqa: E501

        :return: The applies_to of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this DiagnosticsSource.

        The diagnostics source applies to  # noqa: E501

        :param applies_to: The applies_to of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._applies_to = applies_to

    @property
    def technology(self):
        """Gets the technology of this DiagnosticsSource.  # noqa: E501

        The technology notes  # noqa: E501

        :return: The technology of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this DiagnosticsSource.

        The technology notes  # noqa: E501

        :param technology: The technology of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._technology = technology

    @property
    def source(self):
        """Gets the source of this DiagnosticsSource.  # noqa: E501

        The diagnostics source  # noqa: E501

        :return: The source of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DiagnosticsSource.

        The diagnostics source  # noqa: E501

        :param source: The source of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def lineage_id(self):
        """Gets the lineage_id of this DiagnosticsSource.  # noqa: E501

        LM module lineageId  # noqa: E501

        :return: The lineage_id of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this DiagnosticsSource.

        LM module lineageId  # noqa: E501

        :param lineage_id: The lineage_id of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    @property
    def tags(self):
        """Gets the tags of this DiagnosticsSource.  # noqa: E501

        The diagnostics source tags  # noqa: E501

        :return: The tags of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DiagnosticsSource.

        The diagnostics source tags  # noqa: E501

        :param tags: The tags of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this DiagnosticsSource.  # noqa: E501


        :return: The installation_metadata of this DiagnosticsSource.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this DiagnosticsSource.


        :param installation_metadata: The installation_metadata of this DiagnosticsSource.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def origin_registry_id(self):
        """Gets the origin_registry_id of this DiagnosticsSource.  # noqa: E501

        The Registry ID of the Exchange Integration this module is based from, including this field will set this as the module's import base and mark the ID's version as audited  # noqa: E501

        :return: The origin_registry_id of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._origin_registry_id

    @origin_registry_id.setter
    def origin_registry_id(self, origin_registry_id):
        """Sets the origin_registry_id of this DiagnosticsSource.

        The Registry ID of the Exchange Integration this module is based from, including this field will set this as the module's import base and mark the ID's version as audited  # noqa: E501

        :param origin_registry_id: The origin_registry_id of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._origin_registry_id = origin_registry_id

    @property
    def name(self):
        """Gets the name of this DiagnosticsSource.  # noqa: E501

        The diagnostics source name  # noqa: E501

        :return: The name of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiagnosticsSource.

        The diagnostics source name  # noqa: E501

        :param name: The name of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def in_use(self):
        """Gets the in_use of this DiagnosticsSource.  # noqa: E501

        The diagnostics source is in use  # noqa: E501

        :return: The in_use of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this DiagnosticsSource.

        The diagnostics source is in use  # noqa: E501

        :param in_use: The in_use of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._in_use = in_use

    @property
    def checksum(self):
        """Gets the checksum of this DiagnosticsSource.  # noqa: E501

        LM module checksum  # noqa: E501

        :return: The checksum of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this DiagnosticsSource.

        LM module checksum  # noqa: E501

        :param checksum: The checksum of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def id(self):
        """Gets the id of this DiagnosticsSource.  # noqa: E501

        The ID of the LMModule  # noqa: E501

        :return: The id of this DiagnosticsSource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiagnosticsSource.

        The ID of the LMModule  # noqa: E501

        :param id: The id of this DiagnosticsSource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def access_group_ids(self):
        """Gets the access_group_ids of this DiagnosticsSource.  # noqa: E501

        The Access Groups Id's  # noqa: E501

        :return: The access_group_ids of this DiagnosticsSource.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_group_ids

    @access_group_ids.setter
    def access_group_ids(self, access_group_ids):
        """Sets the access_group_ids of this DiagnosticsSource.

        The Access Groups Id's  # noqa: E501

        :param access_group_ids: The access_group_ids of this DiagnosticsSource.  # noqa: E501
        :type: list[int]
        """

        self._access_group_ids = access_group_ids

    @property
    def installation_statuses(self):
        """Gets the installation_statuses of this DiagnosticsSource.  # noqa: E501

        The diagnostics Installation status  # noqa: E501

        :return: The installation_statuses of this DiagnosticsSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._installation_statuses

    @installation_statuses.setter
    def installation_statuses(self, installation_statuses):
        """Sets the installation_statuses of this DiagnosticsSource.

        The diagnostics Installation status  # noqa: E501

        :param installation_statuses: The installation_statuses of this DiagnosticsSource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NEW", "UPGRADED", "AUDITED", "OUTDATED", "INSTALLED", "CUSTOMIZED", "CONFLICT", "PARTIALLY_INSTALLED", "IS_INSTALLED", "IS_CUSTOMIZED", "CAN_INSTALL", "CAN_UPGRADE", "CAN_SKIP", "CAN_DOWNGRADE"]  # noqa: E501
        if not set(installation_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `installation_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(installation_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._installation_statuses = installation_statuses

    @property
    def group(self):
        """Gets the group of this DiagnosticsSource.  # noqa: E501

        The diagnostics source group name  # noqa: E501

        :return: The group of this DiagnosticsSource.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this DiagnosticsSource.

        The diagnostics source group name  # noqa: E501

        :param group: The group of this DiagnosticsSource.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiagnosticsSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiagnosticsSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
