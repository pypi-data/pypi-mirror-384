# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_source_id': 'int',
        'alert_status': 'str',
        'stop_monitoring': 'bool',
        'event_source_name': 'str',
        'disable_alerting': 'bool',
        'event_source_description': 'str',
        'event_type': 'str',
        'device_id': 'int',
        'sdt_status': 'str',
        'device_display_name': 'str',
        'groups_disabled_this_source': 'list[TreeNode]',
        'event_source_group_name': 'str',
        'sdt_at': 'str',
        'alerting_disabled_on': 'TreeNode',
        'id': 'int',
        'alert_status_priority': 'int',
        'alert_disable_status': 'str'
    }

    attribute_map = {
        'event_source_id': 'eventSourceId',
        'alert_status': 'alertStatus',
        'stop_monitoring': 'stopMonitoring',
        'event_source_name': 'eventSourceName',
        'disable_alerting': 'disableAlerting',
        'event_source_description': 'eventSourceDescription',
        'event_type': 'eventType',
        'device_id': 'deviceId',
        'sdt_status': 'sdtStatus',
        'device_display_name': 'deviceDisplayName',
        'groups_disabled_this_source': 'groupsDisabledThisSource',
        'event_source_group_name': 'eventSourceGroupName',
        'sdt_at': 'sdtAt',
        'alerting_disabled_on': 'alertingDisabledOn',
        'id': 'id',
        'alert_status_priority': 'alertStatusPriority',
        'alert_disable_status': 'alertDisableStatus'
    }

    def __init__(self, event_source_id=None, alert_status=None, stop_monitoring=None, event_source_name=None, disable_alerting=None, event_source_description=None, event_type=None, device_id=None, sdt_status=None, device_display_name=None, groups_disabled_this_source=None, event_source_group_name=None, sdt_at=None, alerting_disabled_on=None, id=None, alert_status_priority=None, alert_disable_status=None):  # noqa: E501
        """DeviceEventSource - a model defined in Swagger"""  # noqa: E501
        self._event_source_id = None
        self._alert_status = None
        self._stop_monitoring = None
        self._event_source_name = None
        self._disable_alerting = None
        self._event_source_description = None
        self._event_type = None
        self._device_id = None
        self._sdt_status = None
        self._device_display_name = None
        self._groups_disabled_this_source = None
        self._event_source_group_name = None
        self._sdt_at = None
        self._alerting_disabled_on = None
        self._id = None
        self._alert_status_priority = None
        self._alert_disable_status = None
        self.discriminator = None
        if event_source_id is not None:
            self.event_source_id = event_source_id
        if alert_status is not None:
            self.alert_status = alert_status
        if stop_monitoring is not None:
            self.stop_monitoring = stop_monitoring
        if event_source_name is not None:
            self.event_source_name = event_source_name
        if disable_alerting is not None:
            self.disable_alerting = disable_alerting
        if event_source_description is not None:
            self.event_source_description = event_source_description
        if event_type is not None:
            self.event_type = event_type
        if device_id is not None:
            self.device_id = device_id
        if sdt_status is not None:
            self.sdt_status = sdt_status
        if device_display_name is not None:
            self.device_display_name = device_display_name
        if groups_disabled_this_source is not None:
            self.groups_disabled_this_source = groups_disabled_this_source
        if event_source_group_name is not None:
            self.event_source_group_name = event_source_group_name
        if sdt_at is not None:
            self.sdt_at = sdt_at
        if alerting_disabled_on is not None:
            self.alerting_disabled_on = alerting_disabled_on
        if id is not None:
            self.id = id
        if alert_status_priority is not None:
            self.alert_status_priority = alert_status_priority
        if alert_disable_status is not None:
            self.alert_disable_status = alert_disable_status

    @property
    def event_source_id(self):
        """Gets the event_source_id of this DeviceEventSource.  # noqa: E501

        event source id  # noqa: E501

        :return: The event_source_id of this DeviceEventSource.  # noqa: E501
        :rtype: int
        """
        return self._event_source_id

    @event_source_id.setter
    def event_source_id(self, event_source_id):
        """Sets the event_source_id of this DeviceEventSource.

        event source id  # noqa: E501

        :param event_source_id: The event_source_id of this DeviceEventSource.  # noqa: E501
        :type: int
        """

        self._event_source_id = event_source_id

    @property
    def alert_status(self):
        """Gets the alert_status of this DeviceEventSource.  # noqa: E501

        alert status  # noqa: E501

        :return: The alert_status of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """Sets the alert_status of this DeviceEventSource.

        alert status  # noqa: E501

        :param alert_status: The alert_status of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._alert_status = alert_status

    @property
    def stop_monitoring(self):
        """Gets the stop_monitoring of this DeviceEventSource.  # noqa: E501

        stop monitoring this host event source  # noqa: E501

        :return: The stop_monitoring of this DeviceEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._stop_monitoring

    @stop_monitoring.setter
    def stop_monitoring(self, stop_monitoring):
        """Sets the stop_monitoring of this DeviceEventSource.

        stop monitoring this host event source  # noqa: E501

        :param stop_monitoring: The stop_monitoring of this DeviceEventSource.  # noqa: E501
        :type: bool
        """

        self._stop_monitoring = stop_monitoring

    @property
    def event_source_name(self):
        """Gets the event_source_name of this DeviceEventSource.  # noqa: E501

        event source name defined where creating a event source  # noqa: E501

        :return: The event_source_name of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._event_source_name

    @event_source_name.setter
    def event_source_name(self, event_source_name):
        """Sets the event_source_name of this DeviceEventSource.

        event source name defined where creating a event source  # noqa: E501

        :param event_source_name: The event_source_name of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._event_source_name = event_source_name

    @property
    def disable_alerting(self):
        """Gets the disable_alerting of this DeviceEventSource.  # noqa: E501

        stop alerting for this host event source  # noqa: E501

        :return: The disable_alerting of this DeviceEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._disable_alerting

    @disable_alerting.setter
    def disable_alerting(self, disable_alerting):
        """Sets the disable_alerting of this DeviceEventSource.

        stop alerting for this host event source  # noqa: E501

        :param disable_alerting: The disable_alerting of this DeviceEventSource.  # noqa: E501
        :type: bool
        """

        self._disable_alerting = disable_alerting

    @property
    def event_source_description(self):
        """Gets the event_source_description of this DeviceEventSource.  # noqa: E501

        event source description defined where creating a event source  # noqa: E501

        :return: The event_source_description of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._event_source_description

    @event_source_description.setter
    def event_source_description(self, event_source_description):
        """Sets the event_source_description of this DeviceEventSource.

        event source description defined where creating a event source  # noqa: E501

        :param event_source_description: The event_source_description of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._event_source_description = event_source_description

    @property
    def event_type(self):
        """Gets the event_type of this DeviceEventSource.  # noqa: E501

        event source collector type  # noqa: E501

        :return: The event_type of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DeviceEventSource.

        event source collector type  # noqa: E501

        :param event_type: The event_type of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def device_id(self):
        """Gets the device_id of this DeviceEventSource.  # noqa: E501

        Id of the Device  # noqa: E501

        :return: The device_id of this DeviceEventSource.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceEventSource.

        Id of the Device  # noqa: E501

        :param device_id: The device_id of this DeviceEventSource.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def sdt_status(self):
        """Gets the sdt_status of this DeviceEventSource.  # noqa: E501

        sdt status, three level sdt status: parent-self-child  # noqa: E501

        :return: The sdt_status of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._sdt_status

    @sdt_status.setter
    def sdt_status(self, sdt_status):
        """Sets the sdt_status of this DeviceEventSource.

        sdt status, three level sdt status: parent-self-child  # noqa: E501

        :param sdt_status: The sdt_status of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._sdt_status = sdt_status

    @property
    def device_display_name(self):
        """Gets the device_display_name of this DeviceEventSource.  # noqa: E501

        device display name  # noqa: E501

        :return: The device_display_name of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """Sets the device_display_name of this DeviceEventSource.

        device display name  # noqa: E501

        :param device_display_name: The device_display_name of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._device_display_name = device_display_name

    @property
    def groups_disabled_this_source(self):
        """Gets the groups_disabled_this_source of this DeviceEventSource.  # noqa: E501

        All groups that disable this datasource.  # noqa: E501

        :return: The groups_disabled_this_source of this DeviceEventSource.  # noqa: E501
        :rtype: list[TreeNode]
        """
        return self._groups_disabled_this_source

    @groups_disabled_this_source.setter
    def groups_disabled_this_source(self, groups_disabled_this_source):
        """Sets the groups_disabled_this_source of this DeviceEventSource.

        All groups that disable this datasource.  # noqa: E501

        :param groups_disabled_this_source: The groups_disabled_this_source of this DeviceEventSource.  # noqa: E501
        :type: list[TreeNode]
        """

        self._groups_disabled_this_source = groups_disabled_this_source

    @property
    def event_source_group_name(self):
        """Gets the event_source_group_name of this DeviceEventSource.  # noqa: E501

        event source group name defined where creating a event source  # noqa: E501

        :return: The event_source_group_name of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._event_source_group_name

    @event_source_group_name.setter
    def event_source_group_name(self, event_source_group_name):
        """Sets the event_source_group_name of this DeviceEventSource.

        event source group name defined where creating a event source  # noqa: E501

        :param event_source_group_name: The event_source_group_name of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._event_source_group_name = event_source_group_name

    @property
    def sdt_at(self):
        """Gets the sdt_at of this DeviceEventSource.  # noqa: E501

        sdt on which level, host group or host  # noqa: E501

        :return: The sdt_at of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._sdt_at

    @sdt_at.setter
    def sdt_at(self, sdt_at):
        """Sets the sdt_at of this DeviceEventSource.

        sdt on which level, host group or host  # noqa: E501

        :param sdt_at: The sdt_at of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._sdt_at = sdt_at

    @property
    def alerting_disabled_on(self):
        """Gets the alerting_disabled_on of this DeviceEventSource.  # noqa: E501


        :return: The alerting_disabled_on of this DeviceEventSource.  # noqa: E501
        :rtype: TreeNode
        """
        return self._alerting_disabled_on

    @alerting_disabled_on.setter
    def alerting_disabled_on(self, alerting_disabled_on):
        """Sets the alerting_disabled_on of this DeviceEventSource.


        :param alerting_disabled_on: The alerting_disabled_on of this DeviceEventSource.  # noqa: E501
        :type: TreeNode
        """

        self._alerting_disabled_on = alerting_disabled_on

    @property
    def id(self):
        """Gets the id of this DeviceEventSource.  # noqa: E501

        device event source id  # noqa: E501

        :return: The id of this DeviceEventSource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceEventSource.

        device event source id  # noqa: E501

        :param id: The id of this DeviceEventSource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def alert_status_priority(self):
        """Gets the alert_status_priority of this DeviceEventSource.  # noqa: E501

        the alert status priority, more smaller value more critical   # noqa: E501

        :return: The alert_status_priority of this DeviceEventSource.  # noqa: E501
        :rtype: int
        """
        return self._alert_status_priority

    @alert_status_priority.setter
    def alert_status_priority(self, alert_status_priority):
        """Sets the alert_status_priority of this DeviceEventSource.

        the alert status priority, more smaller value more critical   # noqa: E501

        :param alert_status_priority: The alert_status_priority of this DeviceEventSource.  # noqa: E501
        :type: int
        """

        self._alert_status_priority = alert_status_priority

    @property
    def alert_disable_status(self):
        """Gets the alert_disable_status of this DeviceEventSource.  # noqa: E501

        alert disable status  # noqa: E501

        :return: The alert_disable_status of this DeviceEventSource.  # noqa: E501
        :rtype: str
        """
        return self._alert_disable_status

    @alert_disable_status.setter
    def alert_disable_status(self, alert_disable_status):
        """Sets the alert_disable_status of this DeviceEventSource.

        alert disable status  # noqa: E501

        :param alert_disable_status: The alert_disable_status of this DeviceEventSource.  # noqa: E501
        :type: str
        """

        self._alert_disable_status = alert_disable_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEventSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
