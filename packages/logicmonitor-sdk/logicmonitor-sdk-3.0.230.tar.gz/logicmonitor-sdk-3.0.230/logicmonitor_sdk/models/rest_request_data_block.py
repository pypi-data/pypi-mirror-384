# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestRequestDataBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'by_id': 'JsonNode',
        'all_ids': 'RestRequestAllIds',
        'items': 'JsonNode',
        'items_iterator': 'object'
    }

    attribute_map = {
        'by_id': 'byId',
        'all_ids': 'allIds',
        'items': 'items',
        'items_iterator': 'itemsIterator'
    }

    def __init__(self, by_id=None, all_ids=None, items=None, items_iterator=None):  # noqa: E501
        """RestRequestDataBlock - a model defined in Swagger"""  # noqa: E501
        self._by_id = None
        self._all_ids = None
        self._items = None
        self._items_iterator = None
        self.discriminator = None
        if by_id is not None:
            self.by_id = by_id
        if all_ids is not None:
            self.all_ids = all_ids
        if items is not None:
            self.items = items
        if items_iterator is not None:
            self.items_iterator = items_iterator

    @property
    def by_id(self):
        """Gets the by_id of this RestRequestDataBlock.  # noqa: E501


        :return: The by_id of this RestRequestDataBlock.  # noqa: E501
        :rtype: JsonNode
        """
        return self._by_id

    @by_id.setter
    def by_id(self, by_id):
        """Sets the by_id of this RestRequestDataBlock.


        :param by_id: The by_id of this RestRequestDataBlock.  # noqa: E501
        :type: JsonNode
        """

        self._by_id = by_id

    @property
    def all_ids(self):
        """Gets the all_ids of this RestRequestDataBlock.  # noqa: E501


        :return: The all_ids of this RestRequestDataBlock.  # noqa: E501
        :rtype: RestRequestAllIds
        """
        return self._all_ids

    @all_ids.setter
    def all_ids(self, all_ids):
        """Sets the all_ids of this RestRequestDataBlock.


        :param all_ids: The all_ids of this RestRequestDataBlock.  # noqa: E501
        :type: RestRequestAllIds
        """

        self._all_ids = all_ids

    @property
    def items(self):
        """Gets the items of this RestRequestDataBlock.  # noqa: E501


        :return: The items of this RestRequestDataBlock.  # noqa: E501
        :rtype: JsonNode
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RestRequestDataBlock.


        :param items: The items of this RestRequestDataBlock.  # noqa: E501
        :type: JsonNode
        """

        self._items = items

    @property
    def items_iterator(self):
        """Gets the items_iterator of this RestRequestDataBlock.  # noqa: E501


        :return: The items_iterator of this RestRequestDataBlock.  # noqa: E501
        :rtype: object
        """
        return self._items_iterator

    @items_iterator.setter
    def items_iterator(self, items_iterator):
        """Sets the items_iterator of this RestRequestDataBlock.


        :param items_iterator: The items_iterator of this RestRequestDataBlock.  # noqa: E501
        :type: object
        """

        self._items_iterator = items_iterator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestRequestDataBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestRequestDataBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
