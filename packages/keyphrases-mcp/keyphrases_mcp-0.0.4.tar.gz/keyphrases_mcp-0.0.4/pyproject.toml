[project]
name = "keyphrases-mcp"
version = "0.0.4"
description = "Keyphrases MCP server - Model Context Protocol server to extract keyphrases from a text using a BERT model"
readme = "README-pypi.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["keyphrases", "keywords", "metadata", "mcp", "model-context-protocol", "ai", "llm", "bert", "nlp", "text-analysis"]
authors = [
    {name = "Ivan Rublev", email = "git@ivanrublev.me"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
homepage = "https://github.com/IvanRublev/keyphrases-mcp"
repository = "https://github.com/IvanRublev/keyphrases-mcp"
issues = "https://github.com/IvanRublev/keyphrases-mcp/issues"

dependencies = [
    "click>=8.3.0",
    "dotenv>=0.9.9",
    "fastmcp>=2.12.4",
    "keybert[spacy]>=0.9.0",
    "keyphrase-vectorizers>=0.0.13",
    "numpy>=1.0,<2.0",
    "pip>=24.0",
    "toml>=0.10.2",
    "torch==2.2.2",
]

[project.scripts]
keyphrases-mcp-server = "src.main:main"

[build-system]
requires = ["uv_build>=0.8.3,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "src"
module-root = "."

[dependency-groups]
dev = [
    "pyrefly>=0.36.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-mock>=3.15.1",
    "pytest-watcher>=0.4.3",
    "ruff>=0.14.0",
    "jsonschema>=4.0.0",
    "requests>=2.25.0",
]

[tool.pyrefly]
project-includes = ["src"]
project-excludes = ["**/.[!/.]*", "**/tests"]
search-path = ["."]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.11
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
#select = ["E4", "E7", "E9", "F"]
select = ["E", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
