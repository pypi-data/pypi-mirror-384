Metadata-Version: 2.4
Name: xmlriver-pro
Version: 1.2.4
Summary: Professional Python client for XMLRiver API with full coverage
Home-page: https://github.com/xmlriver-pro/xmlriver-pro
Author: XMLRiver Pro Team
Author-email: XMLRiver Pro Team <seo@controlseo.ru>
License: MIT
Project-URL: Homepage, https://xmlriver.com
Project-URL: Repository, https://github.com/Eapwrk/xmlriver-pro
Project-URL: Bug Reports, https://github.com/Eapwrk/xmlriver-pro/issues
Project-URL: Original Repository, https://github.com/KursHub-ru/xmlriver
Keywords: xmlriver,google,yandex,search,api,seo,scraping,search-engine,news,images,maps,ads
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: XML
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.31.0
Requires-Dist: xmltodict>=0.13.0
Requires-Dist: aiohttp>=3.8.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: pylint>=2.17.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=6.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "docs"
Requires-Dist: myst-parser>=1.0.0; extra == "docs"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# XMLRiver Pro

[![Python Version](https://img.shields.io/badge/python-3.10%2B-blue.svg)](https://python.org)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Coverage](https://img.shields.io/badge/coverage-57%25-brightgreen.svg)](https://github.com/Eapwrk/xmlriver-pro)

> Fork of [KursHub-ru/xmlriver](https://github.com/KursHub-ru/xmlriver)

Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API xmlriver.com. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞ –≤ Google –∏ Yandex: –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫, –Ω–æ–≤–æ—Å—Ç–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–∞—Ä—Ç—ã, —Ä–µ–∫–ª–∞–º–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏.

## ‚ú® –ß—Ç–æ —É–º–µ–µ—Ç

- üîç –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ Google –∏ Yandex
- üì∞ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
- üñºÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, —Ç–∏–ø)
- üó∫Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–∞–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
- üì¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ)
- üß© –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (OneBox, Knowledge Graph)
- ‚ö° **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** —Å aiohttp
- üîÑ **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã** —Å asyncio

## üèóÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- ‚úÖ –ü–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è Python 3.10+
- üèõÔ∏è –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- üß™ 66 —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º 57%
- ‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- ‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- ‚ö° **–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã**
- üîÑ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞**

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### üì¶ **–ò–∑ PyPI (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):**
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
pip install xmlriver-pro

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
pip install xmlriver-pro==1.1.1

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
pip install --upgrade xmlriver-pro
```

### üöÄ **–ò–∑ GitHub:**
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
pip install git+https://github.com/Eapwrk/xmlriver-pro.git

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
pip install git+https://github.com/Eapwrk/xmlriver-pro.git@v1.1.1

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
pip install --upgrade git+https://github.com/Eapwrk/xmlriver-pro.git
```

### üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏:**
```bash
python -c "import xmlriver_pro; print(xmlriver_pro.__version__)"
```

## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è

### üìã **–ö–∞–∫ —É–∑–Ω–∞—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö:**
- ‚≠ê **Watch —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π** –Ω–∞ GitHub –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- üìß **Email:** seo@controlseo.ru
- üêõ **Issues:** [GitHub Issues](https://github.com/Eapwrk/xmlriver-pro/issues)
- üí¨ **Discussions:** [GitHub Discussions](https://github.com/Eapwrk/xmlriver-pro/discussions)

### üìö **–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:**
- üìÑ **CHANGELOG.md** - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
- üè∑Ô∏è **GitHub Releases** - —Ä–µ–ª–∏–∑—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- üîÑ **Semantic Versioning** - –º–∞–∂–æ—Ä–Ω—ã–µ.–º–∏–Ω–æ—Ä–Ω—ã–µ.–ø–∞—Ç—á –≤–µ—Ä—Å–∏–∏

### üöÄ **–ö–∞–∫ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è:**
```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
pip show xmlriver-pro

# –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
pip install --upgrade xmlriver-pro

# –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
pip install xmlriver-pro==1.1.0
```

–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
```bash
git clone https://github.com/Eapwrk/xmlriver-pro.git
cd xmlriver-pro
pip install -e .
```

## üîß –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

### –û—Å–Ω–æ–≤–Ω—ã–µ:
- **requests** - HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API
- **xmltodict** - –ø–∞—Ä—Å–∏–Ω–≥ XML –æ—Ç–≤–µ—Ç–æ–≤
- **aiohttp** - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã

### –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
- **pytest** - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- **black** - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
- **pylint** - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
- **mypy** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤

## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:

```bash
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
XMLRIVER_USER_ID=6881
XMLRIVER_API_KEY=your_api_key_here
```

```python
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–æ–¥–µ
user_id = int(os.getenv("XMLRIVER_USER_ID", "0"))
api_key = os.getenv("XMLRIVER_API_KEY", "")

client = GoogleClient(user_id, api_key)
```

–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤:

### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –¢–∏–ø | –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é | –û–ø–∏—Å–∞–Ω–∏–µ |
|----------|-----|--------------|----------|
| `timeout` | `int` | `60` | –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∞–∫—Å–∏–º—É–º 60) |
| `max_retries` | `int` | `3` | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞ |
| `retry_delay` | `float` | `1.0` | –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö |
| `enable_retry` | `bool` | `True` | –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã |
| `max_concurrent` | `int` | `10` | –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∂–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ) |

### –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff:

–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º retry –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:
- 1-—è –ø–æ–ø—ã—Ç–∫–∞: `retry_delay * 1` = 1.0 —Å–µ–∫
- 2-—è –ø–æ–ø—ã—Ç–∫–∞: `retry_delay * 2` = 2.0 —Å–µ–∫  
- 3-—è –ø–æ–ø—ã—Ç–∫–∞: `retry_delay * 4` = 4.0 —Å–µ–∫
- 4-—è –ø–æ–ø—ã—Ç–∫–∞: `retry_delay * 8` = 8.0 —Å–µ–∫

### –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:

```python
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
client = GoogleClient(user_id=123, api_key="key")

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ retry
client = GoogleClient(
    user_id=123, 
    api_key="key",
    timeout=120,        # 2 –º–∏–Ω—É—Ç—ã
    max_retries=5,      # 5 –ø–æ–ø—ã—Ç–æ–∫
    retry_delay=2.0,    # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫
    max_concurrent=5    # –º–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
)

# –û—Ç–∫–ª—é—á–∏—Ç—å retry –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
client = GoogleClient(
    user_id=123, 
    api_key="key",
    enable_retry=False  # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
async with AsyncGoogleClient(
    user_id=123,
    api_key="key", 
    max_retries=3,
    retry_delay=1.5,
    max_concurrent=8
) as client:
    result = await client.search("python")
```

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```python
from xmlriver_pro import GoogleClient, YandexClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
google = GoogleClient(user_id=123, api_key="your_google_key")
yandex = YandexClient(user_id=123, api_key="your_yandex_key")

# –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
google_results = google.search("python programming")
yandex_results = yandex.search("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ python")

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
google_count = google_results.total_results
yandex_count = yandex_results.total_results
```

## ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –ë–∞–∑–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫

```python
import asyncio
from xmlriver_pro import AsyncGoogleClient, AsyncYandexClient

async def main():
    # Google –ø–æ–∏—Å–∫
    async with AsyncGoogleClient(user_id=123, api_key="your_google_key") as google:
        results = await google.search("python programming")
        print(f"Google: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # Yandex –ø–æ–∏—Å–∫
    async with AsyncYandexClient(user_id=123, api_key="your_yandex_key") as yandex:
        results = await yandex.search("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ python")
        print(f"Yandex: {results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –ó–∞–ø—É—Å–∫
asyncio.run(main())
```

### –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

```python
import asyncio
from xmlriver_pro import AsyncGoogleClient

async def parallel_search():
    async with AsyncGoogleClient(user_id=123, api_key="your_key") as google:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = [
            google.search("python programming"),
            google.search("machine learning"),
            google.search("data science")
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)
        
        for i, result in enumerate(results):
            print(f"–ó–∞–ø—Ä–æ—Å {i+1}: {result.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

asyncio.run(parallel_search())
```

### –°–º–µ—à–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Google + Yandex

```python
import asyncio
from xmlriver_pro import AsyncGoogleClient, AsyncYandexClient

async def mixed_search():
    query = "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ python"
    
    async with AsyncGoogleClient(user_id=123, api_key="google_key") as google, \
             AsyncYandexClient(user_id=123, api_key="yandex_key") as yandex:
        
        # –ü–æ–∏—Å–∫ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        google_task = google.search(query)
        yandex_task = yandex.search(query)
        
        google_results, yandex_results = await asyncio.gather(
            google_task, yandex_task
        )
        
        print(f"Google: {google_results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print(f"Yandex: {yandex_results.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

asyncio.run(mixed_search())
```

### üì∞ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º

```python
from xmlriver_pro import GoogleNews, YandexNews
from xmlriver_pro.core.types import TimeFilter

google_news = GoogleNews(user_id=123, api_key="your_key")
news_results = google_news.search_news("python", time_filter=TimeFilter.LAST_WEEK)

yandex_news = YandexNews(user_id=123, api_key="your_key")
yandex_news_results = yandex_news.search_news_last_day("python –Ω–æ–≤–æ—Å—Ç–∏")
```

### üñºÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

```python
from xmlriver_pro import GoogleImages

images = GoogleImages(user_id=123, api_key="your_key")

image_results = images.search_images("python logo", count=20)
large_images = images.search_images_by_size("python logo", "large")
color_images = images.search_images_by_color("python logo", "blue")
```

### üó∫Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–∞–º

```python
from xmlriver_pro import GoogleMaps

maps = GoogleMaps(user_id=123, api_key="your_key")

map_results = maps.search_maps(
    query="–∫–∞—Ñ–µ –ú–æ—Å–∫–≤–∞",
    zoom=12,
    coords=(55.7558, 37.6176)
)

nearby_cafes = maps.search_nearby("–∫–∞—Ñ–µ", coords=(55.7558, 37.6176), radius=1000)
```

### üì¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏

```python
from xmlriver_pro import GoogleAds, YandexAds

google_ads = GoogleAds(user_id=123, api_key="your_key")
ads_response = google_ads.get_ads("python programming")

yandex_ads = YandexAds(user_id=123, api_key="your_key")
yandex_ads_response = yandex_ads.get_ads("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ python")
```

### üß© –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏

```python
from xmlriver_pro import GoogleSpecialBlocks, YandexSpecialBlocks

# Google —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
google_special = GoogleSpecialBlocks(user_id=123, api_key="your_key")

# OneBox –¥–æ–∫—É–º–µ–Ω—Ç—ã
onebox_docs = google_special.get_onebox_documents("python", ["organic", "video"])

# Knowledge Graph
kg = google_special.get_knowledge_graph("Python programming language")

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
calc_result = google_special.get_calculator("2 + 2")

# Yandex –∫–æ–ª–¥—É–Ω—â–∏–∫–∏
yandex_special = YandexSpecialBlocks(user_id=123, api_key="your_key")

# –ü–æ–≥–æ–¥–∞
weather = yandex_special.get_weather("–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞")

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
translation = yandex_special.get_translator("hello world")
```

## üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### ‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

```python
from xmlriver_pro.utils import validate_coords, validate_zoom, validate_url

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
coords = (55.7558, 37.6176)
if validate_coords(coords):
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã

# –í–∞–ª–∏–¥–∞—Ü–∏—è zoom
if validate_zoom(12):
    # Zoom –≤–∞–ª–∏–¥–µ–Ω

# –í–∞–ª–∏–¥–∞—Ü–∏—è URL
if validate_url("https://python.org"):
    # URL –≤–∞–ª–∏–¥–µ–Ω
```

### üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

```python
from xmlriver_pro.utils import format_search_response, format_ads_response

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
formatted_results = format_search_response(search_results)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–ª–æ–∫–æ–≤
formatted_ads = format_ads_response(ads_response)
```

### ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

```python
from xmlriver_pro.core import (
    XMLRiverError, AuthenticationError, RateLimitError, 
    NoResultsError, NetworkError, ValidationError,
    InsufficientFundsError, ServiceUnavailableError
)

try:
    results = google.search("python")
except AuthenticationError as e:
    # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥—ã 31, 42, 45)
    logger.error(f"Authentication failed: {e}")
except RateLimitError as e:
    # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–æ–¥—ã 110, 111, 115)
    logger.warning(f"Rate limit exceeded: {e}")
except NoResultsError as e:
    # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–∫–æ–¥ 15)
    logger.info(f"No results found: {e}")
except InsufficientFundsError as e:
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–∫–æ–¥ 200)
    logger.error(f"Insufficient funds: {e}")
except ServiceUnavailableError as e:
    # –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥—ã 101, 201)
    logger.warning(f"Service unavailable: {e}")
except NetworkError as e:
    # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–∫–æ–¥—ã 500, 202) - —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞
    logger.error(f"Network error: {e}")
except ValidationError as e:
    # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–æ–¥—ã 2, 102-108, 120, 121)
    logger.error(f"Validation error: {e}")
```

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

```python
# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–æ–¥–∏–Ω –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç)
balance = google.get_balance()  # –∏–ª–∏ yandex.get_balance() - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Ä–∞–∑–Ω–∞—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã)
google_cost = google.get_cost()  # –°—Ç–æ–∏–º–æ—Å—Ç—å Google –∑–∞–ø—Ä–æ—Å–æ–≤
yandex_cost = yandex.get_cost()  # –°—Ç–æ–∏–º–æ—Å—Ç—å Yandex –∑–∞–ø—Ä–æ—Å–æ–≤

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö API
limits = google.get_api_limits()
print(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {limits['max_concurrent_streams']}")
print(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Google: {limits['daily_limits']['google']:,} –∑–∞–ø—Ä–æ—Å–æ–≤")
print(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Yandex: {limits['daily_limits']['yandex']:,} –∑–∞–ø—Ä–æ—Å–æ–≤")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
is_indexed = google.check_indexing("https://python.org")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≤–µ—Ä–∏—è –∫ –¥–æ–º–µ–Ω—É
is_trusted = google.is_trust_domain("python.org")
```

## ‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API

### üî¢ **–ü–æ—Ç–æ–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
- **–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤:** 10 –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã (Google, Yandex, Wordstat)
- **–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**
  - Google: ~200,000 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å—É—Ç–∫–∏
  - Yandex: ~150,000 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å—É—Ç–∫–∏
- **–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:** 3-6 —Å–µ–∫—É–Ω–¥ (–æ–±—ã—á–Ω–æ), –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

### ‚è±Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç–∞–º:**
```python
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
google = GoogleClient(user_id=123, api_key="key", timeout=60)

# –ü—Ä–∏ –Ω–∏–∑–∫–æ–º —Ç–∞–π–º–∞—É—Ç–µ –µ—Å—Ç—å —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—Ç–≤–µ—Ç—ã
# –î–µ–Ω—å–≥–∏ –∑–∞ –∑–∞–ø—Ä–æ—Å —Å–Ω–∏–º–∞—é—Ç—Å—è, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏–π—Ç–∏
```

### üö® **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–æ–≤:**
```python
try:
    results = google.search("python")
except RateLimitError as e:
    if e.code in [110, 111, 115]:
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥
        results = google.search("python")  # –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
pytest

# –ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
pytest --cov=xmlriver_pro

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
pytest tests/test_google.py
pytest tests/test_yandex.py

# –ó–∞–ø—É—Å–∫ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
pytest -v
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- [README.md](README.md) - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- [docs/examples.md](docs/examples.md) - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- [–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥](https://github.com/Eapwrk/xmlriver-pro) - –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

## ü§ù –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç

Issues –∏ Pull Requests –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –Ω–∞ [GitHub](https://github.com/Eapwrk/xmlriver-pro).

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

```bash
git clone https://github.com/Eapwrk/xmlriver-pro.git
cd xmlriver-pro
pip install -e ".[dev]"
pre-commit install
```

### –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
pytest
black xmlriver_pro tests
pylint xmlriver_pro
mypy xmlriver_pro
```

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ [LICENSE](LICENSE).

## üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

- [xmlriver.com](https://xmlriver.com) –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ API
- Python —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∑–∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É
- –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- üìß Email: seo@controlseo.ru
- üêõ Issues: [GitHub Issues](https://github.com/Eapwrk/xmlriver-pro/issues)
- üí¨ Discussions: [GitHub Discussions](https://github.com/Eapwrk/xmlriver-pro/discussions)

---

**XMLRiver Pro** - Python –∫–ª–∏–µ–Ω—Ç –¥–ª—è API xmlriver.com
