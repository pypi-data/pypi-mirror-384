# -----------------------------------------------------------------------------
##  Build System Configurations
#   https://setuptools.pypa.io/en/latest/setuptools.html#building-and-distributing-packages-with-setuptools
# -----------------------------------------------------------------------------

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aibs-informatics-aws-lambda"
authors = [{ name = "AIBS Informatics Group", email = "marmot@alleninstitute.onmicrosoft.com"}]
maintainers = [{ name = "AIBS Informatics Group", email = "marmot@alleninstitute.onmicrosoft.com"}]
description = "Utility library for building validated and typed AWS Lambda functions"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.9"
dynamic = [
    "version",
]
dependencies = [
    "aibs-informatics-aws-utils>=0.0.8,<1",
    "aibs-informatics-core>=0.2.4,<1",
    "aws-lambda-powertools ~= 2.35",
    "pydantic >= 2.0.3, < 3",
    "aws-lambda-typing",
]

[dependency-groups]
dev = [
    "aibs-informatics-test-resources[all]~=0.1.1",
    "boto3-stubs[athena,batch,ecs,essential,sns,stepfunctions]",
    "moto[lambda,stepfunctions,sts] ~= 4.0",
]

docker = [
    "awslambdaric",
]

release = [
    "build",
    "bump-my-version",
    "wheel",
]

[project.scripts]
handle-lambda-request = "aibs_informatics_aws_lambda.main:handle_cli"

[tool.setuptools.dynamic]
version = {attr = "aibs_informatics_aws_lambda._version.__version__"}

[tool.setuptools.package-data]
"*" = ['py.typed']

[tool.setuptools.packages.find]
where = ["src"]

[project.urls]
Documentation = "https://.github.io/aibs-informatics-aws-lambda/"
Homepage = "https://github.com/AllenInstitute/aibs-informatics-aws-lambda/"
Issues = "https://github.com/AllenInstitute/aibs-informatics-aws-lambda/issues"
Repository = "https://github.com/AllenInstitute/aibs-informatics-aws-lambda/"


# -----------------------------------------------------------------------------
##  astral-uv Configurations
#   https://docs.astral.sh/uv/getting-started/
# -----------------------------------------------------------------------------

[tool.uv]

# -----------------------------------------------------------------------------
##  Pyright Configurations
#   https://github.com/microsoft/pyright/blob/main/docs/configuration.md
# -----------------------------------------------------------------------------

[tool.pyright]
reportGeneralTypeIssues = false
typeCheckingMode = "basic"

# -----------------------------------------------------------------------------
##  Coverage Configurations 
#   https://coverage.readthedocs.io/en/7.0.4/config.html#
# -----------------------------------------------------------------------------

[tool.coverage]
# Note: we use pytest-cov to generate coverage reports
#       when running tests. but these coverage configs
#       are read when doing so.  
[tool.coverage.run]
branch = true
command_line = "coverage -m pytest"
data_file = "build/.coverage"
source = [
    "src/"
]

[tool.coverage.report]
omit = [
    "test/*"
]
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]
skip_empty = true

[tool.coverage.html]
directory = "build/documentation/coverage"

[tool.coverage.xml]
output = "build/documentation/coverage.xml"

# -----------------------------------------------------------------------------
##  pytest Configurations
#   https://docs.pytest.org/en/7.2.x/reference/customize.html
# -----------------------------------------------------------------------------

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra", 
    "--verbose",
    "--ignore=build/private",
    # Coverage options should be managed in the .coveragerc file.
    # The below configurations simply enable coverage and reporting.  
    "--cov", 
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0",
    "--color=yes",
] 
testpaths = [
    "test",
]
cache_dir = "build/.pytest_cache"
  
# -----------------------------------------------------------------------------
##  MyPy Configurations
#   https://mypy.readthedocs.io/en/stable/config_file.html#example-pyproject-toml
# -----------------------------------------------------------------------------

[tool.mypy]
exclude = '''(?x)(
    assets/
    | build/
    | build_tools
    | setup.py$
    | test/
)'''

cache_dir = "build/.mypy_cache"

# Using no incremental to avoid known issue with mypy and some packages:
# https://github.com/python/mypy/issues/9852
incremental = true

# Import Discovery
# https://mypy.readthedocs.io/en/stable/config_file.html#import-discovery
ignore_missing_imports = true
follow_imports = "silent"
no_site_packages = true

# Untyped definitions and calls
# https://mypy.readthedocs.io/en/stable/config_file.html#untyped-definitions-and-calls
# TODO: enable and fix errors
check_untyped_defs = false

# Miscellaneous strictness flags
# https://mypy.readthedocs.io/en/latest/config_file.html#miscellaneous-strictness-flags
allow_redefinition = true


# Configuring Error Messages
# https://mypy.readthedocs.io/en/stable/config_file.html#configuring-error-messages
show_error_codes = true
color_output = true
pretty = true
show_absolute_path = false

# Reporting Generation
# https://mypy.readthedocs.io/en/stable/config_file.html#report-generation
# [DEBUG] UNCOMMENT FOR DEBUG PURPOSES ONLY! Type coverage impacts test 
# html_report = build/documentation/mypy/
# xml_report = build/documentation/mypy/
# cobertura_xml_report = build/documentation/mypy/

# None and Optional handling
# https://mypy.readthedocs.io/en/latest/config_file.html#none-and-optional-handling
strict_optional = false

# Miscellaneous
# https://mypy.readthedocs.io/en/latest/config_file.html#miscellaneous
# [DEBUG] If you need to better understand type error, increase verbosity
verbosity = 0

[[tool.mypy.overrides]]
module = [
    "src.*",
    "test.*"
]
ignore_errors = false


# -----------------------------------------------------------------------------
##  ruff Configurations
#   https://beta.ruff.rs/docs/configuration/
# -----------------------------------------------------------------------------

[tool.ruff]
line-length = 99
src = ["src", "test"]
cache-dir = "build/.ruff_cache"

[tool.ruff.lint]
select = ["E", "F", "I", "W", "C90"]
ignore = [
    "F403",  # 'from module import *' used; unable to detect undefined names
]

[tool.ruff.lint.per-file-ignores]
"test/**" = ["E501", "E712", "E721", "F405", "F841"]



# -----------------------------------------------------------------------------
##  bumpversion Configurations
#   https://callowayproject.github.io/bump-my-version/
# -----------------------------------------------------------------------------

[tool.bumpversion]
allow_dirty = false
commit = true
commit_args = ""
current_version = "0.0.12"
ignore_missing_version = false
message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
sign_tags = false
tag = true
tag_message = "Bump version: {current_version} → {new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "src/aibs_informatics_aws_lambda/_version.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""
