[project]
name = "youtrack-rocket-mcp"
dynamic = ["version"]
description = "ðŸš€ Lightning-fast Model Context Protocol (MCP) server for YouTrack issue tracking system"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Ilya Volnistov", email = "ivolnistov@gmail.com" }
]
keywords = ["mcp", "youtrack", "issue-tracking", "api", "integration", "rocket", "fast", "async"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "fastmcp>=0.1.0",  # FastMCP includes mcp as a dependency
]

[dependency-groups]
dev = [
    # Dependencies
    "python-dotenv>=1.0.0",

    # Code quality tools
    "ruff>=0.11.9",
    "mypy>=1.17.1",
    "pre-commit>=3.8.0",
    "detect-secrets>=1.5.0",

    # Testing tools
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "pytest-asyncio>=0.24.0",

    # Type stubs
    "types-requests",
]

[tool.uv.sources]
mcp = { git = "https://github.com/modelcontextprotocol/python-sdk.git", rev = "main" }

[project.scripts]
youtrack-rocket-mcp = "youtrack_rocket_mcp.server:main"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0-dev"

[tool.hatch.build.hooks.vcs]
version-file = "src/youtrack_rocket_mcp/_version.py"

[tool.hatch.build.targets.wheel]
sources = ["src"]
packages = ["src/youtrack_rocket_mcp"]

# Ruff configuration
[tool.ruff]
exclude = [
    ".venv",
    "venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "**/youtrack_rocket_mcp/_version.py",  # Auto-generated by hatch-vcs
]
line-length = 120
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]
ignore = [
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.pylint]
max-args = 7
max-locals = 20
max-statements = 60

[tool.ruff.lint.isort]
known-first-party = ["youtrack_rocket_mcp"]

[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = [
    "S101",    # assert statements allowed in tests
    "T201",    # print statements allowed in tests
    "PLR2004", # magic values allowed in tests
    "ARG001",  # unused arguments (fixtures)
    "ARG002",  # unused arguments (setUp)
]
# Tools files - allow long lines in documentation
"src/youtrack_rocket_mcp/tools/*.py" = [
    "E501",    # Long lines are OK in tool documentation
]
# Search tool has a complex filter method
"src/youtrack_rocket_mcp/tools/search.py" = [
    "E501",    # Long lines are OK in tool documentation
    "PLR0915", # filter_issues is complex but well-structured
]
# Server module needs print for error messages to stderr
"src/youtrack_rocket_mcp/server.py" = [
    "T201",    # print statements are needed for error output to stderr
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
show_column_numbers = true
show_error_context = false
follow_imports = "normal"
plugins = ["pydantic.mypy"]
warn_unreachable = true
mypy_path = ["src"]
exclude = [
    "tests/",
    "build/",
    "dist/",
    "_version.py",  # Auto-generated by hatch-vcs
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "youtrack_rocket_mcp._version"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "httpx.*",
    "requests.*",
    "dotenv.*",
]
ignore_missing_imports = true


# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=youtrack_rocket_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning:pydantic._internal._config",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]
