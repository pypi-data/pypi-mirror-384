# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iparapheur_provisioning.models.desk_representation import DeskRepresentation
from iparapheur_provisioning.models.metadata_representation import MetadataRepresentation
from iparapheur_provisioning.models.user_representation import UserRepresentation
from typing import Optional, Set
from typing_extensions import Self

class DeskDto(BaseModel):
    """
    body
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=2, strict=True, max_length=255)]
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    short_name: Annotated[str, Field(min_length=2, strict=True, max_length=255)] = Field(alias="shortName")
    description: Optional[StrictStr] = None
    folder_creation_allowed: Optional[StrictBool] = Field(default=None, alias="folderCreationAllowed")
    action_allowed: Optional[StrictBool] = Field(default=None, alias="actionAllowed")
    archiving_allowed: Optional[StrictBool] = Field(default=None, alias="archivingAllowed")
    chain_allowed: Optional[StrictBool] = Field(default=None, alias="chainAllowed")
    parent_desk_id: Optional[StrictStr] = Field(default=None, alias="parentDeskId")
    parent_desk: Optional[DeskRepresentation] = Field(default=None, alias="parentDesk")
    owner_ids: Annotated[List[StrictStr], Field(min_length=0, max_length=250)] = Field(alias="ownerIds")
    owners: Optional[List[UserRepresentation]] = None
    associated_desk_ids: Annotated[List[StrictStr], Field(min_length=0, max_length=250)] = Field(alias="associatedDeskIds")
    associated_desks: Optional[List[Optional[DeskRepresentation]]] = Field(default=None, alias="associatedDesks")
    filterable_metadata_ids: Annotated[List[StrictStr], Field(min_length=0, max_length=250)] = Field(alias="filterableMetadataIds")
    filterable_metadata: Optional[List[MetadataRepresentation]] = Field(default=None, alias="filterableMetadata")
    supervisor_ids: Annotated[List[StrictStr], Field(min_length=0, max_length=50)] = Field(alias="supervisorIds")
    supervisors: Optional[List[UserRepresentation]] = None
    delegation_manager_ids: Annotated[List[StrictStr], Field(min_length=0, max_length=50)] = Field(alias="delegationManagerIds")
    delegation_managers: Optional[List[UserRepresentation]] = Field(default=None, alias="delegationManagers")
    __properties: ClassVar[List[str]] = ["id", "name", "tenantId", "shortName", "description", "folderCreationAllowed", "actionAllowed", "archivingAllowed", "chainAllowed", "parentDeskId", "parentDesk", "ownerIds", "owners", "associatedDeskIds", "associatedDesks", "filterableMetadataIds", "filterableMetadata", "supervisorIds", "supervisors", "delegationManagerIds", "delegationManagers"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\r\n ]*$", value):
            raise ValueError(r"must validate the regular expression /^[^\r\n ]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeskDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "tenant_id",
            "owners",
            "associated_desks",
            "filterable_metadata",
            "supervisors",
            "delegation_managers",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent_desk
        if self.parent_desk:
            _dict['parentDesk'] = self.parent_desk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict['owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_desks (list)
        _items = []
        if self.associated_desks:
            for _item_associated_desks in self.associated_desks:
                if _item_associated_desks:
                    _items.append(_item_associated_desks.to_dict())
            _dict['associatedDesks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filterable_metadata (list)
        _items = []
        if self.filterable_metadata:
            for _item_filterable_metadata in self.filterable_metadata:
                if _item_filterable_metadata:
                    _items.append(_item_filterable_metadata.to_dict())
            _dict['filterableMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supervisors (list)
        _items = []
        if self.supervisors:
            for _item_supervisors in self.supervisors:
                if _item_supervisors:
                    _items.append(_item_supervisors.to_dict())
            _dict['supervisors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delegation_managers (list)
        _items = []
        if self.delegation_managers:
            for _item_delegation_managers in self.delegation_managers:
                if _item_delegation_managers:
                    _items.append(_item_delegation_managers.to_dict())
            _dict['delegationManagers'] = _items
        # set to None if parent_desk (nullable) is None
        # and model_fields_set contains the field
        if self.parent_desk is None and "parent_desk" in self.model_fields_set:
            _dict['parentDesk'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeskDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "tenantId": obj.get("tenantId"),
            "shortName": obj.get("shortName"),
            "description": obj.get("description"),
            "folderCreationAllowed": obj.get("folderCreationAllowed"),
            "actionAllowed": obj.get("actionAllowed"),
            "archivingAllowed": obj.get("archivingAllowed"),
            "chainAllowed": obj.get("chainAllowed"),
            "parentDeskId": obj.get("parentDeskId"),
            "parentDesk": DeskRepresentation.from_dict(obj["parentDesk"]) if obj.get("parentDesk") is not None else None,
            "ownerIds": obj.get("ownerIds"),
            "owners": [UserRepresentation.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None,
            "associatedDeskIds": obj.get("associatedDeskIds"),
            "associatedDesks": [DeskRepresentation.from_dict(_item) for _item in obj["associatedDesks"]] if obj.get("associatedDesks") is not None else None,
            "filterableMetadataIds": obj.get("filterableMetadataIds"),
            "filterableMetadata": [MetadataRepresentation.from_dict(_item) for _item in obj["filterableMetadata"]] if obj.get("filterableMetadata") is not None else None,
            "supervisorIds": obj.get("supervisorIds"),
            "supervisors": [UserRepresentation.from_dict(_item) for _item in obj["supervisors"]] if obj.get("supervisors") is not None else None,
            "delegationManagerIds": obj.get("delegationManagerIds"),
            "delegationManagers": [UserRepresentation.from_dict(_item) for _item in obj["delegationManagers"]] if obj.get("delegationManagers") is not None else None
        })
        return _obj


