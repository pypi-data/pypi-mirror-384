# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iparapheur_provisioning.models.desk_dto import DeskDto

class TestDeskDto(unittest.TestCase):
    """DeskDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeskDto:
        """Test DeskDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeskDto`
        """
        model = DeskDto()
        if include_optional:
            return DeskDto(
                id = '',
                name = 'jXAuKb%@;_5)#fEb-bx%oZ01',
                tenant_id = '',
                short_name = '01',
                description = '',
                folder_creation_allowed = True,
                action_allowed = True,
                archiving_allowed = True,
                chain_allowed = True,
                parent_desk_id = '',
                parent_desk = iparapheur_provisioning.models.desk_representation.DeskRepresentation(
                    id = '', 
                    name = 'jXAuKb%@;_5)#fEb-bx%oZ01', 
                    tenant_id = '', ),
                owner_ids = [
                    ''
                    ],
                owners = [
                    iparapheur_provisioning.models.user_representation.UserRepresentation(
                        id = '', 
                        user_name = '012', 
                        first_name = '', 
                        last_name = '', 
                        email = '', 
                        privilege = null, 
                        is_ldap_synchronized = True, 
                        is_from_identity_provider = True, )
                    ],
                associated_desk_ids = [
                    ''
                    ],
                associated_desks = [
                    iparapheur_provisioning.models.desk_representation.DeskRepresentation(
                        id = '', 
                        name = 'jXAuKb%@;_5)#fEb-bx%oZ01', 
                        tenant_id = '', )
                    ],
                filterable_metadata_ids = [
                    ''
                    ],
                filterable_metadata = [
                    iparapheur_provisioning.models.metadata_representation.MetadataRepresentation(
                        id = '', 
                        name = 'Example metadata', 
                        key = 'example_metadata', 
                        index = 56, 
                        type = 'TEXT', )
                    ],
                supervisor_ids = [
                    ''
                    ],
                supervisors = [
                    iparapheur_provisioning.models.user_representation.UserRepresentation(
                        id = '', 
                        user_name = '012', 
                        first_name = '', 
                        last_name = '', 
                        email = '', 
                        privilege = null, 
                        is_ldap_synchronized = True, 
                        is_from_identity_provider = True, )
                    ],
                delegation_manager_ids = [
                    ''
                    ],
                delegation_managers = [
                    iparapheur_provisioning.models.user_representation.UserRepresentation(
                        id = '', 
                        user_name = '012', 
                        first_name = '', 
                        last_name = '', 
                        email = '', 
                        privilege = null, 
                        is_ldap_synchronized = True, 
                        is_from_identity_provider = True, )
                    ]
            )
        else:
            return DeskDto(
                name = 'jXAuKb%@;_5)#fEb-bx%oZ01',
                short_name = '01',
                owner_ids = [
                    ''
                    ],
                associated_desk_ids = [
                    ''
                    ],
                filterable_metadata_ids = [
                    ''
                    ],
                supervisor_ids = [
                    ''
                    ],
                delegation_manager_ids = [
                    ''
                    ],
        )
        """

    def testDeskDto(self):
        """Test DeskDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
