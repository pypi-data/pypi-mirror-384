# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from iparapheur_provisioning.models.desk_representation import DeskRepresentation
from iparapheur_provisioning.models.tenant_representation import TenantRepresentation
from iparapheur_provisioning.models.user_privilege import UserPrivilege
from typing import Optional, Set
from typing_extensions import Self

class UserDto(BaseModel):
    """
    Every field is mandatory
    """ # noqa: E501
    id: Optional[StrictStr] = None
    user_name: Annotated[str, Field(min_length=3, strict=True, max_length=128)] = Field(alias="userName")
    first_name: Annotated[str, Field(min_length=0, strict=True, max_length=128)] = Field(alias="firstName")
    last_name: Annotated[str, Field(min_length=0, strict=True, max_length=128)] = Field(alias="lastName")
    email: StrictStr
    privilege: UserPrivilege
    is_ldap_synchronized: Optional[StrictBool] = Field(default=None, alias="isLdapSynchronized")
    associated_tenants: Optional[List[TenantRepresentation]] = Field(default=None, alias="associatedTenants")
    associated_tenant_ids: Optional[List[StrictStr]] = Field(default=None, alias="associatedTenantIds")
    administered_tenants: Optional[List[TenantRepresentation]] = Field(default=None, alias="administeredTenants")
    administered_tenant_ids: Optional[List[StrictStr]] = Field(default=None, alias="administeredTenantIds")
    administered_desks: Optional[List[Optional[DeskRepresentation]]] = Field(default=None, alias="administeredDesks")
    administered_desk_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="administeredDeskIds")
    associated_desks: Optional[List[Optional[DeskRepresentation]]] = Field(default=None, alias="associatedDesks")
    associated_desk_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="associatedDeskIds")
    supervised_desks: Optional[List[Optional[DeskRepresentation]]] = Field(default=None, alias="supervisedDesks")
    supervised_desk_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="supervisedDeskIds")
    delegation_managed_desks: Optional[List[Optional[DeskRepresentation]]] = Field(default=None, alias="delegationManagedDesks")
    delegation_managed_desk_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="delegationManagedDeskIds")
    complementary_field: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, alias="complementaryField")
    reset_password_required: Optional[StrictBool] = Field(default=None, alias="resetPasswordRequired")
    password: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "userName", "firstName", "lastName", "email", "privilege", "isLdapSynchronized", "associatedTenants", "associatedTenantIds", "administeredTenants", "administeredTenantIds", "administeredDesks", "administeredDeskIds", "associatedDesks", "associatedDeskIds", "supervisedDesks", "supervisedDeskIds", "delegationManagedDesks", "delegationManagedDeskIds", "complementaryField", "resetPasswordRequired", "password"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "is_ldap_synchronized",
            "associated_tenants",
            "administered_tenants",
            "administered_desks",
            "associated_desks",
            "supervised_desks",
            "delegation_managed_desks",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_tenants (list)
        _items = []
        if self.associated_tenants:
            for _item_associated_tenants in self.associated_tenants:
                if _item_associated_tenants:
                    _items.append(_item_associated_tenants.to_dict())
            _dict['associatedTenants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in administered_tenants (list)
        _items = []
        if self.administered_tenants:
            for _item_administered_tenants in self.administered_tenants:
                if _item_administered_tenants:
                    _items.append(_item_administered_tenants.to_dict())
            _dict['administeredTenants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in administered_desks (list)
        _items = []
        if self.administered_desks:
            for _item_administered_desks in self.administered_desks:
                if _item_administered_desks:
                    _items.append(_item_administered_desks.to_dict())
            _dict['administeredDesks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_desks (list)
        _items = []
        if self.associated_desks:
            for _item_associated_desks in self.associated_desks:
                if _item_associated_desks:
                    _items.append(_item_associated_desks.to_dict())
            _dict['associatedDesks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supervised_desks (list)
        _items = []
        if self.supervised_desks:
            for _item_supervised_desks in self.supervised_desks:
                if _item_supervised_desks:
                    _items.append(_item_supervised_desks.to_dict())
            _dict['supervisedDesks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delegation_managed_desks (list)
        _items = []
        if self.delegation_managed_desks:
            for _item_delegation_managed_desks in self.delegation_managed_desks:
                if _item_delegation_managed_desks:
                    _items.append(_item_delegation_managed_desks.to_dict())
            _dict['delegationManagedDesks'] = _items
        # set to None if administered_desks (nullable) is None
        # and model_fields_set contains the field
        if self.administered_desks is None and "administered_desks" in self.model_fields_set:
            _dict['administeredDesks'] = None

        # set to None if administered_desk_ids (nullable) is None
        # and model_fields_set contains the field
        if self.administered_desk_ids is None and "administered_desk_ids" in self.model_fields_set:
            _dict['administeredDeskIds'] = None

        # set to None if associated_desks (nullable) is None
        # and model_fields_set contains the field
        if self.associated_desks is None and "associated_desks" in self.model_fields_set:
            _dict['associatedDesks'] = None

        # set to None if associated_desk_ids (nullable) is None
        # and model_fields_set contains the field
        if self.associated_desk_ids is None and "associated_desk_ids" in self.model_fields_set:
            _dict['associatedDeskIds'] = None

        # set to None if supervised_desks (nullable) is None
        # and model_fields_set contains the field
        if self.supervised_desks is None and "supervised_desks" in self.model_fields_set:
            _dict['supervisedDesks'] = None

        # set to None if supervised_desk_ids (nullable) is None
        # and model_fields_set contains the field
        if self.supervised_desk_ids is None and "supervised_desk_ids" in self.model_fields_set:
            _dict['supervisedDeskIds'] = None

        # set to None if delegation_managed_desks (nullable) is None
        # and model_fields_set contains the field
        if self.delegation_managed_desks is None and "delegation_managed_desks" in self.model_fields_set:
            _dict['delegationManagedDesks'] = None

        # set to None if delegation_managed_desk_ids (nullable) is None
        # and model_fields_set contains the field
        if self.delegation_managed_desk_ids is None and "delegation_managed_desk_ids" in self.model_fields_set:
            _dict['delegationManagedDeskIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userName": obj.get("userName"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "privilege": obj.get("privilege"),
            "isLdapSynchronized": obj.get("isLdapSynchronized"),
            "associatedTenants": [TenantRepresentation.from_dict(_item) for _item in obj["associatedTenants"]] if obj.get("associatedTenants") is not None else None,
            "associatedTenantIds": obj.get("associatedTenantIds"),
            "administeredTenants": [TenantRepresentation.from_dict(_item) for _item in obj["administeredTenants"]] if obj.get("administeredTenants") is not None else None,
            "administeredTenantIds": obj.get("administeredTenantIds"),
            "administeredDesks": [DeskRepresentation.from_dict(_item) for _item in obj["administeredDesks"]] if obj.get("administeredDesks") is not None else None,
            "administeredDeskIds": obj.get("administeredDeskIds"),
            "associatedDesks": [DeskRepresentation.from_dict(_item) for _item in obj["associatedDesks"]] if obj.get("associatedDesks") is not None else None,
            "associatedDeskIds": obj.get("associatedDeskIds"),
            "supervisedDesks": [DeskRepresentation.from_dict(_item) for _item in obj["supervisedDesks"]] if obj.get("supervisedDesks") is not None else None,
            "supervisedDeskIds": obj.get("supervisedDeskIds"),
            "delegationManagedDesks": [DeskRepresentation.from_dict(_item) for _item in obj["delegationManagedDesks"]] if obj.get("delegationManagedDesks") is not None else None,
            "delegationManagedDeskIds": obj.get("delegationManagedDeskIds"),
            "complementaryField": obj.get("complementaryField"),
            "resetPasswordRequired": obj.get("resetPasswordRequired"),
            "password": obj.get("password")
        })
        return _obj


