Metadata-Version: 2.4
Name: llm-optimized-inference
Version: 0.2.42
Home-page: 
Author: Microsoft
Author-email: 
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: vllm==0.11.0
Requires-Dist: deepspeed==0.15.1
Requires-Dist: deepspeed-kernels==0.0.1.dev1698255861
Requires-Dist: diffusers==0.26.2
Requires-Dist: pandas==2.1.4
Requires-Dist: transformers==4.55.2
Requires-Dist: aiolimiter==1.1.1
Requires-Dist: azure-ai-contentsafety==1.0.0b1
Requires-Dist: azure-ai-ml==1.13.0
Requires-Dist: azureml-inference-server-http==1.4.1
Requires-Dist: azureml-mlflow==1.60.0
Requires-Dist: azureml-ai-monitoring==1.0.0
Requires-Dist: azure-identity==1.23.0
Requires-Dist: requests==2.32.4
Requires-Dist: aiohttp==3.12.14
Requires-Dist: scipy==1.15.3
Requires-Dist: accelerate==1.9.0
Requires-Dist: sacremoses==0.1.1
Requires-Dist: fastapi==0.116.1
Requires-Dist: Jinja2==3.1.6
Requires-Dist: Flask-Cors==6.0.0
Requires-Dist: gunicorn==23.0.0
Requires-Dist: deepspeed-mii==0.3.3
Requires-Dist: soundfile==0.13.1
Requires-Dist: backoff==2.2.1
Requires-Dist: librosa==0.11.0
Requires-Dist: h2==4.3.0
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python

# Foundation Model Inferencing


### Setting up Pre-commit for this Repository

Pre-commit helps to manage and maintain code quality by running hooks that perform various checks before a commit is made.

To set up pre-commit for this repository, follow these steps:

1. Install pre-commit. If you're using pip, you can do this by running:
    ```
    pip install pre-commit
    ```

2. Navigate to the root directory of the repository where the .pre-commit-config.yaml file is located.

3. Run the following command to install the git hook scripts:
    ```
    pre-commit install
    ```

Now, pre-commit will run automatically on git commit. If you want to manually run all pre-commit hooks on a repository, run:
    ```
    pre-commit run --all-files
    ```

To run a specific pre-commit hook on all files, you can use the run command followed by the ID of the hook. Here's the general syntax:
    ```
    pre-commit run <hook_id> --all-files
    ```

For example, if you want to run the black hook on all files, you would use:
    ```
    pre-commit run black --all-files
    ```

This command will run the black hook on every file in your repository.


### Hooks Used in this Repository

This repository uses a variety of hooks to maintain code quality:

- check-added-large-files: Prevents committing large files.
- end-of-file-fixer: Ensures files end with a newline.
- trailing-whitespace: Removes trailing whitespace.
- check-ast: Checks Python AST for syntax errors.
- check-docstring-first: Ensures the first thing in a Python file is a docstring.
- isort: Sorts Python imports.
- add-trailing-comma: Adds trailing commas to Python data structures.
- black: Formats Python code to conform to the PEP 8 style guide.
- flake8: Lints Python code for errors and code style violations.
- pydocstyle: Checks Python docstring conventions.

These hooks are run automatically before each commit once pre-commit is installed.
