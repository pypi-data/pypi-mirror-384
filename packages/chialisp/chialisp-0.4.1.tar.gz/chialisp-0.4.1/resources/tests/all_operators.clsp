;; A program that uses all operators in the 0 set
(mod ARGS
  (defun A (X Y) (a X Y))
  (defun I (X Y Z) (i X Y Z))
  (defun C (X Y) (c X Y))
  (defun F (X) (f X))
  (defun R (X) (r X))
  (defun L (X) (l X))
  (defun X (X) (x X))
  (defun EQ (X Y) (= X Y))
  (defun GS (X Y) (>s X Y))
  (defun SHA256 (X) (sha256 X))
  (defun SUBSTR (X S E) (substr X S E))
  (defun STRLEN (X) (strlen X))
  (defun CONCAT (X Y) (concat X Y))
  (defun PL (X Y) (+ X Y))
  (defun MI (X Y) (- X Y))
  (defun TI (X Y) (* X Y))
  (defun DI (X Y) (/ X Y))
  (defun DIVMOD (X Y) (divmod X Y))
  (defun GT (X Y) (> X Y))
  (defun ASH (X Y) (ash X Y))
  (defun LSH (X Y) (lsh X Y))
  (defun LOGAND (X Y) (logand X Y))
  (defun LOGIOR (X Y) (logior X Y))
  (defun LOGXOR (X Y) (logxor X Y))
  (defun LOGNOT (X) (lognot X))
  (defun PA (X Y) (point_add X Y))
  (defun PFE (X) (pubkey_for_exp X))
  (defun NOT (X) (not X))
  (defun ANY (X Y) (any X Y))
  (defun ALL (X Y) (all X Y))
  (defun SF (COST CODE) (softfork COST () CODE ()))

  (defun nth (n lst) (if n (nth (- n 1) (r lst)) (f lst)))

  (defun OPS1 (sel val)
    (a (nth sel (list F R L X SHA256 STRLEN LOGNOT PFE NOT)) (list () val))
    )

  (defun OPS2 (sel v1 v2)
    (a (nth sel (list A C EQ GS CONCAT PL MI TI DI DIVMOD GT ASH LSH LOGAND LOGIOR LOGXOR PA ANY ALL SF)) (list () v1 v2))
    )

  (defun OPS3 (sel v1 v2 v3)
    (a (nth sel (list I SUBSTR)) (list () v1 v2 v3))
    )

  (defun ll (N X) (if X (ll (+ N 1) (r X)) N))

  (defun OP ((@ ALLARGS (ARGS . NEXT)))
    (if ALLARGS
      (if (= (ll 0 ARGS) 4)
        (c (OPS3 (f ARGS) (f (r ARGS)) (f (r (r ARGS))) (f (r (r (r ARGS))))) (OP NEXT))
        (if (= (ll 0 ARGS) 3)
          (c (OPS2 (f ARGS) (f (r ARGS)) (f (r (r ARGS)))) (OP NEXT))
          (if (= (ll 0 ARGS) 2)
            (c (OPS1 (f ARGS) (f (r ARGS))) (OP NEXT))
            ()
            )
          )
        )
      ()
      )
    )

  (OP ARGS)
  )
