# Example: React TypeScript Web Application

schema_version: "1.0.0"

metadata:
  title: "React TypeScript Project Assistant"
  description: "AI assistant configuration for a modern React application with TypeScript"
  version: "1.0.0"
  author: "development-team@company.com"
  created: "2024-01-01"
  updated: "2024-01-15"
  tags: ["react", "typescript", "frontend", "web"]
  

context:
  project_type: "web_application"
  technologies:
    - "typescript"
    - "react"
    - "vite"
    - "tailwindcss"
    - "react-router"
    - "react-query"
  description: |
    A modern React web application built with TypeScript and Vite.
    Uses Tailwind CSS for styling, React Router for navigation,
    and React Query for state management and API calls.
    Follows functional programming patterns and modern React practices.

instructions:
  general:
    - "Write clean, readable, and maintainable code"
    - "Use TypeScript for all new files with strict type checking"
    - "Follow existing code patterns and conventions"
    - "Add JSDoc comments for public APIs and complex logic"
    - "Prefer composition over inheritance"
  
  code_style:
    - "Use functional components with hooks instead of class components"
    - "Prefer arrow functions over function declarations"
    - "Use meaningful and descriptive variable names"
    - "Follow the existing ESLint and Prettier configuration"
    - "Use const for immutable values, let for mutable"
    - "Destructure props and state for cleaner code"
  
  architecture:
    - "Follow the existing folder structure: components, hooks, utils, types"
    - "Separate concerns into different modules and files"
    - "Use custom hooks for reusable stateful logic"
    - "Keep components small and focused on a single responsibility"
    - "Use TypeScript interfaces for prop types and data models"
    - "Implement error boundaries for component error handling"
  
  testing:
    - "Write unit tests for all new functions and components"
    - "Use React Testing Library for component tests"
    - "Use Jest for unit testing utilities and hooks"
    - "Mock external dependencies and API calls"
    - "Aim for at least 80% code coverage"
  
  performance:
    - "Use React.memo for expensive components"
    - "Implement code splitting with React.lazy"
    - "Optimize bundle size with tree shaking"
    - "Use useCallback and useMemo appropriately"
    - "Lazy load images and components when possible"

examples:
  functional_component: |
    ```typescript
    interface ButtonProps {
      title: string;
      onClick: () => void;
      variant?: 'primary' | 'secondary' | 'danger';
      disabled?: boolean;
    }
    
    export const Button: React.FC<ButtonProps> = ({ 
      title, 
      onClick, 
      variant = 'primary',
      disabled = false
    }) => {
      const baseClasses = "px-4 py-2 rounded font-medium transition-colors";
      const variantClasses = {
        primary: "bg-blue-600 text-white hover:bg-blue-700",
        secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300",
        danger: "bg-red-600 text-white hover:bg-red-700"
      };
      
      return (
        <button 
          onClick={onClick}
          disabled={disabled}
          className={`${baseClasses} ${variantClasses[variant]} ${
            disabled ? 'opacity-50 cursor-not-allowed' : ''
          }`}
        >
          {title}
        </button>
      );
    };
    ```
  
  custom_hook: |
    ```typescript
    interface UseApiResult<T> {
      data: T | null;
      loading: boolean;
      error: string | null;
      refetch: () => void;
    }
    
    export const useApi = <T>(url: string): UseApiResult<T> => {
      const [data, setData] = useState<T | null>(null);
      const [loading, setLoading] = useState(true);
      const [error, setError] = useState<string | null>(null);
      
      const fetchData = useCallback(async () => {
        try {
          setLoading(true);
          setError(null);
          const response = await fetch(url);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();
          setData(result);
        } catch (err) {
          setError(err instanceof Error ? err.message : 'An error occurred');
        } finally {
          setLoading(false);
        }
      }, [url]);
      
      useEffect(() => {
        fetchData();
      }, [fetchData]);
      
      return { data, loading, error, refetch: fetchData };
    };
    ```
  
  type_definitions: |
    ```typescript
    // API Response Types
    export interface User {
      id: string;
      name: string;
      email: string;
      avatar?: string;
      createdAt: string;
      updatedAt: string;
    }
    
    export interface ApiResponse<T> {
      data: T;
      message: string;
      success: boolean;
      timestamp: string;
    }
    
    // Component Props Types
    export interface PageProps {
      title: string;
      children: React.ReactNode;
      className?: string;
    }
    
    // Hook Types
    export interface UseFormState<T> {
      values: T;
      errors: Partial<Record<keyof T, string>>;
      isValid: boolean;
      isDirty: boolean;
    }
    ```

variables:
  PROJECT_NAME: "React TypeScript App"
  TEAM_EMAIL: "development-team@company.com"
  TECH_STACK: "React, TypeScript, Vite, Tailwind CSS"

editor_specific:
  copilot:
    additional_instructions:
      - "Generate comprehensive JSDoc comments for public APIs"
      - "Suggest appropriate React hooks for state management"
      - "Provide TypeScript type definitions for new interfaces"
      - "Focus on accessibility best practices"
  
  cursor:
    additional_instructions:
      - "Focus on quick implementations and fixes"
      - "Prioritize performance optimizations"
      - "Suggest modern React patterns and hooks"
  
  continue:
    custom_commands:
      - name: "explain"
        prompt: "Explain this React component or hook in detail: {{{ input }}}"
        description: "Provides detailed explanation of React code"
      - name: "optimize"
        prompt: "Suggest performance optimizations for this React code: {{{ input }}}"
        description: "Suggests React-specific performance improvements"
      - name: "test"
        prompt: "Generate React Testing Library tests for: {{{ input }}}"
        description: "Creates comprehensive tests for React components"
