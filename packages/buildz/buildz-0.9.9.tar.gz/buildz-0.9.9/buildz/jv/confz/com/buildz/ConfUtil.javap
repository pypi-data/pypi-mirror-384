package com.buildz;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.Array;
import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface Fill {
    String key();
    boolean need() default false;
}
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface Key {
    String value();
}
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface Need {
    boolean value() default true;
}

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface Source {
}
public class ConfUtil {
    <<default(-1,-1)||
    public static <T> T fill(Conf conf, Class<T> targetClass, int loop, int link)
            throws IllegalAccessException, InstantiationException, 
                   NoSuchMethodException, InvocationTargetException,
                   IllegalArgumentException {
        
        T instance = targetClass.getDeclaredConstructor().newInstance();
        Field[] fields = targetClass.getDeclaredFields();
        
        for (Field field : fields) {
            field.setAccessible(true);
            
            if (field.isAnnotationPresent(Source.class)) {
                field.set(instance, conf);
                continue;
            }
            String fieldName = field.getName();
            boolean need=false;
            
            if (field.isAnnotationPresent(Fill.class)) {
                Fill note = field.getAnnotation(Fill.class);
                fieldName = note.key();
                need = note.need();
            }
            if (field.isAnnotationPresent(Need.class)) {
                Need note = field.getAnnotation(Need.class);
                need = note.value();
            }
            if (field.isAnnotationPresent(Key.class)) {
                Key note = field.getAnnotation(Key.class);
                fieldName = note.value();
            }
            
            if (conf.has(fieldName, link)) {
                Object value = conf.lget(fieldName,null,loop,link);
                Class<?> fieldType = field.getType();
                
                // 处理基本类型和包装类型的兼容性
                if (value != null && !fieldType.isInstance(value)) {
                    value = convertType(value, fieldType);
                }
                
                field.set(instance, value);
            } else {
                if (need){
                    throw new RuntimeException("can't find required key: '"+fieldName+"'");
                }
            }
        }
        return instance;
    }>>
    
    private static Object convertType(Object value, Class<?> targetType) {
        if (targetType == int.class || targetType == Integer.class) {
            return ((Number) value).intValue();
        } else if (targetType == long.class || targetType == Long.class) {
            return ((Number) value).longValue();
        } else if (targetType == double.class || targetType == Double.class) {
            return ((Number) value).doubleValue();
        } else if (targetType == boolean.class || targetType == Boolean.class) {
            return Boolean.parseBoolean(value.toString());
        } else if (targetType == List.class) {
            if (value instanceof List) {
                return value;
            }
            List rst = new ArrayList(1);
            rst.add(value);
            return rst;
        } else if (targetType == Map.class) {
            if (value instanceof Map) {
                return value;
            } else {
                throw new RuntimeException("required Map but get:"+value.toString());
            }
        }else if (targetType.isArray()) {
            Class<?> itemType = targetType.getComponentType();
            Object newArray;
            if (value instanceof List) {
                List lst = (List)value;
                newArray = Array.newInstance(itemType, lst.size());
                for(int i=0;i<lst.size();i++) {
                    Array.set(newArray, i, lst.get(i));
                }
            } else {
                if (value != null && !itemType.isInstance(value)) {
                    value = convertType(value, itemType);
                }
                newArray = Array.newInstance(itemType, 1);
                Array.set(newArray, 0, value);
            }
            return newArray;
        }
        return value; // 无法转换时返回原值
    }
}
