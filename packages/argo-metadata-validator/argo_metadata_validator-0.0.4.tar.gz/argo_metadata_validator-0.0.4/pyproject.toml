[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"


[tool.poetry]

[project]
name = "argo-metadata-validator"
description = "Validator for ARGO sensor metadata JSON"
authors = [
    { name = "Matt McCormack", email = "matcor@noc.ac.uk" },
]
keywords = ["argo", "metadata", "validation"]
readme = "README.md"
license = "EUPL-1.2"
dynamic = []
version = "0.0.4"

[project.urls]
repository = "https://github.com/euroargodev/argo-metadata-validator"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry.scripts]
argo-validate = "argo_metadata_validator.cli:main"


[tool.poetry.dependencies]
python = "^3.11"
poetry-dynamic-versioning = "^1.1.0"
importlib-metadata = "7.2.1"


# Define the dependencies for building.
click = "^8.2.1"
referencing = "^0.36.2"
jsonschema = "^4.25.1"
requests = "^2.32.5"
pydantic = "^2.11.9"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
twine = "^4.0.2"
importlib-metadata = "7.2.1"

[tool.coverage.paths]
source = [ "Argo Metadata Validator", "**/Argo Metadata Validator",]

[tool.setuptools.packages.find]
namespaces = false

# Define the dev dependencies.



[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
pyright = "^1.1"
pytest = "^7.3.0"
pytest-cov = "^4.0.0"
coverage = {extras = ["xml"], version = "^7.2.5"}
twine = "^4.0.2"
taskipy = "^1.14.1"
pytest-mock = "^3.15.1"
requests-mock = "^1.12.1"
 
 
[tool.taskipy.tasks]
lint = """
    ruff format --diff argo_metadata_validator tests && \
    ruff check argo_metadata_validator tests
"""
format = """
    ruff format argo_metadata_validator tests && \
    ruff check --fix argo_metadata_validator tests
"""
unit-test = """
    coverage run -m --source argo_metadata_validator --data-file=.coverage pytest tests/unit_tests/ && \
    coverage report -m --data-file=.coverage --skip-covered
"""
test = """
    coverage run -m --source argo_metadata_validator --data-file=.coverage pytest && \
    coverage report -m --data-file=.coverage --skip-covered
"""
