"use strict";(self.webpackChunkjupyterlab_browser_ai=self.webpackChunkjupyterlab_browser_ai||[]).push([[509],{509:(e,t,r)=>{r.r(t),r.d(t,{default:()=>I});var o=r(316),a=r(794),n=r(722),i=r(222),s=r(327),c=r(279),l=r(368),d=r(516),u=r(190);async function p(e){const t=await e.arrayBuffer(),r=new Uint8Array(t);let o="";for(let e=0;e<r.length;e+=8192){const t=r.slice(e,e+8192);o+=String.fromCharCode(...t)}return btoa(o)}const m={id:"jupyterlab-browser-ai:plugin",description:"In-browser AI in JupyterLab and Jupyter Notebook",autoStart:!0,requires:[c.IProviderRegistry],optional:[o.ISettingRegistry],activate:(e,t,o)=>{if((0,l.doesBrowserSupportBuiltInAI)()){const e={id:"chrome-ai",name:"Chrome Built-in AI",apiKeyRequirement:"none",defaultModels:["chrome-ai"],supportsBaseURL:!1,supportsHeaders:!1,supportsToolCalling:!1,factory:()=>(0,l.builtInAI)("text")};t.registerProvider(e)}if((0,d.doesBrowserSupportWebLLM)()){const e={id:"web-llm",name:"WebLLM",apiKeyRequirement:"none",defaultModels:["Llama-3.2-3B-Instruct-q4f16_1-MLC","Llama-3.2-1B-Instruct-q4f16_1-MLC","Phi-3.5-mini-instruct-q4f16_1-MLC","gemma-2-2b-it-q4f16_1-MLC","Qwen3-0.6B-q4f16_1-MLC"],supportsBaseURL:!1,supportsHeaders:!1,supportsToolCalling:!1,factory:e=>{var t;const o=null!==(t=e.model)&&void 0!==t?t:"Llama-3.2-3B-Instruct-q4f16_1-MLC";let n=null;const i=(0,d.webLLM)(o,{worker:new Worker(new URL(r.p+r.u(143),r.b),{type:void 0}),initProgressCallback:e=>{var t;const r=Math.round(100*e.progress);null===n?n=a.Notification.emit(null!==(t=e.text)&&void 0!==t?t:`Downloading ${o}...`,"in-progress",{progress:0,autoClose:!1}):100===r?n&&a.Notification.update({id:n,message:`${o} ready`,type:"success",progress:1,autoClose:3e3}):n&&a.Notification.update({id:n,message:`Downloading ${o}... ${r}%`,progress:e.progress})}});return i}};t.registerProvider(e)}o&&o.load(m.id).then(e=>{console.log("jupyterlab-browser-ai settings loaded:",e.composite)}).catch(e=>{console.error("Failed to load settings for jupyterlab-browser-ai.",e)})}};var g;!function(e){e.generateAltText="chrome-ai:generate-alt-text",e.generateTranscript="chrome-ai:generate-transcript"}(g||(g={}));class f{async generateAltText(e){try{const t=await fetch(e),r=await t.blob(),o=await p(r),a=(0,u.gM)({model:(0,l.builtInAI)(),messages:[{role:"user",content:[{type:"text",text:'Generate a concise alt text description for this image. Focus on the most important visual elements and keep it under 125 characters. Do not include phrases like "an image of" or "a picture showing".'},{type:"file",mediaType:r.type||"image/png",data:o}]}]});let n="";for await(const e of a.textStream)n+=e;return n}catch(e){throw console.error("Failed to generate alt text:",e),e}}}class w{async generateTranscript(e){try{const t=await fetch(e),r=await t.blob(),o=await p(r),a=(0,u.gM)({model:(0,l.builtInAI)(),messages:[{role:"user",content:[{type:"text",text:"Please transcribe this audio file. Provide only the transcribed text without any additional commentary or formatting."},{type:"file",mediaType:r.type||"audio/mp3",data:o}]}]});let n="";for await(const e of a.textStream)n+=e;return n.trim()}catch(e){throw console.error("Failed to generate transcript:",e),e}}}const y={id:"jupyterlab-browser-ai:alt-text-generator",description:"Chrome AI Alt Text Generator Context Menu",autoStart:!0,requires:[n.INotebookTracker],activate:(e,t)=>{if(!(0,l.doesBrowserSupportBuiltInAI)())return void console.log("Chrome Built-in AI not supported in this browser");const r=new f,o=e=>"IMG"===e.tagName;e.commands.addCommand(g.generateAltText,{label:"Generate Alt Text with ChromeAI",icon:i.imageIcon,execute:async()=>{const n=e.contextMenuHitTest(o);if(!n)return;const i=n.src,s=a.Notification.emit("Generating alt text with ChromeAI...","in-progress",{autoClose:!1});try{const e=await r.generateAltText(i),o=await async function(e,t,r){try{const o=r.currentWidget;if(!o)return!1;const a=o.content;let n=a.activeCell;if(!n||"markdown"!==n.model.type){let t=null,r=-1;for(let o=0;o<a.widgets.length;o++){const n=a.widgets[o];if("markdown"===n.model.type){const a=n.node.querySelectorAll("img");for(const i of a)if(i.src===e.src){t=n,r=o;break}}if(t)break}if(!t)return!1;a.activeCellIndex=r,n=t}const i=n.model.sharedModel,s=i.getSource(),c=/!\[([^\]]*)\]\(([^)]+)\)/g;let l=0,d=!1;const u=s.replace(c,(e,r,o)=>(l++,d||""!==r.trim()&&1!==l?e:(d=!0,`![${t}](${o})`)));return u!==s&&(i.setSource(u),!0)}catch(e){return console.error("Failed to update image alt text:",e),!1}}(n,e,t);a.Notification.update({id:s,message:o?"Alt text generated and applied to markdown cell":"Alt text generated - copied to clipboard",type:"success",autoClose:3e3}),navigator.clipboard&&await navigator.clipboard.writeText(e)}catch(e){console.error("ChromeAI Alt Text Generation Error:",e),a.Notification.update({id:s,message:`Failed to generate alt text: ${e instanceof Error?e.message:"Unknown error"}`,type:"error",autoClose:5e3})}},describedBy:{args:{type:"object",properties:{}}}}),e.contextMenu.addItem({command:g.generateAltText,selector:"img",rank:1})}};function h(e){return[".mp3",".wav",".ogg",".m4a",".aac",".flac",".opus"].some(t=>e.toLowerCase().endsWith(t))}const b={id:"jupyterlab-browser-ai:audio-transcript-generator",description:"Chrome AI Audio Transcript Generator",autoStart:!0,requires:[s.IFileBrowserFactory],activate:(e,t)=>{if(!(0,l.doesBrowserSupportBuiltInAI)())return void console.log("Chrome Built-in AI not supported in this browser");const r=new w,{serviceManager:o}=e;e.commands.addCommand(g.generateTranscript,{label:"Generate Transcript with ChromeAI",icon:i.textEditorIcon,isVisible:()=>function(e){const t=e.tracker.currentWidget;if(!t)return!1;const r=Array.from(t.selectedItems());return 1===r.length&&h(r[0].name)}(t),execute:async()=>{const n=t.tracker.currentWidget;if(!n)return void a.Notification.emit("No file browser available","warning");const i=Array.from(n.selectedItems());if(1!==i.length)return void a.Notification.emit("Please select a single audio file","warning");const s=i[0];if(!h(s.name))return void a.Notification.emit("Selected file is not an audio file","warning");const c=s.path,l=await o.contents.getDownloadUrl(c),d=a.Notification.emit("Generating transcript with ChromeAI...","in-progress",{autoClose:!1});try{const t=await r.generateTranscript(l),i=`${s.name.replace(/\.[^/.]+$/,"")}_transcript.txt`,u=c.replace(s.name,i);await o.contents.save(u,{type:"file",format:"text",content:t}),a.Notification.update({id:d,message:`Transcript saved as ${i}`,type:"success",autoClose:3e3,actions:[{label:"Open",callback:async()=>{await e.commands.execute("docmanager:open",{path:u})}}]}),await n.model.refresh()}catch(e){console.error("ChromeAI Transcript Generation Error:",e),a.Notification.update({id:d,message:`Failed to generate transcript: ${e instanceof Error?e.message:"Unknown error"}`,type:"error",autoClose:5e3})}}}),e.contextMenu.addItem({command:g.generateTranscript,selector:".jp-DirListing-item[data-file-type]",rank:2})}},I=[m,y,b]}}]);