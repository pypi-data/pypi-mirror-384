[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "copick-mcp"
dynamic = ["version"]
description = "MCP server for Copick."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Kyle Harrington", email = "czi@kyleharrington.com"},
    {name = "Utz H. Ermel", email = "utz@ermel.me"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
keywords = ["copick", "cryoet", "cryo-et", "tomography", "annotation", "mcp", "model-context-protocol"]
dependencies = [
    "copick>=1.15.0",
    "copick-utils",
    "copick-torch",
    "fastmcp>=0.1.0",
    "click>=8.0",
]

[project.entry-points."copick.setup.commands"]
mcp = "copick_mcp.cli.setup:mcp"
mcp-status = "copick_mcp.cli.setup:mcp_status"
mcp-remove = "copick_mcp.cli.setup:mcp_remove"

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "hatchling>=1.25.0",
    "hatch-vcs>=0.4.0",
    "ipython>=8.18.1",
    "pre-commit>=4.2.0",
    "ruff>=0.12.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

[project.urls]
Repository = "https://github.com/copick/copick-mcp"
Issues = "https://github.com/copick/copick-mcp/issues"
Documentation = "https://github.com/copick/copick-mcp#readme"

[tool.hatch.version]
path = "src/copick_mcp/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/copick_mcp"]

[tool.hatch.build]
only-packages = true

[tool.black]
line-length = 120
target_version = ['py311']

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "B",       # bugbear
    "I",       # isort
    "N",       # pep8-naming
    "ASYNC",   # async
    "COM",     # commas
    "C4",      # comprehensions
    "DTZ",     # datetimez
    "ISC",     # implicit-str-concat
    "G",       # logging-format
    "T20",     # print
    "SIM",     # simplify
]
ignore = [
    "G004",   # logging format
    "W293",   # blank line contains whitespace
    "B008",   # Do not perform calls in argument defaults
    "B905",   # `zip()` without an explicit `strict=` parameter
    "N802",   # Function name should be lowercase
    "N805",   # First argument of a method should be named `self`
    "N806",   # Variable in function should be lowercase
    "N999",   # Invalid module name
    "E501",   # line too long
    "C408",   # rewrite empty built-ins as literals
    "T201",   # print statements.
    "DTZ007", # Datetime objects without timezones.
    "DTZ005", # More datetimes without timezones.
]

[tool.ruff.lint.isort]
known-first-party = ["copick_mcp"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
source_pkgs = ["copick_mcp", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
copick_mcp = ["src/copick_mcp", "*/copick-mcp/src/copick_mcp"]
tests = ["tests", "*/copick-mcp/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
