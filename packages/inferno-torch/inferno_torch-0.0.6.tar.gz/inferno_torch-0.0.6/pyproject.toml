################################################################################
# PEP 621 Project Metadata                                                     #
################################################################################

# see https://peps.python.org/pep-0621/

[project]
name = "inferno-torch"
description = "Bayesian Deep Learning in PyTorch"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["deep learning", "variational inference", "pytorch"]
authors = [
    { name = "Jonathan Wenger", email = "jw4246@columbia.edu" },
    { name = "Beau Coker", email = "bc3107@columbia.edu" },
]
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
dependencies = ["torch>=2.2", "torchvision>=0.20"]
dynamic = ["version"]

[project.optional-dependencies]
style = [
    "black>=25.1.0",     # Code formatting
    "isort>=5.13.2",     # Sorting imports
    "jaxtyping>=0.2.25", # Type annotations for JAX and PyTorch
]
docs = [
    "mkdocs-material>=9.6.11",      # Documentation theme
    "mkdocstrings-python>=1.16.12", # Automatically generate API documentation
    "markdown-exec>=1.10.3",        # Execute code blocks in markdown files
]
datasets = [
    # Dependencies for benchmark datasets
    "xlrd>=2.0.1",
    "pandas>=2.2.3",
    "requests>=2.32.3",
]
examples = [
    # Dependencies for code examples
    "inferno-torch[datasets]",
    "fire>=0.7.0",
    "matplotlib>=3.10.0",
    "seaborn>=0.13.2",
    "scikit-learn>=1.5.0",
    "torchmetrics>=1.6.1",
    "tqdm>=4.67.1",
]
tests = [
    "pytest>=6.2.5",     # Testing framework
    "pytest-cov>=3.0.0", # Test coverage
    "tox>=4.19",         # Automation for testing in multiple environments
]
dev = [
    "inferno-torch[style]",
    "inferno-torch[docs]",
    "inferno-torch[examples]",
    "inferno-torch[tests]",
]

[project.urls]
homepage = "https://inferno-ml.github.io/inferno/"
documentation = "https://inferno-ml.github.io/inferno/"
github = "https://github.com/inferno-ml/inferno"

################################################################################
# PEP 518 Build System Configuration                                           #
################################################################################

# see https://peps.python.org/pep-0518/

[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

# see https://setuptools.pypa.io/en/stable/userguide/pyproject_config.html#setuptools-specific-configuration

[tool.setuptools]
platforms = ["any"]
zip-safe = false
packages = ["inferno"]
# package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.dynamic]
version = { attr = "inferno._version.version" }

[tool.setuptools_scm]
version_file = "inferno/_version.py"
# local_scheme = "dirty-tag"
local_scheme = "no-local-version"

################################################################################
# Testing Configuration                                                        #
################################################################################

# see https://docs.pytest.org/en/stable/reference/customize.html
# see https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref

[tool.pytest.ini_options]
addopts = ["--verbose", "--doctest-modules", "--color=yes"]
norecursedirs = [".*", "*.egg*", "dist", "build", ".tox"]
testpaths = ["inferno", "tests"]
doctest_optionflags = "NUMBER NORMALIZE_WHITESPACE"
filterwarnings = []

################################################################################
# Linting Configuration                                                        #
################################################################################


################################################################################
# Formatting Configuration                                                     #
################################################################################

# see https://black.readthedocs.io/en/stable/usage_and_configuration/index.html

[tool.black]
include = '\.pyi?$'
# If `exclude` is not set, `black` excludes all files listed in `.gitignore`.
# The following option extends this list of ignored files.
# see https://black.readthedocs.io/en/stable/usage_and_configuration/file_collection_and_discovery.html#gitignore
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories in the root
# of the project.
/(
    \.git
    | \.hg
)/
'''

# see https://pycqa.github.io/isort/docs/configuration/config_files.html
# see https://pycqa.github.io/isort/docs/configuration/options.html

[tool.isort]
# see https://pycqa.github.io/isort/docs/configuration/profiles.html#black
profile = "black"
combine_as_imports = true
force_sort_within_sections = true
known_testing = ["pytest", "pytest_cases"]
sections = [
    'FUTURE',
    'STDLIB',
    'THIRDPARTY',
    'FIRSTPARTY',
    'LOCALFOLDER',
    'TESTING',
]
extend_skip_glob = ["*/_version.py"]

################################################################################
# Tox Configuration                                                            #
################################################################################

[tool.tox]
env_list = ["py3", "format", "docs", "examples"]

[tool.tox.env_run_base]
description = "Run test under {base_python} using pytest."
extras = ["tests"]
commands = [
    [
        "pytest",
        { replace = "posargs", extend = true, default = [
            # "{tox_root}",
            "--config-file=pyproject.toml", # Use pytest configuration from pyproject.toml
        ] },
    ],
]

[tool.tox.env.format]
description = "Format the code."
extras = ["style"]
commands = [
    [
        "black",
        { replace = "posargs", extend = true, default = [
            "{tox_root}",
        ] },
    ],
    [
        "isort",
        { replace = "posargs", extend = true, default = [
            "{tox_root}",
        ] },
    ],
]

[tool.tox.env.docs]
description = "Build the documentation."
extras = ["style", "docs"]
commands = [
    [
        "mkdocs",
        { replace = "posargs", extend = true, default = [
            "{tox_root}",
            "build",
        ] },
    ],
]

[tool.tox.env.examples]
description = "Run code examples in the documentation."
extras = ["style", "docs", "examples"]
allowlist_externals = ["bash"]
commands = [
    [
        "bash",
        "{tox_root}/docs/examples/run.sh",
        { replace = "posargs", extend = true, default = [
            "{tox_root}/docs/examples",
        ] },
    ],
]
