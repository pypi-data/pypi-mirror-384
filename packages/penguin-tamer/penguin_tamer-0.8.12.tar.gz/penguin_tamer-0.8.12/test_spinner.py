"""
–¢–µ—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ:
- –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏ LLM
- –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π input –ø—Ä–æ–ø—É—â–µ–Ω
- –°–ø–∏–Ω–Ω–µ—Ä –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ spinner_enabled=false
"""

import sys
import json
import yaml
from pathlib import Path
from rich.console import Console

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from penguin_tamer.demo_system import create_demo_manager  # noqa: E402


def create_test_demo():
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞."""
    test_dir = Path(__file__).parent / "test_spinner_demo"
    test_dir.mkdir(exist_ok=True)
    (test_dir / "demo").mkdir(exist_ok=True)

    demo_data = {
        "version": "2.0",
        "events": [
            {"type": "input", "text": "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"},
            {"type": "output", "text": "–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç LLM"},
            {"type": "input", "text": "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å"},
            {"type": "output", "text": "–í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç LLM"}
        ]
    }

    demo_file = test_dir / "demo" / "test.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_data, f, indent=2, ensure_ascii=False)

    return test_dir, demo_file


def test_spinner():
    """–¢–µ—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞."""
    console = Console()
    config_dir, demo_file = create_test_demo()
    config_demo_path = Path(__file__).parent / "src" / "penguin_tamer" / "demo_system" / "config_demo.yaml"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    with open(config_demo_path, 'r', encoding='utf-8') as f:
        config_data = yaml.safe_load(f)

    original_spinner_enabled = config_data['playback'].get('spinner_enabled', True)
    original_play_first_input = config_data['playback'].get('play_first_input', True)
    original_spinner_min = config_data['playback'].get('spinner_min_duration', 0.5)
    original_spinner_max = config_data['playback'].get('spinner_max_duration', 2.0)

    try:
        print("\n" + "=" * 80)
        print("TEST 1: –°–ø–∏–Ω–Ω–µ—Ä –≤–∫–ª—é—á—ë–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("=" * 80)
        print("–û–∂–∏–¥–∞–µ—Ç—Å—è: —Å–ø–∏–Ω–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM")
        print("-" * 80)

        # –£—Å–∫–æ—Ä—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['play_first_input'] = True
        config_data['playback']['spinner_min_duration'] = 0.8
        config_data['playback']['spinner_max_duration'] = 1.2
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        demo_manager1 = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager1.play()

        print("\n" + "=" * 80)
        print("TEST 2: –°–ø–∏–Ω–Ω–µ—Ä —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –ø–µ—Ä–≤–æ–≥–æ input")
        print("=" * 80)
        print("–û–∂–∏–¥–∞–µ—Ç—Å—è: —Å–ø–∏–Ω–Ω–µ—Ä –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ input)")
        print("-" * 80)

        config_data['playback']['play_first_input'] = False
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        demo_manager2 = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager2.play()

        print("\n" + "=" * 80)
        print("TEST 3: –°–ø–∏–Ω–Ω–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω")
        print("=" * 80)
        print("–û–∂–∏–¥–∞–µ—Ç—Å—è: –ù–ï–¢ —Å–ø–∏–Ω–Ω–µ—Ä–∞, —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç")
        print("-" * 80)

        config_data['playback']['spinner_enabled'] = False
        config_data['playback']['play_first_input'] = True
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        demo_manager3 = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager3.play()

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        config_data['playback']['spinner_enabled'] = original_spinner_enabled
        config_data['playback']['play_first_input'] = original_play_first_input
        config_data['playback']['spinner_min_duration'] = original_spinner_min
        config_data['playback']['spinner_max_duration'] = original_spinner_max
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("=" * 80)
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  TEST 1: –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM")
    print("  TEST 2: –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑–∞–Ω –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ input")
    print("  TEST 3: –°–ø–∏–Ω–Ω–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω, —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—Ä–∞–∑—É")
    print("\nüí° –°–ø–∏–Ω–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


if __name__ == "__main__":
    test_spinner()
