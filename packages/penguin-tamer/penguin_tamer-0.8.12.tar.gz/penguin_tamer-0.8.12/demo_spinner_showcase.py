"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö—Ñ–∞–∑–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã "Connecting..." –∏ "Thinking..."
2. –†–∞–±–æ—Ç—É –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ input
3. –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
4. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–∏–Ω–Ω–µ—Ä–∞
"""

import sys
import json
import yaml
from pathlib import Path
from rich.console import Console

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from penguin_tamer.demo_system import create_demo_manager  # noqa: E402


def create_demo():
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-—Ñ–∞–π–ª."""
    test_dir = Path(__file__).parent / "demo_final_spinner"
    test_dir.mkdir(exist_ok=True)
    (test_dir / "demo").mkdir(exist_ok=True)

    demo_data = {
        "version": "2.0",
        "events": [
            {"type": "input", "text": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?"},
            {"type": "output", "text": "–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ –∏ —Ç–µ–ø–ª–æ! ‚òÄÔ∏è"},
        ]
    }

    demo_file = test_dir / "demo" / "test.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_data, f, indent=2, ensure_ascii=False)

    return test_dir, demo_file


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    console = Console()
    config_dir, demo_file = create_demo()
    config_demo_path = Path(__file__).parent / "src" / "penguin_tamer" / "demo_system" / "config_demo.yaml"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    with open(config_demo_path, 'r', encoding='utf-8') as f:
        config_data = yaml.safe_load(f)

    original_values = dict(config_data['playback'])

    try:
        print("\n" + "=" * 80)
        print("üé¨ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–•–§–ê–ó–ù–û–ì–û –°–ü–ò–ù–ù–ï–†–ê")
        print("=" * 80)
        print("\n‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  ‚Ä¢ –§–∞–∑–∞ 1: 'Connecting...' - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM")
        print("  ‚Ä¢ –§–∞–∑–∞ 2: 'Thinking...' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
        print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã")
        print("  ‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã")
        print("  ‚Ä¢ –†–∞–±–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ input")
        print("\n" + "-" * 80)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['spinner_phase1_text'] = "Connecting..."
        config_data['playback']['spinner_phase1_min_duration'] = 1.5
        config_data['playback']['spinner_phase1_max_duration'] = 2.0
        config_data['playback']['spinner_phase2_text'] = "Thinking..."
        config_data['playback']['spinner_phase2_min_duration'] = 1.5
        config_data['playback']['spinner_phase2_max_duration'] = 2.0

        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–≤—É—Ö—Ñ–∞–∑–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä...")
        print()

        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()

        print("\n" + "=" * 80)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 80)
        print("\nüéØ –í—ã –≤–∏–¥–µ–ª–∏:")
        print("  ‚úÖ –§–∞–∑—É 'Connecting...' (~1.5-2.0 —Å–µ–∫)")
        print("  ‚úÖ –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∞–∑—É 'Thinking...'")
        print("  ‚úÖ –§–∞–∑—É 'Thinking...' (~1.5-2.0 —Å–µ–∫)")
        print("  ‚úÖ –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ LLM —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π")
        print("\nüí° –î–≤—É—Ö—Ñ–∞–∑–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!")
        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("  ‚Ä¢ –ü–æ–ª–Ω–∞—è: docs/DEMO_TWO_PHASE_SPINNER.md")
        print("  ‚Ä¢ –ö—Ä–∞—Ç–∫–∞—è: docs/DEMO_SPINNER_QUICK.md")
        print("  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥: src/penguin_tamer/demo_system/config_demo.yaml")

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        config_data['playback'] = original_values
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)


if __name__ == "__main__":
    main()
