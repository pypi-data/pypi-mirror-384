"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–∞–º–∏ LLM
2. –°–ø–∏–Ω–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π input –ø—Ä–æ–ø—É—â–µ–Ω
3. –°–ø–∏–Ω–Ω–µ—Ä –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥
4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import sys
import json
import yaml
from pathlib import Path
from rich.console import Console
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from penguin_tamer.demo_system import create_demo_manager  # noqa: E402


def create_test_demo():
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞."""
    test_dir = Path(__file__).parent / "test_spinner_final"
    test_dir.mkdir(exist_ok=True)
    (test_dir / "demo").mkdir(exist_ok=True)

    demo_data = {
        "version": "2.0",
        "events": [
            {"type": "input", "text": "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"},
            {"type": "output", "text": "–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç"},
            {"type": "input", "text": "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å"},
            {"type": "output", "text": "–í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç"}
        ]
    }

    demo_file = test_dir / "demo" / "test.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_data, f, indent=2, ensure_ascii=False)

    return test_dir, demo_file


def test_spinner_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–ø–∏–Ω–Ω–µ—Ä–∞."""
    console = Console()
    config_dir, demo_file = create_test_demo()
    config_demo_path = Path(__file__).parent / "src" / "penguin_tamer" / "demo_system" / "config_demo.yaml"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    with open(config_demo_path, 'r', encoding='utf-8') as f:
        config_data = yaml.safe_load(f)

    original_values = {
        'spinner_enabled': config_data['playback'].get('spinner_enabled', True),
        'spinner_phase_duration': config_data['playback'].get('spinner_phase_duration', 0.1),
        'spinner_phase_variance': config_data['playback'].get('spinner_phase_variance', 0.03),
        'spinner_min_duration': config_data['playback'].get('spinner_min_duration', 0.5),
        'spinner_max_duration': config_data['playback'].get('spinner_max_duration', 2.0),
        'play_first_input': config_data['playback'].get('play_first_input', True),
    }

    results = []

    try:
        # ==================== TEST 1 ====================
        print("\n" + "=" * 80)
        print("TEST 1: –°–ø–∏–Ω–Ω–µ—Ä –≤–∫–ª—é—á—ë–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("=" * 80)

        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['spinner_min_duration'] = 0.8
        config_data['playback']['spinner_max_duration'] = 1.2
        config_data['playback']['play_first_input'] = True
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        start = time.time()
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()
        duration = time.time() - start

        results.append(f"‚úÖ TEST 1: –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º (~{duration:.1f}s)")

        # ==================== TEST 2 ====================
        print("\n" + "=" * 80)
        print("TEST 2: –°–ø–∏–Ω–Ω–µ—Ä —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –ø–µ—Ä–≤–æ–≥–æ input")
        print("=" * 80)

        config_data['playback']['play_first_input'] = False
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        start = time.time()
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()
        duration = time.time() - start

        results.append(f"‚úÖ TEST 2: –°–ø–∏–Ω–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ input (~{duration:.1f}s)")

        # ==================== TEST 3 ====================
        print("\n" + "=" * 80)
        print("TEST 3: –°–ø–∏–Ω–Ω–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω")
        print("=" * 80)

        config_data['playback']['spinner_enabled'] = False
        config_data['playback']['play_first_input'] = True
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        start = time.time()
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()
        duration = time.time() - start

        results.append(f"‚úÖ TEST 3: –ë–µ–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ (~{duration:.1f}s)")

        # ==================== TEST 4 ====================
        print("\n" + "=" * 80)
        print("TEST 4: –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏–Ω–Ω–µ—Ä (0.3-0.5s)")
        print("=" * 80)

        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['spinner_min_duration'] = 0.3
        config_data['playback']['spinner_max_duration'] = 0.5
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        start = time.time()
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()
        duration = time.time() - start

        results.append(f"‚úÖ TEST 4: –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏–Ω–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (~{duration:.1f}s)")

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in original_values.items():
            config_data['playback'][key] = value
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 80)
    for result in results:
        print(result)

    print("\n" + "=" * 80)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 80)
    print("\nüìù –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞:")
    print("  ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM")
    print("  ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π input –ø—Ä–æ–ø—É—â–µ–Ω")
    print("  ‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ spinner_enabled: false")
    print("  ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (min/max duration)")
    print("  ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ñ–∞–∑ (phase_duration, variance)")
    print("  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    print("\nüí° –°–ø–∏–Ω–Ω–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")


if __name__ == "__main__":
    test_spinner_comprehensive()
