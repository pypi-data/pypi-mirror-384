"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ - —Å –ø–∞—É–∑–∞–º–∏ —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∞–Ω–∏–º–∞—Ü–∏—é.
"""

import sys
import json
import yaml
from pathlib import Path
from rich.console import Console

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from penguin_tamer.demo_system import create_demo_manager  # noqa: E402


def create_test_demo():
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    test_dir = Path(__file__).parent / "test_spinner_visual"
    test_dir.mkdir(exist_ok=True)
    (test_dir / "demo").mkdir(exist_ok=True)

    demo_data = {
        "version": "2.0",
        "events": [
            {"type": "input", "text": "–ö–∞–∫ –¥–µ–ª–∞?"},
            {"type": "output", "text": "–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏."},
            {"type": "input", "text": "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"},
            {"type": "output", "text": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - —ç—Ç–æ –º–∞—à–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ—Ñ–µ –≤ –∫–æ–¥! ‚òï‚û°Ô∏èüíª"}
        ]
    }

    demo_file = test_dir / "demo" / "test.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_data, f, indent=2, ensure_ascii=False)

    return test_dir, demo_file


def visual_test():
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
    console = Console()
    config_dir, demo_file = create_test_demo()
    config_demo_path = Path(__file__).parent / "src" / "penguin_tamer" / "demo_system" / "config_demo.yaml"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    with open(config_demo_path, 'r', encoding='utf-8') as f:
        config_data = yaml.safe_load(f)

    original_values = {
        'spinner_enabled': config_data['playback'].get('spinner_enabled', True),
        'spinner_min_duration': config_data['playback'].get('spinner_min_duration', 0.5),
        'spinner_max_duration': config_data['playback'].get('spinner_max_duration', 2.0),
        'play_first_input': config_data['playback'].get('play_first_input', True),
    }

    try:
        print("\n" + "=" * 80)
        print("–í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ü–ò–ù–ù–ï–†–ê")
        print("=" * 80)
        print("–°–ø–∏–Ω–Ω–µ—Ä –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è 2-3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM")
        print("–í—ã —É–≤–∏–¥–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é 'Thinking...' —Å –∫—Ä—É—Ç—è—â–∏–º–∏—Å—è —Ç–æ—á–∫–∞–º–∏")
        print("-" * 80)
        input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ
        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['spinner_min_duration'] = 2.0
        config_data['playback']['spinner_max_duration'] = 3.0
        config_data['playback']['play_first_input'] = True
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        print("\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ...")
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()

        print("\n" + "=" * 80)
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print("=" * 80)
        print("\nüí° –í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM!")

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in original_values.items():
            config_data['playback'][key] = value
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)


if __name__ == "__main__":
    visual_test()
