# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from notehub_py.models.monitor_alert_routes_inner import MonitorAlertRoutesInner
from typing import Optional, Set
from typing_extensions import Self


class Monitor(BaseModel):
    """
    Monitor
    """  # noqa: E501

    aggregate_function: Optional[StrictStr] = Field(
        default=None,
        description="Aggregate function to apply to the selected values before applying the condition. [none, sum, average, max, min]",
    )
    aggregate_window: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="The time window to aggregate the selected values. It follows the format of a number followed by a time unit",
    )
    alert: Optional[StrictBool] = Field(
        default=None, description="If true, the monitor is in alert state."
    )
    alert_routes: Optional[List[MonitorAlertRoutesInner]] = None
    condition_type: Optional[StrictStr] = Field(
        default=None,
        description="A comparison operation to apply to the value selected by the source_selector [greater_than, greater_than_or_equal_to, less_than, less_than_or_equal_to, equal_to, not_equal_to]",
    )
    description: Optional[StrictStr] = None
    disabled: Optional[StrictBool] = Field(
        default=None, description="If true, the monitor will not be evaluated."
    )
    fleet_filter: Optional[List[StrictStr]] = None
    last_routed_at: Optional[StrictStr] = Field(
        default=None, description="The last time the monitor was evaluated and routed."
    )
    name: Optional[StrictStr] = None
    notefile_filter: Optional[List[StrictStr]] = None
    per_device: Optional[StrictBool] = Field(
        default=None,
        description="Only relevant when using an aggregate_function. If true, the monitor will be evaluated per device, | rather than across the set of selected devices. If true then if a single device matches the specified criteria, | and alert will be created, otherwise the aggregate function will be applied across all devices.",
    )
    routing_cooldown_period: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="The time period to wait before routing another event after the monitor | has been triggered. It follows the format of a number followed by a time unit.",
    )
    silenced: Optional[StrictBool] = Field(
        default=None,
        description="If true, alerts will be created, but no notifications will be sent.",
    )
    source_selector: Optional[StrictStr] = Field(
        default=None,
        description="A valid JSONata expression that selects the value to monitor from the source. | It should return a single, numeric value.",
    )
    source_type: Optional[StrictStr] = Field(
        default=None,
        description='The type of source to monitor. Currently only "event" is supported.',
    )
    threshold: Optional[StrictInt] = Field(
        default=None,
        description="The type of condition to apply to the value selected by the source_selector",
    )
    uid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "aggregate_function",
        "aggregate_window",
        "alert",
        "alert_routes",
        "condition_type",
        "description",
        "disabled",
        "fleet_filter",
        "last_routed_at",
        "name",
        "notefile_filter",
        "per_device",
        "routing_cooldown_period",
        "silenced",
        "source_selector",
        "source_type",
        "threshold",
        "uid",
    ]

    @field_validator("aggregate_function")
    def aggregate_function_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["none", "sum", "average", "max", "min"]):
            raise ValueError(
                "must be one of enum values ('none', 'sum', 'average', 'max', 'min')"
            )
        return value

    @field_validator("aggregate_window")
    def aggregate_window_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+[smh]$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+[smh]$/")
        return value

    @field_validator("condition_type")
    def condition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "greater_than",
                "greater_than_or_equal_to",
                "less_than",
                "less_than_or_equal_to",
                "equal_to",
                "not_equal_to",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('greater_than', 'greater_than_or_equal_to', 'less_than', 'less_than_or_equal_to', 'equal_to', 'not_equal_to')"
            )
        return value

    @field_validator("routing_cooldown_period")
    def routing_cooldown_period_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+[smh]$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+[smh]$/")
        return value

    @field_validator("source_type")
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["event"]):
            raise ValueError("must be one of enum values ('event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Monitor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alert_routes (list)
        _items = []
        if self.alert_routes:
            for _item in self.alert_routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["alert_routes"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Monitor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "aggregate_function": obj.get("aggregate_function"),
                "aggregate_window": obj.get("aggregate_window"),
                "alert": obj.get("alert"),
                "alert_routes": (
                    [
                        MonitorAlertRoutesInner.from_dict(_item)
                        for _item in obj["alert_routes"]
                    ]
                    if obj.get("alert_routes") is not None
                    else None
                ),
                "condition_type": obj.get("condition_type"),
                "description": obj.get("description"),
                "disabled": obj.get("disabled"),
                "fleet_filter": obj.get("fleet_filter"),
                "last_routed_at": obj.get("last_routed_at"),
                "name": obj.get("name"),
                "notefile_filter": obj.get("notefile_filter"),
                "per_device": obj.get("per_device"),
                "routing_cooldown_period": obj.get("routing_cooldown_period"),
                "silenced": obj.get("silenced"),
                "source_selector": obj.get("source_selector"),
                "source_type": obj.get("source_type"),
                "threshold": obj.get("threshold"),
                "uid": obj.get("uid"),
            }
        )
        return _obj
