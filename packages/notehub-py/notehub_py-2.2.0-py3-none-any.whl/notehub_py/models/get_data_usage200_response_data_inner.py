# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.usage_data import UsageData
from typing import Optional, Set
from typing_extensions import Self


class GetDataUsage200ResponseDataInner(BaseModel):
    """
    GetDataUsage200ResponseDataInner
    """  # noqa: E501

    data: List[UsageData]
    device: Optional[StrictStr] = Field(
        default=None,
        description="The device UID this usage data belongs to (only present when aggregate is 'device')",
    )
    fleet: Optional[StrictStr] = Field(
        default=None,
        description="The fleet UID this usage data belongs to (only present when aggregate is 'fleet')",
    )
    iccid: Optional[StrictStr] = Field(
        default=None,
        description="The ICCID of the cellular SIM card (only present when type is 'cellular')",
    )
    imsi: Optional[StrictStr] = Field(
        default=None,
        description="The IMSI of the satellite device (only present when type is 'satellite')",
    )
    type: StrictStr = Field(description="The type of connectivity")
    __properties: ClassVar[List[str]] = [
        "data",
        "device",
        "fleet",
        "iccid",
        "imsi",
        "type",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["cellular", "satellite"]):
            raise ValueError("must be one of enum values ('cellular', 'satellite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDataUsage200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["data"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDataUsage200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "data": (
                    [UsageData.from_dict(_item) for _item in obj["data"]]
                    if obj.get("data") is not None
                    else None
                ),
                "device": obj.get("device"),
                "fleet": obj.get("fleet"),
                "iccid": obj.get("iccid"),
                "imsi": obj.get("imsi"),
                "type": obj.get("type"),
            }
        )
        return _obj
