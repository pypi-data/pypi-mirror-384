# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.firmware import Firmware
from typing import Optional, Set
from typing_extensions import Self


class UploadMetadata(BaseModel):
    """
    UploadMetadata
    """  # noqa: E501

    contains: Optional[StrictStr] = None
    crc32: Optional[StrictInt] = None
    created: Optional[StrictInt] = None
    firmware: Optional[Firmware] = None
    found: Optional[StrictStr] = None
    length: Optional[StrictInt] = None
    md5: Optional[StrictStr] = None
    modified: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    version: Optional[StrictStr] = Field(
        default=None,
        description="User-specified version string provided at time of upload",
    )
    __properties: ClassVar[List[str]] = [
        "contains",
        "crc32",
        "created",
        "firmware",
        "found",
        "length",
        "md5",
        "modified",
        "name",
        "notes",
        "source",
        "tags",
        "type",
        "version",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of firmware
        if self.firmware:
            _dict["firmware"] = self.firmware.to_dict()
        # set to None if firmware (nullable) is None
        # and model_fields_set contains the field
        if self.firmware is None and "firmware" in self.model_fields_set:
            _dict["firmware"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "contains": obj.get("contains"),
                "crc32": obj.get("crc32"),
                "created": obj.get("created"),
                "firmware": (
                    Firmware.from_dict(obj["firmware"])
                    if obj.get("firmware") is not None
                    else None
                ),
                "found": obj.get("found"),
                "length": obj.get("length"),
                "md5": obj.get("md5"),
                "modified": obj.get("modified"),
                "name": obj.get("name"),
                "notes": obj.get("notes"),
                "source": obj.get("source"),
                "tags": obj.get("tags"),
                "type": obj.get("type"),
                "version": obj.get("version"),
            }
        )
        return _obj
