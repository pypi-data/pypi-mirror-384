# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class AlertDataInner(BaseModel):
    """
    AlertDataInner
    """  # noqa: E501

    alert_source: Optional[StrictStr] = Field(
        default=None, description="The source of the alert"
    )
    source: Optional[StrictStr] = Field(
        default=None, description="The UID of the source of the alert"
    )
    source_type: Optional[StrictStr] = Field(
        default=None, description="The type of source."
    )
    source_uid: Optional[StrictStr] = Field(
        default=None, description="The UID of the source of the alert"
    )
    value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The value that triggered the alert"
    )
    when: Optional[StrictStr] = Field(
        default=None, description="The time the alert was created"
    )
    __properties: ClassVar[List[str]] = [
        "alert_source",
        "source",
        "source_type",
        "source_uid",
        "value",
        "when",
    ]

    @field_validator("alert_source")
    def alert_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["app", "device"]):
            raise ValueError("must be one of enum values ('app', 'device')")
        return value

    @field_validator("source_type")
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["event"]):
            raise ValueError("must be one of enum values ('event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "alert_source": obj.get("alert_source"),
                "source": obj.get("source"),
                "source_type": obj.get("source_type"),
                "source_uid": obj.get("source_uid"),
                "value": obj.get("value"),
                "when": obj.get("when"),
            }
        )
        return _obj
