# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class TowerLocation(BaseModel):
    """
    TowerLocation
    """  # noqa: E501

    c: Optional[StrictStr] = Field(default=None, description="Country code")
    cid: Optional[StrictInt] = Field(default=None, description="Cell ID")
    l: Optional[StrictStr] = Field(default=None, description="Open Location Code")
    lac: Optional[StrictInt] = Field(default=None, description="Location Area Code")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Latitude"
    )
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Longitude"
    )
    mcc: Optional[StrictInt] = Field(default=None, description="Mobile Country Code")
    mnc: Optional[StrictInt] = Field(default=None, description="Mobile Network Code")
    n: Optional[StrictStr] = Field(default=None, description="Name of the location")
    source: Optional[StrictStr] = Field(
        default=None, description="The source of this location"
    )
    time: Optional[StrictInt] = Field(
        default=None, description="Unix timestamp when this location was ascertained"
    )
    towers: Optional[StrictInt] = Field(
        default=None, description="Number of triangulation points"
    )
    z: Optional[StrictInt] = Field(default=None, description="Timezone ID")
    zone: Optional[StrictStr] = Field(default=None, description="Timezone name")
    __properties: ClassVar[List[str]] = [
        "c",
        "cid",
        "l",
        "lac",
        "lat",
        "lon",
        "mcc",
        "mnc",
        "n",
        "source",
        "time",
        "towers",
        "z",
        "zone",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TowerLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TowerLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "c": obj.get("c"),
                "cid": obj.get("cid"),
                "l": obj.get("l"),
                "lac": obj.get("lac"),
                "lat": obj.get("lat"),
                "lon": obj.get("lon"),
                "mcc": obj.get("mcc"),
                "mnc": obj.get("mnc"),
                "n": obj.get("n"),
                "source": obj.get("source"),
                "time": obj.get("time"),
                "towers": obj.get("towers"),
                "z": obj.get("z"),
                "zone": obj.get("zone"),
            }
        )
        return _obj
