# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from notehub_py.models.alert_data_inner import AlertDataInner
from notehub_py.models.alert_notifications_inner import AlertNotificationsInner
from typing import Optional, Set
from typing_extensions import Self


class Alert(BaseModel):
    """
    Alert
    """  # noqa: E501

    alert_source: Optional[StrictStr] = Field(
        default=None, description="The source of the alert"
    )
    created_at: Optional[StrictInt] = Field(
        default=None, description="The time the alert was created"
    )
    data: Optional[List[AlertDataInner]] = None
    device_uid: Optional[StrictStr] = Field(default=None, description="Device UID")
    field_name: Optional[StrictStr] = Field(
        default=None, description="The field name that triggered the alert"
    )
    monitor_name: Optional[StrictStr] = Field(default=None, description="Monitor Name")
    monitor_type: Optional[StrictStr] = Field(
        default=None, description="The type of monitor that triggered the alert"
    )
    monitor_uid: Optional[StrictStr] = Field(default=None, description="Monitor UID")
    notifications: Optional[List[AlertNotificationsInner]] = None
    resolved: Optional[StrictBool] = Field(
        default=None, description="If true, the alert has been resolved"
    )
    source: Optional[StrictStr] = Field(
        default=None, description="The UID of the source of the alert"
    )
    uid: Optional[StrictStr] = Field(default=None, description="Alert UID")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The value that triggered the alert"
    )
    version: Optional[StrictInt] = Field(
        default=None, description="The version of the alert"
    )
    __properties: ClassVar[List[str]] = [
        "alert_source",
        "created_at",
        "data",
        "device_uid",
        "field_name",
        "monitor_name",
        "monitor_type",
        "monitor_uid",
        "notifications",
        "resolved",
        "source",
        "uid",
        "value",
        "version",
    ]

    @field_validator("alert_source")
    def alert_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["app", "device"]):
            raise ValueError("must be one of enum values ('app', 'device')")
        return value

    @field_validator("monitor_type")
    def monitor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["event", "device"]):
            raise ValueError("must be one of enum values ('event', 'device')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Alert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["data"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item in self.notifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict["notifications"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Alert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "alert_source": obj.get("alert_source"),
                "created_at": obj.get("created_at"),
                "data": (
                    [AlertDataInner.from_dict(_item) for _item in obj["data"]]
                    if obj.get("data") is not None
                    else None
                ),
                "device_uid": obj.get("device_uid"),
                "field_name": obj.get("field_name"),
                "monitor_name": obj.get("monitor_name"),
                "monitor_type": obj.get("monitor_type"),
                "monitor_uid": obj.get("monitor_uid"),
                "notifications": (
                    [
                        AlertNotificationsInner.from_dict(_item)
                        for _item in obj["notifications"]
                    ]
                    if obj.get("notifications") is not None
                    else None
                ),
                "resolved": obj.get("resolved"),
                "source": obj.get("source"),
                "uid": obj.get("uid"),
                "value": obj.get("value"),
                "version": obj.get("version"),
            }
        )
        return _obj
