# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class SchemaProperty(BaseModel):
    """
    SchemaProperty
    """  # noqa: E501

    items: Optional[List[SchemaProperty]] = Field(
        default=None, description="Used if type is array"
    )
    name: Optional[StrictStr] = Field(
        default=None,
        description="Name of the field (optional for array/object children)",
    )
    properties: Optional[List[SchemaProperty]] = Field(
        default=None, description="Used if type is object"
    )
    type: StrictStr
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = [
        "items",
        "name",
        "properties",
        "type",
        "updated_at",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["string", "number", "boolean", "array", "object"]):
            raise ValueError(
                "must be one of enum values ('string', 'number', 'boolean', 'array', 'object')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["items"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict["properties"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "items": (
                    [SchemaProperty.from_dict(_item) for _item in obj["items"]]
                    if obj.get("items") is not None
                    else None
                ),
                "name": obj.get("name"),
                "properties": (
                    [SchemaProperty.from_dict(_item) for _item in obj["properties"]]
                    if obj.get("properties") is not None
                    else None
                ),
                "type": obj.get("type"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj


# TODO: Rewrite to not use raise_errors
SchemaProperty.model_rebuild(raise_errors=False)
