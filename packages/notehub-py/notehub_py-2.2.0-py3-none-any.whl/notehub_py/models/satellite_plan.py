# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.data_usage import DataUsage
from typing import Optional, Set
from typing_extensions import Self


class SatellitePlan(BaseModel):
    """
    SatellitePlan
    """  # noqa: E501

    activated: StrictInt = Field(
        description="Activation date of the satellite plan as Unix timestamp"
    )
    billable_bytes: Optional[DataUsage] = None
    last_updated: Optional[StrictInt] = Field(
        default=None, description="Time this plan information was last updated"
    )
    ntn_provider: StrictStr = Field(description="Non-Terrestrial Network provider name")
    psid: StrictStr = Field(
        description="Provider-specific identifier for the satellite subscription"
    )
    __properties: ClassVar[List[str]] = [
        "activated",
        "billable_bytes",
        "last_updated",
        "ntn_provider",
        "psid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SatellitePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billable_bytes
        if self.billable_bytes:
            _dict["billable_bytes"] = self.billable_bytes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SatellitePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "activated": obj.get("activated"),
                "billable_bytes": (
                    DataUsage.from_dict(obj["billable_bytes"])
                    if obj.get("billable_bytes") is not None
                    else None
                ),
                "last_updated": obj.get("last_updated"),
                "ntn_provider": obj.get("ntn_provider"),
                "psid": obj.get("psid"),
            }
        )
        return _obj
