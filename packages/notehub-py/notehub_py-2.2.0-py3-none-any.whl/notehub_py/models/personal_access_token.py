# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.personal_access_token_created_by import (
    PersonalAccessTokenCreatedBy,
)
from typing import Optional, Set
from typing_extensions import Self


class PersonalAccessToken(BaseModel):
    """
    PersonalAccessToken
    """  # noqa: E501

    created_at: Optional[datetime] = Field(
        default=None, description="When the key was created"
    )
    created_by: Optional[PersonalAccessTokenCreatedBy] = None
    description: Optional[StrictStr] = Field(
        default=None, description="Optional description for this API Key"
    )
    expires_at: Optional[datetime] = Field(
        default=None, description="When the key expires"
    )
    last_used: Optional[datetime] = Field(
        default=None, description="When it was last used, if ever"
    )
    name: Optional[StrictStr] = Field(default=None, description="Name for this API Key")
    suspended: Optional[StrictBool] = Field(
        default=None, description="if true, this token cannot be used"
    )
    uid: Optional[StrictStr] = Field(
        default=None, description="Unique and public identifier"
    )
    __properties: ClassVar[List[str]] = [
        "created_at",
        "created_by",
        "description",
        "expires_at",
        "last_used",
        "name",
        "suspended",
        "uid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalAccessToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict["created_by"] = self.created_by.to_dict()
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict["expires_at"] = None

        # set to None if last_used (nullable) is None
        # and model_fields_set contains the field
        if self.last_used is None and "last_used" in self.model_fields_set:
            _dict["last_used"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalAccessToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "created_at": obj.get("created_at"),
                "created_by": (
                    PersonalAccessTokenCreatedBy.from_dict(obj["created_by"])
                    if obj.get("created_by") is not None
                    else None
                ),
                "description": obj.get("description"),
                "expires_at": obj.get("expires_at"),
                "last_used": obj.get("last_used"),
                "name": obj.get("name"),
                "suspended": obj.get("suspended"),
                "uid": obj.get("uid"),
            }
        )
        return _obj
