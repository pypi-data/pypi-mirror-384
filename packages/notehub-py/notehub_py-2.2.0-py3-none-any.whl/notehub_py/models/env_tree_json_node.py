# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.env_var import EnvVar
from typing import Optional, Set
from typing_extensions import Self


class EnvTreeJsonNode(BaseModel):
    """
    EnvTreeJsonNode
    """  # noqa: E501

    app_label: Optional[StrictStr] = None
    app_uid: Optional[StrictStr] = None
    children: List[EnvTreeJsonNode]
    device_uid: Optional[StrictStr] = None
    fleet_label: Optional[StrictStr] = None
    fleet_uid: Optional[StrictStr] = None
    inherited_var_count: StrictInt
    type: StrictStr
    url: Optional[StrictStr] = None
    var_count: StrictInt
    variables: List[EnvVar]
    __properties: ClassVar[List[str]] = [
        "app_label",
        "app_uid",
        "children",
        "device_uid",
        "fleet_label",
        "fleet_uid",
        "inherited_var_count",
        "type",
        "url",
        "var_count",
        "variables",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvTreeJsonNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict["children"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item in self.variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict["variables"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvTreeJsonNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "app_label": obj.get("app_label"),
                "app_uid": obj.get("app_uid"),
                "children": (
                    [EnvTreeJsonNode.from_dict(_item) for _item in obj["children"]]
                    if obj.get("children") is not None
                    else None
                ),
                "device_uid": obj.get("device_uid"),
                "fleet_label": obj.get("fleet_label"),
                "fleet_uid": obj.get("fleet_uid"),
                "inherited_var_count": obj.get("inherited_var_count"),
                "type": obj.get("type"),
                "url": obj.get("url"),
                "var_count": obj.get("var_count"),
                "variables": (
                    [EnvVar.from_dict(_item) for _item in obj["variables"]]
                    if obj.get("variables") is not None
                    else None
                ),
            }
        )
        return _obj


# TODO: Rewrite to not use raise_errors
EnvTreeJsonNode.model_rebuild(raise_errors=False)
