# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from notehub_py.models.get_data_usage200_response import GetDataUsage200Response
from notehub_py.models.get_sessions_usage200_response import GetSessionsUsage200Response
from notehub_py.models.usage_events_response import UsageEventsResponse

from notehub_py.api_client import ApiClient, RequestSerialized
from notehub_py.api_response import ApiResponse
from notehub_py.rest import RESTResponseType


class UsageApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_data_usage(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDataUsage200Response:
        """get_data_usage

        Get data usage in bytes for a project with time range and period aggregation

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_data_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetDataUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_data_usage_with_http_info(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDataUsage200Response]:
        """get_data_usage

        Get data usage in bytes for a project with time range and period aggregation

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_data_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetDataUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_data_usage_without_preload_content(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_data_usage

        Get data usage in bytes for a project with time range and period aggregation

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_data_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetDataUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_data_usage_serialize(
        self,
        project_or_product_uid,
        period,
        start_date,
        end_date,
        device_uid,
        aggregate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "deviceUID": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_or_product_uid is not None:
            _path_params["projectOrProductUID"] = project_or_product_uid
        # process the query parameters
        if start_date is not None:

            _query_params.append(("startDate", start_date))

        if end_date is not None:

            _query_params.append(("endDate", end_date))

        if device_uid is not None:

            _query_params.append(("deviceUID", device_uid))

        if period is not None:

            _query_params.append(("period", period))

        if aggregate is not None:

            _query_params.append(("aggregate", aggregate))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["personalAccessToken"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/projects/{projectOrProductUID}/usage/data",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_project_events_usage(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsageEventsResponse:
        """get_project_events_usage

        Get events usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_project_events_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UsageEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_project_events_usage_with_http_info(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsageEventsResponse]:
        """get_project_events_usage

        Get events usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_project_events_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UsageEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_project_events_usage_without_preload_content(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_project_events_usage

        Get events usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_project_events_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UsageEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_project_events_usage_serialize(
        self,
        project_or_product_uid,
        period,
        start_date,
        end_date,
        device_uid,
        aggregate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "deviceUID": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_or_product_uid is not None:
            _path_params["projectOrProductUID"] = project_or_product_uid
        # process the query parameters
        if start_date is not None:

            _query_params.append(("startDate", start_date))

        if end_date is not None:

            _query_params.append(("endDate", end_date))

        if device_uid is not None:

            _query_params.append(("deviceUID", device_uid))

        if period is not None:

            _query_params.append(("period", period))

        if aggregate is not None:

            _query_params.append(("aggregate", aggregate))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["personalAccessToken"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/projects/{projectOrProductUID}/usage/events",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sessions_usage(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSessionsUsage200Response:
        """get_sessions_usage

        Get sessions usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sessions_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetSessionsUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sessions_usage_with_http_info(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSessionsUsage200Response]:
        """get_sessions_usage

        Get sessions usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sessions_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetSessionsUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sessions_usage_without_preload_content(
        self,
        project_or_product_uid: StrictStr,
        period: Annotated[StrictStr, Field(description="Period type for aggregation")],
        start_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="Start date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=0)]],
            Field(
                description="End date for filtering results, specified as a Unix timestamp"
            ),
        ] = None,
        device_uid: Annotated[
            Optional[List[StrictStr]], Field(description="A Device UID.")
        ] = None,
        aggregate: Annotated[
            Optional[StrictStr], Field(description="Aggregation level for results")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_sessions_usage

        Get sessions usage for a project with time range and period aggregation, when endDate is 0 or unspecified the current time is implied

        :param project_or_product_uid: (required)
        :type project_or_product_uid: str
        :param period: Period type for aggregation (required)
        :type period: str
        :param start_date: Start date for filtering results, specified as a Unix timestamp
        :type start_date: int
        :param end_date: End date for filtering results, specified as a Unix timestamp
        :type end_date: int
        :param device_uid: A Device UID.
        :type device_uid: List[str]
        :param aggregate: Aggregation level for results
        :type aggregate: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sessions_usage_serialize(
            project_or_product_uid=project_or_product_uid,
            period=period,
            start_date=start_date,
            end_date=end_date,
            device_uid=device_uid,
            aggregate=aggregate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GetSessionsUsage200Response",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_sessions_usage_serialize(
        self,
        project_or_product_uid,
        period,
        start_date,
        end_date,
        device_uid,
        aggregate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "deviceUID": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_or_product_uid is not None:
            _path_params["projectOrProductUID"] = project_or_product_uid
        # process the query parameters
        if start_date is not None:

            _query_params.append(("startDate", start_date))

        if end_date is not None:

            _query_params.append(("endDate", end_date))

        if device_uid is not None:

            _query_params.append(("deviceUID", device_uid))

        if period is not None:

            _query_params.append(("period", period))

        if aggregate is not None:

            _query_params.append(("aggregate", aggregate))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["personalAccessToken"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/projects/{projectOrProductUID}/usage/sessions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
