# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from notehub_py.models.device import Device


class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Device:
        """Test Device
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Device`
        """
        model = Device()
        if include_optional:
            return Device(
                cellular_usage = [
                    notehub_py.models.sim_usage.SimUsage(
                        iccid = '', 
                        last_updated = 56, 
                        lifetime_used = 56, 
                        limit = 56, 
                        used = 56, )
                    ],
                contact = notehub_py.models.contact.Contact(
                    email = '', 
                    name = '', 
                    organization = '', 
                    role = '', ),
                dfu = notehub_py.models.dfu_env.DFUEnv(
                    card = notehub_py.models.dfu_state.DFUState(
                        began = 1.337, 
                        crc32 = 1.337, 
                        errors = 1.337, 
                        file = '', 
                        length = 1.337, 
                        md5 = '', 
                        mode = 'idle', 
                        read = 1.337, 
                        retry = 1.337, 
                        status = '', 
                        type = 'card', 
                        updated = 1.337, 
                        version = '', ), 
                    user = notehub_py.models.dfu_state.DFUState(
                        began = 1.337, 
                        crc32 = 1.337, 
                        errors = 1.337, 
                        file = '', 
                        length = 1.337, 
                        md5 = '', 
                        mode = 'idle', 
                        read = 1.337, 
                        retry = 1.337, 
                        status = '', 
                        type = 'card', 
                        updated = 1.337, 
                        version = '', ), ),
                disabled = True,
                firmware_host = '',
                firmware_notecard = '',
                fleet_uids = [
                    ''
                    ],
                gps_location = notehub_py.models.location.Location(
                    country = '', 
                    latitude = 1.337, 
                    longitude = 1.337, 
                    name = '', 
                    timezone = '', 
                    when = '', ),
                last_activity = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                product_uid = '',
                provisioned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                serial_number = '',
                sku = '',
                temperature = 1.337,
                tower_info = notehub_py.models.device_tower_info.Device_tower_info(
                    cell_id = 56, 
                    lac = 56, 
                    mcc = 56, 
                    mnc = 56, ),
                tower_location = notehub_py.models.location.Location(
                    country = '', 
                    latitude = 1.337, 
                    longitude = 1.337, 
                    name = '', 
                    timezone = '', 
                    when = '', ),
                triangulated_location = notehub_py.models.location.Location(
                    country = '', 
                    latitude = 1.337, 
                    longitude = 1.337, 
                    name = '', 
                    timezone = '', 
                    when = '', ),
                uid = '',
                voltage = 1.337
            )
        else:
            return Device(
                fleet_uids = [
                    ''
                    ],
                product_uid = '',
                provisioned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                temperature = 1.337,
                uid = '',
                voltage = 1.337,
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
