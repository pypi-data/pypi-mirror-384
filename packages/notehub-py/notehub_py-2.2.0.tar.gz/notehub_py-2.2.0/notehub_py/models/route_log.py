# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class RouteLog(BaseModel):
    """
    RouteLog
    """  # noqa: E501

    attn: Optional[StrictBool] = Field(
        default=None, description="If true, an error was returned when routing"
    )
    var_date: Optional[StrictStr] = Field(
        default=None, description="The date of the logs.", alias="date"
    )
    duration: Optional[StrictInt] = Field(
        default=None, description="The duration of the route in milliseconds"
    )
    event_uid: Optional[StrictStr] = Field(default=None, description="The event UID.")
    route_uid: Optional[StrictStr] = Field(default=None, description="The route UID.")
    status: Optional[StrictStr] = Field(
        default=None, description="The status of the event."
    )
    text: Optional[StrictStr] = Field(
        default=None, description="The response body of the route."
    )
    url: Optional[StrictStr] = Field(default=None, description="The URL of the route.")
    __properties: ClassVar[List[str]] = [
        "attn",
        "date",
        "duration",
        "event_uid",
        "route_uid",
        "status",
        "text",
        "url",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RouteLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RouteLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "attn": obj.get("attn"),
                "date": obj.get("date"),
                "duration": obj.get("duration"),
                "event_uid": obj.get("event_uid"),
                "route_uid": obj.get("route_uid"),
                "status": obj.get("status"),
                "text": obj.get("text"),
                "url": obj.get("url"),
            }
        )
        return _obj
