# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class Event(BaseModel):
    """
    Event
    """  # noqa: E501

    app: Optional[StrictStr] = Field(
        default=None, description="App UID (globally unique)"
    )
    bars: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Bars. Only available on _session.qo events."
    )
    best_country: Optional[StrictStr] = Field(default=None, description="Country")
    best_id: Optional[StrictStr] = Field(
        default=None,
        description="The device serial number, or the DeviceUID if the serial number is not set",
    )
    best_lat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Latitude"
    )
    best_location: Optional[StrictStr] = Field(default=None, description="Location")
    best_location_type: Optional[StrictStr] = Field(
        default=None, description='One of "gps", "triangulated", or "tower"'
    )
    best_location_when: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Unix timestamp"
    )
    best_lon: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Longitude"
    )
    best_timezone: Optional[StrictStr] = Field(default=None, description="Timezone")
    body: Optional[Dict[str, Any]] = Field(
        default=None, description="A JSON object containing event details"
    )
    bssid: Optional[StrictStr] = Field(
        default=None, description="BSSID. Only available on _session.qo events."
    )
    device: Optional[StrictStr] = Field(
        default=None, description="Device UID (globally unique)"
    )
    environment: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Routed environment variables beginning with "$". Only available on _session.qo events.',
    )
    event: Optional[StrictStr] = Field(
        default=None, description="Event UID (globally unique)"
    )
    file: Optional[StrictStr] = Field(
        default=None, description="The notefile associated with this event"
    )
    moved: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The number of times the device was sensed to have moved between the last session and this session. Only available on _session.qo events.",
    )
    note: Optional[StrictStr] = Field(
        default=None, description="The note ID in the notefile"
    )
    ordering_code: Optional[StrictStr] = Field(
        default=None, description="Ordering code. Only available on _session.qo events."
    )
    orientation: Optional[StrictStr] = Field(
        default=None,
        description="The orientation of the device. Only available on _session.qo events.",
    )
    payload: Optional[StrictStr] = Field(
        default=None, description="A base64-encoded binary payload"
    )
    product: Optional[StrictStr] = Field(
        default=None, description="Product UID (globally unique)"
    )
    rat: Optional[StrictStr] = Field(
        default=None, description="Rat. Only available on _session.qo events."
    )
    received: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The unix timestamp when the event was received"
    )
    req: Optional[StrictStr] = Field(default=None, description="The notecard request")
    rsrp: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="RSRP. Only available on _session.qo events."
    )
    rsrq: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="RSRQ. Only available on _session.qo events."
    )
    rssi: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Received Signal Strength Indicator (RSSI) is an estimated measurement of how well a device can receive signals. Only available on _session.qo events.",
    )
    session: Optional[StrictStr] = Field(
        default=None, description="Session UID (globally unique)"
    )
    sinr: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="SINR. Only available on _session.qo events."
    )
    sku: Optional[StrictStr] = Field(
        default=None, description="SKU. Only available on _session.qo events."
    )
    sn: Optional[StrictStr] = Field(
        default=None, description="The device serial number"
    )
    ssid: Optional[StrictStr] = Field(
        default=None, description="SSID. Only available on _session.qo events."
    )
    temp: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Device temperature. Only available on _session.qo events.",
    )
    tls: Optional[StrictBool] = Field(
        default=None,
        description="Whether TLS was used on the connection between the device and notehub. Only available on _session.qo events.",
    )
    tower_country: Optional[StrictStr] = Field(default=None, description="Country")
    tower_id: Optional[StrictStr] = Field(default=None, description="Tower ID")
    tower_lat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Latitude"
    )
    tower_location: Optional[StrictStr] = Field(default=None, description="Location")
    tower_lon: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Longitude"
    )
    tower_timezone: Optional[StrictStr] = Field(default=None, description="Timezone")
    tower_when: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Unix timestamp"
    )
    transport: Optional[StrictStr] = Field(
        default=None,
        description='The transport used for this event, e.g., "cellular", "wifi", ", etc.',
    )
    tri_country: Optional[StrictStr] = Field(default=None, description="Country")
    tri_lat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Latitude"
    )
    tri_location: Optional[StrictStr] = Field(default=None, description="Location")
    tri_lon: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Longitude"
    )
    tri_points: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Triangulation points"
    )
    tri_timezone: Optional[StrictStr] = Field(default=None, description="Timezone")
    tri_when: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Unix timestamp"
    )
    updates: Optional[Union[StrictFloat, StrictInt]] = None
    voltage: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Device voltage. Only available on _session.qo events.",
    )
    when: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="When the event was captured on the device"
    )
    where_country: Optional[StrictStr] = Field(default=None, description="Country")
    where_lat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Latitude"
    )
    where_location: Optional[StrictStr] = Field(default=None, description="Location")
    where_lon: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Longitude"
    )
    where_olc: Optional[StrictStr] = Field(
        default=None, description="Open Location Code"
    )
    where_timezone: Optional[StrictStr] = Field(default=None, description="Timezone")
    where_when: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Unix timestamp"
    )
    __properties: ClassVar[List[str]] = [
        "app",
        "bars",
        "best_country",
        "best_id",
        "best_lat",
        "best_location",
        "best_location_type",
        "best_location_when",
        "best_lon",
        "best_timezone",
        "body",
        "bssid",
        "device",
        "environment",
        "event",
        "file",
        "moved",
        "note",
        "ordering_code",
        "orientation",
        "payload",
        "product",
        "rat",
        "received",
        "req",
        "rsrp",
        "rsrq",
        "rssi",
        "session",
        "sinr",
        "sku",
        "sn",
        "ssid",
        "temp",
        "tls",
        "tower_country",
        "tower_id",
        "tower_lat",
        "tower_location",
        "tower_lon",
        "tower_timezone",
        "tower_when",
        "transport",
        "tri_country",
        "tri_lat",
        "tri_location",
        "tri_lon",
        "tri_points",
        "tri_timezone",
        "tri_when",
        "updates",
        "voltage",
        "when",
        "where_country",
        "where_lat",
        "where_location",
        "where_lon",
        "where_olc",
        "where_timezone",
        "where_when",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "app": obj.get("app"),
                "bars": obj.get("bars"),
                "best_country": obj.get("best_country"),
                "best_id": obj.get("best_id"),
                "best_lat": obj.get("best_lat"),
                "best_location": obj.get("best_location"),
                "best_location_type": obj.get("best_location_type"),
                "best_location_when": obj.get("best_location_when"),
                "best_lon": obj.get("best_lon"),
                "best_timezone": obj.get("best_timezone"),
                "body": obj.get("body"),
                "bssid": obj.get("bssid"),
                "device": obj.get("device"),
                "environment": obj.get("environment"),
                "event": obj.get("event"),
                "file": obj.get("file"),
                "moved": obj.get("moved"),
                "note": obj.get("note"),
                "ordering_code": obj.get("ordering_code"),
                "orientation": obj.get("orientation"),
                "payload": obj.get("payload"),
                "product": obj.get("product"),
                "rat": obj.get("rat"),
                "received": obj.get("received"),
                "req": obj.get("req"),
                "rsrp": obj.get("rsrp"),
                "rsrq": obj.get("rsrq"),
                "rssi": obj.get("rssi"),
                "session": obj.get("session"),
                "sinr": obj.get("sinr"),
                "sku": obj.get("sku"),
                "sn": obj.get("sn"),
                "ssid": obj.get("ssid"),
                "temp": obj.get("temp"),
                "tls": obj.get("tls"),
                "tower_country": obj.get("tower_country"),
                "tower_id": obj.get("tower_id"),
                "tower_lat": obj.get("tower_lat"),
                "tower_location": obj.get("tower_location"),
                "tower_lon": obj.get("tower_lon"),
                "tower_timezone": obj.get("tower_timezone"),
                "tower_when": obj.get("tower_when"),
                "transport": obj.get("transport"),
                "tri_country": obj.get("tri_country"),
                "tri_lat": obj.get("tri_lat"),
                "tri_location": obj.get("tri_location"),
                "tri_lon": obj.get("tri_lon"),
                "tri_points": obj.get("tri_points"),
                "tri_timezone": obj.get("tri_timezone"),
                "tri_when": obj.get("tri_when"),
                "updates": obj.get("updates"),
                "voltage": obj.get("voltage"),
                "when": obj.get("when"),
                "where_country": obj.get("where_country"),
                "where_lat": obj.get("where_lat"),
                "where_location": obj.get("where_location"),
                "where_lon": obj.get("where_lon"),
                "where_olc": obj.get("where_olc"),
                "where_timezone": obj.get("where_timezone"),
                "where_when": obj.get("where_when"),
            }
        )
        return _obj
