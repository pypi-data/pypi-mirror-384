# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.notehub_route_schema import NotehubRouteSchema
from typing import Optional, Set
from typing_extensions import Self


class NotehubRoute(BaseModel):
    """
    NotehubRoute
    """  # noqa: E501

    disabled: Optional[StrictBool] = Field(
        default=False, description="Is route disabled?"
    )
    label: Optional[StrictStr] = Field(default=None, description="Route Label")
    modified: Optional[StrictStr] = Field(default=None, description="Last Modified")
    route_type: Optional[StrictStr] = Field(
        default="http", description="Type of route."
    )
    var_schema: Optional[NotehubRouteSchema] = Field(default=None, alias="schema")
    uid: Optional[StrictStr] = Field(default=None, description="Route UID")
    __properties: ClassVar[List[str]] = [
        "disabled",
        "label",
        "modified",
        "route_type",
        "schema",
        "uid",
    ]

    @field_validator("route_type")
    def route_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "http",
                "proxy",
                "google-function",
                "mqtt",
                "aws-lambda",
                "aws-lambda-with-access-key",
                "aws-sqs",
                "aws-sqs-with-access-key",
                "aws-sqs-fifo",
                "aws-sqs-fifo-with-access-key",
                "aws-iot-analytics",
                "radnote-radresp-fixed-survey",
                "radnote-radresp-mobile-survey",
                "azure-function",
                "azure-function-with-key",
                "azure-service-bus-with-sas-token",
                "thingworx",
                "snowflake",
                "slack-bearer",
                "slack-webhook",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('http', 'proxy', 'google-function', 'mqtt', 'aws-lambda', 'aws-lambda-with-access-key', 'aws-sqs', 'aws-sqs-with-access-key', 'aws-sqs-fifo', 'aws-sqs-fifo-with-access-key', 'aws-iot-analytics', 'radnote-radresp-fixed-survey', 'radnote-radresp-mobile-survey', 'azure-function', 'azure-function-with-key', 'azure-service-bus-with-sas-token', 'thingworx', 'snowflake', 'slack-bearer', 'slack-webhook')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotehubRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotehubRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "disabled": (
                    obj.get("disabled") if obj.get("disabled") is not None else False
                ),
                "label": obj.get("label"),
                "modified": obj.get("modified"),
                "route_type": (
                    obj.get("route_type")
                    if obj.get("route_type") is not None
                    else "http"
                ),
                "schema": (
                    NotehubRouteSchema.from_dict(obj["schema"])
                    if obj.get("schema") is not None
                    else None
                ),
                "uid": obj.get("uid"),
            }
        )
        return _obj
