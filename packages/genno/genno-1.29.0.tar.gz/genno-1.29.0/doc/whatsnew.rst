What's new
**********

.. Next release
.. ============

v1.29.0 (2025-10-14)
====================

- :mod:`genno` supports and is tested on `Python 3.14 <https://www.python.org/downloads/release/python-3140/>`_,
  released 2025-10-07 (:pull:`179`).
  As of release time:

  - `llvmlite <https://github.com/numba/llvmlite/issues/1281>`__
    and `numba <https://github.com/numba/numba/issues/9957>`__ do not yet support Python 3.14.
    :class:`.SparseDataArray` should be usable once these dependencies are updated.
  - `pyarrow <https://github.com/apache/arrow/issues/47438>`__
    does not yet support Python 3.14.
    Genno depends on :mod:`fastparquet` instead for :doc:`cache`.
    Once a compatible version of :mod:`pyarrow` is released,
    it should be usable with this version of genno.

- Support for Python 3.9 is dropped (:pull:`179`),
  as it has reached end-of-life.
- Add :meth:`.Computer.update` and support for :py:`|` and :py:`|=` operators (:pull:`176`, :issue:`169`).
- Adjust test expectations for xarray >= 2025.6 (:pull:`173`).

.. _v1.28.2:

v1.28.2 (2025-03-25)
====================

This release contains no functional changes.

- Adjust type hints in :func:`.quantity_from_iamc` to avoid mypy_ errors with xarray >= 2025.3 (:pull:`166`).
- Mark Sphinx extensions in :mod:`genno.compat.sphinx` as safe for parallel I/O (:program:`sphinx-build --jobs=...`) (:pull:`166`).
  Expand documentation of these extensions.

.. _v1.28.1:

v1.28.1 (2025-02-20)
====================

- Bug fix: genno 1.28.0 (only) would mutate :py:`kwargs` to :func:`.operator.write_report` and, in some cases, pass keyword arguments to :meth:`pandas.DataFrame.to_csv` (:pull:`164`).

.. _v1.28.0:

v1.28.0 (2025-02-19)
====================

Future deprecations
-------------------

The following usage will be deprecated and removed in some future version(s) of genno.

- Returning multiple Keys (instead of a single Key) from :meth:`.Computer.add`.

  - This change is planned to simplify type hinting and checking of code that uses :mod:`genno`.
  - In order to preview this change, warnings (possibly many) can be generated by enabling :data:`.DEFAULT_WARN_ON_RESULT_TUPLE`.
- Import :func:`.random_qty` from :mod:`genno.testing`.
  Instead, import from :mod:`genno.operator`.

All changes
-----------

- :class:`.SparseDataArray` is tested on Python 3.13 (:pull:`158`).
- Improvements to :class:`.Computer`:

  - Item-setter syntax is supported as a shorthand for :meth:`~.Computer.add`, for example :py:`c["X:a-b"] = "mul", "Y:a-b", "Z:b"` (:pull:`157`, :issue:`160`).
  - New methods :meth:`~.Computer.duplicate` and :meth:`~.Computer.insert` (:pull:`157`, :pull:`162`, :issue:`129`).
  - :meth:`.Computer.describe` avoids :class:`RecursionError` when called on malformed (cyclic) graphs (:pull:`157`).
- :class:`.Key` directly provides many of the key-generation features previously provided by :class:`.KeySeq` (:pull:`157`).
- :class:`.Key` hashes the same, regardless of dimension order (:pull:`157`, :pull:`162`, :issue:`159`).
- New class :class:`.Keys`, a typed namespace of :class:`.Key` (:pull:`157`).
- New operators :func:`.expand_dims`, :func:`.random_qty` (previously in :mod:`genno.testing`), :func:`.wildcard_qty`, and :func:`.compat.sdmx.operator.coords_to_codelists` (:pull:`157`, :pull:`162`).
- Operator :func:`.write_report` gains :py:`header_datetime=...` and :py:`header_units=...` keywords for writing to CSV (:pull:`157`).
- :meth:`.AttrSeries.squeeze` supports the :py:`dim=...` argument (:pull:`157`, :issue:`144`).
- :meth:`.AttrSeries.sum` supports the same use of :any:`Ellipsis` as :meth:`xarray.DataArray.sum`, for instance :py:`qty.sum(...)` (:pull:`158`).
- New type variables :class:`.TKeyLike` and :class:`.TQuantity` (:pull:`157`).
  These should be used in downstream code when the return value of a function is the *same* type as its inputs.
  For example, a function that returns Key when passed Key; or str when passed str, should use :class:`.TKeyLike`; a function that returns :class:`.AttrSeries` when passed AttrSeries should use :class:`.TQuantity`.

v1.27.1 (2024-11-12)
====================

- Bug fix: :mod:`dask` 2024.11.0 would mishandle :class:`genno.Key` used in the task graph (:issue:`149`, :pull:`150`).
  `Dask 2023.9.1 <https://docs.dask.org/en/stable/changelog.html#v2023-9-1>`_ narrowed the type of graph keys to :class:`str`, :class:`bytes`, :class:`int`, :class:`float` or tuple of same; versions until 2024.10.0 tolerated :class:`genno.Key`, but a backwards-incompatible change was made in 2024.11.0.
  Add new compatibility functions :func:`genno.compat.dask.to_keylike` and :func:`~genno.compat.dask.cull` to replace Key with :class:`str` equivalents before invoking :func:`.dask.get`.

v1.27.0 (2024-11-08)
====================

- :mod:`genno` supports and is tested on:

  - `Python 3.13 <https://www.python.org/downloads/release/python-3130/>`_, released 2024-10-07 (:pull:`143`).
    As of release time, support for :class:`.SparseDataArray` awaits :mod:`sparse`, thus `numba <https://github.com/numba/numba/issues/9413>`__ and `llvmlite <https://github.com/numba/llvmlite/issues/1084>`__.
    :class:`.SparseDataArray` should be usable once these dependencies are updated.
  - `NumPy 2.0 <https://numpy.org/doc/stable/release/2.0.0-notes.html>`_, released 2024-06-16 (:issue:`140`, :pull:`141`).

- Support for Python 3.8 is dropped (:pull:`143`), as it has reached end-of-life.

v1.26.0 (2024-03-27)
====================

- Expose :mod:`sphinx` utilities as extensions in :mod:`genno.compat.sphinx` (:pull:`137`).

v1.25.0 (2024-03-26)
====================

Migration notes
---------------

1. The :class:`.Quantity` class implementation is simplified in this release.
   The changes should not be noticeable and should require no action for users who do not:

   a. change the default Quantity implementation (:class:`.AttrSeries`)
   b. use both Quantity implementations within the same code including test suites, for instance via the :func:`parametrize_quantity_class` test fixture, or
   c. use :class:`.Quantity` for type annotation.

   Users who *do* either (a) or (b): see :func:`.set_class` for hints on how to :py:`import Quantity` safely so that the correct class is instantiated.

   Users who do (c) should generally change :class:`.Quantity` to :class:`.AnyQuantity` in type hints:

   .. code-block:: python

      from typing import TYPE_CHECKING

      if TYPE_CHECKING:
          from genno.types import AnyQuantity

      def my_operator(qty: "AnyQuantity", arg: int) -> "AnyQuantity":
          ...

2. The global variable :data:`genno.config.STORE` is deprecated.
   Instead of:

   .. code-block:: python

      import genno.config

      genno.config.STORE.add("my_config_key")

   …register the built-in :func:`.store` handler for the target configuration key/section:

   .. code-block:: python

      from genno.config import handles, store

      handles("my_config_key", False, False)(store)

All changes
-----------

- Improvements to :class:`.Quantity` (:pull:`135`).

  - The constructor can use :class:`xarray.DataArray`-style arguments (:py:`data=...` and :py:`coords=...`) directly, without a need to first instantiate a DataArray.
  - The binary operations :py:`+ - * / **` are supported on Quantity objects directly, with Quantity as the left and/or right operand.
    Units, name, and other attributes are preserved.
- New top-level functions :func:`.set_class` to choose the Quantity implementation (:class:`.AttrSeries` or :class:`.SparseDataArray`); :func:`.get_class` to query the current settings, and :func:`.assert_quantity` (:pull:`135`)
- New operators: :func:`.as_quantity`, :func:`.clip`, :func:`.unique_units_from_dim`, :func:`.where` (:pull:`135`).
  New corresponding methods :meth:`.Quantity.clip` and :meth:`.Quantity.where`.
- New operator in :doc:`compat-pyam`: :func:`.quantity_from_iamc` (:pull:`135`).
  :func:`.as_pyam` can accept "model" and "scenario" names from separate keyword arguments.
- :mod:`.caching` now uses the :ref:`Apache Parquet <pandas:apache.parquet>` file format instead of Python's :mod:`pickle` for :class:`.Quantity` and :class:`pandas.DataFrame` (:issue:`128`, :pull:`135`).
  This reduces file size and increases input/output speed.
- If no other location is configured, cached files are stored and read in the :func:`.platformdirs.user_cache_path`,  (:pull:`135`).
- :class:`.SparseDataArray` can be instantiated with :class:`int` data (:pull:`135`).
  Because :mod:`sparse` does not support nullable integer dtypes, values are automatically cast to :class:`float` and a warning is logged.
- Configuration handling is simplified using a :class:`.ConfigHandler` class (:pull:`135`).

v1.24.1 (2024-03-14)
====================

- Handle pandas :ref:`pandas:copy_on_write` set to :any:`True` (:pull:`133`).
  This setting will be the default in pandas v3.0 (expected April or May 2024).
  It is already pre-emptively enabled in some packages (such as `dask-expr <https://pypi.org/project/dask-expr>`_) sometimes used with :mod:`genno`.
  This can cause errors in other packages that expect the setting to be :any:`False`.

  - Add :func:`.disable_copy_on_write` compatibility function, :func:`.parametrize_copy_on_write` test fixture.
  - Use :func:`.disable_copy_on_write` in :meth:`.Plot.save`.

v1.24.0 (2024-02-09)
====================

- Add :class:`.KeySeq` class for creating sequences or sets of similar :class:`Keys <.Key>` (:pull:`126`).
- Add :meth:`.Key.remove_tag` method and support for :py:`k - "foo"` syntax for removing tags from :class:`.Key` (:pull:`126`).

v1.23.1 (2024-02-01)
====================

- Bugfix: genno 1.23.0 would return :class:`.AttrSeries` with :class:`pandas.Index` (instead of 1-D :class:`pandas.MultiIndex`) from :meth:`~.AttrSeries.squeeze` (:issue:`120`, :pull:`122`).

v1.23.0 (2024-01-26)
====================

- New operators in :doc:`compat-sdmx`: :func:`.dataset_to_quantity`, :func:`.quantity_to_dataset`, :func:`.quantity_to_message` (:issue:`21`, :pull:`115`).

v1.22.0 (2023-12-13)
====================

- New attribute :attr:`.Plot.path`, allowing control of the full path used to write plots (:pull:`110`).
- Bugfix: :meth:`.AttrSeries.sel` with a scalar indexer (for instance, :py:`qty.sel(x="foo")`) formerly did *not* drop the selected dimension; this was in contrast to :meth:`xarray.DataArray.sel`.
  The behaviour is now consistent (:pull:`110`):

  - :py:`qty.sel(x=["foo"])`, a length-1 sequence of indexers: the dimension is retained.
  - :py:`qty.sel(x="foo")`, a single scalar indexer: the dimension is dropped.
- Small fixes in :class:`.SparseDataArray` (:pull:`110`):

  - The :attr:`.Quantity.name` is preserved when an :class:`xarray.DataArray` is passed to the constructor.
  - :meth:`~.SparseDataArray.to_series` works with 0-D (scalar) quantities.
- Provide typed signature for :meth:`.Quantity.squeeze` for the benefit of downstream applications (:pull:`110`).

v1.21.0 (2023-11-28)
====================

- :func:`.write_report` and :func:`.concat` are single-dispatch functions for simpler extension in user code (:pull:`108`).
- New argument to :func:`.write_report`: :py:`kwargs`, including "header_comment" to write a header comment at the start of a :file:`.csv` file (:pull:`108`).
- Fix many cross-references in the documentation (:pull:`108`).

v1.20.0 (2023-10-28)
====================

As indicated in the :ref:`v1.18.0` release notes, :py:`genno.computations` is renamed :mod:`genno.operator` (:pull:`105`).
The former module can still be imported and used to access particular operators, but will trigger a :class:`.FutureWarning`.

Migration notes
---------------

Adjust imports of/from :py:`genno.computations` to :py:`genno.operator`.

All changes
-----------

- genno supports and is tested on Python 3.12 (:pull:`105`).
- :func:`.operator.add`, :func:`.div`, and :func:`.sub` gain the same "helper" functionality as :func:`.mul`: when used with :meth:`.Computer.add`, the returned key will automatically include the expected dimensions of the result (:pull:`105`).
  See the documentation of :func:`.add_binop`.
- The standard Python operators :py:`+`, :py:`-`, :py:`*`, and :py:`/` can be used with :class:`.Quantity` objects directly; the resulting values, units, and dimensions are the same as using :func:`.add` etc. respectively (:pull:`105`).
- Improved :class:`.Key` arithmetic (:pull:`105`).
  See the :ref:`documentation <key-arithmethic>`.
- :meth:`.Computer.apply` will return any :class:`.Key` or keys that are returned or yielded by the function passed as its first argument (:pull:`105`).

v1.19.0 (2023-09-11)
====================

- Allow use of regular expressions in :func:`~.operator.aggregate` (:issue:`35`, :pull:`103`).
- Improve documentation of :meth:`.add_queue` (:issue:`18`, :pull:`103`).
- New compatibility module for :doc:`compat-sdmx` (:pull:`103`).
- Ensure consistent :py:`drop=True` behaviour of :func:`.select` and :meth:`.AttrSeries.sel` with :meth:`.SparseDataArray.sel` (:pull:`103`).
  See the docstring for details.
- Creating a 1-D :class:`.AttrSeries` with an "anonymous" (un-named) dimension or index results in a dimension name :py:`"dim_0"`, consistent with :class:`xarray.DataArray` (:pull:`103`).
- Don't allow exceptions to raise from :meth:`.Graph.__contains__`; return :obj:`False` (:pull:`103`).
- Reduce verbosity of logging from :func:`.collect_units` (:pull:`103`).
- Provide typed signatures for :meth:`.Quantity.shape` and :attr:`~.Quantity.size` for the benefit of downstream applications (:pull:`103`).

v1.18.1 (2023-08-31)
====================

- Show the caller's context in :class:`DeprecationWarning` from :class:`.Computer` methods that were
- deprecated in :pull:`98` (:pull:`101`).
- Bugfix: restore behaviour of genno ≤ 1.17.2 in :func:`.config.aggregate` (:pull:`101`).
  Specifically: when there are multiple ``_quantities:`` to be aggregated, a failure to match any one key results in the whole item failing and being re-appended to the queue to be retried after other configuration items.
  Giving ``_fail: warning`` (or anything less than "error") causes the behaviour to be permissive: missing keys are logged but tolerated.
  This functionality was broken in 1.18.0.
- Allow for zero positional/only keyword arguments when formatting a :class:`DeprecationWarning` from :meth:`.Computer.convert_pyam` (:pull:`101`).

.. _v1.18.0:

v1.18.0 (2023-08-31)
====================

This release adjusts the documentation by using language more carefully and precisely in line with :mod:`.dask` (:issue:`34`):

- A **computation** is *any* entry in the :attr:`.Computer.graph`: even a simple alias, or a list of other keys with no specific operation to be performed.
- A **task** is a specific kind of computation: a tuple that consists of a callable first item (usually a function) and other items—including keys and literal values—that are arguments to that callable.
- An **operator** is a function or callable that is used as the first item in a task.
  The new :class:`.Operator` class is named to align with this meaning.

To complete this shift, in future releases of :mod:`.genno`:

1. The module :py:`genno.computations` will be renamed to :mod:`.genno.operator`.
   At this point, imports from :py:`genno.computations` will continue to function, but will trigger a :class:`.FutureWarning`.
2. :py:`genno.computations` will be removed entirely.
   This will happen no sooner than 6 months after (1), and with at least 1 minor version in between.

Migration notes
---------------

Code that uses the deprecated :class:`.Computer` convenience methods can be adjusted to use the corresponding :meth:`~.Operator.add_tasks` helpers—which give equivalent behaviour—via :meth:`.Computer.add`.
See the documentation of the deprecated methods and/or warnings at runtime for examples and hints.

- :meth:`.Computer.add_file` → use :func:`~.operator.load_file` and its helper.
- :meth:`.Computer.add_product` → use :func:`~.operator.mul` and its helper.
- :meth:`.Computer.aggregate` → use :func:`~.operator.aggregate` or :func:`~.operator.sum` and its helper.
- :meth:`.Computer.convert_pyam` → use :func:`~.operator.as_pyam` and its helper.
- :meth:`.Computer.disaggregate` and :func:`~.operator.disaggregate_shares`: use :func:`~.operator.mul` and its helper.

For :meth:`.Plot.make_task` similarly change, for instance, :py:`c.add("plot", DemoPlot.make_task("x:t", "y:t"))` to :py:`c.add("plot", DemoPlot, "x:t", "y:t")`.

All changes
-----------

- New class :class:`.Operator` (:pull:`98`).
  This class allows to combine a function/callable for use in computations with an optional :meth:`~.Operator.helper` convenience method for adding tasks to a :class:`.Computer`.
  :meth:`.Computer.add` calls these helpers automatically, if they exist.
- New method :meth:`.Computer.eval` for using Python code-like expressions to define tasks and keys (:pull:`97`).
- Improve :class:`.Key` (:pull:`98`).

  - New method :meth:`.Key.rename`.
  - Key supports the Python operations :py:`+` (= :meth:`.add_tag`), :py:`*` (= :meth:`.append` a dimension), :py:`/` (= :meth:`~.Key.drop` a dimension).

- Add :func:`.computations.sub <.operator.sub>` (:pull:`97``).
- Provide typed signatures for :meth:`.Quantity.astype`, :attr:`~.Quantity.data`, and :meth:`~.Quantity.pipe`, and :meth:`~.Quantity.__neg__` for the benefit of downstream applications (:pull:`97`).
- :func:`~.genno.computations.concat <genno.operator.concat>` handles N-dimensional quantities with dimensions in any order (:issue:`38`, :pull:`97`).
- :func:`~.computations.pow <.pow>` will derive units if the exponent is a Quantity with all identical integer values (:pull:`97`).
- Adjust for pandas 2.1.0 to prevent :class:`RecursionError` that could occur using :meth:`.AttrSeries.sel` (:pull:`99`).
- Deprecations:

  - :meth:`.Computer.add_file`, :meth:`~.Computer.add_product`, :meth:`~.Computer.aggregate`, :meth:`~.Computer.convert_pyam`, and :meth:`~.Computer.disaggregate` (:pull:`98`).
  - :meth:`.Plot.make_task`; the Plot class now has a :meth:`~.Plot.add_tasks` method, analogous to :meth:`~.Operator.add_tasks`, and so a Plot subclass can be provided directly to :meth:`.Computer.add` (:pull:`98`).

v1.17.2 (2023-07-11)
====================

- Improve :meth:`.Computer.visualize`; see the :ref:`example usage and output <visualize-example>` (:pull:`92`, :pull:`95`).
- :func:`~.operator.aggregate` tolerates missing labels along any of the dimensions to be aggregated (:pull:`95`).
  Previously, this would raise :class:`KeyError`.
- Performance improvement: avoid creating a large, empty :class:`~xarray.DataArray` in order to provide :attr:`.AttrSeries.coords` (:pull:`95`).
  In some cases this would trigger :class:`MemoryError`, a segmentation fault, or similar, even though the actual data was smaller than available memory.

v1.17.1 (2023-05-30)
====================

- Adjust for changed exception types in Pint 0.22 (:pull:`90`).

v1.17.0 (2023-05-15)
====================

- Bug fix: genno v1.16.1 (:pull:`85`) introduced :class:`ValueError` for some usages of :func:`.computations.sum <.operator.sum>` (:pull:`88`).
- Provide typed signatures for :meth:`.Quantity.bfill`, :meth:`~.Quantity.cumprod`, :meth:`~.Quantity.ffill` for the benefit of downstream applications (:pull:`88`).
- Ensure and test that :attr:`.Quantity.name` and :attr:`~.Quantity.units` pass through all :mod:`~genno.computations <genno.operator>`, in particular :func:`~.operator.aggregate`, :func:`~.operator.convert_units`, and :func:`~.operator.sum` (:pull:`88`).
- Simplify arithmetic operations (:func:`~.operator.div`, :func:`~.operator.mul`, :func:`~.operator.pow`) so they are agnostic as to the :class:`.Quantity` class in use (:pull:`88`).
- Ensure :attr:`.AttrSeries.index` is always :class:`pandas.MultiIndex` (:pull:`88`).

v1.16.1 (2023-05-13)
====================

- Bug fix: :func:`.select` raised :class:`.KeyError` if the indexers contained values not appearing in the coords of the :class:`.Quantity` (:pull:`85`).
  This occurred with pandas 2.x, but not with earlier versions.
  The documentation now states explicitly that extraneous values are silently ignored.
- All :mod:`~genno.computations <genno.operator>` are type hinted for the benefit of downstream code (:pull:`85`).
- Implement :attr:`.AttrSeries.shape` (:pull:`85`).
- Bug fix: :meth:`.Computer.add` now correctly handles positional-only keyword arguments to computations that specify these (:pull:`85`).

v1.16.0 (2023-04-29)
====================

- genno supports and is tested on Python 3.11 (:pull:`83`).
- Update dependencies (:pull:`83`):

  - General: :py:`importlib_resources` (the independent backport of :mod:`importlib.resources`) is added for Python 3.9 and earlier.
  - ``genno[sparse]``: new set of optional dependencies, including :mod:`sparse`.
    Install this set in order to use :class:`.SparseDataArray` for :class:`.Quantity`.

    Note that sparse depends on :py:`numba`, and thus :py:`llvmlite`, and both of these package can lag new Python versions by several months.
    For example, as of this release, they do not yet support Python 3.11, and thus :mod:`sparse` and :class:`.SparseDataArray` can only be used with Python 3.10 and earlier.
  - ``genno[tests]``: :mod:`ixmp` is removed; :py:`jupyter` and :py:`nbclient` are added.
    Testing utilities in :mod:`genno.testing.jupyter` are duplicated from :mod:`ixmp.testing.jupyter`.

- Adjust :meth:`.AttrSeries.interp` for compatibility with pandas 2.0.0 (released 2023-04-03) (:pull:`81`).


v1.15.0 (2023-04-02)
====================

- :func:`.dask.core.quote` is now re-exported by :mod:`genno` for convenience (:pull:`79`):

  .. code-block:: python

     from genno import quote

- Add new computations :func:`.drop_vars`, :func:`.round` (:pull:`79`).
- Improve existing computation :func:`.div` to accept a scalar numerator. (:pull:`79`):
- Improve :class:`.AttrSeries` (:pull:`79`):

  - Handle ``dim=None`` in :meth:`~.AttrSeries.cumprod`.
  - Handle 1-D quantities in :meth:`~.AttrSeries.shift`.
  - Preserve :attr:`.AttrSeries.name` in more operations.

- :meth:`.Computer.configure` can accept a :class:`dict` instead of keyword arguments (:pull:`79`).
- Adjust for compatibility with pyam 1.7 (released 2022-12-19) (:pull:`78`).

v1.14.1 (2022-10-28)
====================

- Fix :meth:`~.AttrSeries.cumprod` for 1-dimensional :class:`.AttrSeries` (:pull:`74`).
- Adjust for compatibility with pint 0.20 (released 2022-10-25) (:pull:`74`).

v1.14.0 (2022-09-27)
====================

- Add new computations :func:`.assign_units` and :func:`.convert_units`.
  These have simpler behaviour than :func:`.apply_units` and should be preferred in most situations (:pull:`72`).
- Following pandas (v1.4.0, released 2022-01-22) and xarray (v0.21.0, released 2022-01-27), support for Python 3.7 is dropped (:pull:`72`).
  genno supports and is tested on Python 3.8 and newer.

v1.13.0 (2022-08-17)
====================

- 1-dimensional quantities are handled in :func:`.relabel` and as weights in :func:`.sum` (:pull:`68`).
- :func:`.load_file` will read a header comment like ``# Units: kg / s`` and apply the indicated units to the resulting quantity (:pull:`68`).
- :func:`.div` and :func:`.mul` become the canonical names, matching :mod:`python:operator` and other parts of the Python standard library (:pull:`68`).
  :func:`.ratio` and :func:`.product` are retained as aliases, for compatibility.
- Ensure data passed to :meth:`.Plot.generate` has a "value" column; use short units format by default (:pull:`68`).

v1.12.0 (2022-07-18)
====================

- New computation :func:`.index_to` (:pull:`65`).
- :ref:`config-general` configuration items are more flexible (:pull:`65`).

  - ``comp: null`` or omitted allows to specify a simple collection of other computations.
  - A bare string ``key:`` is left as-is; only keys with (a) dimension(s) and/or tag are parsed to :class:`.Key`.

- :func:`.repr` of :class:`.Quantity` displays its units (:pull:`65`).
- Bug fix: :meth:`.Computer.convert_pyam` handles its `tag` argument correctly, generating keys like ``foo:x-y-z:iamc`` or ``bar::iamc`` when applied to existing keys like ``foo:x-y-z`` or ``bar`` (:pull:`65`).
  Previously the generated keys would be e.g. ``bar:iamc``, which incorrectly treats "iamc" as a (sole) dimension rather than a tag.
- :meth:`.Computer.require_compat` can handle arbitrary module names as strings, as well as module objects (:pull:`63`).

v1.11.0 (2022-04-20)
====================

Migration notes
---------------

The `index` keyword argument to :meth:`.Computer.add_single` / :meth:`.add` is deprecated (:pull:`60`) and will be removed in or after v3.0.0.
Indexing behaviour changes slightly: :meth:`.Computer.full_key` always returns the :class:`.Key` which matches its arguments and has the *greatest number of dimensions*.
For instance:

.. code-block:: python

    c.add_product("foo", "bar:a-b-c", "baz:x-y-z", sums=True)

…will generate a key ``<foo:a-b-c-x-y-z>`` and all partial sums over subsets of its dimensions; ``c.full_key("foo")`` will return this key.

Care should be taken to avoid adding 2+ keys with the same name, tag, **and** number of dimensions:

.. code-block:: python

   c.add("foo:a-b-c", ...)
   c.add("foo:l-m-n", ...)
   c.add("foo:x-y-z", ...)

This situation is ambiguous and the behaviour of :meth:`.Computer.full_key` is undefined.
Instead, add a :attr:`~.Key.tag` to disambiguate.

All changes
-----------

- :meth:`.Key.product` accepts :class:`str` arguments (:pull:`60`).
- New class method :meth:`.Key.bare_name` (:pull:`60`).
- Infer dimensions for e.g. ``X:*:tag`` in :ref:`config-general` configuration items (:pull:`60`).
- Handle the `fail` argument to :meth:`.Computer.aggregate` through :ref:`config-aggregate` configuration items (:pull:`60`).
- New computations :func:`.relabel` and :func:`.rename_dims` (:pull:`60`).
- Improve perfomance for adding large number of computations to :class:`.Computer` (:pull:`60`).

v1.10.0 (2022-03-31)
====================

- Add :func:`.testing.assert_units` (:pull:`58`).

v1.9.2 (2022-03-03)
===================

- Silence :func:`.collect_units` when units are explicitly `""`, rather than :obj:`None` (:pull:`56`).
- Add explicit implementations of :meth:`~.object.__radd__`, :meth:`~.object.__rmul__`, :meth:`~.object.__rsub__` and :meth:`~.object.__rtruediv__` for e.g. ``4.2 * Quantity(...)`` (:pull:`55`)
- Improve typing of :meth:`.Quantity.shift` (:pull:`55`)

v1.9.1 (2022-01-27)
===================

Note that installing ``genno[pyam]`` (including via ``genno[compat]``) currently forces the installation of an old version of :mod:`pint`; version 0.17 or earlier.
Users wishing to use :mod:`genno.compat.pyam` should first install ``genno[pyam]``, then ``pip install --upgrade pint`` to restore a recent version of pint (0.18 or newer) that is usable with genno.

- :func:`.computations.concat <.operator.concat>` works with :class:`.AttrSeries` with misaligned dimensions (:pull:`53`).
- Improve typing of :class:`.Quantity` and :class:`.Computer` to help with using `mypy <https://mypy.readthedocs.io>`_ on code that uses :mod:`genno` (:pull:`53`).

v1.9.0 (2021-11-23)
===================

- Fix error messages raised by :meth:`.AttrSeries.sel` on incorrect usage (:pull:`52`).
- :mod:`genno` no longer supports Python 3.6 or earlier, following :mod:`xarray` (:pull:`52`).

v1.8.1 (2021-07-27)
===================

Bug fixes
---------

- :class:`pathlib.Path` not serialized correctly in :mod:`.caching` (:pull:`51`).

v1.8.0 (2021-07-27)
===================

- Improve caching (:pull:`50`):

  - Handle a lambda functions in :meth:`.cache`-decorated code.
  - Add :meth:`.Encoder.register` and :meth:`.Encoder.ignore` for downstream code to extend hashing of function arguments into cache keys.
  - Expand docs.

v1.7.0 (2021-07-22)
===================

- Add :func:`.computations.interpolate <.operator.interpolate>` and supporting :meth:`.AttrSeries.interp` (:pull:`48`).
  This code works around issues `pandas#25460 <https://github.com/pandas-dev/pandas/issues/25460>`_ and `pandas#31949 <https://github.com/pandas-dev/pandas/issues/31949>`_.
- :meth:`.Computer.cache` now also invalidates cache if the compiled bytecode of the decorated function changes (:pull:`48`).
- Separate and expand docs of :doc:`cache` to show how to check modification time and/or contents of files (:issue:`49`, :pull:`48`).
- Add :attr:`.Quantity.units` attribute for access to units (:pull:`48`).
- :attr:`.AttrSeries.dims` and :attr:`.AttrSeries.coords` behave like :class:`~xarray.DataArray` for 1-D quantities (:pull:`48`)

v1.6.0 (2021-07-07)
===================

- Add :py:`Key.permute_dims()` (:pull:`47`).
- Improve performance of :meth:`.Computer.check_keys` (:pull:`47`).

v1.5.2 (2021-07-06)
===================

- Bug fix: order-insensitive :attr:`.Key.dims` broke :meth:`~.Computer.get` in some circumstances (:pull:`46`).

v1.5.1 (2021-07-01)
===================

- Bug fix: :meth:`.infer_keys` raises :class:`AttributeError` under some circumstances (:pull:`45`).

v1.5.0 (2021-06-27)
===================

- Adjust :func:`.test_assign_coords` for xarray 0.18.2 (:pull:`43`).
- Make :attr:`.Key.dims` order-insensitive so that ``Key("foo", "ab") == Key("foo", "ba")`` (:pull:`42`); make corresponding changes to :class:`.Computer` (:pull:`44`).
- Fix “:class:`AttributeError`: 'COO' object has no attribute 'item'” on :meth:`.SparseDataArray.item` (:pull:`41`).

v1.4.0 (2021-04-26)
===================

- :meth:`.plotnine.Plot.save` automatically converts inputs (specified with :attr:`.Plot.inputs`) from :class:`.Quantity` to :class:`~pandas.DataFrame`, but others (e.g. basic Python types) are passed through unchanged (:pull:`40`).
- :meth:`.plotnine.Plot.save` generates no output file if :meth:`~.plotnine.Plot.generate` returns :obj:`None`/empty :class:`list`.
- Quote :class:`dict` argument to :meth:`.Computer.aggregate` (for grouped aggregation) to avoid collisions between its contents and other graph keys.

v1.3.0 (2021-03-22)
===================

- Bump minimum version of :mod:`sparse` from 0.10 to 0.12 and adjust to changes in this version (:pull:`39`)

  - Remove :py:`SparseDataArray.equals()`, obviated by improvements in :mod:`sparse`.

- Improve :class:`.AttrSeries` (:pull:`39`)

  - Implement :meth:`~.AttrSeries.drop_vars` and :meth:`~.AttrSeries.expand_dims`.
  - :meth:`~.AttrSeries.assign_coords` can relabel an entire dimension.
  - :meth:`~.AttrSeries.sel` can accept :class:`~xarray.DataArray` indexers and rename/combine dimensions.

v1.2.1 (2021-03-08)
===================

- Bug fix: Provide abstract :meth:`.Quantity.to_series` method for type checking in packages that depend on :mod:`genno`.

v1.2.0 (2021-03-08)
===================

- :class:`.Quantity` becomes an actual class, rather than a factory function; :class:`.AttrSeries` and :class:`.SparseDataArray` are subclasses (:pull:`37`).
- :class:`.AttrSeries` gains methods :meth:`~.AttrSeries.bfill`, :meth:`~.AttrSeries.cumprod`, :meth:`~.AttrSeries.ffill`, and :meth:`~.AttrSeries.shift` (:pull:`37`)
- :func:`.computations.load_file <.operator.load_file>` uses the `skipinitialspace` parameter to :func:`pandas.read_csv`; extra dimensions not mentioned in the `dims` parameter are preserved (:pull:`37`).
- :meth:`.AttrSeries.sel` accepts :class:`xarray.DataArray` for xarray-style indexing (:pull:`37`).

v1.1.1 (2021-02-22)
===================

- Bug fix: :meth:`.Computer.add_single` incorrectly calls :meth:`.check_keys` on iterables (e.g. :class:`pandas.DataFrame`) that are not computations (:pull:`36`).

v1.1.0 (2021-02-16)
===================

- :func:`.computations.add <.operator.add>` transforms compatible units, and raises an exception for incompatible units (:pull:`31`).
- Improve handling of scalar quantities (:pull:`31`).
- :class:`~.plotnine.Plot` is fault-tolerant: if any of the input quantities are missing, it becomes a no-op (:pull:`31`).
- :meth:`.Computer.configure` accepts a `fail` argument, allowing partial handling of configuration data/files, with errors logged but not raised (:pull:`31`).
- New :func:`.computations.pow <.operator.pow>` (:pull:`31`).

v1.0.0 (2021-02-13)
===================

- Adjust for usage by :mod:`ixmp.reporting <ixmp.report>` and :mod:`message_ix.reporting <message_ix.report>` (:pull:`28`):

  - Reduce minimum Python version to 3.6.
    This is lower than the minimum version for xarray (3.7), but matches ixmp, etc.
  - Remove submodule :py:`compat.ixmp`; this code has been moved to :mod:`ixmp.reporting <ixmp.report>`, replacing what was there.
    Likewise, remove submodule :py:`compat.message_ix`.
  - Simplify the form & parsing of ``iamc:`` section entries in configuration files:

    - Remove unused feature to add :py:`group_sum()` to the chain of tasks.
    - Keys now conform more closely to the arguments of :meth:`.Computer.convert_pyam`.

  - Move argument-checking from :func:`.as_pyam` to :meth:`.convert_pyam()`.
  - Simplify semantics of :func:`genno.config.handles` decorator.
     Remove ``CALLBACKS`` feature, for now.
  - :meth:`.Computer.get_comp` and :meth:`.require_compat` are now public methods.
  - Expand tests.

- Protect :class:`.Computer` configuration from :func:`dask.optimization.cull`; this prevents infinite recursion if the configuration contains strings matching keys in the graph.
  Add :func:`.unquote` (:issue:`25`, :pull:`26`).
- Simplify :func:`.collect_units` and improve unit handling in :func:`.ratio`  (:issue:`25`, :pull:`26`).
- Add file-based caching via :meth:`.Computer.cache` and :mod:`genno.caching` (:issue:`20`, :pull:`24`).

v0.4.0 and earlier
==================

v0.4.0 (2021-02-07)
-------------------

- Add file-based configuration in :mod:`genno.config` and :doc:`associated documentation <config>` (:issue:`8`, :pull:`16`).

v0.3.0 (2021-02-05)
-------------------

- Add :doc:`compat-plotnine` compatibility (:pull:`15`).
- Add a :doc:`usage` overview to the documentation (:pull:`13`).

v0.2.0 (2021-01-18)
-------------------

- Increase test coverage to 100% (:pull:`12`).
- Port code from :mod:`message_ix.reporting <message_ix.report>` (:pull:`11`).
- Add :mod:`.compat.pyam`.
- Add a `name` parameter to :func:`.load_file`.

v0.1.0 (2021-01-10)
-------------------

- Initial code port from :mod:`ixmp.reporting <ixmp.report>`.
