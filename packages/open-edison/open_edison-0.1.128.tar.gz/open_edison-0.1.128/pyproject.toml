[project]
name = "open-edison"
version = "0.1.128"
description = "Open-source MCP security, aggregation, and monitoring. Single-user, self-hosted MCP proxy."
readme = "README.md"
authors = [
    { name = "Hugo Berg", email = "hugo@edison.watch" }
]
dependencies = [
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.1",
    "loguru>=0.7.3",
    "fastmcp>=2.10.5",
    "fastapi>=0.116.1",
    "uvicorn>=0.35.0",
    "aiohttp>=3.12.14",
    "httpx>=0.28.1",
    "starlette>=0.47.1",
    "sqlalchemy>=2.0.41",
    "aiosqlite>=0.20.0",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-exporter-otlp>=1.36.0",
    "hatchling>=1.27.0",
    "questionary>=2.1.1",
    "python-rapidjson>=1.21",
    "langchain-core>=0.3.76",
    "langchain-openai>=0.3.33",
    "langgraph>=0.6.7",
    "beautifulsoup4>=4.13.5",
    "pyinstaller>=6.16.0",
]
requires-python = ">=3.12,<3.14"

[project.scripts]
open-edison = "src.cli:main"
open_edison = "src.cli:main"
mcp-importer = "src.mcp_importer.__main__:main"
mcp-importer-quick = "src.mcp_importer.quick_cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
managed = true

[dependency-groups]
dev = [
    "basedpyright>=1.21.0",
    "ruff>=0.12.3",
    "pytest>=8.3.3",
    "pytest-asyncio>=1.0.0",
    "vulture>=2.11",
    "twine>=5.1.1",
    "ty>=0.0.1a19",
    "pyinstaller>=6.11.0",
]

 


[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src", "open_edison"]
include = [
  "README.md",
  "LICENSE",
  "config.json",
  "tool_permissions.json",
  "resource_permissions.json",
  "prompt_permissions.json",
  "docs/**",
  "desktop_ext/**",
]
artifacts = [
  "src/frontend_dist/**",
  "desktop_ext/open-edison-connector.dxt",
]

[tool.hatch.build.targets.wheel.force-include]
# Ensure the desktop extension directory is present in wheels
"desktop_ext" = "desktop_ext"


[tool.hatch.build.targets.wheel.hooks.custom]
path = "hatch_build.py"


[tool.hatch.build.targets.sdist]
include = [
  "README.md",
  "LICENSE",
  "config.json",
  "tool_permissions.json",
  "resource_permissions.json",
  "prompt_permissions.json",
  "src/**",
  "open_edison/**",
  "docs/**",
  "desktop_ext/**",
]
artifacts = [
  "src/frontend_dist/**",
  "desktop_ext/open-edison-connector.dxt",
]

[tool.hatch.build.targets.sdist.force-include]
# Ensure the built DXT is included even if untracked by VCS
"desktop_ext/open-edison-connector.dxt" = "desktop_ext/open-edison-connector.dxt"


[tool.hatch.build.targets.sdist.hooks.custom]
path = "hatch_build.py"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "B", "A", "C4", "PIE", "SIM", "RET"]
ignore = ["E501"]  # Line too long (handled by formatter)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "-v --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.pyright]
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
include = ["src"]
ignore = [".venv", "tests/**", "alembic", "tests"]
reportMissingTypeStubs = true
reportUnusedFunction = false  # Disable unused function warnings since we have many dynamically registered functions
venvPath = ".venv"
extraPaths = [".", "src"]

[tool.ty.rules]
possibly-unresolved-reference = "error"
index-out-of-bounds = "error"

[tool.ty.src]
exclude = ["tests/**"]

[tool.vulture]
exclude = ["tests", "src/frontend_dist"]
