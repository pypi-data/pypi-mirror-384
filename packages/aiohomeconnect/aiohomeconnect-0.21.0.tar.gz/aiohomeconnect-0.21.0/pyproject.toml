[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
authors = [
  {name = "Martin Hjelmare", email = "marhje52@gmail.com"},
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
]
description = "An asyncio client for the Home Connect API."
license = {text = "Apache-2.0"}
name = "aiohomeconnect"
readme = "README.md"
requires-python = ">=3.11"
version = "0.21.0"

dependencies = [
  "httpx>=0.28.0,<1",
  "httpx-sse>=0.4.0,<1",
  "mashumaro>=3.13.1,<4",
]
scripts.aiohomeconnect = "aiohomeconnect.cli:cli"
urls."Bug Tracker" = "https://github.com/MartinHjelmare/aiohomeconnect/issues"
urls.Changelog = "https://github.com/MartinHjelmare/aiohomeconnect/blob/main/CHANGELOG.md"
urls.documentation = "https://aiohomeconnect.readthedocs.io"
urls.repository = "https://github.com/MartinHjelmare/aiohomeconnect"

[project.optional-dependencies]
cli = [
  "authlib>=1.3.0,<2",
  "fastapi>=0.115.0,<1",
  "uvicorn>=0.34.0,<1",
  "typer>=0.15,<1",
]

[dependency-groups]
dev = [
  "codespell==2.4.1",
  "copier>=9.10,<9.11",
  "mypy==1.18.2",
  "pre-commit==4.3.0",
  "pytest-asyncio==1.2.0",
  "pytest-httpx==0.35.0",
  "python-semantic-release>=10,<11",
  "ruff==0.14.0",
  "pytest==8.4.2",
  "pytest-cov==7.0.0",
]
docs = [
  "furo>=2023.5.20; python_version>='3.11'",
  "myst-parser>=0.16; python_version>='3.11'",
  "sphinx>=4; python_version>='3.11'",
  "sphinx-autobuild>=2025,<2026; python_version>='3.11'",
]

[tool.ruff]
line-length = 88
lint.ignore = [
  "ANN401", # any-type
  "COM812", # missing-trailing-comma
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "D417", # False positives in some occasions
  "EM101", # raw-string-in-exception
  "EM102", # f-string-in-exception
  "ISC001", # single-line-implicit-string-concatenation
  "PLR0913", # too-many-arguments
  "PLR2004", # magic-value-comparison
  "TC001", # typing-only-first-party-import
  "TC002", # typing-only-third-party-import
  "TC003", # typing-only-stdlib-import
  "TRY003", # raise-vanilla-args
]
lint.isort.force-sort-within-sections = true
lint.isort.known-first-party = ["aiohomeconnect", "tests"]
lint.per-file-ignores."docs/conf.py" = ["D100", "D401"]
lint.per-file-ignores."scripts/*" = ["ARG002", "ERA001", "PLR0911", "T201"]
lint.per-file-ignores."setup.py" = ["D100"]
lint.per-file-ignores."src/aiohomeconnect/cli/*" = ["T201"]
lint.per-file-ignores."tests/**/*" = [
  "FBT001", # boolean-type-hint-positional-argument
  "S101", # assert
  "S105", # hardcoded-password-string
]
lint.select = [
  "ALL", # all rules
]
target-version = "py311"

[tool.pytest.ini_options]
addopts = """\
    -Wdefault
    --cov=aiohomeconnect
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    """
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING",
  "raise NotImplementedError",
  'if __name__ == "__main__":',
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = [
  'docs/.*',
  'setup.py',
]
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
allow_untyped_defs = true
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "authlib.*"

[tool.semantic_release]
allow_zero_version = true
build_command = """
pip install uv
uv lock
git add uv.lock
uv build
"""
major_on_zero = false
version_toml = ["pyproject.toml:project.version"]
version_variables = [
  "src/aiohomeconnect/__init__.py:__version__",
  "docs/conf.py:release",
]
[tool.semantic_release.commit_parser_options]
parse_squash_commits = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
  '''Merged? .*''',
  '''Initial [Cc]ommit.*''', # codespell:ignore
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true
