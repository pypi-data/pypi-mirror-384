# coding: utf-8

"""
    ChannelShipper & Royal Mail Public API

    Import your orders, retrieve your orders and generate labels.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from royal_mail_click_and_drop import CreateOrdersResponse

class TestCreateOrdersResponse(unittest.TestCase):
    """CreateOrdersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrdersResponse:
        """Test CreateOrdersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrdersResponse`
        """
        model = CreateOrdersResponse()
        if include_optional:
            return CreateOrdersResponse(
                success_count = 56,
                errors_count = 56,
                created_orders = [
                    royal-mail-click-and-drop.models.create_order_response.CreateOrderResponse(
                        order_identifier = 56, 
                        order_reference = '', 
                        created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        order_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        printed_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        manifested_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        shipped_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        tracking_number = '', 
                        label = '', 
                        label_errors = [
                            royal-mail-click-and-drop.models.create_order_label_error_response.CreateOrderLabelErrorResponse(
                                message = '', )
                            ], 
                        generated_documents = [
                            ''
                            ], )
                    ],
                failed_orders = [
                    royal-mail-click-and-drop.models.failed_order_response.FailedOrderResponse(
                        order = royal-mail-click-and-drop.models.create_order_request.CreateOrderRequest(
                            order_reference = '', 
                            is_recipient_a_business = True, 
                            recipient = royal-mail-click-and-drop.models.recipient_details_request.FullContact(
                                address = royal-mail-click-and-drop.models.address_request.Address(
                                    full_name = '', 
                                    company_name = '', 
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    address_line3 = '', 
                                    city = '', 
                                    county = '', 
                                    postcode = '', 
                                    country_code = '', ), 
                                phone_number = '', 
                                email_address = '', 
                                address_book_reference = '', ), 
                            sender = royal-mail-click-and-drop.models.sender_details_request.SenderDetailsRequest(
                                trading_name = '', 
                                phone_number = '', 
                                email_address = '', ), 
                            billing = royal-mail-click-and-drop.models.billing_details_request.BillingDetailsRequest(
                                phone_number = '', 
                                email_address = '', ), 
                            packages = [
                                royal-mail-click-and-drop.models.shipment_package_request.ShipmentPackageRequest(
                                    weight_in_grams = 1, 
                                    package_format_identifier = '', 
                                    custom_package_format_identifier = '', 
                                    dimensions = royal-mail-click-and-drop.models.dimensions_request.DimensionsRequest(
                                        height_in_mms = 56, 
                                        width_in_mms = 56, 
                                        depth_in_mms = 56, ), 
                                    contents = [
                                        royal-mail-click-and-drop.models.product_item_request.ProductItemRequest(
                                            name = '', 
                                            sku = '', 
                                            quantity = 1, 
                                            unit_value = 0, 
                                            unit_weight_in_grams = 0, 
                                            customs_description = '', 
                                            extended_customs_description = '', 
                                            customs_code = '', 
                                            origin_country_code = '', 
                                            customs_declaration_category = 'none', 
                                            requires_export_licence = True, 
                                            stock_location = '', 
                                            use_origin_preference = True, 
                                            supplementary_units = '', 
                                            license_number = '', 
                                            certificate_number = '', )
                                        ], )
                                ], 
                            order_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            planned_despatch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            special_instructions = '', 
                            subtotal = 0, 
                            shipping_cost_charged = 0, 
                            other_costs = 0, 
                            customs_duty_costs = 0, 
                            total = 0, 
                            currency_code = '', 
                            postage_details = {"sendNotificationsTo":"sender","serviceCode":"string","serviceRegisterCode":"st","consequentialLoss":0,"receiveEmailNotification":true,"receiveSmsNotification":true,"guaranteedSaturdayDelivery":false,"requestSignatureUponDelivery":true,"isLocalCollect":true,"safePlace":"string","department":"string","AIRNumber":"string","IOSSNumber":"string","requiresExportLicense":true,"commercialInvoiceNumber":"string","commercialInvoiceDate":"2019-08-24T14:15:22Z"}, 
                            tags = [
                                royal-mail-click-and-drop.models.tag_request.TagRequest(
                                    key = '', 
                                    value = '', )
                                ], 
                            label = royal-mail-click-and-drop.models.label_generation_request.LabelGenerationRequest(
                                include_label_in_response = True, 
                                include_cn = True, 
                                include_returns_label = True, ), 
                            order_tax = 0, 
                            contains_dangerous_goods = True, 
                            dangerous_goods_un_code = '', 
                            dangerous_goods_description = 1.337, 
                            dangerous_goods_quantity = 1.337, 
                            importer = royal-mail-click-and-drop.models.importer.Importer(
                                company_name = '', 
                                address_line1 = '', 
                                address_line2 = '', 
                                address_line3 = '', 
                                city = '', 
                                postcode = '', 
                                country = '', 
                                business_name = '', 
                                contact_name = '', 
                                phone_number = '', 
                                email_address = '', 
                                vat_number = '', 
                                tax_code = '', 
                                eori_number = '', ), ), 
                        errors = [
                            royal-mail-click-and-drop.models.create_order_error_response.CreateOrderErrorResponse(
                                error_code = 56, 
                                error_message = '', 
                                fields = [
                                    royal-mail-click-and-drop.models.order_field_response.OrderFieldResponse(
                                        field_name = '', 
                                        value = '', )
                                    ], )
                            ], )
                    ]
            )
        else:
            return CreateOrdersResponse(
        )
        """

    def testCreateOrdersResponse(self):
        """Test CreateOrdersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
