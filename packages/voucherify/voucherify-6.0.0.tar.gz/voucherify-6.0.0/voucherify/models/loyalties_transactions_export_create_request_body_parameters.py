# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.export_campaign_transactions_filters import ExportCampaignTransactionsFilters
from typing import Optional, Set
from typing_extensions import Self

class LoyaltiesTransactionsExportCreateRequestBodyParameters(BaseModel):
    """
    List of available parameters containing fields and filters that can be exported for transactions in a loyalty card campaign, along with the sorting order of the returned data.
    """ # noqa: E501
    order: Optional[StrictStr] = Field(default=None, description="How the export is ordered, where the dash `-` preceding a sorting option means sorting in a descending order.")
    fields: Optional[List[StrictStr]] = Field(default=None, description="Data fields that will be exported for the transactions that are associated with balance movements on cards in a campaign.")
    filters: Optional[ExportCampaignTransactionsFilters] = None
    __properties: ClassVar[List[str]] = ["order", "fields", "filters"]

    @field_validator('order')
    def order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['-created_at', 'created_at']):
            raise ValueError("must be one of enum values ('-created_at', 'created_at')")
        return value

    @field_validator('fields')
    def fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['id', 'type', 'source_id', 'reason', 'balance', 'amount', 'created_at', 'voucher_id', 'source', 'details', 'related_transaction_id']):
                raise ValueError("each list item must be one of ('id', 'type', 'source_id', 'reason', 'balance', 'amount', 'created_at', 'voucher_id', 'source', 'details', 'related_transaction_id')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltiesTransactionsExportCreateRequestBodyParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if fields (nullable) is None
        # and model_fields_set contains the field
        if self.fields is None and "fields" in self.model_fields_set:
            _dict['fields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltiesTransactionsExportCreateRequestBodyParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order": obj.get("order"),
            "fields": obj.get("fields"),
            "filters": ExportCampaignTransactionsFilters.from_dict(obj["filters"]) if obj.get("filters") is not None else None
        })
        return _obj


