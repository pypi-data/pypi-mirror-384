# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ParameterFiltersListCampaignsStatusConditions(BaseModel):
    """
    Data conditions used to narrow down the data records to be returned in the result.
    """ # noqa: E501
    active: Optional[Dict[str, Any]] = Field(default=None, description="Campaigns finished generation codes. This also returns campaigns regardless of their `expiration_date` and `start_date`.", alias="$active")
    failed: Optional[Dict[str, Any]] = Field(default=None, description="Campaigs failed to generated codes.", alias="$failed")
    in_progress: Optional[Dict[str, Any]] = Field(default=None, description="Campaigns are generating codes or they are updating.", alias="$in_progress")
    expired: Optional[Dict[str, Any]] = Field(default=None, description="Campaigns generated codes, but their `expiration_date` is in the past.", alias="$expired")
    before_start: Optional[Dict[str, Any]] = Field(default=None, description="Campaigns generated codes, but their `start_date` is in the future.")
    __properties: ClassVar[List[str]] = ["$active", "$failed", "$in_progress", "$expired", "before_start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterFiltersListCampaignsStatusConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['$active'] = None

        # set to None if failed (nullable) is None
        # and model_fields_set contains the field
        if self.failed is None and "failed" in self.model_fields_set:
            _dict['$failed'] = None

        # set to None if in_progress (nullable) is None
        # and model_fields_set contains the field
        if self.in_progress is None and "in_progress" in self.model_fields_set:
            _dict['$in_progress'] = None

        # set to None if expired (nullable) is None
        # and model_fields_set contains the field
        if self.expired is None and "expired" in self.model_fields_set:
            _dict['$expired'] = None

        # set to None if before_start (nullable) is None
        # and model_fields_set contains the field
        if self.before_start is None and "before_start" in self.model_fields_set:
            _dict['before_start'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterFiltersListCampaignsStatusConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$active": obj.get("$active"),
            "$failed": obj.get("$failed"),
            "$in_progress": obj.get("$in_progress"),
            "$expired": obj.get("$expired"),
            "before_start": obj.get("before_start")
        })
        return _obj


