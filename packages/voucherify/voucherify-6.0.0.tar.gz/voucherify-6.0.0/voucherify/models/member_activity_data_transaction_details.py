# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.loyalty_pending_points import LoyaltyPendingPoints
from voucherify.models.member_activity_data_transaction_details_custom_event import MemberActivityDataTransactionDetailsCustomEvent
from voucherify.models.member_activity_data_transaction_details_destination_voucher import MemberActivityDataTransactionDetailsDestinationVoucher
from voucherify.models.member_activity_data_transaction_details_earning_rule import MemberActivityDataTransactionDetailsEarningRule
from voucherify.models.member_activity_data_transaction_details_event import MemberActivityDataTransactionDetailsEvent
from voucherify.models.member_activity_data_transaction_details_event_schema import MemberActivityDataTransactionDetailsEventSchema
from voucherify.models.member_activity_data_transaction_details_holder_loyalty_tier import MemberActivityDataTransactionDetailsHolderLoyaltyTier
from voucherify.models.member_activity_data_transaction_details_loyalty_tier import MemberActivityDataTransactionDetailsLoyaltyTier
from voucherify.models.member_activity_data_transaction_details_order import MemberActivityDataTransactionDetailsOrder
from voucherify.models.member_activity_data_transaction_details_redemption import MemberActivityDataTransactionDetailsRedemption
from voucherify.models.member_activity_data_transaction_details_reward import MemberActivityDataTransactionDetailsReward
from voucherify.models.member_activity_data_transaction_details_rollback import MemberActivityDataTransactionDetailsRollback
from voucherify.models.member_activity_data_transaction_details_segment import MemberActivityDataTransactionDetailsSegment
from voucherify.models.member_activity_data_transaction_details_source_voucher import MemberActivityDataTransactionDetailsSourceVoucher
from voucherify.models.voucher_balance import VoucherBalance
from typing import Optional, Set
from typing_extensions import Self

class MemberActivityDataTransactionDetails(BaseModel):
    """
    MemberActivityDataTransactionDetails
    """ # noqa: E501
    balance: Optional[VoucherBalance] = None
    order: Optional[MemberActivityDataTransactionDetailsOrder] = None
    event: Optional[MemberActivityDataTransactionDetailsEvent] = None
    earning_rule: Optional[MemberActivityDataTransactionDetailsEarningRule] = None
    segment: Optional[MemberActivityDataTransactionDetailsSegment] = None
    loyalty_tier: Optional[MemberActivityDataTransactionDetailsLoyaltyTier] = None
    redemption: Optional[MemberActivityDataTransactionDetailsRedemption] = None
    rollback: Optional[MemberActivityDataTransactionDetailsRollback] = None
    custom_event: Optional[MemberActivityDataTransactionDetailsCustomEvent] = None
    event_schema: Optional[MemberActivityDataTransactionDetailsEventSchema] = None
    holder_loyalty_tier: Optional[MemberActivityDataTransactionDetailsHolderLoyaltyTier] = None
    pending_points: Optional[LoyaltyPendingPoints] = None
    reward: Optional[MemberActivityDataTransactionDetailsReward] = None
    source_voucher: Optional[MemberActivityDataTransactionDetailsSourceVoucher] = None
    destination_voucher: Optional[MemberActivityDataTransactionDetailsDestinationVoucher] = None
    __properties: ClassVar[List[str]] = ["balance", "order", "event", "earning_rule", "segment", "loyalty_tier", "redemption", "rollback", "custom_event", "event_schema", "holder_loyalty_tier", "pending_points", "reward", "source_voucher", "destination_voucher"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemberActivityDataTransactionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of earning_rule
        if self.earning_rule:
            _dict['earning_rule'] = self.earning_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_tier
        if self.loyalty_tier:
            _dict['loyalty_tier'] = self.loyalty_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollback
        if self.rollback:
            _dict['rollback'] = self.rollback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_event
        if self.custom_event:
            _dict['custom_event'] = self.custom_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_schema
        if self.event_schema:
            _dict['event_schema'] = self.event_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder_loyalty_tier
        if self.holder_loyalty_tier:
            _dict['holder_loyalty_tier'] = self.holder_loyalty_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_points
        if self.pending_points:
            _dict['pending_points'] = self.pending_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward
        if self.reward:
            _dict['reward'] = self.reward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_voucher
        if self.source_voucher:
            _dict['source_voucher'] = self.source_voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_voucher
        if self.destination_voucher:
            _dict['destination_voucher'] = self.destination_voucher.to_dict()
        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if event (nullable) is None
        # and model_fields_set contains the field
        if self.event is None and "event" in self.model_fields_set:
            _dict['event'] = None

        # set to None if earning_rule (nullable) is None
        # and model_fields_set contains the field
        if self.earning_rule is None and "earning_rule" in self.model_fields_set:
            _dict['earning_rule'] = None

        # set to None if segment (nullable) is None
        # and model_fields_set contains the field
        if self.segment is None and "segment" in self.model_fields_set:
            _dict['segment'] = None

        # set to None if loyalty_tier (nullable) is None
        # and model_fields_set contains the field
        if self.loyalty_tier is None and "loyalty_tier" in self.model_fields_set:
            _dict['loyalty_tier'] = None

        # set to None if redemption (nullable) is None
        # and model_fields_set contains the field
        if self.redemption is None and "redemption" in self.model_fields_set:
            _dict['redemption'] = None

        # set to None if rollback (nullable) is None
        # and model_fields_set contains the field
        if self.rollback is None and "rollback" in self.model_fields_set:
            _dict['rollback'] = None

        # set to None if custom_event (nullable) is None
        # and model_fields_set contains the field
        if self.custom_event is None and "custom_event" in self.model_fields_set:
            _dict['custom_event'] = None

        # set to None if event_schema (nullable) is None
        # and model_fields_set contains the field
        if self.event_schema is None and "event_schema" in self.model_fields_set:
            _dict['event_schema'] = None

        # set to None if holder_loyalty_tier (nullable) is None
        # and model_fields_set contains the field
        if self.holder_loyalty_tier is None and "holder_loyalty_tier" in self.model_fields_set:
            _dict['holder_loyalty_tier'] = None

        # set to None if reward (nullable) is None
        # and model_fields_set contains the field
        if self.reward is None and "reward" in self.model_fields_set:
            _dict['reward'] = None

        # set to None if source_voucher (nullable) is None
        # and model_fields_set contains the field
        if self.source_voucher is None and "source_voucher" in self.model_fields_set:
            _dict['source_voucher'] = None

        # set to None if destination_voucher (nullable) is None
        # and model_fields_set contains the field
        if self.destination_voucher is None and "destination_voucher" in self.model_fields_set:
            _dict['destination_voucher'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemberActivityDataTransactionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balance": VoucherBalance.from_dict(obj["balance"]) if obj.get("balance") is not None else None,
            "order": MemberActivityDataTransactionDetailsOrder.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "event": MemberActivityDataTransactionDetailsEvent.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "earning_rule": MemberActivityDataTransactionDetailsEarningRule.from_dict(obj["earning_rule"]) if obj.get("earning_rule") is not None else None,
            "segment": MemberActivityDataTransactionDetailsSegment.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "loyalty_tier": MemberActivityDataTransactionDetailsLoyaltyTier.from_dict(obj["loyalty_tier"]) if obj.get("loyalty_tier") is not None else None,
            "redemption": MemberActivityDataTransactionDetailsRedemption.from_dict(obj["redemption"]) if obj.get("redemption") is not None else None,
            "rollback": MemberActivityDataTransactionDetailsRollback.from_dict(obj["rollback"]) if obj.get("rollback") is not None else None,
            "custom_event": MemberActivityDataTransactionDetailsCustomEvent.from_dict(obj["custom_event"]) if obj.get("custom_event") is not None else None,
            "event_schema": MemberActivityDataTransactionDetailsEventSchema.from_dict(obj["event_schema"]) if obj.get("event_schema") is not None else None,
            "holder_loyalty_tier": MemberActivityDataTransactionDetailsHolderLoyaltyTier.from_dict(obj["holder_loyalty_tier"]) if obj.get("holder_loyalty_tier") is not None else None,
            "pending_points": LoyaltyPendingPoints.from_dict(obj["pending_points"]) if obj.get("pending_points") is not None else None,
            "reward": MemberActivityDataTransactionDetailsReward.from_dict(obj["reward"]) if obj.get("reward") is not None else None,
            "source_voucher": MemberActivityDataTransactionDetailsSourceVoucher.from_dict(obj["source_voucher"]) if obj.get("source_voucher") is not None else None,
            "destination_voucher": MemberActivityDataTransactionDetailsDestinationVoucher.from_dict(obj["destination_voucher"]) if obj.get("destination_voucher") is not None else None
        })
        return _obj


