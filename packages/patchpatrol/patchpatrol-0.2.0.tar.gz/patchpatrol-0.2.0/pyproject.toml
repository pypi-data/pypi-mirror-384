[project]
name = "patchpatrol"
version = "0.2.0"
description = "AI-powered commit review system for pre-commit hooks - Local (ONNX) or cloud (Gemini) analysis of Git commits"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "HervÃ© Beraud", email = "herveberaud.pro@gmail.com"}
]
keywords = ["git", "pre-commit", "ai", "code-review", "onnx", "gemini", "local", "cloud"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Version Control :: Git",
]

dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "gitpython>=3.1.30",
]

[project.optional-dependencies]
onnx = [
    "optimum[onnxruntime]>=1.13.0",
    "transformers>=4.30.0",
]
gemini = [
    "google-generativeai>=0.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "tox>=4.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "tox>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
all = [
    "optimum[onnxruntime]>=1.13.0",
    "transformers>=4.30.0",
    "google-generativeai>=0.3.0",
]

[project.scripts]
patchpatrol = "patchpatrol.cli:main"

[project.urls]
Homepage = "https://github.com/patchpatrol/patchpatrol"
Repository = "https://github.com/patchpatrol/patchpatrol"
Issues = "https://github.com/patchpatrol/patchpatrol/issues"
Documentation = "https://github.com/patchpatrol/patchpatrol/blob/main/README.md"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["patchpatrol*"]

[tool.setuptools.package-data]
patchpatrol = ["py.typed"]

# Tool configurations for development

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "optimum.*",
    "transformers.*",
    "google.generativeai.*",
    "google.ai.*",
    "google.*",
    "git.*",
    "click.*",
    "rich.*",
    "torch.*",
    "absl.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["patchpatrol"]
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = [
    "B101",  # assert_used - legitimate use for type checking
    "B110",  # try_except_pass - legitimate for optional metadata
    "B310",  # urllib_urlopen - legitimate for model downloads
    "B404",  # subprocess_import - legitimate for git operations
    "B601",  # paramiko_calls - not applicable
    "B602",  # subprocess_popen_with_shell_equals_true - needed for Windows
    "B603",  # subprocess_without_shell_equals_false - handled contextually
    "B607",  # start_process_with_partial_path - legitimate for git/wget/curl
    "B615",  # huggingface_unsafe_download - controlled download behavior
]
