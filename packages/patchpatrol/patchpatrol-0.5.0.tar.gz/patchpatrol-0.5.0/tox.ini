[tox]
envlist = py310,py311,py312,py313,lint,type-check,coverage
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
# Base configuration for all test environments
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-xdist>=3.0.0
# Install with test dependencies
extras =
    all
    test
# Run tests with coverage
commands =
    pytest tests/unit -v --cov=patchpatrol --cov-report=xml --cov-report=term-missing {posargs}

[testenv:integration]
# Integration tests (may require additional setup)
deps =
    {[testenv]deps}
    git
commands =
    pytest tests/integration -v {posargs}

[testenv:lint]
# Linting with ruff and black
skip_install = true
deps =
    ruff>=0.1.0
    black>=23.0.0
    isort>=5.12.0
commands =
    ruff check patchpatrol tests
    black --check patchpatrol tests
    isort --check-only patchpatrol tests

[testenv:format]
# Auto-format code
skip_install = true
deps =
    {[testenv:lint]deps}
commands =
    black patchpatrol tests
    isort patchpatrol tests
    ruff check --fix patchpatrol tests

[testenv:type-check]
# Type checking with mypy
deps =
    mypy>=1.0.0
    types-requests
    types-setuptools
extras =
    # Install core dependencies for proper type checking
commands =
    mypy patchpatrol --disable-error-code=unused-ignore

[testenv:coverage]
# Generate and report coverage
deps =
    {[testenv]deps}
    coverage[toml]>=7.0.0
commands =
    coverage run -m pytest tests/unit
    coverage report -m
    coverage html
    coverage xml

[testenv:docs]
# Documentation building (if we add sphinx later)
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme
    myst-parser
commands =
    sphinx-build -b html docs docs/_build/html

[testenv:security]
# Security scanning with bandit
skip_install = true
deps =
    bandit[toml]>=1.7.0
commands =
    bandit -r patchpatrol -f json -o bandit-report.json --skip B101,B110,B310,B404,B601,B602,B603,B607,B615

[testenv:py310-minimal]
# Test with minimal dependencies on Python 3.10
deps =
    pytest>=7.0.0
# No extras, only core dependencies
commands =
    pytest tests/unit/test_parsing.py tests/unit/test_git_utils.py -v

[testenv:py311-onnx]
# Test ONNX backend specifically
deps =
    {[testenv]deps}
extras =
    onnx
    test
commands =
    pytest tests/unit/test_backends.py -v -k "onnx"

[testenv:py311-gemini]
# Test Gemini backend specifically
deps =
    {[testenv]deps}
extras =
    gemini
    test
commands =
    pytest tests/unit/test_backends.py -v -k "gemini"

[testenv:pre-commit]
# Run pre-commit hooks
deps =
    pre-commit>=3.0.0
commands =
    pre-commit run --all-files

[testenv:benchmark]
# Performance benchmarks
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0.0
commands =
    pytest tests/benchmark -v --benchmark-only

[testenv:clean]
# Clean up build artifacts
deps =
skip_install = true
commands =
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.pyc')]"
    python -c "import pathlib; [p.rmdir() for p in pathlib.Path('.').rglob('__pycache__') if p.is_dir()]"
