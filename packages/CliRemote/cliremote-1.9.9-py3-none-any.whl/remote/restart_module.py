import os
import logging
import asyncio
from typing import List
from .client_manager import stop_all_clients

# ============================================================
# ⚙️ تنظیم لاگ
# ============================================================
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# root logger هم اگر استفاده می‌کنید:
root_logger = logging.getLogger()

# ============================================================
# 📁 مسیرهای اصلی (نسبت به همین ماژول)
# ============================================================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOGS_FOLDER = os.path.join(BASE_DIR, "logs")

# لیست دقیق فایل‌هایی که باید فقط خالی شوند (حذف نشوند)
TARGET_LOG_FILES: List[str] = [
    "spam_log.txt",
    "client_debug_log.txt",
    "admins_log.txt",
    "analytics_log.txt",
    "sqlite_health.log",   # توجه: این یکی پسوند .log دارد
]

# ============================================================
# 🧰 ابزارک‌های کمکی
# ============================================================
def _all_file_handlers() -> List[logging.Handler]:
    """تمام FileHandler های متصل به این لاگر و روت‌لاگر را برمی‌گرداند."""
    handlers = []
    for lg in {logger, root_logger}:
        for h in getattr(lg, "handlers", []):
            # فقط هندلرهایی که فایل دارند
            if isinstance(h, logging.FileHandler):
                handlers.append(h)
    return handlers

def _flush_file_handlers():
    """پیش از دست‌کاری فایل‌ها، بافر لاگ‌ها را خالی می‌کند."""
    for h in _all_file_handlers():
        try:
            h.flush()
        except Exception:
            pass

# ============================================================
# 🧹 تابع پاک‌سازی لاگ‌ها (خالی‌کردن بدون حذف)
# ============================================================
async def clear_logs() -> int:
    """
    محتویات فایل‌های مشخص‌شده در TARGET_LOG_FILES را به اندازه صفر truncate می‌کند.
    اگر فایل وجود نداشت، یک فایل خالی می‌سازد.
    خروجی: تعداد فایل‌هایی که واقعا خالی شدند/ساخته شدند.
    """
    os.makedirs(LOGS_FOLDER, exist_ok=True)

    _flush_file_handlers()

    cleared = 0
    for name in TARGET_LOG_FILES:
        path = os.path.join(LOGS_FOLDER, name)
        try:
            # 'w' فایل را ایجاد/خالی می‌کند بدون حذف فیزیکی فایل
            with open(path, "w", encoding="utf-8") as f:
                f.truncate(0)
            cleared += 1
            logger.info(f"🧹 Log cleared → {name}")
        except Exception as e:
            logger.error(f"⚠️ Error clearing log {name}: {e}")

    logger.info(f"✅ {cleared} log file(s) cleared.")
    return cleared

# ============================================================
# 🛠️ ریست تنظیمات
# ============================================================
# async def reset_config() -> bool:
#     """
#     بازنویسی فایل config.py کنار همین ماژول با مقادیر پیش‌فرض.
#     نکته: نام متغیر را با ایمپورت هم‌نام نکنید تا shadow نشود.
#     """
#     try:
#         default_config_py = '''# AUTO-GENERATED BY restart module
# # -*- coding: utf-8 -*-

# spam_config = {
#     "spamTarget": "",
#     "TimeSleep": 5.0,
#     "caption": "",
#     "run": False,
#     "useridMen": 1,
#     "textMen": "",
#     "is_menshen": False,
#     "BATCH_SIZE": 1,
# }
# '''
#         config_path = os.path.join(BASE_DIR, "config.py")
#         with open(config_path, "w", encoding="utf-8") as f:
#             f.write(default_config_py)
#         logger.info("⚙️ config.py has been reset to defaults.")
#         return True
#     except Exception as e:
#         logger.error(f"⚠️ Error resetting config.py: {e}")
#         return False

# ============================================================
# 🔄 ریست کامل سیستم
# ============================================================
async def restart_all() -> None:
    """
    توقف تمام کلاینت‌ها + خالی کردن لاگ‌ها + ریست تنظیمات
    """
    logger.info("🚀 Starting full system restart...")

    # # توقف کلاینت‌ها
    # try:
    #     await stop_all_clients()
    #     logger.info("🧩 All clients stopped successfully.")
    # except Exception as e:
    #     logger.warning(f"⚠️ stop_all_clients error: {e}")

    # پاکسازی لاگ‌ها
    try:
        cleared = await clear_logs()
        logger.info(f"🧹 Cleared {cleared} log files.")
    except Exception as e:
        logger.warning(f"⚠️ clear_logs error: {e}")

    # # بازنشانی تنظیمات
    # try:
    #     success = await reset_config()
    #     if success:
    #         logger.info("⚙️ Config reset completed.")
    #     else:
    #         logger.warning("⚠️ Config reset failed.")
    # except Exception as e:
        # logger.warning(f"⚠️ reset_config error: {e}")

    logger.info("✅ System restart completed successfully.")
