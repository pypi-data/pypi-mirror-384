[project]
name = "pdf-file-renamer"
version = "0.6.3"
description = "Intelligent PDF renaming using LLMs with DOI-based naming and interactive workflow"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Nostos Labs", email = "info@nostoslabs.com"}
]
keywords = [
    "pdf",
    "rename",
    "llm",
    "ai",
    "document-management",
    "academic-papers",
    "doi",
    "automation",
    "file-organization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Scientific/Engineering",
    "Topic :: Text Processing :: General",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.10.6",
    "pydantic-ai>=1.0.17",
    "pydantic-settings>=2.7.1",
    "pymupdf>=1.26.5",
    "docling-parse>=2.0.0",
    "docling-core>=2.0.0",
    "python-dotenv>=1.1.1",
    "rich>=14.2.0",
    "typer>=0.19.2",
    "tenacity>=9.0.0",
    "pdf2doi>=1.7",
]

[project.urls]
Homepage = "https://github.com/nostoslabs/pdf-renamer"
Repository = "https://github.com/nostoslabs/pdf-renamer"
Issues = "https://github.com/nostoslabs/pdf-renamer/issues"
Changelog = "https://github.com/nostoslabs/pdf-renamer/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.2",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.1",
    "mypy>=1.14.1",
]

[project.scripts]
pdf-file-renamer = "pdf_file_renamer.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pdf_file_renamer"]

[tool.uv]
package = true
dev-dependencies = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.2",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.1",
    "mypy>=1.14.1",
    "twine>=6.0.1",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "RUF",    # ruff-specific
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults (needed for typer)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py are often intentional
"tests/**" = ["S101"]     # Allow assert in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "pymupdf.*",
    "docling_parse.*",
    "docling_core.*",
    "pydantic_ai.*",
    "pdf2doi.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pdf_file_renamer",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/pdf_file_renamer"]
omit = [
    "tests/*",
    "**/__pycache__/*",
    "**/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]
