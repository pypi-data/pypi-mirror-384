"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_jupyterlab_codemirror-extension_lib_index_js"],{

/***/ "../node_modules/@jupyterlab/codemirror-extension/lib/commands.js":
/*!************************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror-extension/lib/commands.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commandsPlugin: () => (/* binding */ commandsPlugin)\n/* harmony export */ });\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/commands */ \"webpack/sharing/consume/default/@codemirror/commands/@codemirror/commands\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _codemirror_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/search */ \"webpack/sharing/consume/default/@codemirror/search/@codemirror/search\");\n/* harmony import */ var _codemirror_search__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_codemirror_search__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_2__);\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\n\n\n/**\n * Identifiers of commands.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.deleteLine = 'codemirror:delete-line';\n    CommandIDs.toggleBlockComment = 'codemirror:toggle-block-comment';\n    CommandIDs.toggleComment = 'codemirror:toggle-comment';\n    CommandIDs.selectNextOccurrence = 'codemirror:select-next-occurrence';\n    CommandIDs.toggleTabFocusMode = 'codemirror:toggle-tab-focus-mode';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Selector for CodeMirror editor with `cmView` attribute.\n */\nconst CODE_MIRROR_SELECTOR = '.cm-content';\n/**\n * The editor commands.\n */\nconst commandsPlugin = {\n    id: '@jupyterlab/codemirror-extension:commands',\n    description: 'Registers commands acting on selected/active CodeMirror editor.',\n    autoStart: true,\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_2__.ITranslator],\n    activate: (app, translator) => {\n        translator = translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_2__.nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const isCodeMirror = (node) => node.classList.contains(CODE_MIRROR_SELECTOR);\n        const findEditorView = () => {\n            var _a, _b;\n            const node = (_a = app.contextMenuHitTest(isCodeMirror)) !== null && _a !== void 0 ? _a : (_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest(CODE_MIRROR_SELECTOR);\n            if (!node) {\n                return;\n            }\n            if (!('cmView' in node)) {\n                return;\n            }\n            return node.cmView.view;\n        };\n        const isEnabled = () => {\n            return !!findEditorView();\n        };\n        app.commands.addCommand(CommandIDs.deleteLine, {\n            label: trans.__('Delete the current line'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteLine)(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.toggleBlockComment, {\n            label: trans.__('Toggle Block Comment'),\n            caption: trans.__('Toggles block comments in languages which support it (e.g. C, JavaScript)'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleBlockComment)(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.toggleComment, {\n            label: trans.__('Toggle Comment'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleComment)(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.toggleTabFocusMode, {\n            label: trans.__('Toggle Tab Focus Mode'),\n            caption: trans.__('Toggles behavior of Tab key between inserting indentation and moving to next focusable element'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleTabFocusMode)(view);\n            },\n            isEnabled\n        });\n        app.commands.addCommand(CommandIDs.selectNextOccurrence, {\n            label: trans.__('Select Next Occurrence'),\n            execute: () => {\n                const view = findEditorView();\n                if (!view) {\n                    return;\n                }\n                (0,_codemirror_search__WEBPACK_IMPORTED_MODULE_1__.selectNextOccurrence)(view);\n            },\n            isEnabled\n        });\n    }\n};\n//# sourceMappingURL=commands.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/commands.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror-extension/lib/index.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror-extension/lib/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   lineColItem: () => (/* binding */ lineColItem)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/application */ \"webpack/sharing/consume/default/@jupyterlab/application/@jupyterlab/application\");\n/* harmony import */ var _jupyterlab_application__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/codeeditor */ \"webpack/sharing/consume/default/@jupyterlab/codeeditor/@jupyterlab/codeeditor\");\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/statusbar */ \"webpack/sharing/consume/default/@jupyterlab/statusbar/@jupyterlab/statusbar\");\n/* harmony import */ var _jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands */ \"../node_modules/@jupyterlab/codemirror-extension/lib/commands.js\");\n/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services */ \"../node_modules/@jupyterlab/codemirror-extension/lib/services.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror-extension\n */\n\n\n\n\n\n\n/**\n * A plugin providing a line/column status item to the application.\n */\nconst lineColItem = {\n    id: '@jupyterlab/codemirror-extension:line-col-status',\n    description: 'Provides the code editor cursor position model.',\n    autoStart: true,\n    requires: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.ITranslator],\n    optional: [_jupyterlab_application__WEBPACK_IMPORTED_MODULE_0__.ILabShell, _jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__.IStatusBar],\n    provides: _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__.IPositionModel,\n    activate: (app, translator, labShell, statusBar) => {\n        const item = new _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__.LineCol(translator);\n        const providers = new Set();\n        if (statusBar) {\n            // Add the status item to the status bar.\n            statusBar.registerStatusItem(lineColItem.id, {\n                priority: 1,\n                item,\n                align: 'right',\n                rank: 2,\n                isActive: () => !!item.model.editor\n            });\n        }\n        const addEditorProvider = (provider) => {\n            providers.add(provider);\n            if (app.shell.currentWidget) {\n                updateEditor(app.shell, {\n                    newValue: app.shell.currentWidget,\n                    oldValue: null\n                });\n            }\n        };\n        const update = () => {\n            updateEditor(app.shell, {\n                oldValue: app.shell.currentWidget,\n                newValue: app.shell.currentWidget\n            });\n        };\n        function updateEditor(shell, changes) {\n            Promise.all([...providers].map(provider => provider(changes.newValue)))\n                .then(editors => {\n                var _a;\n                item.model.editor =\n                    (_a = editors.filter(editor => editor !== null)[0]) !== null && _a !== void 0 ? _a : null;\n            })\n                .catch(reason => {\n                console.error('Get editors', reason);\n            });\n        }\n        if (labShell) {\n            labShell.currentChanged.connect(updateEditor);\n        }\n        return { addEditorProvider, update };\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    _commands__WEBPACK_IMPORTED_MODULE_4__.commandsPlugin,\n    _services__WEBPACK_IMPORTED_MODULE_5__.languagePlugin,\n    _services__WEBPACK_IMPORTED_MODULE_5__.themePlugin,\n    _services__WEBPACK_IMPORTED_MODULE_5__.bindingPlugin,\n    _services__WEBPACK_IMPORTED_MODULE_5__.extensionPlugin,\n    _services__WEBPACK_IMPORTED_MODULE_5__.servicesPlugin,\n    lineColItem\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/index.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror-extension/lib/services.js":
/*!************************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror-extension/lib/services.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bindingPlugin: () => (/* binding */ bindingPlugin),\n/* harmony export */   extensionPlugin: () => (/* binding */ extensionPlugin),\n/* harmony export */   languagePlugin: () => (/* binding */ languagePlugin),\n/* harmony export */   servicesPlugin: () => (/* binding */ servicesPlugin),\n/* harmony export */   themePlugin: () => (/* binding */ themePlugin)\n/* harmony export */ });\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/language */ \"webpack/sharing/consume/default/@codemirror/language/@codemirror/language\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_codemirror_language__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/codeeditor */ \"webpack/sharing/consume/default/@jupyterlab/codeeditor/@jupyterlab/codeeditor\");\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/codemirror */ \"webpack/sharing/consume/default/@jupyterlab/codemirror/@jupyterlab/codemirror\");\n/* harmony import */ var _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/settingregistry */ \"webpack/sharing/consume/default/@jupyterlab/settingregistry/@jupyterlab/settingregistry\");\n/* harmony import */ var _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @jupyterlab/ui-components */ \"webpack/sharing/consume/default/@jupyterlab/ui-components/@jupyterlab/ui-components\");\n/* harmony import */ var _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lumino/coreutils */ \"webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _rjsf_validator_ajv8__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @rjsf/validator-ajv8 */ \"webpack/sharing/consume/default/@rjsf/validator-ajv8/@rjsf/validator-ajv8\");\n/* harmony import */ var _rjsf_validator_ajv8__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_rjsf_validator_ajv8__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\n\n\n\n\n\n\n\n\n/**\n * CodeMirror settings plugin ID\n */\nconst SETTINGS_ID = '@jupyterlab/codemirror-extension:plugin';\n/**\n * CodeMirror language registry provider.\n */\nconst languagePlugin = {\n    id: '@jupyterlab/codemirror-extension:languages',\n    description: 'Provides the CodeMirror languages registry.',\n    provides: _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorLanguageRegistry,\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.ITranslator],\n    activate: (app, translator) => {\n        const languages = new _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorLanguageRegistry();\n        // Register default languages\n        for (const language of _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorLanguageRegistry.getDefaultLanguages(translator)) {\n            languages.addLanguage(language);\n        }\n        // Add Jupyter Markdown flavor here to support\n        // code block highlighting.\n        languages.addLanguage({\n            name: 'ipythongfm',\n            mime: 'text/x-ipythongfm',\n            load: async () => {\n                const [m, py, tex] = await Promise.all([\n                    __webpack_require__.e(/*! import() */ \"webpack_sharing_consume_default_codemirror_lang-markdown_codemirror_lang-markdown\").then(__webpack_require__.t.bind(__webpack_require__, /*! @codemirror/lang-markdown */ \"webpack/sharing/consume/default/@codemirror/lang-markdown/@codemirror/lang-markdown\", 23)),\n                    Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_codemirror_state_dist_index_js\"), __webpack_require__.e(\"vendors-node_modules_lezer_common_dist_index_js\"), __webpack_require__.e(\"vendors-node_modules_lezer_highlight_dist_index_js\"), __webpack_require__.e(\"vendors-node_modules_codemirror_autocomplete_dist_index_js-node_modules_lezer_lr_dist_index_js\"), __webpack_require__.e(\"vendors-node_modules_codemirror_lang-python_dist_index_js\"), __webpack_require__.e(\"webpack_sharing_consume_default_codemirror_view_codemirror_view\")]).then(__webpack_require__.bind(__webpack_require__, /*! @codemirror/lang-python */ \"../node_modules/@codemirror/lang-python/dist/index.js\")),\n                    __webpack_require__.e(/*! import() */ \"node_modules_codemirror_legacy-modes_mode_stex_js\").then(__webpack_require__.bind(__webpack_require__, /*! @codemirror/legacy-modes/mode/stex */ \"../node_modules/@codemirror/legacy-modes/mode/stex.js\"))\n                ]);\n                const mdlang = m.markdown({\n                    base: m.markdownLanguage,\n                    codeLanguages: (info) => languages.findBest(info),\n                    extensions: [\n                        (0,_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.parseMathIPython)(_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.StreamLanguage.define(tex.stexMath).parser)\n                    ]\n                });\n                return new _codemirror_language__WEBPACK_IMPORTED_MODULE_0__.LanguageSupport(mdlang.language, [\n                    mdlang.support,\n                    (0,_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.pythonBuiltin)(py.pythonLanguage)\n                ]);\n            }\n        });\n        return languages;\n    }\n};\n/**\n * CodeMirror theme registry provider.\n */\nconst themePlugin = {\n    id: '@jupyterlab/codemirror-extension:themes',\n    description: 'Provides the CodeMirror theme registry',\n    provides: _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorThemeRegistry,\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.ITranslator],\n    activate: (app, translator) => {\n        const themes = new _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorThemeRegistry();\n        // Register default themes\n        for (const theme of _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorThemeRegistry.getDefaultThemes(translator)) {\n            themes.addTheme(theme);\n        }\n        return themes;\n    }\n};\n/**\n * CodeMirror editor extensions registry provider.\n */\nconst extensionPlugin = {\n    id: '@jupyterlab/codemirror-extension:extensions',\n    description: 'Provides the CodeMirror extension factory registry.',\n    provides: _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorExtensionRegistry,\n    requires: [_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorThemeRegistry],\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.ITranslator, _jupyterlab_settingregistry__WEBPACK_IMPORTED_MODULE_3__.ISettingRegistry, _jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_5__.IFormRendererRegistry],\n    activate: (app, themes, translator, settingRegistry, formRegistry) => {\n        const registry = new _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorExtensionRegistry();\n        // Register default extensions\n        for (const extensionFactory of _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorExtensionRegistry.getDefaultExtensions({\n            themes,\n            translator\n        })) {\n            registry.addExtension(extensionFactory);\n        }\n        if (settingRegistry) {\n            const updateSettings = (settings) => {\n                var _a;\n                registry.baseConfiguration =\n                    (_a = settings.get('defaultConfig').composite) !== null && _a !== void 0 ? _a : {};\n            };\n            void Promise.all([\n                settingRegistry.load(SETTINGS_ID),\n                app.restored\n            ]).then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(updateSettings);\n            });\n            formRegistry === null || formRegistry === void 0 ? void 0 : formRegistry.addRenderer(`${SETTINGS_ID}.defaultConfig`, {\n                fieldRenderer: (props) => {\n                    let defaultFormData;\n                    const properties = react__WEBPACK_IMPORTED_MODULE_8___default().useMemo(() => registry.settingsSchema, []);\n                    if (props.name in props.formContext.defaultFormData) {\n                        defaultFormData = props.formContext.defaultFormData[props.name];\n                    }\n                    else {\n                        defaultFormData = {};\n                    }\n                    // Only provide customizable options\n                    for (const [key, value] of Object.entries(registry.defaultConfiguration)) {\n                        if (typeof properties[key] !== 'undefined' &&\n                            !(key in defaultFormData)) {\n                            defaultFormData[key] = value;\n                        }\n                    }\n                    return (react__WEBPACK_IMPORTED_MODULE_8___default().createElement(\"div\", { className: \"jp-FormGroup-contentNormal\" },\n                        react__WEBPACK_IMPORTED_MODULE_8___default().createElement(\"h3\", { className: \"jp-FormGroup-fieldLabel jp-FormGroup-contentItem\" }, props.schema.title),\n                        props.schema.description && (react__WEBPACK_IMPORTED_MODULE_8___default().createElement(\"div\", { className: \"jp-FormGroup-description\" }, props.schema.description)),\n                        react__WEBPACK_IMPORTED_MODULE_8___default().createElement(_jupyterlab_ui_components__WEBPACK_IMPORTED_MODULE_5__.FormComponent, { schema: {\n                                title: props.schema.title,\n                                description: props.schema.description,\n                                type: 'object',\n                                properties,\n                                additionalProperties: false\n                            }, validator: (_rjsf_validator_ajv8__WEBPACK_IMPORTED_MODULE_7___default()), formData: { ...defaultFormData, ...props.formData }, formContext: { defaultFormData }, liveValidate: true, onChange: e => {\n                                var _a;\n                                // Only save non-default values\n                                const nonDefault = {};\n                                for (const [property, value] of Object.entries((_a = e.formData) !== null && _a !== void 0 ? _a : {})) {\n                                    const default_ = defaultFormData[property];\n                                    if (default_ === undefined ||\n                                        !_lumino_coreutils__WEBPACK_IMPORTED_MODULE_6__.JSONExt.deepEqual(value, default_)) {\n                                        nonDefault[property] = value;\n                                    }\n                                }\n                                props.onChange(nonDefault);\n                            }, tagName: \"div\", translator: translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.nullTranslator })));\n                }\n            });\n        }\n        return registry;\n    }\n};\n/**\n * CodeMirror shared model binding provider.\n */\nconst bindingPlugin = {\n    id: '@jupyterlab/codemirror-extension:binding',\n    description: 'Register the CodeMirror extension factory binding the editor and the shared model.',\n    autoStart: true,\n    requires: [_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorExtensionRegistry],\n    activate: (app, extensions) => {\n        extensions.addExtension({\n            name: 'shared-model-binding',\n            factory: options => {\n                var _a;\n                const sharedModel = options.model.sharedModel;\n                return _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.EditorExtensionRegistry.createImmutableExtension((0,_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.ybinding)({\n                    ytext: sharedModel.ysource,\n                    undoManager: (_a = sharedModel.undoManager) !== null && _a !== void 0 ? _a : undefined\n                }));\n            }\n        });\n    }\n};\n/**\n * The editor services.\n */\nconst servicesPlugin = {\n    id: '@jupyterlab/codemirror-extension:services',\n    description: 'Provides the service to instantiate CodeMirror editors.',\n    provides: _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__.IEditorServices,\n    requires: [_jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorLanguageRegistry, _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.IEditorExtensionRegistry],\n    optional: [_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.ITranslator],\n    activate: (app, languages, extensions, translator) => {\n        const factory = new _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.CodeMirrorEditorFactory({\n            extensions,\n            languages,\n            translator: translator !== null && translator !== void 0 ? translator : _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_4__.nullTranslator\n        });\n        return {\n            factoryService: factory,\n            mimeTypeService: new _jupyterlab_codemirror__WEBPACK_IMPORTED_MODULE_2__.CodeMirrorMimeTypeService(languages)\n        };\n    }\n};\n//# sourceMappingURL=services.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror-extension/lib/services.js?");

/***/ })

}]);