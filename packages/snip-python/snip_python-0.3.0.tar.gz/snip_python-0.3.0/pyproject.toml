[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snip-python"
version = "0.3.0"
authors = [
    { name = "Sebastian B. Mohr", email = "sebastianbernd.mohr@uni-goettingen.de" },
]
description = "Python package to interface with Snip Lab Notebook "
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    # Maturety of the project
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    # Specify the Python versions we support.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    # Specify the license
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
dependencies = [
    "typer>=0.19.1",
    "keyring>=25.3.0",
    "requests>=2.32.3",
    "jsonschema>=4.23.0",
    "pillow>=10.4.0",
    "nest_asyncio>=1.6.0",
    "numpy>=2.1.2",
]

[project.urls]
Homepage = "https://snip.roentgen.physik.uni-goettingen.de"
Documentation = "https://snip-python.readthedocs.io/"
Repository = "https://gitlab.gwdg.de/irp/snip"

[project.scripts]
snip = "snip.__main__:app"

[project.optional-dependencies]
dev = ["pytest", "pytest-cov>=5.0.0", "requests-mock>=1.12.1", "ruff",]
typed = ["mypy", "types-requests", "types-jsonschema"]
full = ["matplotlib>=3.9.2"]
docs = [
    "sphinx>=8.0.2",
    "furo>=2024.8.6",
    "sphinx-copybutton>=0.5.2",
    "sphinx-inline-tabs>=2023.4.21",
    "sphinxcontrib-typer[html]>=0.5.0",
    "myst-parser>=4.0.0",
    "myst-nb>=1.1.2",
]

[tool.hatch.build.targets.wheel]
packages = ["src/snip"]

[tool.ruff]
include = [
    "pyproject.toml",
    "src/**/*.py",
    "tests/**/*.py",
    "notebooks/**/*.ipynb",
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = ["D", "I", "S", "W"]
"**__main__.py" = ["D103"]

[tool.ruff.lint]
select = ["I", "D", "F"]
ignore = ["D104", "D100"]
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["snip"]


[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
addopts = "--cov=snip --cov-report term-missing"

[tool.coverage.report]
exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_decorators = true
allow_redefinition = true
exclude = "docs/.*"

[[tool.mypy.overrides]]
# Suppresses error messages about imports that cannot be resolved.
module = [
    "nest_asyncio",
    "IPython.*",
]
ignore_missing_imports = true
