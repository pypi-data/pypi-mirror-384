{
  "type_": "ParsedModule",
  "code": "(dogs\n .groupby('grooming')\n .agg('mean')\n)\n\n(dogs\n .groupby('grooming')\n .var()\n)\n\n# Note that this is an agg but we have to handle it at runtime, not parse time\n(dogs\n .groupby('grooming')\n ['weight']\n .var()\n)\n\n# should not be parsed into an AggCall\n(dogs\n .groupby('grooming')\n .transform(lambda x: x.max() - x.min())\n)\n",
  "location": {
    "start": {
      "line": 0,
      "ch": 0
    },
    "end": {
      "line": 22,
      "ch": 0
    }
  },
  "statements": [
    {
      "type_": "ChainStatement",
      "code": "(dogs\n .groupby('grooming')\n .agg('mean')\n)",
      "location": {
        "start": {
          "line": 0,
          "ch": 0
        },
        "end": {
          "line": 3,
          "ch": 1
        }
      },
      "chain": [
        {
          "type_": "StartOfChain",
          "code": "dogs",
          "location": {
            "start": {
              "line": 0,
              "ch": 1
            },
            "end": {
              "line": 0,
              "ch": 5
            }
          }
        },
        {
          "type_": "GroupByCall",
          "code": "dogs\n .groupby('grooming')",
          "location": {
            "start": {
              "line": 1,
              "ch": 1
            },
            "end": {
              "line": 1,
              "ch": 21
            }
          },
          "axis": "index"
        },
        {
          "type_": "GroupByAggCall",
          "code": "(dogs\n .groupby('grooming')\n .agg('mean')\n)",
          "location": {
            "start": {
              "line": 2,
              "ch": 1
            },
            "end": {
              "line": 2,
              "ch": 13
            }
          }
        }
      ]
    },
    {
      "type_": "ChainStatement",
      "code": "(dogs\n .groupby('grooming')\n .var()\n)",
      "location": {
        "start": {
          "line": 5,
          "ch": 0
        },
        "end": {
          "line": 8,
          "ch": 1
        }
      },
      "chain": [
        {
          "type_": "StartOfChain",
          "code": "dogs",
          "location": {
            "start": {
              "line": 5,
              "ch": 1
            },
            "end": {
              "line": 5,
              "ch": 5
            }
          }
        },
        {
          "type_": "GroupByCall",
          "code": "dogs\n .groupby('grooming')",
          "location": {
            "start": {
              "line": 6,
              "ch": 1
            },
            "end": {
              "line": 6,
              "ch": 21
            }
          },
          "axis": "index"
        },
        {
          "type_": "GroupByAggCall",
          "code": "(dogs\n .groupby('grooming')\n .var()\n)",
          "location": {
            "start": {
              "line": 7,
              "ch": 1
            },
            "end": {
              "line": 7,
              "ch": 7
            }
          }
        }
      ]
    },
    {
      "type_": "ChainStatement",
      "code": "(dogs\n .groupby('grooming')\n ['weight']\n .var()\n)",
      "location": {
        "start": {
          "line": 11,
          "ch": 0
        },
        "end": {
          "line": 15,
          "ch": 1
        }
      },
      "chain": [
        {
          "type_": "StartOfChain",
          "code": "dogs",
          "location": {
            "start": {
              "line": 11,
              "ch": 1
            },
            "end": {
              "line": 11,
              "ch": 5
            }
          }
        },
        {
          "type_": "GroupByCall",
          "code": "dogs\n .groupby('grooming')",
          "location": {
            "start": {
              "line": 12,
              "ch": 1
            },
            "end": {
              "line": 12,
              "ch": 21
            }
          },
          "axis": "index"
        },
        {
          "type_": "Subscript",
          "code": "dogs\n .groupby('grooming')\n ['weight']",
          "location": {
            "start": {
              "line": 13,
              "ch": 1
            },
            "end": {
              "line": 13,
              "ch": 11
            }
          },
          "slicer": null,
          "slice1": {
            "type_": "SubsEval",
            "code": "'weight'",
            "location": {
              "start": {
                "line": 13,
                "ch": 2
              },
              "end": {
                "line": 13,
                "ch": 10
              }
            },
            "expr": "'weight'"
          },
          "slice2": null
        },
        {
          "type_": "PassThroughCall",
          "code": "(dogs\n .groupby('grooming')\n ['weight']\n .var()\n)",
          "location": {
            "start": {
              "line": 14,
              "ch": 1
            },
            "end": {
              "line": 14,
              "ch": 7
            }
          },
          "func": "var"
        }
      ]
    },
    {
      "type_": "ChainStatement",
      "code": "(dogs\n .groupby('grooming')\n .transform(lambda x: x.max() - x.min())\n)",
      "location": {
        "start": {
          "line": 18,
          "ch": 0
        },
        "end": {
          "line": 21,
          "ch": 1
        }
      },
      "chain": [
        {
          "type_": "StartOfChain",
          "code": "dogs",
          "location": {
            "start": {
              "line": 18,
              "ch": 1
            },
            "end": {
              "line": 18,
              "ch": 5
            }
          }
        },
        {
          "type_": "GroupByCall",
          "code": "dogs\n .groupby('grooming')",
          "location": {
            "start": {
              "line": 19,
              "ch": 1
            },
            "end": {
              "line": 19,
              "ch": 21
            }
          },
          "axis": "index"
        },
        {
          "type_": "PassThroughCall",
          "code": "(dogs\n .groupby('grooming')\n .transform(lambda x: x.max() - x.min())\n)",
          "location": {
            "start": {
              "line": 20,
              "ch": 1
            },
            "end": {
              "line": 20,
              "ch": 40
            }
          },
          "func": "transform"
        }
      ]
    }
  ]
}