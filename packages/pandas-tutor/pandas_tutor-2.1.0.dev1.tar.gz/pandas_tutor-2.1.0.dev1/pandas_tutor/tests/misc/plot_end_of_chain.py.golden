{
  "code": "import pandas as pd\nimport io\n\ncsv = '''\nbreed,grooming,food_cost,kids,size\nLabrador Retriever,weekly,466.0,high,medium\nGerman Shepherd,weekly,466.0,medium,large\nBeagle,daily,324.0,high,small\nGolden Retriever,weekly,466.0,high,medium\nYorkshire Terrier,daily,324.0,low,small\nBulldog,weekly,466.0,medium,medium\nBoxer,weekly,466.0,high,medium\n'''\n\ndogs = pd.read_csv(io.StringIO(csv))\n\n(dogs\n .groupby('size')\n .mean()\n .plot(kind='bar')\n)\n",
  "explanation": [
    {
      "type": "GroupByCall",
      "code_step": "(dogs\n .groupby('size')\n .mean()\n .plot(kind='bar')\n)",
      "fragment": {
        "start": {
          "line": 1,
          "ch": 1
        },
        "end": {
          "line": 1,
          "ch": 17
        }
      },
      "mapping": [
        {
          "illustrate": "highlight",
          "select": "column",
          "anchor": "lhs",
          "label": "size"
        }
      ],
      "data_frame": {
        "lhs": {
          "type": "DataFrame",
          "col_names": [
            "breed",
            "grooming",
            "food_cost",
            "kids",
            "size"
          ],
          "row_labels": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "data": [
            [
              "Labrador Retriever",
              "weekly",
              466.0,
              "high",
              "medium"
            ],
            [
              "German Shepherd",
              "weekly",
              466.0,
              "medium",
              "large"
            ],
            [
              "Beagle",
              "daily",
              324.0,
              "high",
              "small"
            ],
            [
              "Golden Retriever",
              "weekly",
              466.0,
              "high",
              "medium"
            ],
            [
              "Yorkshire Terrier",
              "daily",
              324.0,
              "low",
              "small"
            ],
            [
              "Bulldog",
              "weekly",
              466.0,
              "medium",
              "medium"
            ],
            [
              "Boxer",
              "weekly",
              466.0,
              "high",
              "medium"
            ]
          ]
        },
        "rhs": {
          "type": "DataFrameGroupBy",
          "col_names": [
            "breed",
            "grooming",
            "food_cost",
            "kids",
            "size"
          ],
          "row_labels": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "data": [
            [
              "Labrador Retriever",
              "weekly",
              466.0,
              "high",
              "medium"
            ],
            [
              "German Shepherd",
              "weekly",
              466.0,
              "medium",
              "large"
            ],
            [
              "Beagle",
              "daily",
              324.0,
              "high",
              "small"
            ],
            [
              "Golden Retriever",
              "weekly",
              466.0,
              "high",
              "medium"
            ],
            [
              "Yorkshire Terrier",
              "daily",
              324.0,
              "low",
              "small"
            ],
            [
              "Bulldog",
              "weekly",
              466.0,
              "medium",
              "medium"
            ],
            [
              "Boxer",
              "weekly",
              466.0,
              "high",
              "medium"
            ]
          ],
          "group_data": {
            "col_names": [
              "size"
            ],
            "groups": [
              {
                "name": [
                  "large"
                ],
                "labels": [
                  1
                ]
              },
              {
                "name": [
                  "medium"
                ],
                "labels": [
                  0,
                  3,
                  5,
                  6
                ]
              },
              {
                "name": [
                  "small"
                ],
                "labels": [
                  2,
                  4
                ]
              }
            ]
          }
        }
      }
    },
    {
      "type": "AggCall",
      "code_step": "(dogs\n .groupby('size')\n .mean()\n .plot(kind='bar')\n)",
      "fragment": {
        "start": {
          "line": 2,
          "ch": 1
        },
        "end": {
          "line": 2,
          "ch": 8
        }
      },
      "mapping": [
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 1
          },
          "to": {
            "anchor": "rhs",
            "label": "large"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 0
          },
          "to": {
            "anchor": "rhs",
            "label": "medium"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 3
          },
          "to": {
            "anchor": "rhs",
            "label": "medium"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 5
          },
          "to": {
            "anchor": "rhs",
            "label": "medium"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 6
          },
          "to": {
            "anchor": "rhs",
            "label": "medium"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 2
          },
          "to": {
            "anchor": "rhs",
            "label": "small"
          }
        },
        {
          "illustrate": "outline",
          "select": "row",
          "from": {
            "anchor": "lhs",
            "label": 4
          },
          "to": {
            "anchor": "rhs",
            "label": "small"
          }
        }
      ],
      "data_frame": {
        "lhs": "prev_rhs",
        "rhs": {
          "type": "DataFrame",
          "col_names": [
            "food_cost"
          ],
          "row_labels": [
            "large",
            "medium",
            "small"
          ],
          "data": [
            [
              466.0
            ],
            [
              466.0
            ],
            [
              324.0
            ]
          ]
        }
      }
    },
    {
      "type": "PassThroughCall",
      "code_step": "(dogs\n .groupby('size')\n .mean()\n .plot(kind='bar')\n)",
      "fragment": {
        "start": {
          "line": 3,
          "ch": 1
        },
        "end": {
          "line": 3,
          "ch": 18
        }
      },
      "mapping": [],
      "data_frame": {
        "lhs": "prev_rhs",
        "rhs": {
          "type": "Image",
          "data": "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"
        }
      }
    }
  ]
}