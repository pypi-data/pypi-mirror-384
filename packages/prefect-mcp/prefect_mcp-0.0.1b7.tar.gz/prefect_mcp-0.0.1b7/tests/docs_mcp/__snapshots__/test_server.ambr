# serializer version: 1
# name: test_docs_mcp_server_has_search_tool
  Tool(name='search_prefect', title=None, description='Search the Prefect knowledgebase for documentation on concepts, usage, and best practices.', inputSchema={'properties': {'query': {'description': "a search query to find relevant document excerpts from Prefect's knowledgebase", 'type': 'string'}, 'top_k': {'anyOf': [{'maximum': 20, 'minimum': 1, 'type': 'integer'}, {'type': 'null'}], 'default': None, 'description': 'How many document excerpts to return.'}}, 'required': ['query'], 'type': 'object'}, outputSchema={'additionalProperties': True, 'type': 'object'}, icons=None, annotations=None, meta={'_fastmcp': {'tags': []}})
# ---
# name: test_search_prefect_empty_query
  CallToolResult(content=[TextContent(type='text', text="Error calling tool 'search_prefect': Query must not be empty.", annotations=None, meta=None)], structured_content=None, data=None, is_error=True)
# ---
# name: test_search_prefect_handles_validation_error
  CallToolResult(content=[TextContent(type='text', text='Input validation error: 999 is greater than the maximum of 20', annotations=None, meta=None)], structured_content=None, data=None, is_error=True)
# ---
# name: test_search_prefect_successful_query
  CallToolResult(content=[TextContent(type='text', text='{"query":"how to create a flow","namespace":"docs-v1","results":[{"snippet":"This is an excerpt from a document\\n        \\n\\n# Document metadata\\n        title=None link=\'https://docs-3.prefect.io/v3/concepts/flows\' source=\'url\' document_type=\'web page\'\\n        \\n        \\n        # Excerpt content: What is a flow?\\nFlows are defined as decorated Python functions. Above,explain_flows\\nis an instance of a flow.\\nFlows accept inputs, perform work, and potentially return a result.\\nGenerally, flows behave like Python functions, but they have some additional capabilities:\\n- Metadata about their execution, like each state the flow enters, is automatically tracked.\\n- Input arguments can be type validated as workflow parameters.\\n- Retries can be performed on failure, with configurable delay and retry limits.\\n- Timeouts can be enforced to prevent unintentional, long-running workflows.\\n- A flow can be deployed, which exposes an API for interacting with it remotely.\\nFlows do not need to call other Prefect tasks or flows, but they can.\\nRunning a flow\\nA flow run is a representation of a single invocation of a flow.The life of a flow run\\nEach flow run has its own state lifecycle that is tracked by the Prefect database. A normal flow run lifetime looks like this: A flow run’s lifecycle may be interrupted at any point, whether by:- manual or accidental cancellation or deletion of the flow run\\n- disappearance or malfunction of the flow run’s host infrastructure\\n- other unforeseen issues and circumstances (e.g. networking!)\\nDifferent ways to create a flow run\\nThe simplest way to create a flow run is to call a@flow\\ndecorated function (i.e. __call__\\n), just like a normal Python function.\\n- Using external schedulers (e.g\\n        ","id":"doc_7d77264e-20bc-4033-8108-4842a83fe821","score":0.43291277}]}', annotations=None, meta=None)], structured_content={'query': 'how to create a flow', 'namespace': 'docs-v1', 'results': [{'snippet': "This is an excerpt from a document\n        \n\n# Document metadata\n        title=None link='https://docs-3.prefect.io/v3/concepts/flows' source='url' document_type='web page'\n        \n        \n        # Excerpt content: What is a flow?\nFlows are defined as decorated Python functions. Above,explain_flows\nis an instance of a flow.\nFlows accept inputs, perform work, and potentially return a result.\nGenerally, flows behave like Python functions, but they have some additional capabilities:\n- Metadata about their execution, like each state the flow enters, is automatically tracked.\n- Input arguments can be type validated as workflow parameters.\n- Retries can be performed on failure, with configurable delay and retry limits.\n- Timeouts can be enforced to prevent unintentional, long-running workflows.\n- A flow can be deployed, which exposes an API for interacting with it remotely.\nFlows do not need to call other Prefect tasks or flows, but they can.\nRunning a flow\nA flow run is a representation of a single invocation of a flow.The life of a flow run\nEach flow run has its own state lifecycle that is tracked by the Prefect database. A normal flow run lifetime looks like this: A flow run’s lifecycle may be interrupted at any point, whether by:- manual or accidental cancellation or deletion of the flow run\n- disappearance or malfunction of the flow run’s host infrastructure\n- other unforeseen issues and circumstances (e.g. networking!)\nDifferent ways to create a flow run\nThe simplest way to create a flow run is to call a@flow\ndecorated function (i.e. __call__\n), just like a normal Python function.\n- Using external schedulers (e.g\n        ", 'id': 'doc_7d77264e-20bc-4033-8108-4842a83fe821', 'score': 0.43291277}]}, data={'query': 'how to create a flow', 'namespace': 'docs-v1', 'results': [{'snippet': "This is an excerpt from a document\n        \n\n# Document metadata\n        title=None link='https://docs-3.prefect.io/v3/concepts/flows' source='url' document_type='web page'\n        \n        \n        # Excerpt content: What is a flow?\nFlows are defined as decorated Python functions. Above,explain_flows\nis an instance of a flow.\nFlows accept inputs, perform work, and potentially return a result.\nGenerally, flows behave like Python functions, but they have some additional capabilities:\n- Metadata about their execution, like each state the flow enters, is automatically tracked.\n- Input arguments can be type validated as workflow parameters.\n- Retries can be performed on failure, with configurable delay and retry limits.\n- Timeouts can be enforced to prevent unintentional, long-running workflows.\n- A flow can be deployed, which exposes an API for interacting with it remotely.\nFlows do not need to call other Prefect tasks or flows, but they can.\nRunning a flow\nA flow run is a representation of a single invocation of a flow.The life of a flow run\nEach flow run has its own state lifecycle that is tracked by the Prefect database. A normal flow run lifetime looks like this: A flow run’s lifecycle may be interrupted at any point, whether by:- manual or accidental cancellation or deletion of the flow run\n- disappearance or malfunction of the flow run’s host infrastructure\n- other unforeseen issues and circumstances (e.g. networking!)\nDifferent ways to create a flow run\nThe simplest way to create a flow run is to call a@flow\ndecorated function (i.e. __call__\n), just like a normal Python function.\n- Using external schedulers (e.g\n        ", 'id': 'doc_7d77264e-20bc-4033-8108-4842a83fe821', 'score': 0.43291277}]}, is_error=False)
# ---
