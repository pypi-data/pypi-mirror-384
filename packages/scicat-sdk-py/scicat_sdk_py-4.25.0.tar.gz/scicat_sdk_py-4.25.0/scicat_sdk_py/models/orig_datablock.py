# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from scicat_sdk_py.models.data_file import DataFile
from typing import Optional, Set
from typing_extensions import Self

class OrigDatablock(BaseModel):
    """
    OrigDatablock
    """ # noqa: E501
    created_by: StrictStr = Field(description="Indicate the user who created this record. This property is added and maintained by the system.", alias="createdBy")
    updated_by: StrictStr = Field(description="Indicate the user who updated this record last. This property is added and maintained by the system.", alias="updatedBy")
    created_at: datetime = Field(description="Date and time when this record was created. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)", alias="createdAt")
    updated_at: datetime = Field(description="Date and time when this record was updated last. This field is managed by mongoose with through the timestamp settings. The field should be a string containing a date in ISO 8601 format (2024-02-27T12:26:57.313Z)", alias="updatedAt")
    owner_group: StrictStr = Field(description="Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151", alias="ownerGroup")
    access_groups: List[StrictStr] = Field(description="Optional additional groups which have read access to the data. Users which are members in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users.", alias="accessGroups")
    instrument_group: Optional[StrictStr] = Field(default=None, description="Optional additional groups which have read and write access to the data. Users which are members in one of the groups listed here are allowed to access this data.", alias="instrumentGroup")
    is_published: StrictBool = Field(description="Flag is true when data are made publicly available.", alias="isPublished")
    id: StrictStr = Field(alias="_id")
    dataset_id: StrictStr = Field(description="PID of the dataset to which the orig datablock belongs.", alias="datasetId")
    size: Union[StrictFloat, StrictInt] = Field(description="Total size in bytes of all files contained in the dataFileList.")
    chk_alg: Optional[StrictStr] = Field(default=None, description="Algorithm used for calculation of file checksums. Should be lowercase, e.g., sha2 or blake2b.", alias="chkAlg")
    data_file_list: List[DataFile] = Field(description="Embedded schema definitions for each file.", alias="dataFileList")
    __properties: ClassVar[List[str]] = ["createdBy", "updatedBy", "createdAt", "updatedAt", "ownerGroup", "accessGroups", "instrumentGroup", "isPublished", "_id", "datasetId", "size", "chkAlg", "dataFileList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrigDatablock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_file_list (list)
        _items = []
        if self.data_file_list:
            for _item_data_file_list in self.data_file_list:
                if _item_data_file_list:
                    _items.append(_item_data_file_list.to_dict())
            _dict['dataFileList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrigDatablock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBy": obj.get("createdBy"),
            "updatedBy": obj.get("updatedBy"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "ownerGroup": obj.get("ownerGroup"),
            "accessGroups": obj.get("accessGroups"),
            "instrumentGroup": obj.get("instrumentGroup"),
            "isPublished": obj.get("isPublished") if obj.get("isPublished") is not None else False,
            "_id": obj.get("_id"),
            "datasetId": obj.get("datasetId"),
            "size": obj.get("size"),
            "chkAlg": obj.get("chkAlg"),
            "dataFileList": [DataFile.from_dict(_item) for _item in obj["dataFileList"]] if obj.get("dataFileList") is not None else None
        })
        return _obj


