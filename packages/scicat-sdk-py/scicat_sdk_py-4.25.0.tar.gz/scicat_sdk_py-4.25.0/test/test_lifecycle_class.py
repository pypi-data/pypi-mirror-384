# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from scicat_sdk_py.models.lifecycle_class import LifecycleClass

class TestLifecycleClass(unittest.TestCase):
    """LifecycleClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LifecycleClass:
        """Test LifecycleClass
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LifecycleClass`
        """
        model = LifecycleClass()
        if include_optional:
            return LifecycleClass(
                archivable = True,
                retrievable = True,
                publishable = True,
                date_of_disk_purging = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                archive_retention_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                date_of_publishing = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                published_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_on_central_disk = True,
                archive_status_message = '',
                retrieve_status_message = '',
                archive_return_message = None,
                retrieve_return_message = None,
                exported_to = '',
                retrieve_integrity_check = True,
                storage_location = ''
            )
        else:
            return LifecycleClass(
        )
        """

    def testLifecycleClass(self):
        """Test LifecycleClass"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
