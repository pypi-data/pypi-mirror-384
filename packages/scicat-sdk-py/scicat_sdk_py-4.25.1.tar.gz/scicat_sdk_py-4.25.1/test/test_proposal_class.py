# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from scicat_sdk_py.models.proposal_class import ProposalClass

class TestProposalClass(unittest.TestCase):
    """ProposalClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProposalClass:
        """Test ProposalClass
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProposalClass`
        """
        model = ProposalClass()
        if include_optional:
            return ProposalClass(
                created_by = '',
                updated_by = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                owner_group = '',
                access_groups = [
                    ''
                    ],
                instrument_group = '',
                is_published = True,
                proposal_id = '',
                pi_email = '',
                pi_firstname = '',
                pi_lastname = '',
                email = '',
                firstname = '',
                lastname = '',
                title = '',
                abstract = '',
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                measurement_period_list = [
                    scicat_sdk_py.models.measurement_period_class.MeasurementPeriodClass(
                        _id = '', 
                        instrument = '', 
                        start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        comment = '', )
                    ],
                metadata = None,
                parent_proposal_id = '',
                type = 'Default Proposal',
                instrument_ids = [
                    ''
                    ],
                number_of_datasets = 1.337
            )
        else:
            return ProposalClass(
                created_by = '',
                updated_by = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                owner_group = '',
                access_groups = [
                    ''
                    ],
                is_published = True,
                proposal_id = '',
                email = '',
                title = '',
                parent_proposal_id = '',
                type = 'Default Proposal',
        )
        """

    def testProposalClass(self):
        """Test ProposalClass"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
