# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from scicat_sdk_py.models.sample_with_attachments_and_datasets import SampleWithAttachmentsAndDatasets

class TestSampleWithAttachmentsAndDatasets(unittest.TestCase):
    """SampleWithAttachmentsAndDatasets unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SampleWithAttachmentsAndDatasets:
        """Test SampleWithAttachmentsAndDatasets
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SampleWithAttachmentsAndDatasets`
        """
        model = SampleWithAttachmentsAndDatasets()
        if include_optional:
            return SampleWithAttachmentsAndDatasets(
                created_by = '',
                updated_by = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                owner_group = '',
                access_groups = [
                    ''
                    ],
                instrument_group = '',
                is_published = True,
                sample_id = '',
                owner = '',
                description = '',
                type = '',
                proposal_id = '',
                parent_sample_id = '',
                sample_characteristics = None,
                attachments = [
                    scicat_sdk_py.models.output_attachment_v3_dto.OutputAttachmentV3Dto(
                        owner_group = '', 
                        access_groups = [
                            ''
                            ], 
                        instrument_group = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        dataset_id = '', 
                        proposal_id = '', 
                        sample_id = '', 
                        thumbnail = '', 
                        caption = '', )
                    ],
                datasets = [
                    scicat_sdk_py.models.dataset_class.DatasetClass(
                        created_by = '', 
                        updated_by = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        owner_group = '', 
                        access_groups = [
                            ''
                            ], 
                        instrument_group = '', 
                        is_published = True, 
                        pid = '', 
                        owner = '', 
                        owner_email = '', 
                        orcid_of_owner = '', 
                        contact_email = '', 
                        source_folder = '', 
                        source_folder_host = '', 
                        size = 1.337, 
                        packed_size = 1.337, 
                        number_of_files = 1.337, 
                        number_of_files_archived = 1.337, 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        type = '', 
                        validation_status = '', 
                        keywords = [
                            ''
                            ], 
                        description = '', 
                        dataset_name = '', 
                        classification = '', 
                        license = '', 
                        version = '', 
                        datasetlifecycle = null, 
                        techniques = [
                            scicat_sdk_py.models.technique_class.TechniqueClass(
                                pid = '', 
                                name = '', )
                            ], 
                        relationships = [
                            scicat_sdk_py.models.relationship_class.RelationshipClass(
                                pid = '', 
                                relationship = '', )
                            ], 
                        shared_with = [
                            ''
                            ], 
                        scientific_metadata = scicat_sdk_py.models.scientific_metadata.scientificMetadata(), 
                        scientific_metadata_schema = '', 
                        scientific_metadata_valid = True, 
                        comment = '', 
                        data_quality_metrics = 1.337, 
                        principal_investigators = [
                            ''
                            ], 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creation_location = '', 
                        data_format = '', 
                        run_number = '', 
                        proposal_ids = [
                            ''
                            ], 
                        sample_ids = [
                            ''
                            ], 
                        instrument_ids = [
                            ''
                            ], 
                        input_datasets = [
                            ''
                            ], 
                        used_software = [
                            ''
                            ], 
                        job_parameters = scicat_sdk_py.models.job_parameters.jobParameters(), 
                        job_log_data = '', )
                    ]
            )
        else:
            return SampleWithAttachmentsAndDatasets(
                created_by = '',
                updated_by = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                owner_group = '',
                access_groups = [
                    ''
                    ],
                is_published = True,
                sample_id = '',
        )
        """

    def testSampleWithAttachmentsAndDatasets(self):
        """Test SampleWithAttachmentsAndDatasets"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
