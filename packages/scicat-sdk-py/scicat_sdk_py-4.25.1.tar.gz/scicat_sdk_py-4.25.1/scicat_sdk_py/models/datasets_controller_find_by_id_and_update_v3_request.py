# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from scicat_sdk_py.models.partial_update_dataset_dto import PartialUpdateDatasetDto
from scicat_sdk_py.models.partial_update_derived_dataset_obsolete_dto import PartialUpdateDerivedDatasetObsoleteDto
from scicat_sdk_py.models.partial_update_raw_dataset_obsolete_dto import PartialUpdateRawDatasetObsoleteDto
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

DATASETSCONTROLLERFINDBYIDANDUPDATEV3REQUEST_ANY_OF_SCHEMAS = ["PartialUpdateDatasetDto", "PartialUpdateDerivedDatasetObsoleteDto", "PartialUpdateRawDatasetObsoleteDto"]

class DatasetsControllerFindByIdAndUpdateV3Request(BaseModel):
    """
    DatasetsControllerFindByIdAndUpdateV3Request
    """

    # data type: PartialUpdateRawDatasetObsoleteDto
    anyof_schema_1_validator: Optional[PartialUpdateRawDatasetObsoleteDto] = None
    # data type: PartialUpdateDerivedDatasetObsoleteDto
    anyof_schema_2_validator: Optional[PartialUpdateDerivedDatasetObsoleteDto] = None
    # data type: PartialUpdateDatasetDto
    anyof_schema_3_validator: Optional[PartialUpdateDatasetDto] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "PartialUpdateDatasetDto", "PartialUpdateDerivedDatasetObsoleteDto", "PartialUpdateRawDatasetObsoleteDto" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = DatasetsControllerFindByIdAndUpdateV3Request.model_construct()
        error_messages = []
        # validate data type: PartialUpdateRawDatasetObsoleteDto
        if not isinstance(v, PartialUpdateRawDatasetObsoleteDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateRawDatasetObsoleteDto`")
        else:
            return v

        # validate data type: PartialUpdateDerivedDatasetObsoleteDto
        if not isinstance(v, PartialUpdateDerivedDatasetObsoleteDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateDerivedDatasetObsoleteDto`")
        else:
            return v

        # validate data type: PartialUpdateDatasetDto
        if not isinstance(v, PartialUpdateDatasetDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PartialUpdateDatasetDto`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in DatasetsControllerFindByIdAndUpdateV3Request with anyOf schemas: PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[PartialUpdateRawDatasetObsoleteDto] = None
        try:
            instance.actual_instance = PartialUpdateRawDatasetObsoleteDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[PartialUpdateDerivedDatasetObsoleteDto] = None
        try:
            instance.actual_instance = PartialUpdateDerivedDatasetObsoleteDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[PartialUpdateDatasetDto] = None
        try:
            instance.actual_instance = PartialUpdateDatasetDto.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DatasetsControllerFindByIdAndUpdateV3Request with anyOf schemas: PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PartialUpdateDatasetDto, PartialUpdateDerivedDatasetObsoleteDto, PartialUpdateRawDatasetObsoleteDto]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


