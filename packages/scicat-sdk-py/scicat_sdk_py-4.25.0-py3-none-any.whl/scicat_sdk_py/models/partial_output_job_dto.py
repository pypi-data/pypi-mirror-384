# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scicat_sdk_py.models.partial_output_dataset_dto import PartialOutputDatasetDto
from typing import Optional, Set
from typing_extensions import Self

class PartialOutputJobDto(BaseModel):
    """
    PartialOutputJobDto
    """ # noqa: E501
    datasets: List[PartialOutputDatasetDto] = Field(description="Populated when the job is joined with datasets. Contains the related datasets.")
    dataset_details: List[PartialOutputDatasetDto] = Field(description="Populated when the job is joined with datasets and their related entities (datablocks, origdatablocks, attachments). Contains datasets with nested details.", alias="datasetDetails")
    type: Optional[StrictStr] = Field(default=None, description="Valid job type as defined in configuration.")
    job_params: Optional[Dict[str, Any]] = Field(default=None, description="Job's parameters as defined by job template in configuration.", alias="jobParams")
    owner_user: Optional[StrictStr] = Field(default=None, description="User that this job belongs to. Applicable only if requesting user has adequate permissions level.", alias="ownerUser")
    owner_group: Optional[StrictStr] = Field(default=None, description="Group that this job belongs to. Applicable only if requesting user has adequate permissions level.", alias="ownerGroup")
    contact_email: Optional[StrictStr] = Field(default=None, description="Email to contact regarding this job. If the job is submitted anonymously, an email has to be provided.", alias="contactEmail")
    id: Optional[StrictStr] = Field(default=None, description="Globally unique identifier of a job.")
    status_code: Optional[StrictStr] = Field(default=None, description="Current status code of the job.", alias="statusCode")
    status_message: Optional[StrictStr] = Field(default=None, description="Latest status message received for this job.", alias="statusMessage")
    config_version: Optional[StrictStr] = Field(default=None, description="Configuration version that was used to create this job.", alias="configVersion")
    job_result_object: Optional[Dict[str, Any]] = Field(default=None, description="\"Contains the dataset archiving results.", alias="jobResultObject")
    created_by: Optional[StrictStr] = Field(default=None, description="User who created this job. System managed.", alias="createdBy")
    updated_by: Optional[StrictStr] = Field(default=None, description="User who last updated this job. System managed.", alias="updatedBy")
    created_at: Optional[datetime] = Field(default=None, description="Date/time when the job was created. ISO 8601 format.", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="Date/time when the job was last updated. ISO 8601 format.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["datasets", "datasetDetails", "type", "jobParams", "ownerUser", "ownerGroup", "contactEmail", "id", "statusCode", "statusMessage", "configVersion", "jobResultObject", "createdBy", "updatedBy", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartialOutputJobDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_details (list)
        _items = []
        if self.dataset_details:
            for _item_dataset_details in self.dataset_details:
                if _item_dataset_details:
                    _items.append(_item_dataset_details.to_dict())
            _dict['datasetDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartialOutputJobDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasets": [PartialOutputDatasetDto.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "datasetDetails": [PartialOutputDatasetDto.from_dict(_item) for _item in obj["datasetDetails"]] if obj.get("datasetDetails") is not None else None,
            "type": obj.get("type"),
            "jobParams": obj.get("jobParams"),
            "ownerUser": obj.get("ownerUser"),
            "ownerGroup": obj.get("ownerGroup"),
            "contactEmail": obj.get("contactEmail"),
            "id": obj.get("id"),
            "statusCode": obj.get("statusCode"),
            "statusMessage": obj.get("statusMessage"),
            "configVersion": obj.get("configVersion"),
            "jobResultObject": obj.get("jobResultObject"),
            "createdBy": obj.get("createdBy"),
            "updatedBy": obj.get("updatedBy"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


