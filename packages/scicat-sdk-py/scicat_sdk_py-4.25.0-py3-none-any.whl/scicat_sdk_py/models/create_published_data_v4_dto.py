# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend

    The version of the OpenAPI document: api/v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreatePublishedDataV4Dto(BaseModel):
    """
    CreatePublishedDataV4Dto
    """ # noqa: E501
    title: StrictStr = Field(description="A name or title by which a resource is known. This field has the semantics of Dublin Core [dcmi:title](https://www.dublincore.org/specifications/dublin-core/dcmi-terms/terms/title/) and [DataCite title](https://datacite-metadata-schema.readthedocs.io/en/4.6/properties/title/).")
    abstract: StrictStr = Field(description="A brief description of the resource and the context in which the resource was created. This field has the semantics of [DataCite description](https://datacite-metadata-schema.readthedocs.io/en/4.6/properties/description/) with [Abstract](https://datacite-metadata-schema.readthedocs.io/en/4.6/appendices/appendix-1/descriptionType/#abstract).")
    dataset_pids: List[StrictStr] = Field(description="Array of one or more Dataset persistent identifier (pid) values that make up the published data.", alias="datasetPids")
    registered_time: Optional[datetime] = Field(default=None, description="Time when doi is successfully registered", alias="registeredTime")
    status: Optional[StrictStr] = Field(default=None, description="Indication of position in publication workflow e.g. registred, private, public")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="JSON object containing the metadata. This will cover most optional fields of the DataCite schema, and will require a mapping from metadata subfields to DataCite Schema definitions.")
    __properties: ClassVar[List[str]] = ["title", "abstract", "datasetPids", "registeredTime", "status", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePublishedDataV4Dto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePublishedDataV4Dto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "abstract": obj.get("abstract"),
            "datasetPids": obj.get("datasetPids"),
            "registeredTime": obj.get("registeredTime"),
            "status": obj.get("status"),
            "metadata": obj.get("metadata")
        })
        return _obj


