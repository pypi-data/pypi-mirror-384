"use strict";(self.webpackChunkm269_25j_marking_tool=self.webpackChunkm269_25j_marking_tool||[]).push([[509],{509:(e,n,t)=>{t.r(n),t.d(n,{decrypt:()=>g,default:()=>y});var o=t(794),a=t(722),i=t(296),s=t(23),l=t(256),r=t(316);const d="m269-25j-marking-tool:prep",c="m269-25j-marking-tool:colourise",m="m269-25j-marking-tool:prep_for_students",p="m269-25j-prep-al-tests",u="m269-25j-marking-tool:open_all_tmas",b={1:{Q2bi:"try: # allowed\n    test(find_client_surname, al_test_table_tma01_q2bi)\nexcept NameError:\n    print('Function not defined.')",Q3a:"try: # allowed\n    test(find_occurrences_with_follow_on, al_test_table_tma01_q3a)\nexcept NameError:\n    print('Function not defined.')",Q4a:"al_tests_tma01_q4a()",Q5b:"try: # allowed\n    test(council_decision, al_test_table_tma01_q5b)\nexcept NameError:\n    print('Function not defined.')",Q6a:"try: # allowed\n    test(weighted_council_decision, al_test_table_tma01_q6a)\nexcept NameError:\n    print('Function not defined.')"},2:{Q2a:"test(power, al_test_table_tma02_q2a)",Q4biii:"al_test_tma02_q4biii()",Q6a:"al_test_tma02_q6a()"},3:{Q1a:"al_test_tma03_q1a()",Q1d:"al_test_tma03_q1d()",Q2d:"al_test_tma03_q2d()",Q4d:"al_tests_tma03_q4d()"}};async function f(e,n,t=[]){const o=await e.get(n,{content:!0});if("directory"===o.type&&o.content)for(const n of o.content)"directory"===n.type?await f(e,n.path,t):"notebook"===n.type&&n.path.endsWith(".ipynb")&&t.push(n.path);return t}async function g(){const e=prompt("Enter 16-character decryption key:");if(!e||16!==e.length)throw new Error("Invalid key. Must be exactly 16 characters.");const n=Uint8Array.from(atob(""),(e=>e.charCodeAt(0))),t=n.slice(0,12),o=n.slice(12),a=(new TextEncoder).encode(e),i=await crypto.subtle.importKey("raw",a,{name:"AES-GCM"},!1,["decrypt"]),s=await crypto.subtle.decrypt({name:"AES-GCM",iv:t},i,o);return(new TextDecoder).decode(s)}function w(e,n,t){try{const t=e.get(n).composite;return"string"==typeof t?t:""}catch(e){return console.warn(`Error reading setting "${n}":`,e),t}}const y={id:"m269-25j-marking-tool:plugin",description:"A tutor marking tool for M269 in the 25J presentation",autoStart:!0,requires:[o.ICommandPalette,a.INotebookTracker,r.ISettingRegistry],activate:async(e,n,t,r)=>{console.log("JupyterLab extension m269-25j-marking-tool is activated! hurrah"),console.log("Loading settings registry");const y=await r.load("m269-25j-marking-tool:plugin");console.log("Loading colours");const h=w(y,"answer_colour","rgb(255, 255, 204)"),k=w(y,"feedback_colour","rgb(93, 163, 243)"),N=w(y,"tutor_colour","rgb(249, 142, 142)");console.log("Answers: "+h),console.log("Feedback: "+k),console.log("Tutor: "+N);const M=document.createElement("style");M.textContent="\n      .m269-answer {\n        background-color:"+h+" !important;\n      }\n      .m269-feedback {\n        background-color:"+k+" !important;\n      }\n      .m269-tutor {\n        background-color: "+N+" !important;\n      }\n    ",document.head.appendChild(M),e.commands.addCommand(d,{label:"M269 Prep for Marking",caption:"M269 Prep for Marking",execute:async n=>{var t,o;const i=e.shell.currentWidget;if(i instanceof a.NotebookPanel){const n=i.content,a=null===(o=null===(t=null==i?void 0:i.context)||void 0===t?void 0:t.model)||void 0===o?void 0:o.metadata;if(console.log("metadata"),console.log(a),console.log(a.TMANUMBER),!a)return void console.error("Notebook metadata is undefined");if(1!=a.TMANUMBER&&2!=a.TMANUMBER&&3!=a.TMANUMBER)return void alert("Could not identify TMA number.");if("25J"!=a.TMAPRES)return void alert("This tool is only for presentation 25J. This TMA not identifiable as a 25J assessment.");const s=i.context.path,l=s.replace(/\.ipynb$/,"-UNMARKED.ipynb");await e.serviceManager.contents.copy(s,l),console.log("Notebook copied successfully:",l),n.activeCellIndex=0,n.activate(),await e.commands.execute("notebook:insert-cell-above");const r=n.activeCell;if(console.log("Getting TMA number"),r&&"code"===r.model.type){let n="";if(1==a.TMANUMBER)n='    question_marks = {\n        "Q1a": {"fail": 0, "pass": 2, "awarded": None},\n        "Q1b": {"fail": 0, "pass": 2, "awarded": None},\n        "Q1c": {"fail": 0, "pass": 2, "awarded": None},\n        "Q2a": {"fail": 0, "pass": 3, "merit": 6, "distinction": 8, "awarded": None},\n        "Q2bi": {"fail": 0, "pass": 5, "merit": 9, "distinction": 13, "awarded": None},\n        "Q2bii": {"fail": 0, "pass": 2, "awarded": None},\n        "Q2c": {"fail": 0, "pass": 3, "merit": 6, "distinction": 8, "awarded": None},\n        "Q2d": {"fail": 0, "pass": 2, "merit": 3, "distinction": 5, "awarded": None},\n        "Q3a": {"fail": 0, "pass": 4, "merit": 7, "distinction": 10, "awarded": None},\n        "Q3b": {"fail": 0, "pass": 2, "awarded": None},\n        "Q4a": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q4b": {"fail": 0, "pass": 2, "merit": 4, "awarded": None},\n        "Q5a": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q5b": {"fail": 0, "pass": 3, "merit": 5, "distinction": 8, "awarded": None},\n        "Q5c": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q6a": {"fail": 0, "pass": 4, "merit": 7, "distinction": 10, "awarded": None},\n        "Q6b": {"fail": 0, "pass": 3, "merit": 6, "awarded": None},\n    }';else if(2==a.TMANUMBER)n='    question_marks = {\n        "Q1a": {"fail": 0, "pass": 2, "awarded": None},\n        "Q1b": {"fail": 0, "pass": 2, "awarded": None},\n        "Q1c": {"fail": 0, "pass": 2, "awarded": None},\n        "Q2a": {"fail": 0, "pass": 3, "merit": 6, "distinction": 9, "awarded": None},\n        "Q2b": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q2c": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q3a": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q3bi": {"fail": 0, "pass": 1, "merit": 3, "awarded": None},\n        "Q3bii": {"fail": 0, "pass": 2, "merit": 4, "awarded": None},\n        "Q4a": {"fail": 0, "pass": 2, "merit": 4, "distinction": 5, "awarded": None},\n        "Q4bi": {"fail": 0, "pass": 1, "merit": 2, "distinction": 3, "awarded": None},\n        "Q4bii": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q4biii": {"fail": 0, "pass": 6, "merit": 10, "distinction": 14,\n         "awarded": None},\n        "Q5a": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q5b": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q5c": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q5d": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q5e": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q5f": {"fail": 0, "pass": 1, "merit": 2, "awarded": None},\n        "Q6a": {"fail": 0, "pass": 7, "merit": 12, "distinction": 16, "awarded": None},\n        "Q6b": {"fail": 0, "pass": 2, "merit": 3, "distinction": 4, "awarded": None},\n        "Q6c": {"fail": 0, "pass": 2, "merit": 4, "awarded": None},\n    }';else{if(3!=a.TMANUMBER)return void alert("TMA Not identified from metadata");n='    question_marks = {\n        "Q1a": {"fail": 0, "pass": 3, "merit": 5, "distinction": 7, "awarded": None},\n        "Q1b": {"fail": 0, "pass": 3, "distinction": 6, "awarded": None},\n        "Q1c": {"fail": 0, "pass": 2, "distinction": 5, "awarded": None},\n        "Q1d": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q1e": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q2a": {"fail": 0, "pass": 2, "distinction": 4, "awarded": None},\n        "Q2b": {"fail": 0, "pass": 3, "distinction": 6, "awarded": None},\n        "Q2c": {"fail": 0, "pass": 4, "merit": 7, "distinction": 10, "awarded": None},\n        "Q2d": {"fail": 0, "pass": 2, "merit": 3, "distinction": 4, "awarded": None},\n        "Q2e": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q3a": {"fail": 0, "pass": 3, "awarded": None},\n        "Q3b": {"fail": 0, "pass": 2, "merit": 4, "distinction": 6, "awarded": None},\n        "Q4a": {"fail": 0, "pass": 2, "merit": 3, "distinction": 4, "awarded": None},\n        "Q4b": {"fail": 0, "pass": 3, "merit": 6, "distinction": 8, "awarded": None},\n        "Q4c": {"fail": 0, "pass": 3, "merit": 6, "distinction": 8, "awarded": None},\n        "Q4d": {"fail": 0, "pass": 3, "merit": 6, "distinction": 8, "awarded": None},\n        "Q5" : {"fail": 0, "pass": 3, "awarded": None},\n    }'}r.model.sharedModel.setSource(`import pickle\nfrom IPython.display import display, Markdown, HTML\nimport ipywidgets as widgets  # Ensure ipywidgets is imported\n\n# Dictionary to store marks\npickle_file = "marks.dat"\ntry:\n    with open(pickle_file, "rb") as f:\n        question_marks = pickle.load(f)\nexcept FileNotFoundError:\n    print('Data file does not exist')\n\n${n}\n\ndef on_radio_change(change, question_id, radio_widget):\n    """React to radio button changes."""\n    print('Radio change')\n    print(change)\n    question_marks[question_id]["awarded"] = change["new"]\n    with open("marks.dat", "wb") as f:  # "wb" = write binary mode\n        pickle.dump(question_marks, f)\n\ndef generate_radio_buttons(question_id):\n    """Create radio buttons linked to stored_answers, updating a Markdown cell."""\n    if question_id not in question_marks:\n        raise ValueError(f"Question {question_id} not found in dictionary")\n    previous_selection = question_marks[question_id].get("awarded")\n\n    # Create radio buttons\n    radio_buttons = widgets.RadioButtons(\n        options=[key for key in question_marks[question_id].keys() if key != "awarded"],\n        description="Grade:",\n        disabled=False\n    )\n    if previous_selection is not None:\n        radio_buttons.value = previous_selection  # Restore previous selection\n    else:\n        radio_buttons.value = None  # Ensure no selection\n    # Attach event listener\n    radio_buttons.observe(lambda change: on_radio_change(change, question_id,\n    radio_buttons), names='value')\n\n    # Display the radio buttons\n    display(radio_buttons)\n\n\ndef create_summary_table():\n    """Generate and display an HTML table from the question_marks dictionary."""\n    if not question_marks:\n        display(HTML("<p>No data available.</p>"))\n        return\n\n    # Start the HTML table with styling\n    html = """\n    <style>\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            text-align: center;\n        }\n        th, td {\n            border: 1px solid black;\n            padding: 8px;\n        }\n        .not-selected {\n            background-color: #ffcccc;\n        }\n    </style>\n    <table>\n        <tr>\n            <th>Question</th>\n            <th>Fail</th>\n            <th>Pass</th>\n            <th>Merit</th>\n            <th>Distinction</th>\n            <th>Awarded</th>\n            <th>Marks</th>\n        </tr>\n    """\n\n    total_marks = 0  # Sum of all selected marks\n\n    # Loop through the dictionary to populate rows\n    for question, values in question_marks.items():\n        fail = values.get("fail", "-")\n        passed = values.get("pass", "-")\n        merit = values.get("merit", "-")\n        distinction = values.get("distinction", "-")\n        awarded = values.get("awarded", None)\n\n        # If marked is None, highlight the cell\n        awarded_display = awarded if awarded else "Not Awarded"\n        awarded_class = "not-selected" if awarded is None else ""\n\n        if awarded is not None:\n            total_marks += values[awarded]  # Add to total\n            marks = values[awarded]\n        else:\n            marks = 0\n\n        html += f"""\n        <tr>\n            <td>{question}</td>\n            <td>{fail}</td>\n            <td>{passed}</td>\n            <td>{merit}</td>\n            <td>{distinction}</td>\n            <td class='{awarded_class}'>{awarded_display}</td>\n            <td>{marks}</td>\n        </tr>\n        """\n\n    # Add total row\n    html += f"""\n    <tr>\n        <td colspan='6'><b>Total Marks</b></td>\n        <td><b>{total_marks}</b></td>\n    </tr>\n    """\n\n    html += "</table>"\n    # Display the table in the Jupyter Notebook\n    display(HTML(html))`),r.model.setMetadata("CELLTYPE","MARKCODE"),await e.commands.execute("notebook:run-cell"),r&&(r.inputHidden=!0)}console.log("inserting marking forms");for(let t=0;t<n.widgets.length;t++){console.log(t);const o=n.widgets[t].model.metadata,a=o.CELLTYPE;console.log(a);const i=o.QUESTION;if(console.log(i),"TMACODE"==a&&(n.activeCellIndex=t,await e.commands.execute("notebook:run-cell")),void 0!==i){n.activeCellIndex=t,await e.commands.execute("notebook:insert-cell-below");let o=n.activeCell;o&&"code"===o.model.type&&(o.model.sharedModel.setSource(`# Marking Form\ngenerate_radio_buttons(${JSON.stringify(i)})`),o.model.setMetadata("CELLTYPE","MARKCODE")),await e.commands.execute("notebook:run-cell"),t++,n.activeCellIndex=t,await e.commands.execute("notebook:insert-cell-below"),await e.commands.execute("notebook:change-cell-to-markdown"),o=n.activeCell,o&&"markdown"===o.model.type?(console.log("markdown cell being metadatad"),o.model.sharedModel.setSource("Feedback:"),o.model.setMetadata("CELLTYPE","FEEDBACK")):console.log("markdown cell cannot be metadatad"),await e.commands.execute("notebook:run-cell"),t++}}n.activeCellIndex=n.widgets.length-1,console.log("Inserting final cell"),await e.commands.execute("notebook:insert-cell-below"),console.log("Getting final cell");const d=n.widgets[n.widgets.length-1];console.log(d),d?(console.log("Got final cell"),console.log(d.model.type)):console.log("Not got final cell"),d&&"code"===d.model.type?(console.log("got and it is code"),d.model.sharedModel.setSource("create_summary_table()"),d.model.setMetadata("CELLTYPE","MARKCODE")):console.log("could not get or not code"),console.log("activating"),await e.commands.execute("notebook:run-cell"),await e.commands.execute(c),console.log("done")}}}),e.commands.addCommand(c,{label:"M269 Colourise",caption:"M269 Colourise",execute:async n=>{const t=e.shell.currentWidget;if(t instanceof a.NotebookPanel){const e=t.content;console.log("Colourising cells");for(let n=0;n<e.widgets.length;n++){console.log(n);const t=e.widgets[n],o=t.model.metadata.CELLTYPE;console.log(o),"ANSWER"===o?t.addClass("m269-answer"):"FEEDBACK"===o||"MARKCODE"===o?t.addClass("m269-feedback"):"SOLUTION"!==o&&"SECREF"!==o&&"GRADING"!==o||t.addClass("m269-tutor")}}}}),e.commands.addCommand(m,{label:"M269 Prep for Student (MT)",caption:"M269 Prep for Student (MT)",execute:async n=>{const t=e.shell.currentWidget;if(t instanceof a.NotebookPanel){const n=t.context.path,o=n,a=n.replace(/-Master(?=\.ipynb$)/,"").replace(/(?=\.ipynb$)/,"-STUDENT");await t.context.save(),await e.serviceManager.contents.rename(n,a),await t.close();const i=await e.commands.execute("docmanager:open",{path:a,factory:"Notebook"});i&&"context"in i&&await i.context.ready,await e.serviceManager.contents.copy(a,o),console.log("Notebook copied successfully:",a);const s=i.content;for(let n=s.widgets.length-1;n>=0;n--){const t=s.widgets[n],o=t.model.metadata.CELLTYPE;console.log(`Cell ${n} type: ${t.model.type} - ${o}`),"SECREF"!=o&&"SOLUTION"!=o&&"GRADING"!=o||(s.activeCellIndex=n,await e.commands.execute("notebook:delete-cell"),console.log("... deleted."))}}}}),e.commands.addCommand(p,{label:"M269 AL Tests",caption:"M269 AL Tests",execute:async n=>{var o,s,l;const r=new i.ContentsManager,d=t.currentWidget;if(d){const e=d.context.path;console.log("Notebook path:",e)}const c=(null!==(o=null==d?void 0:d.context.path)&&void 0!==o?o:"").split("/").length-1,m=Array(c).fill("..").join("/"),p=m?`${m}/al_tests.py`:"al_tests.py";let u;try{u=await g()}catch(e){return void alert("Decryption failed: "+(e instanceof Error?e.message:e))}try{if(await r.save("al_tests.py",{type:"file",format:"text",content:u}),console.log("File created successfully"),!(d instanceof a.NotebookPanel))return void alert("Error: Could not access NotebookPanel");{const n=d.content;n.activeCellIndex=0,n.activate(),await e.commands.execute("notebook:insert-cell-above");const t=n.activeCell,o=`%run -i ${p}`;t.model.sharedModel.setSource(o),await e.commands.execute("notebook:run-cell");const a=null===(l=null===(s=null==d?void 0:d.context)||void 0===s?void 0:s.model)||void 0===l?void 0:l.metadata;if(console.log("metadata"),console.log(a),console.log(a.TMANUMBER),!a)return void console.error("Notebook metadata is undefined");if(1!=a.TMANUMBER&&2!=a.TMANUMBER&&3!=a.TMANUMBER)return void alert("Could not identify TMA number.");if("25J"!=a.TMAPRES)return void alert("This tool is only for presentation 25J. This TMA not identifiable as a 25J assessment.");console.log("Identified as TMA "+a.TMANUMBER+" Presentation "+a.TMAPRES);const i=a.TMANUMBER,r=b[i];if(r)for(const[e,t]of Object.entries(r)){console.log(`Key: ${e}, Value: ${t}`);for(let o=0;o<n.widgets.length;o++){const a=n.widgets[o],i=a.model.metadata,s=i.QUESTION,l=i.CELLTYPE;if(console.log(`Cell ${o}: Type = ${l}, Question = ${s}`),"ANSWER"===l&&s===e&&"code"===a.model.type){console.log("found");let e=a.model.sharedModel.getSource();a.model.sharedModel.setSource(e+"\n\n"+t)}18!=o&&19!=o&&20!=o||(console.log(l),console.log("ANSWER"===l),console.log(s),console.log(e),console.log(s===e),console.log(a.model.type),console.log("code"===a.model.type))}}console.log(o)}}catch(e){return void alert("Failed to create file: "+e)}}}),e.commands.addCommand(u,{label:"M269 Open All TMAs",caption:"M269 Open All TMAs",execute:async n=>{if(!await async function(){const e=window.open("about:blank","_blank");if(e){try{e.close()}catch(e){}return!0}{const e=window.location.origin,n=document.createElement("div");n.innerHTML=`\n          <p><b>Pop-ups are blocked</b> for <code>${e}</code>. To open multiple notebooks automatically, please allow pop-ups for this site, then click <b>Try again</b>.</p>\n          <details open>\n            <summary><b>How to allow pop-ups</b></summary>\n            <ul style="margin-top:0.5em">\n              <li><b>Check your address bar:</b> There may be an option to whitelist popups.</li>\n              <li><b>Chrome / Edge (Chromium):</b> Click the icon to left of address bar → <i>Site settings</i> → set <i>Pop-ups and redirects</i> to <b>Allow</b> for <code>${e}</code>. Then close the tab to return.</li>\n              <li><b>Firefox:</b> Preferences → <i>Privacy &amp; Security</i> → <i>Permissions</i> → uncheck <i>Block pop-up windows</i> or add an exception for <code>${e}</code>.</li>\n              <li><b>Safari (macOS):</b> Safari → Settings → <i>Websites</i> → <i>Pop-up Windows</i> → for <code>${e}</code>, choose <b>Allow</b>. Or “Settings for This Website…” from the address bar.</li>\n            </ul>\n          </details>\n          <p style="margin-top:0.5em">Tip: some extensions (ad blockers, privacy tools) also block pop-ups; whitelist this site there if needed.</p>\n        `;const t=new l.Widget({node:n});return(await(0,o.showDialog)({title:"Allow pop-ups to open notebooks",body:t,buttons:[o.Dialog.cancelButton({label:"Cancel"})]})).button.accept}}())return;const t=e.serviceManager.contents;let a=await f(t,"");a=a.filter((e=>!e.includes("-UNMARKED")));const i=s.PageConfig.getBaseUrl();console.log("OPEN ALL DEBUGGING START");for(const e of a){const n=i+"lab/tree/"+encodeURIComponent(e);console.log(">> "+n)}if(console.log("OPEN ALL DEBUGGING END"),!(a.length>20)||window.confirm(`Found ${a.length} notebooks. Open them all in new tabs?`)){for(const e of a){const n=i+"lab/tree/"+encodeURIComponent(e);window.open(n,"_blank")}alert(`Opened ${a.length} notebooks in new tabs.mIf they didn't open, enable popups for this site and try again.`)}}});const Q="M269-25j";n.addItem({command:d,category:Q,args:{origin:"from palette"}}),n.addItem({command:c,category:Q,args:{origin:"from palette"}}),n.addItem({command:m,category:Q,args:{origin:"from palette"}}),n.addItem({command:p,category:Q,args:{origin:"from palette"}}),n.addItem({command:u,category:Q,args:{origin:"from palette"}})}}}}]);