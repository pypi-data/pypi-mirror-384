///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/constraints/residual.hpp"

#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ConstraintModelResidualVisitor
    : public bp::def_visitor<ConstraintModelResidualVisitor<Model>> {
  typedef typename Model::ConstraintDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateAbstract State;
  typedef typename Model::ResidualModelAbstract ResidualModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, std::shared_ptr<ResidualModel>,
                    bp::optional<bool>>(
               bp::args("self", "state", "residual", "T_act"),
               "Initialize the residual constraint model as an equality "
               "constraint.\n\n"
               ":param state: state description\n"
               ":param residual: residual model\n"
               ":param T_act: false if we want to deactivate the residual at "
               "the terminal node (default true)"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the residual constraint.\n\n"
            ":param data: constraint data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"),
             "Compute the residual constraint based on state only.\n\n"
             "It updates the constraint based on the state only. This function "
             "is commonly used in the terminal nodes of an optimal control "
             "problem.\n"
             ":param data: constraint data\n"
             ":param x: state point (dim. state.nx)")
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the residual constraint.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: constraint data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)\n")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the derivatives of the residual constraint with respect "
             "to the state only.\n\n"
             "It updates the Jacobian of the constraint function based on the "
             "state only. This function is commonly used in the terminal nodes "
             "of an optimal control problem.\n"
             ":param data: constraint data\n"
             ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the residual constraint data.\n\n"
             "Each constraint model has its own data that needs to be "
             "allocated. This function returns the allocated data for a "
             "predefined constraint.\n"
             ":param data: shared data\n"
             ":return constraint data.");
  }
};

#define CROCODDYL_CONSTRAINT_MODEL_RESIDUAL_PYTHON_BINDINGS(Scalar)           \
  typedef ConstraintModelResidualTpl<Scalar> Model;                           \
  typedef ConstraintModelAbstractTpl<Scalar> ModelBase;                       \
  typedef typename ModelBase::StateAbstract State;                            \
  typedef typename ModelBase::ResidualModelAbstract ResidualModel;            \
  typedef typename ModelBase::VectorXs VectorXs;                              \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                       \
  bp::class_<Model, bp::bases<ModelBase>>(                                    \
      "ConstraintModelResidual",                                              \
      "This defines equality / inequality constraints based on a residual "   \
      "vector and its bounds.",                                               \
      bp::init<std::shared_ptr<State>, std::shared_ptr<ResidualModel>,        \
               VectorXs, VectorXs, bp::optional<bool>>(                       \
          bp::args("self", "state", "residual", "lower", "upper", "T_act"),   \
          "Initialize the residual constraint model as an inequality "        \
          "constraint.\n\n"                                                   \
          ":param state: state description\n"                                 \
          ":param residual: residual model\n"                                 \
          ":param lower: lower bound\n"                                       \
          ":param upper: upper bound\n"                                       \
          ":param T_act: false if we want to deactivate the residual at the " \
          "terminal node (default true)"))                                    \
      .def(ConstraintModelResidualVisitor<Model>())                           \
      .def(CastVisitor<Model>())                                              \
      .def(PrintableVisitor<Model>())                                         \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_CONSTRAINT_DATA_RESIDUAL_PYTHON_BINDINGS(Scalar)   \
  typedef ConstraintDataResidualTpl<Scalar> Data;                    \
  typedef ConstraintDataAbstractTpl<Scalar> DataBase;                \
  typedef ConstraintModelResidualTpl<Scalar> Model;                  \
  typedef Model::DataCollectorAbstract DataCollector;                \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();               \
  bp::class_<Data, bp::bases<DataBase>>(                             \
      "ConstraintDataResidual", "Data for residual constraint.\n\n", \
      bp::init<Model*, DataCollector*>(                              \
          bp::args("self", "model", "data"),                         \
          "Create residual constraint data.\n\n"                     \
          ":param model: residual constraint model\n"                \
          ":param data: shared data")[bp::with_custodian_and_ward<   \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])               \
      .def(CopyableVisitor<Data>());

void exposeConstraintResidual() {
  CROCODDYL_CONSTRAINT_MODEL_RESIDUAL_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_CONSTRAINT_DATA_RESIDUAL_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
