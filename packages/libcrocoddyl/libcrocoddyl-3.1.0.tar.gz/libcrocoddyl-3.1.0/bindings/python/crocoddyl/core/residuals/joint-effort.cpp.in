///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2022-2025, Heriot-Watt University, University of Edinburgh
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/residuals/joint-effort.hpp"

#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelJointEffortVisitor
    : public bp::def_visitor<ResidualModelJointEffortVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateAbstract State;
  typedef typename Model::ActuationModelAbstract Actuation;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(
          bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>,
                   VectorXs>(bp::args("self", "state", "actuation", "uref"),
                             "Initialize the joint-effort residual model.\n\n"
                             "The default nu value is obtained from state.nv.\n"
                             ":param state: state description\n"
                             ":param actuation: actuation model\n"
                             ":param uref: reference joint effort"))
        .def(bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>,
                      std::size_t>(
            bp::args("self", "state", "actuation", "nu"),
            "Initialize the joint-effort residual model.\n\n"
            "The default reference joint-effort is obtained from "
            "np.zero(actuation.nu).\n"
            ":param state: state description\n"
            ":param actuation: actuation model\n"
            ":param nu: dimension of the control vector"))
        .def(bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>>(
            bp::args("self", "state", "actuation"),
            "Initialize the joint-effort residual model.\n\n"
            "The default reference joint-effort is obtained from "
            "np.zero(actuation.nu).\n"
            "The default nu value is obtained from state.nv.\n"
            ":param state: state description\n"
            ":param actuation: actuation model"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the joint-effort residual.\n\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the joint-effort residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the joint-effort residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for the joint-effort residual.\n"
             ":param data: shared data\n"
             ":return residual data.")
        .add_property("reference",
                      bp::make_function(&Model::get_reference,
                                        bp::return_internal_reference<>()),
                      &Model::set_reference, "reference joint effort");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_JOINTEFF_PYTHON_BINDINGS(Scalar)            \
  typedef ResidualModelJointEffortTpl<Scalar> Model;                         \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                        \
  typedef typename ModelBase::StateAbstract State;                           \
  typedef typename Model::ActuationModelAbstract Actuation;                  \
  typedef typename ModelBase::VectorXs VectorXs;                             \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                      \
  bp::class_<Model, bp::bases<ModelBase>>(                                   \
      "ResidualModelJointEffort",                                            \
      "This residual function defines a residual vector as r = u - uref, "   \
      "with u and uref as the current and reference joint efforts, "         \
      "respectively.",                                                       \
      bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>, VectorXs, \
               std::size_t, bp::optional<bool>>(                             \
          bp::args("self", "state", "actuation", "uref", "nu", "fwddyn"),    \
          "Initialize the joint-effort residual model.\n\n"                  \
          ":param state: state description\n"                                \
          ":param actuation: actuation model\n"                              \
          ":param uref: reference joint effort\n"                            \
          ":param nu: dimension of the control vector\n"                     \
          ":param fwddyn: indicate if we have a forward dynamics problem "   \
          "(True) or inverse dynamics problem (False) (default False)"))     \
      .def(ResidualModelJointEffortVisitor<Model>())                         \
      .def(CastVisitor<Model>())                                             \
      .def(PrintableVisitor<Model>())                                        \
      .def(CopyableVisitor<Model>());

void exposeResidualJointEffort() {
  CROCODDYL_RESIDUAL_MODEL_JOINTEFF_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
