///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/core/residual-base.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelAbstractVisitor
    : public bp::def_visitor<ResidualModelAbstractVisitor<Model>> {
  typedef typename Model::ResidualModel ResidualModel;
  typedef typename Model::ResidualData ResidualData;
  typedef typename Model::State State;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, std::size_t,
                    bp::optional<bool, bool, bool>>(
               bp::args("self", "state", "nr", "q_dependent", "v_dependent",
                        "u_dependent"),
               "Initialize the cost model.\n\n"
               ":param state: state description\n"
               ":param nr: dimension of the residual vector\n"
               ":param q_dependent: define if the residual function depends on "
               "q (default true)\n"
               ":param v_dependent: define if the residual function depends on "
               "v (default true)\n"
               ":param u_dependent: define if the residual function depends on "
               "u (default true)"))
        .def("calc", pure_virtual(&Model::calc),
             bp::args("self", "data", "x", "u"),
             "Compute the residual vector.\n\n"
             ":param data: residual data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (ResidualModel::*)(
                 const std::shared_ptr<ResidualData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ResidualModel::calc),
             bp::args("self", "data", "x"),
             "Compute the residual vector for nodes that depends only on the "
             "state.\n\n"
             "This function is used in the terminal nodes of an optimal "
             "control problem. This is the reason why it updates the residual "
             "vector based on the state only.\n"
             ":param data: residual data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x", "u"),
             "Compute the Jacobians of the residual function.\n\n"
             ":param data: residual data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (ResidualModel::*)(
                 const std::shared_ptr<ResidualData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ResidualModel::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the Jacobian of the residual functions with respect to "
             "the state only.\n\n"
             "This function is used in the terminal nodes of an optimal "
             "control problem. This is the reason why it updates the residual "
             "vector based on the state only.\n"
             ":param data: residual data\n"
             ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData, &Model::default_createData,
             bp::args("self"),
             "Create the residual data.\n\n"
             "Each residual model might has its own data that needs to be "
             "allocated.")
        .def("calcCostDiff", &Model::calcCostDiff, &Model::default_calcCostDiff,
             bp::args("self", "cdata", "rdata", "adata", "update_u"),
             "Compute the derivative of the cost function.\n\n"
             "This function assumes that the derivatives of the activation and "
             "residual are computed via calcDiff functions.\n"
             ":param cdata: cost data\n"
             ":param rdata: residual data\n"
             ":param adata: activation data\n"
             ":param update_u: update the derivative of the cost function "
             "w.r.t. to the control if True.")
        .def("calcCostDiff", &Model::default_calcCostDiff_noupdate_u)
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state")
        .add_property("nr", bp::make_function(&Model::get_nr),
                      "dimension of residual vector")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of control vector")
        .add_property(
            "q_dependent", bp::make_function(&Model::get_q_dependent),
            "flag that indicates if the residual function depends on q")
        .add_property(
            "v_dependent", bp::make_function(&Model::get_v_dependent),
            "flag that indicates if the residual function depends on v")
        .add_property(
            "u_dependent", bp::make_function(&Model::get_u_dependent),
            "flag that indicates if the residual function depends on u");
  }
};

template <typename Data>
struct ResidualDataAbstractVisitor
    : public bp::def_visitor<ResidualDataAbstractVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "shared",
          bp::make_getter(&Data::shared, bp::return_internal_reference<>()),
          "shared data")
        .add_property(
            "r", bp::make_getter(&Data::r, bp::return_internal_reference<>()),
            bp::make_setter(&Data::r), "residual vector")
        .add_property(
            "Rx", bp::make_getter(&Data::Rx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Rx), "Jacobian of the residual")
        .add_property(
            "Ru", bp::make_getter(&Data::Ru, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Ru), "Jacobian of the residual")
        .add_property(
            "Arr_Rx",
            bp::make_getter(&Data::Arr_Rx, bp::return_internal_reference<>()),
            "Intermediate product of Arr (2nd deriv of Activation) with Rx "
            "(deriv of residue)")
        .add_property(
            "Arr_Ru",
            bp::make_getter(&Data::Arr_Ru, bp::return_internal_reference<>()),
            "Intermediate product of Arr (2nd deriv of Activation) with Ru "
            "(deriv of residue)");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)              \
  typedef ResidualModelAbstractTpl<Scalar> Model;                              \
  typedef ResidualModelAbstractTpl_wrap<Scalar> Model_wrap;                    \
  typedef StateAbstractTpl<Scalar> State;                                      \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model_wrap, boost::noncopyable>(                                  \
      "ResidualModelAbstract",                                                 \
      "Abstract class for residual models.\n\n"                                \
      "A residual model defines a vector function r(x,u) in R^nr, where nr "   \
      "describes its dimension in the the Euclidean space. For each residual " \
      "model, we need to provide ways of computing the residual vector and "   \
      "its Jacobians. These computations are mainly carried out inside "       \
      "calc() and calcDiff(), respectively.",                                  \
      bp::init<std::shared_ptr<State>, std::size_t, std::size_t,               \
               bp::optional<bool, bool, bool>>(                                \
          bp::args("self", "state", "nr", "nu", "q_dependent", "v_dependent",  \
                   "u_dependent"),                                             \
          "Initialize the residual model.\n\n"                                 \
          ":param state: state description,\n"                                 \
          ":param nr: dimension of the residual vector\n"                      \
          ":param nu: dimension of control vector (default state.nv)\n"        \
          ":param q_dependent: define if the residual function depends on q "  \
          "(default true)\n"                                                   \
          ":param v_dependent: define if the residual function depends on v "  \
          "(default true)\n"                                                   \
          ":param u_dependent: define if the residual function depends on u "  \
          "(default true)"))                                                   \
      .def(ResidualModelAbstractVisitor<Model_wrap>())                         \
      .def(PrintableVisitor<Model_wrap>())                                     \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_RESIDUAL_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)               \
  typedef ResidualDataAbstractTpl<Scalar> Data;                                \
  typedef ResidualModelAbstractTpl<Scalar> Model;                              \
  typedef Model::DataCollectorAbstract DataCollector;                          \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                         \
  bp::class_<Data>(                                                            \
      "ResidualDataAbstract",                                                  \
      "Abstract class for residual data.\n\n"                                  \
      "In Crocoddyl, a residual data contains all the required information "   \
      "for processing an user-defined residual models. The residual data "     \
      "typically is allocated once and containts the residual vector and its " \
      "Jacobians.",                                                            \
      bp::init<Model*, DataCollector*>(                                        \
          bp::args("self", "model", "data"),                                   \
          "Create common data shared between residual models.\n\n"             \
          ":param model: residual model\n"                                     \
          ":param data: shared data")[bp::with_custodian_and_ward<             \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                         \
      .def(ResidualDataAbstractVisitor<Data>())                                \
      .def(CopyableVisitor<Data>());

void exposeResidualAbstract() {
  CROCODDYL_RESIDUAL_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_RESIDUAL_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
