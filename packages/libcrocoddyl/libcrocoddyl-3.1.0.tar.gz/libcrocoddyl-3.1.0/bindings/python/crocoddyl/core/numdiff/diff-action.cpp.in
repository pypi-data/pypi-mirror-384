///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/numdiff/diff-action.hpp"

#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/core/diff-action-base.hpp"
#include "python/crocoddyl/utils/copyable.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct DifferentialActionModelNumDiffVisitor
    : public bp::def_visitor<DifferentialActionModelNumDiffVisitor<Model>> {
  typedef typename Model::DifferentialActionDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                       const Eigen::Ref<const VectorXs>&)>(
               &Model::calc),
           bp::args("self", "data", "x"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the next state and cost value.\n\n"
            "The system evolution is described in model.\n"
            ":param data: NumDiff action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the dynamics and cost functions.\n\n"
            "It computes the Jacobian and Hessian using numerical "
            "differentiation.\n"
            "It assumes that calc has been run first.\n"
            ":param data: NumDiff action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the action data.\n\n"
             "Each action model (AM) has its own data that needs to be "
             "allocated.\n"
             "This function returns the allocated data for a predefined AM.\n"
             ":return AM data.")
        .add_property(
            "model",
            bp::make_function(&Model::get_model,
                              bp::return_value_policy<bp::return_by_value>()),
            "action model")
        .add_property(
            "disturbance", bp::make_function(&Model::get_disturbance),
            &Model::set_disturbance,
            "disturbance constant used in the numerical differentiation")
        .add_property("withGaussApprox",
                      bp::make_function(&Model::get_with_gauss_approx),
                      "Gauss approximation for computing the Hessians");
  }
};

template <typename Data>
struct DifferentialActionDataNumDiffVisitor
    : public bp::def_visitor<DifferentialActionDataNumDiffVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "Rx", bp::make_getter(&Data::Rx, bp::return_internal_reference<>()),
          "Jacobian of the cost residual.")
        .add_property(
            "Ru", bp::make_getter(&Data::Ru, bp::return_internal_reference<>()),
            "Jacobian of the cost residual.")
        .add_property(
            "dx", bp::make_getter(&Data::dx, bp::return_internal_reference<>()),
            "state disturbance.")
        .add_property(
            "du", bp::make_getter(&Data::du, bp::return_internal_reference<>()),
            "control disturbance.")
        .add_property(
            "xp", bp::make_getter(&Data::xp, bp::return_internal_reference<>()),
            "rate state after disturbance.")
        .add_property(
            "data_0",
            bp::make_getter(&Data::data_0,
                            bp::return_value_policy<bp::return_by_value>()),
            "data that contains the final results")
        .add_property(
            "data_x",
            bp::make_getter(&Data::data_x,
                            bp::return_value_policy<bp::return_by_value>()),
            "temporary data associated with the state variation")
        .add_property(
            "data_u",
            bp::make_getter(&Data::data_u,
                            bp::return_value_policy<bp::return_by_value>()),
            "temporary data associated with the control variation");
  }
};

#define CROCODDYL_DIFFACTION_MODEL_NUMDIFF_PYTHON_BINDINGS(Scalar)             \
  typedef DifferentialActionModelNumDiffTpl<Scalar> Model;                     \
  typedef DifferentialActionModelAbstractTpl<Scalar> ModelBase;                \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model, bp::bases<ModelBase>>(                                     \
      "DifferentialActionModelNumDiff",                                        \
      "Abstract class for computing calcDiff by using numerical "              \
      "differentiation.\n\n",                                                  \
      bp::init<std::shared_ptr<ModelBase>, bp::optional<bool>>(                \
          bp::args("self", "model", "gaussApprox"),                            \
          "Initialize the action model NumDiff.\n\n"                           \
          ":param model: action model where we compute the derivatives "       \
          "through NumDiff.\n"                                                 \
          ":param gaussApprox: compute the Hessian using Gauss approximation " \
          "(default False)"))                                                  \
      .def(DifferentialActionModelNumDiffVisitor<Model>())                     \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_DIFFACTION_DATA_NUMDIFF_PYTHON_BINDINGS(Scalar)  \
  typedef DifferentialActionDataNumDiffTpl<Scalar> Data;           \
  typedef DifferentialActionDataAbstractTpl<Scalar> DataBase;      \
  typedef DifferentialActionModelNumDiffTpl<Scalar> Model;         \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();             \
  bp::class_<Data, bp::bases<DataBase>>(                           \
      "DifferentialActionDataNumDiff",                             \
      "Numerical differentiation diff-action data.",               \
      bp::init<Model*>(                                            \
          bp::args("self", "model"),                               \
          "Create numerical differentiation diff-action data.\n\n" \
          ":param model: numdiff diff-action model"))              \
      .def(DifferentialActionDataNumDiffVisitor<Data>())           \
      .def(CopyableVisitor<Data>());

void exposeDifferentialActionNumDiff() {
  CROCODDYL_DIFFACTION_MODEL_NUMDIFF_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_DIFFACTION_DATA_NUMDIFF_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
