///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/activations/quadratic-barrier.hpp"

#include "python/crocoddyl/core/activation-base.hpp"
#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Bounds>
struct ActivationBoundsVisitor
    : public bp::def_visitor<ActivationBoundsVisitor<Bounds>> {
  typedef typename Bounds::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "lb", bp::make_getter(&Bounds::lb),
          bp::make_setter(&Bounds::lb, bp::return_internal_reference<>()),
          "lower bounds")
        .add_property(
            "ub", bp::make_getter(&Bounds::ub),
            bp::make_setter(&Bounds::lb, bp::return_internal_reference<>()),
            "upper bounds")
        .add_property("beta", &Bounds::beta, "beta");
  }
};

template <typename Model>
struct ActivationModelQuadraticVisitor
    : public bp::def_visitor<ActivationModelQuadraticVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "r"),
           "Compute the inequality activation.\n\n"
           ":param data: activation data\n"
           ":param r: residual vector")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "r"),
             "Compute the derivatives of inequality activation.\n\n"
             ":param data: activation data\n"
             "Note that the Hessian is constant, so we don't write again this "
             "value. It assumes that calc has been run first.\n"
             ":param r: residual vector \n")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the weighted quadratic action data.")
        .add_property("bounds",
                      bp::make_function(&Model::get_bounds,
                                        bp::return_internal_reference<>()),
                      bp::make_function(&Model::set_bounds),
                      "bounds (beta, lower and upper bounds)");
  }
};

#define CROCODDYL_ACTIVATION_BOUNDS_PYTHON_BINDINGS(Scalar)                    \
  typedef ActivationBoundsTpl<Scalar> Bounds;                                  \
  typedef typename Bounds::VectorXs VectorXs;                                  \
  bp::register_ptr_to_python<std::shared_ptr<Bounds>>();                       \
  bp::class_<Bounds>(                                                          \
      "ActivationBounds",                                                      \
      "Activation bounds.\n\n"                                                 \
      "The activation bounds describe the lower and upper vector plus it "     \
      "activation range (between 0 and 1), its default value is 1. Note that " \
      "a full activation is defined by 1 and the activation range is equally " \
      "distributed between the lower and upper bounds.",                       \
      bp::init<VectorXs, VectorXs, bp::optional<Scalar>>(                      \
          bp::args("self", "lb", "ub", "beta"),                                \
          "Initialize the activation bounds.\n\n"                              \
          ":param lb: lower bounds\n"                                          \
          ":param ub: upper bounds\n"                                          \
          ":param beta: range of activation (between 0 to 1, default 1)"))     \
      .def(ActivationBoundsVisitor<Bounds>())                                  \
      .def(CastVisitor<Bounds>())                                              \
      .def(PrintableVisitor<Bounds>())                                         \
      .def(CopyableVisitor<Bounds>());

#define CROCODDYL_ACTIVATION_MODEL_QUADRATIC_BARRIER_PYTHON_BINDINGS(Scalar) \
  typedef ActivationModelQuadraticBarrierTpl<Scalar> Model;                  \
  typedef ActivationModelAbstractTpl<Scalar> ModelBase;                      \
  typedef ActivationBoundsTpl<Scalar> Bounds;                                \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                      \
  bp::class_<Model, bp::bases<ModelBase>>(                                   \
      "ActivationModelQuadraticBarrier",                                     \
      "Inequality activation model.\n\n"                                     \
      "The activation is zero when r is between the lower (lb) and upper "   \
      "(ub) bounds, beta determines how much of the total range is not "     \
      "activated. This is the activation equations:\n"                       \
      "a(r) = 0.5 * ||r||^2 for lb > r > ub\n"                               \
      "a(r) = 0. for lb <= r <= ub.",                                        \
      bp::init<Bounds>(bp::args("self", "bounds"),                           \
                       "Initialize the activation model.\n\n"                \
                       ":param bounds: activation bounds"))                  \
      .def(ActivationModelQuadraticVisitor<Model>())                         \
      .def(CastVisitor<Model>())                                             \
      .def(PrintableVisitor<Model>())                                        \
      .def(CopyableVisitor<Model>());

void exposeActivationQuadraticBarrier() {
  CROCODDYL_ACTIVATION_BOUNDS_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTIVATION_MODEL_QUADRATIC_BARRIER_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
