///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          University of Oxford, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/core/action-base.hpp"

#include "python/crocoddyl/utils/deprecate.hpp"
#include "python/crocoddyl/utils/vector-converter.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActionModelAbstractVisitor
    : public bp::def_visitor<ActionModelAbstractVisitor<Model>> {
  typedef typename Model::ActionModel ActionModel;
  typedef typename Model::ActionData ActionData;
  typedef typename Model::VectorXs VectorXs;
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(ActionModel_quasiStatic_wraps,
                                         ActionModel::quasiStatic_x, 2, 4)
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", pure_virtual(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the next state and cost value.\n\n"
           "It describes the time-discrete evolution of our dynamical system "
           "in which we obtain the next state. Additionally it computes the "
           "cost value associated to this discrete state and control pair.\n"
           ":param data: action data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (ActionModel::*)(
                 const std::shared_ptr<ActionData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ActionModel::calc),
             bp::args("self", "data", "x"),
             "Compute the total cost value for nodes that depends only on the "
             "state.\n\n"
             "It updates the total cost and the next state is not computed as "
             "it is not expected to change. This function is used in the "
             "terminal nodes of an optimal control problem.\n"
             ":param data: action data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x", "u"),
             "Compute the derivatives of the dynamics and cost functions.\n\n"
             "It computes the partial derivatives of the dynamical system and "
             "the cost function. It assumes that calc has been run first. This "
             "function builds a quadratic approximation of the action model "
             "(i.e. linear dynamics and quadratic cost).\n"
             ":param data: action data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (ActionModel::*)(
                 const std::shared_ptr<ActionData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ActionModel::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the derivatives of the cost functions with respect to "
             "the state only.\n\n"
             "It updates the derivatives of the cost function with respect to "
             "the state only. This function is used in the terminal nodes of "
             "an optimal control problem.\n"
             ":param data: action data\n"
             ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData, &Model::default_createData,
             bp::args("self"),
             "Create the action data.\n\n"
             "Each action model (AM) has its own data that needs to be "
             "allocated.\n"
             "This function returns the allocated data for a predefined AM.\n"
             ":return AM data.")
        .def("quasiStatic", &Model::quasiStatic_x,
             ActionModel_quasiStatic_wraps(
                 bp::args("self", "data", "x", "maxiter", "tol"),
                 "Compute the quasic-static control given a state.\n\n"
                 "It runs an iterative Newton step in order to compute the "
                 "quasic-static regime given a state configuration.\n"
                 ":param data: action data\n"
                 ":param x: discrete-time state vector\n"
                 ":param maxiter: maximum allowed number of iterations\n"
                 ":param tol: stopping tolerance criteria (default 1e-9)\n"
                 ":return u: quasic-static control"))
        .def("quasiStatic", &Model::quasiStatic, &Model::default_quasiStatic,
             bp::args("self", "data", "u", "x", "maxiter", "tol"))
        .add_property(
            "nu", bp::make_function(&Model::get_nu),
            bp::make_setter(&Model::nu_, bp::return_internal_reference<>()),
            "dimension of control vector")
        .add_property("nr", bp::make_function(&Model::get_nr),
                      "dimension of cost-residual vector")
        .add_property(
            "ng", bp::make_function(&Model::get_ng),
            bp::make_setter(
                &Model::ng_,
                deprecated<bp::return_internal_reference<>>(
                    "Deprecated. Constraint dimension should not be modified.")),
            "number of inequality constraints")
        .def("get_ng", &Model::get_ng, &Model::default_get_ng,
             "Return the number of inequality constraints.")
        .add_property(
            "nh", bp::make_function(&Model::get_nh),
            bp::make_setter(
                &Model::nh_,
                deprecated<bp::return_internal_reference<>>(
                    "Deprecated. Constraint dimension should not be modified.")),
            "number of equality constraints")
        .def("get_nh", &Model::get_nh, &Model::default_get_nh,
             "Return the number of equality constraints.")
        .add_property(
            "ng_T", bp::make_function(&Model::get_ng_T),
            bp::make_setter(
                &Model::ng_T_,
                deprecated<bp::return_internal_reference<>>(
                    "Deprecated. Constraint dimension should not be modified.")),
            "number of inequality terminal constraints")
        .def("get_ng_T", &Model::get_ng_T, &Model::default_get_ng_T,
             "Return the number of inequality terminal constraints.")
        .add_property(
            "nh_T", bp::make_function(&Model::get_nh_T),
            bp::make_setter(
                &Model::nh_T_,
                deprecated<bp::return_internal_reference<>>(
                    "Deprecated. Constraint dimension should not be modified.")),
            "number of equality terminal constraints")
        .def("get_nh_T", &Model::get_nh_T, &Model::default_get_nh_T,
             "Return the number of equality terminal constraints.")
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state")
        .add_property("g_lb",
                      bp::make_function(&Model::get_g_lb,
                                        bp::return_internal_reference<>()),
                      &Model::set_g_lb,
                      "lower bound of the inequality constraints")
        .add_property("g_ub",
                      bp::make_function(&Model::get_g_ub,
                                        bp::return_internal_reference<>()),
                      &Model::set_g_ub,
                      "upper bound of the inequality constraints")
        .add_property("u_lb",
                      bp::make_function(&Model::get_u_lb,
                                        bp::return_internal_reference<>()),
                      &Model::set_u_lb, "lower control limits")
        .add_property("u_ub",
                      bp::make_function(&Model::get_u_ub,
                                        bp::return_internal_reference<>()),
                      &Model::set_u_ub, "upper control limits")
        .add_property("has_control_limits",
                      bp::make_function(&Model::get_has_control_limits),
                      "indicates whether problem has finite control limits");
  }
};

template <typename Data>
struct ActionDataAbstractVisitor
    : public bp::def_visitor<ActionDataAbstractVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "cost",
          bp::make_getter(&Data::cost,
                          bp::return_value_policy<bp::return_by_value>()),
          bp::make_setter(&Data::cost), "cost value")
        .add_property(
            "xnext",
            bp::make_getter(&Data::xnext, bp::return_internal_reference<>()),
            bp::make_setter(&Data::xnext), "next state")
        .add_property(
            "r", bp::make_getter(&Data::r, bp::return_internal_reference<>()),
            bp::make_setter(&Data::r), "cost residual")
        .add_property(
            "Fx", bp::make_getter(&Data::Fx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Fx),
            "Jacobian of the dynamics w.r.t. the state")
        .add_property(
            "Fu", bp::make_getter(&Data::Fu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Fu),
            "Jacobian of the dynamics w.r.t. the control")
        .add_property(
            "Lx", bp::make_getter(&Data::Lx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lx), "Jacobian of the cost w.r.t. the state")
        .add_property(
            "Lu", bp::make_getter(&Data::Lu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lu), "Jacobian of the cost")
        .add_property(
            "Lxx",
            bp::make_getter(&Data::Lxx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lxx), "Hessian of the cost w.r.t. the state")
        .add_property(
            "Lxu",
            bp::make_getter(&Data::Lxu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lxu),
            "Hessian of the cost w.r.t. the state and control")
        .add_property(
            "Luu",
            bp::make_getter(&Data::Luu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Luu),
            "Hessian of the cost w.r.t. the control")
        .add_property(
            "g", bp::make_getter(&Data::g, bp::return_internal_reference<>()),
            bp::make_setter(&Data::g), "inequality constraint values")
        .add_property(
            "Gx", bp::make_getter(&Data::Gx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Gx),
            "Jacobian of the inequality constraint w.r.t. the state")
        .add_property(
            "Gu", bp::make_getter(&Data::Gu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Gu),
            "Jacobian of the inequality constraint w.r.t. the control")
        .add_property(
            "h", bp::make_getter(&Data::h, bp::return_internal_reference<>()),
            bp::make_setter(&Data::h), "equality constraint values")
        .add_property(
            "Hx", bp::make_getter(&Data::Hx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Hx),
            "Jacobian of the equality constraint w.r.t. the state")
        .add_property(
            "Hu", bp::make_getter(&Data::Hu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Hu),
            "Jacobian of the equality constraint w.r.t. the control");
  }
};

#define CROCODDYL_ACTION_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)                \
  typedef ActionModelAbstractTpl<Scalar> Model;                                \
  typedef ActionModelAbstractTpl_wrap<Scalar> Model_wrap;                      \
  typedef StateAbstractTpl<Scalar> State;                                      \
  typedef std::shared_ptr<Model> ActionModelPtr;                               \
  StdVectorPythonVisitor<std::vector<ActionModelPtr>, true>::expose(           \
      "StdVec_ActionModel");                                                   \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model_wrap, boost::noncopyable>(                                  \
      "ActionModelAbstract",                                                   \
      "Abstract class for action models.\n\n"                                  \
      "An action model combines dynamics and cost data. Each node, in our "    \
      "optimal control problem, is described through an action model. Every "  \
      "time that we want to describe a problem, we need to provide ways of "   \
      "computing the dynamics, cost functions and their derivatives. These "   \
      "computations are mainly carried out inside calc() and calcDiff(), "     \
      "respectively.",                                                         \
      bp::init<std::shared_ptr<State>, std::size_t,                            \
               bp::optional<std::size_t, std::size_t, std::size_t,             \
                            std::size_t, std::size_t>>(                        \
          bp::args("self", "state", "nu", "nr", "ng", "nh", "ng_T", "nh_T"),   \
          "Initialize the action model.\n\n"                                   \
          "We can also describe autonomous systems by setting nu = 0.\n"       \
          ":param state: state description,\n"                                 \
          ":param nu: dimension of control vector,\n"                          \
          ":param nr: dimension of the cost-residual vector (default 1)\n"     \
          ":param ng: number of inequality constraints (default 0)\n"          \
          ":param nh: number of equality constraints (default 0)\n"            \
          ":param ng_T: number of inequality terminal constraints (default "   \
          "0)\n"                                                               \
          ":param nh_T: number of equality terminal constraints (default 0)")) \
      .def(ActionModelAbstractVisitor<Model_wrap>())                           \
      .def(PrintableVisitor<Model_wrap>())                                     \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_ACTION_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)                \
  typedef ActionDataAbstractTpl<Scalar> Data;                                 \
  typedef ActionModelAbstractTpl<Scalar> Model;                               \
  typedef std::shared_ptr<Data> ActionDataPtr;                                \
  StdVectorPythonVisitor<std::vector<ActionDataPtr>, true>::expose(           \
      "StdVec_ActionData");                                                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                        \
  bp::class_<Data, boost::noncopyable>(                                       \
      "ActionDataAbstract",                                                   \
      "Abstract class for action data.\n\n"                                   \
      "In crocoddyl, an action data contains all the required information "   \
      "for processing an user-defined action model. The action data "         \
      "typically is allocated onces by running model.createData() and "       \
      "contains the first- and second-order derivatives of the dynamics and " \
      "cost function, respectively.",                                         \
      bp::init<Model*>(                                                       \
          bp::args("self", "model"),                                          \
          "Create common data shared between AMs.\n\n"                        \
          "The action data uses the model in order to first process it.\n"    \
          ":param model: action model"))                                      \
      .def(ActionDataAbstractVisitor<Data>())                                 \
      .def(CopyableVisitor<Data>());

void exposeActionAbstract() {
  CROCODDYL_ACTION_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTION_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
