///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/activations/weighted-quadratic.hpp"

#include "python/crocoddyl/core/activation-base.hpp"
#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActivationModelWeightedQuadVisitor
    : public bp::def_visitor<ActivationModelWeightedQuadVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "r"),
           "Compute the 0.5 * ||r||_w^2.\n\n"
           ":param data: activation data\n"
           ":param r: residual vector")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "r"),
             "Compute the derivatives of a quadratic function.\n\n"
             ":param data: activation data\n"
             "Note that the Hessian is constant, so we don't write again this "
             "value.\n"
             "It assumes that calc has been run first.\n"
             ":param r: residual vector \n")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the weighted quadratic action data.")
        .add_property("weights",
                      bp::make_function(&Model::get_weights,
                                        bp::return_internal_reference<>()),
                      &Model::set_weights, "weights of the quadratic term");
  }
};

#define CROCODDYL_ACTIVATION_MODEL_WEIGHTEDQUAD_PYTHON_BINDINGS(Scalar)   \
  typedef ActivationModelWeightedQuadTpl<Scalar> Model;                   \
  typedef ActivationModelAbstractTpl<Scalar> ModelBase;                   \
  typedef typename Model::VectorXs VectorXs;                              \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                   \
  bp::class_<Model, bp::bases<ModelBase>>(                                \
      "ActivationModelWeightedQuad",                                      \
      "Weighted quadratic activation model.\n\n"                          \
      "A weighted quadratic action describes a quadratic function that "  \
      "depends on the residual, i.e., 0.5 *||r||_w^2.",                   \
      bp::init<VectorXs>(                                                 \
          bp::args("self", "weights"),                                    \
          "Initialize the activation model.\n\n"                          \
          ":param weights: weights vector, note that nr=weights.size()")) \
      .def(ActivationModelWeightedQuadVisitor<Model>())                   \
      .def(CastVisitor<Model>())                                          \
      .def(PrintableVisitor<Model>())                                     \
      .def(CopyableVisitor<Model>());

void exposeActivationWeightedQuad() {
  CROCODDYL_ACTIVATION_MODEL_WEIGHTEDQUAD_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
