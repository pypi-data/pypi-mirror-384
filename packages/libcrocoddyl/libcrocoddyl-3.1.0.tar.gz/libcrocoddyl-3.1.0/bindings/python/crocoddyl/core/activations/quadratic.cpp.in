///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/activations/quadratic.hpp"

#include "python/crocoddyl/core/activation-base.hpp"
#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActivationModelQuadVisitor
    : public bp::def_visitor<ActivationModelQuadVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "r"),
           "Compute the 0.5 * ||r||^2.\n\n"
           ":param data: activation data\n"
           ":param r: residual vector")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "r"),
             "Compute the derivatives of a quadratic function.\n\n"
             "Note that the Hessian is constant, so we don't write again this "
             "value.\n"
             "It assumes that calc has been run first.\n"
             ":param data: activation data\n"
             ":param r: residual vector \n")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the quadratic activation data.\n\n");
  }
};

#define CROCODDYL_ACTIVATION_MODEL_QUAD_PYTHON_BINDINGS(Scalar)                \
  typedef ActivationModelQuadTpl<Scalar> Model;                                \
  typedef ActivationModelAbstractTpl<Scalar> ModelBase;                        \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model, bp::bases<ModelBase>>(                                     \
      "ActivationModelQuad",                                                   \
      "Quadratic activation model.\n\n"                                        \
      "A quadratic action describes a quadratic function that depends on the " \
      "residual, i.e., 0.5 *||r||^2.",                                         \
      bp::init<std::size_t>(                                                   \
          bp::args("self", "nr"),                                              \
          "Initialize the activation model.\n\n"                               \
          ":param nr: dimension of the cost-residual vector"))                 \
      .def(ActivationModelQuadVisitor<Model>())                                \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

void exposeActivationQuad() {
  CROCODDYL_ACTIVATION_MODEL_QUAD_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
