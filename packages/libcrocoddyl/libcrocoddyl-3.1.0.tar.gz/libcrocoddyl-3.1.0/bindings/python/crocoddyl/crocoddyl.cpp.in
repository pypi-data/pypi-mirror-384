///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh, INRIA,
//                          Heriot-Watt University
// University of Oxford Copyright note valid unless otherwise stated in
// individual files. All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/utils/version.hpp"
#include "python/crocoddyl/fwd.hpp"
#include "python/crocoddyl/utils/set-converter.hpp"
#include "python/crocoddyl/utils/vector-converter.hpp"

#define SCALAR_@SCALAR_NAME@

namespace crocoddyl {
namespace python {

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libcrocoddyl_pywrap_@SCALAR_NAME@) {
  bp::scope().attr("__version__") = crocoddyl::printVersion();
  bp::scope().attr("__raw_version__") = bp::str(CROCODDYL_VERSION);

#ifdef SCALAR_float64
  bp::enum_<DType>("DType")
      .value("Float64", DType::Float64)
      .value("Float32", DType::Float32)
#ifdef CROCODDYL_WITH_CODEGEN
      .value("ADFloat64", DType::ADFloat64)
#endif
      ;
#endif

  eigenpy::enableEigenPy();
#ifdef CROCODDYL_WITH_CODEGEN
  // Check if pycppad module is already importable
  PyObject* pycppad_module = PyImport_ImportModule("pycppad");
  if (pycppad_module != nullptr) {
    Py_DECREF(pycppad_module);  // don't leak
    // Do not call enablePyCppAD, already imported
  } else {
    PyErr_Clear();  // clear the error if import failed
    // pycppad::enablePyCppAD();  // not found, so we register the converters
  }
  bp::scope().attr("WITH_CODEGEN") = true;
#else
  bp::scope().attr("WITH_CODEGEN") = false;
#endif

  typedef double Scalar;
  typedef Eigen::Matrix<Scalar, 4, 1> Vector4;
  typedef Eigen::Matrix<Scalar, 6, 1> Vector6;
  typedef Eigen::Matrix<Scalar, 4, 6> Matrix46;
  typedef Eigen::Matrix<Scalar, 6, Eigen::Dynamic> Matrix6x;
  typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 3> MatrixX3;
  typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> VectorX;
  typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> MatrixX;
  typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>
      RowMatrixX;

  eigenpy::enableEigenPySpecific<Vector4>();
  eigenpy::enableEigenPySpecific<Vector6>();
  eigenpy::enableEigenPySpecific<Matrix46>();
  eigenpy::enableEigenPySpecific<MatrixX3>();
  eigenpy::enableEigenPySpecific<Matrix6x>();

  // Register converters between std::vector and Python list
  StdVectorPythonVisitor<std::vector<VectorX>, true>::expose("StdVec_VectorX");
  StdVectorPythonVisitor<std::vector<MatrixX>, true>::expose("StdVec_MatrixX");
  StdVectorPythonVisitor<std::vector<RowMatrixX>, true>::expose(
      "StdVec_RowMatrixX");

#ifdef SCALAR_float64
  // Register converters between std::set and Python set
  StdSetPythonVisitor<std::string, std::less<std::string>,
                      std::allocator<std::string>,
                      true>::expose("StdSet_String");
#endif

  exposeCore();
  exposeMultibody();
}

}  // namespace python
}  // namespace crocoddyl
