///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/actions/free-invdyn.hpp"

#include "python/crocoddyl/core/diff-action-base.hpp"
#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct DifferentialActionModelFreeInvDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionModelFreeInvDynamicsVisitor<Model>> {
  typedef typename Model::DifferentialActionDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the next state and cost value.\n\n"
           ":param data: free inverse-dynamics data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the differential multibody system "
            "(free of contact) and its cost functions.\n\n"
            "It computes the partial derivatives of the differential multibody "
            "system and the cost function. It assumes that calc has been run "
            "first. This function builds a quadratic approximation of the\n"
            "action model (i.e. dynamical system and cost function).\n"
            ":param data: free inverse-dynamics data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, bp::args("self"),
             "Create the free inverse-dynamics differential action data.")
        .add_property(
            "actuation",
            bp::make_function(&Model::get_actuation,
                              bp::return_value_policy<bp::return_by_value>()),
            "actuation model")
        .add_property(
            "costs",
            bp::make_function(&Model::get_costs,
                              bp::return_value_policy<bp::return_by_value>()),
            "total cost model")
        .add_property(
            "constraints",
            bp::make_function(&Model::get_constraints,
                              bp::return_value_policy<bp::return_by_value>()),
            "constraint model manager");
  }
};

template <typename Model>
struct DifferentialActionModelFreeInvDynamicsResidualModelActuationVisitor
    : public bp::def_visitor<
          DifferentialActionModelFreeInvDynamicsResidualModelActuationVisitor<
              Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the actuation residual.\n\n"
           ":param data: residual data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the actuation residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)\n")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the actuation residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for the actuation residual.\n"
             ":param data: shared data\n"
             ":return residual data.");
  }
};

template <typename Data>
struct DifferentialActionDataFreeInvDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionDataFreeInvDynamicsVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "pinocchio",
          bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
          "pinocchio data")
        .add_property("multibody",
                      bp::make_getter(&Data::multibody,
                                      bp::return_internal_reference<>()),
                      "multibody data")
        .add_property(
            "costs",
            bp::make_getter(&Data::costs,
                            bp::return_value_policy<bp::return_by_value>()),
            "total cost data")
        .add_property(
            "constraints",
            bp::make_getter(&Data::constraints,
                            bp::return_value_policy<bp::return_by_value>()),
            "constraint data");
  }
};

#define CROCODDYL_ACTION_MODEL_FREE_INVDYN_PYTHON_BINDINGS(Scalar)             \
  typedef DifferentialActionModelFreeInvDynamicsTpl<Scalar> Model;             \
  typedef DifferentialActionModelAbstractTpl<Scalar> ModelBase;                \
  typedef typename Model::StateMultibody State;                                \
  typedef typename Model::ActuationModelAbstract Actuation;                    \
  typedef typename Model::CostModelSum Costs;                                  \
  typedef typename Model::ConstraintModelManager Constraints;                  \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::scope model_outer =                                                      \
      bp::class_<Model, bp::bases<ModelBase>>(                                 \
          "DifferentialActionModelFreeInvDynamics",                            \
          "Differential action model for free inverse dynamics in multibody "  \
          "systems.\n\n"                                                       \
          "This class implements the dynamics using Recursive Newton Euler "   \
          "Algorithm (RNEA) as an equality constraint. The stack of cost and " \
          "constraint functions are implemented in ConstraintModelManager() "  \
          "and CostModelSum(), respectively.",                                 \
          bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>,         \
                   std::shared_ptr<Costs>,                                     \
                   bp::optional<std::shared_ptr<Constraints>>>(                \
              bp::args("self", "state", "actuation", "costs", "constraints"),  \
              "Initialize the free inverse-dynamics action model.\n\n"         \
              "It describes the kinematic evolution of the multibody system "  \
              "and computes the needed torques using inverse dynamics.\n"      \
              ":param state: multibody state\n"                                \
              ":param actuation: abstract actuation model\n"                   \
              ":param costs: stack of cost functions\n"                        \
              ":param constraints: stack of constraint functions"))            \
          .def(DifferentialActionModelFreeInvDynamicsVisitor<Model>())         \
          .def(CastVisitor<Model>())                                           \
          .def(PrintableVisitor<Model>())                                      \
          .def(CopyableVisitor<Model>());                                      \
  typedef typename Model::ResidualModelActuation ResidualModelActuation;       \
  typedef typename ResidualModelActuation::Base ResidualModelBase;             \
  bp::register_ptr_to_python<std::shared_ptr<ResidualModelActuation>>();       \
  bp::class_<ResidualModelActuation, bp::bases<ResidualModelBase>>(            \
      "ResidualModelActuation",                                                \
      "This residual function enforces the torques of under-actuated joints "  \
      "(e.g., floating-base joints) to be zero. We compute these torques and " \
      "their derivatives using RNEA inside "                                   \
      "DifferentialActionModelFreeInvDynamics.",                               \
      bp::init<std::shared_ptr<State>, std::size_t>(                           \
          bp::args("self", "state", "nu"),                                     \
          "Initialize the actuation residual model.\n\n"                       \
          ":param state: state description\n"                                  \
          ":param nu: dimension of the joint torques"))                        \
      .def(                                                                    \
          DifferentialActionModelFreeInvDynamicsResidualModelActuationVisitor< \
              ResidualModelActuation>())                                       \
      .def(CopyableVisitor<ResidualModelActuation>());

#define CROCODDYL_ACTION_DATA_FREE_INVDYN_PYTHON_BINDINGS(Scalar)           \
  typedef DifferentialActionDataFreeInvDynamicsTpl<Scalar> Data;            \
  typedef DifferentialActionDataAbstractTpl<Scalar> DataBase;               \
  typedef DifferentialActionModelFreeInvDynamicsTpl<Scalar> Model;          \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                      \
  bp::scope data_outer =                                                    \
      bp::class_<Data, bp::bases<DataBase>>(                                \
          "DifferentialActionDataFreeInvDynamics",                          \
          "Action data for the free inverse-dynamics system.",              \
          bp::init<Model*>(                                                 \
              bp::args("self", "model"),                                    \
              "Create free inverse-dynamics action data.\n\n"               \
              ":param model: free inverse-dynamics action model"))          \
          .def(DifferentialActionDataFreeInvDynamicsVisitor<Data>())        \
          .def(CopyableVisitor<Data>());                                    \
  typedef typename Model::ResidualModelActuation ResidualModelActuation;    \
  typedef typename Data::ResidualDataActuation ResidualDataActuation;       \
  typedef typename ResidualDataActuation::Base ResidualDataBase;            \
  typedef                                                                   \
      typename ResidualModelActuation::DataCollectorAbstract DataCollector; \
  bp::register_ptr_to_python<std::shared_ptr<ResidualDataActuation>>();     \
  bp::class_<ResidualDataActuation, bp::bases<ResidualDataBase>>(           \
      "ResidualDataActuation", "Data for actuation residual.\n\n",          \
      bp::init<ResidualModelActuation*, DataCollector*>(                    \
          bp::args("self", "model", "data"),                                \
          "Create actuation residual data.\n\n"                             \
          ":param model: actuation residual model\n"                        \
          ":param data: shared data")[bp::with_custodian_and_ward<          \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                      \
      .def(CopyableVisitor<ResidualDataActuation>());

void exposeDifferentialActionFreeInvDynamics() {
  CROCODDYL_ACTION_MODEL_FREE_INVDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTION_DATA_FREE_INVDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
