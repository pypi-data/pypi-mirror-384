///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/impulses/impulse-6d.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ImpulseModel6DVisitor
    : public bp::def_visitor<ImpulseModel6DVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "x"),
           "Compute the 6D impulse Jacobian and drift.\n\n"
           "The rigid impulse model throught acceleration-base holonomic "
           "constraint\n"
           "of the impulse frame placement.\n"
           ":param data: impulse data\n"
           ":param x: state point (dim. state.nx)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x"),
             "Compute the derivatives of the 6D impulse holonomic "
             "constraint.\n\n"
             "The rigid impulse model throught acceleration-base holonomic "
             "constraint\n"
             "of the impulse frame placement.\n"
             "It assumes that calc has been run first.\n"
             ":param data: cost data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateForce", &Model::updateForce,
             bp::args("self", "data", "force"),
             "Convert the force into a stack of spatial forces.\n\n"
             ":param data: cost data\n"
             ":param lambda: force vector (dimension 6)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the 6D impulse data.\n\n"
             "Each impulse model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for a predefined cost.\n"
             ":param data: Pinocchio data\n"
             ":return impulse data.");
  }
};

template <typename Data>
struct ImpulseData6DVisitor
    : public bp::def_visitor<ImpulseData6DVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property("dv0_local_dq",
                    bp::make_getter(&Data::dv0_local_dq,
                                    bp::return_internal_reference<>()),
                    bp::make_setter(&Data::dv0_local_dq),
                    "Jacobian of the desired local contact velocity")
        .add_property(
            "fJf",
            bp::make_getter(&Data::fJf, bp::return_internal_reference<>()),
            "local Jacobian of the impulse frame")
        .add_property("v_partial_dq",
                      bp::make_getter(&Data::v_partial_dq,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body velocity")
        .add_property("v_partial_dv",
                      bp::make_getter(&Data::v_partial_dv,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body velocity");
  }
};

#define CROCODDYL_IMPULSE_MODEL_6D_PYTHON_BINDINGS(Scalar)                    \
  typedef ImpulseModel6DTpl<Scalar> Model;                                    \
  typedef ImpulseModelAbstractTpl<Scalar> ModelBase;                          \
  typedef Model::StateMultibody State;                                        \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                       \
  bp::class_<Model, bp::bases<ModelBase>>(                                    \
      "ImpulseModel6D",                                                       \
      "Rigid 6D impulse model.\n\n"                                           \
      "It defines a rigid 6D impulse models based on acceleration-based "     \
      "holonomic constraints. The calc and calcDiff functions compute the "   \
      "impulse Jacobian and drift (holonomic constraint) or the derivatives " \
      "of the holonomic constraint, respectively.",                           \
      bp::init<std::shared_ptr<State>, std::size_t,                           \
               bp::optional<pinocchio::ReferenceFrame>>(                      \
          bp::args("self", "state", "frame", "type"),                         \
          "Initialize the impulse model.\n\n"                                 \
          ":param state: state of the multibody system\n"                     \
          ":param type: type of impulse\n"                                    \
          ":param frame: reference frame id"))                                \
      .def(ImpulseModel6DVisitor<Model>())                                    \
      .def(CastVisitor<Model>())                                              \
      .def(PrintableVisitor<Model>())                                         \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_IMPULSE_DATA_6D_PYTHON_BINDINGS(Scalar)             \
  typedef ImpulseData6DTpl<Scalar> Data;                              \
  typedef ImpulseDataAbstractTpl<Scalar> DataBase;                    \
  typedef ImpulseModel6DTpl<Scalar> Model;                            \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data, bp::bases<DataBase>>(                              \
      "ImpulseData6D", "Data for 6D impulse.\n\n",                    \
      bp::init<Model*, PinocchioData*>(                               \
          bp::args("self", "model", "data"),                          \
          "Create 6D impulse data.\n\n"                               \
          ":param model: 6D impulse model\n"                          \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ImpulseData6DVisitor<Data>())                              \
      .def(CopyableVisitor<Data>());

void exposeImpulse6D() {
  CROCODDYL_IMPULSE_MODEL_6D_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_IMPULSE_DATA_6D_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
