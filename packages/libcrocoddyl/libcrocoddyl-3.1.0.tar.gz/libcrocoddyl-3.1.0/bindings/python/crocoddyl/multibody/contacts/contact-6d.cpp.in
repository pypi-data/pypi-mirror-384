///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/contacts/contact-6d.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ContactModel6DVisitor
    : public bp::def_visitor<ContactModel6DVisitor<Model>> {
  typedef typename Model::StateMultibody State;
  typedef typename Model::SE3 SE3;
  typedef typename Model::Vector2s Vector2s;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, SE3,
                    pinocchio::ReferenceFrame, bp::optional<Vector2s>>(
               bp::args("self", "state", "id", "pref", "type", "gains"),
               "Initialize the contact model.\n\n"
               ":param state: state of the multibody system\n"
               ":param id: reference frame id of the contact\n"
               ":param pref: contact placement used for the Baumgarte "
               "stabilization\n"
               ":param type: type of contact\n"
               ":param gains: gains of the contact model (default "
               "np.matrix([0.,0.]))"))
        .def("calc", &Model::calc, bp::args("self", "data", "x"),
             "Compute the 6D contact Jacobian and drift.\n\n"
             "The rigid contact model throught acceleration-base holonomic "
             "constraint of the contact frame placement.\n"
             ":param data: contact data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x"),
             "Compute the derivatives of the 6D contact holonomic "
             "constraint.\n\n"
             "The rigid contact model throught acceleration-base holonomic "
             "constraint of the contact frame placement. It assumes that calc "
             "has been run first.\n"
             ":param data: cost data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateForce", &Model::updateForce,
             bp::args("self", "data", "force"),
             "Convert the Lagrangian into a stack of spatial forces.\n\n"
             ":param data: cost data\n"
             ":param force: force vector (dimension 6)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the 6D contact data.\n\n"
             "Each contact model has its own data that needs to be allocated. "
             "This function returns the allocated data for a predefined cost.\n"
             ":param data: Pinocchio data\n"
             ":return contact data.")
        .add_property("reference",
                      bp::make_function(&Model::get_reference,
                                        bp::return_internal_reference<>()),
                      &Model::set_reference, "reference contact placement")
        .add_property(
            "gains",
            bp::make_function(&Model::get_gains,
                              bp::return_value_policy<bp::return_by_value>()),
            "contact gains");
  }
};

template <typename Data>
struct ContactData6DVisitor
    : public bp::def_visitor<ContactData6DVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "rMf",
          bp::make_getter(&Data::jMf,
                          bp::return_value_policy<bp::return_by_value>()),
          "error frame placement of the contact frame")
        .add_property(
            "v",
            bp::make_getter(&Data::v,
                            bp::return_value_policy<bp::return_by_value>()),
            "spatial velocity of the contact body")
        .add_property(
            "a0_local",
            bp::make_getter(&Data::a0_local,
                            bp::return_value_policy<bp::return_by_value>()),
            "desired local contact acceleration")
        .add_property("v_partial_dq",
                      bp::make_getter(&Data::v_partial_dq,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body velocity")
        .add_property("a_partial_dq",
                      bp::make_getter(&Data::a_partial_dq,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body acceleration")
        .add_property("a_partial_dv",
                      bp::make_getter(&Data::a_partial_dv,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body acceleration")
        .add_property("a_partial_da",
                      bp::make_getter(&Data::a_partial_da,
                                      bp::return_internal_reference<>()),
                      "Jacobian of the spatial body acceleration");
  }
};

#define CROCODDYL_CONTACT_MODEL_6D_PYTHON_BINDINGS(Scalar)                    \
  typedef ContactModel6DTpl<Scalar> Model;                                    \
  typedef ContactModelAbstractTpl<Scalar> ModelBase;                          \
  typedef Model::StateMultibody State;                                        \
  typedef Model::SE3 SE3;                                                     \
  typedef Model::Vector2s Vector2s;                                           \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                       \
  bp::class_<Model, bp::bases<ModelBase>>(                                    \
      "ContactModel6D",                                                       \
      "Rigid 6D contact model.\n\n"                                           \
      "It defines a rigid 6D contact models based on acceleration-based "     \
      "holonomic constraints. The calc and calcDiff functions compute the "   \
      "contact Jacobian and drift (holonomic constraint) or the derivatives " \
      "of the holonomic constraint, respectively.",                           \
      bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, SE3,            \
               pinocchio::ReferenceFrame, std::size_t,                        \
               bp::optional<Vector2s>>(                                       \
          bp::args("self", "state", "id", "pref", "type", "nu", "gains"),     \
          "Initialize the contact model.\n\n"                                 \
          ":param state: state of the multibody system\n"                     \
          ":param id: reference frame id of the contact\n"                    \
          ":param pref: contact placement used for the Baumgarte "            \
          "stabilization\n"                                                   \
          ":param type: type of contact\n"                                    \
          ":param nu: dimension of control vector\n"                          \
          ":param gains: gains of the contact model (default "                \
          "np.matrix([0.,0.]))"))                                             \
      .def(ContactModel6DVisitor<Model>())                                    \
      .def(CastVisitor<Model>())                                              \
      .def(PrintableVisitor<Model>())                                         \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_CONTACT_DATA_6D_PYTHON_BINDINGS(Scalar)             \
  typedef ContactData6DTpl<Scalar> Data;                              \
  typedef ContactDataAbstractTpl<Scalar> DataBase;                    \
  typedef ContactModel6DTpl<Scalar> Model;                            \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data, bp::bases<DataBase>>(                              \
      "ContactData6D", "Data for 6D contact.\n\n",                    \
      bp::init<Model*, PinocchioData*>(                               \
          bp::args("self", "model", "data"),                          \
          "Create 6D contact data.\n\n"                               \
          ":param model: 6D contact model\n"                          \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ContactData6DVisitor<Data>())                              \
      .def(CopyableVisitor<Data>());

void exposeContact6D() {
#pragma GCC diagnostic push  // TODO: Remove once the deprecated FrameXX has
                             // been removed in a future release
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  CROCODDYL_CONTACT_MODEL_6D_PYTHON_BINDINGS(@SCALAR_TYPE@)

#pragma GCC diagnostic pop

  CROCODDYL_CONTACT_DATA_6D_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
