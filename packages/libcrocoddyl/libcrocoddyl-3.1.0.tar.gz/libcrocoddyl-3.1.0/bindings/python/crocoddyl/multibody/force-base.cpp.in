///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/force-base.hpp"

#include "python/crocoddyl/multibody/contact-base.hpp"
#include "python/crocoddyl/multibody/impulse-base.hpp"
#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Data>
struct ForceDataAbstractVisitor
    : public bp::def_visitor<ForceDataAbstractVisitor<Data>> {
  typedef typename Data::Scalar Scalar;
  typedef ImpulseModelAbstractTpl<Scalar> ImpulseModel;
  typedef pinocchio::DataTpl<Scalar> PinocchioData;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(
          bp::init<ImpulseModel*, PinocchioData*>()[bp::with_custodian_and_ward<
              1, 2, bp::with_custodian_and_ward<1, 3>>()])
        .add_property("pinocchio",
                      bp::make_getter(&Data::pinocchio,
                                      bp::return_internal_reference<>()),
                      "pinocchio data")
        .def_readwrite("frame", &Data::frame, "frame id of the contact")
        .def_readwrite("type", &Data::type, "type of contact")
        .add_property(
            "jMf",
            bp::make_getter(&Data::jMf,
                            bp::return_value_policy<bp::return_by_value>()),
            bp::make_setter(&Data::jMf),
            "local frame placement of the contact frame")
        .add_property(
            "Jc", bp::make_getter(&Data::Jc, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Jc), "contact Jacobian")
        .def_readwrite(
            "f", &Data::f,
            "contact force expressed in the coordinate defined by type")
        .def_readwrite(
            "fext", &Data::fext,
            "external spatial force at the parent joint level. Note "
            "that we could compute the force at the "
            "contact frame by using jMf (i.e. data.jMf.actInv(data.f)")
        .add_property(
            "df_dx",
            bp::make_getter(&Data::df_dx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::df_dx),
            "Jacobian of the contact forces expressed in the "
            "coordinate defined by type")
        .add_property(
            "df_du",
            bp::make_getter(&Data::df_du, bp::return_internal_reference<>()),
            bp::make_setter(&Data::df_du),
            "Jacobian of the contact forces expressed in the "
            "coordinate defined by type");
  }
};

#define CROCODDYL_FORCE_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)         \
  typedef ForceDataAbstractTpl<Scalar> Data;                          \
  typedef ContactModelAbstractTpl<Scalar> ContactModel;               \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data>(                                                   \
      "ForceDataAbstract", "Abstract class for force datas.\n\n",     \
      bp::init<ContactModel*, PinocchioData*>(                        \
          bp::args("self", "model", "data"),                          \
          "Create common data shared between force models.\n\n"       \
          ":param model: force/impulse model\n"                       \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ForceDataAbstractVisitor<Data>())                          \
      .def(CopyableVisitor<Data>());

void exposeForceAbstract() {
  CROCODDYL_FORCE_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
