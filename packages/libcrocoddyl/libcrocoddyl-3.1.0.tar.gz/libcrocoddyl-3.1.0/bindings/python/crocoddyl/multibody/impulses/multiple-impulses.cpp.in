///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/impulses/multiple-impulses.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"
#include "python/crocoddyl/utils/map-converter.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ImpulseItemVisitor : public bp::def_visitor<ImpulseItemVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def_readwrite("name", &Model::name, "impulse name")
        .add_property(
            "impulse",
            bp::make_getter(&Model::impulse,
                            bp::return_value_policy<bp::return_by_value>()),
            "impulse model")
        .def_readwrite("active", &Model::active, "impulse status")
        .def(CopyableVisitor<Model>());
  }
};

template <typename Model>
struct ImpulseModelMultipleVisitor
    : public bp::def_visitor<ImpulseModelMultipleVisitor<Model>> {
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(ImpulseModelMultiple_addImpulse_wrap,
                                         Model::addImpulse, 2, 3)
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(
          "addImpulse", &Model::addImpulse,
          ImpulseModelMultiple_addImpulse_wrap(
              bp::args("self", "name", "impulse", "active"),
              "Add an impulse item.\n\n"
              ":param name: impulse name\n"
              ":param impulse: impulse model\n"
              ":param active: True if the impulse is activated (default true)"))
        .def("removeImpulse", &Model::removeImpulse, bp::args("self", "name"),
             "Remove an impulse item.\n\n"
             ":param name: impulse name")
        .def("changeImpulseStatus", &Model::changeImpulseStatus,
             bp::args("self", "name", "active"),
             "Change the impulse status.\n\n"
             ":param name: impulse name\n"
             ":param active: impulse status (true for active and false for "
             "inactive)")
        .def("calc", &Model::calc, bp::args("self", "data", "x"),
             "Compute the impulse Jacobian and drift.\n\n"
             "The rigid impulse model throught acceleration-base holonomic "
             "constraint of the impulse frame placement.\n"
             ":param data: impulse data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x"),
             "Compute the derivatives of the impulse holonomic constraint.\n\n"
             "The rigid impulse model throught acceleration-base holonomic "
             "constraint of the impulse frame placement. It assumes that calc "
             "has been run first.\n"
             ":param data: impulse data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateVelocity", &Model::updateVelocity,
             bp::args("self", "data", "vnext"),
             "Update the system velocity after impulse.\n\n"
             ":param data: impulse data\n"
             ":param vnext: velocity after impulse (dimension nv)")
        .def("updateForce", &Model::updateForce,
             bp::args("self", "data", "force"),
             "Update the spatial impulse defined in frame coordinate.\n\n"
             ":param data: impulse data\n"
             ":param force: force vector (dimension ni)")
        .def("updateVelocityDiff", &Model::updateVelocityDiff,
             bp::args("self", "data", "dvnext_dx"),
             "Update the Jacobian of the system velocity after impulse.\n\n"
             ":param data: impulse data\n"
             ":param dvnext_dx: Jacobian of the impulse velocity (dimension "
             "nv*ndx)")
        .def("updateForceDiff", &Model::updateForceDiff,
             bp::args("self", "data", "df_dx"),
             "Update the Jacobian of the spatial impulse defined in frame "
             "coordinate.\n\n"
             ":param data: impulse data\n"
             ":param df_dx: Jacobian of the impulse force (dimension ni*ndx)")
        .def("updateRneaDiff", &Model::updateRneaDiff,
             bp::args("self", "data", "pinocchio"),
             "Update the RNEA derivative dtau_dq by by adding the skew term "
             "(necessary for impulses expressed in LOCAL_WORLD_ALIGNED / "
             "WORLD).\n\n"
             ":param data: impulse data\n"
             ":param pinocchio: Pinocchio data")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the total impulse data.\n\n"
             ":param data: Pinocchio data\n"
             ":return total impulse data.")
        .add_property(
            "impulses",
            bp::make_function(&Model::get_impulses,
                              bp::return_value_policy<bp::return_by_value>()),
            "stack of impulses")
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state of the multibody system")
        .add_property("nc", bp::make_function(&Model::get_nc),
                      "dimension of the active impulse vector")
        .add_property("nc_total", bp::make_function(&Model::get_nc_total),
                      "dimension of the total impulse vector")
        .add_property(
            "active_set",
            bp::make_function(&Model::get_active_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "set of names of active impulse items")
        .add_property(
            "inactive_set",
            bp::make_function(&Model::get_inactive_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "set of names of inactive impulse items")
        .def("getImpulseStatus", &Model::getImpulseStatus,
             bp::args("self", "name"),
             "Return the impulse status of a given impulse name.\n\n"
             ":param name: impulse name");
  }
};

template <typename Data>
struct ImpulseDataMultipleVisitor
    : public bp::def_visitor<ImpulseDataMultipleVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "Jc", bp::make_getter(&Data::Jc, bp::return_internal_reference<>()),
          bp::make_setter(&Data::Jc),
          "Jacobian for all impulses (active and inactive)")
        .add_property(
            "dv0_dq",
            bp::make_getter(&Data::dv0_dq, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dv0_dq),
            "Jacobian of the previous impulse velocity (active and inactive)")
        .add_property(
            "vnext",
            bp::make_getter(&Data::vnext, bp::return_internal_reference<>()),
            bp::make_setter(&Data::vnext), "impulse system velocity")
        .add_property("dvnext_dx",
                      bp::make_getter(&Data::dvnext_dx,
                                      bp::return_internal_reference<>()),
                      bp::make_setter(&Data::dvnext_dx),
                      "Jacobian of the impulse system velocity")
        .add_property(
            "impulses",
            bp::make_getter(&Data::impulses,
                            bp::return_value_policy<bp::return_by_value>()),
            "stack of impulses data")
        .def_readwrite("fext", &Data::fext, "external spatial forces");
  }
};

#define CROCODDYL_IMPULSE_ITEM_PYTHON_BINDINGS(Scalar)                       \
  typedef ImpulseItemTpl<Scalar> Item;                                      \
  typedef Item::ImpulseModelAbstract ImpulseModel;                          \
  typedef std::shared_ptr<Item> ImpulseItemPtr;                             \
  typedef ImpulseDataAbstractTpl<Scalar> ImpulseData;                        \
  typedef std::shared_ptr<ImpulseData> ImpulseDataPtr;                       \
  StdMapPythonVisitor<                                                       \
      std::string, ImpulseItemPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, ImpulseItemPtr>>,          \
      true>::expose("StdMap_ImpulseItem");                                   \
  StdMapPythonVisitor<                                                       \
      std::string, ImpulseDataPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, ImpulseDataPtr>>,          \
      true>::expose("StdMap_ImpulseData");                                   \
  bp::register_ptr_to_python<std::shared_ptr<Item>>();                      \
  bp::class_<Item>(                                                         \
      "ImpulseItem", "Describe a impulse item.\n\n",                         \
      bp::init<std::string, std::shared_ptr<ImpulseModel>,                   \
               bp::optional<bool>>(                                          \
          bp::args("self", "name", "impulse", "active"),                     \
          "Initialize the impulse item.\n\n"                                 \
          ":param name: impulse name\n"                                      \
          ":param impulse: impulse model\n"                                  \
          ":param active: True if the impulse is activated (default true)")) \
      .def(ImpulseItemVisitor<Item>())                                      \
      .def(CastVisitor<Item>())                                             \
      .def(PrintableVisitor<Item>())                                        \
      .def(CopyableVisitor<Item>());

#define CROCODDYL_IMPULSE_MODEL_MULTIPLE_PYTHON_BINDINGS(Scalar)        \
  typedef ImpulseModelMultipleTpl<Scalar> Model;                        \
  typedef Model::StateMultibody State;                                  \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                 \
  bp::class_<Model>("ImpulseModelMultiple",                             \
                    bp::init<std::shared_ptr<State>>(                   \
                        bp::args("self", "state"),                      \
                        "Initialize the multiple impulse model.\n\n"    \
                        ":param state: state of the multibody system")) \
      .def(ImpulseModelMultipleVisitor<Model>())                        \
      .def(CastVisitor<Model>())                                        \
      .def(PrintableVisitor<Model>())                                   \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_IMPULSE_DATA_MULTIPLE_PYTHON_BINDINGS(Scalar)       \
  typedef ImpulseDataMultipleTpl<Scalar> Data;                        \
  typedef ImpulseModelMultipleTpl<Scalar> Model;                      \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data>(                                                   \
      "ImpulseDataMultiple", "Data class for multiple impulses.\n\n", \
      bp::init<Model*, PinocchioData*>(                               \
          bp::args("self", "model", "data"),                          \
          "Create multi-impulse data.\n\n"                            \
          ":param model: multi-impulse model\n"                       \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ImpulseDataMultipleVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeImpulseMultiple() {
  CROCODDYL_IMPULSE_ITEM_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_IMPULSE_MODEL_MULTIPLE_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_IMPULSE_DATA_MULTIPLE_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
