///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/residuals/frame-placement.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelFramePlacementVisitor
    : public bp::def_visitor<ResidualModelFramePlacementVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateMultibody State;
  typedef typename Model::SE3 SE3;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, SE3>(
               bp::args("self", "state", "id", "pref"),
               "Initialize the frame placement residual model.\n\n"
               "The default nu value is obtained from state.nv.\n"
               ":param state: state of the multibody system\n"
               ":param id: reference frame id\n"
               ":param pref: reference frame placement"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the frame placement residual.\n\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calc),
            bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the frame placement residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &ResidualModelFramePlacement::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the frame placement residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function returns the allocated data for the frame placement "
             "residual.\n"
             ":param data: shared data\n"
             ":return residual data.")
        .add_property("id", &Model::get_id, &Model::set_id,
                      "reference frame id")
        .add_property("reference",
                      bp::make_function(
                          &Model::get_reference,
                          bp::return_value_policy<bp::copy_const_reference>()),
                      &Model::set_reference, "reference frame placement");
  }
};

template <typename Data>
struct ResidualDataFramePlacementVisitor
    : public bp::def_visitor<ResidualDataFramePlacementVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "pinocchio",
          bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
          "pinocchio data")
        .add_property(
            "rMf",
            bp::make_getter(&Data::rMf,
                            bp::return_value_policy<bp::return_by_value>()),
            "error frame placement of the frame")
        .add_property(
            "rJf",
            bp::make_getter(&Data::rJf, bp::return_internal_reference<>()),
            "error Jacobian of the frame")
        .add_property(
            "fJf",
            bp::make_getter(&Data::fJf, bp::return_internal_reference<>()),
            "local Jacobian of the frame");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_FRAME_PLACEMENT_PYTHON_BINDINGS(Scalar)   \
  typedef ResidualModelFramePlacementTpl<Scalar> Model;                    \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                      \
  typedef typename Model::StateMultibody State;                            \
  typedef typename Model::SE3 SE3;                                         \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                    \
  bp::class_<Model, bp::bases<ModelBase>>(                                 \
      "ResidualModelFramePlacement",                                       \
      "This residual function defines the tracking of theframe placement " \
      "residual as r = p - pref, with p and pref as the current and "      \
      "reference frame placements, respectively.",                         \
      bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, SE3,         \
               std::size_t>(                                               \
          bp::args("self", "state", "id", "pref", "nu"),                   \
          "Initialize the frame placement residual model.\n\n"             \
          ":param state: state of the multibody system\n"                  \
          ":param id: reference frame id\n"                                \
          ":param pref: reference frame placement\n"                       \
          ":param nu: dimension of control vector"))                       \
      .def(ResidualModelFramePlacementVisitor<Model>())                    \
      .def(CastVisitor<Model>())                                           \
      .def(PrintableVisitor<Model>())                                      \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_RESIDUAL_DATA_FRAME_PLACEMENT_PYTHON_BINDINGS(Scalar)       \
  typedef ResidualDataFramePlacementTpl<Scalar> Data;                         \
  typedef ResidualDataAbstractTpl<Scalar> DataBase;                           \
  typedef ResidualModelFramePlacementTpl<Scalar> Model;                       \
  typedef Model::DataCollectorAbstract DataCollector;                         \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                        \
  bp::class_<Data, bp::bases<DataBase>>(                                      \
      "ResidualDataFramePlacement", "Data for frame placement residual.\n\n", \
      bp::init<Model*, DataCollector*>(                                       \
          bp::args("self", "model", "data"),                                  \
          "Create frame placement residual data.\n\n"                         \
          ":param model: frame placement residual model\n"                    \
          ":param data: shared data")[bp::with_custodian_and_ward<            \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                        \
      .def(ResidualDataFramePlacementVisitor<Data>())                         \
      .def(CopyableVisitor<Data>());

void exposeResidualFramePlacement() {
  CROCODDYL_RESIDUAL_MODEL_FRAME_PLACEMENT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_RESIDUAL_DATA_FRAME_PLACEMENT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
