///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/multibody/contact-base.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ContactModelAbstractVisitor
    : public bp::def_visitor<ContactModelAbstractVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", pure_virtual(&Model::calc), bp::args("self", "data", "x"),
           "Compute the contact Jacobian and drift.\n\n"
           "The rigid contact model throught acceleration-base holonomic "
           "constraint of the contact frame placement.\n"
           ":param data: contact data\n"
           ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the derivatives of contact holonomic constraint.\n\n"
             "The rigid contact model throught acceleration-base holonomic "
             "constraint of the contact frame placement. It assumes that calc "
             "has been run first.\n"
             ":param data: contact data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateForce", pure_virtual(&Model::updateForce),
             bp::args("self", "data", "force"),
             "Convert the force into a stack of spatial forces.\n\n"
             ":param data: contact data\n"
             ":param force: force vector (dimension nc)")
        .def("updateForceDiff", &Model::updateForceDiff,
             bp::args("self", "data", "df_dx", "df_du"),
             "Update the Jacobians of the force.\n\n"
             ":param data: contact data\n"
             ":param df_dx: Jacobian of the force with respect to the state\n"
             ":param df_du: Jacobian of the force with respect to the control")
        .def("setZeroForce", &Model::setZeroForce, bp::args("self", "data"),
             "Set zero the spatial force.\n\n"
             ":param data: contact data")
        .def("setZeroForceDiff", &Model::setZeroForceDiff,
             bp::args("self", "data"),
             "Set zero the derivatives of the spatial force.\n\n"
             ":param data: contact data")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the contact data.\n\n"
             "Each contact model has its own data that needs to be allocated. "
             "This function returns the allocated data for a predefined "
             "contact.\n"
             ":param data: Pinocchio data\n"
             ":return contact data.")
        .def("createData", &Model::default_createData,
             bp::with_custodian_and_ward_postcall<0, 2>())
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state of the multibody system")
        .add_property("nc", bp::make_function(&Model::get_nc),
                      "dimension of contact")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of control")
        .add_property("id", &Model::get_id, &Model::set_id,
                      "reference frame id")
        .add_property("type", bp::make_function(&Model::get_type),
                      &Model::set_type, "type of contact");
  }
};

template <typename Data>
struct ContactDataAbstractVisitor
    : public bp::def_visitor<ContactDataAbstractVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "fXj", bp::make_getter(&Data::fXj, bp::return_internal_reference<>()),
          bp::make_setter(&Data::fXj),
          "action matrix from contact to local frames")
        .add_property(
            "a0", bp::make_getter(&Data::a0, bp::return_internal_reference<>()),
            bp::make_setter(&Data::a0), "desired contact acceleration")
        .add_property(
            "da0_dx",
            bp::make_getter(&Data::da0_dx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::da0_dx),
            "Jacobian of the desired contact acceleration")
        .add_property(
            "dtau_dq",
            bp::make_getter(&Data::dtau_dq, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dtau_dq), "Force contribution to dtau_dq");
  }
};

#define CROCODDYL_CONTACT_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)               \
  typedef ContactModelAbstractTpl<Scalar> Model;                               \
  typedef ContactModelAbstractTpl_wrap<Scalar> Model_wrap;                     \
  typedef Model::StateMultibody State;                                         \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model_wrap, boost::noncopyable>(                                  \
      "ContactModelAbstract",                                                  \
      "Abstract rigid contact model.\n\n"                                      \
      "It defines a template for rigid contact models based on "               \
      "acceleration-based holonomic constraints. The calc and calcDiff "       \
      "functions compute the contact Jacobian and drift (holonomic "           \
      "constraint) or the derivatives of the holonomic constraint, "           \
      "respectively.",                                                         \
      bp::init<std::shared_ptr<State>, pinocchio::ReferenceFrame, std::size_t, \
               bp::optional<std::size_t>>(                                     \
          bp::args("self", "state", "type", "nc", "nu"),                       \
          "Initialize the contact model.\n\n"                                  \
          ":param state: state of the multibody system\n"                      \
          ":param type: type of contact\n"                                     \
          ":param nc: dimension of contact model\n"                            \
          ":param nu: dimension of the control vector (default state.nv)"))    \
      .def(ContactModelAbstractVisitor<Model_wrap>())                          \
      .def(PrintableVisitor<Model_wrap>())                                     \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_CONTACT_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)       \
  typedef ContactDataAbstractTpl<Scalar> Data;                        \
  typedef ContactModelAbstractTpl<Scalar> Model;                      \
  typedef ForceDataAbstractTpl<Scalar> ForceData;                     \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data, bp::bases<ForceData>>(                             \
      "ContactDataAbstract", "Abstract class for contact datas.\n\n", \
      bp::init<Model*, PinocchioData*>(                               \
          bp::args("self", "model", "data"),                          \
          "Create common data shared between contact models.\n\n"     \
          ":param model: contact model\n"                             \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ContactDataAbstractVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeContactAbstract() {
  CROCODDYL_CONTACT_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_CONTACT_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
