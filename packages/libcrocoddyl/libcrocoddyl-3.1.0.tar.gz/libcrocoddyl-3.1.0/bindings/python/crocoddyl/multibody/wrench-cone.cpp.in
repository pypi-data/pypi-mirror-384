///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2020-2025, University of Edinburgh, University of Oxford,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/wrench-cone.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"
#include "python/crocoddyl/utils/copyable.hpp"
#include "python/crocoddyl/utils/deprecate.hpp"
#include "python/crocoddyl/utils/printable.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct WrenchConeVisitor : public bp::def_visitor<WrenchConeVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  typedef typename Model::Matrix3s Matrix3s;
  typedef typename Model::Vector2s Vector2s;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<>(bp::args("self"),
                      "Default initialization of the wrench cone."))
        .def("update", static_cast<void (Model::*)()>(&Model::update),
             bp::args("self"),
             "Update the linear inequality (matrix and bounds).\n\n"
             "Run this function if you have changed one of the parameters.")
        .def("update",
             static_cast<void (Model::*)(const Matrix3s&, const Scalar,
                                         const Vector2s&, const Scalar,
                                         const Scalar)>(&Model::update),
             deprecated<>("Deprecated. Use update()."),
             bp::args("self", "R", "mu", "box", "min_nforce", "max_nforce"),
             "Update the linear inequality (matrix and bounds).\n\n"
             ":param R: rotation matrix that defines the cone orientation\n"
             ":param mu: friction coefficient\n"
             ":param box: dimension of the foot surface dim = (length, width)\n"
             ":param min_nforce: minimum normal force (default 0.)\n"
             ":param max_nforce: maximum normal force (default "
             "sys.float_info.max)")
        .add_property(
            "A",
            bp::make_function(&Model::get_A, bp::return_internal_reference<>()),
            "inequality matrix")
        .add_property("ub",
                      bp::make_function(&Model::get_ub,
                                        bp::return_internal_reference<>()),
                      "inequality upper bound")
        .add_property("lb",
                      bp::make_function(&Model::get_lb,
                                        bp::return_internal_reference<>()),
                      "inequality lower bound")
        .add_property(
            "nf",
            bp::make_function(&Model::get_nf,
                              bp::return_value_policy<bp::return_by_value>()),
            "number of facets")
        .add_property(
            "R",
            bp::make_function(&Model::get_R, bp::return_internal_reference<>()),
            bp::make_function(&Model::set_R), "rotation matrix")
        .add_property("box",
                      bp::make_function(&Model::get_box,
                                        bp::return_internal_reference<>()),
                      bp::make_function(&Model::set_box),
                      "box size used to define the sole")
        .add_property("mu", bp::make_function(&Model::get_mu),
                      bp::make_function(&Model::set_mu), "friction coefficient")
        .add_property("inner_appr", bp::make_function(&Model::get_inner_appr),
                      bp::make_function(&Model::set_inner_appr),
                      "type of friction cone approximation")
        .add_property(
            "min_nforce",
            bp::make_function(&Model::get_min_nforce,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Model::set_min_nforce), "minimum normal force")
        .add_property(
            "max_nforce",
            bp::make_function(&Model::get_max_nforce,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Model::set_max_nforce), "maximum normal force");
  }
};

#define CROCODDYL_WRENCH_CONE_PYTHON_BINDINGS(Scalar)                          \
  typedef WrenchConeTpl<Scalar> Model;                                         \
  typedef typename Model::Matrix3s Matrix3s;                                   \
  typedef typename Model::Vector2s Vector2s;                                   \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model>(                                                           \
      "WrenchCone", "Model of the wrench cone as lb <= Af <= ub",              \
      bp::init<Matrix3s, Scalar, Vector2s,                                     \
               bp::optional<std::size_t, bool, Scalar, Scalar>>(               \
          bp::args("self", "R", "mu", "box", "nf", "inner_appr", "min_nforce", \
                   "max_nforce"),                                              \
          "Initialize the linearize wrench cone.\n\n"                          \
          ":param R: rotation matrix that defines the cone orientation\n"      \
          ":param mu: friction coefficient\n"                                  \
          ":param box: dimension of the foot surface dim = (length, width)\n"  \
          ":param nf: number of facets (default 4)\n"                          \
          ":param inner_appr: inner or outer approximation (default True)\n"   \
          ":param min_nforce: minimum normal force (default 0.)\n"             \
          ":param max_nforce: maximum normal force (default "                  \
          "sys.float_info.max)"))                                              \
      .def(WrenchConeVisitor<Model>())                                         \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

void exposeWrenchCone() {
#pragma GCC diagnostic push  // TODO: Remove once the deprecated update call has
                             // been removed in a future release
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  CROCODDYL_WRENCH_CONE_PYTHON_BINDINGS(@SCALAR_TYPE@)

#pragma GCC diagnostic pop
}

}  // namespace python
}  // namespace crocoddyl
