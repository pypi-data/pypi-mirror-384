"use strict";(self.webpackChunk_datalayer_jupyter_mcp_tools=self.webpackChunk_datalayer_jupyter_mcp_tools||[]).push([[488],{488:(e,t,o)=>{o.r(t),o.d(t,{default:()=>v});var s=o(316),a=o(23),l=o(296),c=o(219),n=o(722),r=o(345),i=o.n(r),m=o(794),p=o(222);const d=({tool:e,onExecuteLocal:t,onExecuteRemote:o})=>{var s,a;const[l,c]=(0,r.useState)(!1),[n,m]=(0,r.useState)("{}"),[p,d]=(0,r.useState)(null),u=e.parameters&&e.parameters.properties&&Object.keys(e.parameters.properties).length>0,h=s=>{if(u&&!l)return c(!0),void m((()=>{if(!u)return"{}";const t=e.parameters.properties,o={};for(const[e,s]of Object.entries(t)){const t=s;void 0!==t.default?o[e]=t.default:"string"===t.type?o[e]=t.description?`<${t.description}>`:"":"number"===t.type?o[e]=0:"boolean"===t.type?o[e]=!1:"array"===t.type?o[e]=[]:"object"===t.type?o[e]={}:o[e]=null}return JSON.stringify(o,null,2)})());try{const a=JSON.parse(n);"local"===s?t(e.id,a):o(e.id,a),c(!1),d(null),m("{}")}catch(e){d("Invalid JSON format")}},g=()=>{c(!1),d(null),m("{}")};return i().createElement("div",{className:"mcp-tool-item"},i().createElement("div",{className:"mcp-tool-header"},i().createElement("div",{className:"mcp-tool-info"},i().createElement("div",{className:"mcp-tool-label",title:e.caption},e.label||e.id,u&&i().createElement("span",{className:"mcp-tool-param-badge",title:"This command requires parameters"},"params")),i().createElement("div",{className:"mcp-tool-id"},e.id)),!l&&i().createElement("div",{className:"mcp-tool-buttons"},i().createElement("button",{className:"mcp-tool-button mcp-button-local jp-Button jp-mod-small",onClick:()=>h("local"),disabled:!e.isEnabled,title:"Execute command locally"},"Local"),i().createElement("button",{className:"mcp-tool-button mcp-button-remote jp-Button jp-mod-small jp-mod-styled",onClick:()=>h("remote"),disabled:!e.isEnabled,title:"Execute command via WebSocket"},"Remote"))),l&&i().createElement("div",{className:"mcp-tool-form"},i().createElement("div",{className:"mcp-form-header"},i().createElement("span",{className:"mcp-form-title"},"Parameters"),i().createElement("button",{className:"mcp-form-close",onClick:g,title:"Cancel"},"×")),(null===(s=e.parameters)||void 0===s?void 0:s.description)&&i().createElement("div",{className:"mcp-form-description"},e.parameters.description),(null===(a=e.parameters)||void 0===a?void 0:a.required)&&e.parameters.required.length>0&&i().createElement("div",{className:"mcp-form-required"},"Required: ",e.parameters.required.join(", ")),i().createElement("textarea",{className:"mcp-form-input",value:n,onChange:e=>m(e.target.value),placeholder:'{"source": "print(\\"Hello!\\")", "type": "code"}',rows:6}),p&&i().createElement("div",{className:"mcp-form-error"},p),i().createElement("div",{className:"mcp-form-actions"},i().createElement("button",{className:"jp-Button jp-mod-small jp-mod-reject",onClick:g},"Cancel"),i().createElement("button",{className:"jp-Button jp-mod-small",onClick:()=>h("local"),title:"Execute locally"},"Local"),i().createElement("button",{className:"jp-Button jp-mod-small jp-mod-accept",onClick:()=>h("remote"),title:"Execute via WebSocket"},"Remote"))))},u=({message:e})=>{const[t,o]=(0,r.useState)(!1);return i().createElement("div",{className:`mcp-message-item mcp-message-${e.direction}`},i().createElement("div",{className:"mcp-message-header",onClick:()=>o(!t)},i().createElement("div",{className:"mcp-message-info"},i().createElement("span",{className:`mcp-message-direction mcp-${e.direction}`},"sent"===e.direction?"→":"←"),i().createElement("span",{className:"mcp-message-type"},e.type),i().createElement("span",{className:"mcp-message-time"},e.timestamp.toLocaleTimeString())),i().createElement("span",{className:"mcp-message-expand"},t?"▼":"▶")),t&&i().createElement("div",{className:"mcp-message-body"},i().createElement("pre",null,JSON.stringify(e.data,null,2))))},h=({tools:e,messages:t,onExecuteToolLocal:o,onExecuteToolRemote:s})=>{const[a,l]=(0,r.useState)("tools"),[c,n]=(0,r.useState)(""),[m,p]=(0,r.useState)(!1);console.log(`MCPToolsPanel render: ${e.length} tools, ${t.length} messages`);const h=e.filter(e=>{const t=e.id.toLowerCase().includes(c.toLowerCase())||e.label&&e.label.toLowerCase().includes(c.toLowerCase()),o=e.parameters&&e.parameters.properties&&Object.keys(e.parameters.properties).length>0;return t&&(!m||o)});return console.log(`MCPToolsPanel: Filtered to ${h.length} tools (search: "${c}")`),i().createElement("div",{className:"mcp-tools-panel"},i().createElement("div",{className:"mcp-panel-header"},i().createElement("div",{className:"mcp-panel-stats"},i().createElement("span",{title:"Total tools"},i().createElement("strong",null,e.length)," tools"),i().createElement("span",{className:"mcp-stats-separator"},"•"),i().createElement("span",{title:"Total messages"},i().createElement("strong",null,t.length)," messages"))),i().createElement("div",{className:"mcp-panel-tabs"},i().createElement("button",{className:"mcp-tab "+("tools"===a?"mcp-tab-active":""),onClick:()=>l("tools")},"Commands (",h.length,")"),i().createElement("button",{className:"mcp-tab "+("messages"===a?"mcp-tab-active":""),onClick:()=>l("messages")},"Messages (",t.length,")")),"tools"===a&&i().createElement("div",{className:"mcp-panel-content"},i().createElement("div",{className:"mcp-search-box"},i().createElement("input",{type:"text",className:"mcp-search-input jp-mod-styled",placeholder:"Search commands...",value:c,onChange:e=>n(e.target.value)}),i().createElement("div",{className:"mcp-filter-toggle"},i().createElement("label",{className:"mcp-toggle-label"},i().createElement("input",{type:"checkbox",checked:m,onChange:e=>p(e.target.checked),className:"mcp-toggle-checkbox"}),i().createElement("span",{className:"mcp-toggle-text"},"Show only with parameters")))),i().createElement("div",{className:"mcp-tools-list"},0===h.length?i().createElement("div",{className:"mcp-empty-state"},c?"No commands found":"Loading commands..."):h.map(e=>i().createElement(d,{key:e.id,tool:e,onExecuteLocal:o,onExecuteRemote:s})))),"messages"===a&&i().createElement("div",{className:"mcp-panel-content"},i().createElement("div",{className:"mcp-messages-list"},0===t.length?i().createElement("div",{className:"mcp-empty-state"},"No messages yet"):t.slice().reverse().map(e=>i().createElement(u,{key:e.id,message:e})))))},g=new p.LabIcon({name:"@datalayer/jupyter-mcp-tools:icon",svgstr:'\n    <svg fill="currentColor" fill-rule="evenodd" height="1em" style="flex:none;line-height:1" viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg"><title>ModelContextProtocol</title><path d="M15.688 2.343a2.588 2.588 0 00-3.61 0l-9.626 9.44a.863.863 0 01-1.203 0 .823.823 0 010-1.18l9.626-9.44a4.313 4.313 0 016.016 0 4.116 4.116 0 011.204 3.54 4.3 4.3 0 013.609 1.18l.05.05a4.115 4.115 0 010 5.9l-8.706 8.537a.274.274 0 000 .393l1.788 1.754a.823.823 0 010 1.18.863.863 0 01-1.203 0l-1.788-1.753a1.92 1.92 0 010-2.754l8.706-8.538a2.47 2.47 0 000-3.54l-.05-.049a2.588 2.588 0 00-3.607-.003l-7.172 7.034-.002.002-.098.097a.863.863 0 01-1.204 0 .823.823 0 010-1.18l7.273-7.133a2.47 2.47 0 00-.003-3.537z"></path><path d="M14.485 4.703a.823.823 0 000-1.18.863.863 0 00-1.204 0l-7.119 6.982a4.115 4.115 0 000 5.9 4.314 4.314 0 006.016 0l7.12-6.982a.823.823 0 000-1.18.863.863 0 00-1.204 0l-7.119 6.982a2.588 2.588 0 01-3.61 0 2.47 2.47 0 010-3.54l7.12-6.982z"></path></svg>'});class y extends m.ReactWidget{constructor(){super(),this._tools=[],this._messages=[],this._executeCallbackLocal=null,this._executeCallbackRemote=null,this.handleExecuteToolLocal=(e,t)=>{this._executeCallbackLocal&&this._executeCallbackLocal(e,t)},this.handleExecuteToolRemote=(e,t)=>{this._executeCallbackRemote&&this._executeCallbackRemote(e,t)},this.addClass("jp-MCPToolsWidget"),this.id="mcp-tools-widget",this.title.label="",this.title.caption="Model Context Protocol Tools",this.title.icon=g,this.title.closable=!0}setTools(e){console.log(`MCPToolsWidget.setTools() called with ${e.length} tools`),this._tools=e,this.update(),console.log(`MCPToolsWidget._tools now has ${this._tools.length} tools`)}getTools(){return this._tools}addMessage(e,t,o){const s={id:`${Date.now()}-${Math.random()}`,timestamp:new Date,direction:e,type:t,data:o};this._messages.push(s),this._messages.length>100&&(this._messages=this._messages.slice(-100)),this.update()}clearMessages(){this._messages=[],this.update()}setExecuteCallbackLocal(e){this._executeCallbackLocal=e}setExecuteCallbackRemote(e){this._executeCallbackRemote=e}render(){return console.log(`MCPToolsWidget.render() called with ${this._tools.length} tools and ${this._messages.length} messages`),i().createElement(h,{tools:this._tools,messages:this._messages,onExecuteToolLocal:this.handleExecuteToolLocal,onExecuteToolRemote:this.handleExecuteToolRemote})}}var b;function E(e,t=3,o=0,s=new WeakSet){if(null==e)return e;if("boolean"==typeof e||"number"==typeof e||"string"==typeof e)return e;if(o>t)return"<max depth reached>";if(Array.isArray(e))return e.slice(0,100).map(e=>E(e,t,o+1,s));if("object"==typeof e){if(s.has(e))return"<circular reference>";s.add(e);const a={},l=Object.keys(e).slice(0,100);for(const c of l)try{a[c]=E(e[c],t,o+1,s)}catch(e){a[c]="<serialization error>"}return a}try{return String(e)}catch(e){return"<unserializable>"}}!function(e){e.appendExecute="notebook:append-execute"}(b||(b={}));class f{constructor(e,t){this.ws=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=2e3,this.app=e,this.widget=t,this.widget.setExecuteCallbackLocal((e,t)=>{this.applyToolLocal(e,t)}),this.widget.setExecuteCallbackRemote((e,t)=>{this.applyToolRemote(e,t)})}connect(){const e=l.ServerConnection.makeSettings(),t=a.URLExt.join(e.wsUrl,"jupyter-mcp-tools","echo");console.log("Connecting to WebSocket:",t),this.ws=new WebSocket(t),this.ws.onopen=()=>{console.log("WebSocket connected"),this.reconnectAttempts=0,requestAnimationFrame(async()=>{await this.registerTools()})},this.ws.onmessage=e=>{this.handleMessage(e.data)},this.ws.onerror=e=>{console.error("WebSocket error:",e)},this.ws.onclose=()=>{console.log("WebSocket closed"),this.attemptReconnect()}}attemptReconnect(){this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`),setTimeout(()=>this.connect(),this.reconnectDelay)):console.error("Max reconnection attempts reached")}async registerTools(){const e=this.app.commands,t=e.listCommands();console.log(`Total JupyterLab commands available: ${t.length}`);const o=[],s=/^[a-zA-Z0-9_-]+$/;let a=0;for(const l of t)try{let t=!0;try{t=e.isEnabled(l)}catch(e){t=!0}const c=e.label(l),n=e.caption(l),r=e.usage(l),i=l.replace(/:/g,"_");if(!s.test(i)){console.warn(`Skipping command "${l}" - transformed tool ID "${i}" contains invalid characters for MCP (must match ^[a-zA-Z0-9_-]+$)`),a++;continue}const m={id:i,commandId:l,label:c||i,caption:n||"",usage:r||"",isEnabled:t,parameters:await this.getCommandParameters(l)};o.push(m)}catch(e){console.warn(`Error processing command ${l}:`,e)}a>0&&console.log(`Skipped ${a} commands with invalid MCP tool names`),console.log(`Successfully processed ${o.length} tools`),this.widget.setTools(o);const l={type:"register_tools",tools:o};this.sendMessage(l),console.log(`Registered ${o.length} tools with backend`)}async getCommandParameters(e){try{const t={"notebook:append-execute":{type:"object",properties:{source:{type:"string",description:"The source code to insert in the cell"},type:{type:"string",enum:["code","markdown","raw"],description:"The cell type",default:"code"}},required:["source"],description:"Append and execute a cell in the current notebook"},"filebrowser:open-path":{type:"object",properties:{path:{type:"string",description:"Path to open"}},required:["path"],description:"Open a file or directory by path"},"docmanager:open":{type:"object",properties:{path:{type:"string",description:"Path to the file to open"},factory:{type:"string",description:"Widget factory name (optional)"},kernel:{type:"object",description:"Kernel options (optional)"}},required:["path"],description:"Open a document"},"notebook:insert-cell-below":{type:"object",properties:{activate:{type:"boolean",description:"Whether to activate the new cell",default:!0}},description:"Insert a cell below the current cell"},"notebook:insert-cell-above":{type:"object",properties:{activate:{type:"boolean",description:"Whether to activate the new cell",default:!0}},description:"Insert a cell above the current cell"},"console:create":{type:"object",properties:{activate:{type:"boolean",description:"Whether to activate the console",default:!0},insertMode:{type:"string",enum:["split-right","split-left","split-top","split-bottom"],description:"Where to insert the console",default:"split-right"},path:{type:"string",description:"Path for the console session"}},description:"Create a new console"}};return t[e]?t[e]:{type:"object",properties:{},description:"Command arguments (if any)"}}catch(t){return console.warn(`Error getting parameters for ${e}:`,t),{type:"object",properties:{},description:"Command arguments (if any)"}}}handleMessage(e){try{const t=JSON.parse(e);console.log("Received message:",t),this.widget.addMessage("received",t.type||"unknown",t),"apply_tool"===t.type&&this.applyToolFromServer(t.tool_id,t.parameters||{},t.execution_id)}catch(e){console.error("Error handling message:",e)}}async applyToolLocal(e,t){try{console.log(`Executing tool LOCALLY: ${e}`,t);const o=e.replace(/_/g,":");if(this.app.commands.hasCommand(o)){const s=await this.app.commands.execute(o,t);console.log(`Tool ${e} executed successfully`);const a=E(s,2);this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,result:a,success:!0})}else console.error(`Command not found: ${o}`),this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,error:`Command not found: ${o}`,success:!1})}catch(o){console.error(`Error executing tool locally ${e}:`,o),this.widget.addMessage("sent","local_execute",{tool_id:e,parameters:t,error:String(o),success:!1})}}async applyToolRemote(e,t){try{console.log(`Sending tool execution request via WebSocket: ${e}`,t);const o={type:"apply_tool",tool_id:e,parameters:t};this.sendMessage(o),console.log(`Sent apply_tool message for ${e} to server`)}catch(o){console.error(`Error sending tool execution request ${e}:`,o),this.widget.addMessage("sent","apply_tool_error",{tool_id:e,parameters:t,error:String(o)})}}async applyToolFromServer(e,t,o){try{console.log(`Applying tool from server: ${e}`,t);const s=e.replace(/_/g,":");if(this.app.commands.hasCommand(s)){const a=await this.app.commands.execute(s,t);console.log(`Tool ${e} executed successfully`);const l={type:"tool_result",tool_id:e,execution_id:o,success:!0,result:E(a,2)};this.sendMessage(l)}else{console.error(`Command not found: ${s}`);const t={type:"tool_result",tool_id:e,execution_id:o,success:!1,error:`Command not found: ${s}`};this.sendMessage(t)}}catch(t){console.error(`Error applying tool ${e}:`,t);const s={type:"tool_result",tool_id:e,execution_id:o,success:!1,error:String(t)};this.sendMessage(s)}}sendMessage(e){this.ws&&this.ws.readyState===WebSocket.OPEN?(this.ws.send(JSON.stringify(e)),this.widget.addMessage("sent",e.type||"unknown",e)):console.error("WebSocket is not connected")}close(){this.ws&&(this.ws.close(),this.ws=null)}}const w={id:"@datalayer/jupyter-mcp-tools:plugin",description:"Jupyter MCP Tools.",autoStart:!0,optional:[s.ISettingRegistry],requires:[c.ILabShell,n.INotebookTracker],activate:(e,t,o,s)=>{console.log("JupyterLab extension @datalayer/jupyter-mcp-tools is activated!"),function(e,t){e.commands.addCommand(b.appendExecute,{label:"Append and Execute Cell",caption:"Append a new cell at the end of the notebook and execute it",execute:async e=>{const{source:o="",type:s="code"}=e,a=t.currentWidget;if(!a)throw console.error("No active notebook found"),new Error("No active notebook found");const l=a.content,c=l.widgets.length-1;c>=0&&(l.activeCellIndex=c),n.NotebookActions.insertBelow(l);const r=l.activeCell;if(!r)throw console.error("Failed to create new cell"),new Error("Failed to create new cell");return"code"!==s&&n.NotebookActions.changeCellType(l,s),r.model.sharedModel.setSource(o),"code"===s?(await n.NotebookActions.run(l,a.sessionContext),console.log("Cell appended and executed successfully")):console.log(`Cell appended as ${s} (not executed)`),{success:!0,cellType:s,cellIndex:l.activeCellIndex}}}),console.log("MCP Tools commands registered")}(e,o),s&&s.load(w.id).then(e=>{console.log("@datalayer/jupyter-mcp-tools settings loaded:",e.composite)}).catch(e=>{console.error("Failed to load settings for @datalayer/jupyter-mcp-tools.",e)});const c=new y;t.add(c,"left",{rank:500}),e.restored.then(()=>{console.log("JupyterLab fully restored, initializing MCP Tools...");const t=new f(e,c);console.log("Connecting WebSocket..."),t.connect()}),async function(e="",t={}){const o=l.ServerConnection.makeSettings(),s=a.URLExt.join(o.baseUrl,"jupyter-mcp-tools",e);let c;try{c=await l.ServerConnection.makeRequest(s,t,o)}catch(e){throw new l.ServerConnection.NetworkError(e)}let n=await c.text();if(n.length>0)try{n=JSON.parse(n)}catch(e){console.log("Not a JSON response body.",c)}if(!c.ok)throw new l.ServerConnection.ResponseError(c,n.message||n);return n}("get-example").then(e=>{console.log(e)}).catch(e=>{console.error(`The jupyter_mcp_tools server extension appears to be missing.\n${e}`)})}},v=w}}]);