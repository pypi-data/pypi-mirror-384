---
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or
# https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2025 Felix Fontein <felix@fontein.de>

name: Run sanity, unit, integration, and EE tests

"on":
  workflow_call:
    inputs:
      upload-codecov:
        type: boolean
        description: >-
          Whether code coverage should be collected and uploaded to codecov.io.
        required: false
        default: false
      upload-codecov-pr:
        type: boolean
        description: >-
          Whether code coverage should be uploaded for Pull Requests.
          Only used if `upload-codecov` is set to `true`.
        required: false
        default: true
      upload-codecov-schedule:
        type: boolean
        description: >-
          Whether code coverage should be uploaded for scheduled CI runs.
          Only used if `upload-codecov` is set to `true`.
        required: false
        default: true
      upload-codecov-push:
        type: boolean
        description: >-
          Whether code coverage should be uploaded for pushes.
          Only used if `upload-codecov` is set to `true`.
        required: false
        default: true
      min-ansible-core:
        type: string
        description: >-
          Minimum ansible-core version the matrix should include.
        required: false
        default: ""
      max-ansible-core:
        type: string
        description: >-
          Maximum ansible-core version the matrix should include.
        required: false
        default: ""
      change-detection-in-prs:
        type: boolean
        description: >-
          Whether to use Change Detection in Pull Requests.
          Note that this will automatically disable code coverage collection.
        required: false
        default: false
      include-tags:
        type: string
        description: >-
          Comma-separated list of tags that should be included from the matrix.
        default: ""
      exclude-tags:
        type: string
        description: |-
          Comma-separated list of tags that should be excluded from the matrix.

          By default, `remote` excludes all integration test sessions that require a remote VM,
          and `no-gha` excludes all sessions that declare not to work on GHA.
        default: remote, no-gha
      collection-root:
        type: string
        description: |-
          The directory where the collection's `galaxy.yml` is in, and where the `noxfile.py` is in.
          Note that change detection might not work for all sessions if this is not `.`.
        required: false
        default: .
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  create-matrixes:
    name: "Create matrixes"
    runs-on: ubuntu-latest
    outputs:
      sanity-matrix: ${{ fromJSON(steps.generate-matrix.outputs.run-nox).sanity }}
      units-matrix: ${{ fromJSON(steps.generate-matrix.outputs.run-nox).units }}
      integration-matrix: ${{ fromJSON(steps.generate-matrix.outputs.run-nox).integration }}
      ee-matrix: ${{ fromJSON(steps.generate-matrix.outputs.run-nox).execution-environment }}
      upload-codecov: ${{ steps.determine-parameters.outputs.upload-codecov }}
      change-detection: ${{ steps.determine-parameters.outputs.change-detection }}
      change-detection-base-branch: ${{ steps.determine-parameters.outputs.change-detection-base-branch }}
    steps:
      - name: Check out collection
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Determine parameters
        shell: python
        env:
          CHANGE_DETECTION_IN_PRS: ${{ inputs.change-detection-in-prs }}
          GHA_EVENT_NAME: ${{ github.event_name }}
          GHA_PULL_REQUEST_BASE_REF: ${{ github.event.pull_request.base.ref || '' }}
          UPLOAD_CODECOV: ${{ inputs.upload-codecov }}
          UPLOAD_CODECOV_PR: ${{ inputs.upload-codecov-pr }}
          UPLOAD_CODECOV_SCHEDULE: ${{ inputs.upload-codecov-schedule }}
          UPLOAD_CODECOV_PUSH: ${{ inputs.upload-codecov-push }}
          MIN_ANSIBLE_CORE: ${{ inputs.min-ansible-core }}
          MAX_ANSIBLE_CORE: ${{ inputs.max-ansible-core }}
          INCLUDE_TAGS: ${{ inputs.include-tags }}
          EXCLUDE_TAGS: ${{ inputs.exclude-tags }}
        id: determine-parameters
        run: |
          # Compute job Python version
          import json
          import os
          import pathlib
          import shlex

          FILE_APPEND_MODE = "a"
          OUTPUTS_FILE_PATH = pathlib.Path(os.environ["GITHUB_OUTPUT"])


          def set_output(name: str, value: str, *, verbose: bool = True) -> None:
              with OUTPUTS_FILE_PATH.open(FILE_APPEND_MODE) as outputs_file:
                  outputs_file.writelines(f"{name}={value}{os.linesep}")
              if verbose:
                  print(f"Setting output {name} to: {value}")


          change_detection_in_prs = (
              os.environ.get("CHANGE_DETECTION_IN_PRS", "").lower() == "true"
          )
          gha_event_name = os.environ.get("GHA_EVENT_NAME", "")
          gha_pull_request_branch = os.environ.get("GHA_PULL_REQUEST_BASE_REF", "")
          upload_codecov = os.environ.get("UPLOAD_CODECOV", "").lower() == "true"
          upload_codecov_pr = os.environ.get("UPLOAD_CODECOV_PR", "").lower() == "true"
          upload_codecov_schedule = os.environ.get("UPLOAD_CODECOV_SCHEDULE", "").lower() == "true"
          upload_codecov_push = os.environ.get("UPLOAD_CODECOV_PUSH", "").lower() == "true"
          min_ansible_core = os.environ.get("MIN_ANSIBLE_CORE", "")
          max_ansible_core = os.environ.get("MAX_ANSIBLE_CORE", "")
          include_tags = os.environ.get("INCLUDE_TAGS", "")
          exclude_tags = os.environ.get("EXCLUDE_TAGS", "")

          change_detection = False
          change_detection_base_branch = ""
          if gha_event_name == "pull_request" and gha_pull_request_branch:
              if not upload_codecov_pr:
                  upload_codecov = False
              if change_detection_in_prs and gha_pull_request_branch:
                  change_detection = True
                  change_detection_base_branch = gha_pull_request_branch
                  upload_codecov = False
          if gha_event_name == "push":
              if not upload_codecov_push:
                  upload_codecov = False
          if gha_event_name == "schedule":
              if not upload_codecov_schedule:
                  upload_codecov = False

          extra_args = []
          if min_ansible_core:
              extra_args.extend(["--min-ansible-core", shlex.quote(min_ansible_core)])
          if max_ansible_core:
              extra_args.extend(["--max-ansible-core", shlex.quote(max_ansible_core)])
          if include_tags:
              extra_args.extend(["--include-tags", shlex.quote(include_tags)])
          if exclude_tags:
              extra_args.extend(["--exclude-tags", shlex.quote(exclude_tags)])

          set_output("change-detection", json.dumps(change_detection))
          set_output("change-detection-base-branch", change_detection_base_branch)
          set_output("upload-codecov", json.dumps(upload_codecov))
          set_output("extra-args", " ".join(extra_args))
      - name: Run nox
        uses: ansible-community/antsibull-nox@main
        id: generate-matrix
        with:
          change-detection: ${{ steps.determine-parameters.outputs.change-detection }}
          change-detection-base-branch: ${{ steps.determine-parameters.outputs.change-detection-base-branch }}
          extra-args: ${{ steps.determine-parameters.outputs.extra-args }}
          sessions: matrix-generator
          working-directory: ${{ inputs.collection-root }}

  # Sessions with coverage

  sanity:
    name: ${{ matrix.skip && 'Skipping ' || '' }}Sanity (â’¶${{ matrix.ansible-core }})
    needs:
      - create-matrixes
    strategy:
      matrix:
        include: >-
          ${{ fromJson(needs.create-matrixes.outputs.sanity-matrix || '[{"skip": true}]') }}
    runs-on: ${{ matrix.gha-container || 'ubuntu-latest' }}
    outputs:
      upload-codecov: ${{ needs.create-matrixes.outputs.upload-codecov }}
    steps:
      - name: Check out collection
        if: >-
          !matrix.skip
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: ${{ needs.create-matrixes.outputs.change-detection == 'true' && '0' || '1' }}
      - name: Create branches for change detection
        if: >-
          !matrix.skip && (needs.create-matrixes.outputs.change-detection == 'true')
        env:
          GHA_PR_NUMBER: ${{ github.event.pull_request.number }}
          GHA_BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          # Create a branch for the current HEAD, which happens to be a merge commit
          git checkout -b "pull-request-${GHA_PR_NUMBER}"

          # Name the target branch
          git branch "${GHA_BASE_REF}" --track "origin/${GHA_BASE_REF}"

          # Show branch information
          git branch -vv
        shell: bash
      - name: Run nox
        if: >-
          !matrix.skip
        uses: ansible-community/antsibull-nox@main
        with:
          change-detection: ${{ needs.create-matrixes.outputs.change-detection }}
          change-detection-base-branch: ${{ needs.create-matrixes.outputs.change-detection-base-branch }}
          extra-python-versions: ${{ matrix.python }}
          extra-args: ${{ needs.create-matrixes.outputs.upload-codecov == 'true' && '--coverage' || '' }}
          sessions: ${{ matrix.name }}
          working-directory: ${{ inputs.collection-root }}
      - name: Upload coverage for final step
        if: >-
          !matrix.skip && needs.create-matrixes.outputs.upload-codecov == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-sanity-${{ matrix.name }}
          path: ${{ inputs.collection-root }}/tests/output/reports/coverage=sanity=*.xml

  units:
    name: ${{ matrix.skip && 'Skipping ' || '' }}Units (${{ matrix.display-name }})
    needs:
      - create-matrixes
    strategy:
      matrix:
        include: >-
          ${{ fromJson(needs.create-matrixes.outputs.units-matrix || '[{"skip": true}]') }}
    runs-on: ${{ matrix.gha-container || 'ubuntu-latest' }}
    outputs:
      upload-codecov: ${{ needs.create-matrixes.outputs.upload-codecov }}
    steps:
      - name: Check out collection
        if: >-
          !matrix.skip
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: ${{ needs.create-matrixes.outputs.change-detection == 'true' && '0' || '1' }}
      - name: Create branches for change detection
        if: >-
          !matrix.skip && (needs.create-matrixes.outputs.change-detection == 'true')
        env:
          GHA_PR_NUMBER: ${{ github.event.pull_request.number }}
          GHA_BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          # Create a branch for the current HEAD, which happens to be a merge commit
          git checkout -b "pull-request-${GHA_PR_NUMBER}"

          # Name the target branch
          git branch "${GHA_BASE_REF}" --track "origin/${GHA_BASE_REF}"

          # Show branch information
          git branch -vv
        shell: bash
      - name: Run nox
        if: >-
          !matrix.skip
        uses: ansible-community/antsibull-nox@main
        with:
          change-detection: ${{ needs.create-matrixes.outputs.change-detection }}
          change-detection-base-branch: ${{ needs.create-matrixes.outputs.change-detection-base-branch }}
          extra-python-versions: ${{ matrix.python }}
          extra-args: ${{ needs.create-matrixes.outputs.upload-codecov == 'true' && '--coverage' || '' }}
          sessions: ${{ matrix.name }}
          working-directory: ${{ inputs.collection-root }}
      - name: Upload coverage for final step
        if: >-
          !matrix.skip && needs.create-matrixes.outputs.upload-codecov == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-units-${{ matrix.name }}
          path: ${{ inputs.collection-root }}/tests/output/reports/coverage=units=*.xml

  integration:
    name: ${{ matrix.skip && 'Skipping ' || '' }}I (${{ matrix.display-name }})
    needs:
      - create-matrixes
    strategy:
      fail-fast: false
      matrix:
        include: >-
          ${{ fromJson(needs.create-matrixes.outputs.integration-matrix || '[{"skip": true}]') }}
    runs-on: ${{ matrix.gha-container || 'ubuntu-latest' }}
    outputs:
      upload-codecov: ${{ needs.create-matrixes.outputs.upload-codecov }}
    steps:
      - name: Check out collection
        if: >-
          !matrix.skip
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: ${{ needs.create-matrixes.outputs.change-detection == 'true' && '0' || '1' }}
      - name: Create branches for change detection
        if: >-
          !matrix.skip && (needs.create-matrixes.outputs.change-detection == 'true')
        env:
          GHA_PR_NUMBER: ${{ github.event.pull_request.number }}
          GHA_BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          # Create a branch for the current HEAD, which happens to be a merge commit
          git checkout -b "pull-request-${GHA_PR_NUMBER}"

          # Name the target branch
          git branch "${GHA_BASE_REF}" --track "origin/${GHA_BASE_REF}"

          # Show branch information
          git branch -vv
        shell: bash
      - name: Run nox
        if: >-
          !matrix.skip
        uses: ansible-community/antsibull-nox@main
        with:
          change-detection: ${{ needs.create-matrixes.outputs.change-detection }}
          change-detection-base-branch: ${{ needs.create-matrixes.outputs.change-detection-base-branch }}
          extra-python-versions: ${{ matrix.python }}
          extra-args: ${{ needs.create-matrixes.outputs.upload-codecov == 'true' && '--coverage' || '' }}
          sessions: ${{ matrix.name }}
          working-directory: ${{ inputs.collection-root }}
      - name: Upload coverage for final step
        if: >-
          !matrix.skip && needs.create-matrixes.outputs.upload-codecov == 'true' && (matrix.has-coverage != 'false')
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-integration-${{ matrix.name }}
          path: ${{ inputs.collection-root }}/tests/output/reports/coverage=integration=*.xml

  upload-coverage:
    name: Upload coverage
    if: needs.sanity.outputs.upload-codecov == 'true'
    needs:
      - sanity
      - units
      - integration
    runs-on: ubuntu-latest
    steps:
      - name: Check out collection
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Download coverage from previous steps
        uses: actions/download-artifact@v5
        with:
          pattern: code-coverage-*
      - name: List all files
        run: find . -name 'coverage=*.xml'
        shell: bash
        working-directory: ${{ inputs.collection-root }}
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: coverage=*.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          working-directory: ${{ inputs.collection-root }}

  # Sessions without coverage

  ee:
    name: ${{ matrix.skip && 'Skipping ' || '' }}EE (${{ matrix.description }})
    if: needs.create-matrixes.outputs.ee-matrix != ''
    needs:
      - create-matrixes
    strategy:
      fail-fast: false
      matrix:
        include: >-
          ${{ fromJson(needs.create-matrixes.outputs.ee-matrix || '[{"skip": true}]') }}
    runs-on: ${{ matrix.gha-container || 'ubuntu-latest' }}
    steps:
      - name: Check out collection
        if: >-
          !matrix.skip
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Run nox
        if: >-
          !matrix.skip
        uses: ansible-community/antsibull-nox@main
        with:
          sessions: ${{ matrix.name }}
          working-directory: ${{ inputs.collection-root }}
