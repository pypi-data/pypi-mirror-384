[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cdlf"
version = "0.1.0"
description = "Conformal Deep Learning Framework - Production-ready conformal prediction for TensorFlow"
authors = [
    {name = "CDLF Team", email = "contact@cdlf.dev"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["conformal-prediction", "tensorflow", "machine-learning", "uncertainty-quantification"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "tensorflow>=2.13.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "tqdm>=4.65.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    "black>=23.7.0",
    "ruff>=0.0.287",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
serving = [
    "fastapi>=0.103.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "mlflow>=2.6.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
all = [
    "cdlf[dev,serving,monitoring,docs]",
]

[project.urls]
Homepage = "https://pypi.org/project/cdlf/"
"Bug Tracker" = "https://pypi.org/project/cdlf/"

[tool.setuptools.packages.find]
where = ["."]
include = ["cdlf*"]
exclude = ["tests*", "examples*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["cdlf"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "FBT", # flake8-boolean-trap
    "Q",   # flake8-quotes
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "FBT001", # boolean positional arg
    "FBT002", # boolean default value
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["S101", "T20"]

[tool.ruff.isort]
known-first-party = ["cdlf"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
plugins = ["numpy.typing.mypy_plugin", "pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sklearn.*",
    "pandas.*",
    "tqdm.*",
]
ignore_missing_imports = true
