[tool.poetry]
name = "scaledp"
version = "0.2.4rc8"
description = "ScaleDP is a library for processing documents using Apache Spark and LLMs"
authors = ["Mykola Melnyk <mykola@stabrise.com>"]
repository = "https://github.com/StabRise/scaledp"
homepage = "https://stabrise.com/scaledp/"
license = "AGPL-3.0"
readme = "README.md"
packages = [{include = "scaledp"}]
include = ["scaledp/resource/*"]

[tool.poetry.dependencies]
python = "^3.10"
pyspark = "3.5.5"
pillow = "^10.4.0"
imagesize = "1.4.1"
pandas = "^2.2.2"
pytesseract = "0.3.13"
pytest = "^7.4.4"
PyMuPDF = "1.24.11"
numpy = "^1.26.4"
pyarrow = ">=17.0.0"  #18.1.0
filelock = "*"
surya-ocr = {version = "0.8.1", optional = true}
easyocr = {version = "1.7.2", optional = true}
python-doctr = {version = "0.10.0", optional = true}
transformers = {version = "^4.36.0", optional = true}
torchvision= [
    {version = ">=0.18.0", markers="sys_platform == 'darwin'", optional = true },
    {version= ">=0.18.0", markers="sys_platform != 'darwin'", source = "pytorch_cpu", optional = true}
    ]
torch =  [
    {version = "==2.4.1", markers="sys_platform == 'darwin'", optional = true },
    {version = ">=2.4.1", markers="sys_platform != 'darwin'", source = "pytorch_cpu", optional = true}
]
#dspy = {version = "2.5.43", optional = true}
levenshtein = "^0.27.1"
pydantic = ">=1.8.0"
huggingface-hub = "^0.35.3"
tenacity = ">=8.2.3"
openai = ">=1.58.0"
sparkdantic = "^2.0.0"
img2pdf = "^0.6.1"
shapely = "^2.1.1"
pyclipper = "^1.3.0.post6"
onnxruntime = "1.22.0"



[tool.poetry.extras]
ml = ["transformers",
    #"torch",
    #"torchvision"
]
ocr = ["easyocr", "python-doctr", "surya-ocr"]
llm = ["dspy"]
paddle = ["paddleocr", "paddlepaddle",]

[[tool.poetry.source]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"


[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-spark = "0.6.0"
jupyter = "^1.1.1"
ipykernel = "^6.29.5"
tesserocr = "2.7.1"
pytest-resource-path = "1.3.0"
coverage = "7.6.4"
pytest-cov="5.0.0"
transformers = "^4.36.0"
#torchvision= {version= ">=0.18.0", source = "pytorch_cpu"}
#torch = {version= ">=2.4.1", source = "pytorch_cpu"}
torch =  [
    {version = "==2.4.1", markers="sys_platform == 'darwin'", optional = true },
    {version = ">=2.4.1", markers="sys_platform != 'darwin'", source = "pytorch_cpu", optional = true}
]
python-doctr  = "0.10.0"
surya-ocr = "0.8.1"
black = "^24.10.0"
ultralytics = "^8.3.40"
pre-commit = "^3.7.1"
ruff = "^0.5.0"
craft-text-detector-updated = "^0.4.7"

[build-system]
#requires = ["poetry-core<2.0.0"]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]

line-length = 99
lint.mccabe = { max-complexity = 10 }
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "B008",    # Do not perform function calls in argument defaults
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "D202",    # No blank lines allowed after function docstring
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
    "C901",
    "PLR0912",
    "PLR2004",
    "S311",
    "PLR0911",
    "D101", # Missing docstring in public class
    "D102",
    "D205",
    "D200",
    "ANN205", # Missing type annotation for self in method
    "ANN001", # Missing type annotation for function argument
    "ANN202", # Missing type annotation for return
    "ANN201", # Missing type annotation for return
    "ANN206", # Missing type annotation for self in method
    "ANN101",
    "ANN102",
    "N803", # argument name should be lowercase
    "N999",
    "N815", # variable in class should be lowercase
    "N802",
    "SLF001", # call protected method
    "PLE0604",
    "RET504",
    "ANN204"
]
exclude = [
    "scaledp/models/detectors/yolo/*.py",
    "scaledp/models/detectors/paddle_onnx/*.py",
    ]


[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
    "D103", # missing docstrings
    "ANN001", # Missing type annotation for variable
    "ANN201", # Missing type annotation for return
    "T201", # Use of print detected
]



[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float", "bytes"]
