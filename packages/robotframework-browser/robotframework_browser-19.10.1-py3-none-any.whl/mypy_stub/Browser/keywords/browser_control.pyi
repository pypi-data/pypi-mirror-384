from ..base import LibraryComponent as LibraryComponent
from ..generated.playwright_pb2 import Request as Request
from ..utils import BoundingBox as BoundingBox, HighlightMode as HighlightMode, PageLoadStates as PageLoadStates, Permission as Permission, Scale as Scale, Scope as Scope, ScreenshotFileTypes as ScreenshotFileTypes, ScreenshotReturnType as ScreenshotReturnType, keyword as keyword, logger as logger
from ..utils.logger import LOGLEVEL as LOGLEVEL
from datetime import timedelta
from pathlib import Path
from typing import ClassVar

class Control(LibraryComponent):
    def go_forward(self) -> None: ...
    def go_back(self) -> None: ...
    def go_to(self, url: str, timeout: timedelta | None = None, wait_until: PageLoadStates = ...): ...
    old_take_screenshot_args: ClassVar[dict]
    def take_screenshot(self, filename: str | None = 'robotframework-browser-screenshot-{index}', selector: str | None = None, *, crop: BoundingBox | None = None, disableAnimations: bool = False, fileType: ScreenshotFileTypes = ..., fullPage: bool = False, highlight_selector: str | None = None, log_screenshot: bool = True, mask: list[str] | str = '', maskColor: str | None = None, omitBackground: bool = False, quality: int | None = None, scale: Scale | None = None, return_as: ScreenshotReturnType = ..., timeout: timedelta | None = None) -> str | bytes | Path | None: ...
    def set_browser_timeout(self, timeout: timedelta, scope: Scope = ...) -> str: ...
    def set_playwright_timeout(self, timeout, loglevel: LOGLEVEL = 'INFO'): ...
    def set_retry_assertions_for(self, timeout: timedelta, scope: Scope = ...) -> str: ...
    def set_selector_prefix(self, prefix: str | None, scope: Scope = ...) -> str: ...
    def set_highlight_on_failure(self, highlight: bool = True, scope: Scope = ...) -> bool: ...
    def show_keyword_banner(self, show: bool = True, style: str = '', scope: Scope = ...) -> dict[str, None | bool | str]: ...
    def set_viewport_size(self, width: int, height: int): ...
    def set_offline(self, offline: bool = True): ...
    def set_geolocation(self, latitude: float, longitude: float, accuracy: float | None = None): ...
    def reload(self, timeout: timedelta | None = None, waitUntil: PageLoadStates = ...): ...
    def grant_permissions(self, *permissions: Permission, origin: str | None = None): ...
    def clear_permissions(self) -> None: ...
    def execute_npx_playwright(self, command: str, *args: str): ...
