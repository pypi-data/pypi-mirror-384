from ..assertion_engine import assertion_formatter_used as assertion_formatter_used, with_assertion_polling as with_assertion_polling
from ..base import LibraryComponent as LibraryComponent
from ..generated.playwright_pb2 import Request as Request
from ..utils import keyword as keyword, logger as logger
from ..utils.data_types import AreaFields as AreaFields, AriaSnapshotReturnType as AriaSnapshotReturnType, BoundingBox as BoundingBox, BoundingBoxFields as BoundingBoxFields, Dimensions as Dimensions, DownloadInfo as DownloadInfo, ElementRole as ElementRole, ElementState as ElementState, RegExp as RegExp, ScrollPosition as ScrollPosition, SelectAttribute as SelectAttribute, SelectOptions as SelectOptions, SelectionStrategy as SelectionStrategy, SizeFields as SizeFields, ViewportDimensions as ViewportDimensions
from Browser.utils.misc import get_download_id as get_download_id
from assertionengine import AssertionOperator as AssertionOperator
from typing import Any

class Getters(LibraryComponent):
    @with_assertion_polling
    @assertion_formatter_used
    def get_aria_snapshot(self, selector: str, return_type: AriaSnapshotReturnType = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str | dict: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_url(self, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_page_source(self, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_title(self, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_text(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_property(self, selector: str, property: str, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> Any: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_attribute(self, selector: str, attribute: str, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> str | None: ...
    @with_assertion_polling
    def get_attribute_names(self, selector: str, assertion_operator: AssertionOperator | None = None, *assertion_expected, message: str | None = None) -> list[str]: ...
    @with_assertion_polling
    def get_classes(self, selector: str, assertion_operator: AssertionOperator | None = None, *assertion_expected, message: str | None = None) -> list[str]: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_select_options(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> list[SelectOptions]: ...
    @with_assertion_polling
    def get_selected_options(self, selector: str, option_attribute: SelectAttribute = ..., assertion_operator: AssertionOperator | None = None, *assertion_expected, message: str | None = None) -> list[str | int]: ...
    @with_assertion_polling
    def get_checkbox_state(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: bool | str = 'Unchecked', message: str | None = None) -> bool: ...
    @with_assertion_polling
    def get_element_count(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: int | str = 0, message: str | None = None) -> int: ...
    @with_assertion_polling
    def get_viewport_size(self, key: SizeFields = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> ViewportDimensions | None: ...
    def get_table_cell_element(self, table: str, column: str, row: str) -> str: ...
    @with_assertion_polling
    def get_table_cell_index(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: int | str = 0, message: str | None = None) -> int: ...
    @with_assertion_polling
    def get_table_row_index(self, selector: str, assertion_operator: AssertionOperator | None = None, assertion_expected: int | str = 0, message: str | None = None) -> int: ...
    def get_element(self, selector: str) -> str: ...
    def get_elements(self, selector: str) -> list[str]: ...
    def get_element_by_role(self, role: ElementRole, *, all_elements: bool = False, checked: bool | None = None, disabled: bool | None = None, exact: bool | None = None, expanded: bool | None = None, include_hidden: bool | None = None, level: int | None = None, name: str | RegExp | None = None, pressed: bool | None = None, selected: bool | None = None) -> str: ...
    def get_element_by(self, selection_strategy: SelectionStrategy, text: str | RegExp, exact: bool = False, all_elements: bool = False) -> str: ...
    def get_frame_selector(self) -> str: ...
    @with_assertion_polling
    @assertion_formatter_used
    def get_style(self, selector: str, key: str | None = 'ALL', assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None, pseudo_element: str | None = None) -> dict[str, str] | str: ...
    @with_assertion_polling
    def get_boundingbox(self, selector: str, key: BoundingBoxFields = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None, *, allow_hidden: bool = False) -> BoundingBox | float | int | None: ...
    @with_assertion_polling
    def get_scroll_size(self, selector: str | None = None, key: SizeFields = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> Dimensions | float | int: ...
    @with_assertion_polling
    def get_scroll_position(self, selector: str | None = None, key: AreaFields = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> ScrollPosition | float: ...
    @with_assertion_polling
    def get_client_size(self, selector: str | None = None, key: SizeFields = ..., assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> Dimensions: ...
    @with_assertion_polling
    def get_element_states(self, selector: str, assertion_operator: AssertionOperator | None = None, *assertion_expected: ElementState | str, message: str | None = None, return_names: bool = True) -> list[str] | ElementState: ...
    @with_assertion_polling
    def get_download_state(self, download: DownloadInfo | str, assertion_operator: AssertionOperator | None = None, assertion_expected: Any | None = None, message: str | None = None) -> DownloadInfo: ...
