from ..base import LibraryComponent as LibraryComponent
from ..generated.playwright_pb2 import Request as Request
from ..utils import get_abs_scroll_coordinates as get_abs_scroll_coordinates, get_rel_scroll_coordinates as get_rel_scroll_coordinates, keyword as keyword, logger as logger
from ..utils.data_types import BoundingBox as BoundingBox, Coordinates as Coordinates, DialogAction as DialogAction, FileUploadBuffer as FileUploadBuffer, KeyAction as KeyAction, KeyboardInputAction as KeyboardInputAction, KeyboardModifier as KeyboardModifier, MouseButton as MouseButton, MouseButtonAction as MouseButtonAction, MouseOptionsDict as MouseOptionsDict, ScrollBehavior as ScrollBehavior, SelectAttribute as SelectAttribute
from datetime import timedelta
from os import PathLike
from typing import Any

class Interaction(LibraryComponent):
    def type_text(self, selector: str, txt: str, delay: timedelta = ..., clear: bool = True): ...
    def fill_text(self, selector: str, txt: str, force: bool = False): ...
    def clear_text(self, selector: str): ...
    def type_secret(self, selector: str, secret: str, delay: timedelta = ..., clear: bool = True): ...
    def fill_secret(self, selector: str, secret: str, force: bool = False): ...
    def press_keys(self, selector: str, *keys: str, press_duration: timedelta = ..., key_delay: timedelta = ...): ...
    def click(self, selector: str, button: MouseButton = ...): ...
    def click_with_options(self, selector: str, button: MouseButton = ..., *modifiers: KeyboardModifier, clickCount: int = 1, delay: timedelta | None = None, force: bool = False, noWaitAfter: bool = False, position_x: float | None = None, position_y: float | None = None, trial: bool = False): ...
    def tap(self, selector: str, *modifiers: KeyboardModifier, force: bool = False, noWaitAfter: bool = False, position_x: int | None = None, position_y: int | None = None, trial: bool = False): ...
    def record_selector(self, label: str | None = None): ...
    def hover(self, selector: str, position_x: float | None = None, position_y: float | None = None, force: bool = False, *modifiers: KeyboardModifier): ...
    def focus(self, selector: str): ...
    def scroll_to(self, selector: str | None = None, vertical: str = 'top', horizontal: str = 'left', behavior: ScrollBehavior = ...): ...
    def scroll_by(self, selector: str | None = None, vertical: str = 'height', horizontal: str = '0', behavior: ScrollBehavior = ...): ...
    def scroll_to_element(self, selector: str): ...
    def check_checkbox(self, selector: str, force: bool = False): ...
    def uncheck_checkbox(self, selector: str, force: bool = False): ...
    def select_options_by(self, selector: str, attribute: SelectAttribute, *values) -> list[Any]: ...
    def deselect_options(self, selector: str): ...
    def handle_future_dialogs(self, action: DialogAction, prompt_input: str = ''): ...
    def wait_for_alert(self, action: DialogAction, prompt_input: str = '', text: str | None = None, timeout: timedelta | None = None): ...
    def wait_for_alerts(self, actions: list[DialogAction], prompt_inputs: list[None | str], texts: list[None | str], timeout: timedelta | None = None) -> list[str]: ...
    def mouse_button(self, action: MouseButtonAction, x: float | None = None, y: float | None = None, button: MouseButton = ..., clickCount: int = 1, delay: int | timedelta = ...): ...
    def drag_and_drop(self, selector_from: str, selector_to: str, steps: int = 1): ...
    def drag_and_drop_by_coordinates(self, from_x: float, from_y: float, to_x: float, to_y: float, steps: int = 1): ...
    def drag_and_drop_relative_to(self, selector_from: str, x: float = 0.0, y: float = 0.0, steps: int = 1): ...
    def mouse_move_relative_to(self, selector: str, x: float = 0.0, y: float = 0.0, steps: int = 1): ...
    def mouse_move(self, x: float, y: float, steps: int = 1): ...
    def mouse_wheel(self, deltaX: int, deltaY: int): ...
    def keyboard_key(self, action: KeyAction, key: str): ...
    def keyboard_input(self, action: KeyboardInputAction, input: str, delay: int | timedelta = ...): ...
    def upload_file_by_selector(self, selector: str, path: PathLike | FileUploadBuffer, *extra_paths: PathLike): ...
