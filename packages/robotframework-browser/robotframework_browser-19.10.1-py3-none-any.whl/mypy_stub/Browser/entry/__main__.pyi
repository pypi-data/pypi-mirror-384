import click
from ..browser import Browser as Browser
from .constant import INSTALLATION_DIR as INSTALLATION_DIR, NODE_MODULES as NODE_MODULES, SHELL as SHELL, ensure_playwright_browsers_path as ensure_playwright_browsers_path, get_browser_lib as get_browser_lib, log as log, write_marker as write_marker
from .coverage_combine import combine as combine
from .get_versions import print_version as print_version
from .rfbrowser_init import log_install_dir as log_install_dir, rfbrowser_init as rfbrowser_init
from .translation import compare_translation as compare_translation, get_library_translation as get_library_translation
from Browser.utils.data_types import AutoClosingLevel as AutoClosingLevel, InstallableBrowser as InstallableBrowser, InstallationOptions as InstallationOptions, InstallationOptionsHelp as InstallationOptionsHelp, SupportedBrowsers as SupportedBrowsers
from _typeshed import Incomplete
from pathlib import Path

CONTEXT_SETTINGS: Incomplete

def get_rf_version(): ...
@click.pass_context
def cli(ctx, silent) -> None: ...
@click.pass_context
def init(ctx, skip_browsers, with_deps, browser) -> None: ...
def clean_node() -> None: ...
def show_trace(file: str, browser: str, host: str | None, port: int | None, stdin: bool): ...
def launch_browser_server(browser, options) -> None: ...
def convert_options_types(options: list[str], browser_lib: Browser): ...
def install(browser: str | None = None, **flags): ...

param_name: Incomplete
install: Incomplete

def uninstall(all: bool): ...
def transform(path: Path, wait_until_network_is_idle: bool): ...
def translation(filename: Path, plugings: str | None = None, jsextension: str | None = None, compare: bool = False): ...
def coverage(input: Path, output: Path, config: Path | None = None, name: str | None = None, reports: str = 'v8'): ...
