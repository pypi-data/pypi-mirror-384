from ..browser import Browser as Browser
from ..generated.playwright_pb2 import Response as Response
from ..utils import SettingsStack as SettingsStack, get_variable_value as get_variable_value, logger as logger
from ..utils.data_types import AutoClosingLevel as AutoClosingLevel, DelayedKeyword as DelayedKeyword, HighLightElement as HighLightElement
from _typeshed import Incomplete
from collections.abc import Callable as Callable
from concurrent.futures._base import Future
from datetime import timedelta
from functools import cached_property as cached_property
from pathlib import Path
from typing import Any

NOT_FOUND: Incomplete

class LibraryComponent:
    library: Incomplete
    browser_arg_mapping: dict[int, str]
    def __init__(self, library: Browser) -> None: ...
    @property
    def playwright(self): ...
    @property
    def keyword_call_banner_add_style(self) -> str: ...
    @property
    def keyword_call_banner_add_style_stack(self) -> SettingsStack: ...
    @keyword_call_banner_add_style_stack.setter
    def keyword_call_banner_add_style_stack(self, stack: SettingsStack): ...
    @property
    def show_keyword_call_banner(self) -> bool: ...
    @property
    def show_keyword_call_banner_stack(self) -> SettingsStack: ...
    @show_keyword_call_banner_stack.setter
    def show_keyword_call_banner_stack(self, stack: SettingsStack): ...
    @property
    def run_on_failure_keyword(self) -> DelayedKeyword: ...
    @property
    def run_on_failure_keyword_stack(self) -> SettingsStack: ...
    @run_on_failure_keyword_stack.setter
    def run_on_failure_keyword_stack(self, stack: SettingsStack): ...
    @property
    def highlight_on_failure(self) -> bool: ...
    @property
    def highlight_on_failure_stack(self) -> SettingsStack: ...
    @highlight_on_failure_stack.setter
    def highlight_on_failure_stack(self, stack: SettingsStack): ...
    @property
    def assertion_formatter_stack(self) -> SettingsStack: ...
    @assertion_formatter_stack.setter
    def assertion_formatter_stack(self, stack: SettingsStack): ...
    def get_assertion_formatter(self, keyword: str) -> list: ...
    def method_to_kw_str(self, keyword: Callable) -> str: ...
    @property
    def timeout(self) -> float: ...
    @property
    def timeout_stack(self) -> SettingsStack: ...
    @timeout_stack.setter
    def timeout_stack(self, stack: SettingsStack): ...
    @property
    def retry_assertions_for(self) -> float: ...
    @property
    def retry_assertions_for_stack(self) -> SettingsStack: ...
    @retry_assertions_for_stack.setter
    def retry_assertions_for_stack(self, stack: SettingsStack): ...
    @property
    def selector_prefix(self) -> str: ...
    @property
    def selector_prefix_stack(self) -> SettingsStack: ...
    @selector_prefix_stack.setter
    def selector_prefix_stack(self, stack: SettingsStack): ...
    def resolve_selector(self, selector: str | None) -> str: ...
    @property
    def unresolved_promises(self): ...
    @unresolved_promises.setter
    def unresolved_promises(self, value: set[Future]): ...
    @property
    def context_cache(self): ...
    @property
    def outputdir(self) -> str: ...
    @property
    def browser_output(self) -> Path: ...
    @property
    def screenshots_output(self) -> Path: ...
    @property
    def video_output(self) -> Path: ...
    @property
    def traces_output(self) -> Path: ...
    @property
    def traces_temp(self) -> Path: ...
    @property
    def state_file(self): ...
    @property
    def coverage_ouput(self) -> Path: ...
    def initialize_js_extension(self, js_extension_path: Path | str) -> Response.Keywords: ...
    def call_js_keyword(self, keyword_name: str, **args) -> Any: ...
    def get_timeout(self, timeout: timedelta | None) -> float: ...
    def convert_timeout(self, timeout: timedelta | float, to_ms: bool = True) -> float: ...
    def millisecs_to_timestr(self, timeout: float) -> str: ...
    @cached_property
    def robot_running(self): ...
    def resolve_secret(self, secret_variable: Any, arg_name: str) -> str: ...
    def decrypt_with_crypto_library(self, secret): ...
    @property
    def strict_mode(self) -> bool: ...
    @property
    def strict_mode_stack(self) -> SettingsStack: ...
    @strict_mode_stack.setter
    def strict_mode_stack(self, stack: SettingsStack): ...
    def parse_run_on_failure_keyword(self, keyword_name: str | None) -> DelayedKeyword: ...
    @property
    def keyword_formatters(self) -> dict: ...
    @property
    def get_presenter_mode(self) -> HighLightElement: ...
    def presenter_mode(self, selector, strict): ...
    def exec_scroll_function(self, function: str, selector: str | None = None): ...
