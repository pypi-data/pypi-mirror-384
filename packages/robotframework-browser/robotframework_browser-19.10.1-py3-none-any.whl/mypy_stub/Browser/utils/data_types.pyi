from _typeshed import Incomplete
from datetime import timedelta
from enum import Enum, IntFlag
from robot.running.arguments.typeconverters import TypeConverter
from typing import TypedDict

class RobotTypeConverter(TypeConverter):
    @classmethod
    def converter_for(cls, arg_type): ...

class TypedDictDummy(TypedDict): ...

def convert_typed_dict(function_annotations: dict, params: dict) -> dict: ...

class Deprecated: ...

deprecated: Incomplete

class NotSet(Enum):
    not_set = 'not_set'

class AriaSnapshotReturnType(Enum):
    dict = ...
    yaml = ...

class KeywordCallStackEntry(TypedDict):
    name: str
    file: str
    line: int

class SelectOptions(TypedDict):
    index: int
    value: str
    label: str
    selected: bool

class SelectionStrategy(Enum):
    AltText = 'AltText'
    Label = 'Label'
    Placeholder = 'Placeholder'
    TestID = 'TestId'
    Text = 'Text'
    Title = 'Title'

class RegExp(str):
    @classmethod
    def from_string(cls, string: str) -> RegExp: ...

class ElementRole(Enum):
    ALERT = ...
    ALERTDIALOG = ...
    APPLICATION = ...
    ARTICLE = ...
    BANNER = ...
    BLOCKQUOTE = ...
    BUTTON = ...
    CAPTION = ...
    CELL = ...
    CHECKBOX = ...
    CODE = ...
    COLUMNHEADER = ...
    COMBOBOX = ...
    COMPLEMENTARY = ...
    CONTENTINFO = ...
    DEFINITION = ...
    DELETION = ...
    DIALOG = ...
    DIRECTORY = ...
    DOCUMENT = ...
    EMPHASIS = ...
    FEED = ...
    FIGURE = ...
    FORM = ...
    GENERIC = ...
    GRID = ...
    GRIDCELL = ...
    GROUP = ...
    HEADING = ...
    IMG = ...
    INSERTION = ...
    LINK = ...
    LIST = ...
    LISTBOX = ...
    LISTITEM = ...
    LOG = ...
    MAIN = ...
    MARQUEE = ...
    MATH = ...
    METER = ...
    MENU = ...
    MENUBAR = ...
    MENUITEM = ...
    MENUITEMCHECKBOX = ...
    MENUITEMRADIO = ...
    NAVIGATION = ...
    NONE = ...
    NOTE = ...
    OPTION = ...
    PARAGRAPH = ...
    PRESENTATION = ...
    PROGRESSBAR = ...
    RADIO = ...
    RADIOGROUP = ...
    REGION = ...
    ROW = ...
    ROWGROUP = ...
    ROWHEADER = ...
    SCROLLBAR = ...
    SEARCH = ...
    SEARCHBOX = ...
    SEPARATOR = ...
    SLIDER = ...
    SPINBUTTON = ...
    STATUS = ...
    STRONG = ...
    SUBSCRIPT = ...
    SUPERSCRIPT = ...
    SWITCH = ...
    TAB = ...
    TABLE = ...
    TABLIST = ...
    TABPANEL = ...
    TERM = ...
    TEXTBOX = ...
    TIME = ...
    TIMER = ...
    TOOLBAR = ...
    TOOLTIP = ...
    TREE = ...
    TREEGRID = ...
    TREEITEM = ...

class DelayedKeyword:
    name: Incomplete
    original_name: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, name: str | None, original_name: str | None, args: tuple, kwargs: dict) -> None: ...

class BoundingBox(TypedDict, total=False):
    x: float
    y: float
    width: float
    height: float

class Coordinates(TypedDict, total=False):
    x: float
    y: float

class MouseOptionsDict(TypedDict, total=False):
    x: float
    y: float
    options: dict

class ViewportDimensions(TypedDict):
    width: int
    height: int

class Dimensions(ViewportDimensions): ...

class RecordVideo(TypedDict, total=False):
    dir: str
    size: ViewportDimensions

class RecordHar(TypedDict, total=False):
    omitContent: bool
    path: str

class _HttpCredentials(TypedDict):
    username: str
    password: str

class HttpCredentials(_HttpCredentials, total=False):
    origin: str

class _GeoCoordinated(TypedDict):
    longitude: float
    latitude: float

class GeoLocation(_GeoCoordinated, total=False):
    accuracy: float

class _Server(TypedDict):
    server: str

class PdfFormat(Enum):
    Letter = 'Letter'
    Legal = 'Legal'
    Tabloid = 'Tabloid'
    Ledger = 'Ledger'
    A0 = 'A0'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    A6 = 'A6'

class PdfMarging(TypedDict):
    top: str
    right: str
    bottom: str
    left: str

class Media(Enum):
    screen = 'screen'
    print = 'print'
    null = 'null'

class ReducedMotion(Enum):
    reduce = 'reduce'
    no_preference = 'no-preference'
    null = 'null'

class Proxy(_Server, total=False):
    bypass: str
    username: str
    password: str

class DownloadInfo(TypedDict):
    saveAs: str
    suggestedFilename: str
    state: str
    downloadID: str | None

class NewPageDetails(TypedDict):
    page_id: str
    video_path: str

class HighLightElement(TypedDict):
    duration: timedelta
    width: str
    style: str
    color: str

class HighlightMode(Enum):
    border = ...
    playwright = ...
    both = ...

class LambdaFunction:
    @classmethod
    def from_string(cls, string: str) -> LambdaFunction: ...

FormatterKeywords: Incomplete
FormatingRules: Incomplete
FormatterTypes = dict[FormatterKeywords, list[FormatingRules | LambdaFunction]]

def ensure_formatter_type(input_dict: dict): ...

class Scale(Enum):
    css = ...
    device = ...

class SelectionType(Enum):
    CURRENT = 'CURRENT'
    ACTIVE = CURRENT
    ALL = 'ALL'
    ANY = ALL
    @classmethod
    def create(cls, value: str | SelectionType): ...

class DialogAction(Enum):
    accept = ...
    dismiss = ...

class CookieType(Enum):
    dictionary = ...
    dict = dictionary
    string = ...
    str = string

CookieSameSite: Incomplete

class RequestMethod(Enum):
    HEAD = ...
    DELETE = ...
    GET = ...
    PATCH = ...
    POST = ...
    PUT = ...

class MouseButtonAction(Enum):
    click = ...
    down = ...
    up = ...

class MouseButton(Enum):
    left = ...
    middle = ...
    right = ...

class KeyAction(Enum):
    down = ...
    up = ...
    press = ...

class KeyboardInputAction(Enum):
    insertText = ...
    type = ...

class KeyboardModifier(Enum):
    Alt = ...
    Control = ...
    ControlOrMeta = ...
    Meta = ...
    Shift = ...

class SelectAttribute(Enum):
    value = ...
    label = ...
    text = label
    index = ...

class SupportedBrowsers(Enum):
    chromium = ...
    firefox = ...
    webkit = ...

ColorScheme: Incomplete
Permission: Incomplete
ScrollBehavior: Incomplete

class SizeFields(Enum):
    width = ...
    height = ...
    ALL = ...

class AreaFields(Enum):
    top = ...
    left = ...
    bottom = ...
    right = ...
    ALL = ...

class ScrollPosition(TypedDict):
    top: float
    left: float
    bottom: float
    right: float

class BoundingBoxFields(Enum):
    width = ...
    height = ...
    x = ...
    y = ...
    ALL = ...

class AutoClosingLevel(Enum):
    SUITE = ...
    TEST = ...
    MANUAL = ...
    KEEP = ...

class ElementState(IntFlag):
    attached = 1
    detached = 2
    visible = 4
    hidden = 8
    enabled = 16
    disabled = 32
    editable = 64
    readonly = 128
    selected = 256
    deselected = 512
    focused = 1024
    defocused = 2048
    checked = 4096
    unchecked = 8192
    stable = 16384

class ScreenshotFileTypes(Enum):
    png = ...
    jpeg = ...

class ScreenshotReturnType(Enum):
    path = ...
    path_string = ...
    bytes = ...
    base64 = ...

class PageLoadStates(Enum):
    load = ...
    domcontentloaded = ...
    networkidle = ...
    commit = ...

class ReduceMotion(Enum):
    reduce = ...
    no_preference = ...

class ForcedColors(Enum):
    active = ...
    none = ...
    null = ...

class ConditionInputs(Enum):
    attribute = 'get_attribute'
    attribute_names = 'get_attribute_names'
    bounding_box = 'get_bounding_box'
    browser_catalog = 'get_browser_catalog'
    checkbox_state = 'get_checkbox_state'
    classes = 'get_classes'
    client_size = 'get_client_size'
    download_state = 'get_download_state'
    element_count = 'get_element_count'
    element_states = 'get_element_states'
    page_source = 'get_page_source'
    property = 'get_property'
    scroll_position = 'get_scroll_position'
    scroll_size = 'get_scroll_size'
    select_options = 'get_select_options'
    selected_options = 'get_selected_options'
    style = 'get_style'
    table_cell_index = 'get_table_cell_index'
    table_row_index = 'get_table_row_index'
    text = 'get_text'
    title = 'get_title'
    url = 'get_url'
    viewport_size = 'get_viewport_size'

class Scope(Enum):
    Global = ...
    Suite = ...
    Test = ...
    Task = Test

class ServiceWorkersPermissions(Enum):
    allow = ...
    block = ...

class PlaywrightLogTypes(Enum):
    disabled = ...
    library = ...
    playwright = ...
    false = library
    true = playwright

class PageInfo(TypedDict):
    type: str
    title: str
    url: str
    id: str
    timestamp: float

class ContextInfo(TypedDict):
    type: str
    id: str
    activePage: str
    pages: list[PageInfo]

class BrowserInfo(TypedDict):
    type: str
    id: str
    contexts: list[ContextInfo]
    activeContext: str
    activeBrowser: bool

class FileUploadBuffer(TypedDict):
    name: str
    mimeType: str
    buffer: str

class CoverageType(Enum):
    js = ...
    css = ...
    all = ...

class ClockType(Enum):
    fixed = ...
    system = ...
    install = ...

class CLockAdvanceType(Enum):
    fast_forward = ...
    run_for = ...

class ClientCertificate(TypedDict, total=False):
    origin: str
    certPath: str
    keyPath: str
    pfxPath: str
    passphrase: str

class TracingGroupMode(Enum):
    Full = ...
    Browser = ...
    Playwright = ...

InstallableBrowser: Incomplete
InstallationOptions: Incomplete
InstallationOptionsHelp: Incomplete
