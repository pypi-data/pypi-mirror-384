from .base import ContextCache as ContextCache, LibraryComponent as LibraryComponent
from .generated.playwright_pb2 import Request as Request, Response as Response
from .keywords import Clock as Clock, Control as Control, Cookie as Cookie, Coverage as Coverage, Devices as Devices, Evaluation as Evaluation, Formatter as Formatter, Getters as Getters, Interaction as Interaction, LocatorHandler as LocatorHandler, Network as Network, Pdf as Pdf, PlaywrightState as PlaywrightState, Promises as Promises, RunOnFailureKeywords as RunOnFailureKeywords, StrictMode as StrictMode, Waiter as Waiter, WebAppState as WebAppState
from .keywords.crawling import Crawling as Crawling
from .playwright import Playwright as Playwright
from .utils import AutoClosingLevel as AutoClosingLevel, PlaywrightLogTypes as PlaywrightLogTypes, Scope as Scope, SettingsStack as SettingsStack, get_normalized_keyword as get_normalized_keyword, is_falsy as is_falsy, keyword as keyword, logger as logger, suppress_logging as suppress_logging
from .utils.data_types import DelayedKeyword as DelayedKeyword, HighLightElement as HighLightElement, KeywordCallStackEntry as KeywordCallStackEntry, LambdaFunction as LambdaFunction, RegExp as RegExp, SelectionType as SelectionType, SupportedBrowsers as SupportedBrowsers, TracingGroupMode as TracingGroupMode
from .version import __version__ as VERSION
from _typeshed import Incomplete
from datetime import timedelta
from overrides import overrides
from pathlib import Path
from robotlibcore import DynamicCore
from typing import Any, Literal

KW_CALL_CONTENT_TEMPLATE: str
KW_CALL_BANNER_FUNCTION: str

class Browser(DynamicCore):
    ROBOT_LIBRARY_VERSION = VERSION
    ROBOT_LISTENER_API_VERSION: int
    ROBOT_LIBRARY_LISTENER: Browser
    ROBOT_LIBRARY_SCOPE: str
    scope_stack: dict
    suite_ids: dict[str, None]
    current_test_id: str | None
    enable_playwright_debug: Incomplete
    playwright_process_host: Incomplete
    playwright_process_port: Incomplete
    auto_delete_passed_tracing: Incomplete
    external_browser_executable: dict[SupportedBrowsers, str]
    presenter_mode: HighLightElement | bool
    tracing_group_mode: Incomplete
    pause_on_failure: set[str]
    is_test_case_running: bool
    auto_closing_default_run_before_unload: bool
    keyword_call_stack: list[KeywordCallStackEntry]
    tracing_contexts: list[str]
    def __init__(self, *_, auto_closing_level: AutoClosingLevel = ..., auto_delete_passed_tracing: bool = False, enable_playwright_debug: PlaywrightLogTypes | bool = ..., enable_presenter_mode: HighLightElement | bool = False, external_browser_executable: dict[SupportedBrowsers, str] | None = None, highlight_on_failure: bool = False, jsextension: list[str] | str | None = None, language: str | None = None, playwright_process_host: str | None = None, playwright_process_port: int | None = None, plugins: list[str] | str | None = None, retry_assertions_for: timedelta = ..., run_on_failure: str = 'Take Screenshot  fail-screenshot-{index}', selector_prefix: str | None = None, show_keyword_call_banner: bool | None = None, strict: bool = True, timeout: timedelta = ..., tracing_group_mode: TracingGroupMode = ...) -> None: ...
    @property
    def playwright(self) -> Playwright: ...
    @property
    def keyword_call_banner_add_style(self): ...
    @property
    def show_keyword_call_banner(self): ...
    @property
    def run_on_failure_keyword(self) -> DelayedKeyword: ...
    @property
    def highlight_on_failure(self) -> bool: ...
    @property
    def timeout(self): ...
    def init_js_extension(self, js_extension_path: Path | str) -> Response.Keywords: ...
    def call_js_keyword(self, keyword_name: str, **args) -> Any: ...
    @property
    def outputdir(self) -> str: ...
    @outputdir.setter
    def outputdir(self, value: str): ...
    @property
    def browser_output(self) -> Path: ...
    @property
    def screenshots_output(self) -> Path: ...
    @property
    def video_output(self) -> Path: ...
    @property
    def traces_output(self) -> Path: ...
    @property
    def traces_temp(self) -> Path: ...
    @property
    def state_file(self): ...
    @property
    def coverage_output(self) -> Path: ...
    def run_keyword(self, name, args, kwargs=None): ...
    def get_keyword_tags(self, name: str) -> list: ...
    def execute_auto_closing(self, name: str, attrs: dict, typ: Literal['Test', 'Suite'], status: str): ...
    def set_keyword_call_banner(self, keyword_call=None) -> None: ...
    def keyword_error(self, selector) -> None: ...
    def get_timeout(self, timeout: timedelta | None) -> float: ...
    def convert_timeout(self, timeout: timedelta | float, to_ms: bool = True) -> float: ...
    def millisecs_to_timestr(self, timeout: float) -> str: ...
    @overrides
    def get_keyword_documentation(self, name): ...
    def execute_npx_playwright(self, command: str, *args: str): ...
