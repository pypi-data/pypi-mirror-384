/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_GRADIENTCONVERSIONPASS
#define GEN_PASS_DECL_GRADIENTLOWERINGPASS
#define GEN_PASS_DECL_GRADIENTPOSTPROCESSINGPASS
#define GEN_PASS_DECL_GRADIENTPREPROCESSINGPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// GradientConversionPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GRADIENTCONVERSIONPASS
struct GradientConversionPassOptions {
  bool useGenericFunctions = true;
};
#undef GEN_PASS_DECL_GRADIENTCONVERSIONPASS
#endif // GEN_PASS_DECL_GRADIENTCONVERSIONPASS
#ifdef GEN_PASS_DEF_GRADIENTCONVERSIONPASS
namespace impl {

template <typename DerivedT>
class GradientConversionPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientConversionPassBase;

  GradientConversionPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientConversionPassBase(const GradientConversionPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientConversionPassBase& operator=(const GradientConversionPassBase &) = delete;
  GradientConversionPassBase(GradientConversionPassBase &&) = delete;
  GradientConversionPassBase& operator=(GradientConversionPassBase &&) = delete;
  ~GradientConversionPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-gradient-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-gradient-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return "Perform a dialect conversion from Gradient to LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientConversionPass");
  }
  ::llvm::StringRef getName() const override { return "GradientConversionPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<index::IndexDialect>();
    registry.insert<linalg::LinalgDialect>();
    registry.insert<LLVM::LLVMDialect>();
    registry.insert<func::FuncDialect>();
    registry.insert<catalyst::quantum::QuantumDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientConversionPassBase<DerivedT>)

  GradientConversionPassBase(GradientConversionPassOptions options) : GradientConversionPassBase() {
    useGenericFunctions = std::move(options.useGenericFunctions);
  }
protected:
  ::mlir::Pass::Option<bool> useGenericFunctions{*this, "use-generic-functions", ::llvm::cl::desc("Use generic allocation and deallocation functions instead of the classic 'malloc', 'aligned_alloc' and 'free' functions"), ::llvm::cl::init(true)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GRADIENTCONVERSIONPASS
#endif // GEN_PASS_DEF_GRADIENTCONVERSIONPASS

//===----------------------------------------------------------------------===//
// GradientLoweringPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GRADIENTLOWERINGPASS
#undef GEN_PASS_DECL_GRADIENTLOWERINGPASS
#endif // GEN_PASS_DECL_GRADIENTLOWERINGPASS
#ifdef GEN_PASS_DEF_GRADIENTLOWERINGPASS
namespace impl {

template <typename DerivedT>
class GradientLoweringPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientLoweringPassBase;

  GradientLoweringPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientLoweringPassBase(const GradientLoweringPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientLoweringPassBase& operator=(const GradientLoweringPassBase &) = delete;
  GradientLoweringPassBase(GradientLoweringPassBase &&) = delete;
  GradientLoweringPassBase& operator=(GradientLoweringPassBase &&) = delete;
  ~GradientLoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-gradients");
  }
  ::llvm::StringRef getArgument() const override { return "lower-gradients"; }

  ::llvm::StringRef getDescription() const override { return "Lower operations in the gradient dialect to core MLIR dialects."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientLoweringPass");
  }
  ::llvm::StringRef getName() const override { return "GradientLoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<arith::ArithDialect>();
    registry.insert<linalg::LinalgDialect>();
    registry.insert<index::IndexDialect>();
    registry.insert<tensor::TensorDialect>();
    registry.insert<memref::MemRefDialect>();
    registry.insert<bufferization::BufferizationDialect>();
    registry.insert<catalyst::CatalystDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientLoweringPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GRADIENTLOWERINGPASS
#endif // GEN_PASS_DEF_GRADIENTLOWERINGPASS

//===----------------------------------------------------------------------===//
// GradientPostprocessingPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GRADIENTPOSTPROCESSINGPASS
#undef GEN_PASS_DECL_GRADIENTPOSTPROCESSINGPASS
#endif // GEN_PASS_DECL_GRADIENTPOSTPROCESSINGPASS
#ifdef GEN_PASS_DEF_GRADIENTPOSTPROCESSINGPASS
namespace impl {

template <typename DerivedT>
class GradientPostprocessingPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientPostprocessingPassBase;

  GradientPostprocessingPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientPostprocessingPassBase(const GradientPostprocessingPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientPostprocessingPassBase& operator=(const GradientPostprocessingPassBase &) = delete;
  GradientPostprocessingPassBase(GradientPostprocessingPassBase &&) = delete;
  GradientPostprocessingPassBase& operator=(GradientPostprocessingPassBase &&) = delete;
  ~GradientPostprocessingPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gradient-postprocess");
  }
  ::llvm::StringRef getArgument() const override { return "gradient-postprocess"; }

  ::llvm::StringRef getDescription() const override { return "Make the signatures of ForwardOp and ReverseOp compatibleto Enzyme."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientPostprocessingPass");
  }
  ::llvm::StringRef getName() const override { return "GradientPostprocessingPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<memref::MemRefDialect>();
    registry.insert<index::IndexDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientPostprocessingPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GRADIENTPOSTPROCESSINGPASS
#endif // GEN_PASS_DEF_GRADIENTPOSTPROCESSINGPASS

//===----------------------------------------------------------------------===//
// GradientPreprocessingPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_GRADIENTPREPROCESSINGPASS
#undef GEN_PASS_DECL_GRADIENTPREPROCESSINGPASS
#endif // GEN_PASS_DECL_GRADIENTPREPROCESSINGPASS
#ifdef GEN_PASS_DEF_GRADIENTPREPROCESSINGPASS
namespace impl {

template <typename DerivedT>
class GradientPreprocessingPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientPreprocessingPassBase;

  GradientPreprocessingPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientPreprocessingPassBase(const GradientPreprocessingPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientPreprocessingPassBase& operator=(const GradientPreprocessingPassBase &) = delete;
  GradientPreprocessingPassBase(GradientPreprocessingPassBase &&) = delete;
  GradientPreprocessingPassBase& operator=(GradientPreprocessingPassBase &&) = delete;
  ~GradientPreprocessingPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gradient-preprocess");
  }
  ::llvm::StringRef getArgument() const override { return "gradient-preprocess"; }

  ::llvm::StringRef getDescription() const override { return "Insert Func.CallOp for ForwardOp and ReverseOp."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientPreprocessingPass");
  }
  ::llvm::StringRef getName() const override { return "GradientPreprocessingPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<index::IndexDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientPreprocessingPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_GRADIENTPREPROCESSINGPASS
#endif // GEN_PASS_DEF_GRADIENTPREPROCESSINGPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// GradientConversionPass Registration
//===----------------------------------------------------------------------===//

inline void registerGradientConversionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientConversionPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGradientConversionPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientConversionPass();
  });
}

//===----------------------------------------------------------------------===//
// GradientLoweringPass Registration
//===----------------------------------------------------------------------===//

inline void registerGradientLoweringPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientLoweringPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGradientLoweringPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientLoweringPass();
  });
}

//===----------------------------------------------------------------------===//
// GradientPostprocessingPass Registration
//===----------------------------------------------------------------------===//

inline void registerGradientPostprocessingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientPostprocessingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGradientPostprocessingPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientPostprocessingPass();
  });
}

//===----------------------------------------------------------------------===//
// GradientPreprocessingPass Registration
//===----------------------------------------------------------------------===//

inline void registerGradientPreprocessingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientPreprocessingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerGradientPreprocessingPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return catalyst::createGradientPreprocessingPass();
  });
}

//===----------------------------------------------------------------------===//
// gradient Registration
//===----------------------------------------------------------------------===//

inline void registergradientPasses() {
  registerGradientConversionPass();
  registerGradientLoweringPass();
  registerGradientPostprocessingPass();
  registerGradientPreprocessingPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class GradientConversionPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientConversionPassBase;

  GradientConversionPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientConversionPassBase(const GradientConversionPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientConversionPassBase& operator=(const GradientConversionPassBase &) = delete;
  GradientConversionPassBase(GradientConversionPassBase &&) = delete;
  GradientConversionPassBase& operator=(GradientConversionPassBase &&) = delete;
  ~GradientConversionPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-gradient-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-gradient-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return "Perform a dialect conversion from Gradient to LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientConversionPass");
  }
  ::llvm::StringRef getName() const override { return "GradientConversionPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<index::IndexDialect>();
    registry.insert<linalg::LinalgDialect>();
    registry.insert<LLVM::LLVMDialect>();
    registry.insert<func::FuncDialect>();
    registry.insert<catalyst::quantum::QuantumDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientConversionPassBase<DerivedT>)

protected:
  ::mlir::Pass::Option<bool> useGenericFunctions{*this, "use-generic-functions", ::llvm::cl::desc("Use generic allocation and deallocation functions instead of the classic 'malloc', 'aligned_alloc' and 'free' functions"), ::llvm::cl::init(true)};
};

template <typename DerivedT>
class GradientLoweringPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientLoweringPassBase;

  GradientLoweringPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientLoweringPassBase(const GradientLoweringPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientLoweringPassBase& operator=(const GradientLoweringPassBase &) = delete;
  GradientLoweringPassBase(GradientLoweringPassBase &&) = delete;
  GradientLoweringPassBase& operator=(GradientLoweringPassBase &&) = delete;
  ~GradientLoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-gradients");
  }
  ::llvm::StringRef getArgument() const override { return "lower-gradients"; }

  ::llvm::StringRef getDescription() const override { return "Lower operations in the gradient dialect to core MLIR dialects."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientLoweringPass");
  }
  ::llvm::StringRef getName() const override { return "GradientLoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<arith::ArithDialect>();
    registry.insert<linalg::LinalgDialect>();
    registry.insert<index::IndexDialect>();
    registry.insert<tensor::TensorDialect>();
    registry.insert<memref::MemRefDialect>();
    registry.insert<bufferization::BufferizationDialect>();
    registry.insert<catalyst::CatalystDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientLoweringPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class GradientPostprocessingPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientPostprocessingPassBase;

  GradientPostprocessingPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientPostprocessingPassBase(const GradientPostprocessingPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientPostprocessingPassBase& operator=(const GradientPostprocessingPassBase &) = delete;
  GradientPostprocessingPassBase(GradientPostprocessingPassBase &&) = delete;
  GradientPostprocessingPassBase& operator=(GradientPostprocessingPassBase &&) = delete;
  ~GradientPostprocessingPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gradient-postprocess");
  }
  ::llvm::StringRef getArgument() const override { return "gradient-postprocess"; }

  ::llvm::StringRef getDescription() const override { return "Make the signatures of ForwardOp and ReverseOp compatibleto Enzyme."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientPostprocessingPass");
  }
  ::llvm::StringRef getName() const override { return "GradientPostprocessingPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<memref::MemRefDialect>();
    registry.insert<index::IndexDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientPostprocessingPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class GradientPreprocessingPassBase : public ::mlir::OperationPass<> {
public:
  using Base = GradientPreprocessingPassBase;

  GradientPreprocessingPassBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  GradientPreprocessingPassBase(const GradientPreprocessingPassBase &other) : ::mlir::OperationPass<>(other) {}
  GradientPreprocessingPassBase& operator=(const GradientPreprocessingPassBase &) = delete;
  GradientPreprocessingPassBase(GradientPreprocessingPassBase &&) = delete;
  GradientPreprocessingPassBase& operator=(GradientPreprocessingPassBase &&) = delete;
  ~GradientPreprocessingPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("gradient-preprocess");
  }
  ::llvm::StringRef getArgument() const override { return "gradient-preprocess"; }

  ::llvm::StringRef getDescription() const override { return "Insert Func.CallOp for ForwardOp and ReverseOp."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("GradientPreprocessingPass");
  }
  ::llvm::StringRef getName() const override { return "GradientPreprocessingPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<index::IndexDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(GradientPreprocessingPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
