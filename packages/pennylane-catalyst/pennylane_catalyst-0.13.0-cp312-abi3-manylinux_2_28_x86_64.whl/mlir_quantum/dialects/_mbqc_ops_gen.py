
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "mbqc"

@_ods_cext.register_operation(_Dialect)
class GraphStatePrepOp(_ods_ir.OpView):
  OPERATION_NAME = "mbqc.graph_state_prep"

  _ODS_REGIONS = (0, True)

  def __init__(self, qreg, adj_matrix, init_op, entangle_op, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(adj_matrix)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["init_op"] = (init_op if (
    isinstance(init_op, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(init_op, context=_ods_context))
    attributes["entangle_op"] = (entangle_op if (
    isinstance(entangle_op, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(entangle_op, context=_ods_context))
    results.append(qreg)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def adj_matrix(self):
    return self.operation.operands[0]

  @builtins.property
  def init_op(self):
    return self.operation.attributes["init_op"]

  @init_op.setter
  def init_op(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["init_op"] = value

  @builtins.property
  def entangle_op(self):
    return self.operation.attributes["entangle_op"]

  @entangle_op.setter
  def entangle_op(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["entangle_op"] = value

  @builtins.property
  def qreg(self):
    return self.operation.results[0]

def graph_state_prep(qreg, adj_matrix, init_op, entangle_op, *, loc=None, ip=None) -> _ods_ir.Value:
  return GraphStatePrepOp(qreg=qreg, adj_matrix=adj_matrix, init_op=init_op, entangle_op=entangle_op, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class MeasureInBasisOp(_ods_ir.OpView):
  OPERATION_NAME = "mbqc.measure_in_basis"

  _ODS_REGIONS = (0, True)

  def __init__(self, mres, out_qubit, in_qubit, plane, angle, *, postselect=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(in_qubit)
    operands.append(angle)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["plane"] = (plane if (
    isinstance(plane, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('MeasurementPlaneAttr')) else
      _ods_ir.AttrBuilder.get('MeasurementPlaneAttr')(plane, context=_ods_context))
    if postselect is not None: attributes["postselect"] = (postselect if (
        isinstance(postselect, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I32Attr')) else
          _ods_ir.AttrBuilder.get('I32Attr')(postselect, context=_ods_context))
    results.append(mres)
    results.append(out_qubit)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def in_qubit(self):
    return self.operation.operands[0]

  @builtins.property
  def angle(self):
    return self.operation.operands[1]

  @builtins.property
  def plane(self):
    return self.operation.attributes["plane"]

  @plane.setter
  def plane(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["plane"] = value

  @builtins.property
  def postselect(self):
    if "postselect" not in self.operation.attributes:
      return None
    return self.operation.attributes["postselect"]

  @postselect.setter
  def postselect(self, value):
    if value is not None:
      self.operation.attributes["postselect"] = value
    elif "postselect" in self.operation.attributes:
      del self.operation.attributes["postselect"]

  @postselect.deleter
  def postselect(self):
    del self.operation.attributes["postselect"]

  @builtins.property
  def mres(self):
    return self.operation.results[0]

  @builtins.property
  def out_qubit(self):
    return self.operation.results[1]

def measure_in_basis(mres, out_qubit, in_qubit, plane, angle, *, postselect=None, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return MeasureInBasisOp(mres=mres, out_qubit=out_qubit, in_qubit=in_qubit, plane=plane, angle=angle, postselect=postselect, loc=loc, ip=ip).results
