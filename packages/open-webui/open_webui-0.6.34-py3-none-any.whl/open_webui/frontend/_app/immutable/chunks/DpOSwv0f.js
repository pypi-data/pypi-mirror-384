import{e as i}from"./BzMu2T5T.js";const s=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/create`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(e=t.detail,null));if(e)throw e;return n},l=async(a="")=>{let o=null;const e=await fetch(`${i}/functions/`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).then(n=>n).catch(n=>(o=n.detail,null));if(o)throw o;return e},u=async(a="")=>{let o=null;const e=await fetch(`${i}/functions/list`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).then(n=>n).catch(n=>(o=n.detail,null));if(o)throw o;return e},h=async(a="",o)=>{let e=null;const n=await fetch(`${i}/functions/load/url`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({url:o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},p=async(a="")=>{let o=null;const e=await fetch(`${i}/functions/export`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).then(n=>n).catch(n=>(o=n.detail,null));if(o)throw o;return e},d=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},f=async(a,o,e)=>{let n=null;const t=await fetch(`${i}/functions/id/${o}/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...e})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(n=r.detail,null));if(n)throw n;return t},y=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/delete`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},j=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/toggle`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},w=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/toggle/global`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},$=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/valves`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},T=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/valves/spec`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},B=async(a,o,e)=>{let n=null;const t=await fetch(`${i}/functions/id/${o}/valves/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...e})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(n=r.detail,null));if(n)throw n;return t},g=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/valves/user`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},m=async(a,o)=>{let e=null;const n=await fetch(`${i}/functions/id/${o}/valves/user/spec`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).then(t=>t).catch(t=>(e=t.detail,null));if(e)throw e;return n},v=async(a,o,e)=>{let n=null;const t=await fetch(`${i}/functions/id/${o}/valves/user/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",authorization:`Bearer ${a}`},body:JSON.stringify({...e})}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).then(r=>r).catch(r=>(n=r.detail,null));if(n)throw n;return t};export{d as a,g as b,s as c,m as d,$ as e,T as f,l as g,v as h,B as i,u as j,y as k,h as l,p as m,j as n,w as t,f as u};
//# sourceMappingURL=DpOSwv0f.js.map
