import{e as o}from"./BzMu2T5T.js";const u=async r=>{let a=null;const n=await fetch(`${o}/auths/admin/details`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n},d=async r=>{let a=null;const n=await fetch(`${o}/auths/admin/config`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n},p=async(r,a)=>{let n=null;const t=await fetch(`${o}/auths/admin/config`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(a)}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},y=async r=>{let a=null;const n=await fetch(`${o}/auths/`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},credentials:"include"}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n},f=async(r,a)=>{let n=null;const t=await fetch(`${o}/auths/ldap`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({user:r,password:a})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},w=async(r="")=>{let a=null;const n=await fetch(`${o}/auths/admin/config/ldap`,{method:"GET",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n},j=async(r="",a)=>{let n=null;const t=await fetch(`${o}/auths/admin/config/ldap`,{method:"POST",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}},body:JSON.stringify({enable_ldap:a})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},g=async(r="")=>{let a=null;const n=await fetch(`${o}/auths/admin/config/ldap/server`,{method:"GET",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n},T=async(r="",a)=>{let n=null;const t=await fetch(`${o}/auths/admin/config/ldap/server`,{method:"POST",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}},body:JSON.stringify(a)}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},$=async(r,a)=>{let n=null;const t=await fetch(`${o}/auths/signin`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({email:r,password:a})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},m=async(r,a,n,t)=>{let e=null;const i=await fetch(`${o}/auths/signup`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({name:r,email:a,password:n,profile_image_url:t})}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).catch(s=>(e=s.detail,null));if(e)throw e;return i},S=async()=>{let r=null;const a=await fetch(`${o}/auths/signout`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(r=n.detail,null));if(r)throw r;return sessionStorage.clear(),a},C=async(r,a,n,t,e="pending",i=null)=>{let s=null;const h=await fetch(`${o}/auths/add`,{method:"POST",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}},body:JSON.stringify({name:a,email:n,password:t,role:e,...i&&{profile_image_url:i}})}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>(s=c.detail,null));if(s)throw s;return h},O=async(r,a)=>{let n=null;const t=await fetch(`${o}/auths/update/profile`,{method:"POST",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}},body:JSON.stringify({...a})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(n=e.detail,null));if(n)throw n;return t},k=async(r,a,n)=>{let t=null;const e=await fetch(`${o}/auths/update/password`,{method:"POST",headers:{"Content-Type":"application/json",...r&&{authorization:`Bearer ${r}`}},body:JSON.stringify({password:a,new_password:n})}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).catch(i=>(t=i.detail,null));if(t)throw t;return e},B=async r=>{let a=null;const n=await fetch(`${o}/auths/api_key`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n.api_key},P=async r=>{let a=null;const n=await fetch(`${o}/auths/api_key`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(a=t.detail,null));if(a)throw a;return n.api_key};export{m as a,S as b,C as c,d,g as e,w as f,y as g,p as h,j as i,T as j,k,f as l,P as m,O as n,B as o,u as p,$ as u};
//# sourceMappingURL=BMrfKXJR.js.map
