[project]
name = "10xscale-agentflow"
version = "0.4.3"
description = "10xScale Agentflow is a Python framework for building, orchestrating, and managing multi-agent systems. Designed for flexibility and scalability, 10xScale Agentflow enables developers to create intelligent agents that collaborate, communicate, and solve complex tasks together."
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
dependencies = [
    "injectq>=0.3.0",
    "pydantic",
    "python-dotenv",
]
authors = [
    {name = "10xScale", email = "contact@10xscale.ai"}
]
maintainers = [
    {name = "Shudipto Trafder", email = "shudiptotrafder@gmail.com"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Development Status :: 3 - Alpha",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]


[project.urls]
Homepage = "https://github.com/10xHub/agentflow"
Repository = "https://github.com/10xHub/agentflow"
Issues = "https://github.com/10xHub/agentflow/issues"
Documentation = "https://10xhub.github.io/Agentflow/"


[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
litellm = ["litellm>=1.77.0"]
pg_checkpoint = ["asyncpg>=0.29.0","redis>=4.2"]
mcp = ["fastmcp>=2.11.3","mcp>=1.13.0"]
composio = ["composio>=0.8.0"]
langchain = ["langchain-core>=0.3.0","langchain-community>=0.3.0"]
redis = ["redis>=4.2"]
kafka = ["aiokafka>=0.8.0"]
rabbitmq = ["aio-pika>=9.0.0"]
qdrant = ["qdrant-client>=1.7.0"]
mem0 = ["mem0ai>=0.1.117"]

all_publishers = [
    "redis>=4.2",
    "aiokafka>=0.8.0",
    "aio-pika>=9.0.0",
]

[tool.setuptools.packages.find]
include = ["agentflow*"]
exclude = ["normal_tests*", "tests*", "examples*", "docs*"]


[tool.ruff]
line-length = 100
target-version = "py312"
lint.fixable = ["ALL"]
lint.select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "PL",  # pylint
    "I",   # isort
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "S",   # flake8-bandit
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "T20", # flake8-print
]
lint.ignore = [
    "UP006", # https://github.com/charliermarsh/ruff/pull/4427
    "UP007", # https://github.com/charliermarsh/ruff/pull/4427
    # Mutable class attributes should be annotated with `typing.ClassVar`
    # Too many violations
    "RUF012",
    # Logging statement uses f-string
    "G004",
    #B904 Within an `except` clause, raise exceptions with
    #`raise ... from err` or `raise ... from None` to distinguish
    #them from errors in exception handling
    "B904",
    #Do not perform function call `Injected` in argument defaults
    "B008",
    "ISC001",# flake8-implicit-str-concat
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = [
    "migrations/*",  # Exclude the migrations folder
    "venv/*",
    "example/*",
    "tests/*",
    "docs/*",
]


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"bin/*.py" = ["E402", "S603", "T201", "S101"]
"*/tests/*.py" = ["E402", "S603", "T201", "S101","PLR2004"]
"*/test/*.py" = ["E402", "S603", "T201", "S101"]
"scripts/*.py" = ["E402", "S603", "T201", "S101", "INP001"]
"*/__init__.py" = ["E402", "S603", "T201", "S101"]
"*/migrations/*.py" = ["E402", "S603", "T201", "S101"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["src"]
[tool.ruff.lint.pylint]
max-args = 10
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.bandit]
exclude_dirs = ["*/tests/*", "*/migrations", "*/scripts/*", "docs/*", "examples/*"]
skips = ["B101", "B611", "B601", "B608", "B102", "B307"]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.mypy]
exclude = [
    "normal_tests/*",
    "tests/*",
    "examples/*",
    "docs/*",
]

[tool.pytest.ini_options]
env = [
    "ENVIRONMENT=pytest",
]
testpaths = [
    "tests/",
]
filterwarnings = [
    "ignore::DeprecationWarning"
]
# Only collect tests from the tests directory
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Exclude other directories from test discovery
norecursedirs = [
    "normal_tests",
    "examples",
    "docs",
    ".git",
    ".tox",
    "dist",
    "build",
    "agentflow.egg-info",
    "__pycache__",
    ".venv"
]
addopts = [
    "--cov=agentflow",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=0",
    "--strict-markers",
    "-v"
]
markers = [
    "asyncio: mark test as async test",
    "integration: mark test as integration test requiring real databases",
]

[tool.coverage.run]
source = ["agentflow"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "normal_tests/*",
    "examples/*",
    "docs/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest-env]
ENVIRONMENT = "pytest"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-env>=1.1.5",
    "pytest-xdist>=3.8.0",
    "pre-commit>=3.8.0",
    "asyncpg>=0.30.0",
    "redis>=6.4.0",
    "fastmcp>=2.12.3",
    "mcp>=1.14.1",
    "composio>=0.8.15",
    "langchain-core>=0.3.76",
    "langchain-community>=0.3.29",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.1.15",
    "mkdocstrings[python]",
    "mkdocs-material-extensions>=1.0.3",
    "mkdocs-literate-nav>=0.4.1",
    "pymdown-extensions",
    "mkdocs-autorefs",
    "mkdocs-section-index",
    "mkdocs_gen_files",
    "mem0ai>=0.1.117"
]

