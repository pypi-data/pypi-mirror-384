import unittest
import os
from pathlib import Path

from steam_sdk.data.DataModelMagnet import DataModelMagnet
from steam_sdk.parsers.ParserRoxie import ParserRoxie
from steam_sdk.builders.BuilderPySIGMA import BuilderPySIGMA
from steam_sdk.parsers.ParserYAML import yaml_to_data
from steam_sdk.parsers.ParserPySIGMA import ParserPySIGMA
from tests.TestHelpers import assert_equal_yaml


class TestBuilderFiQuS(unittest.TestCase):

    def setUp(self) -> None:
        """
            This function is executed before each test in this class
        """
        self.current_path = os.getcwd()
        self.test_folder = os.path.dirname(__file__)
        os.chdir(os.path.dirname(self.test_folder))  # move to the directory where this file is located
        print('\nCurrent folder:          {}'.format(self.current_path))
        print('\nTest is run from folder: {}'.format(os.getcwd()))

    def tearDown(self) -> None:
        """
            This function is executed after each test in this class
        """
        os.chdir(self.current_path)  # go back to initial folder

    def test_buildSIGMA(self):
        """
        Simple test to check if the 'yaml', 'geom', 'set' yaml files generated by BuilderSIGMA match the reference files.
        """
        magnet_names = ['MQXA']
        for magnet_name in magnet_names:
            input_folder_path = os.path.join(Path(self.test_folder).parent, 'builders', 'model_library', 'magnets', magnet_name, 'input')
            input_file_path = os.path.join(input_folder_path, f'modelData_{magnet_name}.yaml')
            print(f'Testing with input file: {input_file_path}.')
            model_data = yaml_to_data(input_file_path, DataModelMagnet)
            path_data = Path.joinpath(Path(input_file_path).parent, model_data.Sources.coil_fromROXIE).resolve()
            path_cadata = Path.joinpath(Path(input_file_path).parent, model_data.Sources.conductor_fromROXIE).resolve()
            path_iron = Path.joinpath(Path(input_file_path).parent, model_data.Sources.iron_fromROXIE).resolve()
            pR = ParserRoxie()
            roxie_data = pR.getData(dir_data=path_data, dir_cadata=path_cadata, dir_iron=path_iron, path_to_yaml_model_data=input_file_path)
            builder_SIGMA = BuilderPySIGMA(model_data=model_data, roxie_data=roxie_data, path_model_folder=input_folder_path)
            # assert
            self.assertTrue(hasattr(builder_SIGMA, 'data_SIGMA'))  # check if data_SIGMA in an attribute of data_SIGMA
            self.assertTrue(hasattr(builder_SIGMA, 'data_SIGMA_geo'))  # check if additional data_SIGMA_geo required by SIGMA exists
            self.assertTrue(hasattr(builder_SIGMA, 'data_SIGMA_set'))  # check if additional data_SIGMA_set required by SIGMA exists
