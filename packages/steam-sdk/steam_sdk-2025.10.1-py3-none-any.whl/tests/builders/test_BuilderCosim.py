import os
import unittest

import matplotlib.pyplot as plt

from steam_sdk.builders.BuilderCosim import BuilderCosim
from steam_sdk.data.DataSettings import DataSettings
from steam_sdk.utils.delete_if_existing import delete_if_existing
from tests.TestHelpers import assert_equal_yaml


class TestBuilderModel(unittest.TestCase):

    def setUp(self) -> None:
        """
            This function is executed before each test in this class
        """
        self.current_path = os.path.dirname(__file__)
        os.chdir(os.path.dirname(__file__))  # move the directory where this file is located
        print('\nCurrent folder:        {}'.format(self.current_path))
        print('Test is run from folder: {}'.format(os.getcwd()))

        # Set settings without reading them from from SDK test settings file
        self.settings = DataSettings(local_COSIM_folder='output/output_library/COSIM',
                                     local_PyCoSim_folder='output/output_library/PyCoSim',
                                     local_library_path='./model_library')

    def tearDown(self) -> None:
        """
            This function is executed after each test in this class
        """
        os.chdir(self.current_path)  # go back to initial folder

        # Close all figures
        plt.close('all')

    def test_BuilderCosim_initialization(self):
        """
            Check that an exception is raised when BuilderCosim object is initialized without providing an input yaml file
        """
        with self.assertRaises(Exception) as context:
            BuilderCosim(file_model_data=None, data_settings=self.settings, verbose=True)
        self.assertTrue('expected str, bytes or os.PathLike object, not NoneType' in str(context.exception))
        print(f'This exception was correctly raised: {context.exception}')

    def test_BuilderCosim_readYaml_REFERENCE(self):
        """
            Check that DataLEDET object can be initialized and can read the reference blank yaml file generated by DataModelMagnet()
        """
        # arrange
        name_reference_file = 'data_model_cosim_REFERENCE_all_keys.yaml'
        file_path = os.path.dirname(__file__)  # path to the parent directory (with respect to this file)
        reference_file = os.path.join(os.path.dirname(file_path), 'data', 'references', name_reference_file)
        print(f"Selected reference_file: {reference_file}")

        # act
        BC = BuilderCosim(file_model_data=reference_file, data_settings=self.settings, verbose=True)

        # assert - Input yaml file was read and set to BuilderCosim attribute
        self.assertTrue(hasattr(BC, 'cosim_data'))

    # TODO fix and re-enable this test after changes to cosim module are finished
    def test_BuilderCosim_COSIM_multiple(self):
        """
            Check that BuilderCosim object can be initialized, read a real model input yaml file, and generate the correct COSIM model
        """
        # arrange
        cosim_names = ['IPQ_2magnets']
        sim_number = 0

        # act+assert
        for cosim_name in cosim_names:
            print('Co-simulation: {}'.format(cosim_name))
            self._compare_to_reference_COSIM(cosim_name, sim_number=sim_number, verbose=True)

    def test_BuilderCosim_PyCoSim_CCT(self):
        """
            Check that BuilderCosim object can be initialized, read a real model input yaml file, and generate the correct PyCoSim model
            Note: This test is tailored for CCT_FiQuS_LEDET model and will likely not work for other cosim models
        """
        # arrange
        cosim_names = ['CCT_FiQuS_LEDET']
        sim_number = 25

        # act+assert
        for cosim_name in cosim_names:
            print('Co-simulation: {}'.format(cosim_name))
            self._compare_to_reference_PyCoSim(cosim_name, sim_number, verbose=True)


    ###############################################################################################
    # Helper methods
    def _compare_to_reference_COSIM(self, cosim_name: str, sim_number: int, verbose=False):
        """
            Helper method called by other methods
            Check that BuilderCosim object can be initialized, read a model input yaml file, and generate a COSIM model
            cosim_name: can be any co-simulation model name in the library

            Note: This test is tailored for the IPQ_2magnets COSIM model and will likely not work for other cosim models
        """

        # arrange
        max_relative_error = 1e-6  # Maximum accepted relative error for excel, csv and map2d file comparison

        file_model_data = os.path.join('model_library', 'cosims', cosim_name, 'input', f'modelData_{cosim_name}.yaml')
        output_path = self.settings.local_COSIM_folder
        output_path_model = os.path.join(output_path, cosim_name, str(sim_number), 'Input')
        # input_file_REFERENCE = os.path.join('references', 'cosims', cosim_name, cosim_name + '_REFERENCE.xlsx')
        # input_file_GENERATED = os.path.join('model_library', 'cosims', cosim_name, 'output', cosim_name + '.xlsx')
        delete_if_existing(os.path.join(output_path, cosim_name), verbose=True)

        # act
        BC = BuilderCosim(file_model_data=file_model_data, data_settings=self.settings, verbose=verbose)
        BC.buildCOSIM(sim_name=cosim_name, sim_number=sim_number, output_path=output_path)

        # assert - COSIM config file exists # TODO check correctness of the files
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'COSIMConfig.json')))
        # assert - PSPICE_1 model files exist
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'PSPICE_1_config.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'PSPICE_1_InputOutputPortDefinition.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'IPQ_RQ4_2_2xRPHH_2xMQY.cir')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'generic_power_converters.lib')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'IPQ_Diodes.lib')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'PSPICE_1', 'magnets_generic.lib')))
        # assert - LEDET_1 model files exist
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_1', 'LEDET', 'MQY_2in1', 'Input', 'Control current input')))
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_1', 'LEDET', 'MQY_2in1', 'Input', 'InitializationFiles')))
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_1', 'LEDET', 'MQY_2in1', 'Input', 'Initialize variables')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'LEDET_1_config.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'LEDET_1_InputOutputPortDefinition.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'LEDET', 'MQY_2in1', 'Input', 'MQY_2in1_0.xlsx')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'LEDET', 'MQY_2in1', 'Input', 'MQY_2in1_selfMutualInductanceMatrix.csv')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'Field maps', 'MQY_2in1', 'MQY_2in1_All_WithIron_WithSelfField.map2d')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'Field maps', 'MQY_2in1', 'MQY_2in1_E1_WithIron_WithSelfField.map2d')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_1', 'Field maps', 'MQY_2in1', 'MQY_2in1_E2_WithIron_WithSelfField.map2d')))
        # assert - LEDET_2 model files exist
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_2', 'LEDET', 'MQY_2in1', 'Input', 'Control current input')))
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_2', 'LEDET', 'MQY_2in1', 'Input', 'InitializationFiles')))
        self.assertTrue(os.path.isdir(os.path.join(output_path_model, 'LEDET_2', 'LEDET', 'MQY_2in1', 'Input', 'Initialize variables')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'LEDET_2_config.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'LEDET_2_InputOutputPortDefinition.json')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'LEDET', 'MQY_2in1', 'Input', 'MQY_2in1_0.xlsx')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'LEDET', 'MQY_2in1', 'Input', 'MQY_2in1_selfMutualInductanceMatrix.csv')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'Field maps', 'MQY_2in1', 'MQY_2in1_All_WithIron_WithSelfField.map2d')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'Field maps', 'MQY_2in1', 'MQY_2in1_E1_WithIron_WithSelfField.map2d')))
        self.assertTrue(os.path.isfile(os.path.join(output_path_model, 'LEDET_2', 'Field maps', 'MQY_2in1', 'MQY_2in1_E2_WithIron_WithSelfField.map2d')))

    def _compare_to_reference_PyCoSim(self, cosim_name: str, sim_number: int, verbose=False):
        """
            Helper method called by other methods
            Check that BuilderCosim object can be initialized, read a model input yaml file, and generate a PyCoSim model
            cosim_name: can be any co-simulation model name in the library
        """

        # arrange
        file_model_data = os.path.join('model_library', 'cosims', cosim_name, 'input', 'modelData_' + cosim_name + '.yaml')
        print(f'Input file: {file_model_data}')
        output_path = self.settings.local_PyCoSim_folder

        path_file_name_GENERATED = os.path.join(output_path, f'{cosim_name}_{sim_number}.yaml')  # the expected output file name depends on the entry in the yaml file
        print(f'Output file file: {path_file_name_GENERATED}')
        delete_if_existing(output_path, verbose=True)

        path_file_name_REFERENCE = os.path.join('references', 'PyCoSim', cosim_name, cosim_name + '_REFERENCE.yaml')
        # act
        BC = BuilderCosim(file_model_data=file_model_data, data_settings=self.settings, verbose=verbose)
        BC.buildPyCoSim(sim_name=cosim_name, sim_number=sim_number, output_path=output_path)

        # assert
        assert_equal_yaml(path_file_name_REFERENCE, path_file_name_GENERATED, check_for_same_order=False)
