import os
import unittest
from pathlib import Path

from steam_sdk.builders.BuilderModel import BuilderModel
from steam_sdk.builders.BuilderPyBBQ import BuilderPyBBQ
from steam_sdk.parsers.ParserLEDET import CompareLEDETParameters
from steam_sdk.parsers.ParserPyBBQ import ParserPyBBQ
from steam_sdk.utils.delete_if_existing import delete_if_existing
from steam_sdk.utils.read_settings_file import read_settings_file


class TestBuilderModel(unittest.TestCase):

    def setUp(self) -> None:
        """
            This function is executed before each test in this class
        """
        self.current_path = os.getcwd()
        os.chdir(os.path.dirname(__file__))  # move the directory where this file is located
        print('\nCurrent folder:          {}'.format(self.current_path))
        print('Test is run from folder: {}'.format(os.getcwd()))

        absolute_path_settings_folder = str(Path(os.path.join(os.getcwd(), '../')).resolve())
        self.settings = read_settings_file(absolute_path_settings_folder=absolute_path_settings_folder, verbose=True)

    def tearDown(self) -> None:
        """
            This function is executed after each test in this class
        """
        os.chdir(self.current_path)  # go back to initial folder

    def test_BuilderModel_conductor_initialization(self):
        """
            Check that an exception is raised when BuilderModel object is initialized without providing an input yaml file
        """
        with self.assertRaises(Exception) as context:
            BM = BuilderModel(file_model_data=None, case_model='conductor', verbose=True)
        self.assertTrue('No file_model_data .yaml input file provided.' in str(context.exception))
        print(f'This exception was correctly raised: {context.exception}')

    def test_BuilderModel_readYaml_REFERENCE(self):
        """
            Check that DataPyBBQ object can be initialized and can read the reference blank yaml file generated by DataModelMagnet()
            This test does not generate any output file
        """
        # arrange
        name_reference_file = 'data_model_conductor_REFERENCE.yaml'
        file_path = os.path.dirname(__file__)  # path to the parent directory (with respect to this file)
        reference_file = os.path.join(os.path.dirname(file_path), 'data', 'references', name_reference_file)
        print("Selected reference_file: {}".format(reference_file))

        # act
        BM = BuilderModel(file_model_data=reference_file, case_model='conductor', data_settings=self.settings, verbose=True)

        # assert
        # TODO: Add a sensible action to perform the test


    def test_BuilderModel_readYaml(self, conductor_name='MQY_OUT'):
        """
            Check that DataLEDET object can be initialized and can read a model input yaml file
            This test does not generate any output file
            magnet_name: can be any magnet name in the library
        """
        # arrange
        file_model_data = os.path.join('model_library', 'conductors', conductor_name, 'input', 'modelData_' + conductor_name + '.yaml')

        # act
        BM = BuilderModel(file_model_data=file_model_data, case_model='conductor', data_settings=self.settings, verbose=True)

        # assert
        # TODO: Add a sensible action to perform the test



    def test_BuilderModel_PyBBQ_multiple(self):
        conductor_names = ['MQY_OUT', ]
        for conductor_name in conductor_names:
            print('Conductor: {}'.format(conductor_name))
            self.compare_to_reference_PyBBQ(conductor_name, verbose=False)


    def test_BuilderModel_LEDET_multiple(self):
        conductor_names = ['MQY_OUT', 'generic_busbar']
        for conductor_name in conductor_names:
            print('Conductor: {}'.format(conductor_name))
            self.compare_to_reference_LEDET(conductor_name, verbose=False)


    ###############################################################################################
    # Helper methods
    def compare_to_reference_PyBBQ(self, conductor_name, verbose=False, flag_plot_all=False):
        """
            Helper method called by other methods
            Check that BuilderModel object can be initialized, read a model input yaml file, and generate a PyBBQ model
            This test checks:
             - the content of the generated Excel file against a reference PyBBQ yaml file

            magnet_name: can be any magnet name in the library
        """
        # TODO: write description

        # arrange
        max_relative_error = 1e-6  # Maximum accepted relative error for excel, csv and map2d file comparison
        sim_number = ''

        file_model_data = os.path.join('model_library', 'conductors', conductor_name, 'input', f'modelData_{conductor_name}.yaml')
        output_path = os.path.join('model_library', 'conductors', conductor_name, 'output', 'PyBBQ')
        delete_if_existing(output_path, verbose=True)
        input_file_REFERENCE = os.path.join('references', 'conductors', conductor_name, f'{conductor_name}_REFERENCE.yaml')
        input_file_GENERATED = os.path.join(output_path, f'{conductor_name}{sim_number}.yaml')

        # act
        BM = BuilderModel(file_model_data=file_model_data, case_model='conductor', data_settings=self.settings, verbose=verbose)
        BM.buildPyBBQ(sim_name=conductor_name, sim_number=sim_number, output_path=output_path, verbose=verbose)

        # assert 1 - Check that the generated PyBBQ file has the same input as the reference
        bpybbq_REFERENCE = BuilderPyBBQ(flag_build=False)
        pl_REFERENCE = ParserPyBBQ(bpybbq_REFERENCE)
        pl_REFERENCE.readFromYaml(input_file_REFERENCE, verbose=True)

        bpybbq_GENERATED = BuilderPyBBQ(flag_build=False)
        pl_GENERATED = ParserPyBBQ(bpybbq_GENERATED)
        pl_GENERATED.readFromYaml(input_file_GENERATED, verbose=True)

        self.assertEqual(bpybbq_REFERENCE.data_PyBBQ, bpybbq_GENERATED.data_PyBBQ)


    def compare_to_reference_LEDET(self, conductor_name, verbose=False, flag_plot_all=False):
        """
            Helper method called by other methods
            Check that BuilderModel object can be initialized, read a model input yaml file, and generate a LEDET model
            This test checks:
             - the content of the generated Excel file against a reference LEDET Excel file

            conductor_name: can be any magnet name in the library
        """

        # arrange
        max_relative_error = 1e-6  # Maximum accepted relative error for excel, csv and map2d file comparison
        sim_number = 0

        file_model_data = os.path.join('model_library', 'conductors', conductor_name, 'input', f'modelData_{conductor_name}.yaml')
        output_path = os.path.join('model_library', 'conductors', conductor_name, 'output')
        delete_if_existing(output_path, verbose=True)
        input_file_REFERENCE = os.path.join('references', 'conductors', conductor_name, f'{conductor_name}_REFERENCE.xlsx')
        input_file_GENERATED = os.path.join('model_library', 'conductors', conductor_name, 'output', f'{conductor_name}_{sim_number}.xlsx')

        # Check whether csv and map2d files to be copied are also present
        flag_check_csv = True if os.path.isfile(os.path.join('model_library', 'conductors', conductor_name, 'input', f'{conductor_name}_1.csv')) else False
        flag_check_map2d = True if os.path.isfile(os.path.join('model_library', 'conductors', conductor_name, 'input', f'{conductor_name}.map2d')) else False

        csv_file_GENERATED = os.path.join('model_library', 'conductors', conductor_name, 'output', f'{conductor_name}_1.csv')
        map2d_file_GENERATED = os.path.join('model_library', 'conductors', conductor_name, 'output', f'{conductor_name}_All_WithIron_WithSelfField.map2d')
        for fil in [csv_file_GENERATED, map2d_file_GENERATED]:
            if os.path.isfile(fil):
                os.remove(fil)
                print('File {} already existed. It was removed. This test will re-make it.'.format(fil))

        # act
        BM = BuilderModel(file_model_data=file_model_data, case_model='conductor', data_settings=self.settings, verbose=verbose)
        BM.buildLEDET(sim_name=conductor_name, sim_number=sim_number, output_path=output_path, flag_plot_all=flag_plot_all, verbose=verbose)

        # assert 1 - Check that the generated LEDET file has the same input as the reference
        self.assertTrue(CompareLEDETParameters(input_file_GENERATED,
                                                input_file_REFERENCE,
                                                max_relative_error=max_relative_error, verbose=True))

        # assert 2 - Check that the csv file defining 3D geometry and field map was copied to the output folder
        if flag_check_csv:
            self.assertTrue(os.path.isfile(csv_file_GENERATED))
            print('File {} was re-made.'.format(csv_file_GENERATED))

        # assert 3 - Check that the map2d file defining 2D field map was copied to the output folder
        if flag_check_map2d:
            self.assertTrue(os.path.isfile(map2d_file_GENERATED))
            print('File {} was re-made.'.format(map2d_file_GENERATED))