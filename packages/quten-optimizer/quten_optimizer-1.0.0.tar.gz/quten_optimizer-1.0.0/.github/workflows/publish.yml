name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI instead of PyPI'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify version matches tag
      if: github.event_name == 'release'
      run: |
        VERSION=$(grep '^__version__' setup.py | cut -d'"' -f2)
        TAG=${GITHUB_REF#refs/tags/v}
        echo "Package version: $VERSION"
        echo "Git tag: $TAG"
        if [ "$VERSION" != "$TAG" ]; then
          echo "❌ Version mismatch: setup.py has $VERSION but tag is v$TAG"
          exit 1
        fi
        echo "✅ Version matches tag"

    - name: Build package
      run: |
        python -m build
        echo "📦 Built distribution packages:"
        ls -lh dist/

    - name: Check package
      run: |
        twine check dist/*
        echo "✅ Package checks passed"

    - name: Publish to TestPyPI
      if: github.event.inputs.test_pypi == 'true' || github.event_name == 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        print-hash: true

    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.inputs.test_pypi != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

    - name: Create release notes
      if: github.event_name == 'release'
      run: |
        echo "## 📦 Package Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "pip install quten-optimizer==${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Files Published" >> $GITHUB_STEP_SUMMARY
        ls -lh dist/ >> $GITHUB_STEP_SUMMARY
