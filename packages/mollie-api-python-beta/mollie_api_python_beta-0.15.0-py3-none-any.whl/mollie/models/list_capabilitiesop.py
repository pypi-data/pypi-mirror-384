"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .entity_capability import EntityCapability, EntityCapabilityTypedDict
from mollie.types import BaseModel
from mollie.utils import FieldMetadata, HeaderMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListCapabilitiesRequestTypedDict(TypedDict):
    idempotency_key: NotRequired[str]
    r"""A unique key to ensure idempotent requests. This key should be a UUID v4 string."""


class ListCapabilitiesRequest(BaseModel):
    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A unique key to ensure idempotent requests. This key should be a UUID v4 string."""


class ListCapabilitiesEmbeddedTypedDict(TypedDict):
    capabilities: NotRequired[List[EntityCapabilityTypedDict]]


class ListCapabilitiesEmbedded(BaseModel):
    capabilities: Optional[List[EntityCapability]] = None


class ListCapabilitiesDocumentationTypedDict(TypedDict):
    href: NotRequired[str]
    type: NotRequired[str]


class ListCapabilitiesDocumentation(BaseModel):
    href: Optional[str] = None

    type: Optional[str] = None


class ListCapabilitiesLinksTypedDict(TypedDict):
    documentation: NotRequired[ListCapabilitiesDocumentationTypedDict]


class ListCapabilitiesLinks(BaseModel):
    documentation: Optional[ListCapabilitiesDocumentation] = None


class ListCapabilitiesResponseTypedDict(TypedDict):
    r"""A list of capabilities."""

    count: NotRequired[int]
    r"""The number of items in this result set."""
    embedded: NotRequired[ListCapabilitiesEmbeddedTypedDict]
    links: NotRequired[ListCapabilitiesLinksTypedDict]


class ListCapabilitiesResponse(BaseModel):
    r"""A list of capabilities."""

    count: Optional[int] = None
    r"""The number of items in this result set."""

    embedded: Annotated[
        Optional[ListCapabilitiesEmbedded], pydantic.Field(alias="_embedded")
    ] = None

    links: Annotated[
        Optional[ListCapabilitiesLinks], pydantic.Field(alias="_links")
    ] = None
