"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .capability_requirement_status import CapabilityRequirementStatus
from mollie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from mollie.utils import validate_open_enum
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DashboardTypedDict(TypedDict):
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """

    href: NotRequired[str]
    r"""The actual URL string."""
    type: NotRequired[str]
    r"""The content type of the page or endpoint the URL points to."""


class Dashboard(BaseModel):
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """

    href: Optional[str] = None
    r"""The actual URL string."""

    type: Optional[str] = None
    r"""The content type of the page or endpoint the URL points to."""


class EntityCapabilityRequirementLinksTypedDict(TypedDict):
    dashboard: NotRequired[DashboardTypedDict]
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """


class EntityCapabilityRequirementLinks(BaseModel):
    dashboard: Optional[Dashboard] = None
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """


class EntityCapabilityRequirementTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The name of this requirement, referring to the task to be fulfilled by the organization
    to enable or re-enable the capability. The name is unique among other requirements
    of the same capability.
    """
    status: NotRequired[CapabilityRequirementStatus]
    r"""The status of the requirement depends on its due date.
    If no due date is given, the status will be `requested`.
    """
    due_date: NotRequired[Nullable[str]]
    r"""Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format."""
    links: NotRequired[EntityCapabilityRequirementLinksTypedDict]


class EntityCapabilityRequirement(BaseModel):
    id: Optional[str] = None
    r"""The name of this requirement, referring to the task to be fulfilled by the organization
    to enable or re-enable the capability. The name is unique among other requirements
    of the same capability.
    """

    status: Annotated[
        Optional[CapabilityRequirementStatus], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The status of the requirement depends on its due date.
    If no due date is given, the status will be `requested`.
    """

    due_date: Annotated[OptionalNullable[str], pydantic.Field(alias="dueDate")] = UNSET
    r"""Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format."""

    links: Annotated[
        Optional[EntityCapabilityRequirementLinks], pydantic.Field(alias="_links")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id", "status", "dueDate", "_links"]
        nullable_fields = ["dueDate"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
