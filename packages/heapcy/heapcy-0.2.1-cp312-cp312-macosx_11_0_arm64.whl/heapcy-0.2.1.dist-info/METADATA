Metadata-Version: 2.4
Name: heapcy
Version: 0.2.1
Summary: Cython-accelerated heap utilities
Author-email: Roberto Di Rosa <dirosa.2043388@studenti.uniroma1.it>
License: GNU LESSER GENERAL PUBLIC LICENSE
        Version 3, 29 June 2007
        
        Copyright (C) 2025  Roberto Di Rosa
        
        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published
        by the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        
        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        
        You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see <https://www.gnu.org/licenses/>.
        
        -----------------------------------------------------------------------
        
                           GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>
        
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
          This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
          0. Additional Definitions.
        
          As used herein, “this License” refers to version 3 of the GNU Lesser
        General Public License, and the “GNU GPL” refers to version 3 of the GNU
        General Public License.
        
          “The Library” refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
          An “Application” is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
          A “Combined Work” is a work produced by combining or linking an
        Application with the Library. The particular version of the Library
        with which the Combined Work was made is also called the “Linked
        Version”.
        
          The “Minimal Corresponding Source” for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
          The “Corresponding Application Code” for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
          1. Exception to Section 3 of the GNU GPL.
        
          You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
          2. Conveying Modified Versions.
        
          If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
           a) under this License, provided that you make a good faith effort to
           ensure that, in the event an Application does not supply the
           function or data, the facility still operates, and performs whatever
           part of its purpose remains meaningful, or
        
           b) under the GNU GPL, with none of the additional permissions of
           this License applicable to that copy.
        
          3. Object Code Incorporating Material from Library Header Files.
        
          The object code form of an Application may incorporate material from
        a header file that is part of the Library. You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure layouts
        and accessors, or small macros, inline functions and templates (ten or
        fewer lines in length), you do both of the following:
        
           a) Give prominent notice with each copy of the object code that the
           Library is used in it and that the Library and its use are covered
           by this License.
        
           b) Accompany the object code with a copy of the GNU GPL and this
           license document.
        
          4. Combined Works.
        
          You may convey a Combined Work under terms of your choice that, taken
        together, effectively do not restrict modification of the portions of
        the Library contained in the Combined Work and reverse engineering for
        debugging such modifications, if you also do each of the following:
        
           a) Give prominent notice with each copy of the Combined Work that
           the Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the Combined Work with a copy of the GNU GPL and this
           license document.
        
           c) For a Combined Work that displays copyright notices during
           execution, include the copyright notice for the Library among these
           notices, as well as a reference directing the user to the copies of
           the GNU GPL and this license document.
        
           d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of
               this License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to recombine
               or relink the Application with a modified version of the Linked
               Version to produce a modified Combined Work, in the manner
               specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library. A suitable mechanism is one that (a) uses at run time a
               copy of the Library already present on the user’s computer
               system, and (b) will operate properly with a modified version of
               the Library that is interface-compatible with the Linked
               Version.
        
           e) Provide Installation Information, but only if you would otherwise
           be required to provide such information under section 6 of the GNU
           GPL, and only to the extent that such information is necessary to
           install and execute a modified version of the Combined Work produced
           by recombining or relinking the Application with a modified version
           of the Linked Version. (If you use option 4d0, the Installation
           Information must accompany the Minimal Corresponding Source and
           Corresponding Application Code. If you use option 4d1, you must
           provide the Installation Information in the manner specified by
           section 6 of the GNU GPL for conveying Corresponding Source.)
        
          5. Combined Libraries.
        
          You may place library facilities that are a work based on the Library
        side by side in a single library together with other library facilities
        that are not Applications and are not covered by this License, and
        convey such a combined library under terms of your choice, if you do
        both of the following:
        
           a) Accompany the combined library with a copy of the same work based
           on the Library, uncombined with any other library facilities,
           conveyed under the terms of this License.
        
           b) Give prominent notice with the combined library that part of it
           is a work based on the Library, and explaining where to find the
           accompanying uncombined form of the same work.
        
          6. Revised Versions of the GNU Lesser General Public License.
        
          The Free Software Foundation may publish revised and/or new versions
          of the GNU Lesser General Public License from time to time. Such new
          versions will be similar in spirit to the present version, but may
          differ in detail to address new problems or concerns.
        
          Each version is given a distinguishing version number. If the Library
          as you received it specifies that a certain numbered version of the
          GNU Lesser General Public License “or any later version” applies to
          it, you have the option of following the terms and conditions either
          of that published version or of any later version published by the
          Free Software Foundation. If the Library as you received it does not
          specify a version number of the GNU Lesser General Public License,
          you may choose any version of the GNU Lesser General Public License
          ever published by the Free Software Foundation.
        
          If the Library as you received it specifies that a proxy can decide
          whether future versions of the GNU Lesser General Public License
          shall apply, that proxy’s public statement of acceptance of any
          version is permanent authorization for you to choose that version for
          the Library.
        
Project-URL: Homepage, https://github.com/BobTheBot988/MAYA-Password-Benchmarking-cstruct
Project-URL: Issues, https://github.com/BobTheBot988/MAYA-Password-Benchmarking-cstruct/issues
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# heapcy — Cython-accelerated heap utilities

<!--toc:start-->

- [heapcy — Cython-accelerated heap utilities](#heapcy-cython-accelerated-heap-utilities)
  - [Features](#features)
  - [Build](#build)
  - [Install](#install)
  - [Quick start](#quick-start)
  - [API reference](#api-reference)
    - [Class: `Heap(capacity: int)`](#class-heapcapacity-int)
    - [File string helpers](#file-string-helpers)
  - [Typical workflow: top-K strings by probability](#typical-workflow-top-k-strings-by-probability)
  - [Performance notes](#performance-notes)
  - [Troubleshooting](#troubleshooting)
  - [License](#license)
  <!--toc:end-->

A tiny, fast **min-heap** for `(value, offset)` pairs,
plus helpers to recover strings from a file by **byte offset**.
Implemented in Cython for speed; exposes a Pythonic API similar to `heapq`.

---

## Features

- **Min-heap** of `Entry{ double value; uint64_t offset; }`.
- Fast core operations implemented in C (`nogil` internally where safe).
- **Pythonic API**: `heappush`, `heappop`, `heappushpop`, `nlargest`, `heappeek`.
- Iterate a `Heap` (heap-array order, not sorted).
- **String helpers** to fetch tokens from a file at known byte offsets:
  - `string_generator(path, offsets, encoding="ascii")`
  - `string_getter(path, offset, encoding="ascii")`
- Handy **introspection**:
  - `len(heap)` → count of items
  - `heap.__sizeof__()` → header + buffer **bytes**
  - `heap.nbytes_used()` / `heap.nbytes_capacity()` → used vs reserved bytes
- Cython directives tuned for performance:
  `boundscheck=False`, `wraparound=False`,
  `cdivision=True`, `infer_types=True`, `embedsignature=True`.

---

## Build

```bash
cibuildwheel .
```

## Install

```bash
pip install heapcy
```

> You need a working C/C++ toolchain and Python headers for your interpreter.

---

## Quick start

```python
import heapcy

# Make a heap with capacity for 100k entries
h = heapcy.Heap(100_000)

# Push (probability, byte_offset) pairs
heapcy.heappush(h, 0.15, 123456)
heapcy.heappush(h, 0.03, 987)
heapcy.heappush(h, 0.42, 5555)

print(len(h))                # item count
print(h.nbytes_used())       # bytes occupied by current entries
print(h.nbytes_capacity())   # bytes reserved for the buffer
print(h.__sizeof__())        # header + capacity bytes reported to sys.getsizeof

# Pop the minimum (by value)
v, off = heapcy.heappop(h)   # -> (0.03, 987)

# Peek without removing (k=0 is the root/min)
v0, off0 = heapcy.heappeek(h, 0)

# Top-K largest (generator of (value, offset))
top = list(heapcy.nlargest(h, 2))   # e.g. [(0.42, 5555), (0.15, 123456)]

# Stream tokens from a file at those offsets (file must be uncompressed)
path = "/path/to/uncompressed.txt"
for token in heapcy.string_generator(path, [off for _, off in top]):
    print(token)
```

---

## API reference

### Class: `Heap(capacity: int)`

Creates an empty min-heap with fixed `capacity`. Raises `ValueError` if `capacity <= 0`.

**Methods & dunder:**

- `def __len__(self) -> int`  
  Number of items currently stored.
- `def __sizeof__(self) -> int`  
  **Bytes** reported to `sys.getsizeof(self)`: CPython header + malloc’ed entry buffer (capacity × `sizeof(Entry)`).
- `def nbytes_used(self) -> int`  
  Bytes used by current items (`occupied × sizeof(Entry)`).
- `def nbytes_capacity(self) -> int`  
  Bytes reserved for the backing array (`capacity × sizeof(Entry)`).
- `def __iter__(self)`  
  Iterate items in heap-array order (not sorted).

**Functions (module-level):**

- `heappush(heap: Heap, value: float, offset: int) -> None`  
  Insert `(value, offset)`. `value` must be in `[0.0, 1.0]`. Raises `MemoryError` if full.
- `heappop(heap: Heap) -> tuple[float, int]`  
  Remove and return the smallest `(value, offset)`. Raises `IndexError` if empty.
- `heappushpop(heap: Heap, value: float, offset: int) -> tuple[float, int]`  
  **Pop then push** (matches the current implementation’s order). Returns the popped `(value, offset)`.
- `nlargest(heap: Heap, k: int)`  
  **Generator** yielding the `k` largest `(value, offset)` in descending order. Internally builds a max-heap in place and (by default) restores the min-heap invariant afterward.
- `heappeek(heap: Heap, k: int = 0) -> tuple[float, int]`  
  Return the item at heap-array index `k` (0 is the root). Raises `IndexError` if out of range.

**Convenience:**

- `build_heap(self, array: Iterable[tuple[float, int] | tuple[int, float]] ) -> Heap`  
  Build and return a new heap from a list of pairs (accepts either `(float, int)` or `(int, float)` and normalizes them).

### File string helpers

- `string_generator(file_name: str, offsets: Iterable[int], encoding: str = "ascii") -> Iterator[str]`  
  Open the file **once**, then for each byte offset:
  - seek to `offset`
  - read a line (`b"...\n"`)
  - yield the **first space-delimited token** decoded to `str`  
    If an offset is past EOF, yields `""`.

- `string_getter(name: str, offset: int, encoding: str = "ascii") -> str`  
  Read and return the first token at a single offset.

> Use binary mode (`"rb"`) for stable byte offsets. If your file is compressed, decompress first (e.g., with `gzip` to a temp file) before random access.

---

## Typical workflow: top-K strings by probability

```python
import gzip, shutil, tempfile, os, heapcy

# Inflate a .gz so we can seek by byte offsets
with tempfile.NamedTemporaryFile(delete=False) as tmp:
    with gzip.open("example.gz", "rb") as gz:
        shutil.copyfileobj(gz, tmp, length=1024*1024)
    path = tmp.name

h = heapcy.Heap(100_000)
with open(path, "rb") as f:
    while True:
        off = f.tell()
        line = f.readline()
        if not line:
            break
        parts = line.split(b" ", 1)
        if len(parts) == 2:
            prob = float(parts[1].decode("ascii"))
            heapcy.heappush(h, prob, off)

offsets = [off for _, off in heapcy.nlargest(h, 1000)]
for token in heapcy.string_generator(path, offsets):
    print(token)

os.remove(path)
```

---

## Performance notes

- The heap array is a single `malloc`’ed block of `Entry` structs; push/pop/heapify are tight C loops.
- `__sizeof__` includes the reserved buffer so memory profilers reflect true footprint.  
  Use `nbytes_used()` vs `nbytes_capacity()` to track utilization.
- `nlargest` mutates the internal order during iteration (like a partial heapsort), but not the multiset of items.
- Random file seeks dominate cost if offsets are scattered; batch/sort offsets to improve locality.

---

## Troubleshooting

- **`ValueError: The size must be positive`** → pass a capacity > 0 to `Heap`.
- **`MemoryError: The heap is full`** → capacity is fixed; pop or allocate a larger heap.
- **`IndexError: The heap is empty`** → push before popping/peeking.
- **File helpers return empty strings** → the offset was at/after EOF, or the line was empty.

---

## License

LGPL-3.0-or-later. See `LICENSE`.
