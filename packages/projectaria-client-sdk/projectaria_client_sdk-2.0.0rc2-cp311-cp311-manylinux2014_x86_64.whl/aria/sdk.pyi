# (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

from enum import Enum
from typing import List, Optional, Tuple

import numpy as np

class Level(Enum):
    Disabled = ...
    Error = ...
    Warning = ...
    Info = ...
    Debug = ...
    Trace = ...

def set_log_level(level: Level) -> None: ...

class Error:
    @property
    def code(self) -> int: ...
    @property
    def message(self) -> str: ...
    def __init__(self, code: int, message: str) -> None: ...

class ErrorCode(Enum):
    NoDevicesConnected = ...
    UnsupportedNetwork = ...
    ConnectionLost = ...
    Adb = ...
    UnknownError = ...
    BadRequest = ...
    UnsupportedMethod = ...
    BatteryTooLow = ...
    BadArgument = ...
    AuthenticationFailure = ...
    TimedOut = ...
    AlreadyInProgress = ...
    InternalError = ...
    WifiNoNetwork = ...
    WifiInvalidAuth = ...
    BadAccessToken = ...
    DeviceWifiError = ...
    DeviceBleError = ...
    WifiNoInternet = ...
    WifiAuthTimeout = ...
    WifiIpConfigFail = ...
    OperationNotAllowed = ...
    FailedToStartRecording = ...
    FailedToStopRecording = ...
    RecordingInProgress = ...
    NoRecordingInProgress = ...
    InvalidRecordingProfile = ...
    FailedToListRecordings = ...
    FwUpdateInProgress = ...
    PrivacySwitchOn = ...
    RecordingNotFound = ...
    GpsRfcalInvalid = ...
    InvalidDeviceCalibration = ...
    LowBatteryLevel = ...
    LowDiskSpace = ...
    FailedToStartStreaming = ...
    FailedToStopStreaming = ...
    UploadAlreadyStarted = ...
    UploadEmptyRecording = ...
    UploadEmptyMetadata = ...
    UploadInvalidMetadata = ...
    UploadVioProcessingFailed = ...
    WifiConnectionFailed = ...
    InvalidStreamingInterface = ...
    UsbRndisConnectionFailed = ...
    UsbNcmConnectionFailed = ...
    PhoneGpsUpdateFailed = ...
    DdsDiscoveryFailed = ...
    SharedSessionIdNotReceived = ...
    ThumbnailNotFound = ...
    DefaultRecordingProfileNotSet = ...
    StreamingCertsInstallFailed = ...
    StreamingCertsUninstallFailed = ...
    StreamingCertsNotFound = ...
    DdsRpcSetEnabledFailed = ...
    DdsRpcGetSessionIdFailed = ...
    DdsRpcUpdateSessionIdFailed = ...
    WifiScanConfigFailed = ...
    StreamingNotAllowed = ...
    StreamingSetupFailed = ...
    NewFilenameExists = ...
    FileNotFound = ...
    InvalidFilename = ...
    TlsClientCertsError = ...

class CameraId(Enum):
    Slam1 = ...
    Slam2 = ...
    Rgb = ...
    EyeTrack = ...
    Invalid = ...

class RecordingState(Enum):
    Unknown = ...
    NotStarted = ...
    Started = ...
    Recording = ...
    Stopped = ...

class RecordingConfig:
    profile_name: str
    def __init__(self) -> None: ...

class RecordingManager:
    recording_config: RecordingConfig
    @property
    def recording_state(self) -> RecordingState: ...
    @property
    def recording_profiles(self) -> List[str]: ...
    def start_recording(self) -> None: ...
    def stop_recording(self) -> None: ...
    def sensors_calibration(self) -> str: ...

class StreamingState(Enum):
    Unknown = ...
    NotStarted = ...
    Started = ...
    Streaming = ...
    Stopped = ...

class StreamingInterface(Enum):
    WifiStation = ...
    Usb = ...

class StreamingSecurityOptions:
    use_ephemeral_certs: bool
    local_certs_root_path: str
    def __init__(self) -> None: ...

class StreamingConfig:
    security_options: StreamingSecurityOptions
    topic_prefix: str
    profile_name: str
    streaming_interface: StreamingInterface
    def __init__(self) -> None: ...

class StreamingManager:
    streaming_config: StreamingConfig
    @property
    def streaming_state(self) -> StreamingState: ...
    @property
    def streaming_client(self) -> str: ...
    def start_streaming(self) -> None: ...
    def stop_streaming(self) -> None: ...
    def sensors_calibration(self) -> str: ...

class StreamingDataType(Enum):
    Unknown = ...
    Rgb = ...
    Slam = ...
    EyeTrack = ...
    Audio = ...
    Imu = ...
    Magneto = ...
    Baro = ...

class StreamingSubscriptionConfig:
    security_options: StreamingSecurityOptions
    subscriber_data_type: StreamingDataType
    message_queue_size: int
    subscriber_name: str
    subscriber_topic_prefix: str
    def __init__(self) -> None: ...

class StreamingClientObserver:
    def __del__(self) -> None: ...
    def on_streaming_client_failure(self, reason: ErrorCode, message: str) -> None: ...
    def on_image_received(
        self,
        image: np.array,
        record: projectaria_tools.core.sensor_data.ImageDataRecord,
    ) -> None: ...
    def on_audio_received(
        self,
        audio_data: projectaria_tools.core.sensor_data.AudioData,
        record: projectaria_tools.core.sensor_data.AudioDataRecord,
    ) -> None: ...
    def on_imu_received(
        self,
        motion_data: List[projectaria_tools.core.sensor_data.MotionData],
        imu_idx: int,
    ) -> None: ...
    def on_magneto_received(
        self, magneto_data: projectaria_tools.core.sensor_data.MotionData
    ) -> None: ...
    def on_baro_received(
        self, baro_data: projectaria_tools.core.sensor_data.BarometerData
    ) -> None: ...

class StreamingClient:
    subscription_config: StreamingSubscriptionConfig
    def subscribe(self) -> None: ...
    def unsubscribe(self) -> None: ...
    def set_streaming_client_observer(
        self, observer: StreamingClientObserver
    ) -> None: ...
    def is_subscribed(self) -> bool: ...

class DeviceInfo:
    board: str
    bootloader: str
    brand: str
    device: str
    host: str
    id: str
    manufacturer: str
    model: str
    product: str
    serial: str
    time: int
    type: str
    user: str
    def __init__(self) -> None: ...

class DeviceMode(Enum):
    Research = ...
    Partner = ...
    Prototype = ...

class DeviceStatus:
    battery_level: int
    charger_connected: bool
    charging: bool
    wifi_enabled: bool
    wifi_configured: bool
    wifi_connected: bool
    wifi_ip_address: str
    wifi_device_name: str
    wifi_ssid: str
    logged_in: bool
    developer_mode: bool
    adb_enabled: bool
    thermal_mitigation_triggered: bool
    skin_temp_celsius: float
    default_recording_profile: str
    is_recording_allowed: bool
    device_mode: DeviceMode
    def __init__(self) -> None: ...

class Device:
    recording_manager: RecordingManager
    streaming_manager: StreamingManager
    info: DeviceInfo
    status: DeviceStatus
    factory_calibration_json: str

class DeviceClientConfig:
    ip_v4_address: str
    device_serial: str
    adb_path: str
    reconnection_attempts: int
    def __init__(self) -> None: ...

class DeviceClient:
    def authenticate(self) -> str: ...
    def connect(self) -> Device: ...
    def reconnect(self) -> Device: ...
    def disconnect(self) -> None: ...
    def set_client_config(self, DeviceClientConfig) -> None: ...
