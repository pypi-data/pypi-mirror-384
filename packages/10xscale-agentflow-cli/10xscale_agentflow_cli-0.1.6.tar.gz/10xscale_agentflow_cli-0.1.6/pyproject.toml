[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "10xscale-agentflow-cli"
version = "0.1.6"
description = "CLI and API for 10xscale AgentFlow"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "10xscale", email = "contact@10xscale.ai"},
]
maintainers = [
    {name = "Shudipto Trafder", email = "shudiptotrafder@gmail.com"},
]
keywords = [
    "10xscale AgentFlow",
    "api",
    "fastapi",
    "cli",
    "agentflow"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
dependencies = [
    "10xscale-agentflow>=0.4.0",
    "fastapi",
    "gunicorn",
    "orjson",
    "python-multipart",
    "pydantic",
    "pydantic-settings",
    "uvicorn",
    "typer",
    "python-dotenv",
    "PyJWT",
]

[project.urls]
Homepage = "https://github.com/10xHub/agentflow-cli"
Repository = "https://github.com/10xHub/agentflow-cli"
Issues = "https://github.com/10xHub/agentflow-cli/issues"
Documentation = "https://agentflow-cli.readthedocs.io/"

[project.optional-dependencies]
sentry = [
    "sentry-sdk>=2.10.0",
]
firebase = [
    "firebase-admin>=6.5.0",
    "oauth2client>=4.1.3",
]
snowflakekit = [
    "snowflakekit",
]
redis = [
    "redis>=5.0.7",
]
gcloud = [
    "google-cloud-logging",
]

[project.scripts]
agentflow = "agentflow_cli.cli.main:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["agentflow-cli*"]
exclude = ["tests*", "docs*", "__pycache__*", "agentflow-cli/tests*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md", "*.txt"]

[tool.ruff]
line-length = 100
target-version = "py312"
lint.fixable = ["ALL"]
lint.select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "PL",  # pylint
    "I",   # isort
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "S",   # flake8-bandit
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "T20", # flake8-print
]
lint.ignore = [
    "UP006", # https://github.com/charliermarsh/ruff/pull/4427
    "UP007", # https://github.com/charliermarsh/ruff/pull/4427
    # Mutable class attributes should be annotated with `typing.ClassVar`
    # Too many violations
    "RUF012",
    # Logging statement uses f-string
    "G004",
    #B904 Within an `except` clause, raise exceptions with
    #`raise ... from err` or `raise ... from None` to distinguish
    #them from errors in exception handling
    "B904",
    #Do not perform function call `Injected` in argument defaults
    "B008",
    "ISC001",# flake8-implicit-str-concat
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = [
    "venv/*",
]


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"bin/*.py" = ["E402", "S603", "T201", "S101"]
"*/tests/*.py" = ["E402", "S603", "T201", "S101"]
"*/test/*.py" = ["E402", "S603", "T201", "S101"]
"scripts/*.py" = ["E402", "S603", "T201", "S101", "INP001"]
"*/__init__.py" = ["E402", "S603", "T201", "S101"]
"*/migrations/*.py" = ["E402", "S603", "T201", "S101"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["src"]
[tool.ruff.lint.pylint]
max-args = 10
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.bandit]
exclude_dirs = ["*/tests/*", "*/agentflow-cli/tests/*"]
skips = ["B101", "B611", "B601", "B608"]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pytest.ini_options]
env = [
    "ENVIRONMENT=pytest",
]
testpaths = [
    "agentflow-cli/src/tests",
]
pythonpath = [
    ".",
]
filterwarnings = [
    "ignore::DeprecationWarning"
]
addopts = [
        # Limit coverage collection to the local project package only
        "--cov=agentflow-cli",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=0",
    "--strict-markers",
    "-v"
]

[tool.coverage.run]
# Only measure the first-party project package
source = ["agentflow-cli"]
branch = true
omit = [
    "*/__init__.py",           # often trivial
    "*/tests/*",               # exclude test code
    "*/migrations/*",
    "*/scripts/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
    "pragma: no cover",
    "@abc.abstractmethod",
    "@abstractmethod",
    "raise NotImplementedError",
]
show_missing = true

[tool.coverage.paths]
source = [
    "agentflow-cli",
    "*/site-packages/agentflow-cli",
]

[tool.pytest-env]
ENVIRONMENT = "pytest"

[dependency-groups]
dev = [
    "snowflakekit",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-env>=1.1.5",
    "pytest-xdist>=3.8.0",
    "pre-commit>=3.8.0",
    "ruff==0.5.2",
    "mkdocs-gen-files==0.5.0",
    "mkdocstrings==0.25.2",
    "mypy-extensions==1.0.0",
    "httpx==0.27.0",
    "lib==4.0.0",
    "markdown-it-py==3.0.0",
    "requests==2.32.3",
]

