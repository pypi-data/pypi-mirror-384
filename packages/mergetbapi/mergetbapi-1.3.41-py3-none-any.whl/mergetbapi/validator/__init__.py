# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mwitkow/go-proto-validators/validator.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass

import betterproto


@dataclass(eq=False, repr=False)
class FieldValidator(betterproto.Message):
    regex: str = betterproto.string_field(1)
    """Uses a Golang RE2-syntax regex to match the field contents."""

    int_gt: int = betterproto.int64_field(2)
    """Field value of integer strictly greater than this value."""

    int_lt: int = betterproto.int64_field(3)
    """Field value of integer strictly smaller than this value."""

    msg_exists: bool = betterproto.bool_field(4)
    """
    Used for nested message types, requires that the message type exists.
    """

    human_error: str = betterproto.string_field(5)
    """
    Human error specifies a user-customizable error that is visible to the user.
    """

    float_gt: float = betterproto.double_field(6)
    """
    Field value of double strictly greater than this value.
     Note that this value can only take on a valid floating point
     value. Use together with float_epsilon if you need something more specific.
    """

    float_lt: float = betterproto.double_field(7)
    """
    Field value of double strictly smaller than this value.
     Note that this value can only take on a valid floating point
     value. Use together with float_epsilon if you need something more specific.
    """

    float_epsilon: float = betterproto.double_field(8)
    """
    Field value of double describing the epsilon within which
     any comparison should be considered to be true. For example,
     when using float_gt = 0.35, using a float_epsilon of 0.05
     would mean that any value above 0.30 is acceptable. It can be
     thought of as a {float_value_condition} +- {float_epsilon}.
     If unset, no correction for floating point inaccuracies in
     comparisons will be attempted.
    """

    float_gte: float = betterproto.double_field(9)
    """
    Floating-point value compared to which the field content should be greater or equal.
    """

    float_lte: float = betterproto.double_field(10)
    """
    Floating-point value compared to which the field content should be smaller or equal.
    """

    string_not_empty: bool = betterproto.bool_field(11)
    """
    Used for string fields, requires the string to be not empty (i.e different from "").
    """

    repeated_count_min: int = betterproto.int64_field(12)
    """Repeated field with at least this number of elements."""

    repeated_count_max: int = betterproto.int64_field(13)
    """Repeated field with at most this number of elements."""

    length_gt: int = betterproto.int64_field(14)
    """Field value of length greater than this value."""

    length_lt: int = betterproto.int64_field(15)
    """Field value of length smaller than this value."""

    length_eq: int = betterproto.int64_field(16)
    """Field value of length strictly equal to this value."""

    is_in_enum: bool = betterproto.bool_field(17)
    """Requires that the value is in the enum."""

    uuid_ver: int = betterproto.int32_field(18)
    """
    Ensures that a string value is in UUID format.
     uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     If uuid_ver is 0 all UUID versions are accepted.
    """


@dataclass(eq=False, repr=False)
class OneofValidator(betterproto.Message):
    required: bool = betterproto.bool_field(1)
    """Require that one of the oneof fields is set."""
