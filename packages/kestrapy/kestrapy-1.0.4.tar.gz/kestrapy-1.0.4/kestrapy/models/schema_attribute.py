# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.schema_attribute_mutability import SchemaAttributeMutability
from kestrapy.models.schema_attribute_returned import SchemaAttributeReturned
from kestrapy.models.schema_attribute_type import SchemaAttributeType
from kestrapy.models.schema_attribute_uniqueness import SchemaAttributeUniqueness
from typing import Optional, Set
from typing_extensions import Self

class SchemaAttribute(BaseModel):
    """
    SchemaAttribute
    """ # noqa: E501
    attributes: Optional[List[SchemaAttribute]] = None
    urn: Optional[StrictStr] = None
    name: Optional[Annotated[str, Field(strict=True)]] = None
    type: Optional[SchemaAttributeType] = None
    sub_attributes: Optional[List[SchemaAttribute]] = Field(default=None, alias="subAttributes")
    multi_valued: Optional[StrictBool] = Field(default=None, alias="multiValued")
    description: Optional[StrictStr] = None
    required: Optional[StrictBool] = None
    canonical_values: Optional[List[StrictStr]] = Field(default=None, alias="canonicalValues")
    case_exact: Optional[StrictBool] = Field(default=None, alias="caseExact")
    mutability: Optional[SchemaAttributeMutability] = None
    returned: Optional[SchemaAttributeReturned] = None
    uniqueness: Optional[SchemaAttributeUniqueness] = None
    reference_types: Optional[List[StrictStr]] = Field(default=None, alias="referenceTypes")
    accessor: Optional[Dict[str, Any]] = None
    scim_resource_id_reference: Optional[StrictBool] = Field(default=None, alias="scimResourceIdReference")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["attributes", "urn", "name", "type", "subAttributes", "multiValued", "description", "required", "canonicalValues", "caseExact", "mutability", "returned", "uniqueness", "referenceTypes", "accessor", "scimResourceIdReference"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\p{Alpha}(-|_|\p{Alnum})*", value):
            raise ValueError(r"must validate the regular expression /\p{Alpha}(-|_|\p{Alnum})*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sub_attributes (list)
        _items = []
        if self.sub_attributes:
            for _item_sub_attributes in self.sub_attributes:
                if _item_sub_attributes:
                    _items.append(_item_sub_attributes.to_dict())
            _dict['subAttributes'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [SchemaAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "urn": obj.get("urn"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "subAttributes": [SchemaAttribute.from_dict(_item) for _item in obj["subAttributes"]] if obj.get("subAttributes") is not None else None,
            "multiValued": obj.get("multiValued"),
            "description": obj.get("description"),
            "required": obj.get("required"),
            "canonicalValues": obj.get("canonicalValues"),
            "caseExact": obj.get("caseExact"),
            "mutability": obj.get("mutability"),
            "returned": obj.get("returned"),
            "uniqueness": obj.get("uniqueness"),
            "referenceTypes": obj.get("referenceTypes"),
            "accessor": obj.get("accessor"),
            "scimResourceIdReference": obj.get("scimResourceIdReference")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

# TODO: Rewrite to not use raise_errors
SchemaAttribute.model_rebuild(raise_errors=False)

