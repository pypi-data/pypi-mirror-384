# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.meta import Meta
from kestrapy.models.scim_extension import ScimExtension
from kestrapy.models.service_provider_configuration_authentication_schema import ServiceProviderConfigurationAuthenticationSchema
from kestrapy.models.service_provider_configuration_bulk_configuration import ServiceProviderConfigurationBulkConfiguration
from kestrapy.models.service_provider_configuration_filter_configuration import ServiceProviderConfigurationFilterConfiguration
from kestrapy.models.service_provider_configuration_supported_configuration import ServiceProviderConfigurationSupportedConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ServiceProviderConfiguration(BaseModel):
    """
    ServiceProviderConfiguration
    """ # noqa: E501
    schemas: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = None
    base_urn: Optional[StrictStr] = Field(default=None, alias="baseUrn")
    extensions: Optional[Dict[str, ScimExtension]] = None
    meta: Meta
    id: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationUrl")
    patch: Optional[ServiceProviderConfigurationSupportedConfiguration] = None
    bulk: Optional[ServiceProviderConfigurationBulkConfiguration] = None
    filter: Optional[ServiceProviderConfigurationFilterConfiguration] = None
    change_password: Optional[ServiceProviderConfigurationSupportedConfiguration] = Field(default=None, alias="changePassword")
    sort: Optional[ServiceProviderConfigurationSupportedConfiguration] = None
    etag: Optional[ServiceProviderConfigurationSupportedConfiguration] = None
    authentication_schemes: Optional[List[ServiceProviderConfigurationAuthenticationSchema]] = Field(default=None, alias="authenticationSchemes")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["schemas", "baseUrn", "extensions", "meta", "id", "externalId", "resourceType", "documentationUrl", "patch", "bulk", "filter", "changePassword", "sort", "etag", "authenticationSchemes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProviderConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in extensions (dict)
        _field_dict = {}
        if self.extensions:
            for _key_extensions in self.extensions:
                if self.extensions[_key_extensions]:
                    _field_dict[_key_extensions] = self.extensions[_key_extensions].to_dict()
            _dict['extensions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patch
        if self.patch:
            _dict['patch'] = self.patch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bulk
        if self.bulk:
            _dict['bulk'] = self.bulk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_password
        if self.change_password:
            _dict['changePassword'] = self.change_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of etag
        if self.etag:
            _dict['etag'] = self.etag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in authentication_schemes (list)
        _items = []
        if self.authentication_schemes:
            for _item_authentication_schemes in self.authentication_schemes:
                if _item_authentication_schemes:
                    _items.append(_item_authentication_schemes.to_dict())
            _dict['authenticationSchemes'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProviderConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schemas": obj.get("schemas"),
            "baseUrn": obj.get("baseUrn"),
            "extensions": dict(
                (_k, ScimExtension.from_dict(_v))
                for _k, _v in obj["extensions"].items()
            )
            if obj.get("extensions") is not None
            else None,
            "meta": Meta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "id": obj.get("id"),
            "externalId": obj.get("externalId"),
            "resourceType": obj.get("resourceType"),
            "documentationUrl": obj.get("documentationUrl"),
            "patch": ServiceProviderConfigurationSupportedConfiguration.from_dict(obj["patch"]) if obj.get("patch") is not None else None,
            "bulk": ServiceProviderConfigurationBulkConfiguration.from_dict(obj["bulk"]) if obj.get("bulk") is not None else None,
            "filter": ServiceProviderConfigurationFilterConfiguration.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "changePassword": ServiceProviderConfigurationSupportedConfiguration.from_dict(obj["changePassword"]) if obj.get("changePassword") is not None else None,
            "sort": ServiceProviderConfigurationSupportedConfiguration.from_dict(obj["sort"]) if obj.get("sort") is not None else None,
            "etag": ServiceProviderConfigurationSupportedConfiguration.from_dict(obj["etag"]) if obj.get("etag") is not None else None,
            "authenticationSchemes": [ServiceProviderConfigurationAuthenticationSchema.from_dict(_item) for _item in obj["authenticationSchemes"]] if obj.get("authenticationSchemes") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


