# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.abstract_user_tenant_identity_provider import AbstractUserTenantIdentityProvider
from kestrapy.models.api_auth import ApiAuth
from kestrapy.models.group_identifier import GroupIdentifier
from kestrapy.models.user_type import UserType
from typing import Optional, Set
from typing_extensions import Self

class ApiUser(BaseModel):
    """
    ApiUser
    """ # noqa: E501
    type: UserType
    group_list: Optional[List[GroupIdentifier]] = Field(default=None, alias="groupList")
    groups: Optional[List[Dict[str, Any]]] = None
    username: StrictStr
    email: Annotated[str, Field(strict=True)]
    super_admin: Optional[StrictBool] = Field(default=None, alias="superAdmin")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    providers: Optional[List[AbstractUserTenantIdentityProvider]] = None
    auths: Optional[List[ApiAuth]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "groupList", "groups", "username", "email", "superAdmin", "id", "name", "description", "firstName", "lastName", "providers", "auths"]

    @field_validator('email')
    def email_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^$|^[a-zA-Z0-9_!#$%&’*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$", value):
            raise ValueError(r"must validate the regular expression /^$|^[a-zA-Z0-9_!#$%&’*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in group_list (list)
        _items = []
        if self.group_list:
            for _item_group_list in self.group_list:
                if _item_group_list:
                    _items.append(_item_group_list.to_dict())
            _dict['groupList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in providers (list)
        _items = []
        if self.providers:
            for _item_providers in self.providers:
                if _item_providers:
                    _items.append(_item_providers.to_dict())
            _dict['providers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auths (list)
        _items = []
        if self.auths:
            for _item_auths in self.auths:
                if _item_auths:
                    _items.append(_item_auths.to_dict())
            _dict['auths'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "groupList": [GroupIdentifier.from_dict(_item) for _item in obj["groupList"]] if obj.get("groupList") is not None else None,
            "groups": obj.get("groups"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "superAdmin": obj.get("superAdmin"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "providers": [AbstractUserTenantIdentityProvider.from_dict(_item) for _item in obj["providers"]] if obj.get("providers") is not None else None,
            "auths": [ApiAuth.from_dict(_item) for _item in obj["auths"]] if obj.get("auths") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


