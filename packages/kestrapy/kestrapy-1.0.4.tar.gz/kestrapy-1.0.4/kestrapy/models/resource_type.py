# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.meta import Meta
from kestrapy.models.resource_type_schema_extension_configuration import ResourceTypeSchemaExtensionConfiguration
from kestrapy.models.scim_extension import ScimExtension
from typing import Optional, Set
from typing_extensions import Self

class ResourceType(BaseModel):
    """
    ResourceType
    """ # noqa: E501
    schemas: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = None
    base_urn: Optional[StrictStr] = Field(default=None, alias="baseUrn")
    extensions: Optional[Dict[str, ScimExtension]] = None
    meta: Meta
    id: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    description: Optional[StrictStr] = None
    endpoint: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    schema_urn: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="schemaUrn")
    schema_extensions: Optional[List[ResourceTypeSchemaExtensionConfiguration]] = Field(default=None, alias="schemaExtensions")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["schemas", "baseUrn", "extensions", "meta", "id", "externalId", "resourceType", "name", "description", "endpoint", "schemaUrn", "schemaExtensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in extensions (dict)
        _field_dict = {}
        if self.extensions:
            for _key_extensions in self.extensions:
                if self.extensions[_key_extensions]:
                    _field_dict[_key_extensions] = self.extensions[_key_extensions].to_dict()
            _dict['extensions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schema_extensions (list)
        _items = []
        if self.schema_extensions:
            for _item_schema_extensions in self.schema_extensions:
                if _item_schema_extensions:
                    _items.append(_item_schema_extensions.to_dict())
            _dict['schemaExtensions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schemas": obj.get("schemas"),
            "baseUrn": obj.get("baseUrn"),
            "extensions": dict(
                (_k, ScimExtension.from_dict(_v))
                for _k, _v in obj["extensions"].items()
            )
            if obj.get("extensions") is not None
            else None,
            "meta": Meta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "id": obj.get("id"),
            "externalId": obj.get("externalId"),
            "resourceType": obj.get("resourceType"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "endpoint": obj.get("endpoint"),
            "schemaUrn": obj.get("schemaUrn"),
            "schemaExtensions": [ResourceTypeSchemaExtensionConfiguration.from_dict(_item) for _item in obj["schemaExtensions"]] if obj.get("schemaExtensions") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


