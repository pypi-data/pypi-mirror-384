# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.cache import Cache
from kestrapy.models.level import Level
from kestrapy.models.property_duration import PropertyDuration
from kestrapy.models.worker_group import WorkerGroup
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    type: Annotated[str, Field(min_length=1, strict=True)]
    version: Optional[Annotated[str, Field(strict=True)]] = None
    description: Optional[StrictStr] = None
    retry: Optional[Dict[str, Any]] = None
    timeout: Optional[PropertyDuration] = None
    disabled: Optional[StrictBool] = None
    worker_group: Optional[WorkerGroup] = Field(default=None, alias="workerGroup")
    log_level: Optional[Level] = Field(default=None, alias="logLevel")
    allow_failure: Optional[StrictBool] = Field(default=None, alias="allowFailure")
    log_to_file: Optional[StrictBool] = Field(default=None, alias="logToFile")
    run_if: Optional[StrictStr] = Field(default=None, alias="runIf")
    allow_warning: Optional[StrictBool] = Field(default=None, alias="allowWarning")
    task_cache: Optional[Cache] = Field(default=None, alias="taskCache")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "version", "description", "retry", "timeout", "disabled", "workerGroup", "logLevel", "allowFailure", "logToFile", "runIf", "allowWarning", "taskCache"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9][a-zA-Z0-9_-]*", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9][a-zA-Z0-9_-]*/")
        return value

    @field_validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z_$][A-Za-z0-9_$]*(\.[A-Za-z_$][A-Za-z0-9_$]*)*$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z_$][A-Za-z0-9_$]*(\.[A-Za-z_$][A-Za-z0-9_$]*)*$/")
        return value

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\d+\.\d+\.\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)", value):
            raise ValueError(r"must validate the regular expression /\d+\.\d+\.\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timeout
        if self.timeout:
            _dict['timeout'] = self.timeout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_group
        if self.worker_group:
            _dict['workerGroup'] = self.worker_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task_cache
        if self.task_cache:
            _dict['taskCache'] = self.task_cache.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "retry": obj.get("retry"),
            "timeout": PropertyDuration.from_dict(obj["timeout"]) if obj.get("timeout") is not None else None,
            "disabled": obj.get("disabled"),
            "workerGroup": WorkerGroup.from_dict(obj["workerGroup"]) if obj.get("workerGroup") is not None else None,
            "logLevel": obj.get("logLevel"),
            "allowFailure": obj.get("allowFailure"),
            "logToFile": obj.get("logToFile"),
            "runIf": obj.get("runIf"),
            "allowWarning": obj.get("allowWarning"),
            "taskCache": Cache.from_dict(obj["taskCache"]) if obj.get("taskCache") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


