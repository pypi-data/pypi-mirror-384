# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kestrapy.models.metric import Metric
from kestrapy.models.server_config import ServerConfig
from kestrapy.models.server_instance import ServerInstance
from kestrapy.models.service_instance_timestamped_event import ServiceInstanceTimestampedEvent
from kestrapy.models.service_service_state import ServiceServiceState
from kestrapy.models.service_type import ServiceType
from typing import Optional, Set
from typing_extensions import Self

class ServiceInstance(BaseModel):
    """
    ServiceInstance
    """ # noqa: E501
    server: Optional[ServerInstance] = None
    metrics: Optional[List[Metric]] = None
    state: Optional[ServiceServiceState] = None
    id: Optional[StrictStr] = None
    type: Optional[ServiceType] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    events: Optional[List[ServiceInstanceTimestampedEvent]] = None
    config: Optional[ServerConfig] = None
    props: Optional[Dict[str, Dict[str, Any]]] = None
    seq_id: Optional[StrictInt] = Field(default=None, alias="seqId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["server", "metrics", "state", "id", "type", "createdAt", "updatedAt", "events", "config", "props", "seqId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "server": ServerInstance.from_dict(obj["server"]) if obj.get("server") is not None else None,
            "metrics": [Metric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "state": obj.get("state"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "events": [ServiceInstanceTimestampedEvent.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "config": ServerConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "props": obj.get("props"),
            "seqId": obj.get("seqId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


