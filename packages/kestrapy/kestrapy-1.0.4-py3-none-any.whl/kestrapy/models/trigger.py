# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.backfill import Backfill
from kestrapy.models.state_type import StateType
from typing import Optional, Set
from typing_extensions import Self

class Trigger(BaseModel):
    """
    Trigger
    """ # noqa: E501
    disabled: Optional[StrictBool] = False
    tenant_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="tenantId")
    namespace: StrictStr
    flow_id: StrictStr = Field(alias="flowId")
    trigger_id: StrictStr = Field(alias="triggerId")
    var_date: datetime = Field(alias="date")
    next_execution_date: Optional[datetime] = Field(default=None, alias="nextExecutionDate")
    backfill: Optional[Backfill] = None
    stop_after: Optional[List[StateType]] = Field(default=None, alias="stopAfter")
    execution_id: Optional[StrictStr] = Field(default=None, alias="executionId")
    updated_date: Optional[datetime] = Field(default=None, alias="updatedDate")
    evaluate_running_date: Optional[datetime] = Field(default=None, alias="evaluateRunningDate")
    worker_id: Optional[StrictStr] = Field(default=None, alias="workerId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["disabled", "tenantId", "namespace", "flowId", "triggerId", "date", "nextExecutionDate", "backfill", "stopAfter", "executionId", "updatedDate", "evaluateRunningDate", "workerId"]

    @field_validator('tenant_id')
    def tenant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9][a-z0-9_-]", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9][a-z0-9_-]/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backfill
        if self.backfill:
            _dict['backfill'] = self.backfill.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if next_execution_date (nullable) is None
        # and model_fields_set contains the field
        if self.next_execution_date is None and "next_execution_date" in self.model_fields_set:
            _dict['nextExecutionDate'] = None

        # set to None if backfill (nullable) is None
        # and model_fields_set contains the field
        if self.backfill is None and "backfill" in self.model_fields_set:
            _dict['backfill'] = None

        # set to None if stop_after (nullable) is None
        # and model_fields_set contains the field
        if self.stop_after is None and "stop_after" in self.model_fields_set:
            _dict['stopAfter'] = None

        # set to None if execution_id (nullable) is None
        # and model_fields_set contains the field
        if self.execution_id is None and "execution_id" in self.model_fields_set:
            _dict['executionId'] = None

        # set to None if updated_date (nullable) is None
        # and model_fields_set contains the field
        if self.updated_date is None and "updated_date" in self.model_fields_set:
            _dict['updatedDate'] = None

        # set to None if evaluate_running_date (nullable) is None
        # and model_fields_set contains the field
        if self.evaluate_running_date is None and "evaluate_running_date" in self.model_fields_set:
            _dict['evaluateRunningDate'] = None

        # set to None if worker_id (nullable) is None
        # and model_fields_set contains the field
        if self.worker_id is None and "worker_id" in self.model_fields_set:
            _dict['workerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled") if obj.get("disabled") is not None else False,
            "tenantId": obj.get("tenantId"),
            "namespace": obj.get("namespace"),
            "flowId": obj.get("flowId"),
            "triggerId": obj.get("triggerId"),
            "date": obj.get("date"),
            "nextExecutionDate": obj.get("nextExecutionDate"),
            "backfill": Backfill.from_dict(obj["backfill"]) if obj.get("backfill") is not None else None,
            "stopAfter": obj.get("stopAfter"),
            "executionId": obj.get("executionId"),
            "updatedDate": obj.get("updatedDate"),
            "evaluateRunningDate": obj.get("evaluateRunningDate"),
            "workerId": obj.get("workerId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


