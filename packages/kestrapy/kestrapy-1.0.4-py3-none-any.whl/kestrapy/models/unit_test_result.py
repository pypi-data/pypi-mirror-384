# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kestrapy.models.assertion_result import AssertionResult
from kestrapy.models.assertion_run_error import AssertionRunError
from kestrapy.models.fixtures import Fixtures
from kestrapy.models.test_state import TestState
from typing import Optional, Set
from typing_extensions import Self

class UnitTestResult(BaseModel):
    """
    UnitTestResult
    """ # noqa: E501
    test_id: StrictStr = Field(alias="testId")
    test_type: StrictStr = Field(alias="testType")
    execution_id: Optional[StrictStr] = Field(default=None, alias="executionId")
    url: Optional[StrictStr] = None
    state: TestState
    assertion_results: List[AssertionResult] = Field(alias="assertionResults")
    errors: List[AssertionRunError]
    fixtures: Optional[Fixtures] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["testId", "testType", "executionId", "url", "state", "assertionResults", "errors", "fixtures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnitTestResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assertion_results (list)
        _items = []
        if self.assertion_results:
            for _item_assertion_results in self.assertion_results:
                if _item_assertion_results:
                    _items.append(_item_assertion_results.to_dict())
            _dict['assertionResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of fixtures
        if self.fixtures:
            _dict['fixtures'] = self.fixtures.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnitTestResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "testId": obj.get("testId"),
            "testType": obj.get("testType"),
            "executionId": obj.get("executionId"),
            "url": obj.get("url"),
            "state": obj.get("state"),
            "assertionResults": [AssertionResult.from_dict(_item) for _item in obj["assertionResults"]] if obj.get("assertionResults") is not None else None,
            "errors": [AssertionRunError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "fixtures": Fixtures.from_dict(obj["fixtures"]) if obj.get("fixtures") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


