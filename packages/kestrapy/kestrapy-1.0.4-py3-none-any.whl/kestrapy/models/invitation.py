# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.binding import Binding
from kestrapy.models.invitation_invitation_status import InvitationInvitationStatus
from kestrapy.models.user_type import UserType
from typing import Optional, Set
from typing_extensions import Self

class Invitation(BaseModel):
    """
    Invitation
    """ # noqa: E501
    is_expired: Optional[StrictBool] = Field(default=None, alias="isExpired")
    email: Annotated[str, Field(strict=True)]
    id: Optional[StrictStr] = None
    bindings: Optional[List[Binding]] = None
    group_ids: Optional[List[StrictStr]] = Field(default=None, alias="groupIds")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    status: Optional[InvitationInvitationStatus] = None
    sent_at: Optional[datetime] = Field(default=None, alias="sentAt")
    expired_at: Optional[datetime] = Field(default=None, alias="expiredAt")
    accepted_at: Optional[datetime] = Field(default=None, alias="acceptedAt")
    deleted: StrictBool
    user_type: Optional[UserType] = Field(default=None, alias="userType")
    super_admin: Optional[StrictBool] = Field(default=None, alias="superAdmin")
    link: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["isExpired", "email", "id", "bindings", "groupIds", "tenantId", "status", "sentAt", "expiredAt", "acceptedAt", "deleted", "userType", "superAdmin", "link"]

    @field_validator('email')
    def email_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^$|^[a-zA-Z0-9_!#$%&’*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$", value):
            raise ValueError(r"must validate the regular expression /^$|^[a-zA-Z0-9_!#$%&’*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invitation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bindings (list)
        _items = []
        if self.bindings:
            for _item_bindings in self.bindings:
                if _item_bindings:
                    _items.append(_item_bindings.to_dict())
            _dict['bindings'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invitation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isExpired": obj.get("isExpired"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "bindings": [Binding.from_dict(_item) for _item in obj["bindings"]] if obj.get("bindings") is not None else None,
            "groupIds": obj.get("groupIds"),
            "tenantId": obj.get("tenantId"),
            "status": obj.get("status"),
            "sentAt": obj.get("sentAt"),
            "expiredAt": obj.get("expiredAt"),
            "acceptedAt": obj.get("acceptedAt"),
            "deleted": obj.get("deleted"),
            "userType": obj.get("userType"),
            "superAdmin": obj.get("superAdmin"),
            "link": obj.get("link")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


