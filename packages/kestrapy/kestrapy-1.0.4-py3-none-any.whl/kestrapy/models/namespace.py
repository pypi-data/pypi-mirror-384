# coding: utf-8

"""
    Kestra EE

    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from kestrapy.models.isolation import Isolation
from kestrapy.models.namespace_allowed_namespace import NamespaceAllowedNamespace
from kestrapy.models.namespace_allowed_trigger import NamespaceAllowedTrigger
from kestrapy.models.plugin_default import PluginDefault
from kestrapy.models.worker_group import WorkerGroup
from typing import Optional, Set
from typing_extensions import Self

class Namespace(BaseModel):
    """
    A namespace is a logical grouping of flows and tasks. It is used to organize and manage flows and tasks within Kestra.
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    deleted: StrictBool
    allowed_triggers: Optional[List[NamespaceAllowedTrigger]] = Field(default=None, alias="allowedTriggers")
    storage_isolation: Optional[Isolation] = Field(default=None, alias="storageIsolation")
    secret_isolation: Optional[Isolation] = Field(default=None, alias="secretIsolation")
    description: Optional[StrictStr] = None
    variables: Optional[Dict[str, Dict[str, Any]]] = None
    plugin_defaults: Optional[List[PluginDefault]] = Field(default=None, alias="pluginDefaults")
    allowed_namespaces: Optional[List[NamespaceAllowedNamespace]] = Field(default=None, alias="allowedNamespaces")
    worker_group: Optional[WorkerGroup] = Field(default=None, alias="workerGroup")
    storage_type: Optional[StrictStr] = Field(default=None, alias="storageType")
    storage_configuration: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="storageConfiguration")
    secret_type: Optional[StrictStr] = Field(default=None, alias="secretType")
    secret_read_only: Optional[StrictBool] = Field(default=None, alias="secretReadOnly")
    secret_configuration: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="secretConfiguration")
    outputs_in_internal_storage: Optional[StrictBool] = Field(default=None, alias="outputsInInternalStorage")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "deleted"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9][a-z0-9._-]*", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9][a-z0-9._-]*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Namespace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Namespace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "deleted": obj.get("deleted")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


