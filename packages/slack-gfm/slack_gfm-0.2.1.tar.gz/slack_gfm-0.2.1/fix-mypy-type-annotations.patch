diff --git a/pyproject.toml b/pyproject.toml
index 19d0112..d1179c3 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,6 +1,6 @@
 [project]
 name = "slack-gfm"
-version = "0.2.0"
+version = "0.2.1"
 description = "Convert between Slack message formats (Mrkdwn, Rich Text) and GitHub Flavored Markdown with AST manipulation"
 readme = "README.md"
 authors = [
diff --git a/src/slack_gfm/ast/visitor.py b/src/slack_gfm/ast/visitor.py
index 4424dd9..e09e69d 100644
--- a/src/slack_gfm/ast/visitor.py
+++ b/src/slack_gfm/ast/visitor.py
@@ -58,11 +58,13 @@ class NodeVisitor:
         """
         if hasattr(node, "children") and node.children:
             from dataclasses import replace
+            from typing import Any, cast
 
             new_children = [self.visit(child) for child in node.children]
             # Only create a new node if children actually changed
             if new_children != list(node.children):
-                return replace(node, children=new_children)
+                # We've checked hasattr, so this is safe at runtime
+                return cast(AnyNode, replace(cast(Any, node), children=new_children))
         return node
 
     # Visitor methods for each node type
@@ -150,14 +152,28 @@ class NodeVisitor:
 
     def visit_table(self, node: Table) -> Table:
         """Visit a Table node."""
+        from dataclasses import replace
+        from typing import cast
+
+        from .nodes import InlineNode
+
         # Tables have nested structure - visit cells
+        new_header = node.header
+        new_rows = node.rows
+
         if node.header:
-            node.header = [[self.visit(cell) for cell in row] for row in node.header]  # type: ignore
+            new_header = [
+                [cast(InlineNode, self.visit(cell)) for cell in row] for row in node.header
+            ]
         if node.rows:
-            node.rows = [
-                [[self.visit(cell) for cell in row_cells] for row_cells in row]  # type: ignore
+            new_rows = [
+                [[cast(InlineNode, self.visit(cell)) for cell in row_cells] for row_cells in row]
                 for row in node.rows
             ]
+
+        # Only create new node if something changed
+        if new_header != node.header or new_rows != node.rows:
+            return replace(node, header=new_header, rows=new_rows)
         return node
 
 
diff --git a/src/slack_gfm/parsers/mrkdwn.py b/src/slack_gfm/parsers/mrkdwn.py
index c04826d..2dc1db0 100644
--- a/src/slack_gfm/parsers/mrkdwn.py
+++ b/src/slack_gfm/parsers/mrkdwn.py
@@ -9,12 +9,14 @@ from enum import Enum, auto
 from ..ast import (
     AnyBlock,
     AnyInline,
+    BlockNode,
     Bold,
     Broadcast,
     ChannelMention,
     Code,
     CodeBlock,
     Document,
+    InlineNode,
     Italic,
     Link,
     List,
@@ -366,6 +368,7 @@ def parse_mrkdwn(mrkdwn_text: str) -> Document:
 
 def _parse_tokens_to_ast(tokens: list[Token]) -> Document:
     """Build AST from tokens."""
+
     blocks: list[AnyBlock] = []
     i = 0
 
@@ -379,29 +382,29 @@ def _parse_tokens_to_ast(tokens: list[Token]) -> Document:
 
         # Check for quote
         if tokens[i].type == "quote_marker":
-            block, consumed = _parse_quote_tokens(tokens, i)
-            blocks.append(block)
+            quote_block, consumed = _parse_quote_tokens(tokens, i)
+            blocks.append(quote_block)
             i += consumed
             continue
 
         # Check for bullet list
         if tokens[i].type == "bullet_marker":
-            block, consumed = _parse_list_tokens(tokens, i, ordered=False)
-            blocks.append(block)
+            list_block, consumed = _parse_list_tokens(tokens, i, ordered=False)
+            blocks.append(list_block)
             i += consumed
             continue
 
         # Check for ordered list
         if tokens[i].type == "ordered_marker":
-            block, consumed = _parse_list_tokens(tokens, i, ordered=True)
-            blocks.append(block)
+            list_block, consumed = _parse_list_tokens(tokens, i, ordered=True)
+            blocks.append(list_block)
             i += consumed
             continue
 
         # Check for paragraph (text or formatting)
-        block, consumed = _parse_paragraph_tokens(tokens, i)
-        if block:
-            blocks.append(block)
+        para_block, consumed = _parse_paragraph_tokens(tokens, i)
+        if para_block:
+            blocks.append(para_block)
         i += consumed
 
     return Document(children=blocks)
@@ -530,8 +533,11 @@ def _parse_list_tokens(tokens: list[Token], start: int, ordered: bool) -> tuple[
 
         # Parse item content
         if item_tokens:
+            from typing import cast
+
             inlines = _parse_inline_tokens(item_tokens)
-            list_items.append(ListItem(children=inlines))
+            # Cast to the expected type - AnyInline items are also InlineNode
+            list_items.append(ListItem(children=cast(list[InlineNode | BlockNode], inlines)))
 
     consumed = i - start
     return List(children=list_items, ordered=ordered, start=start_num), consumed
diff --git a/src/slack_gfm/parsers/rich_text.py b/src/slack_gfm/parsers/rich_text.py
index 74a0685..cfdf537 100644
--- a/src/slack_gfm/parsers/rich_text.py
+++ b/src/slack_gfm/parsers/rich_text.py
@@ -3,7 +3,7 @@
 Converts Slack Rich Text JSON structure to AST.
 """
 
-from typing import Any
+from typing import Any, cast
 
 from ..ast import (
     AnyBlock,
@@ -149,11 +149,11 @@ def _element_to_plain_text(element: dict[str, Any]) -> str:
     elem_type = element.get("type", "")
 
     if elem_type == "text":
-        return element.get("text", "")
+        return cast(str, element.get("text", ""))
 
     elif elem_type == "link":
         # For links in code blocks, use the URL as plain text
-        return element.get("url", "")
+        return cast(str, element.get("url", ""))
 
     elif elem_type == "user":
         # User mention as plain text: <@USER_ID>
@@ -174,7 +174,7 @@ def _element_to_plain_text(element: dict[str, Any]) -> str:
         # Prefer unicode, fallback to :name:
         unicode_str = element.get("unicode")
         if unicode_str:
-            return unicode_str
+            return cast(str, unicode_str)
         name = element.get("name", "")
         return f":{name}:" if name else ""
 
@@ -187,7 +187,7 @@ def _element_to_plain_text(element: dict[str, Any]) -> str:
         # Use fallback text if available, otherwise timestamp
         fallback = element.get("fallback")
         if fallback:
-            return fallback
+            return cast(str, fallback)
         timestamp = element.get("timestamp", 0)
         return str(timestamp)
 
@@ -195,7 +195,7 @@ def _element_to_plain_text(element: dict[str, Any]) -> str:
         # Color element (hex color code)
         # This is not yet in the AST, but handle it for completeness
         value = element.get("value", "")
-        return value
+        return cast(str, value)
 
     else:
         # Unknown element type - return empty string
diff --git a/src/slack_gfm/renderers/gfm_visitor.py b/src/slack_gfm/renderers/gfm_visitor.py
index 0ad08d4..018be56 100644
--- a/src/slack_gfm/renderers/gfm_visitor.py
+++ b/src/slack_gfm/renderers/gfm_visitor.py
@@ -51,27 +51,30 @@ class GFMRenderer(NodeVisitor):
 
     # Block-level nodes
 
-    def visit_document(self, node: Document) -> None:
+    def visit_document(self, node: Document) -> Document:
         """Render Document node."""
         for i, child in enumerate(node.children):
             self.visit(child)
             # Add double newline between blocks, except after last
             if i < len(node.children) - 1:
                 self.output.append("\n\n")
+        return node
 
-    def visit_paragraph(self, node: Paragraph) -> None:
+    def visit_paragraph(self, node: Paragraph) -> Paragraph:
         """Render Paragraph node."""
         for child in node.children:
             self.visit(child)
+        return node
 
-    def visit_heading(self, node: Heading) -> None:
+    def visit_heading(self, node: Heading) -> Heading:
         """Render Heading node."""
         level = max(1, min(6, node.level))  # Clamp to 1-6
         self.output.append("#" * level + " ")
         for child in node.children:
             self.visit(child)
+        return node
 
-    def visit_codeblock(self, node: CodeBlock) -> None:
+    def visit_codeblock(self, node: CodeBlock) -> CodeBlock:
         """Render CodeBlock node."""
         lang = node.language or ""
 
@@ -91,8 +94,9 @@ class GFMRenderer(NodeVisitor):
             prefix = "" if node.content.startswith("\n") else "\n"
             suffix = "" if node.content.endswith("\n") else "\n"
             self.output.append(f"```{lang}{prefix}{node.content}{suffix}```")
+        return node
 
-    def visit_quote(self, node: Quote) -> None:
+    def visit_quote(self, node: Quote) -> Quote:
         """Render Quote node."""
         # Render children and prefix each line with >
         content_parts = []
@@ -110,8 +114,9 @@ class GFMRenderer(NodeVisitor):
             content_parts.append("\n".join(quoted_lines))
 
         self.output.append("\n".join(content_parts))
+        return node
 
-    def visit_list(self, node: List) -> None:
+    def visit_list(self, node: List) -> List:
         """Render List node."""
         for i, item in enumerate(node.children):
             if node.ordered:
@@ -138,17 +143,20 @@ class GFMRenderer(NodeVisitor):
                     self.output.append("  " + line)
                     if line != lines[-1]:
                         self.output.append("\n")
+        return node
 
-    def visit_listitem(self, node: ListItem) -> None:
+    def visit_listitem(self, node: ListItem) -> ListItem:
         """Render ListItem node."""
         for child in node.children:
             self.visit(child)
+        return node
 
-    def visit_horizontalrule(self, node: HorizontalRule) -> None:
+    def visit_horizontalrule(self, node: HorizontalRule) -> HorizontalRule:
         """Render HorizontalRule node."""
         self.output.append("---")
+        return node
 
-    def visit_table(self, node: Table) -> None:
+    def visit_table(self, node: Table) -> Table:
         """Render Table node."""
         lines = []
 
@@ -156,10 +164,10 @@ class GFMRenderer(NodeVisitor):
         if node.header:
             saved_output = self.output
             header_cells = []
-            for row in node.header:
+            for header_cell in node.header:
                 self.output = []
-                for cell in row:
-                    self.visit(cell)
+                for inline_node in header_cell:
+                    self.visit(inline_node)
                 header_cells.append("".join(self.output))
             self.output = saved_output
             lines.append("| " + " | ".join(header_cells) + " |")
@@ -180,20 +188,21 @@ class GFMRenderer(NodeVisitor):
         # Data rows
         saved_output = self.output
         for row in node.rows:
-            row_cells = []
-            for row_cells_data in row:
+            row_cells_rendered = []
+            for cell in row:
                 self.output = []
-                for cell in row_cells_data:
-                    self.visit(cell)
-                row_cells.append("".join(self.output))
-            lines.append("| " + " | ".join(row_cells) + " |")
+                for inline_node in cell:
+                    self.visit(inline_node)
+                row_cells_rendered.append("".join(self.output))
+            lines.append("| " + " | ".join(row_cells_rendered) + " |")
         self.output = saved_output
 
         self.output.append("\n".join(lines))
+        return node
 
     # Inline nodes
 
-    def visit_text(self, node: Text) -> None:
+    def visit_text(self, node: Text) -> Text:
         """Render Text node."""
         # Escape special markdown characters
         content = node.content
@@ -203,35 +212,40 @@ class GFMRenderer(NodeVisitor):
         for char in ["*", "_", "`", "[", "]", "(", ")", "#", "+", "-", ".", "!", "|"]:
             content = content.replace(char, f"\\{char}")
         self.output.append(content)
+        return node
 
-    def visit_bold(self, node: Bold) -> None:
+    def visit_bold(self, node: Bold) -> Bold:
         """Render Bold node."""
         self.output.append("**")
         for child in node.children:
             self.visit(child)
         self.output.append("**")
+        return node
 
-    def visit_italic(self, node: Italic) -> None:
+    def visit_italic(self, node: Italic) -> Italic:
         """Render Italic node."""
         self.output.append("*")
         for child in node.children:
             self.visit(child)
         self.output.append("*")
+        return node
 
-    def visit_strikethrough(self, node: Strikethrough) -> None:
+    def visit_strikethrough(self, node: Strikethrough) -> Strikethrough:
         """Render Strikethrough node."""
         self.output.append("~~")
         for child in node.children:
             self.visit(child)
         self.output.append("~~")
+        return node
 
-    def visit_code(self, node: Code) -> None:
+    def visit_code(self, node: Code) -> Code:
         """Render inline Code node."""
         # Escape backticks in code content
         content = node.content.replace("`", "\\`")
         self.output.append(f"`{content}`")
+        return node
 
-    def visit_link(self, node: Link) -> None:
+    def visit_link(self, node: Link) -> Link:
         """Render Link node."""
         # Render link text
         saved_output = self.output
@@ -247,8 +261,9 @@ class GFMRenderer(NodeVisitor):
         # Escape special chars in URL
         url = node.url.replace("(", "%28").replace(")", "%29")
         self.output.append(f"[{text}]({url})")
+        return node
 
-    def visit_usermention(self, node: UserMention) -> None:
+    def visit_usermention(self, node: UserMention) -> UserMention:
         """Render UserMention as GFM link with slack:// URL."""
         display = f"@{node.username}" if node.username else node.user_id
         params = {"id": node.user_id}
@@ -256,8 +271,9 @@ class GFMRenderer(NodeVisitor):
             params["name"] = node.username
         url = f"slack://user?{urlencode(params)}"
         self.output.append(f"[{display}]({url})")
+        return node
 
-    def visit_channelmention(self, node: ChannelMention) -> None:
+    def visit_channelmention(self, node: ChannelMention) -> ChannelMention:
         """Render ChannelMention as GFM link with slack:// URL."""
         display = f"#{node.channel_name}" if node.channel_name else node.channel_id
         params = {"id": node.channel_id}
@@ -265,8 +281,9 @@ class GFMRenderer(NodeVisitor):
             params["name"] = node.channel_name
         url = f"slack://channel?{urlencode(params)}"
         self.output.append(f"[{display}]({url})")
+        return node
 
-    def visit_usergroupmention(self, node: UsergroupMention) -> None:
+    def visit_usergroupmention(self, node: UsergroupMention) -> UsergroupMention:
         """Render UsergroupMention as GFM link with slack:// URL."""
         display = f"@{node.usergroup_name}" if node.usergroup_name else node.usergroup_id
         params = {"id": node.usergroup_id}
@@ -274,21 +291,24 @@ class GFMRenderer(NodeVisitor):
             params["name"] = node.usergroup_name
         url = f"slack://usergroup?{urlencode(params)}"
         self.output.append(f"[{display}]({url})")
+        return node
 
-    def visit_broadcast(self, node: Broadcast) -> None:
+    def visit_broadcast(self, node: Broadcast) -> Broadcast:
         """Render Broadcast as GFM link with slack:// URL."""
         display = f"@{node.range}"
         url = f"slack://broadcast?type={node.range}"
         self.output.append(f"[{display}]({url})")
+        return node
 
-    def visit_emoji(self, node: Emoji) -> None:
+    def visit_emoji(self, node: Emoji) -> Emoji:
         """Render Emoji."""
         if node.unicode:
             self.output.append(node.unicode)
         else:
             self.output.append(f":{node.name}:")
+        return node
 
-    def visit_datetimestamp(self, node: DateTimestamp) -> None:
+    def visit_datetimestamp(self, node: DateTimestamp) -> DateTimestamp:
         """Render DateTimestamp as GFM link with slack:// URL."""
         display = node.fallback or str(node.timestamp)
         params = {"ts": str(node.timestamp)}
@@ -296,6 +316,7 @@ class GFMRenderer(NodeVisitor):
             params["format"] = node.format
         url = f"slack://date?{urlencode(params)}"
         self.output.append(f"[{display}]({url})")
+        return node
 
 
 def render_gfm_visitor(node: AnyNode) -> str:
diff --git a/tests/test_basic_conversions.py b/tests/test_basic_conversions.py
index 8baebe4..a89e8f1 100644
--- a/tests/test_basic_conversions.py
+++ b/tests/test_basic_conversions.py
@@ -6,7 +6,7 @@ from slack_gfm import gfm_to_rich_text, mrkdwn_to_gfm, rich_text_to_gfm
 class TestRichTextToGFM:
     """Test Rich Text to GFM conversion."""
 
-    def test_simple_text(self):
+    def test_simple_text(self) -> None:
         """Test simple text conversion."""
         rich_text = {
             "type": "rich_text",
@@ -21,7 +21,7 @@ class TestRichTextToGFM:
         result = rich_text_to_gfm(rich_text)
         assert result == "Hello world"
 
-    def test_bold_text(self):
+    def test_bold_text(self) -> None:
         """Test bold text conversion."""
         rich_text = {
             "type": "rich_text",
@@ -36,7 +36,7 @@ class TestRichTextToGFM:
         result = rich_text_to_gfm(rich_text)
         assert result == "**Hello**"
 
-    def test_user_mention(self):
+    def test_user_mention(self) -> None:
         """Test user mention conversion."""
         rich_text = {
             "type": "rich_text",
@@ -52,7 +52,7 @@ class TestRichTextToGFM:
         assert "slack://user" in result
         assert "id=U123ABC" in result
 
-    def test_user_mention_with_mapping(self):
+    def test_user_mention_with_mapping(self) -> None:
         """Test user mention with ID mapping."""
         rich_text = {
             "type": "rich_text",
@@ -68,7 +68,7 @@ class TestRichTextToGFM:
         assert "@john" in result
         assert "name=john" in result
 
-    def test_code_block(self):
+    def test_code_block(self) -> None:
         """Test code block conversion."""
         rich_text = {
             "type": "rich_text",
@@ -88,7 +88,7 @@ class TestRichTextToGFM:
 class TestGFMToRichText:
     """Test GFM to Rich Text conversion."""
 
-    def test_simple_text(self):
+    def test_simple_text(self) -> None:
         """Test simple text conversion."""
         gfm = "Hello world"
         result = gfm_to_rich_text(gfm)
@@ -99,7 +99,7 @@ class TestGFMToRichText:
         first_elem = result["elements"][0]
         assert first_elem["type"] == "rich_text_section"
 
-    def test_bold_text(self):
+    def test_bold_text(self) -> None:
         """Test bold text conversion."""
         gfm = "**Hello**"
         result = gfm_to_rich_text(gfm)
@@ -110,7 +110,7 @@ class TestGFMToRichText:
             elem.get("style", {}).get("bold") for elem in elements if elem.get("type") == "text"
         )
 
-    def test_slack_url_user_mention(self):
+    def test_slack_url_user_mention(self) -> None:
         """Test slack:// URL conversion back to user mention."""
         gfm = "[@john](slack://user?id=U123ABC&name=john)"
         result = gfm_to_rich_text(gfm)
@@ -123,25 +123,25 @@ class TestGFMToRichText:
 class TestMrkdwnToGFM:
     """Test mrkdwn to GFM conversion."""
 
-    def test_simple_text(self):
+    def test_simple_text(self) -> None:
         """Test simple text conversion."""
         mrkdwn = "Hello world"
         result = mrkdwn_to_gfm(mrkdwn)
         assert "Hello world" in result
 
-    def test_bold_syntax(self):
+    def test_bold_syntax(self) -> None:
         """Test mrkdwn bold (*) to GFM bold (**)."""
         mrkdwn = "*Hello*"
         result = mrkdwn_to_gfm(mrkdwn)
         assert "**Hello**" in result
 
-    def test_italic_syntax(self):
+    def test_italic_syntax(self) -> None:
         """Test mrkdwn italic (_) to GFM italic (*)."""
         mrkdwn = "_Hello_"
         result = mrkdwn_to_gfm(mrkdwn)
         assert "*Hello*" in result
 
-    def test_user_mention(self):
+    def test_user_mention(self) -> None:
         """Test mrkdwn user mention conversion."""
         mrkdwn = "<@U123ABC|john>"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -149,7 +149,7 @@ class TestMrkdwnToGFM:
         assert "id=U123ABC" in result
         assert "@john" in result
 
-    def test_link(self):
+    def test_link(self) -> None:
         """Test mrkdwn link conversion."""
         mrkdwn = "<https://example.com|Example>"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -159,7 +159,7 @@ class TestMrkdwnToGFM:
 class TestRoundTrip:
     """Test round-trip conversions."""
 
-    def test_rich_text_to_gfm_to_rich_text(self):
+    def test_rich_text_to_gfm_to_rich_text(self) -> None:
         """Test Rich Text → GFM → Rich Text preserves data."""
         original = {
             "type": "rich_text",
diff --git a/tests/test_edge_cases.py b/tests/test_edge_cases.py
index 060b8dd..8ced8a2 100644
--- a/tests/test_edge_cases.py
+++ b/tests/test_edge_cases.py
@@ -1,5 +1,7 @@
 """Edge case tests to improve coverage."""
 
+from typing import cast
+
 from slack_gfm import gfm_to_rich_text, mrkdwn_to_gfm, rich_text_to_gfm
 from slack_gfm.ast import (
     Document,
@@ -17,38 +19,38 @@ from slack_gfm.renderers import render_gfm, render_rich_text
 class TestParserEdgeCases:
     """Test edge cases in parsers."""
 
-    def test_gfm_empty_link(self):
+    def test_gfm_empty_link(self) -> None:
         """Test GFM parser with empty link."""
         ast = parse_gfm("[text]()")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         # Should still create a link even with empty URL
         assert len(para.children) > 0
 
-    def test_gfm_table(self):
+    def test_gfm_table(self) -> None:
         """Test GFM table parsing."""
         ast = parse_gfm("| Col1 | Col2 |\n|------|------|\n| A | B |")
         # GFM extension for tables might not be enabled in markdown-it-py by default
         # Just verify it parses without error
         assert isinstance(ast, Document)
 
-    def test_gfm_thematic_break(self):
+    def test_gfm_thematic_break(self) -> None:
         """Test horizontal rule parsing."""
         ast = parse_gfm("---")
         assert isinstance(ast.children[0], HorizontalRule)
 
-    def test_mrkdwn_nested_formatting(self):
+    def test_mrkdwn_nested_formatting(self) -> None:
         """Test nested formatting in mrkdwn."""
         ast = parse_mrkdwn("*_bold italic_*")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         # Should parse nested styles
         assert len(para.children) > 0
 
-    def test_mrkdwn_multiline_code(self):
+    def test_mrkdwn_multiline_code(self) -> None:
         """Test multiline code block."""
         ast = parse_mrkdwn("```\nline1\nline2\n```")
         assert any(hasattr(child, "content") for child in ast.children)
 
-    def test_rich_text_emoji(self):
+    def test_rich_text_emoji(self) -> None:
         """Test emoji parsing."""
         rich_text = {
             "type": "rich_text",
@@ -60,10 +62,10 @@ class TestParserEdgeCases:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Emoji)
 
-    def test_rich_text_link_with_style(self):
+    def test_rich_text_link_with_style(self) -> None:
         """Test link with style in rich text."""
         rich_text = {
             "type": "rich_text",
@@ -84,7 +86,7 @@ class TestParserEdgeCases:
         # Should handle styled links
         assert len(ast.children) > 0
 
-    def test_rich_text_date(self):
+    def test_rich_text_date(self) -> None:
         """Test date element."""
         rich_text = {
             "type": "rich_text",
@@ -105,7 +107,7 @@ class TestParserEdgeCases:
         # Should parse date element
         assert len(ast.children) > 0
 
-    def test_rich_text_usergroup(self):
+    def test_rich_text_usergroup(self) -> None:
         """Test usergroup mention."""
         rich_text = {
             "type": "rich_text",
@@ -124,14 +126,14 @@ class TestParserEdgeCases:
 class TestRendererEdgeCases:
     """Test edge cases in renderers."""
 
-    def test_gfm_heading_levels(self):
+    def test_gfm_heading_levels(self) -> None:
         """Test different heading levels."""
         for level in range(1, 7):
             doc = Document(children=[Heading(level=level, children=[Text(content="Title")])])
             result = render_gfm(doc)
             assert "#" * level in result
 
-    def test_gfm_table_rendering(self):
+    def test_gfm_table_rendering(self) -> None:
         """Test table rendering."""
         doc = Document(
             children=[
@@ -145,14 +147,14 @@ class TestRendererEdgeCases:
         result = render_gfm(doc)
         assert "|" in result
 
-    def test_rich_text_heading(self):
+    def test_rich_text_heading(self) -> None:
         """Test heading in rich text (should render as section)."""
         doc = Document(children=[Heading(level=1, children=[Text(content="Title")])])
         result = render_rich_text(doc)
         # Headings become sections in rich text
         assert result["elements"][0]["type"] == "rich_text_section"
 
-    def test_rich_text_table(self):
+    def test_rich_text_table(self) -> None:
         """Test table in rich text (should render as section)."""
         doc = Document(
             children=[
@@ -167,14 +169,14 @@ class TestRendererEdgeCases:
         # Tables become sections in rich text
         assert result["type"] == "rich_text"
 
-    def test_rich_text_horizontal_rule(self):
+    def test_rich_text_horizontal_rule(self) -> None:
         """Test horizontal rule in rich text."""
         doc = Document(children=[HorizontalRule()])
         result = render_rich_text(doc)
         # Should render something
         assert result["type"] == "rich_text"
 
-    def test_rich_text_emoji(self):
+    def test_rich_text_emoji(self) -> None:
         """Test emoji rendering."""
         doc = Document(children=[Paragraph(children=[Emoji(name="smile")])])
         result = render_rich_text(doc)
@@ -182,7 +184,7 @@ class TestRendererEdgeCases:
         assert elem["type"] == "emoji"
         assert elem["name"] == "smile"
 
-    def test_rich_text_link_no_children(self):
+    def test_rich_text_link_no_children(self) -> None:
         """Test link without children."""
         from slack_gfm.ast import Link
 
@@ -199,7 +201,7 @@ class TestRendererEdgeCases:
 class TestConversionEdgeCases:
     """Test edge cases in high-level conversion functions."""
 
-    def test_rich_text_to_gfm_with_all_mappings(self):
+    def test_rich_text_to_gfm_with_all_mappings(self) -> None:
         """Test conversion with all mapping types."""
         rich_text = {
             "type": "rich_text",
@@ -224,7 +226,7 @@ class TestConversionEdgeCases:
         assert "general" in result
         assert "devs" in result
 
-    def test_gfm_to_rich_text_with_mappings(self):
+    def test_gfm_to_rich_text_with_mappings(self) -> None:
         """Test GFM to rich text with mappings."""
         gfm = "[@alice](slack://user?id=U1&name=alice)"
         result = gfm_to_rich_text(gfm, user_map={"U1": "alice"})
@@ -232,7 +234,7 @@ class TestConversionEdgeCases:
         elem = result["elements"][0]["elements"][0]
         assert elem["user_id"] == "U1"
 
-    def test_mrkdwn_complex(self):
+    def test_mrkdwn_complex(self) -> None:
         """Test complex mrkdwn conversion."""
         mrkdwn = "*bold* _italic_ ~strike~ `code` <@U1> <#C1> <!here> <http://example.com|link>"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -248,7 +250,7 @@ class TestConversionEdgeCases:
 class TestVisitorEdgeCases:
     """Test visitor edge cases."""
 
-    def test_visitor_methods(self):
+    def test_visitor_methods(self) -> None:
         """Test all visitor methods are callable."""
         from slack_gfm.ast import NodeVisitor
 
diff --git a/tests/test_exceptions.py b/tests/test_exceptions.py
index ea60d0f..e1eb6a3 100644
--- a/tests/test_exceptions.py
+++ b/tests/test_exceptions.py
@@ -14,7 +14,7 @@ from slack_gfm import (
 class TestSlackGFMError:
     """Test the base exception class."""
 
-    def test_basic_exception(self):
+    def test_basic_exception(self) -> None:
         """Test exception with just a message."""
         exc = SlackGFMError("Something went wrong")
 
@@ -22,7 +22,7 @@ class TestSlackGFMError:
         assert exc.context == {}
         assert str(exc) == "Something went wrong"
 
-    def test_exception_with_context(self):
+    def test_exception_with_context(self) -> None:
         """Test exception with context information."""
         context = {"element_type": "unknown", "position": 42}
         exc = SlackGFMError("Parse failed", context=context)
@@ -32,7 +32,7 @@ class TestSlackGFMError:
         assert "element_type='unknown'" in str(exc)
         assert "position=42" in str(exc)
 
-    def test_exception_repr(self):
+    def test_exception_repr(self) -> None:
         """Test exception representation."""
         exc = SlackGFMError("Error", context={"foo": "bar"})
         repr_str = repr(exc)
@@ -41,7 +41,7 @@ class TestSlackGFMError:
         assert "'Error'" in repr_str
         assert "'foo': 'bar'" in repr_str
 
-    def test_exception_is_catchable(self):
+    def test_exception_is_catchable(self) -> None:
         """Test that exception can be caught."""
         with pytest.raises(SlackGFMError) as exc_info:
             raise SlackGFMError("test error")
@@ -52,7 +52,7 @@ class TestSlackGFMError:
 class TestParseError:
     """Test ParseError exception."""
 
-    def test_parse_error_inherits_from_base(self):
+    def test_parse_error_inherits_from_base(self) -> None:
         """Test that ParseError inherits from SlackGFMError."""
         exc = ParseError("Parse failed")
 
@@ -60,7 +60,7 @@ class TestParseError:
         assert isinstance(exc, ParseError)
         assert exc.message == "Parse failed"
 
-    def test_parse_error_with_element_context(self):
+    def test_parse_error_with_element_context(self) -> None:
         """Test ParseError with element context."""
         context = {
             "element": {"type": "rich_text_unknown"},
@@ -73,12 +73,12 @@ class TestParseError:
         assert exc.context["element"]["type"] == "rich_text_unknown"
         assert "rich_text_unknown" in str(exc)
 
-    def test_catch_specific_parse_error(self):
+    def test_catch_specific_parse_error(self) -> None:
         """Test catching specific ParseError."""
         with pytest.raises(ParseError):
             raise ParseError("Invalid syntax")
 
-    def test_catch_as_base_exception(self):
+    def test_catch_as_base_exception(self) -> None:
         """Test catching ParseError as base SlackGFMError."""
         with pytest.raises(SlackGFMError):
             raise ParseError("Invalid syntax")
@@ -87,14 +87,14 @@ class TestParseError:
 class TestRenderError:
     """Test RenderError exception."""
 
-    def test_render_error_inherits_from_base(self):
+    def test_render_error_inherits_from_base(self) -> None:
         """Test that RenderError inherits from SlackGFMError."""
         exc = RenderError("Render failed")
 
         assert isinstance(exc, SlackGFMError)
         assert isinstance(exc, RenderError)
 
-    def test_render_error_with_node_context(self):
+    def test_render_error_with_node_context(self) -> None:
         """Test RenderError with AST node context."""
         context = {
             "node_type": "Link",
@@ -106,7 +106,7 @@ class TestRenderError:
         assert "Link" in str(exc)
         assert "url" in str(exc)
 
-    def test_catch_specific_render_error(self):
+    def test_catch_specific_render_error(self) -> None:
         """Test catching specific RenderError."""
         with pytest.raises(RenderError):
             raise RenderError("Cannot render")
@@ -115,14 +115,14 @@ class TestRenderError:
 class TestValidationError:
     """Test ValidationError exception."""
 
-    def test_validation_error_inherits_from_base(self):
+    def test_validation_error_inherits_from_base(self) -> None:
         """Test that ValidationError inherits from SlackGFMError."""
         exc = ValidationError("Validation failed")
 
         assert isinstance(exc, SlackGFMError)
         assert isinstance(exc, ValidationError)
 
-    def test_validation_error_with_field_context(self):
+    def test_validation_error_with_field_context(self) -> None:
         """Test ValidationError with field validation context."""
         context = {
             "field": "elements",
@@ -135,7 +135,7 @@ class TestValidationError:
         assert "elements" in str(exc)
         assert "list" in str(exc)
 
-    def test_catch_specific_validation_error(self):
+    def test_catch_specific_validation_error(self) -> None:
         """Test catching specific ValidationError."""
         with pytest.raises(ValidationError):
             raise ValidationError("Invalid data")
@@ -144,14 +144,14 @@ class TestValidationError:
 class TestTransformError:
     """Test TransformError exception."""
 
-    def test_transform_error_inherits_from_base(self):
+    def test_transform_error_inherits_from_base(self) -> None:
         """Test that TransformError inherits from SlackGFMError."""
         exc = TransformError("Transform failed")
 
         assert isinstance(exc, SlackGFMError)
         assert isinstance(exc, TransformError)
 
-    def test_transform_error_with_visitor_context(self):
+    def test_transform_error_with_visitor_context(self) -> None:
         """Test TransformError with visitor context."""
         context = {
             "visitor": "MyCustomVisitor",
@@ -165,7 +165,7 @@ class TestTransformError:
         assert "Text" in str(exc)
         assert "oops" in str(exc)
 
-    def test_catch_specific_transform_error(self):
+    def test_catch_specific_transform_error(self) -> None:
         """Test catching specific TransformError."""
         with pytest.raises(TransformError):
             raise TransformError("Transformation failed")
@@ -174,7 +174,7 @@ class TestTransformError:
 class TestExceptionHierarchy:
     """Test exception hierarchy and catching."""
 
-    def test_catch_all_library_exceptions(self):
+    def test_catch_all_library_exceptions(self) -> None:
         """Test catching all library exceptions with base class."""
         exceptions = [
             ParseError("parse"),
@@ -187,16 +187,16 @@ class TestExceptionHierarchy:
             with pytest.raises(SlackGFMError):
                 raise exc
 
-    def test_exception_types_are_distinct(self):
+    def test_exception_types_are_distinct(self) -> None:
         """Test that exception types are distinguishable."""
         parse_exc = ParseError("parse")
         render_exc = RenderError("render")
 
-        assert type(parse_exc) is not type(render_exc)
+        assert type(parse_exc) is not type(render_exc)  # type: ignore[comparison-overlap]
         assert isinstance(parse_exc, ParseError)
         assert not isinstance(parse_exc, RenderError)
 
-    def test_selective_exception_catching(self):
+    def test_selective_exception_catching(self) -> None:
         """Test catching specific exception types."""
 
         def might_fail(error_type: str) -> None:
@@ -216,20 +216,20 @@ class TestExceptionHierarchy:
 class TestExceptionUsagePatterns:
     """Test realistic exception usage patterns."""
 
-    def test_exception_with_empty_context(self):
+    def test_exception_with_empty_context(self) -> None:
         """Test that empty context dict works correctly."""
         exc = SlackGFMError("error", context={})
 
         assert exc.context == {}
         assert str(exc) == "error"
 
-    def test_exception_with_none_context(self):
+    def test_exception_with_none_context(self) -> None:
         """Test that None context becomes empty dict."""
         exc = SlackGFMError("error", context=None)
 
         assert exc.context == {}
 
-    def test_exception_with_complex_context(self):
+    def test_exception_with_complex_context(self) -> None:
         """Test exception with complex nested context."""
         context = {
             "input": {"type": "rich_text", "elements": [...]},
@@ -242,7 +242,7 @@ class TestExceptionUsagePatterns:
         assert "input" in exc.context
         assert exc.context["error_location"]["line"] == 5
 
-    def test_re_raising_with_additional_context(self):
+    def test_re_raising_with_additional_context(self) -> None:
         """Test re-raising exception with additional context."""
         try:
             raise ParseError("Inner error", context={"level": "inner"})
diff --git a/tests/test_issue_fixes.py b/tests/test_issue_fixes.py
index 49790f1..c688a56 100644
--- a/tests/test_issue_fixes.py
+++ b/tests/test_issue_fixes.py
@@ -18,7 +18,7 @@ class TestIssue02:
     Actual: ```no newlines```\n```  (WRONG - extra newline + ```)
     """
 
-    def test_inline_code_block_no_newlines(self):
+    def test_inline_code_block_no_newlines(self) -> None:
         """Test code block on single line without newlines."""
         mrkdwn = "```no newlines```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -42,7 +42,7 @@ class TestIssue05:
     Actual: ```no newline at start\n\n```  (WRONG - extra newline)
     """
 
-    def test_code_block_content_on_opening_line(self):
+    def test_code_block_content_on_opening_line(self) -> None:
         """Test code block with content on same line as opening ```."""
         mrkdwn = "```no newline at start\n```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -68,7 +68,7 @@ class TestIssue06:
            (WRONG - missing newline after opening ```)
     """
 
-    def test_multiline_code_block_no_newline_after_opening(self):
+    def test_multiline_code_block_no_newline_after_opening(self) -> None:
         """Test multiline code block with content starting on opening line."""
         mrkdwn = "```no newline at start\nor at the end\nthe code block includes newlines though```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -98,7 +98,7 @@ class TestIssue07:
     Actual: ```\n<https://example.com>\n```  (WRONG - brackets not removed)
     """
 
-    def test_angle_brackets_removed_in_code_blocks(self):
+    def test_angle_brackets_removed_in_code_blocks(self) -> None:
         """Test that angle brackets around URLs are removed in code blocks."""
         mrkdwn = "```\n<https://example.com>\n```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -111,7 +111,7 @@ class TestIssue07:
         assert "<" not in result, "Should not contain < in code block"
         assert ">" not in result, "Should not contain > in code block"
 
-    def test_angle_brackets_with_multiple_urls(self):
+    def test_angle_brackets_with_multiple_urls(self) -> None:
         """Test multiple URLs with angle brackets in same code block."""
         mrkdwn = "```\n<https://api.example.com>\n<https://docs.example.com>\n```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -122,7 +122,7 @@ class TestIssue07:
         assert "<" not in result
         assert ">" not in result
 
-    def test_angle_brackets_not_around_urls(self):
+    def test_angle_brackets_not_around_urls(self) -> None:
         """Test angle brackets that aren't around URLs (should be kept)."""
         mrkdwn = "```\nif (x > 5 && y < 10) {}\n```"
         result = mrkdwn_to_gfm(mrkdwn)
@@ -143,7 +143,7 @@ class TestIssue08:
     Actual RT:   {"type": "text", "text": "xyz\n"}  (WRONG - extra \n)
     """
 
-    def test_gfm_to_rich_text_no_trailing_newline(self):
+    def test_gfm_to_rich_text_no_trailing_newline(self) -> None:
         """Test that code block content doesn't gain trailing newline."""
         gfm = "```\nxyz\n```"
         result = gfm_to_rich_text(gfm)
@@ -163,7 +163,7 @@ class TestIssue08:
         assert text_elem["text"] == "xyz", f"Expected 'xyz', got {repr(text_elem['text'])}"
         assert not text_elem["text"].endswith("\n"), "Text should not end with newline"
 
-    def test_gfm_to_rich_text_multiline_no_extra_newline(self):
+    def test_gfm_to_rich_text_multiline_no_extra_newline(self) -> None:
         """Test multiline code block doesn't add extra trailing newline."""
         gfm = "```\nline1\nline2\nline3\n```"
         result = gfm_to_rich_text(gfm)
@@ -180,7 +180,7 @@ class TestIssue08:
             f"Should have 2 newlines, got {text_elem['text'].count(chr(10))}"
         )
 
-    def test_gfm_to_rich_text_empty_code_block(self):
+    def test_gfm_to_rich_text_empty_code_block(self) -> None:
         """Test empty code block edge case."""
         gfm = "```\n\n```"
         result = gfm_to_rich_text(gfm)
@@ -196,7 +196,7 @@ class TestIssue08:
 class TestCodeBlockRoundTrip:
     """Test that code blocks can round-trip through conversions without data loss."""
 
-    def test_simple_code_block_roundtrip_mrkdwn_gfm_richtext(self):
+    def test_simple_code_block_roundtrip_mrkdwn_gfm_richtext(self) -> None:
         """Test mrkdwn → GFM → Rich Text → GFM preserves content.
 
         Note: Slack's Rich Text format strips trailing newlines from code blocks,
@@ -220,7 +220,7 @@ class TestCodeBlockRoundTrip:
         # After normalization, should be inline format (no trailing newlines in Rich Text)
         assert gfm_roundtrip == "```hello world```"
 
-    def test_code_block_with_special_chars_roundtrip(self):
+    def test_code_block_with_special_chars_roundtrip(self) -> None:
         """Test code block with special characters preserves them exactly."""
         original_mrkdwn = "```\nversion: 3.0.202\nhost: 10.64.64.98\npattern: test.*regex\n```"
 
diff --git a/tests/test_parsers.py b/tests/test_parsers.py
index 8816112..0c6af52 100644
--- a/tests/test_parsers.py
+++ b/tests/test_parsers.py
@@ -1,5 +1,7 @@
 """Comprehensive parser tests."""
 
+from typing import cast
+
 from slack_gfm.ast import (
     Bold,
     Broadcast,
@@ -24,7 +26,7 @@ from slack_gfm.renderers import render_gfm
 class TestGFMParser:
     """Test GFM parser."""
 
-    def test_parse_headings(self):
+    def test_parse_headings(self) -> None:
         """Test heading parsing."""
         ast = parse_gfm("# Heading 1\n## Heading 2")
         assert len(ast.children) == 2
@@ -33,7 +35,7 @@ class TestGFMParser:
         assert isinstance(ast.children[1], Heading)
         assert ast.children[1].level == 2
 
-    def test_parse_code_block(self):
+    def test_parse_code_block(self) -> None:
         """Test code block parsing."""
         ast = parse_gfm("```python\nprint('hello')\n```")
         assert len(ast.children) == 1
@@ -41,7 +43,7 @@ class TestGFMParser:
         assert ast.children[0].language == "python"
         assert "print('hello')" in ast.children[0].content
 
-    def test_parse_list(self):
+    def test_parse_list(self) -> None:
         """Test list parsing."""
         ast = parse_gfm("- Item 1\n- Item 2")
         assert len(ast.children) == 1
@@ -49,124 +51,124 @@ class TestGFMParser:
         assert not ast.children[0].ordered
         assert len(ast.children[0].children) == 2
 
-    def test_parse_ordered_list(self):
+    def test_parse_ordered_list(self) -> None:
         """Test ordered list parsing."""
         ast = parse_gfm("1. First\n2. Second")
         assert len(ast.children) == 1
         assert isinstance(ast.children[0], List)
         assert ast.children[0].ordered
 
-    def test_parse_blockquote(self):
+    def test_parse_blockquote(self) -> None:
         """Test blockquote parsing."""
         ast = parse_gfm("> This is a quote")
         assert len(ast.children) == 1
         assert isinstance(ast.children[0], Quote)
 
-    def test_parse_slack_user_url(self):
+    def test_parse_slack_user_url(self) -> None:
         """Test parsing slack:// user URL."""
         ast = parse_gfm("[@john](slack://user?id=U123&name=john)")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], UserMention)
         assert para.children[0].user_id == "U123"
         assert para.children[0].username == "john"
 
-    def test_parse_slack_channel_url(self):
+    def test_parse_slack_channel_url(self) -> None:
         """Test parsing slack:// channel URL."""
         ast = parse_gfm("[#general](slack://channel?id=C123&name=general)")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], ChannelMention)
         assert para.children[0].channel_id == "C123"
         assert para.children[0].channel_name == "general"
 
-    def test_parse_slack_broadcast_url(self):
+    def test_parse_slack_broadcast_url(self) -> None:
         """Test parsing slack:// broadcast URL."""
         ast = parse_gfm("[@here](slack://broadcast?type=here)")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Broadcast)
         assert para.children[0].range == "here"
 
-    def test_parse_slack_usergroup_url(self):
+    def test_parse_slack_usergroup_url(self) -> None:
         """Test parsing slack:// usergroup URL."""
         ast = parse_gfm("[@engineers](slack://usergroup?id=S123&name=engineers)")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], UsergroupMention)
 
 
 class TestMrkdwnParser:
     """Test mrkdwn parser."""
 
-    def test_parse_bold(self):
+    def test_parse_bold(self) -> None:
         """Test bold parsing."""
         ast = parse_mrkdwn("*bold text*")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Bold)
 
-    def test_parse_italic(self):
+    def test_parse_italic(self) -> None:
         """Test italic parsing."""
         ast = parse_mrkdwn("_italic text_")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Italic)
 
-    def test_parse_strikethrough(self):
+    def test_parse_strikethrough(self) -> None:
         """Test strikethrough parsing."""
         ast = parse_mrkdwn("~strike~")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Strikethrough)
 
-    def test_parse_code(self):
+    def test_parse_code(self) -> None:
         """Test inline code parsing."""
         ast = parse_mrkdwn("`code`")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Code)
 
-    def test_parse_code_block(self):
+    def test_parse_code_block(self) -> None:
         """Test code block parsing."""
         ast = parse_mrkdwn("```\ncode block\n```")
         assert isinstance(ast.children[0], CodeBlock)
 
-    def test_parse_user_mention(self):
+    def test_parse_user_mention(self) -> None:
         """Test user mention parsing."""
         ast = parse_mrkdwn("<@U123|john>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], UserMention)
         assert para.children[0].user_id == "U123"
         assert para.children[0].username == "john"
 
-    def test_parse_user_mention_no_name(self):
+    def test_parse_user_mention_no_name(self) -> None:
         """Test user mention without name."""
         ast = parse_mrkdwn("<@U123>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], UserMention)
         assert para.children[0].user_id == "U123"
 
-    def test_parse_channel_mention(self):
+    def test_parse_channel_mention(self) -> None:
         """Test channel mention parsing."""
         ast = parse_mrkdwn("<#C123|general>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], ChannelMention)
         assert para.children[0].channel_id == "C123"
 
-    def test_parse_link(self):
+    def test_parse_link(self) -> None:
         """Test link parsing."""
         ast = parse_mrkdwn("<https://example.com|Example>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Link)
         assert para.children[0].url == "https://example.com"
 
-    def test_parse_link_no_text(self):
+    def test_parse_link_no_text(self) -> None:
         """Test link without text."""
         ast = parse_mrkdwn("<https://example.com>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Link)
 
-    def test_parse_broadcast(self):
+    def test_parse_broadcast(self) -> None:
         """Test broadcast parsing."""
         ast = parse_mrkdwn("<!here>")
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Broadcast)
         assert para.children[0].range == "here"
 
-    def test_parse_blockquote(self):
+    def test_parse_blockquote(self) -> None:
         """Test blockquote parsing.
 
         Note: Slack mrkdwn uses &gt; (HTML entity) for blockquotes, not plain >.
@@ -174,7 +176,7 @@ class TestMrkdwnParser:
         ast = parse_mrkdwn("&gt; quote text")
         assert isinstance(ast.children[0], Quote)
 
-    def test_parse_list(self):
+    def test_parse_list(self) -> None:
         """Test list parsing.
 
         Slack mrkdwn DOES recognize bullet lists using • character.
@@ -188,7 +190,7 @@ class TestMrkdwnParser:
 class TestRichTextParser:
     """Test Rich Text parser."""
 
-    def test_parse_simple_section(self):
+    def test_parse_simple_section(self) -> None:
         """Test simple section parsing."""
         rich_text = {
             "type": "rich_text",
@@ -201,11 +203,11 @@ class TestRichTextParser:
         }
         ast = parse_rich_text(rich_text)
         assert len(ast.children) == 1
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Text)
         assert para.children[0].content == "Hello"
 
-    def test_parse_styled_text(self):
+    def test_parse_styled_text(self) -> None:
         """Test styled text parsing."""
         rich_text = {
             "type": "rich_text",
@@ -225,12 +227,12 @@ class TestRichTextParser:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Bold)
         assert isinstance(para.children[1], Italic)
         assert isinstance(para.children[2], Strikethrough)
 
-    def test_parse_list(self):
+    def test_parse_list(self) -> None:
         """Test list parsing."""
         rich_text = {
             "type": "rich_text",
@@ -251,7 +253,7 @@ class TestRichTextParser:
         assert isinstance(ast.children[0], List)
         assert not ast.children[0].ordered
 
-    def test_parse_code_block(self):
+    def test_parse_code_block(self) -> None:
         """Test code block parsing."""
         rich_text = {
             "type": "rich_text",
@@ -265,7 +267,7 @@ class TestRichTextParser:
         ast = parse_rich_text(rich_text)
         assert isinstance(ast.children[0], CodeBlock)
 
-    def test_parse_quote(self):
+    def test_parse_quote(self) -> None:
         """Test quote parsing."""
         rich_text = {
             "type": "rich_text",
@@ -279,7 +281,7 @@ class TestRichTextParser:
         ast = parse_rich_text(rich_text)
         assert isinstance(ast.children[0], Quote)
 
-    def test_parse_user_mention(self):
+    def test_parse_user_mention(self) -> None:
         """Test user mention parsing."""
         rich_text = {
             "type": "rich_text",
@@ -291,10 +293,10 @@ class TestRichTextParser:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], UserMention)
 
-    def test_parse_channel_mention(self):
+    def test_parse_channel_mention(self) -> None:
         """Test channel mention parsing."""
         rich_text = {
             "type": "rich_text",
@@ -306,10 +308,10 @@ class TestRichTextParser:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], ChannelMention)
 
-    def test_parse_broadcast(self):
+    def test_parse_broadcast(self) -> None:
         """Test broadcast parsing."""
         rich_text = {
             "type": "rich_text",
@@ -321,10 +323,10 @@ class TestRichTextParser:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Broadcast)
 
-    def test_parse_link(self):
+    def test_parse_link(self) -> None:
         """Test link parsing."""
         rich_text = {
             "type": "rich_text",
@@ -342,10 +344,10 @@ class TestRichTextParser:
             ],
         }
         ast = parse_rich_text(rich_text)
-        para = ast.children[0]
+        para = cast(Paragraph, ast.children[0])
         assert isinstance(para.children[0], Link)
 
-    def test_parse_elements_array(self):
+    def test_parse_elements_array(self) -> None:
         """Test parsing elements array directly."""
         elements = [
             {
@@ -360,7 +362,7 @@ class TestRichTextParser:
 class TestMrkdwnCodeBlockEdgeCases:
     """Test mrkdwn code block parsing edge cases that cause escaping bugs."""
 
-    def test_code_block_with_closing_backticks_on_content_line(self):
+    def test_code_block_with_closing_backticks_on_content_line(self) -> None:
         """Test code block where closing ``` is on same line as content."""
         mrkdwn = """```
 line 1
@@ -373,7 +375,7 @@ line 2```"""
         assert "line 1" in ast.children[0].content
         assert "line 2" in ast.children[0].content
 
-    def test_code_block_with_very_long_line_ending_with_backticks(self):
+    def test_code_block_with_very_long_line_ending_with_backticks(self) -> None:
         """Test code block with very long line ending with ```."""
         # Simulate the real-world case: long JSON line ending with ```
         long_content = "x" * 1000 + " ending"
@@ -386,7 +388,7 @@ line 2```"""
         assert isinstance(ast.children[0], CodeBlock)
         assert long_content in ast.children[0].content
 
-    def test_code_block_with_special_chars_not_escaped(self):
+    def test_code_block_with_special_chars_not_escaped(self) -> None:
         """Test that special chars in code blocks are NOT escaped."""
         mrkdwn = """```
 version: 3.0.202
@@ -405,7 +407,7 @@ math: (a+b)*c
         assert r"test\.\*regex" not in gfm
         assert r"\(a\+b\)" not in gfm
 
-    def test_code_block_with_backslash_n_not_doubled(self):
+    def test_code_block_with_backslash_n_not_doubled(self) -> None:
         """Test that literal backslash-n sequences are not doubled."""
         mrkdwn = r"""```
 "debug": "Line 1\nLine 2\nLine 3"
@@ -419,7 +421,7 @@ math: (a+b)*c
         # Count \n sequences - should be 2, not 4 (which would mean doubling)
         assert gfm.count(r"\n") == 2
 
-    def test_code_block_json_with_escapes_ending_with_backticks(self):
+    def test_code_block_json_with_escapes_ending_with_backticks(self) -> None:
         """Test realistic JSON code block ending with ``` on content line."""
         mrkdwn = r"""```{
   "message": "Exception occurred",
@@ -442,7 +444,7 @@ math: (a+b)*c
         # Backslash-n should not be doubled (2 \n in input = 2 \n in output)
         assert gfm.count(r"\n") == 2
 
-    def test_multiple_code_blocks_with_mixed_formats(self):
+    def test_multiple_code_blocks_with_mixed_formats(self) -> None:
         """Test multiple code blocks with various closing styles."""
         mrkdwn = """First paragraph
 
@@ -479,7 +481,7 @@ class TestRichTextPreformattedInlineElements:
     channel, date, broadcast, and color.
     """
 
-    def test_preformatted_with_link(self):
+    def test_preformatted_with_link(self) -> None:
         """Test link element in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -502,7 +504,7 @@ class TestRichTextPreformattedInlineElements:
         assert "curl -X GET" in code_block.content
         assert "Accept: application/json" in code_block.content
 
-    def test_preformatted_with_user_mention(self):
+    def test_preformatted_with_user_mention(self) -> None:
         """Test user mention in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -524,7 +526,7 @@ class TestRichTextPreformattedInlineElements:
         assert "U123ABC" in code_block.content or "@U123ABC" in code_block.content
         assert "Author:" in code_block.content
 
-    def test_preformatted_with_channel_mention(self):
+    def test_preformatted_with_channel_mention(self) -> None:
         """Test channel mention in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -546,7 +548,7 @@ class TestRichTextPreformattedInlineElements:
         assert "C123XYZ" in code_block.content or "#C123XYZ" in code_block.content
         assert "Post to" in code_block.content
 
-    def test_preformatted_with_usergroup_mention(self):
+    def test_preformatted_with_usergroup_mention(self) -> None:
         """Test usergroup mention in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -568,7 +570,7 @@ class TestRichTextPreformattedInlineElements:
         assert "S123DEF" in code_block.content or "@S123DEF" in code_block.content
         assert "CC:" in code_block.content
 
-    def test_preformatted_with_emoji(self):
+    def test_preformatted_with_emoji(self) -> None:
         """Test emoji in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -590,7 +592,7 @@ class TestRichTextPreformattedInlineElements:
         assert "✅" in code_block.content or "white_check_mark" in code_block.content
         assert "Status:" in code_block.content
 
-    def test_preformatted_with_broadcast(self):
+    def test_preformatted_with_broadcast(self) -> None:
         """Test broadcast in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -612,7 +614,7 @@ class TestRichTextPreformattedInlineElements:
         assert "here" in code_block.content or "@here" in code_block.content
         assert "Notify:" in code_block.content
 
-    def test_preformatted_with_date(self):
+    def test_preformatted_with_date(self) -> None:
         """Test date timestamp in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -638,7 +640,7 @@ class TestRichTextPreformattedInlineElements:
         assert "1704067200" in code_block.content or "Jan 1, 2024" in code_block.content
         assert "Deployed at:" in code_block.content
 
-    def test_preformatted_with_multiple_links(self):
+    def test_preformatted_with_multiple_links(self) -> None:
         """Test multiple links in preformatted block."""
         rich_text = {
             "type": "rich_text",
@@ -660,7 +662,7 @@ class TestRichTextPreformattedInlineElements:
         assert "https://api.example.com" in code_block.content
         assert "https://docs.example.com" in code_block.content
 
-    def test_preformatted_roundtrip_with_link(self):
+    def test_preformatted_roundtrip_with_link(self) -> None:
         """Test that preformatted blocks with links can round-trip through GFM."""
         rich_text = {
             "type": "rich_text",
diff --git a/tests/test_real_world_cases.py b/tests/test_real_world_cases.py
index 26daa25..ad306fd 100644
--- a/tests/test_real_world_cases.py
+++ b/tests/test_real_world_cases.py
@@ -8,6 +8,7 @@ Test naming convention: test_case_NNN_description
 
 import json
 from pathlib import Path
+from typing import Any
 
 import pytest
 
@@ -15,7 +16,7 @@ import pytest
 TEST_CASES_DIR = Path(__file__).parent.parent / ".test-cases"
 
 
-def load_test_case(case_num: int) -> tuple[dict, str, str]:
+def load_test_case(case_num: int) -> tuple[dict[str, Any], str, str]:
     """Load a test case's data files.
 
     Returns:
@@ -67,7 +68,7 @@ def normalize_whitespace(text: str) -> str:
 class TestBasicFormatting:
     """Test cases 001-009: Basic inline formatting."""
 
-    def test_case_001_plain_text(self):
+    def test_case_001_plain_text(self) -> None:
         """Plain text with no formatting."""
         rich_text, mrkdwn, desc = load_test_case(1)
 
@@ -82,7 +83,7 @@ class TestBasicFormatting:
         assert gfm_from_rich == "text"
         assert gfm_from_mrkdwn == "text"
 
-    def test_case_002_bold(self):
+    def test_case_002_bold(self) -> None:
         """Bold text."""
         rich_text, mrkdwn, desc = load_test_case(2)
 
@@ -96,7 +97,7 @@ class TestBasicFormatting:
         assert "**bold**" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_003_italic(self):
+    def test_case_003_italic(self) -> None:
         """Italic text."""
         rich_text, mrkdwn, desc = load_test_case(3)
 
@@ -108,7 +109,7 @@ class TestBasicFormatting:
         assert "*italic*" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_004_strikethrough(self):
+    def test_case_004_strikethrough(self) -> None:
         """Strikethrough text."""
         rich_text, mrkdwn, desc = load_test_case(4)
 
@@ -120,7 +121,7 @@ class TestBasicFormatting:
         assert "~~strikethrough~~" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_005_bold_italic(self):
+    def test_case_005_bold_italic(self) -> None:
         """Combined bold and italic."""
         rich_text, mrkdwn, desc = load_test_case(5)
 
@@ -135,7 +136,7 @@ class TestBasicFormatting:
         assert "*" in gfm_from_rich.replace("**", "")  # Has italic markers (after removing bold)
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_006_bold_strikethrough(self):
+    def test_case_006_bold_strikethrough(self) -> None:
         """Combined bold and strikethrough."""
         rich_text, mrkdwn, desc = load_test_case(6)
 
@@ -148,7 +149,7 @@ class TestBasicFormatting:
         assert "~~" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_007_strikethrough_italic(self):
+    def test_case_007_strikethrough_italic(self) -> None:
         """Combined strikethrough and italic."""
         rich_text, mrkdwn, desc = load_test_case(7)
 
@@ -161,7 +162,7 @@ class TestBasicFormatting:
         assert "*" in gfm_from_rich.replace("~~", "")  # Has italic after removing strikethrough
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_008_bold_strikethrough_italic(self):
+    def test_case_008_bold_strikethrough_italic(self) -> None:
         """All three: bold, strikethrough, and italic combined."""
         rich_text, mrkdwn, desc = load_test_case(8)
 
@@ -177,7 +178,7 @@ class TestBasicFormatting:
         assert "*" in cleaned
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_009_inline_code(self):
+    def test_case_009_inline_code(self) -> None:
         """Inline code formatting."""
         rich_text, mrkdwn, desc = load_test_case(9)
 
@@ -198,7 +199,7 @@ class TestBasicFormatting:
 class TestCombinedFormatting:
     """Test cases 010-013: Complex combinations of formatting."""
 
-    def test_case_010_bold_code(self):
+    def test_case_010_bold_code(self) -> None:
         """Bold text with code formatting."""
         rich_text, mrkdwn, desc = load_test_case(10)
 
@@ -212,7 +213,7 @@ class TestCombinedFormatting:
         assert "`" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_011_italic_code(self):
+    def test_case_011_italic_code(self) -> None:
         """Italic text with code formatting."""
         rich_text, mrkdwn, desc = load_test_case(11)
 
@@ -225,7 +226,7 @@ class TestCombinedFormatting:
         assert "`" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_012_strikethrough_italic_bold_code(self):
+    def test_case_012_strikethrough_italic_bold_code(self) -> None:
         """All four styles combined."""
         rich_text, mrkdwn, desc = load_test_case(12)
 
@@ -238,7 +239,7 @@ class TestCombinedFormatting:
         assert "`" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_013_mixed_inline_markup(self):
+    def test_case_013_mixed_inline_markup(self) -> None:
         """Complex text with gradually adding/removing styles.
 
         Pattern: a _italic b ~strikethrough c *bold d `code` e* f~ g_ h
@@ -282,7 +283,7 @@ class TestMultilineContent:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_014_many_lines_with_styles(self):
+    def test_case_014_many_lines_with_styles(self) -> None:
         """Multiple lines with different formatting on each."""
         rich_text, mrkdwn, desc = load_test_case(14)
 
@@ -305,7 +306,7 @@ class TestMultilineContent:
 class TestLinks:
     """Test cases 015-016: Link formatting."""
 
-    def test_case_015_simple_link(self):
+    def test_case_015_simple_link(self) -> None:
         """Link without custom text (bare URL)."""
         rich_text, mrkdwn, desc = load_test_case(15)
 
@@ -322,7 +323,7 @@ class TestLinks:
         # GFM format: [http://example.com](http://example.com) or <http://example.com>
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_016_link_with_text(self):
+    def test_case_016_link_with_text(self) -> None:
         """Link with custom display text."""
         rich_text, mrkdwn, desc = load_test_case(16)
 
@@ -347,7 +348,7 @@ class TestLinks:
 class TestLists:
     """Test cases 017-019: List formatting."""
 
-    def test_case_017_ordered_list(self):
+    def test_case_017_ordered_list(self) -> None:
         """Numbered/ordered list."""
         rich_text, mrkdwn, desc = load_test_case(17)
 
@@ -360,7 +361,7 @@ class TestLists:
         assert "1." in gfm_from_rich or "1)" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_018_unordered_list(self):
+    def test_case_018_unordered_list(self) -> None:
         """Bullet/unordered list."""
         rich_text, mrkdwn, desc = load_test_case(18)
 
@@ -373,7 +374,7 @@ class TestLists:
         assert "*" in gfm_from_rich or "-" in gfm_from_rich or "•" in gfm_from_rich
         assert gfm_from_rich == gfm_from_mrkdwn
 
-    def test_case_019_nested_lists_not_supported(self):
+    def test_case_019_nested_lists_not_supported(self) -> None:
         """Nested lists are not supported in Slack rich text.
 
         This test documents that nested lists don't exist in Slack's rich text format.
@@ -397,7 +398,7 @@ class TestLists:
 class TestCodeBlocks:
     """Test case 020: Preformatted blocks."""
 
-    def test_case_020_preformatted_block_with_literals(self):
+    def test_case_020_preformatted_block_with_literals(self) -> None:
         """Preformatted block preserves literal text without parsing.
 
         Critical test case! Demonstrates:
@@ -444,7 +445,7 @@ class TestCodeBlocks:
 class TestQuotes:
     """Test cases 021-024: Blockquote formatting."""
 
-    def test_case_021_quote_basic(self):
+    def test_case_021_quote_basic(self) -> None:
         """Basic blockquote.
 
         Screenshot shows text with vertical bar on left (quote indicator).
@@ -465,7 +466,7 @@ class TestQuotes:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_022_quote_with_styles(self):
+    def test_case_022_quote_with_styles(self) -> None:
         """Blockquote containing formatted text."""
         rich_text, mrkdwn, desc = load_test_case(22)
 
@@ -484,7 +485,7 @@ class TestQuotes:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_023_quote_with_lists(self):
+    def test_case_023_quote_with_lists(self) -> None:
         """Blockquote containing lists."""
         rich_text, mrkdwn, desc = load_test_case(23)
 
@@ -502,7 +503,7 @@ class TestQuotes:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_024_quote_with_preformatted(self):
+    def test_case_024_quote_with_preformatted(self) -> None:
         """Blockquote containing a code block."""
         rich_text, mrkdwn, desc = load_test_case(24)
 
@@ -531,7 +532,7 @@ class TestMentions:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_025_mentions(self):
+    def test_case_025_mentions(self) -> None:
         """User mention, channel mention, and broadcast.
 
         Screenshot shows:
@@ -570,7 +571,7 @@ class TestMentions:
         "mrkdwn converts single newlines to spaces per Markdown convention. "
         "This doesn't affect rendered output."
     )
-    def test_case_026_invalid_mentions(self):
+    def test_case_026_invalid_mentions(self) -> None:
         """Mentions where user/channel don't exist.
 
         Tests how library handles invalid IDs.
@@ -586,7 +587,7 @@ class TestMentions:
         # Normalize whitespace (rich_text preserves embedded newlines)
         assert normalize_whitespace(gfm_from_rich) == normalize_whitespace(gfm_from_mrkdwn)
 
-    def test_case_027_mentions_in_preformatted_not_translated(self):
+    def test_case_027_mentions_in_preformatted_not_translated(self) -> None:
         """Mentions inside code blocks are literal text, not parsed."""
         rich_text, mrkdwn, desc = load_test_case(27)
 
@@ -609,7 +610,7 @@ class TestRoundTrip:
     """Verify lossless round-trip conversions."""
 
     @pytest.mark.parametrize("case_num", range(1, 28))
-    def test_round_trip_rich_text_to_gfm_and_back(self, case_num):
+    def test_round_trip_rich_text_to_gfm_and_back(self, case_num: int) -> None:
         """Test: Rich Text → GFM → Rich Text preserves data."""
         try:
             rich_text_original, _, _ = load_test_case(case_num)
@@ -630,7 +631,7 @@ class TestRoundTrip:
         assert "elements" in rich_text_roundtrip
 
     @pytest.mark.parametrize("case_num", range(1, 28))
-    def test_consistency_rich_text_and_mrkdwn_produce_same_gfm(self, case_num):
+    def test_consistency_rich_text_and_mrkdwn_produce_same_gfm(self, case_num: int) -> None:
         """Verify rich_text and mrkdwn inputs produce identical GFM output.
 
         Note: We normalize whitespace for comparison because rich_text and mrkdwn
diff --git a/tests/test_renderers.py b/tests/test_renderers.py
index ab902f6..5fc5a66 100644
--- a/tests/test_renderers.py
+++ b/tests/test_renderers.py
@@ -26,25 +26,25 @@ from slack_gfm.renderers import render_gfm, render_rich_text
 class TestGFMRenderer:
     """Test GFM renderer."""
 
-    def test_render_paragraph(self):
+    def test_render_paragraph(self) -> None:
         """Test paragraph rendering."""
         doc = Document(children=[Paragraph(children=[Text(content="Hello")])])
         result = render_gfm(doc)
         assert result == "Hello"
 
-    def test_render_bold(self):
+    def test_render_bold(self) -> None:
         """Test bold rendering."""
         doc = Document(children=[Paragraph(children=[Bold(children=[Text(content="bold")])])])
         result = render_gfm(doc)
         assert "**bold**" in result
 
-    def test_render_italic(self):
+    def test_render_italic(self) -> None:
         """Test italic rendering."""
         doc = Document(children=[Paragraph(children=[Italic(children=[Text(content="italic")])])])
         result = render_gfm(doc)
         assert "*italic*" in result
 
-    def test_render_strikethrough(self):
+    def test_render_strikethrough(self) -> None:
         """Test strikethrough rendering."""
         doc = Document(
             children=[Paragraph(children=[Strikethrough(children=[Text(content="strike")])])]
@@ -52,26 +52,26 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "~~strike~~" in result
 
-    def test_render_code(self):
+    def test_render_code(self) -> None:
         """Test inline code rendering."""
         doc = Document(children=[Paragraph(children=[Code(content="code")])])
         result = render_gfm(doc)
         assert "`code`" in result
 
-    def test_render_heading(self):
+    def test_render_heading(self) -> None:
         """Test heading rendering."""
         doc = Document(children=[Heading(level=1, children=[Text(content="Title")])])
         result = render_gfm(doc)
         assert result == "# Title"
 
-    def test_render_code_block(self):
+    def test_render_code_block(self) -> None:
         """Test code block rendering."""
         doc = Document(children=[CodeBlock(content="print('hello')", language="python")])
         result = render_gfm(doc)
         assert "```python" in result
         assert "print('hello')" in result
 
-    def test_render_code_block_no_language(self):
+    def test_render_code_block_no_language(self) -> None:
         """Test code block without language.
 
         Code blocks with no newlines render as inline format for round-trip consistency.
@@ -80,7 +80,7 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "```code```" in result
 
-    def test_render_list(self):
+    def test_render_list(self) -> None:
         """Test list rendering."""
         doc = Document(
             children=[
@@ -97,7 +97,7 @@ class TestGFMRenderer:
         assert "- Item 1" in result
         assert "- Item 2" in result
 
-    def test_render_ordered_list(self):
+    def test_render_ordered_list(self) -> None:
         """Test ordered list rendering."""
         doc = Document(
             children=[
@@ -114,7 +114,7 @@ class TestGFMRenderer:
         assert "1. First" in result
         assert "2. Second" in result
 
-    def test_render_quote(self):
+    def test_render_quote(self) -> None:
         """Test quote rendering."""
         doc = Document(
             children=[Quote(children=[Paragraph(children=[Text(content="quoted text")])])]
@@ -122,7 +122,7 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "> quoted text" in result
 
-    def test_render_link(self):
+    def test_render_link(self) -> None:
         """Test link rendering."""
         doc = Document(
             children=[
@@ -134,7 +134,7 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "[Link](https://example.com)" in result
 
-    def test_render_user_mention(self):
+    def test_render_user_mention(self) -> None:
         """Test user mention rendering."""
         doc = Document(
             children=[Paragraph(children=[UserMention(user_id="U123", username="john")])]
@@ -142,14 +142,14 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "[@john](slack://user?id=U123&name=john)" in result
 
-    def test_render_user_mention_no_name(self):
+    def test_render_user_mention_no_name(self) -> None:
         """Test user mention without username."""
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U123")])])
         result = render_gfm(doc)
         # When no username is provided, just the ID is shown without @
         assert "[U123](slack://user?id=U123)" in result
 
-    def test_render_channel_mention(self):
+    def test_render_channel_mention(self) -> None:
         """Test channel mention rendering."""
         doc = Document(
             children=[
@@ -159,7 +159,7 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "[#general](slack://channel?id=C123&name=general)" in result
 
-    def test_render_usergroup_mention(self):
+    def test_render_usergroup_mention(self) -> None:
         """Test usergroup mention rendering."""
         doc = Document(
             children=[
@@ -171,13 +171,13 @@ class TestGFMRenderer:
         result = render_gfm(doc)
         assert "[@engineers](slack://usergroup?id=S123&name=engineers)" in result
 
-    def test_render_broadcast(self):
+    def test_render_broadcast(self) -> None:
         """Test broadcast rendering."""
         doc = Document(children=[Paragraph(children=[Broadcast(range="here")])])
         result = render_gfm(doc)
         assert "[@here](slack://broadcast?type=here)" in result
 
-    def test_render_horizontal_rule(self):
+    def test_render_horizontal_rule(self) -> None:
         """Test horizontal rule rendering."""
         doc = Document(children=[HorizontalRule()])
         result = render_gfm(doc)
@@ -187,7 +187,7 @@ class TestGFMRenderer:
 class TestRichTextRenderer:
     """Test Rich Text renderer."""
 
-    def test_render_paragraph(self):
+    def test_render_paragraph(self) -> None:
         """Test paragraph rendering."""
         doc = Document(children=[Paragraph(children=[Text(content="Hello")])])
         result = render_rich_text(doc)
@@ -196,21 +196,21 @@ class TestRichTextRenderer:
         assert section["type"] == "rich_text_section"
         assert section["elements"][0]["text"] == "Hello"
 
-    def test_render_bold(self):
+    def test_render_bold(self) -> None:
         """Test bold rendering."""
         doc = Document(children=[Paragraph(children=[Bold(children=[Text(content="bold")])])])
         result = render_rich_text(doc)
         elem = result["elements"][0]["elements"][0]
         assert elem["style"]["bold"] is True
 
-    def test_render_italic(self):
+    def test_render_italic(self) -> None:
         """Test italic rendering."""
         doc = Document(children=[Paragraph(children=[Italic(children=[Text(content="italic")])])])
         result = render_rich_text(doc)
         elem = result["elements"][0]["elements"][0]
         assert elem["style"]["italic"] is True
 
-    def test_render_strikethrough(self):
+    def test_render_strikethrough(self) -> None:
         """Test strikethrough rendering."""
         doc = Document(
             children=[Paragraph(children=[Strikethrough(children=[Text(content="strike")])])]
@@ -219,7 +219,7 @@ class TestRichTextRenderer:
         elem = result["elements"][0]["elements"][0]
         assert elem["style"]["strike"] is True
 
-    def test_render_code(self):
+    def test_render_code(self) -> None:
         """Test inline code rendering."""
         doc = Document(children=[Paragraph(children=[Code(content="code")])])
         result = render_rich_text(doc)
@@ -227,7 +227,7 @@ class TestRichTextRenderer:
         assert elem["type"] == "text"
         assert elem["style"]["code"] is True
 
-    def test_render_code_block(self):
+    def test_render_code_block(self) -> None:
         """Test code block rendering."""
         doc = Document(children=[CodeBlock(content="print('hello')")])
         result = render_rich_text(doc)
@@ -235,7 +235,7 @@ class TestRichTextRenderer:
         assert block["type"] == "rich_text_preformatted"
         assert block["elements"][0]["text"] == "print('hello')"
 
-    def test_render_list(self):
+    def test_render_list(self) -> None:
         """Test list rendering."""
         doc = Document(
             children=[
@@ -250,7 +250,7 @@ class TestRichTextRenderer:
         assert list_elem["type"] == "rich_text_list"
         assert list_elem["style"] == "bullet"
 
-    def test_render_ordered_list(self):
+    def test_render_ordered_list(self) -> None:
         """Test ordered list rendering."""
         doc = Document(
             children=[
@@ -264,14 +264,14 @@ class TestRichTextRenderer:
         list_elem = result["elements"][0]
         assert list_elem["style"] == "ordered"
 
-    def test_render_quote(self):
+    def test_render_quote(self) -> None:
         """Test quote rendering."""
         doc = Document(children=[Quote(children=[Paragraph(children=[Text(content="quoted")])])])
         result = render_rich_text(doc)
         quote = result["elements"][0]
         assert quote["type"] == "rich_text_quote"
 
-    def test_render_user_mention(self):
+    def test_render_user_mention(self) -> None:
         """Test user mention rendering."""
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U123")])])
         result = render_rich_text(doc)
@@ -279,7 +279,7 @@ class TestRichTextRenderer:
         assert elem["type"] == "user"
         assert elem["user_id"] == "U123"
 
-    def test_render_channel_mention(self):
+    def test_render_channel_mention(self) -> None:
         """Test channel mention rendering."""
         doc = Document(children=[Paragraph(children=[ChannelMention(channel_id="C123")])])
         result = render_rich_text(doc)
@@ -287,7 +287,7 @@ class TestRichTextRenderer:
         assert elem["type"] == "channel"
         assert elem["channel_id"] == "C123"
 
-    def test_render_broadcast(self):
+    def test_render_broadcast(self) -> None:
         """Test broadcast rendering."""
         doc = Document(children=[Paragraph(children=[Broadcast(range="here")])])
         result = render_rich_text(doc)
@@ -295,7 +295,7 @@ class TestRichTextRenderer:
         assert elem["type"] == "broadcast"
         assert elem["range"] == "here"
 
-    def test_render_link(self):
+    def test_render_link(self) -> None:
         """Test link rendering."""
         doc = Document(
             children=[
diff --git a/tests/test_transformers.py b/tests/test_transformers.py
index 4351309..c44340b 100644
--- a/tests/test_transformers.py
+++ b/tests/test_transformers.py
@@ -1,5 +1,7 @@
 """Transformer tests."""
 
+from typing import cast
+
 from slack_gfm.ast import (
     ChannelMention,
     Document,
@@ -14,36 +16,36 @@ from slack_gfm.transformers import CallbackMapper, IDMapper, apply_id_mappings
 class TestIDMapper:
     """Test ID mapping transformer."""
 
-    def test_map_user_id(self):
+    def test_map_user_id(self) -> None:
         """Test user ID mapping."""
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U123")])])
         mapper = IDMapper(user_map={"U123": "john"})
-        result = mapper.visit(doc)
-        user = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        user = cast(UserMention, cast(Paragraph, result.children[0]).children[0])
         assert user.username == "john"
 
-    def test_map_channel_id(self):
+    def test_map_channel_id(self) -> None:
         """Test channel ID mapping."""
         doc = Document(children=[Paragraph(children=[ChannelMention(channel_id="C123")])])
         mapper = IDMapper(channel_map={"C123": "general"})
-        result = mapper.visit(doc)
-        channel = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        channel = cast(ChannelMention, cast(Paragraph, result.children[0]).children[0])
         assert channel.channel_name == "general"
 
-    def test_map_usergroup_id(self):
+    def test_map_usergroup_id(self) -> None:
         """Test usergroup ID mapping."""
         doc = Document(children=[Paragraph(children=[UsergroupMention(usergroup_id="S123")])])
         mapper = IDMapper(usergroup_map={"S123": "engineers"})
-        result = mapper.visit(doc)
-        usergroup = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        usergroup = cast(UsergroupMention, cast(Paragraph, result.children[0]).children[0])
         assert usergroup.usergroup_name == "engineers"
 
-    def test_map_missing_id(self):
+    def test_map_missing_id(self) -> None:
         """Test mapping with missing ID."""
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U999")])])
         mapper = IDMapper(user_map={"U123": "john"})
-        result = mapper.visit(doc)
-        user = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        user = cast(UserMention, cast(Paragraph, result.children[0]).children[0])
         # Should keep original ID when not in map
         assert user.user_id == "U999"
 
@@ -51,63 +53,63 @@ class TestIDMapper:
 class TestCallbackMapper:
     """Test callback-based transformer."""
 
-    def test_user_callback(self):
+    def test_user_callback(self) -> None:
         """Test user mention callback."""
         from dataclasses import replace
 
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U123")])])
 
-        def user_mapper(node):
+        def user_mapper(node: UserMention) -> UserMention:
             # Use replace() since nodes are frozen
             return replace(node, username="custom_name")
 
         mapper = CallbackMapper(user_callback=user_mapper)
-        result = mapper.visit(doc)
-        user = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        user = cast(UserMention, cast(Paragraph, result.children[0]).children[0])
         assert user.username == "custom_name"
 
-    def test_channel_callback(self):
+    def test_channel_callback(self) -> None:
         """Test channel mention callback."""
         from dataclasses import replace
 
         doc = Document(children=[Paragraph(children=[ChannelMention(channel_id="C123")])])
 
-        def channel_mapper(node):
+        def channel_mapper(node: ChannelMention) -> ChannelMention:
             # Use replace() since nodes are frozen
             return replace(node, channel_name="custom_channel")
 
         mapper = CallbackMapper(channel_callback=channel_mapper)
-        result = mapper.visit(doc)
-        channel = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        channel = cast(ChannelMention, cast(Paragraph, result.children[0]).children[0])
         assert channel.channel_name == "custom_channel"
 
-    def test_usergroup_callback(self):
+    def test_usergroup_callback(self) -> None:
         """Test usergroup mention callback."""
         from dataclasses import replace
 
         doc = Document(children=[Paragraph(children=[UsergroupMention(usergroup_id="S123")])])
 
-        def usergroup_mapper(node):
+        def usergroup_mapper(node: UsergroupMention) -> UsergroupMention:
             # Use replace() since nodes are frozen
             return replace(node, usergroup_name="custom_group")
 
         mapper = CallbackMapper(usergroup_callback=usergroup_mapper)
-        result = mapper.visit(doc)
-        usergroup = result.children[0].children[0]
+        result = cast(Document, mapper.visit(doc))
+        usergroup = cast(UsergroupMention, cast(Paragraph, result.children[0]).children[0])
         assert usergroup.usergroup_name == "custom_group"
 
 
 class TestApplyIDMappings:
     """Test apply_id_mappings convenience function."""
 
-    def test_apply_user_mapping(self):
+    def test_apply_user_mapping(self) -> None:
         """Test applying user mapping."""
         doc = Document(children=[Paragraph(children=[UserMention(user_id="U123")])])
         result = apply_id_mappings(doc, user_map={"U123": "john"})
-        user = result.children[0].children[0]
+        user = cast(UserMention, cast(Paragraph, result.children[0]).children[0])
         assert user.username == "john"
 
-    def test_apply_all_mappings(self):
+    def test_apply_all_mappings(self) -> None:
         """Test applying all mappings."""
         doc = Document(
             children=[
diff --git a/tests/test_visitor.py b/tests/test_visitor.py
index 0db4214..731e7c4 100644
--- a/tests/test_visitor.py
+++ b/tests/test_visitor.py
@@ -1,5 +1,7 @@
 """AST visitor tests."""
 
+from typing import cast
+
 from slack_gfm.ast import (
     Bold,
     Document,
@@ -14,7 +16,7 @@ from slack_gfm.ast import (
 class TestNodeVisitor:
     """Test NodeVisitor base class."""
 
-    def test_generic_visit(self):
+    def test_generic_visit(self) -> None:
         """Test generic visitor traversal."""
         doc = Document(
             children=[
@@ -23,34 +25,34 @@ class TestNodeVisitor:
             ]
         )
         visitor = NodeVisitor()
-        result = visitor.visit(doc)
+        result = cast(Document, visitor.visit(doc))
         assert len(result.children) == 2
 
-    def test_visit_specific_node(self):
+    def test_visit_specific_node(self) -> None:
         """Test visiting specific node type."""
         from dataclasses import replace
 
         class TextUpperVisitor(NodeVisitor):
-            def visit_text(self, node):
+            def visit_text(self, node: Text) -> Text:
                 # Use replace() since nodes are frozen
                 return replace(node, content=node.content.upper())
 
         doc = Document(children=[Paragraph(children=[Text(content="hello")])])
         visitor = TextUpperVisitor()
-        result = visitor.visit(doc)
-        text = result.children[0].children[0]
+        result = cast(Document, visitor.visit(doc))
+        text = cast(Text, cast(Paragraph, result.children[0]).children[0])
         assert text.content == "HELLO"
 
-    def test_visit_nested_nodes(self):
+    def test_visit_nested_nodes(self) -> None:
         """Test visiting nested nodes."""
         from dataclasses import replace
 
         class BoldTextVisitor(NodeVisitor):
-            def visit_bold(self, node):
+            def visit_bold(self, node: Bold) -> Bold:
                 # Process children - use generic_visit which handles immutability
-                return self.generic_visit(node)
+                return cast(Bold, self.generic_visit(node))
 
-            def visit_text(self, node):
+            def visit_text(self, node: Text) -> Text:
                 if hasattr(node, "content"):
                     # Use replace() since nodes are frozen
                     return replace(node, content=node.content + "!")
@@ -58,36 +60,38 @@ class TestNodeVisitor:
 
         doc = Document(children=[Paragraph(children=[Bold(children=[Text(content="bold")])])])
         visitor = BoldTextVisitor()
-        result = visitor.visit(doc)
-        text = result.children[0].children[0].children[0]
+        result = cast(Document, visitor.visit(doc))
+        para = cast(Paragraph, result.children[0])
+        bold = cast(Bold, para.children[0])
+        text = cast(Text, bold.children[0])
         assert text.content == "bold!"
 
-    def test_transform_ast_function(self):
+    def test_transform_ast_function(self) -> None:
         """Test transform_ast helper function."""
         from dataclasses import replace
 
         class AppendVisitor(NodeVisitor):
-            def visit_text(self, node):
+            def visit_text(self, node: Text) -> Text:
                 # Use replace() since nodes are frozen
                 return replace(node, content=node.content + " transformed")
 
         doc = Document(children=[Paragraph(children=[Text(content="original")])])
-        result = transform_ast(doc, AppendVisitor())
-        text = result.children[0].children[0]
+        result = cast(Document, transform_ast(doc, AppendVisitor()))
+        text = cast(Text, cast(Paragraph, result.children[0]).children[0])
         assert text.content == "original transformed"
 
-    def test_visitor_all_node_types(self):
+    def test_visitor_all_node_types(self) -> None:
         """Test visitor can handle all node types."""
 
         class CountVisitor(NodeVisitor):
-            def __init__(self):
+            def __init__(self) -> None:
                 self.count = 0
 
-            def visit_text(self, node):
+            def visit_text(self, node: Text) -> Text:
                 self.count += 1
                 return node
 
-            def visit_usermention(self, node):
+            def visit_usermention(self, node: UserMention) -> UserMention:
                 self.count += 1
                 return node
 
diff --git a/uv.lock b/uv.lock
index 3b32a5d..879a6f2 100644
--- a/uv.lock
+++ b/uv.lock
@@ -642,7 +642,7 @@ wheels = [
 
 [[package]]
 name = "slack-gfm"
-version = "0.2.0"
+version = "0.2.1"
 source = { editable = "." }
 dependencies = [
     { name = "linkify-it-py" },
