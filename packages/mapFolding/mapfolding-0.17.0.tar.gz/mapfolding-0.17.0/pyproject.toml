[project]
name = "mapFolding"
version = "0.17.0"
description = "Map folding, meanders, stamp folding, semi-meanders. Experiment with algorithm transformations, and analyze computational states."
readme = "README.md"
requires-python = ">=3.12, <3.14"
license = { 'text' = "CC-BY-NC-4.0" }
authors = [{ name = "Hunter Hogan", email = "HunterHogan@pm.me" }]
keywords = [
  "A000136",
  "A000560",
  "A000682",
  "A001010",
  "A001011",
  "A001415",
  "A001416",
  "A001417",
  "A001418",
  "A005315",
  "A005316",
  "A007822",
  "A178961",
  "A195646",
  "A223094",
  "A259702",
  "A301620",
  "AST manipulation",
  "JIT compilation",
  "Numba optimization",
  "OEIS",
  "Python optimization",
  "abstract syntax tree",
  "algorithmic combinatorics",
  "algorithmic optimization",
  "arch configurations",
  "automated code generation",
  "bit-packed arrays",
  "bitwise state machines",
  "cache-efficient algorithms",
  "closed meandric numbers",
  "code generation",
  "code optimization",
  "code synthesis",
  "code transformation",
  "codon optimization",
  "combinatorial computing",
  "combinatorial enumeration",
  "combinatorial geometry",
  "combinatorial mathematics",
  "combinatorial problem solver",
  "combinatorics",
  "computational combinatorics",
  "computational geometry",
  "crossing patterns",
  "curve crossings",
  "dataclass transformation",
  "discrete mathematics",
  "dynamic compilation",
  "enumerative combinatorics",
  "folding pattern enumeration",
  "folding problems",
  "high-performance computing",
  "integer sequences",
  "just-in-time compilation",
  "kernel optimization",
  "labeled stamp folding",
  "low-level computation",
  "map folding",
  "mapFolding",
  "mathematical algorithms",
  "mathematical modeling",
  "mathematical optimization",
  "mathematical patterns",
  "mathematical software",
  "mathematical tool",
  "mathematical visualization",
  "meander enumeration",
  "meanders",
  "meandric systems",
  "memory-efficient enumeration",
  "metaprogramming",
  "numerical algorithms",
  "numerical computation",
  "open meandric systems",
  "paper folding mathematics",
  "parallel computing",
  "pattern recognition",
  "performance optimization",
  "permutation patterns",
  "permutations",
  "post-setup optimization",
  "pyproject",
  "scientific computing",
  "semi-meanders",
  "sequence analysis",
  "sequence calculator",
  "sequence enumeration",
  "sequence explorer",
  "sequence generation",
  "source code analysis",
  "stamp folding",
  "symbolic computation",
  "symmetric foldings",
  "topological combinatorics",
  "topological patterns",
  "typed Python",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Compilers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Pre-processors",
  "Typing :: Typed",
]
urls = { Donate = "https://www.patreon.com/integrated", Homepage = "https://github.com/hunterhogan/mapFolding", Issues = "https://github.com/hunterhogan/mapFolding/issues", Repository = "https://github.com/hunterhogan/mapFolding.git" }
scripts = { OEIS_for_n = "mapFolding.oeis:OEIS_for_n", getOEISids = "mapFolding.oeis:getOEISids" }
dependencies = [
  "astToolkit>=0.9.0",
  "hunterMakesPy>=0.3.0",
  "numpy",
  "platformdirs",
]
optional-dependencies = { development = [
  "ipykernel",
  "ipywidgets",
  "memray; sys_platform == 'linux'",
  "py-spy",
  "setuptools-scm",
], numba = [
  "numba",
  "numba_progress",
], pandas = [
  "ortools",
  "pandas",
  "pyarrow",
  "pyarrow-stubs",
], "sympy" = [
  "sympy",
], testing = [
  "numba",
  "ortools",
  "pandas",
  "pyarrow",
  "pytest-cov",
  "pytest-env",
  "pytest-xdist",
  "pytest",
  "sympy",
] }

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.coverage]
report = { exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":",
  "numba.jit_module",
], ignore_errors = false }
run = { branch = true, concurrency = [
  "multiprocessing",
], data_file = "tests/coverage/.coverage", omit = [
  "easyRun/**",
  "getLLVMforNoReason.py",
  "mapFolding/reference/*",
  "mapFolding/tests/*",
  "zCuzDocStoopid*.py",
  "Z0Z_*",
], parallel = true, source = [
  ".",
] }

[tool.pytest.ini_options]
addopts = ["--color=auto", "-n 4"]
log_auto_indent = true
testpaths = ["mapFolding/tests"]

[tool.pytest_env]
# NUMBA_JIT_COVERAGE = "1" # This does not work, whether it is 0 or 1.
# NUMBA_DISABLE_JIT = "1"

[tool.setuptools]
package-data = { "*" = ["py.typed"] }
packages = { find = {  } }

[tool.updateCitation]
filenameCitationDOTcff = "CITATION.cff"
pathFilenameCitationSSOT = "citations/CITATION.cff"
