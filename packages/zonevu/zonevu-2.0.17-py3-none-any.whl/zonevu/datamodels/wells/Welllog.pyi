from ...datamodels.DataModel import DataModel as DataModel, WellElevationUnitsEnum as WellElevationUnitsEnum
from ...datamodels.Helpers import MakeIsodateOptionalField as MakeIsodateOptionalField
from ...datamodels.wells.Curve import AppMnemonicCodeEnum as AppMnemonicCodeEnum, Curve as Curve
from ...datamodels.wells.CurveGroup import CurveGroup as CurveGroup
from dataclasses import dataclass, field
from datetime import datetime
from strenum import StrEnum

class WellLogTypeEnum(StrEnum):
    Digital = 'Digital'
    Raster = 'Raster'
    Witsml = 'Witsml'
    Frac = 'Frac'

class WellLogIndexTypeEnum(StrEnum):
    Depth = 'Depth'
    Time = 'Time'

@dataclass
class Welllog(DataModel):
    external_id: str | None = ...
    external_source: str | None = ...
    file_name: str | None = ...
    description: str | None = ...
    source: WellLogTypeEnum | None = ...
    start_depth: float | None = ...
    end_depth: float | None = ...
    step_length: float | None = ...
    start_time: datetime | None = ...
    end_time: datetime | None = ...
    step_time: float | None = ...
    depth_units: WellElevationUnitsEnum | None = ...
    index_type: WellLogIndexTypeEnum | None = ...
    curves: list[Curve] = field(default_factory=list[Curve])
    curve_groups: list[CurveGroup] = field(default_factory=list[CurveGroup])
    index_curve_id: int | None = ...
    def copy_ids_from(self, source: DataModel): ...
    def find_curve(self, mne: AppMnemonicCodeEnum) -> Curve | None: ...
