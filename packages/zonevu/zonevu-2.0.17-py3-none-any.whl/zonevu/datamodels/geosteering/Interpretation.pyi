from ...datamodels.Helpers import MakeIsodateOptionalField as MakeIsodateOptionalField
from ..DataModel import DataModel as DataModel
from ..misc.permission import Editability as Editability, Visibility as Visibility
from .CurveDef import CurveDef as CurveDef
from .Horizon import GeosteerHorizonRole as GeosteerHorizonRole, Horizon as Horizon, TypewellHorizonDepth as TypewellHorizonDepth
from .Pick import Pick as Pick
from dataclasses import dataclass, field
from datetime import datetime

@dataclass
class Zone:
    top: Horizon
    bottom: Horizon | None

@dataclass
class Interpretation(DataModel):
    description: str | None = ...
    starred: bool = ...
    target_wellbore_id: int = ...
    target_wellbore_name: str | None = ...
    target_wellbore_number: str | None = ...
    target_formation_id: int = ...
    target_formation_name: str | None = ...
    target_formation_member_name: str | None = ...
    owner_name: str | None = ...
    owner_id: int = ...
    owner_company_name: str = ...
    visibility: Visibility = ...
    editability: Editability = ...
    thickness: float | None = ...
    coordinate_system: str | None = ...
    picks: list[Pick] = field(default_factory=list[Pick])
    curve_defs: list[CurveDef] = field(default_factory=list[CurveDef])
    horizons: list[Horizon] = field(default_factory=list[Horizon])
    typewell_horizon_depths: list[TypewellHorizonDepth] | None = field(default_factory=list[TypewellHorizonDepth])
    def copy_ids_from(self, source: DataModel): ...
    @property
    def valid(self) -> bool: ...
    def get_zone(self) -> Zone | None: ...

@dataclass
class InterpretationEntry(DataModel):
    description: str | None = ...
    starred: bool = ...
    owner_company_name: str = ...
    visibility: Visibility = ...
    editability: Editability = ...
    last_modified_by_name: str = ...
    last_modified_date: datetime | None = ...
    @property
    def interpretation(self) -> Interpretation: ...
