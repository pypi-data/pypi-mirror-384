import abc
from ...datamodels.geosteering.Horizon import Horizon as Horizon
from ...datamodels.geosteering.Pick import Pick as Pick
from ..geospatial.Coordinate import Coordinate as Coordinate
from ..geospatial.GeoLocation import GeoLocation as GeoLocation
from ..geospatial.LineSegment import LineSegment as LineSegment
from ..geospatial.Polyline import Polyline as Polyline
from abc import ABC, abstractmethod
from dataclasses import dataclass, field

@dataclass
class GeosteerItem(ABC, metaclass=abc.ABCMeta):
    next_item: GeosteerItem | None
    @property
    @abstractmethod
    def kind(self) -> str: ...
    @property
    def next(self) -> GeosteerItem: ...
    def find_next_block(self) -> Block | None: ...

@dataclass
class Layer:
    block: Block
    horz: Horizon
    tvd_start: float
    tvd_end: float
    thickness: float
    @property
    def polygon(self) -> Polyline: ...
    @property
    def top(self) -> LineSegment: ...
    @property
    def bottom(self) -> LineSegment: ...

@dataclass
class Block(GeosteerItem):
    start_pick: Pick
    end_pick: Pick
    layers: list[Layer] = field(default_factory=list[Layer])
    target_layer: Layer | None = ...
    @property
    def kind(self) -> str: ...
    @property
    def md_start(self) -> float: ...
    @property
    def md_end(self) -> float: ...
    @property
    def location_start(self) -> GeoLocation: ...
    @property
    def location_end(self) -> GeoLocation: ...
    @property
    def xyz_start(self) -> Coordinate: ...
    @property
    def xyz_end(self) -> Coordinate: ...
    @property
    def elevation_start(self) -> float: ...
    @property
    def elevation_end(self) -> float: ...
    @property
    def dip(self) -> float: ...
    @property
    def inclination(self) -> float: ...
    @property
    def length(self) -> float: ...
    @property
    def md_length(self) -> float: ...
    def contains_md(self, md: float): ...
    def make_copy(self) -> Block: ...
    @classmethod
    def make_infill_block(cls, b1: Block, b2: Block) -> Block: ...
    def make_pick(self, md: float) -> Pick: ...

@dataclass
class Throw:
    fault: Fault
    horz: Horizon
    tvd_start: float
    tvd_end: float
    throw_amt: float
    @property
    def line(self) -> Polyline: ...

@dataclass
class Fault(GeosteerItem):
    pick: Pick
    throws: list[Throw] = field(default_factory=list[Throw])
    target_throw: Throw | None = ...
    @property
    def kind(self) -> str: ...
    @property
    def md(self) -> float: ...
    @property
    def location(self) -> GeoLocation: ...
    def xyz(self) -> Coordinate: ...
    @property
    def elevation(self) -> float: ...
    @property
    def trace(self) -> Polyline: ...
