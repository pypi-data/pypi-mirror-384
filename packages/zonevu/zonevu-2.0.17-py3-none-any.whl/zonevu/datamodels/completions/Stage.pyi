from ...datamodels.Helpers import MakeIsodateOptionalField as MakeIsodateOptionalField
from ...datamodels.completions.DepthFeature import DepthFeature as DepthFeature
from ...datamodels.completions.Plug import Plug as Plug
from ..DataModel import DataModel as DataModel
from dataclasses import dataclass, field
from datetime import datetime

@dataclass
class Stage(DataModel):
    sequence_num: int = ...
    key: str | None = ...
    gap: bool = ...
    note: str | None = ...
    start_date: datetime | None = ...
    duration: float | None = ...
    toe_md: float = ...
    heel_md: float = ...
    screened_out: bool = ...
    frac_hit: bool = ...
    num_clusters: int | None = ...
    proppant_weight: float | None = ...
    water_volume: float | None = ...
    pressure: float | None = ...
    bottom_pressure: float | None = ...
    slurry_rate: float | None = ...
    breakdown_pressure: float | None = ...
    closure_pressure: float | None = ...
    avg_surface_pressure: float | None = ...
    max_surface_pressure: float | None = ...
    max_bottom_pressure: float | None = ...
    isip_pressure: float | None = ...
    closure_gradient: float | None = ...
    frac_gradient: float | None = ...
    tvd_depth: float | None = ...
    slurry_volume: float | None = ...
    avg_proppant_conc: float | None = ...
    max_proppant_conc: float | None = ...
    user_param_values: list[float | None] = field(default_factory=list[float | None])
    toe_plug: Plug | None = ...
    depth_features: list[DepthFeature] = field(default_factory=list[DepthFeature])
    def copy_ids_from(self, source: DataModel): ...
