from ..datamodels.geospatial.Enums import DepthUnitsEnum as DepthUnitsEnum, DistanceUnitsEnum as DistanceUnitsEnum, UnitsSystemEnum as UnitsSystemEnum
from .EndPoint import EndPoint as EndPoint
from .Error import ZonevuError as ZonevuError
from _typeshed import Incomplete
from pathlib import Path
from requests import Response as Response, Session as Session
from strenum import StrEnum as StrEnum
from typing import Any

class Client:
    host: str
    version: str
    row_version_key: str
    key_path: str | Path | None
    apikey: Incomplete
    def __init__(self, endPoint: EndPoint, units: UnitsSystemEnum = ...) -> None: ...
    @property
    def distance_units(self) -> DistanceUnitsEnum: ...
    @distance_units.setter
    def distance_units(self, new_value: DistanceUnitsEnum): ...
    @property
    def depth_units(self) -> DepthUnitsEnum: ...
    @depth_units.setter
    def depth_units(self, new_value: DepthUnitsEnum): ...
    def append_header(self, key: str, value: str) -> None: ...
    def make_url(self, relativeUrl: str, query_params: dict[str, Any] | None = None, include_units: bool = True): ...
    def call_api_get(self, relativeUrl, query_params: dict[str, Any] | None = None, include_units: bool = True) -> Response: ...
    def get(self, relativeUrl, query_params: dict[str, Any] | None = None, include_units: bool = True) -> dict | list | None: ...
    def get_list(self, relativeUrl, query_params: dict[str, Any] | None = None, include_units: bool = True) -> list: ...
    def get_float(self, relativeUrl, query_params: dict[str, Any] | None = None, include_units: bool = True) -> float: ...
    def get_dict(self, relativeUrl, query_params: dict[str, Any] | None = None, include_units: bool = True) -> dict: ...
    def get_text(self, relativeUrl: str, encoding: str = 'utf-8', query_params: dict[str, Any] | None = None) -> str: ...
    def get_data(self, relativeUrl, query_params: dict[str, Any] | None = None) -> bytes: ...
    def call_api_post(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> Response: ...
    def post(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> dict | list | None: ...
    def post_return_list(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> list: ...
    def post_return_dict(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> dict: ...
    def call_api_post_data(self, relativeUrl: str, data: bytes | str | dict, content_type: str | None = None) -> Response: ...
    def post_data(self, relativeUrl, data: bytes | str | dict, content_type: str | None = None) -> None: ...
    def call_api_delete(self, relativeUrl: str, query_params: dict[str, Any] | None = None) -> Response: ...
    def delete(self, relativeUrl: str, query_params: dict[str, Any] | None = None) -> None: ...
    def call_api_patch(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> Response: ...
    def patch(self, relativeUrl: str, data: dict | list, include_units: bool = True, query_params: dict[str, Any] | None = None) -> dict | list | None: ...
    def assert_ok(self, r: Response): ...
