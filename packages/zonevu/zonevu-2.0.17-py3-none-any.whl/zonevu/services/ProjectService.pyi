from ..datamodels.Company import Division as Division
from ..datamodels.Project import Project as Project, ProjectEntry as ProjectEntry
from ..datamodels.geomodels.Geomodel import Geomodel as Geomodel, GeomodelEntry as GeomodelEntry
from ..datamodels.seismic.SeismicSurvey import SeismicSurvey as SeismicSurvey, SeismicSurveyEntry as SeismicSurveyEntry
from ..datamodels.wells.Survey import Survey as Survey
from ..datamodels.wells.Well import Well as Well, WellEntry as WellEntry
from ..services.MapService import MapService as MapService
from .Client import Client as Client
from .CompanyService import CompanyService as CompanyService
from strenum import StrEnum

class ProjectData(StrEnum):
    default = 'default'
    layer_data = 'layer_data'
    all = 'all'

class ProjectDataOptions:
    project_data: set[ProjectData]
    def __init__(self, project_data: set[ProjectData] | None) -> None: ...
    @property
    def all(self): ...
    @property
    def some(self) -> bool: ...
    @property
    def layer_data(self) -> bool: ...

class ProjectService:
    client: Client
    def __init__(self, c: Client) -> None: ...
    def get_projects(self, name: str | None = None, division: Division | int | str | None = None) -> list[ProjectEntry]: ...
    def get(self, identifier: ProjectEntry | int | str | None, project_data: set[ProjectData] | None = None) -> Project | None: ...
    def find_by_name(self, match_token: str | None = None, exact_match: bool | None = True, division: Division | int | str | None = None, page: int | None = 0) -> list[ProjectEntry]: ...
    def get_first_named(self, name: str) -> Project | None: ...
    def project_exists(self, name: str) -> tuple[bool, int]: ...
    def exists(self, identifier: str | int) -> bool: ...
    def find_project(self, project_id: int) -> Project | None: ...
    def load_project(self, project: Project, project_data: set[ProjectData] | None) -> None: ...
    def create_project(self, project: Project) -> None: ...
    def delete_project(self, identifier: int | ProjectEntry | Project, delete_code: str) -> None: ...
    def add_well(self, project: Project | ProjectEntry | int, well: Well | WellEntry | int) -> None: ...
    def add_wells(self, project: Project | ProjectEntry | int, wells: list[Well | WellEntry | int], update_boundary: bool = True) -> None: ...
    def remove_well(self, project: Project | ProjectEntry, well: Well | WellEntry) -> None: ...
    def add_geomodel(self, project: Project | ProjectEntry, geomodel: Geomodel | GeomodelEntry) -> None: ...
    def remove_geomodel(self, project: Project | ProjectEntry, geomodel: Geomodel | GeomodelEntry) -> None: ...
    def add_seismicsurvey(self, project: Project | ProjectEntry, survey: SeismicSurvey | SeismicSurveyEntry) -> None: ...
    def remove_seismicsurvey(self, project: Project | ProjectEntry, survey: SeismicSurvey | SeismicSurveyEntry) -> None: ...
