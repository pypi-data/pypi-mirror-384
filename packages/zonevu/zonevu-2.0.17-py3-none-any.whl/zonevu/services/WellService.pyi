from ..datamodels.Company import Division as Division
from ..datamodels.Project import ProjectEntry as ProjectEntry
from ..datamodels.geospatial.GeoLocation import GeoLocation as GeoLocation
from ..datamodels.geosteering.Interpretation import Interpretation as Interpretation
from ..datamodels.misc.permission import Editability as Editability
from ..datamodels.strat.StratColumn import StratColumn as StratColumn
from ..datamodels.wells.Well import Well as Well, WellEntry as WellEntry
from ..datamodels.wells.Welllog import WellLogTypeEnum as WellLogTypeEnum
from .Client import Client as Client, ZonevuError as ZonevuError
from .CompanyService import CompanyService as CompanyService
from .CompletionsService import CompletionsService as CompletionsService
from .GeosteeringService import GeosteeringService as GeosteeringService
from .NoteService import NoteService as NoteService
from .ProjectService import ProjectService as ProjectService
from .SurveyService import SurveyService as SurveyService
from .WellData import WellData as WellData, WellDataOptions as WellDataOptions
from .WelllogService import WelllogService as WelllogService
from .WelltopService import WelltopService as WelltopService

class WellService:
    client: Client
    def __init__(self, c: Client) -> None: ...
    def get_wells(self, name: str | None = None, project: ProjectEntry | int | str | None = None, division: Division | int | str | None = None) -> list[WellEntry]: ...
    def get(self, well_identifier: WellEntry | int | str, well_data: set[WellData] | None = None) -> Well | None: ...
    def exists(self, identifier: str | int) -> bool: ...
    def find_by_name(self, match_token: str | None = None, exact_match: bool | None = True, division: Division | int | str | None = None, page: int | None = 0) -> list[WellEntry]: ...
    def find_by_project(self, project_identifier: ProjectEntry | int | str | None) -> list[WellEntry]: ...
    def find_by_location(self, location: GeoLocation, distance: float) -> list[WellEntry]: ...
    def find_by_id(self, well_id: int) -> Well: ...
    def find_by_uwi(self, uwi: str) -> Well | None: ...
    def find_wells_original_uwi(self, uwi: str) -> list[WellEntry]: ...
    def find_similar(self, name: str, location: GeoLocation, tolerance: float = 0.9, distance: float = 2) -> list[WellEntry]: ...
    def get_first_named(self, well_name: str, exact_match: bool = True) -> Well | None: ...
    def load_well(self, well: Well, well_data: set[WellData] | None = None) -> None: ...
    def get_stratcolumn(self, well: Well | WellEntry | int) -> StratColumn | None: ...
    def get_stratcolumns(self, well: Well | WellEntry | int) -> list[StratColumn]: ...
    def create_well(self, well: Well, well_data: set[WellData] | None) -> None: ...
    def add_tops(self, well: Well) -> None: ...
    def update_well(self, well: Well) -> None: ...
    def delete_well(self, well_id: int, delete_code: str) -> None: ...
    def get_well_projects(self, well_id: int) -> list[ProjectEntry]: ...
    def copy_well(self, well: Well, well_copy_name: str, well_copy_number: str | None, well_copy_uwi: str) -> Well: ...
