from ..datamodels.geomodels.SimpleGrid import SimpleGrid as SimpleGrid
from ..datamodels.geospatial.Coordinate import Coordinate as Coordinate
from ..datamodels.geospatial.Crs import CrsEntry as CrsEntry, CrsSpec as CrsSpec
from ..datamodels.geospatial.CrsDescriptor import StatePlaneDescriptor as StatePlaneDescriptor, UtmDescriptor as UtmDescriptor
from ..datamodels.geospatial.GeoLocation import GeoLocation as GeoLocation
from ..datamodels.geospatial.GridGeometry import GridGeometry as GridGeometry
from .Client import Client as Client
from .Error import ZonevuError as ZonevuError

class CoordinatesService:
    client: Client
    def __init__(self, c: Client) -> None: ...
    def convert_epsg(self, epsg: int) -> CrsSpec: ...
    def get_geolocation(self, c: Coordinate, crs: CrsSpec) -> GeoLocation: ...
    def get_geolocations(self, xys: list[Coordinate], crs: CrsSpec) -> list[GeoLocation]: ...
    def get_coordinate(self, loc: GeoLocation, crs: CrsSpec) -> Coordinate: ...
    def get_grid_convergence(self, loc: GeoLocation, crs: CrsSpec) -> float: ...
    def get_projections(self) -> list[CrsEntry]: ...
    def get_zones(self, projection: str) -> list[CrsEntry]: ...
    def get_stateplane_crs(self, descr: StatePlaneDescriptor) -> CrsSpec | None: ...
    def get_utm_crs(self, descr: UtmDescriptor) -> CrsSpec | None: ...
    def simple_to_grid_geometry(self, grid: SimpleGrid) -> GridGeometry: ...
