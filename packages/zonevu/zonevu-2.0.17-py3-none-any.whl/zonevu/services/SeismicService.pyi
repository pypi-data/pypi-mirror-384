from ..datamodels.Company import Division as Division
from ..datamodels.geospatial.GridGeometry import GridValue as GridValue
from ..datamodels.seismic.Fault import Fault as Fault, FaultEntry as FaultEntry
from ..datamodels.seismic.SeisHorizon import SeisHorizon as SeisHorizon
from ..datamodels.seismic.SeismicRegistration import SeismicRegistration as SeismicRegistration
from ..datamodels.seismic.SeismicSurvey import SeismicDataset as SeismicDataset, SeismicSurvey as SeismicSurvey, SeismicSurveyEntry as SeismicSurveyEntry
from ..services.Utils import CloudBlobCredential as CloudBlobCredential
from .Client import Client as Client, ZonevuError as ZonevuError
from numpy import dtype, ndarray

class SeismicService:
    client: Client
    def __init__(self, c: Client) -> None: ...
    def get_surveys(self, match_token: str | None = None, division: Division | int | None = None) -> list[SeismicSurveyEntry]: ...
    def get_first_named(self, name: str) -> SeismicSurvey | None: ...
    def survey_exists(self, name: str) -> tuple[bool, int]: ...
    def get_survey(self, survey_id: int) -> SeismicSurvey | None: ...
    def load_survey(self, survey: SeismicSurvey) -> None: ...
    def get_registration(self, dataset_id: int) -> SeismicRegistration: ...
    def get_download_credential(self, dataset: SeismicDataset | int) -> CloudBlobCredential: ...
    def get_faults(self, survey: SeismicSurvey | SeismicSurveyEntry) -> list[Fault]: ...
    def get_faults_text(self, survey: SeismicSurvey | SeismicSurveyEntry) -> str: ...
    def get_fault(self, fault: int | FaultEntry) -> Fault | None: ...
    def get_horizon_depths(self, horizon: SeisHorizon) -> ndarray[tuple[int, int], dtype[float]] | None: ...
    def get_horizon_values(self, horizon: SeisHorizon) -> list[GridValue]: ...
    def get_horizon_text(self, horizon: SeisHorizon) -> str: ...
