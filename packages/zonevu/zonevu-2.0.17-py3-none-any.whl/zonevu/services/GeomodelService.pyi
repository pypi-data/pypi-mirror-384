import numpy as np
from ..datamodels.Company import Division as Division
from ..datamodels.geomodels.DataGrid import DataGrid as DataGrid, GridUsageEnum as GridUsageEnum
from ..datamodels.geomodels.Geomodel import Geomodel as Geomodel, GeomodelEntry as GeomodelEntry
from ..datamodels.geomodels.SimpleGrid import SimpleGrid as SimpleGrid
from ..datamodels.geomodels.Structure import Structure as Structure
from ..datamodels.geospatial.GridGeometry import GridInfo as GridInfo
from ..services.CoordinatesService import CoordinatesService as CoordinatesService
from .Client import Client as Client, ZonevuError as ZonevuError
from strenum import StrEnum

class GeomodelData(StrEnum):
    default = 'default'
    datagrids = 'datagrids'
    structures = 'structures'
    all = 'all'

class GeomodelDataOptions:
    geomodel_data: set[GeomodelData]
    def __init__(self, geomodel_data: set[GeomodelData] | None) -> None: ...
    @property
    def all(self): ...
    @property
    def some(self) -> bool: ...
    @property
    def datagrids(self) -> bool: ...
    @property
    def structures(self) -> bool: ...

class GeomodelService:
    client: Client
    def __init__(self, c: Client) -> None: ...
    def get_geomodels(self, match_token: str | None = None, division: Division | int | None = None) -> list[GeomodelEntry]: ...
    def get_first_named(self, name: str) -> GeomodelEntry | None: ...
    def find_geomodel(self, geomodel_id: int) -> Geomodel | None: ...
    def load_geomodel(self, geomodel: Geomodel, geomodel_data: set[GeomodelData] | None) -> None: ...
    def download_datagrid_z(self, datagrid: DataGrid) -> np.ndarray | None: ...
    def upload_datagrid_z(self, datagrid: DataGrid): ...
    def download_structure_z(self, structure: Structure) -> np.ndarray | None: ...
    def create_geomodel(self, geomodel: Geomodel) -> None: ...
    def add_datagrid(self, geomodel_id: int, datagrid: DataGrid) -> None: ...
    def add_simple_grid(self, geomodel_id: int, grid: SimpleGrid) -> DataGrid: ...
