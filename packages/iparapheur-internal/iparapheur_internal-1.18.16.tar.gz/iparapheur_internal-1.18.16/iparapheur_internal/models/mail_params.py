# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MailParams(BaseModel):
    """
    MailParams
    """ # noqa: E501
    public_annotation: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, alias="publicAnnotation")
    private_annotation: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, alias="privateAnnotation")
    metadata: Optional[Dict[str, Optional[StrictStr]]] = None
    to: List[StrictStr]
    cc: Optional[List[StrictStr]] = None
    bcc: Optional[List[StrictStr]] = None
    object: StrictStr
    message: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    payload: Optional[StrictStr] = None
    include_docket: Optional[StrictBool] = Field(default=None, alias="includeDocket")
    __properties: ClassVar[List[str]] = ["publicAnnotation", "privateAnnotation", "metadata", "to", "cc", "bcc", "object", "message", "password", "payload", "includeDocket"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MailParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MailParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "publicAnnotation": obj.get("publicAnnotation"),
            "privateAnnotation": obj.get("privateAnnotation"),
            "metadata": obj.get("metadata"),
            "to": obj.get("to"),
            "cc": obj.get("cc"),
            "bcc": obj.get("bcc"),
            "object": obj.get("object"),
            "message": obj.get("message"),
            "password": obj.get("password"),
            "payload": obj.get("payload"),
            "includeDocket": obj.get("includeDocket")
        })
        return _obj


