# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from iparapheur_internal.models.gdpr_information_details_dto import GdprInformationDetailsDto

class TestGdprInformationDetailsDto(unittest.TestCase):
    """GdprInformationDetailsDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GdprInformationDetailsDto:
        """Test GdprInformationDetailsDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GdprInformationDetailsDto`
        """
        model = GdprInformationDetailsDto()
        if include_optional:
            return GdprInformationDetailsDto(
                declaring_entity = iparapheur_internal.models.gdpr_declaring_entity.GdprDeclaringEntity(
                    name = '', 
                    address = '', 
                    siret = '', 
                    ape_code = '', 
                    phone_number = '', 
                    mail = '', 
                    dpo = iparapheur_internal.models.gdpr_declaring_entity_dpo.GdprDeclaringEntityDpo(
                        name = '', 
                        mail = '', ), 
                    responsible = iparapheur_internal.models.gdpr_declaring_entity_responsible.GdprDeclaringEntityResponsible(
                        name = '', 
                        title = '', ), ),
                hosting_entity_comments = '',
                hosting_entity = iparapheur_internal.models.gdpr_entity.GdprEntity(
                    name = '', 
                    address = '', 
                    siret = '', ),
                maintenance_entity = iparapheur_internal.models.gdpr_entity.GdprEntity(
                    name = '', 
                    address = '', 
                    siret = '', ),
                application = iparapheur_internal.models.gdpr_application.GdprApplication(
                    name = '', 
                    cookie_session_duration = '', 
                    mandatory_cookies = [
                        ''
                        ], 
                    preserved_data_after_deletion = [
                        ''
                        ], 
                    optional_cookies = [
                        iparapheur_internal.models.gdpr_cookie.GdprCookie(
                            name = '', 
                            elements = [
                                ''
                                ], 
                            description = '', )
                        ], 
                    no_cookies = True, 
                    editor = iparapheur_internal.models.gdpr_entity.GdprEntity(
                        name = '', 
                        address = '', 
                        siret = '', ), 
                    no_data_processed = True, 
                    no_data_collected = True, 
                    data_processes = [
                        iparapheur_internal.models.gdpr_data_element.GdprDataElement(
                            name = '', )
                        ], 
                    collected_data_set = [
                        iparapheur_internal.models.gdpr_data_set.GdprDataSet(
                            name = '', 
                            mandatory_elements = [
                                ''
                                ], 
                            optional_elements = [
                                ''
                                ], )
                        ], )
            )
        else:
            return GdprInformationDetailsDto(
        )
        """

    def testGdprInformationDetailsDto(self):
        """Test GdprInformationDetailsDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
