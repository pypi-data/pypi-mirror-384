# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from iparapheur_internal.models.template_type import TemplateType
from typing import Optional, Set
from typing_extensions import Self

class SignaturePlacement(BaseModel):
    """
    body
    """ # noqa: E501
    id: Optional[StrictStr] = None
    page: Optional[StrictInt] = None
    width: Optional[StrictInt] = None
    height: Optional[StrictInt] = None
    x: Optional[StrictInt] = None
    y: Optional[StrictInt] = None
    page_rotation: Optional[StrictInt] = Field(default=None, alias="pageRotation")
    page_width: Optional[StrictInt] = Field(default=None, alias="pageWidth")
    page_height: Optional[StrictInt] = Field(default=None, alias="pageHeight")
    rectangle_origin: Optional[StrictStr] = Field(default=None, alias="rectangleOrigin")
    signature_number: Optional[StrictInt] = Field(default=None, alias="signatureNumber")
    template_type: Optional[TemplateType] = Field(default=None, alias="templateType")
    __properties: ClassVar[List[str]] = ["id", "page", "width", "height", "x", "y", "pageRotation", "pageWidth", "pageHeight", "rectangleOrigin", "signatureNumber", "templateType"]

    @field_validator('rectangle_origin')
    def rectangle_origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOTTOM_LEFT', 'TOP_LEFT', 'BOTTOM_RIGHT', 'TOP_RIGHT', 'CENTER']):
            raise ValueError("must be one of enum values ('BOTTOM_LEFT', 'TOP_LEFT', 'BOTTOM_RIGHT', 'TOP_RIGHT', 'CENTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignaturePlacement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignaturePlacement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "page": obj.get("page"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "x": obj.get("x"),
            "y": obj.get("y"),
            "pageRotation": obj.get("pageRotation"),
            "pageWidth": obj.get("pageWidth"),
            "pageHeight": obj.get("pageHeight"),
            "rectangleOrigin": obj.get("rectangleOrigin"),
            "signatureNumber": obj.get("signatureNumber"),
            "templateType": obj.get("templateType")
        })
        return _obj


