# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic. 

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iparapheur_internal.models.state import State
from typing import Optional, Set
from typing_extensions import Self

class ColumnedTaskListRequest(BaseModel):
    """
    Every field is mandatory
    """ # noqa: E501
    search_term: Optional[StrictStr] = Field(default=None, alias="searchTerm")
    type_id: Optional[StrictStr] = Field(default=None, alias="typeId")
    subtype_id: Optional[StrictStr] = Field(default=None, alias="subtypeId")
    legacy_id: Optional[StrictStr] = Field(default=None, alias="legacyId")
    created_after: Optional[StrictInt] = Field(default=None, alias="createdAfter")
    created_before: Optional[StrictInt] = Field(default=None, alias="createdBefore")
    still_since_time: Optional[StrictInt] = Field(default=None, alias="stillSinceTime")
    from_desk_ids: Optional[List[StrictStr]] = Field(default=None, alias="fromDeskIds")
    include_metadata: Optional[List[StrictStr]] = Field(default=None, alias="includeMetadata")
    metadata_value_filter_map: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="metadataValueFilterMap")
    state: Optional[State] = None
    __properties: ClassVar[List[str]] = ["searchTerm", "typeId", "subtypeId", "legacyId", "createdAfter", "createdBefore", "stillSinceTime", "fromDeskIds", "includeMetadata", "metadataValueFilterMap", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnedTaskListRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnedTaskListRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchTerm": obj.get("searchTerm"),
            "typeId": obj.get("typeId"),
            "subtypeId": obj.get("subtypeId"),
            "legacyId": obj.get("legacyId"),
            "createdAfter": obj.get("createdAfter"),
            "createdBefore": obj.get("createdBefore"),
            "stillSinceTime": obj.get("stillSinceTime"),
            "fromDeskIds": obj.get("fromDeskIds"),
            "includeMetadata": obj.get("includeMetadata"),
            "metadataValueFilterMap": obj.get("metadataValueFilterMap"),
            "state": obj.get("state")
        })
        return _obj


