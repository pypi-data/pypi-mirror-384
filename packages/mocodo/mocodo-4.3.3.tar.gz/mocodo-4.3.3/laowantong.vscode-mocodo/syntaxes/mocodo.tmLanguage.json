{
  "name": "Mocodo",
  "scopeName": "source.mocodo",
  "uuid": "2AD24A5A-63C9-40B3-B6AA-E240B7B54480",
  "patterns": [
    { "include": "#indent" },
    { "include": "#comment" },
    { "include": "#phantoms" },
    { "include": "#constraint_clause" },
    { "include": "#inheritance_clause" },
    { "include": "#association_clause" },
    { "include": "#entity_clause" },
    { "include": "#invalid" }
  ],
  "repository": {
    "indent": { "match": "^\\s+" },
    "comment": {
      "patterns": [
        {
          "match": "%%mocodo\\b.*$",
          "name": "markup.bold comment.line.magic.mocodo"
        },
        {
          "match": "%.*$",
          "name": "comment.line.normal.mocodo"
        }
      ]
    },
    "phantoms": {
      "description": "A line containing at least one colon, ane nothing else but spaces and colons",
      "match": ":[:\\s]*$",
      "name": "markup.italic punctuation.separator.phantom.mocodo"
    },
    "association_clause": {
      "name": "association.mocodo",
      "begin": "(\\+|-)?((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])(?=\\s*,\\s*)",
      "end": "$|^",
      "beginCaptures": {
        "1": { "name": "keyword.control.mocodo" },
        "2": { "name": "markup.bold support.function.association.mocodo" }
      },
      "patterns": [
        { "include": "#association_legs" }
      ]
    },
    "association_legs": {
      "name": "legs.mocodo",
      "begin": "",
      "end": "$|^",
      "patterns": [
        {
          "match": "\\s*,\\s*(?:(-)?([_/])?((?![-_\\/])(?:[\\w?]{2})(?=[\\s]*[^\\w,\\r\\n:])))?([<>])?\\s*(\\[.*?\\])?\\s*((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])\\s*",
          "captures": {
            "1": { "name": "keyword.control.card_hidden.mocodo" },
            "2": { "name": "keyword.control.card_prefix.mocodo" },
            "3": { "name": "support.function.cardinality.mocodo" },
            "4": { "name": "keyword.control.arrow.mocodo" },
            "5": { "name": "string.regexp.note.mocodo" },
            "6": { "name": "token.info-token.entity.mocodo" }
          }
        },
        { "include": "#association_attrs" },
        { "include": "#invalid" }
      ]
    },
    "association_attrs": {
      "name": "attrs.mocodo",
      "begin": "\\s*:\\s*",
      "end": "$|^",
      "patterns": [
        { "include": "#typed_attr" },
        {
          "match": "\\s*,\\s*",
          "name": "punctuation.separator"
        }
      ]
    },
    "typed_attr": {
      "name": "typed_attribute.mocodo",
      "match": "((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s])\\s*(\\[.*?\\])?\\s*",
      "captures": {
        "1": { "name": "support.type.attribute.mocodo" },
        "2": { "name": "markup.italic token.warn-token.datatype.mocodo" }
      }
    },
    "entity_clause": {
      "name": "entity.mocodo",
      "begin": "(\\+|-)?((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])\\s*:\\s*",
      "end": "$|^",
      "beginCaptures": {
        "1": { "name": "keyword.control.mocodo" },
        "2": { "name": "markup.bold token.info-token.entity.mocodo" }
      },
      "patterns": [
        { "include": "#entity_first_attr" }
      ]
    },
    "entity_first_attr": {
      "begin": "(?:((?:\\d*0\\d*_|_))((?:(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]|#(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]))|([1-9]+_)?((?:(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]|#(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]))|)\\s*(\\[.*?\\])?",
      "end": "$|^",
      "beginCaptures": {
        "1": { "name": "string.regexp.id_symbols.mocodo" },
        "2": { "name": "support.type.attribute.mocodo" },
        "3": { "name": "string.regexp.alt_id_symbols.mocodo" },
        "4": { "name": "markup.underline support.type.attribute.mocodo" },
        "5": { "name": "markup.italic token.warn-token.datatype.mocodo" }
      },
      "patterns": [
        { "include": "#entity_next_attrs" },
        { "include": "#invalid" }
      ]
    },
    "entity_next_attrs": {
      "patterns": [
        {
          "match": "\\s*,\\s*(?:((?:\\d*0\\d*_|_))((?:(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]|#(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]))|([1-9]+_)?((?:(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]|#(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]\\s*>\\s*(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]))|)\\s*(\\[.*?\\])?",
          "captures": {
            "1": { "name": "string.regexp.id_symbols.mocodo" },
            "2": { "name": "markup.underline support.type.attribute.mocodo" },
            "3": { "name": "string.regexp.alt_id_symbols.mocodo" },
            "4": { "name": "support.type.attribute.mocodo" },
            "5": { "name": "markup.italic token.warn-token.datatype.mocodo" }
          }
        },
        { "include": "#invalid" }
      ]
    },
    "constraint_clause": {
      "name": "constraint.mocodo",
      "begin": "(\\([a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF\\d_\\s]{0,3}\\))\\s*(\\[.*?\\])?\\s*",
      "end": "$|^",
      "beginCaptures": {
        "1": { "name": "markup.bold variable.constraint_name.mocodo" },
        "2": { "name": "string.regexp.note.mocodo" }
      },
      "patterns": [
        { "include": "#constraint_targets" }
      ]
    },
    "constraint_targets": {
      "name": "targets.mocodo",
      "begin": "",
      "end": "$|^",
      "patterns": [
        {
          "match": "(<?(?:\\.+|-+)>?)?\\s*((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])",
          "captures": {
            "1": { "name": "string.regexp.constraint_leg.mocodo" },
            "2": { "name": "variable.other.constant.box.mocodo" }
          }
        },
        { "match": "\\s*,\\s*" },
        { "include": "#constraint_coords" },
        { "include": "#invalid" }
      ]
    },
    "constraint_coords": {
      "name": "coords.mocodo",
      "match": "\\s*:\\s*((?:-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?|(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\]))\\s*,\\s*((?:-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?|(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\]))$",
      "captures": {
        "1": { "name": "markup.italic string.regexp.constraint_coords.mocodo" },
        "2": { "name": "markup.italic string.regexp.constraint_coords.mocodo" }
      }
    },
    "inheritance_clause": {
      "name": "inheritance.mocodo",
      "begin": "(/(?:XT\\d?|TX\\d?|X\\d?|T\\d?|\\d?)\\\\{1,2})\\s*((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])?\\s*((?:<==?|<--?|--?>|==?>))\\s*",
      "end": "$|^",
      "beginCaptures": {
        "1": { "name": "markup.bold support.function.inheritance.mocodo markup.underline" },
        "2": { "name": "token.info-token.parent.mocodo" },
        "3": { "name": "keyword.control.arrow.mocodo" }
      },
      "patterns": [
        { "include": "#inheritance_children" }
      ]
    },
    "inheritance_children": {
      "name": "children.mocodo",
      "begin": "",
      "end": "$|^",
      "patterns": [
        {
          "match": "((?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF])[^=<>,:\\\\]*[^-\\[\\]\\\\=<>,:\\s\\\\])",
          "name": "token.info-token.child.mocodo"
        },
        { "match": "\\s*,\\s*" },
        { "include": "#inheritance_attrs" },
        { "include": "#invalid" }
      ]
    },
    "inheritance_attrs": {
      "name": "attrs.mocodo",
      "begin": "\\s*:\\s*",
      "end": "$|^",
      "patterns": [
        {
          "match": "(?=[a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF0-9])[^\\[\\]>,]*[^\\[\\]>,\\s]",
          "name": "markup.italic string.regexp.inheritance_attribute.mocodo"
        },
        { "match": "\\s*,\\s*" },
        { "include": "#invalid" }
      ]
    },
    "invalid": {
      "match": ".+",
      "name": "invalid.illegal.mocodo"
    }
  }
}