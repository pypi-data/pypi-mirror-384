"""Report saving utilities for agent responses."""

import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional


def save_agent_report(
    content: str,
    report_type: str,
    context: Optional[Dict[str, str]] = None,
    working_dir: Optional[str] = None,
) -> str:
    """Save agent-generated report to markdown file.

    This function automatically saves formatted markdown reports from any agent
    to the reports/ directory with an appropriate filename and timestamp.

    Args:
        content: The markdown content to save
        report_type: Type of report (e.g., 'analysis', 'portfolio', 'research')
        context: Additional context for the report (e.g., {'symbol': 'AAPL'})
        working_dir: Working directory (defaults to current directory)

    Returns:
        Path to saved report file

    Examples:
        # Investment analysis report
        save_agent_report(
            content=final_recommendation,
            report_type="analysis",
            context={"symbol": "AAPL"}
        )

        # Portfolio review report
        save_agent_report(
            content=portfolio_analysis,
            report_type="portfolio",
            context={"portfolio_name": "tech_holdings"}
        )
    """
    # Set working directory
    if working_dir is None:
        working_dir = os.getcwd()

    # Create reports directory if it doesn't exist
    reports_dir = Path(working_dir) / "reports"
    reports_dir.mkdir(exist_ok=True)

    # Generate filename with timestamp and context
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Build filename based on context
    if context:
        # Extract key identifier (symbol, portfolio name, etc.)
        identifier = context.get("symbol") or context.get("portfolio_name") or context.get("query", "report")
        identifier = identifier.replace(" ", "_").lower()
        filename = f"{identifier}_{report_type}_{timestamp}.md"
    else:
        filename = f"{report_type}_{timestamp}.md"

    filepath = reports_dir / filename

    # Add metadata header to content if not already present
    if not content.startswith("#"):
        metadata_lines = [
            f"# {report_type.title()} Report",
            f"\n**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        ]

        # Add context information to header
        if context:
            for key, value in context.items():
                metadata_lines.append(f"\n**{key.title()}:** {value}")

        metadata_lines.extend(["\n---\n\n", content])
        full_content = "".join(metadata_lines)
    else:
        # Content already has formatting, just add footer
        full_content = content

    # Add footer
    full_content += "\n\n---\n\n*Report generated by Navam Invest*\n"

    # Write to file
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(full_content)

    return str(filepath)


def save_investment_report(
    symbol: str,
    final_recommendation: str,
    quill_analysis: str = "",
    macro_context: str = "",
    working_dir: Optional[str] = None,
) -> str:
    """Save investment analysis report with multiple sections.

    This is a specialized version for multi-agent investment analysis workflows.

    Args:
        symbol: Stock symbol being analyzed
        final_recommendation: Final synthesized recommendation
        quill_analysis: Fundamental analysis from Quill agent
        macro_context: Macro validation from Macro Lens agent
        working_dir: Working directory (defaults to current directory)

    Returns:
        Path to saved report file
    """
    # Set working directory
    if working_dir is None:
        working_dir = os.getcwd()

    # Create reports directory if it doesn't exist
    reports_dir = Path(working_dir) / "reports"
    reports_dir.mkdir(exist_ok=True)

    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{symbol}_analysis_{timestamp}.md"
    filepath = reports_dir / filename

    # Build report content
    report_lines = [
        f"# Investment Analysis Report: {symbol}",
        f"\n**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"\n**Symbol:** {symbol}",
        "\n---\n",
    ]

    # Add fundamental analysis if available
    if quill_analysis:
        report_lines.extend([
            "\n## Fundamental Analysis (Quill)\n\n",
            quill_analysis,
            "\n\n---\n",
        ])

    # Add macro validation if available
    if macro_context:
        report_lines.extend([
            "\n## Macro Validation (Macro Lens)\n\n",
            macro_context,
            "\n\n---\n",
        ])

    # Add final recommendation
    report_lines.extend([
        "\n## Final Recommendation\n\n",
        final_recommendation,
        "\n\n---\n",
        "\n*Report generated by Navam Invest*\n",
    ])

    # Write to file
    with open(filepath, "w", encoding="utf-8") as f:
        f.write("".join(report_lines))

    return str(filepath)


def get_report_path(symbol: str, working_dir: Optional[str] = None) -> str:
    """Get the path where a report would be saved.

    Args:
        symbol: Stock symbol
        working_dir: Working directory (defaults to current directory)

    Returns:
        Directory path where reports are saved
    """
    if working_dir is None:
        working_dir = os.getcwd()

    reports_dir = Path(working_dir) / "reports"
    return str(reports_dir)
