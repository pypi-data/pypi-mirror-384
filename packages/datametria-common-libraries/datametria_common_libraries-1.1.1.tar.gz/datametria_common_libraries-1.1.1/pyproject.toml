[project]
name = "datametria-common-libraries"
version = "1.1.1"
description = "Stack Multi-Tecnologia Enterprise-Ready - Conjunto abrangente de módulos, classes, ferramentas e bibliotecas reutilizáveis para desenvolvimento enterprise"
authors = [
    {name = "Vander Loto", email = "vander.loto@datametria.io"},
    {name = "Marcelo Cunha", email = "marcelo.cunha@datametria.io"},
    {name = "Dalila Rodrigues", email = "dalila.rodrigues@datametria.io"}
]
maintainers = [
    {name = "DATAMETRIA Enterprise Team", email = "suporte@datametria.io"}
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "datametria", "enterprise", "oracle", "database", "security",
    "lgpd", "gdpr", "compliance", "cloud", "aws", "gcp", "azure"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration"
]
dynamic = ["dependencies"]

[project.urls]
Homepage = "https://github.com/datametria/DATAMETRIA-common-libraries"
Repository = "https://github.com/datametria/DATAMETRIA-common-libraries"
Documentation = "https://datametria.github.io/DATAMETRIA-common-libraries"
"Bug Tracker" = "https://github.com/datametria/DATAMETRIA-common-libraries/issues"
Changelog = "https://github.com/datametria/DATAMETRIA-common-libraries/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/datametria"
Source = "https://github.com/datametria/DATAMETRIA-common-libraries"

[project.scripts]
datametria-cli = "datametria_common.cli:main"

[tool.poetry]
packages = [{include = "datametria_common", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core Dependencies
pydantic = "^2.10.0"
sqlalchemy = "^2.0.0"
alembic = "^1.14.0"
python-dotenv = "^1.0.0"
structlog = "^25.4.0"
pytz = "^2025.2"

# Database Connectors
# Oracle
cx-oracle = {version = "^8.3.0", optional = true}
oracledb = {version = "^3.4.0", optional = true}

# PostgreSQL
psycopg2-binary = {version = "^2.9.0", optional = true}
asyncpg = {version = "^0.30.0", optional = true}

# SQL Server
pyodbc = {version = "^5.0.0", optional = true}

# SQLite (built-in, no extra deps needed)

# Cloud Dependencies
# AWS
boto3 = {version = "^1.35.0", optional = true}
botocore = {version = "^1.35.0", optional = true}

# GCP
google-cloud-storage = {version = "^3.4.0", optional = true}
google-cloud-firestore = {version = "^2.20.0", optional = true}
google-cloud-functions = {version = "^1.17.0", optional = true}
google-cloud-bigquery = {version = "^3.11.0", optional = true}
firebase-admin = {version = "^6.5.0", optional = true}

# Google Workspace APIs
google-auth = {version = "^2.40.0", optional = true}
google-auth-oauthlib = {version = "^1.2.0", optional = true}
google-auth-httplib2 = {version = "^0.2.0", optional = true}
google-api-python-client = {version = "^2.170.0", optional = true}

# Azure
azure-storage-blob = {version = "^12.19.0", optional = true}
azure-identity = {version = "^1.15.0", optional = true}

# Security & Compliance
cryptography = "^46.0.0"
bcrypt = "^5.0.0"
pyjwt = {extras = ["crypto"], version = "^2.10.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# Vault Integration
hvac = {version = "^2.1.0", optional = true}

# API Framework
fastapi = {version = "^0.118.0", optional = true}
uvicorn = {extras = ["standard"], version = "^0.37.0", optional = true}
starlette = {version = "^0.48.0", optional = true}

# Caching & Session
redis = {version = "^6.4.0", optional = true}
hiredis = {version = "^3.2.0", optional = true}

# Monitoring & Logging
prometheus-client = {version = "^0.23.0", optional = true}
sentry-sdk = {version = "^2.40.0", optional = true}

# Data Processing
pandas = {version = "^2.2.0", optional = true}
numpy = {version = "^1.26.0", optional = true}

# HTTP Client
httpx = "^0.28.0"
requests = "^2.32.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.0"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"
factory-boy = "^3.3.0"
faker = "^37.11.0"

# Code Quality
black = "^25.9.0"
isort = "^6.1.0"
flake8 = "^7.3.0"
mypy = "^1.14.0"
bandit = "^1.8.0"
safety = "^3.6.0"

# Documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.30.0"}

# Development Tools
pre-commit = "^4.3.0"
tox = "^4.23.0"
coverage = "^7.6.0"


[tool.poetry.group.gcp.dependencies]
google-cloud-bigquery = "^3.38.0"

[project.optional-dependencies]
# Database Extras
oracle = ["cx-oracle", "oracledb"]
postgresql = ["psycopg2-binary", "asyncpg"]
sqlserver = ["pyodbc"]
all-databases = ["cx-oracle", "oracledb", "psycopg2-binary", "asyncpg", "pyodbc"]

# Cloud Extras
aws = ["boto3", "botocore"]
gcp = ["google-cloud-storage", "google-cloud-firestore", "google-cloud-functions", "google-cloud-bigquery", "firebase-admin"]
workspace = ["google-auth", "google-auth-oauthlib", "google-auth-httplib2", "google-api-python-client"]
azure = ["azure-storage-blob", "azure-identity"]
all-cloud = [
    "boto3", "botocore",
    "google-cloud-storage", "google-cloud-firestore", "google-cloud-functions", "google-cloud-bigquery", "firebase-admin",
    "google-auth", "google-auth-oauthlib", "google-auth-httplib2", "google-api-python-client",
    "azure-storage-blob", "azure-identity"
]

# API Framework
api = ["fastapi", "uvicorn", "starlette"]

# Caching
cache = ["redis", "hiredis"]

# Vault
vault = ["hvac"]

# Monitoring
monitoring = ["prometheus-client", "sentry-sdk"]

# Data Processing
data = ["pandas", "numpy"]

# Complete Installation
all = [
    # Databases
    "cx-oracle", "oracledb", "psycopg2-binary", "asyncpg", "pyodbc",
    # Cloud
    "boto3", "botocore",
    "google-cloud-storage", "google-cloud-firestore", "google-cloud-functions", "google-cloud-bigquery", "firebase-admin",
    "google-auth", "google-auth-oauthlib", "google-auth-httplib2", "google-api-python-client",
    "azure-storage-blob", "azure-identity",
    # API
    "fastapi", "uvicorn", "starlette",
    # Cache
    "redis", "hiredis",
    # Vault
    "hvac",
    # Monitoring
    "prometheus-client", "sentry-sdk",
    # Data
    "pandas", "numpy"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["datametria_common"]
known_third_party = ["pytest", "sqlalchemy", "pydantic"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cx_Oracle.*",
    "oracledb.*",
    "psycopg2.*",
    "pyodbc.*",
    "boto3.*",
    "botocore.*",
    "google.cloud.*",
    "azure.*",
    "hvac.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "oracle: marks tests that require Oracle Database",
    "postgresql: marks tests that require PostgreSQL",
    "sqlserver: marks tests that require SQL Server",
    "aws: marks tests that require AWS services",
    "gcp: marks tests that require GCP services",
    "azure: marks tests that require Azure services"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
    ".mypy_cache"
]


