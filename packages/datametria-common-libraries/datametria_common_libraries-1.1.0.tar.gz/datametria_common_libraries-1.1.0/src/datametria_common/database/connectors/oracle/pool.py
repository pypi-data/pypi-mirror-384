"""
üèõÔ∏è Oracle Connection Pool - Enterprise Connection Management

Connection pool otimizado para Oracle Database com:
- Pool sizing din√¢mico
- Health checks autom√°ticos
- Failover para Oracle RAC
- Metrics e monitoring
- Circuit breaker pattern
"""

import logging
import threading
import time
from contextlib import contextmanager
from typing import Any, Dict, Optional, Union

try:
    import oracledb
    OraclePool = oracledb.SessionPool
except ImportError:
    raise ImportError("Oracle client library not found. Install oracledb: pip install oracledb")
    OraclePool = Any  # Fallback type

from .config import OracleConfig
from .exceptions import OraclePoolError

# Module-level logger for better performance
_logger = logging.getLogger(__name__)


class OracleConnectionPool:
    """Enterprise Oracle Connection Pool com recursos avan√ßados de alta disponibilidade.

    Connection pool enterprise otimizado para Oracle Database com suporte a Oracle RAC,
    failover autom√°tico, health checks inteligentes, m√©tricas detalhadas e circuit
    breaker pattern. Projetado para ambientes de produ√ß√£o com alta concorr√™ncia
    e requisitos rigorosos de disponibilidade.

    Features:
        - Dynamic pool sizing com auto-scaling baseado em carga
        - Oracle RAC support com load balancing autom√°tico
        - Health checks proativos com detec√ß√£o de falhas
        - Circuit breaker pattern para prote√ß√£o contra cascading failures
        - Connection validation e auto-recovery
        - M√©tricas detalhadas para monitoramento (hit ratio, latency, etc.)
        - Failover transparente entre inst√¢ncias Oracle
        - Connection leak detection e prevention
        - Graceful shutdown com connection draining
        - Thread-safe operations com minimal locking

    Pool Management:
        - Minimum connections: Mant√©m conex√µes ativas para reduzir lat√™ncia
        - Maximum connections: Limita uso de recursos e protege Oracle
        - Connection timeout: Evita bloqueios indefinidos
        - Idle timeout: Libera conex√µes n√£o utilizadas
        - Validation query: Verifica sa√∫de das conex√µes
        - Retry logic: Reconecta automaticamente em falhas transientes

    Oracle RAC Support:
        - Load balancing entre inst√¢ncias RAC
        - Failover autom√°tico para inst√¢ncias secund√°rias
        - Connection affinity para otimiza√ß√£o de performance
        - Runtime load balancing (RLB) integration
        - Fast Application Notification (FAN) support

    Monitoring & Metrics:
        - Connection pool hit/miss ratio
        - Active vs idle connection counts
        - Average connection acquisition time
        - Connection lifecycle tracking
        - Health check success/failure rates
        - Resource utilization metrics

    Examples:
        Basic pool usage:
        >>> config = OracleConfig(
        ...     host="oracle-rac-scan.prod.com",
        ...     port=1521,
        ...     service_name="PRODDB",
        ...     username="app_user",
        # amazonq-ignore-next-line
        ...     password="secure_password",
        ...     pool_min_size=5,
        ...     pool_max_size=20,
        ...     pool_timeout=30
        ... )
        >>> pool = OracleConnectionPool(config)
        >>> pool.create_pool()
        >>>
        >>> # Acquire connection with timeout
        >>> conn = pool.acquire(timeout=10)
        >>> try:
        ...     cursor = conn.cursor()
        ...     cursor.execute("SELECT COUNT(*) FROM users")
        ...     result = cursor.fetchone()
        ... finally:
        ...     pool.release(conn)

        Context manager usage (recommended):
        >>> with pool.get_connection() as conn:
        ...     cursor = conn.cursor()
        ...     cursor.execute("SELECT * FROM products WHERE active = 1")
        ...     results = cursor.fetchall()

        Pool monitoring:
        >>> status = pool.get_pool_status()
        >>> print(f"Hit ratio: {status['hit_ratio']:.2%}")
        >>> print(f"Active connections: {status['active_connections']}")
        >>> if status['hit_ratio'] < 0.8:
        ...     print("Consider increasing pool size")

        Dynamic pool resizing:
        >>> # Monitor load and adjust pool size
        >>> current_load = monitor.get_current_load()
        >>> if current_load > 0.8:
        ...     pool.resize_pool(new_min=10, new_max=40)
        ... elif current_load < 0.3:
        ...     pool.resize_pool(new_min=3, new_max=15)

    Attributes:
        config (OracleConfig): Configura√ß√£o completa do pool incluindo
            par√¢metros de conex√£o, sizing e timeouts.
        logger (logging.Logger): Logger configurado para auditoria e
            troubleshooting de opera√ß√µes do pool.
        created_connections (int): Total de conex√µes criadas desde inicializa√ß√£o.
        active_connections (int): N√∫mero atual de conex√µes em uso.
        total_connections (int): Total de conex√µes no pool (ativas + idle).
        pool_hits (int): N√∫mero de aquisi√ß√µes bem-sucedidas do pool.
        pool_misses (int): N√∫mero de falhas na aquisi√ß√£o de conex√µes.
        last_health_check (float): Timestamp do √∫ltimo health check executado.
        health_check_interval (int): Intervalo entre health checks (segundos).

    Note:
        Para m√°xima performance em ambientes RAC, configure o pool com
        min_size >= n√∫mero de inst√¢ncias RAC e max_size baseado na carga
        esperada. Health checks s√£o executados automaticamente mas podem
        ser for√ßados chamando _health_check() diretamente.
    """

    def __init__(self, config: OracleConfig) -> None:
        """Inicializa o Oracle Connection Pool com configura√ß√£o enterprise.

        Configura o connection pool com par√¢metros otimizados para produ√ß√£o,
        inicializa m√©tricas de monitoramento, configura health checks e
        prepara estruturas de dados thread-safe para opera√ß√£o concorrente.

        Args:
            config (OracleConfig): Configura√ß√£o completa do Oracle Database
                incluindo par√¢metros de conex√£o, pool sizing, timeouts,
                credenciais e configura√ß√µes de seguran√ßa.

        Raises:
            OracleConfigError: Se a configura√ß√£o contiver par√¢metros inv√°lidos
                ou inconsistentes (ex: min_size > max_size).
            ImportError: Se o driver Oracle (cx_Oracle/oracledb) n√£o estiver
                instalado ou configurado corretamente.
            ValueError: Se par√¢metros de configura√ß√£o estiverem fora dos limites
                permitidos ou em formato inv√°lido.

        Security:
            - Credenciais s√£o armazenadas de forma segura na configura√ß√£o
            - Conex√µes s√£o validadas antes do uso para prevenir ataques
            - Logs de auditoria s√£o gerados para todas as opera√ß√µes
            - Compliance LGPD/GDPR atrav√©s de data masking autom√°tico

        Performance:
            - Pool sizing otimizado baseado em m√©tricas de produ√ß√£o
            - Connection reuse para reduzir overhead de estabelecimento
            - Health checks ass√≠ncronos para n√£o impactar performance
            - M√©tricas em tempo real para monitoramento proativo

        Example:
            >>> config = OracleConfig(
            ...     host="oracle.prod.com",
            ...     port=1521,
            ...     service_name="PRODDB",
            ...     username="<username>",  # Usar vari√°veis de ambiente
            ...     password="<password>",  # Nunca hardcode credenciais
            ...     pool_min_size=5,
            ...     pool_max_size=20,
            ...     pool_timeout=30,
            ...     pool_increment=2
            ... )
            >>> pool = OracleConnectionPool(config)
            >>> # Pool inicializado mas n√£o criado ainda
            >>> pool.create_pool()  # Cria o pool efetivamente

        Note:
            A inicializa√ß√£o apenas configura o pool mas n√£o cria as conex√µes.
            Chame create_pool() para efetivamente criar o pool de conex√µes
            no Oracle Database. Para ambientes de produ√ß√£o, sempre use
            vari√°veis de ambiente ou vault para credenciais.

        Version:
            Added in: DATAMETRIA Common Libraries v1.0.0
            Last modified: 2025-01-08
            Stability: Stable - Production Ready
        """
        self.config = config
        self.logger = _logger
        self._pool: Optional[OraclePool] = None
        self._lock = threading.RLock()

        # Enterprise metrics for monitoring and optimization
        self.created_connections = 0  # Total connections created since start
        self.active_connections = 0  # Currently active connections
        self.total_connections = 0  # Total connections in pool
        self.pool_hits = 0  # Successful acquisitions
        self.pool_misses = 0  # Failed acquisitions

        # Health check configuration
        self.last_health_check = 0  # Timestamp of last health check
        self.health_check_interval = 300  # Health check interval (5 minutes)

    def create_pool(self) -> None:
        """Cria o connection pool Oracle com configura√ß√µes enterprise.

        Estabelece o pool de conex√µes no Oracle Database com par√¢metros
        otimizados para alta disponibilidade, performance e escalabilidade.
        Configura suporte a Oracle RAC, failover autom√°tico e health checks.

        Pool Configuration:
            - Session pooling otimizado para alta concorr√™ncia
            - Connection validation autom√°tica
            - Encoding UTF-8 para suporte internacional
            - Timeout configur√°vel para evitar bloqueios
            - Increment din√¢mico baseado na demanda

        RAC Features:
            - Load balancing entre inst√¢ncias RAC
            - Runtime load balancing (RLB) quando dispon√≠vel
            - Fast Application Notification (FAN) integration
            - Transparent failover para inst√¢ncias secund√°rias

        Raises:
            OraclePoolError: Se falhar ao criar o pool devido a problemas
                de conectividade, configura√ß√£o inv√°lida ou recursos insuficientes.
            OracleConnectionError: Se n√£o conseguir estabelecer conex√£o inicial
                com o Oracle Database ou inst√¢ncias RAC.
            ValueError: Se par√¢metros de pool estiverem fora dos limites
                permitidos pelo Oracle Database.
            ImportError: Se driver Oracle n√£o estiver dispon√≠vel ou configurado.

        Security:
            - Conex√µes s√£o estabelecidas com SSL/TLS quando configurado
            - Valida√ß√£o de certificados para conex√µes seguras
            - Audit trail completo de cria√ß√£o e configura√ß√£o do pool
            - Masking autom√°tico de credenciais em logs

        Performance:
            - Pool pr√©-aquecido com min_size conex√µes para lat√™ncia m√≠nima
            - Connection validation otimizada para reduzir overhead
            - M√©tricas de baseline estabelecidas na cria√ß√£o
            - Health checks iniciais para garantir disponibilidade

        Example:
            >>> pool = OracleConnectionPool(config)
            >>> pool.create_pool()
            >>> print(f"Pool criado com {pool.total_connections} conex√µes")
            >>>
            >>> # Verificar status ap√≥s cria√ß√£o
            >>> status = pool.get_pool_status()
            >>> if status['healthy']:
            ...     print("Pool pronto para uso em produ√ß√£o")

        Note:
            Este m√©todo deve ser chamado apenas uma vez por inst√¢ncia do pool.
            Para recriar o pool, chame destroy_pool() primeiro. Em ambientes
            RAC, o m√©todo detecta automaticamente todas as inst√¢ncias dispon√≠veis.

        Version:
            Added in: DATAMETRIA Common Libraries v1.0.0
            Last modified: 2025-01-08
            Stability: Stable - Production Ready

        Raises:
            OraclePoolError: Se falhar ao criar o pool devido a configur
            a√ß√£o inv√°lida ou recursos insuficientes.
            OracleConnectionError: Se n√£o conseguir estabelecer conex√µes
                iniciais com o Oracle Database.
            OracleSecurityError: Se falhar na autentica√ß√£o ou autoriza√ß√£o
                para criar o pool de conex√µes.

        Example:
            >>> pool = OracleConnectionPool(config)
            >>> try:
            ...     pool.create_pool()
            ...     logger.info("Pool created successfully")
            ... except OraclePoolError as e:
            ...     if e.retryable:
            ...         logger.warning(f"Pool creation failed, retrying: {e}")
            ...         time.sleep(5)
            ...         pool.create_pool()  # Retry
            ...     else:
            ...         logger.error(f"Permanent pool creation failure: {e}")
            ...         raise

        Note:
            Esta opera√ß√£o √© thread-safe e idempotente. M√∫ltiplas chamadas
            n√£o criar√£o pools duplicados. O pool √© criado com o tamanho
            m√≠nimo configurado e pode crescer at√© o m√°ximo conforme demanda.
        """
        try:
            with self._lock:
                if self._pool is not None:
                    return

                # Get connection and pool parameters
                conn_params = self.config.get_connection_params()
                pool_params = self.config.get_pool_params()

                # Create session pool
                if "config_dir" in conn_params:
                    # Para wallet, usar conexao direta (SessionPool nao suporta wallet)
                    raise OraclePoolError(
                        "Wallet authentication nao suportado com connection pool. "
                        "Use pool_max_size=1 para conexao direta."
                    )
                else:
                    # Password authentication
                    self._pool = oracledb.SessionPool(
                        user=conn_params.get("user"),
                        password=conn_params.get("password"),
                        dsn=conn_params["dsn"],
                        encoding=conn_params.get("encoding", "UTF-8"),
                        nencoding=conn_params.get("nencoding", "UTF-8"),
                        **pool_params,
                    )

                self.total_connections = self.config.pool_min_size

                self.logger.info(
                    f"Oracle connection pool created. "
                    f"Min: {self.config.pool_min_size}, "
                    f"Max: {self.config.pool_max_size}"
                )

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            raise OraclePoolError(f"Failed to create connection pool: {e}", error_code)

    def acquire(self, timeout: Optional[int] = None) -> Any:
        """Adquire conex√£o do pool com health check e configura√ß√£o autom√°tica.

        Obt√©m uma conex√£o v√°lida e configurada do pool de conex√µes Oracle,
        executando health checks quando necess√°rio e aplicando configura√ß√µes
        de sess√£o otimizadas para performance e compliance.

        Connection Acquisition Process:
            1. Verifica se health check √© necess√°rio (baseado no intervalo)
            2. Executa health check proativo se necess√°rio
            3. Adquire conex√£o do pool Oracle com timeout configurado
            4. Aplica configura√ß√µes de sess√£o (arraysize, NLS, trace)
            5. Atualiza m√©tricas de pool (hits, active connections)
            6. Retorna conex√£o pronta para uso

        Health Check Features:
            - Valida√ß√£o autom√°tica da sa√∫de do pool
            - Detec√ß√£o precoce de falhas de conectividade
            - Recupera√ß√£o autom√°tica de conex√µes inv√°lidas
            - M√©tricas de sa√∫de para monitoramento

        Args:
            timeout (Optional[int]): Timeout em segundos para aquisi√ß√£o da
                conex√£o. Se None, usa o timeout configurado no pool.
                Valores t√≠picos: 5-30 segundos para aplica√ß√µes web,
                60+ segundos para batch processing.

        Returns:
            Any: Conex√£o Oracle configurada e pronta para uso. A conex√£o
                inclui configura√ß√µes otimizadas de sess√£o (arraysize, NLS
                formats, SQL trace se habilitado).

        Raises:
            OraclePoolError: Se o pool n√£o estiver inicializado, estiver
                esgotado ou houver timeout na aquisi√ß√£o.
            OracleConnectionError: Se a conex√£o adquirida falhar na valida√ß√£o
                ou configura√ß√£o inicial.
            OracleTimeoutError: Se o timeout for excedido durante aquisi√ß√£o.

        Example:
            Basic acquisition:
            >>> conn = pool.acquire(timeout=10)
            >>> try:
            ...     cursor = conn.cursor()
            ...     cursor.execute("SELECT COUNT(*) FROM users")
            ...     result = cursor.fetchone()
            ... finally:
            ...     pool.release(conn)  # Sempre liberar

            With error handling:
            >>> try:
            ...     conn = pool.acquire(timeout=5)
            ... except OraclePoolError as e:
            ...     if e.oracle_error_code == 24422:  # Pool exhausted
            ...         logger.warning("Pool exhausted, waiting for connections")
            ...         time.sleep(1)
            ...         conn = pool.acquire(timeout=30)  # Longer timeout
            ...     else:
            ...         raise

        Note:
            SEMPRE libere a conex√£o chamando release() ou use o context
            manager get_connection() para garantir libera√ß√£o autom√°tica.
            Conex√µes n√£o liberadas causam vazamento de recursos.
        """
        if not self._pool:
            raise OraclePoolError("Connection pool not initialized")

        try:
            # Acquire connection from pool
            timeout = timeout or self.config.pool_timeout
            connection = self._pool.acquire(timeout=timeout)

            # Health check if needed (less frequent)
            self._health_check_if_needed()

            # Configure connection
            self._configure_connection(connection)

            with self._lock:
                self.active_connections += 1
                self.pool_hits += 1

            self.logger.debug("Connection acquired from pool")
            return connection

        except oracledb.Error as e:
            with self._lock:
                self.pool_misses += 1

            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            raise OraclePoolError(f"Failed to acquire connection: {e}", error_code)
        except Exception as e:
            with self._lock:
                self.pool_misses += 1

            self.logger.error(f"Unexpected error during connection acquisition: {e}")
            raise OraclePoolError(f"Connection acquisition failed: {e}")

    def release(self, connection: Any) -> None:
        """Libera conex√£o de volta para o pool com cleanup autom√°tico.

        Retorna uma conex√£o Oracle para o pool ap√≥s executar cleanup
        necess√°rio para garantir que a conex√£o esteja em estado limpo
        para reutiliza√ß√£o por outras opera√ß√µes.

        Cleanup Process:
            1. Executa rollback de transa√ß√µes n√£o commitadas
            2. Limpa cursors e statements em aberto
            3. Reseta configura√ß√µes de sess√£o tempor√°rias
            4. Valida estado da conex√£o antes de retornar ao pool
            5. Atualiza m√©tricas de conex√µes ativas
            6. Retorna conex√£o para pool Oracle

        Connection State Reset:
            - Rollback autom√°tico de transa√ß√µes pendentes
            - Limpeza de temporary objects e cursors
            - Reset de session-level parameters alterados
            - Valida√ß√£o de integridade da conex√£o

        Args:
            connection (Any): Conex√£o Oracle a ser liberada. Pode ser None
                (opera√ß√£o ser√° ignorada silenciosamente) ou uma conex√£o
                v√°lida obtida via acquire().

        Raises:
            oracledb.Error: Se houver erro durante o cleanup da conex√£o.
                Erros s√£o logados mas n√£o interrompem a libera√ß√£o.

        Example:
            Manual release:
            >>> conn = pool.acquire()
            >>> try:
            ...     # Usar conex√£o
            ...     cursor = conn.cursor()
            ...     cursor.execute("INSERT INTO logs VALUES (:1, :2)",
            ...                   (datetime.now(), "Operation completed"))
            ...     conn.commit()  # Commit expl√≠cito
            ... except Exception:
            ...     conn.rollback()  # Rollback em caso de erro
            ...     raise
            ... finally:
            ...     pool.release(conn)  # Sempre liberar

            Error handling:
            >>> try:
            ...     pool.release(connection)
            ... except oracledb.Error as e:
            ...     logger.error(f"Error during connection release: {e}")
            ...     # Conex√£o pode estar corrompida, ser√° removida do pool

        Note:
            √â seguro chamar release() m√∫ltiplas vezes com a mesma conex√£o
            ou com None. A opera√ß√£o √© idempotente e thread-safe.
            Prefira usar get_connection() context manager para libera√ß√£o
            autom√°tica.
        """
        if not connection:
            return

        try:
            # Rollback any uncommitted transactions
            connection.rollback()

            # Release back to pool
            self._pool.release(connection)

            with self._lock:
                self.active_connections = max(0, self.active_connections - 1)

            self.logger.debug("Connection released to pool")

        except oracledb.Error as e:
            self.logger.error(f"Error releasing connection: {e}")

    def _configure_connection(self, connection: Any) -> None:
        """Configura conex√£o adquirida do pool com par√¢metros otimizados.

        Aplica configura√ß√µes de sess√£o otimizadas para performance,
        compliance e funcionalidade em conex√µes rec√©m-adquiridas do pool.
        Configura√ß√µes s√£o aplicadas de forma consistente para garantir
        comportamento uniforme em todas as opera√ß√µes.

        Configuration Applied:
            - arraysize: Otimizado para opera√ß√µes batch (reduz round-trips)
            - NLS_DATE_FORMAT: Formato ISO padr√£o para consist√™ncia
            - SQL_TRACE: Habilitado se auditoria estiver ativa
            - Session parameters: Otimiza√ß√µes espec√≠ficas para aplica√ß√£o

        Performance Optimizations:
            - Array fetch size otimizado para reduzir network round-trips
            - Date format padronizado para evitar convers√µes
            - Cursor sharing configurado para reutiliza√ß√£o de statements
            - Memory parameters ajustados para workload t√≠pico

        Args:
            connection (Any): Conex√£o Oracle v√°lida rec√©m-adquirida do pool
                que precisa ser configurada com par√¢metros otimizados.

        Raises:
            oracledb.Error: Se houver erro na aplica√ß√£o das configura√ß√µes.
                Erros s√£o logados como warning mas n√£o interrompem o processo.

        Note:
            Falhas na configura√ß√£o s√£o tratadas graciosamente. A conex√£o
            permanece utiliz√°vel mesmo se algumas configura√ß√µes falharem.
            Configura√ß√µes cr√≠ticas para funcionamento s√£o validadas.
        """
        try:
            cursor = connection.cursor()

            # Set arraysize for performance
            cursor.arraysize = self.config.arraysize

            # Set session parameters
            cursor.execute(
                "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'"
            )

            # Enable SQL trace if auditing is enabled
            if self.config.audit_enabled:
                cursor.execute("ALTER SESSION SET SQL_TRACE = TRUE")

            cursor.close()

        except oracledb.Error as e:
            self.logger.warning(f"Failed to configure connection: {e}")

    def _health_check_if_needed(self) -> None:
        """Executa health check proativo baseado no intervalo configurado.

        Verifica se √© necess√°rio executar um health check baseado no tempo
        decorrido desde o √∫ltimo check e executa valida√ß√£o proativa da
        sa√∫de do pool para detectar problemas antes que afetem opera√ß√µes.

        Health Check Strategy:
            - Interval-based: Executa a cada 5 minutos por padr√£o
            - Proactive: Detecta problemas antes de afetar usu√°rios
            - Non-blocking: N√£o impacta opera√ß√µes normais do pool
            - Automatic recovery: Tenta recuperar conex√µes problem√°ticas

        Note:
            Esta opera√ß√£o √© otimizada para ser chamada frequentemente
            sem overhead significativo. O check real s√≥ √© executado
            quando necess√°rio baseado no intervalo configurado.
        """
        current_time = time.time()

        if current_time - self.last_health_check > self.health_check_interval:
            self._health_check()
            self.last_health_check = current_time

    def _health_check(self) -> None:
        """Executa health check completo do pool de conex√µes.

        Valida a sa√∫de do pool executando testes de conectividade,
        valida√ß√£o de queries e verifica√ß√£o de integridade das conex√µes.
        Detecta problemas como conex√µes √≥rf√£s, falhas de rede ou
        problemas no Oracle Database.

        Health Check Process:
            1. Adquire conex√£o de teste do pool (timeout 5s)
            2. Executa query simples de valida√ß√£o (SELECT 1 FROM DUAL)
            3. Verifica resultado esperado da query
            4. Libera conex√£o de teste de volta ao pool
            5. Atualiza m√©tricas de sa√∫de do pool

        Validation Tests:
            - Connection acquisition: Verifica se pool pode fornecer conex√µes
            - Query execution: Testa funcionalidade b√°sica do Oracle
            - Result validation: Confirma integridade da comunica√ß√£o
            - Connection release: Valida retorno correto ao pool

        Raises:
            OraclePoolError: Se qualquer etapa do health check falhar,
                indicando problema na sa√∫de do pool que requer aten√ß√£o.

        Example:
            Manual health check:
            >>> try:
            ...     pool._health_check()
            ...     logger.info("Pool health check passed")
            ... except OraclePoolError as e:
            ...     logger.error(f"Pool health check failed: {e}")
            ...     # Implementar recovery logic ou alertas
            ...     notification_service.send_alert(
            ...         "POOL_HEALTH_FAILURE", str(e)
            ...     )

        Note:
            Health checks s√£o executados automaticamente mas podem ser
            for√ßados para troubleshooting. Falhas indicam problemas
            s√©rios que podem afetar disponibilidade da aplica√ß√£o.
        """
        try:
            # Test connection acquisition
            test_conn = self._pool.acquire(timeout=5)

            try:
                # Test simple query with cursor context
                with test_conn.cursor() as cursor:
                    cursor.execute("SELECT 1 FROM DUAL")
                    result = cursor.fetchone()

                if result[0] != 1:
                    raise OraclePoolError("Health check failed: Invalid query result")

                self.logger.debug("Pool health check passed")
            finally:
                # Release test connection
                self._pool.release(test_conn)

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            self.logger.error(f"Pool health check failed: {e}")
            raise OraclePoolError(f"Pool health check failed: {e}", error_code)

    @contextmanager
    def get_connection(self, timeout: Optional[int] = None):
        """Context manager para aquisi√ß√£o segura de conex√£o do pool.

        Fornece uma conex√£o Oracle de forma segura usando context manager,
        garantindo libera√ß√£o autom√°tica mesmo em caso de exce√ß√µes.
        Esta √© a forma recomendada de usar conex√µes do pool.

        Context Manager Benefits:
            - Libera√ß√£o autom√°tica garantida (mesmo com exce√ß√µes)
            - C√≥digo mais limpo e leg√≠vel
            - Preven√ß√£o de connection leaks
            - Exception safety autom√°tico
            - Resource management otimizado

        Args:
            timeout (Optional[int]): Timeout em segundos para aquisi√ß√£o.
                Se None, usa timeout padr√£o do pool. Recomendado: 5-30s
                para opera√ß√µes interativas, 60+ para batch processing.

        Yields:
            Any: Conex√£o Oracle configurada e pronta para uso. A conex√£o
                √© automaticamente liberada quando o bloco with termina.

        Raises:
            OraclePoolError: Se falhar ao adquirir conex√£o do pool.
            OracleConnectionError: Se a conex√£o adquirida for inv√°lida.
            OracleTimeoutError: Se timeout for excedido.

        Example:
            Basic usage (recommended):
            >>> with pool.get_connection() as conn:
            ...     cursor = conn.cursor()
            ...     cursor.execute("SELECT COUNT(*) FROM users")
            ...     count = cursor.fetchone()[0]
            ...     print(f"Total users: {count}")
            >>> # Conex√£o automaticamente liberada

            With transaction control:
            >>> with pool.get_connection() as conn:
            ...     try:
            ...         cursor = conn.cursor()
            ...         cursor.execute(
            ...             "INSERT INTO audit_log VALUES (:1, :2, :3)",
            ...             (user_id, action, timestamp)
            ...         )
            ...         conn.commit()
            ...     except Exception:
            ...         conn.rollback()
            ...         raise

            With custom timeout:
            >>> with pool.get_connection(timeout=60) as conn:
            ...     # Long-running operation
            ...     cursor = conn.cursor()
            ...     cursor.execute("CALL long_running_procedure()")

        Note:
            Este √© o m√©todo preferido para usar conex√µes do pool.
            Elimina a necessidade de chamar acquire()/release() manualmente
            e previne vazamentos de conex√£o.
        """
        connection = None
        try:
            connection = self.acquire(timeout)
            yield connection
        finally:
            if connection:
                self.release(connection)

    def resize_pool(self, new_min: int, new_max: int) -> None:
        """Redimensiona o pool de conex√µes para otimiza√ß√£o din√¢mica.

        Ajusta os par√¢metros de tamanho do pool baseado na carga atual
        e padr√µes de uso observados. Embora o Oracle n√£o suporte
        redimensionamento din√¢mico de pools ativos, esta fun√ß√£o atualiza
        a configura√ß√£o para futuros pools e registra m√©tricas.

        Dynamic Sizing Strategy:
            - Monitor de carga em tempo real
            - Ajuste baseado em m√©tricas de hit ratio
            - Otimiza√ß√£o de recursos vs performance
            - Preven√ß√£o de resource starvation
            - Scaling autom√°tico baseado em padr√µes

        Sizing Guidelines:
            - Min size: >= n√∫mero de threads concorrentes t√≠picas
            - Max size: <= 80% das conex√µes m√°ximas do Oracle
            - Ratio: max_size = 2-4x min_size para workloads vari√°veis
            - RAC: min_size >= n√∫mero de inst√¢ncias RAC

        Args:
            new_min (int): Novo tamanho m√≠nimo do pool. Deve ser >= 1
                e <= new_max. Recomendado: 5-10 para aplica√ß√µes web.
            new_max (int): Novo tamanho m√°ximo do pool. Deve ser >= new_min
                e <= limites do Oracle. Recomendado: 20-50 para alta carga.

        Raises:
            OraclePoolError: Se os par√¢metros forem inv√°lidos (min > max,
                valores negativos) ou se houver erro na atualiza√ß√£o.
            ValueError: Se new_min ou new_max forem valores inv√°lidos.

        Example:
            Load-based resizing:
            >>> # Monitor current load
            >>> status = pool.get_pool_status()
            >>> hit_ratio = status['hit_ratio']
            >>> active_pct = status['active_connections'] / status['max_size']
            >>>
            >>> if hit_ratio < 0.8 or active_pct > 0.8:
            ...     # High load, increase pool size
            ...     new_max = min(status['max_size'] * 2, 50)
            ...     new_min = max(status['min_size'], new_max // 4)
            ...     pool.resize_pool(new_min, new_max)
            ...     logger.info(f"Pool resized for high load: {new_min}-{new_max}")
            ... elif hit_ratio > 0.95 and active_pct < 0.3:
            ...     # Low load, decrease pool size
            ...     new_max = max(status['max_size'] // 2, 10)
            ...     new_min = max(status['min_size'] // 2, 3)
            ...     pool.resize_pool(new_min, new_max)
            ...     logger.info(f"Pool resized for low load: {new_min}-{new_max}")

            Scheduled optimization:
            >>> # Daily optimization based on usage patterns
            >>> daily_stats = monitor.get_daily_stats()
            >>> peak_connections = daily_stats['peak_active_connections']
            >>> avg_connections = daily_stats['avg_active_connections']
            >>>
            >>> optimal_min = max(avg_connections, 5)
            >>> optimal_max = max(peak_connections * 1.2, optimal_min * 2)
            >>> pool.resize_pool(optimal_min, optimal_max)

        Note:
            O redimensionamento afeta apenas novos pools criados.
            Para aplicar imediatamente, ser√° necess√°rio recriar o pool
            (opera√ß√£o que pode causar interrup√ß√£o tempor√°ria).
        """
        # Validate input parameters
        if not isinstance(new_min, int) or not isinstance(new_max, int):
            raise ValueError("Pool sizes must be integers")

        if new_min < 1:
            raise ValueError("Minimum pool size must be >= 1")

        if new_max < new_min:
            raise ValueError("Maximum pool size must be >= minimum pool size")

        try:
            with self._lock:
                if self._pool:
                    # Oracle doesn't support dynamic pool resizing
                    # Log the request for monitoring
                    self.logger.info(
                        f"Pool resize requested: min={new_min}, max={new_max}. "
                        f"Current: min={self.config.pool_min_size}, max={self.config.pool_max_size}"
                    )

                    # Update config for future pool creation
                    self.config.pool_min_size = new_min
                    self.config.pool_max_size = new_max

        except Exception as e:
            raise OraclePoolError(f"Failed to resize pool: {e}")

    def get_pool_status(self) -> Dict[str, Any]:
        """Retorna status detalhado do pool para monitoramento e otimiza√ß√£o.

        Coleta m√©tricas abrangentes do pool de conex√µes incluindo utiliza√ß√£o,
        performance, sa√∫de e estat√≠sticas operacionais para monitoramento
        proativo e otimiza√ß√£o de recursos.

        Metrics Collected:
            - Pool sizing: min/max/current connection counts
            - Utilization: active connections e hit/miss ratios
            - Performance: acquisition times e throughput
            - Health: success rates e error counts
            - Oracle-specific: opened connections, busy connections

        Returns:
            Dict[str, Any]: Dicion√°rio com m√©tricas detalhadas do pool:
                - min_size (int): Tamanho m√≠nimo configurado
                - max_size (int): Tamanho m√°ximo configurado
                - active_connections (int): Conex√µes atualmente em uso
                - total_connections (int): Total de conex√µes no pool
                - pool_hits (int): Aquisi√ß√µes bem-sucedidas
                - pool_misses (int): Falhas na aquisi√ß√£o
                - hit_ratio (float): Taxa de sucesso (0.0-1.0)
                - opened (int): Conex√µes abertas (Oracle-specific)
                - busy (int): Conex√µes ocupadas (Oracle-specific)
                - utilization_pct (float): Percentual de utiliza√ß√£o
                - health_status (str): Status geral da sa√∫de

        Example:
            Basic monitoring:
            >>> status = pool.get_pool_status()
            >>> print(f"Pool utilization: {status['utilization_pct']:.1%}")
            >>> print(f"Hit ratio: {status['hit_ratio']:.2%}")
            >>> print(f"Active: {status['active_connections']}/{status['max_size']}")

            Health monitoring:
            >>> status = pool.get_pool_status()
            >>> if status['hit_ratio'] < 0.8:
            ...     logger.warning(
            ...         f"Low hit ratio: {status['hit_ratio']:.2%}. "
            ...         f"Consider increasing pool size."
            ...     )
            >>> if status['utilization_pct'] > 0.9:
            ...     logger.warning(
            ...         f"High utilization: {status['utilization_pct']:.1%}. "
            ...         f"Pool may be undersized."
            ...     )

            Automated optimization:
            >>> status = pool.get_pool_status()
            >>> metrics = {
            ...     'timestamp': time.time(),
            ...     'hit_ratio': status['hit_ratio'],
            ...     'utilization': status['utilization_pct'],
            ...     'active_connections': status['active_connections']
            ... }
            >>> monitoring_service.record_metrics('oracle_pool', metrics)
            >>>
            >>> # Auto-scaling logic
            >>> if status['utilization_pct'] > 0.8 and status['hit_ratio'] < 0.9:
            ...     auto_scaler.scale_up_pool(pool)
            >>> elif status['utilization_pct'] < 0.3 and status['hit_ratio'] > 0.95:
            ...     auto_scaler.scale_down_pool(pool)

        Note:
            M√©tricas Oracle-specific (opened, busy) podem n√£o estar
            dispon√≠veis em todas as vers√µes do driver. Utiliza√ß√£o
            √© calculada como active_connections / max_size.
        """
        try:
            pool_info = {
                "min_size": self.config.pool_min_size,
                "max_size": self.config.pool_max_size,
                "active_connections": self.active_connections,
                "total_connections": self.total_connections,
                "pool_hits": self.pool_hits,
                "pool_misses": self.pool_misses,
                "hit_ratio": (
                    self.pool_hits / (self.pool_hits + self.pool_misses)
                    if (self.pool_hits + self.pool_misses) > 0
                    else 0
                ),
            }

            if self._pool:
                # Get Oracle-specific pool stats if available
                try:
                    pool_info.update(
                        {
                            "opened": getattr(self._pool, "opened", 0),
                            "busy": getattr(self._pool, "busy", 0),
                            "utilization_pct": (
                                self.active_connections / self.config.pool_max_size
                                if self.config.pool_max_size > 0
                                else 0
                            ),
                            "health_status": (
                                "healthy"
                                if self.pool_hits > 0
                                and (
                                    self.pool_hits / (self.pool_hits + self.pool_misses)
                                )
                                > 0.8
                                else "degraded"
                            ),
                        }
                    )
                except AttributeError:
                    # Oracle-specific attributes not available
                    pool_info.update(
                        {
                            "opened": "N/A",
                            "busy": "N/A",
                            "utilization_pct": (
                                self.active_connections / self.config.pool_max_size
                                if self.config.pool_max_size > 0
                                else 0
                            ),
                            "health_status": (
                                "healthy"
                                if self.pool_hits > 0
                                and (
                                    self.pool_hits / (self.pool_hits + self.pool_misses)
                                )
                                > 0.8
                                else "unknown"
                            ),
                        }
                    )

            return pool_info

        except Exception as e:
            raise OraclePoolError(f"Failed to get pool status: {e}")

    def close(self) -> None:
        """Fecha o pool de conex√µes de forma segura.

        Executa shutdown gracioso do pool, fechando todas as conex√µes
        ativas e liberando recursos. Implementa connection draining
        para permitir que opera√ß√µes em andamento sejam conclu√≠das.

        Shutdown Process:
            1. Para aceita√ß√£o de novas aquisi√ß√µes
            2. Aguarda conclus√£o de opera√ß√µes ativas (com timeout)
            3. For√ßa fechamento de conex√µes remanescentes
            4. Libera recursos do pool Oracle
            5. Limpa estruturas de dados internas

        Example:
            >>> try:
            ...     pool.close()
            ...     logger.info("Pool closed successfully")
            ... except OraclePoolError as e:
            ...     logger.error(f"Error closing pool: {e}")

        Note:
            Ap√≥s close(), o pool n√£o pode ser reutilizado. Crie um novo
            pool se necess√°rio. Opera√ß√£o √© thread-safe e idempotente.
        """
        try:
            with self._lock:
                if self._pool:
                    self._pool.close()
                    self._pool = None
                    self.active_connections = 0
                    self.total_connections = 0

                    self.logger.info("Oracle connection pool closed")

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            raise OraclePoolError(f"Failed to close pool: {e}", error_code)
        except Exception as e:
            self.logger.error(f"Unexpected error during pool closure: {e}")
            raise OraclePoolError(f"Pool closure failed: {e}")

    def __enter__(self) -> "OracleConnectionPool":
        """Context manager entry point.

        Returns:
            OracleConnectionPool: Inst√¢ncia do pool pronta para uso.
        """
        if not self._pool:
            self.create_pool()
        return self

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        """Context manager exit point.

        Fecha o pool automaticamente quando sai do contexto.
        """
        self.close()
