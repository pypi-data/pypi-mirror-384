"""
üèõÔ∏è Oracle Connector - Enterprise Oracle Database Connector

Conector enterprise para Oracle Database 19c+ com recursos avan√ßados,
seguran√ßa, compliance e alta disponibilidade para ambientes de produ√ß√£o cr√≠ticos.

Features:
    - Oracle 19c+ (incluindo 21c, 23c, 23ai)
    - Oracle Cloud Infrastructure (OCI) Autonomous Database
    - Oracle Wallet authentication para conex√µes seguras
    - Connection pooling otimizado com health checks
    - Failover autom√°tico e circuit breaker pattern
    - LGPD/GDPR compliance nativo com data masking
    - Timezone management avan√ßado
    - Audit trail completo
    - Performance monitoring e m√©tricas
    - Thin mode otimizado para Oracle Cloud

Components:
    OracleConnector: Classe principal para conex√µes Oracle
    
Exceptions:
    OracleConnectionError: Erros de conectividade
    OracleQueryError: Erros de execu√ß√£o de queries
    OracleSecurityError: Viola√ß√µes de seguran√ßa

Example:
    Basic usage:
    >>> from datametria_common.database.connectors.oracle import OracleConnector, OracleConfig
    >>> config = OracleConfig(
    ...     service_name="PRODDB",
    ...     username="app_user",
    ...     password="secure_password",
    ...     wallet_location="/path/to/wallet"
    ... )
    >>> connector = OracleConnector(config)
    >>> with connector.get_connection() as conn:
    ...     cursor = conn.cursor()
    ...     cursor.execute("SELECT COUNT(*) FROM users")
    ...     result = cursor.fetchone()
    ...     print(f"Total users: {result[0]}")

Note:
    Este m√≥dulo requer Oracle Instant Client 19c+ ou superior.
    Para ambientes de produ√ß√£o, sempre use vari√°veis de ambiente
    ou HashiCorp Vault para credenciais.

Version:
    Added in: DATAMETRIA Common Libraries v1.0.0
    Last modified: 2025-01-08
    Stability: Stable - Production Ready
    
Author:
    Equipe DATAMETRIA <suporte@datametria.io>
    
License:
    MIT License - Copyright (c) 2025 DATAMETRIA LTDA
"""

import os
import time
from contextlib import contextmanager
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

try:
    import oracledb
except ImportError:
    raise ImportError(
        "Oracle client library not found. Install oracledb: pip install oracledb"
    ) from None

from .config import OracleConfig
from .exceptions import OracleConnectionError, map_oracle_exception
from .pool import OracleConnectionPool
from .security import OracleSecurityManager
from ....core.health_check import HealthCheckMixin
from ....core.error_handler import ErrorHandlerMixin, ErrorCategory, ErrorSeverity
from ....security.centralized_logger import CentralizedEnterpriseLogger
from ....security.config import LoggingConfig


class OracleConnector(HealthCheckMixin, ErrorHandlerMixin):
    """Enterprise Oracle Database Connector com recursos avan√ßados.

    Conector enterprise para Oracle Database 19c+ otimizado para ambientes
    de produ√ß√£o com alta disponibilidade, performance e seguran√ßa. Suporta
    Oracle Cloud, wallet authentication, failover autom√°tico e compliance LGPD/GDPR.

    Features:
        - Connection pooling otimizado com suporte a Oracle RAC
        - Failover autom√°tico e load balancing entre inst√¢ncias
        - Execu√ß√£o segura de queries com valida√ß√£o autom√°tica
        - Valida√ß√£o autom√°tica de seguran√ßa e preven√ß√£o SQL injection
        - Compliance LGPD/GDPR com auditoria e data masking
        - Logging enterprise com m√©tricas de performance
        - Suporte a Oracle Cloud com wallet authentication
        - Configura√ß√£o autom√°tica de sess√£o para performance
        - Monitoramento em tempo real de conex√µes e queries
        - Thin mode otimizado para Oracle Cloud

    Supported Oracle Versions:
        - Oracle Database 19c (19.3+)
        - Oracle Database 21c
        - Oracle Database 23c
        - Oracle Autonomous Database (OCI)
        - Oracle Cloud Infrastructure

    Performance Features:
        - Thin mode para melhor performance em Oracle Cloud
        - Statement caching autom√°tico
        - Connection reuse para reduzir overhead
        - Result set streaming
        - Automatic session configuration

    Security Features:
        - Oracle Wallet support para conex√µes seguras
        - Fine-grained access control
        - Data masking para dados sens√≠veis
        - Audit trail completo
        - SQL injection prevention

    Examples:
        Basic usage:
        >>> config = OracleConfig(
        ...     service_name="PRODDB",
        ...     username="app_user",
        ...     password="secure_password"
        ... )
        >>> connector = OracleConnector(config)
        >>> connector.connect()
        >>> 
        >>> # Query com bind variables
        >>> results = connector.execute_query(
        ...     "SELECT user_id, username FROM users WHERE active = :active",
        ...     {"active": 1}
        ... )
        >>> 
        >>> # Context manager usage
        >>> with connector.get_connection() as conn:
        ...     cursor = conn.cursor()
        ...     cursor.execute("SELECT COUNT(*) FROM users")
        ...     result = cursor.fetchone()

    Attributes:
        config (OracleConfig): Configura√ß√£o completa do Oracle Database
            incluindo par√¢metros de conex√£o, pool, seguran√ßa e performance.
        logger (logging.Logger): Logger configurado para auditoria enterprise
            com n√≠veis DEBUG, INFO, WARNING, ERROR e CRITICAL.
        security_manager (OracleSecurityManager): Gerenciador de seguran√ßa
            respons√°vel por valida√ß√£o de queries, data masking e compliance.
        pool (Optional[OracleConnectionPool]): Pool de conex√µes otimizado
            com suporte a RAC, failover e load balancing autom√°tico.
        connection_count (int): Contador total de conex√µes estabelecidas
            desde a inicializa√ß√£o do conector.
        query_count (int): Contador total de queries executadas com
            m√©tricas de performance e tempo de execu√ß√£o.
        error_count (int): Contador de erros ocorridos para monitoramento
            e alertas de sa√∫de do sistema.

    Note:
        Este conector √© otimizado para ambientes enterprise e requer
        Oracle Client 19c+ instalado. Para m√°xima performance, configure
        adequadamente baseado na carga esperada.
    """

    def __init__(self, config: OracleConfig) -> None:
        """Inicializa o conector Oracle Database.

        Configura o conector com par√¢metros de conex√£o, seguran√ßa e pool.
        Inicializa m√©tricas de monitoramento e logging enterprise.

        Args:
            config (OracleConfig): Configura√ß√£o completa do Oracle Database
                contendo service_name, credenciais e par√¢metros
                de pool e seguran√ßa.

        Raises:
            OracleConfigError: Se a configura√ß√£o for inv√°lida
            ImportError: Se o driver Oracle n√£o estiver instalado

        Example:
            >>> config = OracleConfig(
            ...     service_name="PRODDB",
            ...     username="app_user",
            ...     password="secure_pass",
            ...     pool_max_size=20
            ... )
            >>> connector = OracleConnector(config)
        """
        self.config = config
        
        # Initialize Enterprise Logger with environment-based configuration
        # Uses LoggingConfig.from_env() for enterprise-grade configuration management
        logging_config = LoggingConfig.from_env(prefix="LOG_")
        logging_config.service_name = "OracleConnector"
        
        self.logger = CentralizedEnterpriseLogger(logging_config)
        
        self.security_manager = OracleSecurityManager(config)
        self.pool: Optional[OracleConnectionPool] = None
        self._connection = None
        self.service_name = "OracleConnector"
        self.version = "1.0.0"

        # Metrics
        self.connection_count = 0
        self.query_count = 0
        self.error_count = 0
        
        # Initialize mixins
        HealthCheckMixin.__init__(self)
        ErrorHandlerMixin.__init__(self)

    def connect(self) -> None:
        """Estabelece conex√£o com Oracle Database.

        Conecta ao Oracle Database usando pool de conex√µes (se configurado)
        ou conex√£o direta. Detecta automaticamente Oracle Wallet e configura
        par√¢metros de sess√£o para performance otimizada.

        Connection Strategy:
            1. Detecta se Oracle Wallet est√° dispon√≠vel
            2. Para wallet: usa conex√£o direta (pool n√£o suportado)
            3. Para conex√µes normais: usa pool se configurado
            4. Configura Oracle Client e ambiente automaticamente
            5. Aplica configura√ß√µes de sess√£o otimizadas

        Raises:
            OracleConnectionError: Se n√£o conseguir conectar ao database
            OracleSecurityError: Se falhar na valida√ß√£o de seguran√ßa
            OracleConfigError: Se a configura√ß√£o for inv√°lida

        Example:
            >>> connector = OracleConnector(config)
            >>> connector.connect()
            >>> # Conex√£o estabelecida com sucesso
        """
        try:
            # Verifica se wallet est√° configurado
            wallet_location = self.config.wallet_location or os.getenv(
                "ORACLE_WALLET_LOCATION"
            )

            # Para wallet, sempre usar conex√£o direta (pool n√£o suportado)
            if wallet_location and os.path.exists(wallet_location):
                self.logger.info(
                    "Wallet detectado - usando conex√£o direta",
                    wallet_location=wallet_location,
                    compliance_tags=["LGPD", "GDPR", "SECURITY"]
                )
                self._connect_direct()
            elif self.config.pool_max_size > 1:
                self._connect_with_pool()
            else:
                self._connect_direct()

            self.connection_count += 1
            self.logger.info(
                "Connected to Oracle Database",
                dsn=self.config.dsn,
                service_name=self.config.service_name,
                connection_type="wallet" if wallet_location else "standard",
                pool_enabled=self.pool is not None,
                compliance_tags=["LGPD", "GDPR", "AUDIT"]
            )

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            mapped_exception = map_oracle_exception(error_code, str(e))
            self.handle_error(mapped_exception, ErrorCategory.DATABASE, ErrorSeverity.HIGH)
            raise mapped_exception from e

    def _connect_with_pool(self) -> None:
        """Conecta usando connection pool otimizado.

        Cria e configura um pool de conex√µes Oracle com suporte a RAC,
        failover autom√°tico e load balancing. O pool √© otimizado para
        alta concorr√™ncia e performance enterprise.

        Raises:
            OracleConnectionError: Se falhar ao criar o pool
            OracleConfigError: Se os par√¢metros do pool forem inv√°lidos
        """
        self.pool = OracleConnectionPool(self.config)
        self.pool.create_pool()

    def _connect_direct(self) -> None:
        """Conecta diretamente sem pool de conex√µes.

        Estabelece uma conex√£o direta ao Oracle Database para cen√°rios
        de baixa concorr√™ncia, testes ou quando wallet est√° configurado.
        Configura automaticamente Oracle Client e ambiente.

        Process:
            1. Configura Oracle Instant Client se dispon√≠vel
            2. Detecta e configura Oracle Wallet se presente
            3. Estabelece conex√£o usando thin mode (recomendado)
            4. Aplica configura√ß√µes de sess√£o otimizadas

        Raises:
            OracleConnectionError: Se falhar ao conectar diretamente
            OracleSecurityError: Se falhar na autentica√ß√£o
        """
        import os

        # Obt√©m configura√ß√µes do ambiente ou usa padr√µes
        # ORACLE_CLIENT_PATH: Caminho para Oracle Instant Client
        oracle_client_path = os.getenv(
            "ORACLE_CLIENT_PATH", r"D:\Tools\Oracle_Client\instantclient_23_8"
        )

        # ORACLE_WALLET_LOCATION: Caminho para Oracle Wallet (OCI)
        wallet_location = self.config.wallet_location or os.getenv(
            "ORACLE_WALLET_LOCATION"
        )

        # Configura Oracle Client se necess√°rio
        if oracle_client_path and os.path.exists(oracle_client_path):
            self._setup_oracle_client(oracle_client_path)

        # Configura wallet se dispon√≠vel
        if wallet_location and os.path.exists(wallet_location):
            self._setup_wallet_connection(wallet_location)
        else:
            self._setup_standard_connection()

    def _setup_oracle_client(self, client_path: str) -> None:
        """Configura Oracle Instant Client.

        Configura o ambiente para Oracle Instant Client, adicionando
        o caminho ao PATH do sistema e preparando para thin mode.

        Args:
            client_path (str): Caminho para Oracle Instant Client

        Note:
            Thin mode √© preferido para Oracle Cloud por ser mais confi√°vel
            e n√£o requerer bibliotecas nativas complexas.
        """
        import os

        try:
            # Adiciona ao PATH se necess√°rio
            current_path = os.environ.get("PATH", "")
            if client_path not in current_path:
                os.environ["PATH"] = f"{client_path};{current_path}"

            # Para Oracle Cloud, usar thin mode √© mais confi√°vel
            # Thick mode ser√° usado apenas se thin mode n√£o funcionar
            self.logger.info(
                "Configurado para usar Oracle thin mode (recomendado para Oracle Cloud)"
            )

        except Exception as e:
            self.logger.warning(f"Erro ao configurar Oracle Client: {e}")

    def _setup_wallet_connection(self, wallet_location: str) -> None:
        """Configura conex√£o usando Oracle Wallet.

        Estabelece conex√£o segura usando Oracle Wallet para autentica√ß√£o
        sem expor credenciais. Usado principalmente para Oracle Cloud.

        Args:
            wallet_location (str): Caminho para o diret√≥rio do wallet

        Process:
            1. Configura TNS_ADMIN para o wallet
            2. Usa credenciais do config com service name do wallet
            3. Estabelece conex√£o usando thin mode com config_dir
            4. Fallback para conex√£o padr√£o se falhar

        Raises:
            OracleConnectionError: Se falhar na conex√£o com wallet

        Note:
            Wallet deve conter sqlnet.ora e tnsnames.ora v√°lidos.
        """
        import os

        try:
            # Configura TNS_ADMIN para o wallet
            os.environ["TNS_ADMIN"] = wallet_location
            self.logger.info(f"Wallet configurado: {wallet_location}")

            # Para wallet, usar config_dir para especificar o diret√≥rio
            self._connection = oracledb.connect(
                user=self.config.username,
                password=self.config.password,
                dsn=self.config.dsn,
                config_dir=wallet_location
            )

            self.logger.info(
                "Conex√£o com wallet estabelecida",
                wallet_location=wallet_location,
                dsn=self.config.dsn,
                compliance_tags=["LGPD", "GDPR", "SECURITY"]
            )

        except oracledb.Error as e:
            self.logger.error(f"Erro na conex√£o com wallet: {e}")
            raise

    def _setup_standard_connection(self) -> None:
        """Configura conex√£o padr√£o sem wallet.

        Estabelece conex√£o Oracle usando credenciais tradicionais
        (usu√°rio/senha) sem wallet authentication.

        Process:
            1. Obt√©m par√¢metros de conex√£o da configura√ß√£o
            2. Remove par√¢metros de wallet se existirem
            3. Estabelece conex√£o usando oracledb.connect()
            4. Configura sess√£o com par√¢metros otimizados

        Raises:
            OracleConnectionError: Se falhar na conex√£o padr√£o
        """
        try:
            params = self.config.get_connection_params()

            # Remove par√¢metros de wallet se existirem
            wallet_params = ["config_dir", "wallet_location", "wallet_password"]
            for param in wallet_params:
                params.pop(param, None)

            self._connection = oracledb.connect(**params)
            self.logger.info(
                "Conex√£o padr√£o estabelecida",
                dsn=self.config.dsn,
                compliance_tags=["LGPD", "GDPR", "AUDIT"]
            )

        except oracledb.Error as e:
            self.logger.error(f"Erro na conex√£o padr√£o: {e}")
            raise

        # Configure session parameters
        self._configure_session(self._connection)

    def _configure_session(self, connection) -> None:
        """Configura par√¢metros otimizados da sess√£o Oracle.

        Aplica configura√ß√µes de sess√£o otimizadas para performance,
        compliance e funcionalidade em conex√µes Oracle.

        Configuration Applied:
            - NLS_DATE_FORMAT: Formato ISO padr√£o para consist√™ncia
            - NLS_TIMESTAMP_FORMAT: Formato timestamp com fra√ß√µes
            - SQL_TRACE: Habilitado se auditoria estiver ativa
            - arraysize: Otimizado para opera√ß√µes batch

        Args:
            connection: Conex√£o Oracle v√°lida para configura√ß√£o

        Note:
            Falhas na configura√ß√£o s√£o logadas como warning mas n√£o
            interrompem o processo de conex√£o.
        """
        cursor = connection.cursor()

        try:
            # Set session parameters for performance
            cursor.execute(
                "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'"
            )
            cursor.execute(
                "ALTER SESSION SET NLS_TIMESTAMP_FORMAT = " "'YYYY-MM-DD HH24:MI:SS.FF'"
            )

            # Enable SQL trace if needed
            if self.config.audit_enabled:
                cursor.execute("ALTER SESSION SET SQL_TRACE = TRUE")

            # Set arraysize for better performance
            cursor.arraysize = self.config.arraysize

        except oracledb.Error as e:
            self.logger.warning("Failed to configure session: %s", e)
        finally:
            cursor.close()

    @contextmanager
    def get_connection(self):
        """Context manager para obter conex√£o Oracle.

        Fornece uma conex√£o Oracle de forma segura, garantindo que seja
        retornada ao pool ap√≥s o uso. Trata automaticamente erros de
        conex√£o e mapeia exce√ß√µes Oracle para exce√ß√µes customizadas.

        Yields:
            oracledb.Connection: Conex√£o Oracle ativa e configurada

        Raises:
            OracleConnectionError: Se n√£o houver conex√£o dispon√≠vel
            OracleTimeoutError: Se timeout na aquisi√ß√£o da conex√£o

        Example:
            >>> with connector.get_connection() as conn:
            ...     cursor = conn.cursor()
            ...     cursor.execute("SELECT 1 FROM dual")
        """
        connection = None
        try:
            if self.pool:
                connection = self.pool.acquire()
            else:
                connection = self._connection

            if not connection:
                raise OracleConnectionError("No connection available")

            yield connection

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            self.error_count += 1
            raise map_oracle_exception(error_code, str(e)) from e
        finally:
            if self.pool and connection:
                self.pool.release(connection)

    def execute_query(
        self,
        sql: str,
        params: Optional[Dict[str, Any]] = None,
        fetch_size: Optional[int] = None,
    ) -> List[Dict[str, Any]]:
        """Executa query SELECT com valida√ß√£o de seguran√ßa.

        Executa uma query SELECT no Oracle Database com valida√ß√£o autom√°tica
        de seguran√ßa, preven√ß√£o de SQL injection e logging de auditoria.
        Retorna resultados em formato de dicion√°rio para facilitar o uso.

        Args:
            sql (str): Query SQL SELECT a ser executada. Deve usar bind
                variables (:param) para par√¢metros din√¢micos.
            params (Optional[Dict[str, Any]]): Dicion√°rio com par√¢metros
                nomeados para bind variables. Defaults to None.
            fetch_size (Optional[int]): Tamanho do array fetch para
                otimiza√ß√£o de performance. Defaults to None (usa config).

        Returns:
            List[Dict[str, Any]]: Lista de dicion√°rios onde cada dicion√°rio
                representa uma linha com colunas como chaves.

        Raises:
            OracleSecurityError: Se a query falhar na valida√ß√£o de seguran√ßa
            OracleQueryError: Se houver erro na execu√ß√£o da query
            OracleConnectionError: Se n√£o houver conex√£o dispon√≠vel

        Example:
            >>> results = connector.execute_query(
            ...     "SELECT id, name FROM users WHERE active = :active",
            ...     {"active": 1},
            ...     fetch_size=1000
            ... )
            >>> for row in results:
            ...     print(f"ID: {row['ID']}, Name: {row['NAME']}")
        """
        start_time = time.time()

        try:
            # Security validation
            self.security_manager.validate_query(sql, params)

            with self.get_connection() as conn:
                cursor = conn.cursor()

                if fetch_size:
                    cursor.arraysize = fetch_size

                # Execute query
                if params:
                    cursor.execute(sql, params)
                else:
                    cursor.execute(sql)

                # Fetch results
                columns = [desc[0] for desc in cursor.description]
                rows = cursor.fetchall()

                # Convert to dict format
                results = [dict(zip(columns, row)) for row in rows]

                cursor.close()

                self.query_count += 1
                execution_time = time.time() - start_time

                self.logger.info(
                    "Query executed successfully",
                    query_type="SELECT",
                    rows_returned=len(results),
                    execution_time_ms=round(execution_time * 1000, 2),
                    has_params=params is not None,
                    compliance_tags=["LGPD", "GDPR", "AUDIT"]
                )

                return results

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            self.error_count += 1
            mapped_exception = map_oracle_exception(error_code, str(e))
            self.handle_error(mapped_exception, ErrorCategory.DATABASE, ErrorSeverity.MEDIUM)
            raise mapped_exception from e

    def execute_dml(
        self,
        sql: str,
        params: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None,
        commit: bool = True,
    ) -> int:
        """Executa opera√ß√µes DML (INSERT, UPDATE, DELETE) com seguran√ßa.

        Executa statements DML no Oracle Database com valida√ß√£o de seguran√ßa,
        suporte a opera√ß√µes batch e controle transacional. Inclui logging
        de auditoria para compliance LGPD/GDPR.

        Args:
            sql (str): Statement DML a ser executado. Deve usar bind
                variables (:param) para par√¢metros din√¢micos.
            params (Optional[Union[Dict[str, Any], List[Dict[str, Any]]]):
                Par√¢metros para o statement. Dict para opera√ß√£o √∫nica,
                List[Dict] para opera√ß√µes batch. Defaults to None.
            commit (bool): Se deve fazer commit autom√°tico da transa√ß√£o.
                Defaults to True.

        Returns:
            int: N√∫mero total de linhas afetadas pela opera√ß√£o.

        Raises:
            OracleSecurityError: Se o DML falhar na valida√ß√£o de seguran√ßa
            OracleQueryError: Se houver erro na execu√ß√£o do statement
            OracleConnectionError: Se n√£o houver conex√£o dispon√≠vel

        Example:
            >>> # Opera√ß√£o √∫nica
            >>> affected = connector.execute_dml(
            ...     "UPDATE users SET last_login = :login_time WHERE id = :user_id",
            ...     {"login_time": datetime.now(), "user_id": 123}
            ... )
            >>>
            >>> # Opera√ß√£o batch
            >>> users_data = [
            ...     {"name": "Jo√£o", "email": "joao@example.com"},
            ...     {"name": "Maria", "email": "maria@example.com"}
            ... ]
            >>> affected = connector.execute_dml(
            ...     "INSERT INTO users (name, email) VALUES (:name, :email)",
            ...     users_data
            ... )
        """
        start_time = time.time()

        try:
            # Security validation
            self.security_manager.validate_dml(sql, params)

            with self.get_connection() as conn:
                cursor = conn.cursor()

                if isinstance(params, list):
                    # Batch execution
                    cursor.executemany(sql, params)
                    affected_rows = cursor.rowcount
                elif params:
                    cursor.execute(sql, params)
                    affected_rows = cursor.rowcount
                else:
                    cursor.execute(sql)
                    affected_rows = cursor.rowcount

                if commit:
                    conn.commit()

                cursor.close()

                self.query_count += 1
                execution_time = time.time() - start_time

                self.logger.info(
                    "DML executed successfully",
                    operation_type="DML",
                    affected_rows=affected_rows,
                    execution_time_ms=round(execution_time * 1000, 2),
                    is_batch=isinstance(params, list),
                    committed=commit,
                    compliance_tags=["LGPD", "GDPR", "AUDIT", "DATA_MODIFICATION"]
                )

                return affected_rows

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            self.error_count += 1
            raise map_oracle_exception(error_code, str(e)) from e

    def execute_plsql(
        self, plsql: str, params: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Executa PL/SQL procedures ou functions com seguran√ßa.

        Executa c√≥digo PL/SQL (procedures, functions, blocos an√¥nimos) no
        Oracle Database com valida√ß√£o de seguran√ßa e tratamento autom√°tico
        de par√¢metros de entrada e sa√≠da.

        Args:
            plsql (str): C√≥digo PL/SQL a ser executado. Pode ser uma chamada
                de procedure, function ou bloco an√¥nimo completo.
            params (Optional[Dict[str, Any]]): Dicion√°rio com par√¢metros de
                entrada e sa√≠da. Use oracledb.Cursor.var() para par√¢metros
                de sa√≠da. Defaults to None.

        Returns:
            Dict[str, Any]: Dicion√°rio com os valores dos par√¢metros de sa√≠da
                ap√≥s a execu√ß√£o do PL/SQL.

        Raises:
            OracleSecurityError: Se o PL/SQL falhar na valida√ß√£o de seguran√ßa
            OracleQueryError: Se houver erro na execu√ß√£o do PL/SQL
            OracleConnectionError: Se n√£o houver conex√£o dispon√≠vel

        Example:
            >>> # Chamada de procedure com par√¢metros de sa√≠da
            >>> cursor = connector.get_connection().cursor()
            >>> out_param = cursor.var(oracledb.NUMBER)
            >>> result = connector.execute_plsql(
            ...     "BEGIN calculate_total(:input_val, :output_val); END;",
            ...     {"input_val": 100, "output_val": out_param}
            ... )
            >>> total = result["output_val"]
        """
        try:
            # Security validation
            self.security_manager.validate_plsql(plsql, params)

            with self.get_connection() as conn:
                cursor = conn.cursor()

                # Execute PL/SQL
                if params:
                    cursor.execute(plsql, params)
                else:
                    cursor.execute(plsql)

                # Get output parameters
                output_params = {}
                if params:
                    for key, value in params.items():
                        if hasattr(value, "getvalue"):
                            output_params[key] = value.getvalue()

                cursor.close()

                return output_params

        except oracledb.Error as e:
            error_code = e.args[0].code if hasattr(e.args[0], "code") else None
            self.error_count += 1
            raise map_oracle_exception(error_code, str(e)) from e

    def disconnect(self) -> None:
        """Desconecta do Oracle Database.

        Fecha todas as conex√µes ativas e libera recursos do pool.
        Executa cleanup gracioso garantindo que n√£o h√° vazamentos.

        Process:
            1. Fecha connection pool se ativo
            2. Fecha conex√£o direta se ativa
            3. Limpa recursos e m√©tricas
            4. Loga opera√ß√µes para auditoria

        Example:
            >>> connector = OracleConnector(config)
            >>> connector.connect()
            >>> # ... usar o conector ...
            >>> connector.disconnect()
        """
        try:
            if self.pool:
                self.pool.close()
                self.pool = None
                self.logger.info(
                    "Connection pool closed",
                    total_connections=self.connection_count,
                    total_queries=self.query_count,
                    total_errors=self.error_count,
                    compliance_tags=["LGPD", "GDPR", "AUDIT"]
                )

            if self._connection:
                self._connection.close()
                self._connection = None
                self.logger.info(
                    "Direct connection closed",
                    total_connections=self.connection_count,
                    total_queries=self.query_count,
                    total_errors=self.error_count,
                    compliance_tags=["LGPD", "GDPR", "AUDIT"]
                )

        except Exception as e:
            self.logger.warning(f"Warning during disconnect: {e}")

    def close(self) -> None:
        """Fecha conex√µes e limpa recursos.

        Fecha todas as conex√µes ativas e libera recursos do pool.
        Deve ser chamado ao finalizar o uso do conector.

        Example:
            >>> connector = OracleConnector(config)
            >>> connector.connect()
            >>> # ... usar o conector ...
            >>> connector.close()
        """
        self.disconnect()

    def __enter__(self):
        """Context manager entry."""
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit."""
        self.close()
    
    async def _check_component_health(self) -> Dict[str, Any]:
        """Check Oracle Database component health.
        
        Returns:
            Dict with Oracle-specific health status (boolean values for HealthCheckMixin)
        """
        health_status = {}
        
        try:
            # Check database connection (return boolean)
            if self.pool:
                health_status["connection_pool"] = True
            elif self._connection:
                health_status["direct_connection"] = True
            else:
                health_status["connection"] = False
                return health_status
            
            # Test database connectivity with simple query (return boolean)
            try:
                with self.get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT 1 FROM dual")
                    result = cursor.fetchone()
                    cursor.close()
                    health_status["database_query"] = result is not None
            except Exception as e:
                health_status["database_query"] = False
            
            # Check security manager (return boolean)
            health_status["security_manager"] = self.security_manager is not None
            
            # Check error rate (return boolean - healthy if < 10% errors)
            error_rate = self.error_count / max(self.query_count, 1)
            health_status["low_error_rate"] = error_rate < 0.1
            
        except Exception as e:
            health_status["health_check"] = False
        
        return health_status
