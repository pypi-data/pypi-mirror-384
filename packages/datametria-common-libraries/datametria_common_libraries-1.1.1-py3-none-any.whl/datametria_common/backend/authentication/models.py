"""
üîê Authentication Models - DATAMETRIA Authentication

Modelos Pydantic para autentica√ß√£o integrados ao API Framework.
"""

from typing import Optional, Dict, Any, List
from pydantic import BaseModel, EmailStr, Field, validator
from datetime import datetime
from enum import Enum

from datametria_common.backend.api_framework.models import DatametriaBaseModel


class AuthProvider(str, Enum):
    """Provedores de autentica√ß√£o suportados."""
    LOCAL = "local"
    GOOGLE = "google"
    MICROSOFT = "microsoft"
    GITHUB = "github"


class UserRole(str, Enum):
    """Roles de usu√°rio."""
    ADMIN = "admin"
    USER = "user"
    GUEST = "guest"
    MODERATOR = "moderator"


class LoginRequest(DatametriaBaseModel):
    """Requisi√ß√£o de login."""
    
    email: EmailStr = Field(..., description="Email do usu√°rio")
    password: str = Field(..., min_length=1, description="Senha do usu√°rio")
    remember_me: bool = Field(False, description="Manter login ativo")
    device_info: Optional[Dict[str, Any]] = Field(None, description="Informa√ß√µes do dispositivo")
    
    @validator('email')
    def validate_email(cls, v):
        """Normaliza email."""
        return v.lower().strip()


class LoginResponse(DatametriaBaseModel):
    """Resposta de login bem-sucedido."""
    
    access_token: str = Field(..., description="Token de acesso")
    refresh_token: str = Field(..., description="Token de refresh")
    token_type: str = Field("bearer", description="Tipo do token")
    expires_in: int = Field(..., description="Tempo de expira√ß√£o em segundos")
    user: Dict[str, Any] = Field(..., description="Dados do usu√°rio")
    requires_mfa: bool = Field(False, description="Requer autentica√ß√£o multi-fator")
    mfa_methods: Optional[List[str]] = Field(None, description="M√©todos MFA dispon√≠veis")


class RefreshTokenRequest(DatametriaBaseModel):
    """Requisi√ß√£o de refresh token."""
    
    refresh_token: str = Field(..., description="Token de refresh")


class RegisterRequest(DatametriaBaseModel):
    """Requisi√ß√£o de registro de usu√°rio."""
    
    name: str = Field(..., min_length=2, max_length=100, description="Nome completo")
    email: EmailStr = Field(..., description="Email do usu√°rio")
    password: str = Field(..., min_length=8, max_length=128, description="Senha")
    confirm_password: str = Field(..., description="Confirma√ß√£o da senha")
    role: UserRole = Field(UserRole.USER, description="Role do usu√°rio")
    terms_accepted: bool = Field(..., description="Aceite dos termos de uso")
    
    @validator('email')
    def validate_email(cls, v):
        """Normaliza email."""
        return v.lower().strip()
    
    @validator('confirm_password')
    def passwords_match(cls, v, values):
        """Valida se senhas coincidem."""
        if 'password' in values and v != values['password']:
            raise ValueError('Senhas n√£o coincidem')
        return v
    
    @validator('terms_accepted')
    def terms_must_be_accepted(cls, v):
        """Valida aceite dos termos."""
        if not v:
            raise ValueError('Termos de uso devem ser aceitos')
        return v


class ChangePasswordRequest(DatametriaBaseModel):
    """Requisi√ß√£o de mudan√ßa de senha."""
    
    current_password: str = Field(..., description="Senha atual")
    new_password: str = Field(..., min_length=8, max_length=128, description="Nova senha")
    confirm_new_password: str = Field(..., description="Confirma√ß√£o da nova senha")
    
    @validator('confirm_new_password')
    def passwords_match(cls, v, values):
        """Valida se senhas coincidem."""
        if 'new_password' in values and v != values['new_password']:
            raise ValueError('Senhas n√£o coincidem')
        return v


class ForgotPasswordRequest(DatametriaBaseModel):
    """Requisi√ß√£o de esqueci minha senha."""
    
    email: EmailStr = Field(..., description="Email do usu√°rio")
    
    @validator('email')
    def validate_email(cls, v):
        """Normaliza email."""
        return v.lower().strip()


class ResetPasswordRequest(DatametriaBaseModel):
    """Requisi√ß√£o de reset de senha."""
    
    token: str = Field(..., description="Token de reset")
    new_password: str = Field(..., min_length=8, max_length=128, description="Nova senha")
    confirm_new_password: str = Field(..., description="Confirma√ß√£o da nova senha")
    
    @validator('confirm_new_password')
    def passwords_match(cls, v, values):
        """Valida se senhas coincidem."""
        if 'new_password' in values and v != values['new_password']:
            raise ValueError('Senhas n√£o coincidem')
        return v


class MFASetupRequest(DatametriaBaseModel):
    """Requisi√ß√£o de configura√ß√£o MFA."""
    
    method: str = Field(..., description="M√©todo MFA (totp, sms)")
    phone_number: Optional[str] = Field(None, description="N√∫mero de telefone para SMS")
    
    @validator('method')
    def validate_method(cls, v):
        """Valida m√©todo MFA."""
        allowed_methods = ['totp', 'sms']
        if v not in allowed_methods:
            raise ValueError(f'M√©todo deve ser um de: {", ".join(allowed_methods)}')
        return v
    
    @validator('phone_number')
    def validate_phone_for_sms(cls, v, values):
        """Valida telefone para SMS."""
        if values.get('method') == 'sms' and not v:
            raise ValueError('N√∫mero de telefone √© obrigat√≥rio para SMS')
        return v


class MFASetupResponse(DatametriaBaseModel):
    """Resposta de configura√ß√£o MFA."""
    
    method: str = Field(..., description="M√©todo MFA configurado")
    secret_key: Optional[str] = Field(None, description="Chave secreta TOTP")
    qr_code_url: Optional[str] = Field(None, description="URL do QR code")
    backup_codes: List[str] = Field(..., description="C√≥digos de backup")


class MFAVerifyRequest(DatametriaBaseModel):
    """Requisi√ß√£o de verifica√ß√£o MFA."""
    
    code: str = Field(..., min_length=6, max_length=8, description="C√≥digo MFA")
    method: str = Field(..., description="M√©todo MFA usado")
    
    @validator('code')
    def validate_code(cls, v):
        """Valida c√≥digo MFA."""
        if not v.isdigit():
            raise ValueError('C√≥digo deve conter apenas n√∫meros')
        return v


class OAuth2LoginRequest(DatametriaBaseModel):
    """Requisi√ß√£o de login OAuth2."""
    
    provider: AuthProvider = Field(..., description="Provedor OAuth2")
    code: str = Field(..., description="C√≥digo de autoriza√ß√£o")
    state: Optional[str] = Field(None, description="State parameter")
    redirect_uri: str = Field(..., description="URI de redirecionamento")


class OAuth2CallbackRequest(DatametriaBaseModel):
    """Callback OAuth2."""
    
    code: str = Field(..., description="C√≥digo de autoriza√ß√£o")
    state: Optional[str] = Field(None, description="State parameter")
    error: Optional[str] = Field(None, description="Erro OAuth2")
    error_description: Optional[str] = Field(None, description="Descri√ß√£o do erro")


class SessionInfo(DatametriaBaseModel):
    """Informa√ß√µes de sess√£o."""
    
    session_id: str = Field(..., description="ID da sess√£o")
    user_id: int = Field(..., description="ID do usu√°rio")
    device_info: Dict[str, Any] = Field(..., description="Informa√ß√µes do dispositivo")
    ip_address: str = Field(..., description="Endere√ßo IP")
    user_agent: str = Field(..., description="User agent")
    created_at: datetime = Field(..., description="Data de cria√ß√£o")
    last_activity: datetime = Field(..., description="√öltima atividade")
    expires_at: datetime = Field(..., description="Data de expira√ß√£o")
    is_active: bool = Field(True, description="Sess√£o ativa")


class UserProfile(DatametriaBaseModel):
    """Perfil do usu√°rio autenticado."""
    
    id: int = Field(..., description="ID do usu√°rio")
    name: str = Field(..., description="Nome completo")
    email: EmailStr = Field(..., description="Email")
    role: UserRole = Field(..., description="Role do usu√°rio")
    avatar_url: Optional[str] = Field(None, description="URL do avatar")
    is_active: bool = Field(..., description="Usu√°rio ativo")
    is_verified: bool = Field(..., description="Email verificado")
    mfa_enabled: bool = Field(..., description="MFA habilitado")
    last_login: Optional[datetime] = Field(None, description="√öltimo login")
    created_at: datetime = Field(..., description="Data de cria√ß√£o")
    updated_at: Optional[datetime] = Field(None, description="√öltima atualiza√ß√£o")


class AuthAuditLog(DatametriaBaseModel):
    """Log de auditoria de autentica√ß√£o."""
    
    user_id: Optional[int] = Field(None, description="ID do usu√°rio")
    email: Optional[str] = Field(None, description="Email do usu√°rio")
    action: str = Field(..., description="A√ß√£o realizada")
    success: bool = Field(..., description="Sucesso da a√ß√£o")
    ip_address: str = Field(..., description="Endere√ßo IP")
    user_agent: str = Field(..., description="User agent")
    device_info: Optional[Dict[str, Any]] = Field(None, description="Informa√ß√µes do dispositivo")
    error_message: Optional[str] = Field(None, description="Mensagem de erro")
    timestamp: datetime = Field(..., description="Timestamp da a√ß√£o")
    session_id: Optional[str] = Field(None, description="ID da sess√£o")


class TokenInfo(DatametriaBaseModel):
    """Informa√ß√µes do token."""
    
    token_type: str = Field(..., description="Tipo do token")
    user_id: int = Field(..., description="ID do usu√°rio")
    email: str = Field(..., description="Email do usu√°rio")
    role: UserRole = Field(..., description="Role do usu√°rio")
    issued_at: datetime = Field(..., description="Data de emiss√£o")
    expires_at: datetime = Field(..., description="Data de expira√ß√£o")
    jti: str = Field(..., description="JWT ID")
    is_valid: bool = Field(..., description="Token v√°lido")
    is_blacklisted: bool = Field(False, description="Token na blacklist")


class PasswordPolicy(DatametriaBaseModel):
    """Pol√≠tica de senhas."""
    
    min_length: int = Field(8, description="Comprimento m√≠nimo")
    require_uppercase: bool = Field(True, description="Requer mai√∫scula")
    require_lowercase: bool = Field(True, description="Requer min√∫scula")
    require_numbers: bool = Field(True, description="Requer n√∫meros")
    require_symbols: bool = Field(False, description="Requer s√≠mbolos")
    max_age_days: Optional[int] = Field(None, description="Idade m√°xima em dias")
    history_count: int = Field(5, description="Hist√≥rico de senhas")


class SecuritySettings(DatametriaBaseModel):
    """Configura√ß√µes de seguran√ßa."""
    
    password_policy: PasswordPolicy = Field(..., description="Pol√≠tica de senhas")
    max_login_attempts: int = Field(5, description="M√°ximo de tentativas de login")
    lockout_duration_minutes: int = Field(15, description="Dura√ß√£o do bloqueio")
    session_timeout_minutes: int = Field(60, description="Timeout da sess√£o")
    require_mfa: bool = Field(False, description="MFA obrigat√≥rio")
    allowed_domains: Optional[List[str]] = Field(None, description="Dom√≠nios permitidos")
    ip_whitelist: Optional[List[str]] = Field(None, description="IPs permitidos")
