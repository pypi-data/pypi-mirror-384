# coding: utf-8

"""
    Kinde Management API

     Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 

    The version of the OpenAPI document: 1
    Contact: support@kinde.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from kinde_sdk.management.models.create_connection_request_options import CreateConnectionRequestOptions
from typing import Optional, Set
from typing_extensions import Self

class CreateConnectionRequest(BaseModel):
    """
    CreateConnectionRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The internal name of the connection.")
    display_name: Optional[StrictStr] = Field(default=None, description="The public facing name of the connection.")
    strategy: Optional[StrictStr] = Field(default=None, description="The identity provider identifier for the connection.")
    enabled_applications: Optional[List[StrictStr]] = Field(default=None, description="Client IDs of applications in which this connection is to be enabled.")
    organization_code: Optional[StrictStr] = Field(default=None, description="Enterprise connections only - the code for organization that manages this connection.")
    options: Optional[CreateConnectionRequestOptions] = None
    __properties: ClassVar[List[str]] = ["name", "display_name", "strategy", "enabled_applications", "organization_code", "options"]

    @field_validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['oauth2:apple', 'oauth2:azure_ad', 'oauth2:bitbucket', 'oauth2:discord', 'oauth2:facebook', 'oauth2:github', 'oauth2:gitlab', 'oauth2:google', 'oauth2:linkedin', 'oauth2:microsoft', 'oauth2:patreon', 'oauth2:slack', 'oauth2:stripe', 'oauth2:twitch', 'oauth2:twitter', 'oauth2:xero', 'saml:custom', 'wsfed:azure_ad']):
            raise ValueError("must be one of enum values ('oauth2:apple', 'oauth2:azure_ad', 'oauth2:bitbucket', 'oauth2:discord', 'oauth2:facebook', 'oauth2:github', 'oauth2:gitlab', 'oauth2:google', 'oauth2:linkedin', 'oauth2:microsoft', 'oauth2:patreon', 'oauth2:slack', 'oauth2:stripe', 'oauth2:twitch', 'oauth2:twitter', 'oauth2:xero', 'saml:custom', 'wsfed:azure_ad')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # set to None if organization_code (nullable) is None
        # and model_fields_set contains the field
        if self.organization_code is None and "organization_code" in self.model_fields_set:
            _dict['organization_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "strategy": obj.get("strategy"),
            "enabled_applications": obj.get("enabled_applications"),
            "organization_code": obj.get("organization_code"),
            "options": CreateConnectionRequestOptions.from_dict(obj["options"]) if obj.get("options") is not None else None
        })
        return _obj


