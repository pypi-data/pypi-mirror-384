#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pyZlBus2 as zlb

# 需要解析的数据流（上传数据）[13个数据帧包]
dataBuffer = [
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB1, 0x81, 0x59, 0x76, 0x49, 0x16, 0x7C, 0x29, 0x3F, 0xF2, 0x28, 0xC0, 0x3B, 0x99, 0x9D, 0x96, 0x3D, 0x0E, 0xEE, 0x3E, 0xBF, 0x36, 0x6A, 0x9D, 0x3F, 0xA5, 0x1E, 0xE4, 0x3F, 0xC5, 0xBE, 0xC4, 0xBE, 0x80, 0x2B, 0x30, 0x3C, 0x80, 0x86, 0x67, 0x3A, 0x00, 0x6C, 0xC4, 0x3A, 0xD7,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB2, 0xBF, 0x5A, 0x76, 0x49, 0xCF, 0x7B, 0x29, 0x3F, 0x33, 0x8A, 0xBC, 0x3B, 0xD9, 0x38, 0x96, 0x3D, 0x99, 0xEF, 0x3E, 0xBF, 0xA7, 0xAC, 0x15, 0x3E, 0x00, 0xE2, 0x55, 0xC0, 0xBA, 0xA7, 0x20, 0x3F, 0x80, 0xD0, 0x4E, 0x3C, 0x40, 0x37, 0xC6, 0x3A, 0x00, 0x52, 0x27, 0x3B, 0x18,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB3, 0xFC, 0x5B, 0x76, 0x49, 0x2C, 0x7E, 0x29, 0x3F, 0x15, 0xD8, 0xB3, 0x3B, 0x21, 0xBB, 0x95, 0x3D, 0x2C, 0xEF, 0x3E, 0xBF, 0xE0, 0xF1, 0xD2, 0x3D, 0x00, 0xBC, 0x1A, 0xC0, 0xE0, 0x20, 0xAE, 0x3E, 0x80, 0xED, 0x3A, 0x3C, 0x10, 0x53, 0x83, 0x3B, 0x00, 0x52, 0xB1, 0xBA, 0xB8,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB4, 0x5F, 0x5D, 0x76, 0x49, 0xB3, 0x7D, 0x29, 0x3F, 0x10, 0xB4, 0xB0, 0x3B, 0x5D, 0x96, 0x95, 0x3D, 0x17, 0xF0, 0x3E, 0xBF, 0x96, 0x66, 0x8E, 0x3E, 0x33, 0x06, 0x03, 0xC0, 0x79, 0x1A, 0xD5, 0x3C, 0x58, 0x87, 0x07, 0x3C, 0x10, 0xAF, 0xB3, 0x3B, 0x00, 0xB4, 0xCE, 0xBB, 0xB6,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB5, 0x9C, 0x5E, 0x76, 0x49, 0x8E, 0x7F, 0x29, 0x3F, 0xC4, 0x09, 0xA7, 0x3B, 0xD7, 0x1D, 0x95, 0x3D, 0x0E, 0xF0, 0x3E, 0xBF, 0xB8, 0xE3, 0x85, 0x3E, 0xA3, 0xF4, 0x65, 0xC0, 0xC8, 0x7F, 0xCE, 0xBD, 0x20, 0x05, 0xA8, 0x3B, 0x40, 0x7F, 0x61, 0x3B, 0x00, 0xBA, 0xA4, 0xBA, 0xA1,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB6, 0xDB, 0x5F, 0x76, 0x49, 0x9B, 0x80, 0x29, 0x3F, 0xFD, 0x76, 0xA2, 0x3B, 0xE5, 0xDE, 0x94, 0x3D, 0xF3, 0xEF, 0x3E, 0xBF, 0x1D, 0x48, 0x8B, 0x3E, 0x26, 0xDC, 0x3C, 0xBE, 0x27, 0xE3, 0xC5, 0xBE, 0x0C, 0xEA, 0x9F, 0x3C, 0xE0, 0xDB, 0x60, 0x3B, 0x00, 0xC8, 0x8F, 0x39, 0x82,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB7, 0x19, 0x61, 0x76, 0x49, 0x69, 0x77, 0x29, 0x3F, 0x88, 0x4E, 0xB2, 0x3B, 0x5B, 0x98, 0x95, 0x3D, 0xA0, 0xF5, 0x3E, 0xBF, 0x16, 0x50, 0x85, 0x3F, 0x66, 0xFA, 0x86, 0x40, 0x80, 0x39, 0x68, 0xBE, 0xD8, 0x13, 0x65, 0x3C, 0xD0, 0x69, 0xA3, 0x3B, 0x80, 0x95, 0x1D, 0x3C, 0xA5,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB8, 0x57, 0x62, 0x76, 0x49, 0xCA, 0x6C, 0x29, 0x3F, 0x24, 0xDB, 0xCD, 0x3B, 0xD4, 0xC4, 0x96, 0x3D, 0xEC, 0xFA, 0x3E, 0xBF, 0xA1, 0x9C, 0x56, 0x3E, 0x37, 0x99, 0x16, 0xBE, 0x37, 0xBD, 0x65, 0x3B, 0xC0, 0x4A, 0x1A, 0x3B, 0x80, 0x43, 0x9D, 0x3B, 0x80, 0x2F, 0x44, 0xBC, 0xDA,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xB9, 0x96, 0x63, 0x76, 0x49, 0x74, 0x70, 0x29, 0x3F, 0x44, 0x43, 0xC2, 0x3B, 0x21, 0x3F, 0x96, 0x3D, 0x83, 0xF9, 0x3E, 0xBF, 0x7D, 0x63, 0x1D, 0xBD, 0x05, 0xA7, 0xC3, 0xC0, 0xA4, 0x26, 0x5C, 0x3E, 0x70, 0xE3, 0xB7, 0x3B, 0x20, 0x5E, 0x89, 0x3B, 0x00, 0x63, 0x1F, 0xBB, 0xD9,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xBA, 0xD4, 0x64, 0x76, 0x49, 0x41, 0x71, 0x29, 0x3F, 0x34, 0x43, 0xBA, 0x3B, 0x47, 0xDD, 0x95, 0x3D, 0x20, 0xFA, 0x3E, 0xBF, 0x2A, 0x87, 0x0C, 0x3F, 0xE9, 0x8B, 0xAA, 0xBF, 0x91, 0x3F, 0x68, 0xBE, 0xD8, 0x3F, 0x25, 0x3C, 0x40, 0xCA, 0x6E, 0x3B, 0x00, 0xE0, 0xF5, 0x38, 0xF2,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xBB, 0x12, 0x66, 0x76, 0x49, 0x11, 0x6E, 0x29, 0x3F, 0x62, 0x07, 0xBF, 0x3B, 0xE7, 0xDF, 0x95, 0x3D, 0xDA, 0xFC, 0x3E, 0xBF, 0xDC, 0x83, 0x72, 0x3F, 0x74, 0xB0, 0x30, 0x3F, 0x7E, 0xA1, 0xB4, 0xBE, 0x80, 0xAD, 0xC4, 0x3B, 0x20, 0xDE, 0x7A, 0x3B, 0x00, 0x3A, 0xF6, 0xBA, 0xBB,
    0xAA, 0x14, 0x07, 0x00, 0x00, 0x3F, 0x00, 0x35, 0x64, 0x60, 0x10, 0xF2,
    0xAA, 0x10, 0x30, 0x00, 0x03, 0x3F, 0x00, 0xBC, 0x51, 0x67, 0x76, 0x49, 0x7B, 0x6E, 0x29, 0x3F, 0x93, 0xEF, 0xC1, 0x3B, 0x6D, 0xE8, 0x95, 0x3D, 0x55, 0xFC, 0x3E, 0xBF, 0x1C, 0x3A, 0x05, 0x3F, 0x00, 0xB7, 0xD0, 0x3D, 0x40, 0xE4, 0x8D, 0x3E, 0xF8, 0x09, 0x17, 0x3C, 0x00, 0xCC, 0x3E, 0x3B, 0x80, 0x90, 0xA6, 0x3B, 0x19,
    0xAA, 0x10, 0x30, 0x00]

def test():
    pkt = zlb.ZlBusUnPack(tracker_nums = 1, user_id = 0xFF, fifoMaxSize = 15)   # fifoMaxSize 大于 dataBuffer中数据帧包个数

    data = bytes(dataBuffer)

    try:
        # 手动设置dataBuffer上传数据格式
        # tkIndex表示第几个tracker(从0开始), dataFormat表示数据格式
        pkt.setDataFormat(tkIndex=0, dataFormat=(zlb.api.e_Upload_DataFormat.NEW_UPLOAD_DATA_TIME | zlb.api.e_Upload_DataFormat.NEW_UPLOAD_DATA_QUATERNION | zlb.api.e_Upload_DataFormat.NEW_UPLOAD_DATA_GYRO | zlb.api.e_Upload_DataFormat.NEW_UPLOAD_DATA_LIN_ACC))

        # 将流数据加入进，解包接口
        pkt.decodeDataStreamInput(data)
        print("size =", pkt.count())

        # 查询解包后,FIFO Block个数
        while pkt.count() > 0:
            # 获取FIFO Block, 无效Block 或FIFO 中无数据时,返回None
            block =  pkt.getHeadBlockNote()
            # print("type(block) =", type(block))
            
            if block != None:
                if isinstance(block, zlb.ImuDataBlock):
                    print('IMU 数据 类型------------------------------------------------')
                        
                    pktId = block.getIdBlock()
                    print("rfId = ", hex(pktId.rfId), ", flowId =", pktId.flowId)

                    state, timeMs = block.getTimeStamp()
                    if state:
                        print("时间戳[ms]:", timeMs)
                    state, quat = block.getAhrsQuaternion()
                    if state:
                        print("四元数[w x y z]:", quat.element.w, quat.element.x, quat.element.y, quat.element.z)
                    state, euler = block.getAhrsEuler()
                    if state:
                        print("欧拉角[roll pitch yaw]:", euler.angle.roll, euler.angle.pitch, euler.angle.yaw)
                    state, acc = block.getAcc()
                    if state:
                        print("加速度[x y z]:", acc.axis.x, acc.axis.y, acc.axis.z)
                    state, gyro = block.getGyro()
                    if state:
                        print("陀螺仪[x y z]:", gyro.axis.x, gyro.axis.y, gyro.axis.z)
                    state, mag = block.getMag()
                    if state:
                        print("磁力计[x y z]:", mag.axis.x, mag.axis.y, mag.axis.z)
                    state, linAcc = block.getLinAcc()
                    if state:
                        print("线性加速度[x y z]:", linAcc.axis.x, linAcc.axis.y, linAcc.axis.z)
                elif isinstance(block, zlb.AntValueBlock):
                    print('手指弯曲 数据 类型------------------------------------------------')
                    pktId = block.getIdBlock()
                    print("rfId = ", hex(pktId.rfId), ", flowId =", pktId.flowId)
                    state, antValue = block.getAntValue()
                    if state:
                        print('手指弯曲值:', state, antValue)
                elif isinstance(block, zlb.BatteryBlock):
                    print('电池 数据 类型------------------------------------------------')
                    pktId = block.getIdBlock()
                    state, mv = block.getAdcMv()
                    print("rfId = ", hex(pktId.rfId))
                    if state:
                        print("电池电压:", mv, "mv")
                    state, level = block.getLevel()
                    if state:
                        print("电池电量:", level, "%")
                elif isinstance(block, zlb.api.ul_UploadDataFormatBlock):
                    format = block.uploadDataFormat
                    pkId = block.pkId
                    print(f'rfId[{hex(pkId.rfId)}],上报数据格式:{hex(format)}')
                elif isinstance(block, zlb.api.hl_FlowIdFormatBlock):
                    print('上传数据流水号格式', block.flowIdFormat)
                else:
                    if isinstance(block, zlb.CtrlBaseBlock):
                        pkId = block.getIdBlock()
                        print("数据类型", type(block))
                        print(f'rfId[{hex(pkId.rfId)}], cmdId[{hex(pkId.cmdId)}],subCmdId[{hex(pkId.subCmdId)}]')
                        print(f'error[{hex(block.isError())}], errCode[{hex(block.getErrCode())}]')
                    else:
                        print("其他数据类型", type(block))
    except Exception as e:
        print(f'数据解析异常 [Error] -> {e}')
        print(data.hex(' '))


__all__ = [test]

if __name__ == '__main__':
    test()

