# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from cobo_waas2.models.cobo_safe_delegate import CoboSafeDelegate
from cobo_waas2.models.safe_wallet_delegates import SafeWalletDelegates

from cobo_waas2.api_client import ApiClient, RequestSerialized
from cobo_waas2.api_response import ApiResponse
from cobo_waas2.rest import RESTResponseType


class WalletsSmartContractWalletsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: ApiClient = None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def list_safe_wallet_delegates(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        safe_wallet_delegates: Annotated[Optional[SafeWalletDelegates], Field(description="The request body to query the Delegates of a Safe{Wallet}.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> List[CoboSafeDelegate]:
        """List Delegates

        This operation retrieves all available Delegates of a Safe\\{Wallet\\} for a given transfer or contract call request. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param safe_wallet_delegates: The request body to query the Delegates of a Safe{Wallet}.
        :type safe_wallet_delegates: SafeWalletDelegates
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_safe_wallet_delegates_serialize(
            wallet_id=wallet_id,
            safe_wallet_delegates=safe_wallet_delegates,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[CoboSafeDelegate]",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_safe_wallet_delegates_with_http_info(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        safe_wallet_delegates: Annotated[Optional[SafeWalletDelegates], Field(description="The request body to query the Delegates of a Safe{Wallet}.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> ApiResponse[List[CoboSafeDelegate]]:
        """List Delegates

        This operation retrieves all available Delegates of a Safe\\{Wallet\\} for a given transfer or contract call request. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param safe_wallet_delegates: The request body to query the Delegates of a Safe{Wallet}.
        :type safe_wallet_delegates: SafeWalletDelegates
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_safe_wallet_delegates_serialize(
            wallet_id=wallet_id,
            safe_wallet_delegates=safe_wallet_delegates,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[CoboSafeDelegate]",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_safe_wallet_delegates_without_preload_content(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        safe_wallet_delegates: Annotated[Optional[SafeWalletDelegates], Field(description="The request body to query the Delegates of a Safe{Wallet}.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> RESTResponseType:
        """List Delegates

        This operation retrieves all available Delegates of a Safe\\{Wallet\\} for a given transfer or contract call request. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param safe_wallet_delegates: The request body to query the Delegates of a Safe{Wallet}.
        :type safe_wallet_delegates: SafeWalletDelegates
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_safe_wallet_delegates_serialize(
            wallet_id=wallet_id,
            safe_wallet_delegates=safe_wallet_delegates,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[CoboSafeDelegate]",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _list_safe_wallet_delegates_serialize(
        self,
        wallet_id,
        safe_wallet_delegates,
    ) -> RequestSerialized:
        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if wallet_id is not None:
            _path_params['wallet_id'] = wallet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if safe_wallet_delegates is not None:
            _body_params = safe_wallet_delegates

        # set the HTTP header `Accept`
        _header_params = {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wallets/{wallet_id}/smart_contracts/delegates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
        )
