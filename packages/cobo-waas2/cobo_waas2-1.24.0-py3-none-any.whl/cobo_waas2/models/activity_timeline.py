# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.activity_action import ActivityAction
from typing import Optional, Set
from typing_extensions import Self


class ActivityTimeline(BaseModel):
    """
    The timeline of the staking activity.
    """  # noqa: E501
    action: ActivityAction
    status: Optional[StrictStr] = Field(default=None, description="The status of the action. Possible values include:   - `Success`: The action is successfully completed.   - `Processing`: The action is being processed.   - `Failed`: The action has failed. ")
    timestamp: Optional[StrictInt] = Field(default=None, description="The time when the action took place, in Unix timestamp format, measured in milliseconds.  - For the `Submitted` action, `timestamp` represents the time the staking, unstaking, or withdrawal request was created.  - For the `BTCConfirmation` action, `timestamp` represents the time when the request was confirmed on the Bitcoin chain, or when the confirmation failed. - For the `BabylonConfirmation` action, `timestamp` represents the time when the request was confirmed by the Babylon protocol, or when the confirmation failed. ")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the corresponding transaction.")
    __properties: ClassVar[List[str]] = ["action", "status", "timestamp", "transaction_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityTimeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityTimeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "transaction_id": obj.get("transaction_id")
        })
        return _obj


