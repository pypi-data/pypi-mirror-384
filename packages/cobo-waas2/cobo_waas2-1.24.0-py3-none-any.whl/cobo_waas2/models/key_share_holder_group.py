# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.key_share_holder import KeyShareHolder
from cobo_waas2.models.key_share_holder_group_status import KeyShareHolderGroupStatus
from cobo_waas2.models.key_share_holder_group_type import KeyShareHolderGroupType
from cobo_waas2.models.tss_groups import TSSGroups
from typing import Optional, Set
from typing_extensions import Self


class KeyShareHolderGroup(BaseModel):
    """
    The data for key share holder group information.
    """  # noqa: E501
    key_share_holder_group_id: Optional[StrictStr] = Field(default=None, description="The key share holder group ID.")
    type: Optional[KeyShareHolderGroupType] = None
    tss_key_share_groups: Optional[List[TSSGroups]] = None
    key_share_holders: Optional[List[KeyShareHolder]] = None
    participants: Optional[StrictInt] = Field(default=None, description="The number of key share holders in this key share holder group.")
    threshold: Optional[StrictInt] = Field(default=None, description="The number of key share holders required to approve each operation in this key share holder group.")
    status: Optional[KeyShareHolderGroupStatus] = None
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The key share holder group's creation time in Unix timestamp format, measured in milliseconds.")
    __properties: ClassVar[List[str]] = ["key_share_holder_group_id", "type", "tss_key_share_groups", "key_share_holders", "participants", "threshold", "status", "created_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyShareHolderGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tss_key_share_groups (list)
        _items = []
        if self.tss_key_share_groups:
            for _item in self.tss_key_share_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tss_key_share_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key_share_holders (list)
        _items = []
        if self.key_share_holders:
            for _item in self.key_share_holders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['key_share_holders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyShareHolderGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key_share_holder_group_id": obj.get("key_share_holder_group_id"),
            "type": obj.get("type"),
            "tss_key_share_groups": [TSSGroups.from_dict(_item) for _item in obj["tss_key_share_groups"]] if obj.get("tss_key_share_groups") is not None else None,
            "key_share_holders": [KeyShareHolder.from_dict(_item) for _item in obj["key_share_holders"]] if obj.get("key_share_holders") is not None else None,
            "participants": obj.get("participants"),
            "threshold": obj.get("threshold"),
            "status": obj.get("status"),
            "created_timestamp": obj.get("created_timestamp")
        })
        return _obj


