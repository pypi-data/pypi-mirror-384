# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.transaction_utxo import TransactionUtxo
from cobo_waas2.models.wallet_subtype import WalletSubtype
from typing import Optional, Set
from typing_extensions import Self


class CustodialWeb3TransferSource(BaseModel):
    """
    The information about the transaction source types `Web3`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.  - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`. - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.  For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage).  Switch between the tabs to display the properties for different transaction sources. 
    """  # noqa: E501
    source_type: WalletSubtype
    wallet_id: StrictStr = Field(description="The wallet ID.")
    address: Optional[StrictStr] = Field(default=None, description="Indicates the wallet address to be used as the source of funds. - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`. - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.  For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage). ")
    included_utxos: Optional[List[TransactionUtxo]] = None
    excluded_utxos: Optional[List[TransactionUtxo]] = None
    __properties: ClassVar[List[str]] = ["source_type", "wallet_id", "address", "included_utxos", "excluded_utxos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustodialWeb3TransferSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in included_utxos (list)
        _items = []
        if self.included_utxos:
            for _item in self.included_utxos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['included_utxos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_utxos (list)
        _items = []
        if self.excluded_utxos:
            for _item in self.excluded_utxos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['excluded_utxos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustodialWeb3TransferSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source_type": obj.get("source_type"),
            "wallet_id": obj.get("wallet_id"),
            "address": obj.get("address"),
            "included_utxos": [TransactionUtxo.from_dict(_item) for _item in obj["included_utxos"]] if obj.get("included_utxos") is not None else None,
            "excluded_utxos": [TransactionUtxo.from_dict(_item) for _item in obj["excluded_utxos"]] if obj.get("excluded_utxos") is not None else None
        })
        return _obj


