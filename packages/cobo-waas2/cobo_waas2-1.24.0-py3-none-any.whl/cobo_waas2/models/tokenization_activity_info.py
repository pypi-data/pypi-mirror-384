# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from cobo_waas2.models.tokenization_activity_status import TokenizationActivityStatus
from cobo_waas2.models.tokenization_operation_type import TokenizationOperationType
from cobo_waas2.models.tokenization_token_operation_source import TokenizationTokenOperationSource
from cobo_waas2.models.transaction_initiator_type import TransactionInitiatorType
from typing import Optional, Set
from typing_extensions import Self


class TokenizationActivityInfo(BaseModel):
    """
    TokenizationActivityInfo
    """  # noqa: E501
    activity_id: StrictStr = Field(description="The ID of the activity.")
    token_id: StrictStr = Field(description="The token ID.")
    type: TokenizationOperationType
    status: TokenizationActivityStatus
    source: TokenizationTokenOperationSource
    initiator: StrictStr = Field(description="The initiator of the activity.")
    initiator_type: TransactionInitiatorType
    transaction_ids: List[StrictStr] = Field(description="The IDs of the corresponding transactions of the activity.")
    created_timestamp: StrictInt = Field(description="The creation timestamp of the activity in milliseconds since the Unix epoch.")
    updated_timestamp: StrictInt = Field(description="The last update timestamp of the activity in milliseconds since the Unix epoch.")
    __properties: ClassVar[List[str]] = ["activity_id", "token_id", "type", "status", "source", "initiator", "initiator_type", "transaction_ids", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenizationActivityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenizationActivityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity_id": obj.get("activity_id"),
            "token_id": obj.get("token_id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "source": TokenizationTokenOperationSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "initiator": obj.get("initiator"),
            "initiator_type": obj.get("initiator_type"),
            "transaction_ids": obj.get("transaction_ids"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


