# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self


class ApiLogDetails(BaseModel):
    """
    The information about an API log.
    """  # noqa: E501
    log_id: StrictStr = Field(description="A unique identifier for the API log, used for tracking.")
    api_method: StrictStr = Field(description="The HTTP method used for the API request.")
    api_endpoint: StrictStr = Field(description="The endpoint of the API request.")
    status_code: StrictInt = Field(description="The HTTP status code returned by the API request.")
    ip_address: StrictStr = Field(description="The client's IP address that made the API request.")
    request_timestamp: StrictInt = Field(description="The time when the API request was created, in Unix timestamp format, measured in milliseconds.")
    api_key: StrictStr = Field(description="The API key used to call the API. For more details, refer to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key).")
    response_body: StrictStr = Field(description="The response body of the API request.")
    var_query_params: StrictStr = Field(description="The query parameters of the API request.", alias="query_params")
    request_body: StrictStr = Field(description="The request body of the API request.")
    __properties: ClassVar[List[str]] = ["log_id", "api_method", "api_endpoint", "status_code", "ip_address", "request_timestamp", "api_key", "response_body", "query_params", "request_body"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiLogDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiLogDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "log_id": obj.get("log_id"),
            "api_method": obj.get("api_method"),
            "api_endpoint": obj.get("api_endpoint"),
            "status_code": obj.get("status_code"),
            "ip_address": obj.get("ip_address"),
            "request_timestamp": obj.get("request_timestamp"),
            "api_key": obj.get("api_key"),
            "response_body": obj.get("response_body"),
            "query_params": obj.get("query_params"),
            "request_body": obj.get("request_body")
        })
        return _obj


