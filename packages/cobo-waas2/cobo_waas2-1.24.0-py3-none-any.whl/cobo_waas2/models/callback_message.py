# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.transaction import Transaction
from typing import Optional, Set
from typing_extensions import Self


class CallbackMessage(BaseModel):
    """
    The information about a callback message.
    """  # noqa: E501
    id: StrictStr = Field(description="The callback message ID.")
    created_timestamp: StrictInt = Field(description="The time when the callback message was created, in Unix timestamp format, measured in milliseconds.")
    updated_timestamp: StrictInt = Field(description="The time when the callback message was updated, in Unix timestamp format, measured in milliseconds.")
    request_id: StrictStr = Field(description="The request ID of the transaction.")
    transaction_id: StrictStr = Field(description="The transaction ID.")
    wallet_id: Optional[StrictStr] = Field(default=None, description="The wallet ID.")
    url: StrictStr = Field(description="The callback endpoint URL.")
    data: Transaction
    status: StrictStr = Field(description="The callback message status. Possible values include `Denied`, `Approved`, and `Failed`. ")
    result: Optional[StrictStr] = Field(default=None, description="The callback message result. Possible values include `ok` and `deny`. ")
    __properties: ClassVar[List[str]] = ["id", "created_timestamp", "updated_timestamp", "request_id", "transaction_id", "wallet_id", "url", "data", "status", "result"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Denied', 'Approved', 'Failed']):
            raise ValueError("must be one of enum values ('Denied', 'Approved', 'Failed')")
        return value

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ok', 'deny']):
            raise ValueError("must be one of enum values ('ok', 'deny')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallbackMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallbackMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "request_id": obj.get("request_id"),
            "transaction_id": obj.get("transaction_id"),
            "wallet_id": obj.get("wallet_id"),
            "url": obj.get("url"),
            "data": Transaction.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "status": obj.get("status"),
            "result": obj.get("result")
        })
        return _obj


