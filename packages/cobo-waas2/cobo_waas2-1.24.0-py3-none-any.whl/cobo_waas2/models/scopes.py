# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.wallet_subtype import WalletSubtype
from cobo_waas2.models.wallet_type import WalletType
from typing import Optional, Set
from typing_extensions import Self


class Scopes(BaseModel):
    """
    The wallet scopes associated with this API key.
    """  # noqa: E501
    wallet_types: Optional[List[WalletType]] = Field(default=None, description="The list of wallet types that this API key can access. Possible values include:   - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)   - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)   - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)   - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) ")
    wallet_subtypes: Optional[List[WalletSubtype]] = Field(default=None, description="The list of wallet sub-types that this API key can access. Possible values include:   - `Asset`: Custodial Wallets (Asset Wallets).   - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).   - `User-Controlled`: MPC Wallets (User-Controlled Wallets).   - `Safe{Wallet}`: Smart Contract Wallets (Safe).   - `Main`: Exchange Wallets (Main Account).   - `Sub`: Exchange Wallets (Sub Account). ")
    wallet_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of wallet IDs that this API key can access.")
    vault_ids: Optional[List[StrictStr]] = Field(default=None, description="(Applicable to MPC Wallets only) The list of vault IDs that this API key can access.")
    project_ids: Optional[List[StrictStr]] = Field(default=None, description="(Applicable to MPC Wallets only) The list of project IDs that this API key can access.")
    __properties: ClassVar[List[str]] = ["wallet_types", "wallet_subtypes", "wallet_ids", "vault_ids", "project_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scopes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scopes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wallet_types": obj.get("wallet_types"),
            "wallet_subtypes": obj.get("wallet_subtypes"),
            "wallet_ids": obj.get("wallet_ids"),
            "vault_ids": obj.get("vault_ids"),
            "project_ids": obj.get("project_ids")
        })
        return _obj


