# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class PaymentWalletBalance(BaseModel):
    """
    PaymentWalletBalance
    """  # noqa: E501
    wallet_id: StrictStr = Field(description="The unique identifier of the wallet.")
    token_id: StrictStr = Field(description="The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.")
    swept_balance: Optional[StrictStr] = Field(default=None, description="The total amount of the token on the sweep-to address of the payment wallet.")
    available_balance: Optional[StrictStr] = Field(default=None, description="The balance available for settlement or refund, in the specified cryptocurrency.")
    total_balance: Optional[StrictStr] = Field(default=None, description="The total balance of the token for the payment wallet.")
    above_sweep_threshold_balance: Optional[StrictStr] = Field(default=None, description="The total amount of funds that exceed the sweep threshold across all receiving addresses in the payment wallet. When the balance on a receiving address exceeds the sweep threshold, those funds become eligible for automatic sweeping and are included in this balance.")
    __properties: ClassVar[List[str]] = ["wallet_id", "token_id", "swept_balance", "available_balance", "total_balance", "above_sweep_threshold_balance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentWalletBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentWalletBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wallet_id": obj.get("wallet_id"),
            "token_id": obj.get("token_id"),
            "swept_balance": obj.get("swept_balance"),
            "available_balance": obj.get("available_balance"),
            "total_balance": obj.get("total_balance"),
            "above_sweep_threshold_balance": obj.get("above_sweep_threshold_balance")
        })
        return _obj


