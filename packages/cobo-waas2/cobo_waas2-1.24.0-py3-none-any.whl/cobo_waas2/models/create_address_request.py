# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cobo_waas2.models.address_encoding import AddressEncoding
from typing import Optional, Set
from typing_extensions import Self


class CreateAddressRequest(BaseModel):
    """
    CreateAddressRequest
    """  # noqa: E501
    chain_id: StrictStr = Field(description="The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).")
    count: Annotated[int, Field(le=50, strict=True, ge=1)] = Field(description="The number of addresses to create. This property will be ignored if you are generating tweaked Taproot addresses.")
    taproot_script_tree_hashes: Optional[List[StrictStr]] = Field(default=None, description="A list of script tree hashes used to generate a tweaked Taproot address. This property is required only if you want to generate tweaked Taproot addresses.")
    taproot_internal_address: Optional[StrictStr] = Field(default=None, description="The original Taproot address to be tweaked. This property is required only if you want to generate tweaked Taproot addresses.")
    encoding: Optional[AddressEncoding] = None
    __properties: ClassVar[List[str]] = ["chain_id", "count", "taproot_script_tree_hashes", "taproot_internal_address", "encoding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAddressRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAddressRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chain_id": obj.get("chain_id"),
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "taproot_script_tree_hashes": obj.get("taproot_script_tree_hashes"),
            "taproot_internal_address": obj.get("taproot_internal_address"),
            "encoding": obj.get("encoding")
        })
        return _obj


