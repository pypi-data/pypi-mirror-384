# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.activity_extra import ActivityExtra
from cobo_waas2.models.activity_status import ActivityStatus
from cobo_waas2.models.activity_timeline import ActivityTimeline
from cobo_waas2.models.activity_type import ActivityType
from cobo_waas2.models.staking_pool_id import StakingPoolId
from cobo_waas2.models.transaction_initiator_type import TransactionInitiatorType
from cobo_waas2.models.transaction_request_fee import TransactionRequestFee
from typing import Optional, Set
from typing_extensions import Self


class Activity(BaseModel):
    """
    The staking activity.
    """  # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The activity ID.")
    initiator: Optional[StrictStr] = Field(default=None, description="The initiator of the activity.")
    initiator_type: Optional[TransactionInitiatorType] = None
    type: Optional[ActivityType] = None
    wallet_id: Optional[StrictStr] = Field(default=None, description="The staker's wallet ID.")
    address: Optional[StrictStr] = Field(default=None, description="The staker's wallet address.")
    pool_id: StakingPoolId
    token_id: StrictStr = Field(description="The token ID.")
    staking_id: Optional[StrictStr] = Field(default=None, description="The ID of the corresponding staking position.")
    request_ids: Optional[List[StrictStr]] = Field(default=None, description="The request IDs of the corresponding transactions of the activity.")
    amount: StrictStr = Field(description="The staking amount.")
    transaction_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the corresponding transactions of the activity.")
    timeline: Optional[List[ActivityTimeline]] = Field(default=None, description="The timeline of the activity.")
    fee: Optional[TransactionRequestFee] = None
    status: ActivityStatus
    extra: Optional[ActivityExtra] = None
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the activity was created.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the activity was last updated.")
    __properties: ClassVar[List[str]] = ["id", "initiator", "initiator_type", "type", "wallet_id", "address", "pool_id", "token_id", "staking_id", "request_ids", "amount", "transaction_ids", "timeline", "fee", "status", "extra", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in timeline (list)
        _items = []
        if self.timeline:
            for _item in self.timeline:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeline'] = _items
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extra
        if self.extra:
            _dict['extra'] = self.extra.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "initiator": obj.get("initiator"),
            "initiator_type": obj.get("initiator_type"),
            "type": obj.get("type"),
            "wallet_id": obj.get("wallet_id"),
            "address": obj.get("address"),
            "pool_id": obj.get("pool_id"),
            "token_id": obj.get("token_id"),
            "staking_id": obj.get("staking_id"),
            "request_ids": obj.get("request_ids"),
            "amount": obj.get("amount"),
            "transaction_ids": obj.get("transaction_ids"),
            "timeline": [ActivityTimeline.from_dict(_item) for _item in obj["timeline"]] if obj.get("timeline") is not None else None,
            "fee": TransactionRequestFee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "status": obj.get("status"),
            "extra": ActivityExtra.from_dict(obj["extra"]) if obj.get("extra") is not None else None,
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


