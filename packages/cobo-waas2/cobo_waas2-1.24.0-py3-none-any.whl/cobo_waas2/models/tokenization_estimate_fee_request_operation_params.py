# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cobo_waas2.models.tokenization_burn_estimate_fee_params import TokenizationBurnEstimateFeeParams
from cobo_waas2.models.tokenization_contract_call_estimate_fee_params import TokenizationContractCallEstimateFeeParams
from cobo_waas2.models.tokenization_issue_estimate_fee_params import TokenizationIssueEstimateFeeParams
from cobo_waas2.models.tokenization_mint_estimate_fee_params import TokenizationMintEstimateFeeParams
from cobo_waas2.models.tokenization_pause_estimate_fee_params import TokenizationPauseEstimateFeeParams
from cobo_waas2.models.tokenization_toggle_allowlist_estimate_fee_params import TokenizationToggleAllowlistEstimateFeeParams
from cobo_waas2.models.tokenization_unpause_estimate_fee_params import TokenizationUnpauseEstimateFeeParams
from cobo_waas2.models.tokenization_update_allowlist_addresses_estimate_fee_params import TokenizationUpdateAllowlistAddressesEstimateFeeParams
from cobo_waas2.models.tokenization_update_blocklist_addresses_estimate_fee_params import TokenizationUpdateBlocklistAddressesEstimateFeeParams
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

TOKENIZATIONESTIMATEFEEREQUESTOPERATIONPARAMS_ONE_OF_SCHEMAS = ["TokenizationBurnEstimateFeeParams", "TokenizationContractCallEstimateFeeParams", "TokenizationIssueEstimateFeeParams", "TokenizationMintEstimateFeeParams", "TokenizationPauseEstimateFeeParams", "TokenizationToggleAllowlistEstimateFeeParams", "TokenizationUnpauseEstimateFeeParams", "TokenizationUpdateAllowlistAddressesEstimateFeeParams", "TokenizationUpdateBlocklistAddressesEstimateFeeParams"]

class TokenizationEstimateFeeRequestOperationParams(BaseModel):
    """
    TokenizationEstimateFeeRequestOperationParams
    """
    # data type: TokenizationIssueEstimateFeeParams
    oneof_schema_1_validator: Optional[TokenizationIssueEstimateFeeParams] = None
    # data type: TokenizationMintEstimateFeeParams
    oneof_schema_2_validator: Optional[TokenizationMintEstimateFeeParams] = None
    # data type: TokenizationBurnEstimateFeeParams
    oneof_schema_3_validator: Optional[TokenizationBurnEstimateFeeParams] = None
    # data type: TokenizationPauseEstimateFeeParams
    oneof_schema_4_validator: Optional[TokenizationPauseEstimateFeeParams] = None
    # data type: TokenizationUnpauseEstimateFeeParams
    oneof_schema_5_validator: Optional[TokenizationUnpauseEstimateFeeParams] = None
    # data type: TokenizationUpdateAllowlistAddressesEstimateFeeParams
    oneof_schema_6_validator: Optional[TokenizationUpdateAllowlistAddressesEstimateFeeParams] = None
    # data type: TokenizationUpdateBlocklistAddressesEstimateFeeParams
    oneof_schema_7_validator: Optional[TokenizationUpdateBlocklistAddressesEstimateFeeParams] = None
    # data type: TokenizationToggleAllowlistEstimateFeeParams
    oneof_schema_8_validator: Optional[TokenizationToggleAllowlistEstimateFeeParams] = None
    # data type: TokenizationContractCallEstimateFeeParams
    oneof_schema_9_validator: Optional[TokenizationContractCallEstimateFeeParams] = None
    actual_instance: Optional[Union[TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams]] = None
    one_of_schemas: Set[str] = { "TokenizationBurnEstimateFeeParams", "TokenizationContractCallEstimateFeeParams", "TokenizationIssueEstimateFeeParams", "TokenizationMintEstimateFeeParams", "TokenizationPauseEstimateFeeParams", "TokenizationToggleAllowlistEstimateFeeParams", "TokenizationUnpauseEstimateFeeParams", "TokenizationUpdateAllowlistAddressesEstimateFeeParams", "TokenizationUpdateBlocklistAddressesEstimateFeeParams" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TokenizationEstimateFeeRequestOperationParams.model_construct()
        error_messages = []
        match = 0
        # validate data type: TokenizationIssueEstimateFeeParams
        if not isinstance(v, TokenizationIssueEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationIssueEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationMintEstimateFeeParams
        if not isinstance(v, TokenizationMintEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationMintEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationBurnEstimateFeeParams
        if not isinstance(v, TokenizationBurnEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationBurnEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationPauseEstimateFeeParams
        if not isinstance(v, TokenizationPauseEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationPauseEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationUnpauseEstimateFeeParams
        if not isinstance(v, TokenizationUnpauseEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationUnpauseEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationUpdateAllowlistAddressesEstimateFeeParams
        if not isinstance(v, TokenizationUpdateAllowlistAddressesEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationUpdateAllowlistAddressesEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationUpdateBlocklistAddressesEstimateFeeParams
        if not isinstance(v, TokenizationUpdateBlocklistAddressesEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationUpdateBlocklistAddressesEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationToggleAllowlistEstimateFeeParams
        if not isinstance(v, TokenizationToggleAllowlistEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationToggleAllowlistEstimateFeeParams`")
        else:
            match += 1
        # validate data type: TokenizationContractCallEstimateFeeParams
        if not isinstance(v, TokenizationContractCallEstimateFeeParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenizationContractCallEstimateFeeParams`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TokenizationEstimateFeeRequestOperationParams with oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TokenizationEstimateFeeRequestOperationParams with oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("operation_type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `operation_type` in the input.")

        # check if data type is `TokenizationBurnEstimateFeeParams`
        if _data_type == "Burn":
            instance.actual_instance = TokenizationBurnEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationContractCallEstimateFeeParams`
        if _data_type == "ContractCall":
            instance.actual_instance = TokenizationContractCallEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationIssueEstimateFeeParams`
        if _data_type == "Issue":
            instance.actual_instance = TokenizationIssueEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationMintEstimateFeeParams`
        if _data_type == "Mint":
            instance.actual_instance = TokenizationMintEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationPauseEstimateFeeParams`
        if _data_type == "Pause":
            instance.actual_instance = TokenizationPauseEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationToggleAllowlistEstimateFeeParams`
        if _data_type == "ToggleAllowlist":
            instance.actual_instance = TokenizationToggleAllowlistEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUnpauseEstimateFeeParams`
        if _data_type == "Unpause":
            instance.actual_instance = TokenizationUnpauseEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUpdateAllowlistAddressesEstimateFeeParams`
        if _data_type == "UpdateAllowlistAddresses":
            instance.actual_instance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUpdateBlocklistAddressesEstimateFeeParams`
        if _data_type == "UpdateBlocklistAddresses":
            instance.actual_instance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationBurnEstimateFeeParams`
        if _data_type == "TokenizationBurnEstimateFeeParams":
            instance.actual_instance = TokenizationBurnEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationContractCallEstimateFeeParams`
        if _data_type == "TokenizationContractCallEstimateFeeParams":
            instance.actual_instance = TokenizationContractCallEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationIssueEstimateFeeParams`
        if _data_type == "TokenizationIssueEstimateFeeParams":
            instance.actual_instance = TokenizationIssueEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationMintEstimateFeeParams`
        if _data_type == "TokenizationMintEstimateFeeParams":
            instance.actual_instance = TokenizationMintEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationPauseEstimateFeeParams`
        if _data_type == "TokenizationPauseEstimateFeeParams":
            instance.actual_instance = TokenizationPauseEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationToggleAllowlistEstimateFeeParams`
        if _data_type == "TokenizationToggleAllowlistEstimateFeeParams":
            instance.actual_instance = TokenizationToggleAllowlistEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUnpauseEstimateFeeParams`
        if _data_type == "TokenizationUnpauseEstimateFeeParams":
            instance.actual_instance = TokenizationUnpauseEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUpdateAllowlistAddressesEstimateFeeParams`
        if _data_type == "TokenizationUpdateAllowlistAddressesEstimateFeeParams":
            instance.actual_instance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.from_json(json_str)
            return instance

        # check if data type is `TokenizationUpdateBlocklistAddressesEstimateFeeParams`
        if _data_type == "TokenizationUpdateBlocklistAddressesEstimateFeeParams":
            instance.actual_instance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.from_json(json_str)
            return instance

        return instance
        # deserialize data into TokenizationIssueEstimateFeeParams
        try:
            instance.actual_instance = TokenizationIssueEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationMintEstimateFeeParams
        try:
            instance.actual_instance = TokenizationMintEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationBurnEstimateFeeParams
        try:
            instance.actual_instance = TokenizationBurnEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationPauseEstimateFeeParams
        try:
            instance.actual_instance = TokenizationPauseEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationUnpauseEstimateFeeParams
        try:
            instance.actual_instance = TokenizationUnpauseEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationUpdateAllowlistAddressesEstimateFeeParams
        try:
            instance.actual_instance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationUpdateBlocklistAddressesEstimateFeeParams
        try:
            instance.actual_instance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationToggleAllowlistEstimateFeeParams
        try:
            instance.actual_instance = TokenizationToggleAllowlistEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenizationContractCallEstimateFeeParams
        try:
            instance.actual_instance = TokenizationContractCallEstimateFeeParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TokenizationEstimateFeeRequestOperationParams with oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            return instance
            # raise ValueError("No match found when deserializing the JSON string into TokenizationEstimateFeeRequestOperationParams with oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


