# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.transaction_approval_result import TransactionApprovalResult
from cobo_waas2.models.transaction_user_approval_detail import TransactionUserApprovalDetail
from typing import Optional, Set
from typing_extensions import Self


class TransactionRoleApprovalDetail(BaseModel):
    """
    The role approval data for transaction.
    """  # noqa: E501
    result: Optional[TransactionApprovalResult] = None
    review_threshold: Optional[StrictInt] = Field(default=None, description="The threshold for passing the review of this role.")
    initiator: Optional[StrictStr] = Field(default=None, description="The initiator of the transaction.")
    complete_time: Optional[StrictStr] = Field(default=None, description="Time to complete the review.")
    user_details: Optional[List[TransactionUserApprovalDetail]] = None
    __properties: ClassVar[List[str]] = ["result", "review_threshold", "initiator", "complete_time", "user_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionRoleApprovalDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_details (list)
        _items = []
        if self.user_details:
            for _item in self.user_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['user_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionRoleApprovalDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "result": obj.get("result"),
            "review_threshold": obj.get("review_threshold"),
            "initiator": obj.get("initiator"),
            "complete_time": obj.get("complete_time"),
            "user_details": [TransactionUserApprovalDetail.from_dict(_item) for _item in obj["user_details"]] if obj.get("user_details") is not None else None
        })
        return _obj


