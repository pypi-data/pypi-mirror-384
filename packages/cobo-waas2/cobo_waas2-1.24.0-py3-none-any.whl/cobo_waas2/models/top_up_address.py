# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class TopUpAddress(BaseModel):
    """
    TopUpAddress
    """  # noqa: E501
    address: StrictStr = Field(description="The dedicated top-up address assigned to a specific payer under a merchant on a specified chain.")
    payer_id: StrictStr = Field(description="A unique identifier assigned by Cobo to track and identify individual payers.")
    custom_payer_id: StrictStr = Field(description="A unique identifier assigned by the developer to track and identify individual payers in their system.")
    merchant_id: StrictStr = Field(description="The merchant ID.")
    token_id: StrictStr = Field(description="The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.")
    chain: Optional[StrictStr] = Field(default=None, description="The chain ID.")
    developer_fee_rate: Optional[StrictStr] = Field(default=None, description="The developer fee rate applied to top-up transactions made to this address. Expressed as a decimal string where \"0.1\" represents 10%.")
    min_amount: StrictStr = Field(description="The minimum top-up amount allowed for this address. Top-ups below this threshold will not be credited to merchant or developer funds.")
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The creation time of the top-up address, represented as a UNIX timestamp in seconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The last update time of the top-up address, represented as a UNIX timestamp in seconds.")
    __properties: ClassVar[List[str]] = ["address", "payer_id", "custom_payer_id", "merchant_id", "token_id", "chain", "developer_fee_rate", "min_amount", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopUpAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopUpAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "payer_id": obj.get("payer_id"),
            "custom_payer_id": obj.get("custom_payer_id"),
            "merchant_id": obj.get("merchant_id"),
            "token_id": obj.get("token_id"),
            "chain": obj.get("chain"),
            "developer_fee_rate": obj.get("developer_fee_rate"),
            "min_amount": obj.get("min_amount"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


