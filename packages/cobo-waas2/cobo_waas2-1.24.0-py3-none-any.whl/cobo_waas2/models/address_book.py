# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.address_encoding import AddressEncoding
from cobo_waas2.models.wallet_subtype import WalletSubtype
from cobo_waas2.models.wallet_type import WalletType
from typing import Optional, Set
from typing_extensions import Self


class AddressBook(BaseModel):
    """
    The information of an Address Book entry.
    """  # noqa: E501
    org_id: StrictStr = Field(description="Organization ID.")
    entry_id: StrictStr = Field(description="Address Book entry ID.")
    address: StrictStr = Field(description="Wallet address.")
    memo: Optional[StrictStr] = Field(default=None, description="Optional memo or tag required by some chains.")
    wallet_name: Optional[StrictStr] = Field(default=None, description="Wallet name.")
    wallet_type: Optional[WalletType] = None
    wallet_subtype: Optional[WalletSubtype] = None
    label: StrictStr = Field(description="A user-defined label for the address.")
    chain_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of chain IDs.")
    email: Optional[StrictStr] = Field(default=None, description="Email of the address owner.")
    encoding: Optional[AddressEncoding] = None
    __properties: ClassVar[List[str]] = ["org_id", "entry_id", "address", "memo", "wallet_name", "wallet_type", "wallet_subtype", "label", "chain_ids", "email", "encoding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressBook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressBook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "org_id": obj.get("org_id"),
            "entry_id": obj.get("entry_id"),
            "address": obj.get("address"),
            "memo": obj.get("memo"),
            "wallet_name": obj.get("wallet_name"),
            "wallet_type": obj.get("wallet_type"),
            "wallet_subtype": obj.get("wallet_subtype"),
            "label": obj.get("label"),
            "chain_ids": obj.get("chain_ids"),
            "email": obj.get("email"),
            "encoding": obj.get("encoding")
        })
        return _obj


