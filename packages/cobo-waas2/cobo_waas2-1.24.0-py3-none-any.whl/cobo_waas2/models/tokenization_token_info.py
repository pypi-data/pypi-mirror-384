# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.tokenization_status import TokenizationStatus
from typing import Optional, Set
from typing_extensions import Self


class TokenizationTokenInfo(BaseModel):
    """
    TokenizationTokenInfo
    """  # noqa: E501
    token_id: StrictStr = Field(description="The unique token identifier.")
    chain_id: StrictStr = Field(description="The chain ID of the tokenization contract.")
    token_address: Optional[StrictStr] = Field(default=None, description="The address of the token contract.")
    token_name: Optional[StrictStr] = Field(default=None, description="The name of the token.")
    token_symbol: StrictStr = Field(description="The unique token symbol.")
    decimals: StrictInt = Field(description="The number of decimals of the token.")
    token_access_activated: Optional[StrictBool] = Field(default=None, description="Whether the allowlist feature is activated for the token.")
    status: TokenizationStatus
    total_supply: Optional[StrictStr] = Field(default=None, description="The total supply of the token.")
    holdings: Optional[StrictStr] = Field(default=None, description="The amount of tokens held by the organization.")
    __properties: ClassVar[List[str]] = ["token_id", "chain_id", "token_address", "token_name", "token_symbol", "decimals", "token_access_activated", "status", "total_supply", "holdings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenizationTokenInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenizationTokenInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token_id": obj.get("token_id"),
            "chain_id": obj.get("chain_id"),
            "token_address": obj.get("token_address"),
            "token_name": obj.get("token_name"),
            "token_symbol": obj.get("token_symbol"),
            "decimals": obj.get("decimals"),
            "token_access_activated": obj.get("token_access_activated"),
            "status": obj.get("status"),
            "total_supply": obj.get("total_supply"),
            "holdings": obj.get("holdings")
        })
        return _obj


