# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.transaction_selected_utxo import TransactionSelectedUtxo
from cobo_waas2.models.transaction_utxo_change import TransactionUtxoChange
from typing import Optional, Set
from typing_extensions import Self


class TransactionRawTxInfo(BaseModel):
    """
    The raw transaction information.
    """  # noqa: E501
    used_nonce: Optional[StrictInt] = Field(default=None, description="The transaction nonce.")
    selected_utxos: Optional[List[TransactionSelectedUtxo]] = Field(default=None, description="The selected UTXOs to be consumed in the transaction.")
    raw_tx: Optional[StrictStr] = Field(default=None, description="The raw transaction data.")
    unsigned_raw_tx: Optional[StrictStr] = Field(default=None, description="The unsigned raw transaction data.")
    utxo_change: Optional[TransactionUtxoChange] = None
    __properties: ClassVar[List[str]] = ["used_nonce", "selected_utxos", "raw_tx", "unsigned_raw_tx", "utxo_change"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionRawTxInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in selected_utxos (list)
        _items = []
        if self.selected_utxos:
            for _item in self.selected_utxos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selected_utxos'] = _items
        # override the default output from pydantic by calling `to_dict()` of utxo_change
        if self.utxo_change:
            _dict['utxo_change'] = self.utxo_change.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionRawTxInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "used_nonce": obj.get("used_nonce"),
            "selected_utxos": [TransactionSelectedUtxo.from_dict(_item) for _item in obj["selected_utxos"]] if obj.get("selected_utxos") is not None else None,
            "raw_tx": obj.get("raw_tx"),
            "unsigned_raw_tx": obj.get("unsigned_raw_tx"),
            "utxo_change": TransactionUtxoChange.from_dict(obj["utxo_change"]) if obj.get("utxo_change") is not None else None
        })
        return _obj


