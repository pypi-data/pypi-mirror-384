# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.tss_protocol import TSSProtocol
from cobo_waas2.models.tss_signature_type import TSSSignatureType
from typing import Optional, Set
from typing_extensions import Self


class TSSKeySignRequest(BaseModel):
    """
    TSSKeySignRequest
    """  # noqa: E501
    group_id: Optional[StrictStr] = Field(default=None, description="The TSS key share group ID.")
    root_pub_key: Optional[StrictStr] = Field(default=None, description="The The old TSS key share group's root extended public key.")
    used_node_ids: Optional[List[StrictStr]] = None
    bip32_path_list: Optional[List[StrictStr]] = None
    msg_hash_list: Optional[List[StrictStr]] = None
    tweak_list: Optional[List[StrictStr]] = None
    signature_type: Optional[TSSSignatureType] = None
    tss_protocol: Optional[TSSProtocol] = None
    task_id: Optional[StrictStr] = Field(default=None, description="The task ID.")
    biz_task_id: Optional[StrictStr] = Field(default=None, description="The business task ID. This field contains the transaction ID.")
    __properties: ClassVar[List[str]] = ["group_id", "root_pub_key", "used_node_ids", "bip32_path_list", "msg_hash_list", "tweak_list", "signature_type", "tss_protocol", "task_id", "biz_task_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TSSKeySignRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TSSKeySignRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group_id": obj.get("group_id"),
            "root_pub_key": obj.get("root_pub_key"),
            "used_node_ids": obj.get("used_node_ids"),
            "bip32_path_list": obj.get("bip32_path_list"),
            "msg_hash_list": obj.get("msg_hash_list"),
            "tweak_list": obj.get("tweak_list"),
            "signature_type": obj.get("signature_type"),
            "tss_protocol": obj.get("tss_protocol"),
            "task_id": obj.get("task_id"),
            "biz_task_id": obj.get("biz_task_id")
        })
        return _obj


