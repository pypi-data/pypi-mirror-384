# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.safe_tx_decoded_data import SafeTxDecodedData
from typing import Optional, Set
from typing_extensions import Self


class SafeTxExtraData(BaseModel):
    """
    The information used to construct and sign Safe{Wallet} transactions using the EIP-712 standard.
    """  # noqa: E501
    to: StrictStr = Field(description="The recipient address of the transaction.")
    value: StrictStr = Field(description="The human-readable transaction value, for example, `1 ETH`.")
    data: StrictStr = Field(description="The transaction call data.")
    domain_hash: StrictStr = Field(description="The EIP-712 domain separator hash.")
    message_hash: StrictStr = Field(description="The hash of the structured message to be signed.")
    safe_address: StrictStr = Field(description="The address of the Safe contract.")
    safe_tx_hash: StrictStr = Field(description="The hash of the transaction.")
    safe_nonce: StrictInt = Field(description="The nonce of the transaction.")
    operation: StrictStr = Field(description="The operation type for the transaction.")
    gas_token_addr: Optional[StrictStr] = Field(default=None, description="The address of the token used to pay gas.")
    safe_tx_gas: Optional[StrictInt] = Field(default=None, description="The gas limit used for the transaction.")
    base_gas: Optional[StrictInt] = Field(default=None, description="The base gas for the transaction.")
    gas_price: Optional[StrictStr] = Field(default=None, description="The gas price used in the transaction.")
    refund_receiver: Optional[StrictStr] = Field(default=None, description="The address used to receive the gas refund.")
    to_contract_name: Optional[StrictStr] = Field(default=None, description="The name of the recipient contract (if available).")
    decoded_data: Optional[SafeTxDecodedData] = None
    signature: Optional[StrictStr] = Field(default=None, description="The signature of the transaction (if signed by Cobo Signer).")
    wei: Optional[StrictStr] = Field(default=None, description="The transaction amount in Wei.")
    __properties: ClassVar[List[str]] = ["to", "value", "data", "domain_hash", "message_hash", "safe_address", "safe_tx_hash", "safe_nonce", "operation", "gas_token_addr", "safe_tx_gas", "base_gas", "gas_price", "refund_receiver", "to_contract_name", "decoded_data", "signature", "wei"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SafeTxExtraData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of decoded_data
        if self.decoded_data:
            _dict['decoded_data'] = self.decoded_data.to_dict()
        # set to None if wei (nullable) is None
        # and model_fields_set contains the field
        if self.wei is None and "wei" in self.model_fields_set:
            _dict['wei'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SafeTxExtraData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "to": obj.get("to"),
            "value": obj.get("value"),
            "data": obj.get("data"),
            "domain_hash": obj.get("domain_hash"),
            "message_hash": obj.get("message_hash"),
            "safe_address": obj.get("safe_address"),
            "safe_tx_hash": obj.get("safe_tx_hash"),
            "safe_nonce": obj.get("safe_nonce"),
            "operation": obj.get("operation"),
            "gas_token_addr": obj.get("gas_token_addr"),
            "safe_tx_gas": obj.get("safe_tx_gas"),
            "base_gas": obj.get("base_gas"),
            "gas_price": obj.get("gas_price"),
            "refund_receiver": obj.get("refund_receiver"),
            "to_contract_name": obj.get("to_contract_name"),
            "decoded_data": SafeTxDecodedData.from_dict(obj["decoded_data"]) if obj.get("decoded_data") is not None else None,
            "signature": obj.get("signature"),
            "wei": obj.get("wei")
        })
        return _obj


