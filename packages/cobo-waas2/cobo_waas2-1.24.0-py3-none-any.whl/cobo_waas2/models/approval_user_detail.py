# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.approval_result import ApprovalResult
from typing import Optional, Set
from typing_extensions import Self


class ApprovalUserDetail(BaseModel):
    """
    Details about a user involved in a transaction approval workflow. 
    """  # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the user who approved the transaction.")
    email: Optional[StrictStr] = Field(default=None, description="Email of the user.")
    pubkey: Optional[StrictStr] = Field(default=None, description="Public key of the user.")
    signature: Optional[StrictStr] = Field(default=None, description="Signature produced by the user for this approval.")
    statement_uuid: Optional[StrictStr] = Field(default=None, description="UUID of the statement associated with this approval.")
    result: Optional[ApprovalResult] = None
    approval_result_code: Optional[StrictInt] = Field(default=None, description="Integer value representing the result of the approval.")
    created_time: Optional[StrictInt] = Field(default=None, description="Timestamp when the approval was created.")
    template_version: Optional[StrictStr] = Field(default=None, description="Version of the template used for the transaction approval.")
    header_title: Optional[StrictStr] = Field(default=None, description="Display title used in the transaction approval.")
    is_for_sign: Optional[StrictBool] = Field(default=None, description="Indicates whether this approval requires signing: - `true`: The user must sign the transaction. - `false`: The user only needs to approve or reject without signing. ")
    show_info: Optional[StrictStr] = Field(default=None, description="Additional information to show for the transaction approval.")
    language: Optional[StrictStr] = Field(default=None, description="Language used for the transaction approval.")
    message_version: Optional[StrictStr] = Field(default=None, description="Version of the message format used for the transaction approval.")
    message: Optional[StrictStr] = Field(default=None, description="Message associated with the transaction approval.")
    extra_message: Optional[StrictStr] = Field(default=None, description="Any additional message or information related to the transaction approval.")
    __properties: ClassVar[List[str]] = ["name", "email", "pubkey", "signature", "statement_uuid", "result", "approval_result_code", "created_time", "template_version", "header_title", "is_for_sign", "show_info", "language", "message_version", "message", "extra_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalUserDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalUserDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "email": obj.get("email"),
            "pubkey": obj.get("pubkey"),
            "signature": obj.get("signature"),
            "statement_uuid": obj.get("statement_uuid"),
            "result": obj.get("result"),
            "approval_result_code": obj.get("approval_result_code"),
            "created_time": obj.get("created_time"),
            "template_version": obj.get("template_version"),
            "header_title": obj.get("header_title"),
            "is_for_sign": obj.get("is_for_sign"),
            "show_info": obj.get("show_info"),
            "language": obj.get("language"),
            "message_version": obj.get("message_version"),
            "message": obj.get("message"),
            "extra_message": obj.get("extra_message")
        })
        return _obj


