# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from cobo_waas2.models.pool_details_all_of_validators_info import PoolDetailsAllOfValidatorsInfo
from cobo_waas2.models.staking_pool_type import StakingPoolType
from cobo_waas2.models.wallet_subtype import WalletSubtype
from cobo_waas2.models.wallet_type import WalletType
from typing import Optional, Set
from typing_extensions import Self


class PoolDetails(BaseModel):
    """
    PoolDetails
    """  # noqa: E501
    id: StrictStr = Field(description="The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.")
    chain_id: StrictStr = Field(description="The chain ID.")
    protocol: StrictStr = Field(description="The name of the protocol.")
    protocol_icon_url: StrictStr = Field(description="The URL of the protocol's icon.")
    supported_wallet_types: List[WalletType] = Field(description="The wallet type. Possible values include:  - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)  - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)  - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)  - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) ")
    supported_wallet_subtypes: List[WalletSubtype] = Field(description="The wallet subtype. Possible values include: - `Asset`: Custodial Wallets (Asset Wallets). - `Web3`: Custodial Wallets (Web3  Wallets). - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets). - `User-Controlled`: MPC Wallets (User-Controlled Wallets). - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}). - `Main`: Exchange Wallets (Main Account). - `Sub`: Exchange Wallets (Sub Account). ")
    token_id: StrictStr = Field(description="The token ID.")
    est_apr: Union[StrictFloat, StrictInt] = Field(description="The estimated annual percentage rate (APR).")
    pool_type: Optional[StakingPoolType] = None
    min_amount: Optional[StrictStr] = Field(default=None, description="The minimum amount that can be staked in one staking request.")
    max_amount: Optional[StrictStr] = Field(default=None, description="The maximum amount that can be staked in one staking request.")
    min_stake_period: Optional[StrictInt] = Field(default=None, description="The minimum staking period, in days.")
    max_stake_period: Optional[StrictInt] = Field(default=None, description="The maximum staking period, in days.")
    min_stake_blocks: Optional[StrictInt] = Field(default=None, description="The minimum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.")
    max_stake_blocks: Optional[StrictInt] = Field(default=None, description="The maximum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.")
    validators_info: List[PoolDetailsAllOfValidatorsInfo] = Field(description="A list of available validators.")
    __properties: ClassVar[List[str]] = ["id", "chain_id", "protocol", "protocol_icon_url", "supported_wallet_types", "supported_wallet_subtypes", "token_id", "est_apr", "pool_type", "min_amount", "max_amount", "min_stake_period", "max_stake_period", "min_stake_blocks", "max_stake_blocks", "validators_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoolDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validators_info (list)
        _items = []
        if self.validators_info:
            for _item in self.validators_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validators_info'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoolDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "chain_id": obj.get("chain_id"),
            "protocol": obj.get("protocol"),
            "protocol_icon_url": obj.get("protocol_icon_url"),
            "supported_wallet_types": obj.get("supported_wallet_types"),
            "supported_wallet_subtypes": obj.get("supported_wallet_subtypes"),
            "token_id": obj.get("token_id"),
            "est_apr": obj.get("est_apr"),
            "pool_type": obj.get("pool_type"),
            "min_amount": obj.get("min_amount"),
            "max_amount": obj.get("max_amount"),
            "min_stake_period": obj.get("min_stake_period"),
            "max_stake_period": obj.get("max_stake_period"),
            "min_stake_blocks": obj.get("min_stake_blocks"),
            "max_stake_blocks": obj.get("max_stake_blocks"),
            "validators_info": [PoolDetailsAllOfValidatorsInfo.from_dict(_item) for _item in obj["validators_info"]] if obj.get("validators_info") is not None else None
        })
        return _obj


