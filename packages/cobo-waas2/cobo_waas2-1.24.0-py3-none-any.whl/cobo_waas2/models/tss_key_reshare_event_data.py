# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.tss_event_data_type import TSSEventDataType
from cobo_waas2.models.tss_group import TSSGroup
from cobo_waas2.models.tss_key_reshare_request import TSSKeyReshareRequest
from cobo_waas2.models.tss_request_type_eenum import TSSRequestTypeEenum
from cobo_waas2.models.tss_status import TSSStatus
from typing import Optional, Set
from typing_extensions import Self


class TSSKeyReshareEventData(BaseModel):
    """
    TSSKeyReshareEventData
    """  # noqa: E501
    data_type: TSSEventDataType
    request_id: Optional[StrictStr] = Field(default=None, description="The request ID.")
    request_type: Optional[TSSRequestTypeEenum] = None
    request_status: Optional[TSSStatus] = None
    extra_info: Optional[StrictStr] = Field(default=None, description="The extra info.")
    failed_reason: Optional[StrictStr] = Field(default=None, description="The failed reason.")
    request_detail: Optional[TSSKeyReshareRequest] = None
    result: Optional[TSSGroup] = None
    __properties: ClassVar[List[str]] = ["data_type", "request_id", "request_type", "request_status", "extra_info", "failed_reason", "request_detail", "result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TSSKeyReshareEventData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_detail
        if self.request_detail:
            _dict['request_detail'] = self.request_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TSSKeyReshareEventData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data_type": obj.get("data_type"),
            "request_id": obj.get("request_id"),
            "request_type": obj.get("request_type"),
            "request_status": obj.get("request_status"),
            "extra_info": obj.get("extra_info"),
            "failed_reason": obj.get("failed_reason"),
            "request_detail": TSSKeyReshareRequest.from_dict(obj["request_detail"]) if obj.get("request_detail") is not None else None,
            "result": TSSGroup.from_dict(obj["result"]) if obj.get("result") is not None else None
        })
        return _obj


