# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.transaction_evm_contract_method import TransactionEvmContractMethod
from typing import Optional, Set
from typing_extensions import Self


class TransactionEvmCalldataInfo(BaseModel):
    """
    TransactionEvmCalldataInfo
    """  # noqa: E501
    chain_id: Optional[StrictStr] = Field(default=None, description="The ID of the chain on which the smart contract is issued.")
    address: Optional[StrictStr] = Field(default=None, description="The address of the smart contract.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the smart contract.")
    impl_address: Optional[StrictStr] = Field(default=None, description="The address of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.")
    impl_name: Optional[StrictStr] = Field(default=None, description="The name of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.")
    proxy: Optional[StrictBool] = Field(default=None, description="Whether the specified smart contract address is a proxy contract. - `true`: The specified smart contract address is a proxy contract. - `false`: The specified smart contract address is not a proxy contract. ")
    method: Optional[TransactionEvmContractMethod] = None
    params: Optional[StrictStr] = Field(default=None, description="The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter: - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`. - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`. - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values. ")
    __properties: ClassVar[List[str]] = ["chain_id", "address", "name", "impl_address", "impl_name", "proxy", "method", "params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionEvmCalldataInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of method
        if self.method:
            _dict['method'] = self.method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionEvmCalldataInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chain_id": obj.get("chain_id"),
            "address": obj.get("address"),
            "name": obj.get("name"),
            "impl_address": obj.get("impl_address"),
            "impl_name": obj.get("impl_name"),
            "proxy": obj.get("proxy"),
            "method": TransactionEvmContractMethod.from_dict(obj["method"]) if obj.get("method") is not None else None,
            "params": obj.get("params")
        })
        return _obj


