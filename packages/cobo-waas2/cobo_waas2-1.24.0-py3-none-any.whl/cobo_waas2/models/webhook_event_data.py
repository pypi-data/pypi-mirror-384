# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cobo_waas2.models.addresses_event_data import AddressesEventData
from cobo_waas2.models.balance_update_info_event_data import BalanceUpdateInfoEventData
from cobo_waas2.models.chains_event_data import ChainsEventData
from cobo_waas2.models.compliance_disposition_update_event_data import ComplianceDispositionUpdateEventData
from cobo_waas2.models.mpc_vault_event_data import MPCVaultEventData
from cobo_waas2.models.payment_address_update_event_data import PaymentAddressUpdateEventData
from cobo_waas2.models.payment_order_event_data import PaymentOrderEventData
from cobo_waas2.models.payment_refund_event_data import PaymentRefundEventData
from cobo_waas2.models.payment_settlement_event import PaymentSettlementEvent
from cobo_waas2.models.payment_transaction_event_data import PaymentTransactionEventData
from cobo_waas2.models.suspended_token_event_data import SuspendedTokenEventData
from cobo_waas2.models.token_listing_event_data import TokenListingEventData
from cobo_waas2.models.tokens_event_data import TokensEventData
from cobo_waas2.models.transaction_webhook_event_data import TransactionWebhookEventData
from cobo_waas2.models.tss_request_webhook_event_data import TSSRequestWebhookEventData
from cobo_waas2.models.wallet_info_event_data import WalletInfoEventData
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WEBHOOKEVENTDATA_ONE_OF_SCHEMAS = ["AddressesEventData", "BalanceUpdateInfoEventData", "ChainsEventData", "ComplianceDispositionUpdateEventData", "MPCVaultEventData", "PaymentAddressUpdateEventData", "PaymentOrderEventData", "PaymentRefundEventData", "PaymentSettlementEvent", "PaymentTransactionEventData", "SuspendedTokenEventData", "TSSRequestWebhookEventData", "TokenListingEventData", "TokensEventData", "TransactionWebhookEventData", "WalletInfoEventData"]

class WebhookEventData(BaseModel):
    """
    WebhookEventData
    """
    # data type: TransactionWebhookEventData
    oneof_schema_1_validator: Optional[TransactionWebhookEventData] = None
    # data type: TSSRequestWebhookEventData
    oneof_schema_2_validator: Optional[TSSRequestWebhookEventData] = None
    # data type: AddressesEventData
    oneof_schema_3_validator: Optional[AddressesEventData] = None
    # data type: WalletInfoEventData
    oneof_schema_4_validator: Optional[WalletInfoEventData] = None
    # data type: MPCVaultEventData
    oneof_schema_5_validator: Optional[MPCVaultEventData] = None
    # data type: ChainsEventData
    oneof_schema_6_validator: Optional[ChainsEventData] = None
    # data type: TokensEventData
    oneof_schema_7_validator: Optional[TokensEventData] = None
    # data type: TokenListingEventData
    oneof_schema_8_validator: Optional[TokenListingEventData] = None
    # data type: BalanceUpdateInfoEventData
    oneof_schema_9_validator: Optional[BalanceUpdateInfoEventData] = None
    # data type: SuspendedTokenEventData
    oneof_schema_10_validator: Optional[SuspendedTokenEventData] = None
    # data type: PaymentOrderEventData
    oneof_schema_11_validator: Optional[PaymentOrderEventData] = None
    # data type: PaymentRefundEventData
    oneof_schema_12_validator: Optional[PaymentRefundEventData] = None
    # data type: PaymentSettlementEvent
    oneof_schema_13_validator: Optional[PaymentSettlementEvent] = None
    # data type: PaymentTransactionEventData
    oneof_schema_14_validator: Optional[PaymentTransactionEventData] = None
    # data type: PaymentAddressUpdateEventData
    oneof_schema_15_validator: Optional[PaymentAddressUpdateEventData] = None
    # data type: ComplianceDispositionUpdateEventData
    oneof_schema_16_validator: Optional[ComplianceDispositionUpdateEventData] = None
    actual_instance: Optional[Union[AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData]] = None
    one_of_schemas: Set[str] = { "AddressesEventData", "BalanceUpdateInfoEventData", "ChainsEventData", "ComplianceDispositionUpdateEventData", "MPCVaultEventData", "PaymentAddressUpdateEventData", "PaymentOrderEventData", "PaymentRefundEventData", "PaymentSettlementEvent", "PaymentTransactionEventData", "SuspendedTokenEventData", "TSSRequestWebhookEventData", "TokenListingEventData", "TokensEventData", "TransactionWebhookEventData", "WalletInfoEventData" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WebhookEventData.model_construct()
        error_messages = []
        match = 0
        # validate data type: TransactionWebhookEventData
        if not isinstance(v, TransactionWebhookEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TransactionWebhookEventData`")
        else:
            match += 1
        # validate data type: TSSRequestWebhookEventData
        if not isinstance(v, TSSRequestWebhookEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TSSRequestWebhookEventData`")
        else:
            match += 1
        # validate data type: AddressesEventData
        if not isinstance(v, AddressesEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressesEventData`")
        else:
            match += 1
        # validate data type: WalletInfoEventData
        if not isinstance(v, WalletInfoEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletInfoEventData`")
        else:
            match += 1
        # validate data type: MPCVaultEventData
        if not isinstance(v, MPCVaultEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MPCVaultEventData`")
        else:
            match += 1
        # validate data type: ChainsEventData
        if not isinstance(v, ChainsEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChainsEventData`")
        else:
            match += 1
        # validate data type: TokensEventData
        if not isinstance(v, TokensEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokensEventData`")
        else:
            match += 1
        # validate data type: TokenListingEventData
        if not isinstance(v, TokenListingEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenListingEventData`")
        else:
            match += 1
        # validate data type: BalanceUpdateInfoEventData
        if not isinstance(v, BalanceUpdateInfoEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BalanceUpdateInfoEventData`")
        else:
            match += 1
        # validate data type: SuspendedTokenEventData
        if not isinstance(v, SuspendedTokenEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SuspendedTokenEventData`")
        else:
            match += 1
        # validate data type: PaymentOrderEventData
        if not isinstance(v, PaymentOrderEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentOrderEventData`")
        else:
            match += 1
        # validate data type: PaymentRefundEventData
        if not isinstance(v, PaymentRefundEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentRefundEventData`")
        else:
            match += 1
        # validate data type: PaymentSettlementEvent
        if not isinstance(v, PaymentSettlementEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentSettlementEvent`")
        else:
            match += 1
        # validate data type: PaymentTransactionEventData
        if not isinstance(v, PaymentTransactionEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentTransactionEventData`")
        else:
            match += 1
        # validate data type: PaymentAddressUpdateEventData
        if not isinstance(v, PaymentAddressUpdateEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentAddressUpdateEventData`")
        else:
            match += 1
        # validate data type: ComplianceDispositionUpdateEventData
        if not isinstance(v, ComplianceDispositionUpdateEventData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComplianceDispositionUpdateEventData`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WebhookEventData with oneOf schemas: AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WebhookEventData with oneOf schemas: AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("data_type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `data_type` in the input.")

        # check if data type is `AddressesEventData`
        if _data_type == "Addresses":
            instance.actual_instance = AddressesEventData.from_json(json_str)
            return instance

        # check if data type is `BalanceUpdateInfoEventData`
        if _data_type == "BalanceUpdateInfo":
            instance.actual_instance = BalanceUpdateInfoEventData.from_json(json_str)
            return instance

        # check if data type is `ChainsEventData`
        if _data_type == "Chains":
            instance.actual_instance = ChainsEventData.from_json(json_str)
            return instance

        # check if data type is `ComplianceDispositionUpdateEventData`
        if _data_type == "ComplianceDisposition":
            instance.actual_instance = ComplianceDispositionUpdateEventData.from_json(json_str)
            return instance

        # check if data type is `MPCVaultEventData`
        if _data_type == "MPCVault":
            instance.actual_instance = MPCVaultEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentAddressUpdateEventData`
        if _data_type == "PaymentAddressUpdate":
            instance.actual_instance = PaymentAddressUpdateEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentOrderEventData`
        if _data_type == "PaymentOrder":
            instance.actual_instance = PaymentOrderEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentRefundEventData`
        if _data_type == "PaymentRefund":
            instance.actual_instance = PaymentRefundEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentSettlementEvent`
        if _data_type == "PaymentSettlement":
            instance.actual_instance = PaymentSettlementEvent.from_json(json_str)
            return instance

        # check if data type is `PaymentTransactionEventData`
        if _data_type == "PaymentTransaction":
            instance.actual_instance = PaymentTransactionEventData.from_json(json_str)
            return instance

        # check if data type is `SuspendedTokenEventData`
        if _data_type == "SuspendedToken":
            instance.actual_instance = SuspendedTokenEventData.from_json(json_str)
            return instance

        # check if data type is `TSSRequestWebhookEventData`
        if _data_type == "TSSRequest":
            instance.actual_instance = TSSRequestWebhookEventData.from_json(json_str)
            return instance

        # check if data type is `TokenListingEventData`
        if _data_type == "TokenListing":
            instance.actual_instance = TokenListingEventData.from_json(json_str)
            return instance

        # check if data type is `TokensEventData`
        if _data_type == "Tokens":
            instance.actual_instance = TokensEventData.from_json(json_str)
            return instance

        # check if data type is `TransactionWebhookEventData`
        if _data_type == "Transaction":
            instance.actual_instance = TransactionWebhookEventData.from_json(json_str)
            return instance

        # check if data type is `WalletInfoEventData`
        if _data_type == "WalletInfo":
            instance.actual_instance = WalletInfoEventData.from_json(json_str)
            return instance

        # check if data type is `AddressesEventData`
        if _data_type == "AddressesEventData":
            instance.actual_instance = AddressesEventData.from_json(json_str)
            return instance

        # check if data type is `BalanceUpdateInfoEventData`
        if _data_type == "BalanceUpdateInfoEventData":
            instance.actual_instance = BalanceUpdateInfoEventData.from_json(json_str)
            return instance

        # check if data type is `ChainsEventData`
        if _data_type == "ChainsEventData":
            instance.actual_instance = ChainsEventData.from_json(json_str)
            return instance

        # check if data type is `ComplianceDispositionUpdateEventData`
        if _data_type == "ComplianceDispositionUpdateEventData":
            instance.actual_instance = ComplianceDispositionUpdateEventData.from_json(json_str)
            return instance

        # check if data type is `MPCVaultEventData`
        if _data_type == "MPCVaultEventData":
            instance.actual_instance = MPCVaultEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentAddressUpdateEventData`
        if _data_type == "PaymentAddressUpdateEventData":
            instance.actual_instance = PaymentAddressUpdateEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentOrderEventData`
        if _data_type == "PaymentOrderEventData":
            instance.actual_instance = PaymentOrderEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentRefundEventData`
        if _data_type == "PaymentRefundEventData":
            instance.actual_instance = PaymentRefundEventData.from_json(json_str)
            return instance

        # check if data type is `PaymentSettlementEvent`
        if _data_type == "PaymentSettlementEvent":
            instance.actual_instance = PaymentSettlementEvent.from_json(json_str)
            return instance

        # check if data type is `PaymentTransactionEventData`
        if _data_type == "PaymentTransactionEventData":
            instance.actual_instance = PaymentTransactionEventData.from_json(json_str)
            return instance

        # check if data type is `SuspendedTokenEventData`
        if _data_type == "SuspendedTokenEventData":
            instance.actual_instance = SuspendedTokenEventData.from_json(json_str)
            return instance

        # check if data type is `TSSRequestWebhookEventData`
        if _data_type == "TSSRequestWebhookEventData":
            instance.actual_instance = TSSRequestWebhookEventData.from_json(json_str)
            return instance

        # check if data type is `TokenListingEventData`
        if _data_type == "TokenListingEventData":
            instance.actual_instance = TokenListingEventData.from_json(json_str)
            return instance

        # check if data type is `TokensEventData`
        if _data_type == "TokensEventData":
            instance.actual_instance = TokensEventData.from_json(json_str)
            return instance

        # check if data type is `TransactionWebhookEventData`
        if _data_type == "TransactionWebhookEventData":
            instance.actual_instance = TransactionWebhookEventData.from_json(json_str)
            return instance

        # check if data type is `WalletInfoEventData`
        if _data_type == "WalletInfoEventData":
            instance.actual_instance = WalletInfoEventData.from_json(json_str)
            return instance

        return instance
        # deserialize data into TransactionWebhookEventData
        try:
            instance.actual_instance = TransactionWebhookEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TSSRequestWebhookEventData
        try:
            instance.actual_instance = TSSRequestWebhookEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressesEventData
        try:
            instance.actual_instance = AddressesEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletInfoEventData
        try:
            instance.actual_instance = WalletInfoEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MPCVaultEventData
        try:
            instance.actual_instance = MPCVaultEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChainsEventData
        try:
            instance.actual_instance = ChainsEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokensEventData
        try:
            instance.actual_instance = TokensEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TokenListingEventData
        try:
            instance.actual_instance = TokenListingEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BalanceUpdateInfoEventData
        try:
            instance.actual_instance = BalanceUpdateInfoEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SuspendedTokenEventData
        try:
            instance.actual_instance = SuspendedTokenEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentOrderEventData
        try:
            instance.actual_instance = PaymentOrderEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentRefundEventData
        try:
            instance.actual_instance = PaymentRefundEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentSettlementEvent
        try:
            instance.actual_instance = PaymentSettlementEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentTransactionEventData
        try:
            instance.actual_instance = PaymentTransactionEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentAddressUpdateEventData
        try:
            instance.actual_instance = PaymentAddressUpdateEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ComplianceDispositionUpdateEventData
        try:
            instance.actual_instance = ComplianceDispositionUpdateEventData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WebhookEventData with oneOf schemas: AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            return instance
            # raise ValueError("No match found when deserializing the JSON string into WebhookEventData with oneOf schemas: AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, ComplianceDispositionUpdateEventData, MPCVaultEventData, PaymentAddressUpdateEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, PaymentTransactionEventData, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


