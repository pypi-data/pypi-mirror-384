# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class ChainInfo(BaseModel):
    """
    The chain information.
    """  # noqa: E501
    chain_id: StrictStr = Field(description="The chain ID, which is the unique identifier of a blockchain.")
    symbol: Optional[StrictStr] = Field(default=None, description="The chain symbol for display purposes, which is the abbreviated name of a chain.")
    icon_url: Optional[StrictStr] = Field(default=None, description="The URL of the chain icon.")
    chain_identifier: Optional[StrictStr] = Field(default=None, description="A functional identifier used to group blockchains with similar execution logic. For example, `ETH` for all EVM-compatible chains (Ethereum, BNB Smart Chain, Polygon).")
    explorer_tx_url: Optional[StrictStr] = Field(default=None, description="The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.")
    explorer_address_url: Optional[StrictStr] = Field(default=None, description="The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.")
    require_memo: Optional[StrictBool] = Field(default=None, description="Whether the chain requires a memo.")
    confirming_threshold: Optional[StrictInt] = Field(default=None, description="The number of confirmations required for an on-chain transaction, such as 64 for Ethereum.")
    coinbase_maturity: Optional[StrictInt] = Field(default=None, description="The number of confirmations required before a coinbase transaction is considered mature and can be spent, for example, 100 confirmations for BTC.")
    __properties: ClassVar[List[str]] = ["chain_id", "symbol", "icon_url", "chain_identifier", "explorer_tx_url", "explorer_address_url", "require_memo", "confirming_threshold", "coinbase_maturity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChainInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChainInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chain_id": obj.get("chain_id"),
            "symbol": obj.get("symbol"),
            "icon_url": obj.get("icon_url"),
            "chain_identifier": obj.get("chain_identifier"),
            "explorer_tx_url": obj.get("explorer_tx_url"),
            "explorer_address_url": obj.get("explorer_address_url"),
            "require_memo": obj.get("require_memo"),
            "confirming_threshold": obj.get("confirming_threshold"),
            "coinbase_maturity": obj.get("coinbase_maturity")
        })
        return _obj


