# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.tss_curve_type import TSSCurveType
from cobo_waas2.models.tss_group_type import TSSGroupType
from cobo_waas2.models.tss_participant import TSSParticipant
from typing import Optional, Set
from typing_extensions import Self


class TSSGroup(BaseModel):
    """
    TSSGroup
    """  # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The TSS key share group ID.")
    canonical_group_id: Optional[StrictStr] = Field(default=None, description="The canonical group ID.")
    protocol_group_id: Optional[StrictStr] = Field(default=None, description="The protocol group ID.")
    protocol_type: Optional[StrictStr] = Field(default=None, description="The protocol type.")
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The group creation timestamp, in Unix timestamp format, measured in milliseconds.")
    type: Optional[TSSGroupType] = None
    root_extended_public_key: Optional[StrictStr] = Field(default=None, description="The root extended public key.")
    chaincode: Optional[StrictStr] = Field(default=None, description="The chaincode.")
    curve: Optional[TSSCurveType] = None
    threshold: Optional[StrictInt] = Field(default=None, description="The threshold.")
    participants: Optional[List[TSSParticipant]] = None
    __properties: ClassVar[List[str]] = ["id", "canonical_group_id", "protocol_group_id", "protocol_type", "created_timestamp", "type", "root_extended_public_key", "chaincode", "curve", "threshold", "participants"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TSSGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in participants (list)
        _items = []
        if self.participants:
            for _item in self.participants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['participants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TSSGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "canonical_group_id": obj.get("canonical_group_id"),
            "protocol_group_id": obj.get("protocol_group_id"),
            "protocol_type": obj.get("protocol_type"),
            "created_timestamp": obj.get("created_timestamp"),
            "type": obj.get("type"),
            "root_extended_public_key": obj.get("root_extended_public_key"),
            "chaincode": obj.get("chaincode"),
            "curve": obj.get("curve"),
            "threshold": obj.get("threshold"),
            "participants": [TSSParticipant.from_dict(_item) for _item in obj["participants"]] if obj.get("participants") is not None else None
        })
        return _obj


