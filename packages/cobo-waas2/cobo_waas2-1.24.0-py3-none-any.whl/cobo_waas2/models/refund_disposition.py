# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class RefundDisposition(BaseModel):
    """
    The information about a request to refund funds.
    """  # noqa: E501
    transaction_id: StrictStr = Field(description="The UUID of the transaction whose funds are to be refunded. This identifies the original transaction that requires refund processing.")
    destination_address: StrictStr = Field(description="The blockchain address to receive the refunded funds.")
    disposition_amount: StrictStr = Field(description="The amount to be refunded from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. ")
    category_names: Optional[List[StrictStr]] = Field(default=None, description="Custom categories to identify and track this refund transaction. Used for transaction classification and reporting.")
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="Additional notes or description for the refund.")
    __properties: ClassVar[List[str]] = ["transaction_id", "destination_address", "disposition_amount", "category_names", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundDisposition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundDisposition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction_id": obj.get("transaction_id"),
            "destination_address": obj.get("destination_address"),
            "disposition_amount": obj.get("disposition_amount"),
            "category_names": obj.get("category_names"),
            "description": obj.get("description")
        })
        return _obj


