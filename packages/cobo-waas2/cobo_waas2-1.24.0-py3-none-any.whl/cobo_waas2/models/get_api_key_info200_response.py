# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.role_scopes import RoleScopes
from typing import Optional, Set
from typing_extensions import Self


class GetApiKeyInfo200Response(BaseModel):
    """
    GetApiKeyInfo200Response
    """  # noqa: E501
    name: StrictStr = Field(description="The API key name.")
    curve_type: StrictStr = Field(description="The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include: - `ED25519`: Ed25519 - `SECP256K1`: Secp256k1 ")
    key: StrictStr = Field(description="The API key value.")
    callback_url: Optional[StrictStr] = Field(default=None, description="The URL of the callback endpoint that receives callback messages triggered by this API key.")
    valid_ips: Optional[List[StrictStr]] = Field(default=None, description="(Applicable to permanent API keys only) The list of IP addresses that are allowed to use this API key.")
    created_timestamp: StrictInt = Field(description="The time when the API key was registered, in Unix timestamp format, measured in milliseconds.")
    updated_timestamp: StrictInt = Field(description="The time when the API key information was last updated, in Unix timestamp format, measured in milliseconds.")
    expired_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the API key expires, in Unix timestamp format, measured in milliseconds. For permanent API keys, this property value is `null`.")
    role_scopes: Optional[List[RoleScopes]] = Field(default=None, description="The list of user roles and wallet scopes associated with the API key.")
    __properties: ClassVar[List[str]] = ["name", "curve_type", "key", "callback_url", "valid_ips", "created_timestamp", "updated_timestamp", "expired_timestamp", "role_scopes"]

    @field_validator('curve_type')
    def curve_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ED25519', 'SECP256K1']):
            raise ValueError("must be one of enum values ('ED25519', 'SECP256K1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetApiKeyInfo200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in role_scopes (list)
        _items = []
        if self.role_scopes:
            for _item in self.role_scopes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['role_scopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetApiKeyInfo200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "curve_type": obj.get("curve_type"),
            "key": obj.get("key"),
            "callback_url": obj.get("callback_url"),
            "valid_ips": obj.get("valid_ips"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "expired_timestamp": obj.get("expired_timestamp"),
            "role_scopes": [RoleScopes.from_dict(_item) for _item in obj["role_scopes"]] if obj.get("role_scopes") is not None else None
        })
        return _obj


