# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class SafeTxSubTransaction(BaseModel):
    """
    The information about the sub-transaction.
    """  # noqa: E501
    operation: Optional[StrictStr] = Field(default=None, description="The type of operation in the sub-transaction.")
    to: Optional[StrictStr] = Field(default=None, description="The destination address of the sub-transaction.")
    value: Optional[StrictStr] = Field(default=None, description="The human-readable transaction value, for example, `1 ETH`.")
    wei: Optional[StrictStr] = Field(default=None, description="The transaction amount in Wei")
    data: Optional[StrictStr] = Field(default=None, description="Encoded transaction data")
    data_decoded: Optional[SafeTxDecodedData] = None
    to_contract_name: Optional[StrictStr] = Field(default=None, description="The name of the recipient contract (if available).")
    __properties: ClassVar[List[str]] = ["operation", "to", "value", "wei", "data", "data_decoded", "to_contract_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SafeTxSubTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_decoded
        if self.data_decoded:
            _dict['data_decoded'] = self.data_decoded.to_dict()
        # set to None if to_contract_name (nullable) is None
        # and model_fields_set contains the field
        if self.to_contract_name is None and "to_contract_name" in self.model_fields_set:
            _dict['to_contract_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SafeTxSubTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "to": obj.get("to"),
            "value": obj.get("value"),
            "wei": obj.get("wei"),
            "data": obj.get("data"),
            "data_decoded": SafeTxDecodedData.from_dict(obj["data_decoded"]) if obj.get("data_decoded") is not None else None,
            "to_contract_name": obj.get("to_contract_name")
        })
        return _obj

from cobo_waas2.models.safe_tx_decoded_data import SafeTxDecodedData
# TODO: Rewrite to not use raise_errors
SafeTxSubTransaction.model_rebuild(raise_errors=False)

