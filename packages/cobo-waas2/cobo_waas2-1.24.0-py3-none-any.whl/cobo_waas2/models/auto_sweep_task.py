# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.auto_sweep_task_status import AutoSweepTaskStatus
from typing import Optional, Set
from typing_extensions import Self


class AutoSweepTask(BaseModel):
    """
    Auto-sweep task information.
    """  # noqa: E501
    task_id: StrictStr = Field(description="Auto-sweep task ID.")
    wallet_id: StrictStr = Field(description="Wallet ID.")
    token_id: StrictStr = Field(description="Token ID of the swept token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).")
    status: AutoSweepTaskStatus
    transaction_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of the transactions triggered by the task.")
    failed_reasons: Optional[List[StrictStr]] = Field(default=None, description="Reasons why the task creation failed.")
    created_timestamp: StrictInt = Field(description="The time when the task was created, in Unix timestamp format, measured in milliseconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the task was updated, in Unix timestamp format, measured in milliseconds.")
    __properties: ClassVar[List[str]] = ["task_id", "wallet_id", "token_id", "status", "transaction_ids", "failed_reasons", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoSweepTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoSweepTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "wallet_id": obj.get("wallet_id"),
            "token_id": obj.get("token_id"),
            "status": obj.get("status"),
            "transaction_ids": obj.get("transaction_ids"),
            "failed_reasons": obj.get("failed_reasons"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


