# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from cobo_waas2.models.destination_wallet_type import DestinationWalletType
from cobo_waas2.models.travel_rule_withdraw_exchanges_or_vasp_entity_info import TravelRuleWithdrawExchangesOrVASPEntityInfo
from typing import Optional, Set
from typing_extensions import Self


class TravelRuleWithdrawExchangesOrVASP(BaseModel):
    """
    Required information when withdrawing tokens to an exchange or other virtual asset service providers (VASP).
    """  # noqa: E501
    destination_wallet_type: DestinationWalletType
    vendor_code: StrictStr = Field(description="The vendor code of the exchange or virtual asset service provider (VASP).")
    vendor_vasp_id: StrictStr = Field(description="The unique identifier of the VASP.")
    entity_info: TravelRuleWithdrawExchangesOrVASPEntityInfo
    __properties: ClassVar[List[str]] = ["destination_wallet_type", "vendor_code", "vendor_vasp_id", "entity_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRuleWithdrawExchangesOrVASP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity_info
        if self.entity_info:
            _dict['entity_info'] = self.entity_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRuleWithdrawExchangesOrVASP from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination_wallet_type": obj.get("destination_wallet_type"),
            "vendor_code": obj.get("vendor_code"),
            "vendor_vasp_id": obj.get("vendor_vasp_id"),
            "entity_info": TravelRuleWithdrawExchangesOrVASPEntityInfo.from_dict(obj["entity_info"]) if obj.get("entity_info") is not None else None
        })
        return _obj


