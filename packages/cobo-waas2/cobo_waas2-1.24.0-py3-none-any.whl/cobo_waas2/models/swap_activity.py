# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.swap_activity_status import SwapActivityStatus
from cobo_waas2.models.swap_type import SwapType
from cobo_waas2.models.transaction_initiator_type import TransactionInitiatorType
from cobo_waas2.models.transaction_request_fee import TransactionRequestFee
from typing import Optional, Set
from typing_extensions import Self


class SwapActivity(BaseModel):
    """
    SwapActivity
    """  # noqa: E501
    activity_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the swap activity.")
    swap_type: Optional[SwapType] = None
    status: Optional[SwapActivityStatus] = None
    request_id: Optional[StrictStr] = Field(default=None, description="The request ID of the swap transaction.")
    wallet_id: Optional[StrictStr] = Field(default=None, description="The ID of the wallet used to pay.")
    pay_token_id: Optional[StrictStr] = Field(default=None, description="The ID of the token to pay.")
    receive_token_id: Optional[StrictStr] = Field(default=None, description="The ID of the token to receive.")
    pay_amount: Optional[StrictStr] = Field(default=None, description="The amount of the token to pay.")
    receive_amount: Optional[StrictStr] = Field(default=None, description="The amount of the token to receive.")
    fee_token_id: Optional[StrictStr] = Field(default=None, description="The ID of the token used for paying the service fee.")
    fee_amount: Optional[StrictStr] = Field(default=None, description="The amount of the service fee.")
    initiator: Optional[StrictStr] = Field(default=None, description="The initiator of the swap activity.")
    initiator_type: Optional[TransactionInitiatorType] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the swap activity.")
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.")
    network_fee: Optional[TransactionRequestFee] = None
    destination_address: Optional[StrictStr] = Field(default=None, description="The address of an MPC Wallet or Web3 Wallet that receives the swapped or bridged assets.")
    __properties: ClassVar[List[str]] = ["activity_id", "swap_type", "status", "request_id", "wallet_id", "pay_token_id", "receive_token_id", "pay_amount", "receive_amount", "fee_token_id", "fee_amount", "initiator", "initiator_type", "description", "created_timestamp", "updated_timestamp", "network_fee", "destination_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwapActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of network_fee
        if self.network_fee:
            _dict['network_fee'] = self.network_fee.to_dict()
        # set to None if initiator (nullable) is None
        # and model_fields_set contains the field
        if self.initiator is None and "initiator" in self.model_fields_set:
            _dict['initiator'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwapActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity_id": obj.get("activity_id"),
            "swap_type": obj.get("swap_type"),
            "status": obj.get("status"),
            "request_id": obj.get("request_id"),
            "wallet_id": obj.get("wallet_id"),
            "pay_token_id": obj.get("pay_token_id"),
            "receive_token_id": obj.get("receive_token_id"),
            "pay_amount": obj.get("pay_amount"),
            "receive_amount": obj.get("receive_amount"),
            "fee_token_id": obj.get("fee_token_id"),
            "fee_amount": obj.get("fee_amount"),
            "initiator": obj.get("initiator"),
            "initiator_type": obj.get("initiator_type"),
            "description": obj.get("description"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "network_fee": TransactionRequestFee.from_dict(obj["network_fee"]) if obj.get("network_fee") is not None else None,
            "destination_address": obj.get("destination_address")
        })
        return _obj


