# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class SupportedToken(BaseModel):
    """
    SupportedToken
    """  # noqa: E501
    token_id: StrictStr = Field(description="Unique identifier of the token")
    name: StrictStr = Field(description="Full name of the token")
    symbol: StrictStr = Field(description="Symbol representation of the token")
    decimal: StrictInt = Field(description="Number of decimal places for the token")
    token_address: Optional[StrictStr] = Field(description="Contract address of the token (may be null for native coins)")
    chain_id: StrictStr = Field(description="Identifier of the blockchain where the token exists")
    chain_symbol: Optional[StrictStr] = Field(description="Symbol of the underlying blockchain")
    chain_icon_url: Optional[StrictStr] = Field(default=None, description="URL to the blockchain's icon image")
    token_icon_url: Optional[StrictStr] = Field(default=None, description="URL to the token's icon image")
    can_off_ramp: Optional[StrictBool] = Field(default=None, description="Whether the token can by off ramp settlement")
    __properties: ClassVar[List[str]] = ["token_id", "name", "symbol", "decimal", "token_address", "chain_id", "chain_symbol", "chain_icon_url", "token_icon_url", "can_off_ramp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportedToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if token_address (nullable) is None
        # and model_fields_set contains the field
        if self.token_address is None and "token_address" in self.model_fields_set:
            _dict['token_address'] = None

        # set to None if chain_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.chain_symbol is None and "chain_symbol" in self.model_fields_set:
            _dict['chain_symbol'] = None

        # set to None if chain_icon_url (nullable) is None
        # and model_fields_set contains the field
        if self.chain_icon_url is None and "chain_icon_url" in self.model_fields_set:
            _dict['chain_icon_url'] = None

        # set to None if token_icon_url (nullable) is None
        # and model_fields_set contains the field
        if self.token_icon_url is None and "token_icon_url" in self.model_fields_set:
            _dict['token_icon_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportedToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token_id": obj.get("token_id"),
            "name": obj.get("name"),
            "symbol": obj.get("symbol"),
            "decimal": obj.get("decimal"),
            "token_address": obj.get("token_address"),
            "chain_id": obj.get("chain_id"),
            "chain_symbol": obj.get("chain_symbol"),
            "chain_icon_url": obj.get("chain_icon_url"),
            "token_icon_url": obj.get("token_icon_url"),
            "can_off_ramp": obj.get("can_off_ramp")
        })
        return _obj


