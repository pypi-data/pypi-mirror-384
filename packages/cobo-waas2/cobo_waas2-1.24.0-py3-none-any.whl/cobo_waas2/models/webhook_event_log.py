# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.webhook_event import WebhookEvent
from typing import Optional, Set
from typing_extensions import Self


class WebhookEventLog(BaseModel):
    """
    The webhook event log.
    """  # noqa: E501
    id: StrictStr = Field(description="The event log ID.")
    created_timestamp: StrictInt = Field(description="The time when the event was triggered, in Unix timestamp format (milliseconds). - The value remains unchanged across retries. - The default webhook timeout is 2 seconds. ")
    request_headers: Dict[str, Any] = Field(description="The request headers of the webhook event.")
    request_body: WebhookEvent
    response_body: Optional[StrictStr] = Field(default=None, description="The response body of the webhook event.")
    response_status_code: Optional[StrictInt] = Field(default=None, description="The response status code of the webhook event.")
    response_time: Optional[StrictInt] = Field(default=None, description="The response time of the webhook event, in milliseconds.")
    success: StrictBool = Field(description="Whether the webhook event has been successfully delivered.")
    failure_reason: Optional[StrictStr] = Field(default=None, description="The reason why the webhook event fails to be delivered.")
    __properties: ClassVar[List[str]] = ["id", "created_timestamp", "request_headers", "request_body", "response_body", "response_status_code", "response_time", "success", "failure_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookEventLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_body
        if self.request_body:
            _dict['request_body'] = self.request_body.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookEventLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_timestamp": obj.get("created_timestamp"),
            "request_headers": obj.get("request_headers"),
            "request_body": WebhookEvent.from_dict(obj["request_body"]) if obj.get("request_body") is not None else None,
            "response_body": obj.get("response_body"),
            "response_status_code": obj.get("response_status_code"),
            "response_time": obj.get("response_time"),
            "success": obj.get("success"),
            "failure_reason": obj.get("failure_reason")
        })
        return _obj


