# coding: utf-8

"""
    Orbuculum API

    Orbuculum API documentation

    The version of the OpenAPI document: 0.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountRequest(BaseModel):
    """
    Request body for creating a new account
    """ # noqa: E501
    workspace_id: StrictInt = Field(description="Workspace ID")
    entity_id: StrictInt = Field(description="Entity ID")
    name: StrictStr = Field(description="Account name")
    currency_id: Optional[StrictInt] = Field(default=None, description="Currency ID")
    hidden: Optional[StrictStr] = Field(default=None, description="Whether account is hidden (0 or 1)")
    hide_balances: Optional[StrictStr] = Field(default=None, description="Whether balances are hidden (0 or 1)")
    commission_enabled: Optional[StrictStr] = Field(default=None, description="Whether commission is enabled (0 or 1)")
    commission_appliance: Optional[StrictInt] = Field(default=None, description="Commission appliance type")
    commission_sender_account: Optional[StrictInt] = Field(default=None, description="Commission sender account ID")
    commission_receiver_account: Optional[StrictInt] = Field(default=None, description="Commission receiver account ID")
    api_id: Optional[StrictStr] = Field(default=None, description="External API ID")
    type: Optional[StrictStr] = Field(default=None, description="Account type")
    __properties: ClassVar[List[str]] = ["workspace_id", "entity_id", "name", "currency_id", "hidden", "hide_balances", "commission_enabled", "commission_appliance", "commission_sender_account", "commission_receiver_account", "api_id", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currency_id'] = None

        # set to None if hidden (nullable) is None
        # and model_fields_set contains the field
        if self.hidden is None and "hidden" in self.model_fields_set:
            _dict['hidden'] = None

        # set to None if hide_balances (nullable) is None
        # and model_fields_set contains the field
        if self.hide_balances is None and "hide_balances" in self.model_fields_set:
            _dict['hide_balances'] = None

        # set to None if commission_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.commission_enabled is None and "commission_enabled" in self.model_fields_set:
            _dict['commission_enabled'] = None

        # set to None if commission_appliance (nullable) is None
        # and model_fields_set contains the field
        if self.commission_appliance is None and "commission_appliance" in self.model_fields_set:
            _dict['commission_appliance'] = None

        # set to None if commission_sender_account (nullable) is None
        # and model_fields_set contains the field
        if self.commission_sender_account is None and "commission_sender_account" in self.model_fields_set:
            _dict['commission_sender_account'] = None

        # set to None if commission_receiver_account (nullable) is None
        # and model_fields_set contains the field
        if self.commission_receiver_account is None and "commission_receiver_account" in self.model_fields_set:
            _dict['commission_receiver_account'] = None

        # set to None if api_id (nullable) is None
        # and model_fields_set contains the field
        if self.api_id is None and "api_id" in self.model_fields_set:
            _dict['api_id'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "entity_id": obj.get("entity_id"),
            "name": obj.get("name"),
            "currency_id": obj.get("currency_id"),
            "hidden": obj.get("hidden"),
            "hide_balances": obj.get("hide_balances"),
            "commission_enabled": obj.get("commission_enabled"),
            "commission_appliance": obj.get("commission_appliance"),
            "commission_sender_account": obj.get("commission_sender_account"),
            "commission_receiver_account": obj.get("commission_receiver_account"),
            "api_id": obj.get("api_id"),
            "type": obj.get("type")
        })
        return _obj


