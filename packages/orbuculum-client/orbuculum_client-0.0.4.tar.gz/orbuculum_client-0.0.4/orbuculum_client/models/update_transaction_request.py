# coding: utf-8

"""
    Orbuculum API

    Orbuculum API documentation

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateTransactionRequest(BaseModel):
    """
    Request body for updating an existing transaction
    """ # noqa: E501
    workspace_id: StrictInt = Field(description="Workspace ID")
    id: StrictInt = Field(description="Transaction ID to update")
    sender_account_id: Optional[StrictInt] = Field(default=None, description="Sender account ID")
    receiver_account_id: Optional[StrictInt] = Field(default=None, description="Receiver account ID")
    sender_amount: Optional[StrictStr] = Field(default=None, description="Sender amount")
    receiver_amount: Optional[StrictStr] = Field(default=None, description="Receiver amount")
    dt: Optional[StrictStr] = Field(default=None, description="Transaction date and time")
    comment: Optional[StrictStr] = Field(default=None, description="Transaction comment")
    description: Optional[StrictStr] = Field(default=None, description="Transaction description")
    project_id: Optional[StrictInt] = Field(default=None, description="Project ID")
    done: Optional[StrictStr] = Field(default=None, description="Transaction status (true/false)")
    __properties: ClassVar[List[str]] = ["workspace_id", "id", "sender_account_id", "receiver_account_id", "sender_amount", "receiver_amount", "dt", "comment", "description", "project_id", "done"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sender_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.sender_account_id is None and "sender_account_id" in self.model_fields_set:
            _dict['sender_account_id'] = None

        # set to None if receiver_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.receiver_account_id is None and "receiver_account_id" in self.model_fields_set:
            _dict['receiver_account_id'] = None

        # set to None if sender_amount (nullable) is None
        # and model_fields_set contains the field
        if self.sender_amount is None and "sender_amount" in self.model_fields_set:
            _dict['sender_amount'] = None

        # set to None if receiver_amount (nullable) is None
        # and model_fields_set contains the field
        if self.receiver_amount is None and "receiver_amount" in self.model_fields_set:
            _dict['receiver_amount'] = None

        # set to None if dt (nullable) is None
        # and model_fields_set contains the field
        if self.dt is None and "dt" in self.model_fields_set:
            _dict['dt'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if done (nullable) is None
        # and model_fields_set contains the field
        if self.done is None and "done" in self.model_fields_set:
            _dict['done'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "id": obj.get("id"),
            "sender_account_id": obj.get("sender_account_id"),
            "receiver_account_id": obj.get("receiver_account_id"),
            "sender_amount": obj.get("sender_amount"),
            "receiver_amount": obj.get("receiver_amount"),
            "dt": obj.get("dt"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "project_id": obj.get("project_id"),
            "done": obj.get("done")
        })
        return _obj


