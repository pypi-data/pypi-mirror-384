# coding: utf-8

"""
    Orbuculum API

    Orbuculum API documentation

    The version of the OpenAPI document: 0.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction details
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Transaction ID")
    workspace_id: Optional[StrictInt] = Field(default=None, description="Workspace ID")
    dt: Optional[StrictStr] = Field(default=None, description="Transaction date and time")
    comment: Optional[StrictStr] = Field(default=None, description="Transaction comment")
    description: Optional[StrictStr] = Field(default=None, description="Transaction description")
    sender_account_id: Optional[StrictInt] = Field(default=None, description="Sender account ID")
    sender_amount: Optional[StrictStr] = Field(default=None, description="Sender amount")
    sender_balance_after: Optional[StrictStr] = Field(default=None, description="Sender balance after transaction")
    receiver_account_id: Optional[StrictInt] = Field(default=None, description="Receiver account ID")
    receiver_amount: Optional[StrictStr] = Field(default=None, description="Receiver amount")
    receiver_balance_after: Optional[StrictStr] = Field(default=None, description="Receiver balance after transaction")
    project_id: Optional[StrictInt] = Field(default=None, description="Project ID")
    commission_applied: Optional[StrictBool] = Field(default=None, description="Whether commission was applied")
    chained_receiver_commission: Optional[StrictInt] = Field(default=None, description="Chained receiver commission transaction ID")
    chained_id: Optional[StrictInt] = Field(default=None, description="Chained transaction ID")
    chained_commission_id: Optional[StrictInt] = Field(default=None, description="Chained commission transaction ID")
    done: Optional[StrictBool] = Field(default=None, description="Transaction completion status")
    apikey: Optional[StrictStr] = Field(default=None, description="API key for external integrations")
    future_id: Optional[StrictInt] = Field(default=None, description="Future transaction ID")
    future_edited: Optional[StrictBool] = Field(default=None, description="Whether future transaction was edited")
    import_id: Optional[StrictInt] = Field(default=None, description="Import batch ID")
    import_hash: Optional[StrictStr] = Field(default=None, description="Import hash for deduplication")
    forex: Optional[StrictStr] = Field(default=None, description="Foreign exchange rate")
    __properties: ClassVar[List[str]] = ["id", "workspace_id", "dt", "comment", "description", "sender_account_id", "sender_amount", "sender_balance_after", "receiver_account_id", "receiver_amount", "receiver_balance_after", "project_id", "commission_applied", "chained_receiver_commission", "chained_id", "chained_commission_id", "done", "apikey", "future_id", "future_edited", "import_id", "import_hash", "forex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if commission_applied (nullable) is None
        # and model_fields_set contains the field
        if self.commission_applied is None and "commission_applied" in self.model_fields_set:
            _dict['commission_applied'] = None

        # set to None if chained_receiver_commission (nullable) is None
        # and model_fields_set contains the field
        if self.chained_receiver_commission is None and "chained_receiver_commission" in self.model_fields_set:
            _dict['chained_receiver_commission'] = None

        # set to None if chained_id (nullable) is None
        # and model_fields_set contains the field
        if self.chained_id is None and "chained_id" in self.model_fields_set:
            _dict['chained_id'] = None

        # set to None if chained_commission_id (nullable) is None
        # and model_fields_set contains the field
        if self.chained_commission_id is None and "chained_commission_id" in self.model_fields_set:
            _dict['chained_commission_id'] = None

        # set to None if done (nullable) is None
        # and model_fields_set contains the field
        if self.done is None and "done" in self.model_fields_set:
            _dict['done'] = None

        # set to None if apikey (nullable) is None
        # and model_fields_set contains the field
        if self.apikey is None and "apikey" in self.model_fields_set:
            _dict['apikey'] = None

        # set to None if future_id (nullable) is None
        # and model_fields_set contains the field
        if self.future_id is None and "future_id" in self.model_fields_set:
            _dict['future_id'] = None

        # set to None if future_edited (nullable) is None
        # and model_fields_set contains the field
        if self.future_edited is None and "future_edited" in self.model_fields_set:
            _dict['future_edited'] = None

        # set to None if import_id (nullable) is None
        # and model_fields_set contains the field
        if self.import_id is None and "import_id" in self.model_fields_set:
            _dict['import_id'] = None

        # set to None if import_hash (nullable) is None
        # and model_fields_set contains the field
        if self.import_hash is None and "import_hash" in self.model_fields_set:
            _dict['import_hash'] = None

        # set to None if forex (nullable) is None
        # and model_fields_set contains the field
        if self.forex is None and "forex" in self.model_fields_set:
            _dict['forex'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "workspace_id": obj.get("workspace_id"),
            "dt": obj.get("dt"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "sender_account_id": obj.get("sender_account_id"),
            "sender_amount": obj.get("sender_amount"),
            "sender_balance_after": obj.get("sender_balance_after"),
            "receiver_account_id": obj.get("receiver_account_id"),
            "receiver_amount": obj.get("receiver_amount"),
            "receiver_balance_after": obj.get("receiver_balance_after"),
            "project_id": obj.get("project_id"),
            "commission_applied": obj.get("commission_applied"),
            "chained_receiver_commission": obj.get("chained_receiver_commission"),
            "chained_id": obj.get("chained_id"),
            "chained_commission_id": obj.get("chained_commission_id"),
            "done": obj.get("done"),
            "apikey": obj.get("apikey"),
            "future_id": obj.get("future_id"),
            "future_edited": obj.get("future_edited"),
            "import_id": obj.get("import_id"),
            "import_hash": obj.get("import_hash"),
            "forex": obj.get("forex")
        })
        return _obj


