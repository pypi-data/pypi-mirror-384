Metadata-Version: 2.4
Name: tirex-ts
Version: 1.1.1
Summary: A pre-trained Time Series Forecasting Model based on xLSTM supporting zero-shot forecasting
Author-email: Andreas Auer <andreas.auer@nx-ai.com>, Martin Loretz <martin.loretz@nx-ai.com>
License: NXAI COMMUNITY LICENSE AGREEMENT
        
        Preamble 1
        
        We are proud to present the NXAI TiRex time series model and software, demonstrating the strength of xLSTM for time series. While TiRex is freely available for open research and development, we believe that organizations significantly benefiting from our technology should contribute back. Our goal is to support research, small and medium-sized enterprises (SMEs), and open innovation, while ensuring that large enterprises who incorporate TiRex into commercial products or services fairly compensate the creators for their research and development efforts.
        
        Linz, May 27, 2025.
        
        Preamble 2
        
        The NXAI COMMUNITY LICENSE AGREEMENT is based on the META LLAMA 3 COMMUNITY LICENSE AGREEMENT and contains some modifications, especially Section 2, “Additional Commercial Terms” is different.
        
        “Agreement” means the terms and conditions for use, reproduction, distribution and modification of the NXAI Materials set forth herein.
        “Documentation” means the specifications, manuals and documentation accompanying NXAI Materials distributed by NXAI at https://github.com/NX-AI/.
        “Licensee” or “you” means you, or your employer or any other person or entity (if you are entering into this Agreement on such person or entity’s behalf), of the age required under applicable laws, rules or regulations to provide legal consent and that has legal authority to bind your employer or such other person or entity if you are entering in this Agreement on their behalf.
        “NXAI Materials” means, collectively, NXAI’s proprietary models, algorithms and any Software, including machine-learning model code, trained model weights, inference-enabling code, training-enabling code, fine-tuning enabling code and all other work of NXAI in the field of neural networks, Documentation (and any portion thereof) made available under this Agreement.
        “NXAI” or “we” means NXAI GmbH, Linz, Austria. Contact: license@nx-ai.com
        
        By using or distributing any portion or element of the NXAI Materials, you agree to be bound by this Agreement.
        
        1. License Rights and Redistribution.
        
            a. Grant of Rights. You are granted a non-exclusive, worldwide, non-transferable and royalty-free limited license under NXAIs intellectual property embodied in the NXAI Materials to use, reproduce, distribute, copy, create derivative works of, and make modifications to the NXAI Materials.
        
            b. Redistribution and Use.
        
                i. If you distribute or make available the NXAI Materials (or any derivative works thereof), or a product or service that uses any of them, including another AI model, you shall (A) provide a copy of this Agreement with any such NXAI Materials; and (B) prominently display “Built with technology from NXAI” on a related website, user interface, blogpost, about page, or product documentation.
        
                ii. If you receive NXAI Materials, or any derivative works thereof, from a Licensee as part of an integrated end user product, then Section 2 of this Agreement will not apply to you.
        
                iii. You must retain in all copies of the NXAI Materials that you distribute the following attribution notice within a “Notice” text file distributed as a part of such copies: “This product includes materials developed at NXAI that are licensed under the NXAI Community License, Copyright © NXAI GmbH, All Rights Reserved.”
        
        2. Additional Commercial Terms. If (a) the Licensee, on a consolidated basis (including parent, subsidiaries, and affiliates), exceeds the annual revenue of one hundred million Euros (€100,000,000), and (b) the Licensee incorporates NXAI Material, in whole or in part, into a Commercial Product or Service, then the Licensee must obtain a commercial license from NXAI, which NXAI may grant to you in its sole discretion, and you are not authorized to exercise any of the rights under this Agreement unless or until NXAI otherwise expressly grants you such rights.
        
        3. Disclaimer of Warranty. UNLESS REQUIRED BY APPLICABLE LAW, THE NXAI MATERIALS AND ANY OUTPUT AND RESULTS THEREFROM ARE PROVIDED ON AN “AS IS” BASIS, WITHOUT WARRANTIES OF ANY KIND, AND NXAI DISCLAIMS ALL WARRANTIES OF ANY KIND, BOTH EXPRESS AND IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. YOU ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USING OR REDISTRIBUTING THE NXAI MATERIALS AND ASSUME ANY RISKS ASSOCIATED WITH YOUR USE OF THE NXAI MATERIALS AND ANY OUTPUT AND RESULTS.
        
        4. Limitation of Liability. IN NO EVENT WILL NXAI OR ITS AFFILIATES BE LIABLE UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT, NEGLIGENCE, PRODUCTS LIABILITY, OR OTHERWISE, ARISING OUT OF THIS AGREEMENT, FOR ANY LOST PROFITS OR ANY INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL, EXEMPLARY OR PUNITIVE DAMAGES, EVEN IF NXAI OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF ANY OF THE FOREGOING.
        
        5. Intellectual Property.
        
            a. No trademark licenses are granted under this Agreement, and in connection with the NXAI Materials, neither NXAI nor Licensee may use any name or mark owned by or associated with the other or any of its affiliates, except as required for reasonable and customary use in describing and redistributing the NXAI Materials or as set forth in this Section 5(a). NXAI hereby grants you a license to use “NXAI” (the “Mark”) solely as required to comply with the last sentence of Section 1.b.i. All goodwill arising out of your use of the Mark will insure to the benefit of NXAI.
        
            b. Subject to NXAI’s ownership of NXAI Materials and derivatives made by or for NXAI, with respect to any derivative works and modifications of the NXAI Materials that are made by you, as between you and NXAI, you are and will be the owner of such derivative works and modifications.
        
        c. If you institute litigation or other proceedings against NXAI or any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the NXAI Materials or models released by NXAI outputs or results, or any portion of any of the foregoing, constitutes infringement of intellectual property or other rights owned or licensable by you, then any licenses granted to you under this Agreement shall terminate as of the date such litigation or claim is filed or instituted. You will indemnify and hold harmless NXAI from and against any claim by any third party arising out of or related to your use or distribution of the NXAI Materials.
        
        6. Term and Termination. The term of this Agreement will commence upon your acceptance of this Agreement or access to the NXAI Materials and will continue in full force and effect until terminated in accordance with the terms and conditions herein. NXAI may terminate this Agreement if you are in breach of any term or condition of this Agreement. Upon termination of this Agreement, you shall delete and cease use of the NXAI Materials. Sections 3, 4 and 7 shall survive the termination of this Agreement.
        
        7. Governing Law and Jurisdiction. This Agreement shall be governed by and construed in accordance with the laws of the Republic of Austria, without regard to its conflict of laws principles. The courts located in Linz, Austria shall have exclusive jurisdiction over any disputes arising out of or in connection with this Agreement.
        
Project-URL: Repository, https://github.com/NX-AI/tirex
Project-URL: Issues, https://github.com/NX-AI/tirex/issues
Keywords: TiRex,xLSTM,Time Series,Zero-shot,Deep Learning
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch
Requires-Dist: einops
Requires-Dist: huggingface-hub
Requires-Dist: numpy
Provides-Extra: cuda
Requires-Dist: xlstm; extra == "cuda"
Requires-Dist: ninja; extra == "cuda"
Provides-Extra: notebooks
Requires-Dist: ipykernel; extra == "notebooks"
Requires-Dist: matplotlib; extra == "notebooks"
Requires-Dist: pandas; extra == "notebooks"
Requires-Dist: python-dotenv; extra == "notebooks"
Provides-Extra: gluonts
Requires-Dist: gluonts; extra == "gluonts"
Requires-Dist: pandas; extra == "gluonts"
Provides-Extra: hfdataset
Requires-Dist: datasets; extra == "hfdataset"
Provides-Extra: test
Requires-Dist: fev>=0.6.0; extra == "test"
Requires-Dist: pytest; extra == "test"
Provides-Extra: all
Requires-Dist: xlstm; extra == "all"
Requires-Dist: ninja; extra == "all"
Requires-Dist: ipykernel; extra == "all"
Requires-Dist: matplotlib; extra == "all"
Requires-Dist: pandas; extra == "all"
Requires-Dist: python-dotenv; extra == "all"
Requires-Dist: gluonts; extra == "all"
Requires-Dist: datasets; extra == "all"
Requires-Dist: pytest; extra == "all"
Requires-Dist: fev>=0.6.0; extra == "all"
Dynamic: license-file

# TiRex: Zero-Shot Forecasting across Long and Short Horizons

[Paper](https://arxiv.org/abs/2505.23719) | [TiRex Huggingface Model Card](https://huggingface.co/NX-AI/TiRex)


This repository provides the pre-trained forecasting model TiRex introduced in the paper
[TiRex: Zero-Shot Forecasting across Long and Short Horizons with Enhanced In-Context Learning](https://arxiv.org/abs/2505.23719).


## TiRex Model

TiRex is a 35M parameter pre-trained time series forecasting model based on [xLSTM](https://github.com/NX-AI/xlstm).

### Key Facts:

- **Zero-Shot Forecasting**:
  TiRex is a pre-trained model that performs time series forecasting without requiring any training on your data. Simply download and use it.

- **Quantile Predictions**:
  TiRex provides both point estimates and quantile estimates.

- **State-of-the-art Performance over Long and Short Horizons**:
  TiRex achieves top scores in various time series forecasting benchmarks, see [GiftEval](https://huggingface.co/spaces/Salesforce/GIFT-Eval) and [ChronosZS](https://huggingface.co/spaces/autogluon/fev-leaderboard).
  These benchmark show that TiRex provides great performance for both long and short-term forecasting.

## Installation

```sh
pip install tirex-ts
```

Install with additional input/output adapter:
```sh
pip install 'tirex-ts[gluonts,hfdataset]'
```

TiRex is currently only tested on Linux and MacOS.

## Quick Start

```python
import torch
from tirex import load_model, ForecastModel

model: ForecastModel = load_model("NX-AI/TiRex")
data = torch.rand((5, 128))  # Sample Data (5 time series with length 128)
quantiles, mean = model.forecast(context=data, prediction_length=64)
```

We provide an extended quick start example in [examples/quick_start_tirex.ipynb](./examples/quick_start_tirex.ipynb).
This notebook also shows how to use the different input and output types of you time series data.
You can also run it in [Google Colab](https://colab.research.google.com/github/NX-AI/tirex/blob/main/examples/quick_start_tirex.ipynb).

We provide notebooks to run the benchmarks: [GiftEval](./examples/gifteval/gifteval.ipynb) and [Chronos-ZS](./examples/chronos_zs/chronos_zs.ipynb).

## Finetuning TiRex
TiRex already provide state-of-the-art performance for zero-shot prediction. Hence, you can use it without training on your own data.

If you are interested in models fine-tuned on your data or with different pretraining, please contact us at [contact@nx-ai.com](mailto:contact@nx-ai.com)


## CUDA Kernels

Tirex can use custom CUDA kernels for the sLSTM cells.
These CUDA kernels are compiled when the model is loaded the first time.
The CUDA kernels require GPU hardware that support CUDA compute capability 8.0 or later.
We also highly suggest to use the provided [conda environment spec](./requirements_py26.yaml).
The CUDA kernels are automatically used when the xlstm package is installed.

Create a conda environment:
```sh
conda create --file requirements_gpu.yaml
conda activate tirex
```

To install TiRex with the CUDA kernels run:
```sh
pip install 'tirex-ts[cuda,gluonts,hfdataset]'
```

Explicitly set the custom CUDA backend:
```python
model = load_model("NX-AI/TiRex", backend="cuda")
```

## Installation (Docker)
If you prefer running TiRex in containers, we provide ready-to-use Docker services for both GPU and CPU.

Prerequisites:
- Docker and Docker Compose installed
- For GPU: NVIDIA driver and NVIDIA Container Toolkit (to enable `runtime: nvidia`)

Volumes and ports:
- Local `./examples` and `./data` are mounted into the container at `/app/examples` and `/app/data`.
- GPU service publishes Jupyter on port `8888`; CPU service publishes on `8889`.

Start the CPU container and launch Jupyter Notebook:
```bash
docker build -t tirex:cpu -f Dockerfile.cpu . && docker run --rm -d --name tirex-cpu -p 8889:8888 -v "$(pwd)/examples":/app/examples -v "$(pwd)/data":/app/data tirex:cpu bash -lc "jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''"
```

Start the GPU container and launch Jupyter Notebook (check your gpu capability number with this [link](https://developer.nvidia.com/cuda-gpus)):
```bash
docker build -t tirex:gpu -f Dockerfile.gpu . && docker run -e TORCH_CUDA_ARCH_LIST="9.0" --gpus all --rm -d --name tirex-gpu -p 8888:8888 -v "$(pwd)/examples":/app/examples -v "$(pwd)/data":/app/data tirex:gpu bash -lc "jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''"
```

Access in your browser:
- GPU: http://localhost:8888
- CPU: http://localhost:8889


### Troubleshooting CUDA

**This information is taken from the
[xLSTM repository](https://github.com/NX-AI/xlstm) - See this for further details**:

For the CUDA version of sLSTM, you need to specify Compute Capability, see [https://developer.nvidia.com/cuda-gpus](https://developer.nvidia.com/cuda-gpus). Or just specify a range as in the example below:
```bash
export TORCH_CUDA_ARCH_LIST="8.0;8.6;9.0"
```

For all kinds of custom setups with torch and CUDA, keep in mind that versions have to match. Also, to make sure the correct CUDA libraries are included you can use the `XLSTM_EXTRA_INCLUDE_PATHS` environment variable now to inject different include paths, for example:

```bash
export XLSTM_EXTRA_INCLUDE_PATHS='/usr/local/include/cuda/:/usr/include/cuda/'
```

or within python:

```python
import os
os.environ['XLSTM_EXTRA_INCLUDE_PATHS']='/usr/local/include/cuda/:/usr/include/cuda/'
```


## Cite

If you use TiRex in your research, please cite our work:

```bibtex
@article{auerTiRexZeroShotForecasting2025,
  title = {{{TiRex}}: {{Zero-Shot Forecasting Across Long}} and {{Short Horizons}} with {{Enhanced In-Context Learning}}},
  author = {Auer, Andreas and Podest, Patrick and Klotz, Daniel and B{\"o}ck, Sebastian and Klambauer, G{\"u}nter and Hochreiter, Sepp},
  journal = {ArXiv},
  volume = {2505.23719},
  year = {2025}
}
```


## License

TiRex is licensed under the [NXAI community license](./LICENSE).
