[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "pymatgen-io-aims"
version = "0.0.4"
authors = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
maintainers = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
description = "pymatgen-io-aims is a pymatgen addon that bridges the gap between FHI-aims and the pymatgen ecosystem"
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
      "pymatgen>=2022.0.3",
      "pyfhiaims>=0.0.9",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
]

[project.urls]
Homepage = "https://gitlab.com/FHI-aims-club/pymatgen-io-aims.git"
Issues = "https://gitlab.com/FHI-aims-club/pymatgen-io-aims/issues"

[project.optional-dependencies]
dev = [
    "ruff",
    "pytest",
    "pytest_parametrize_cases",
    "pre-commit",
] # Deps for development

[tool.setuptools.packages]
find = {} # Scan the project directory with the default parameters

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
ignore = ["D100", "PLR0912", "PLR0913", "PLR0915"]
select = [
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # pycodestyle error
  "EXE",    # flake8-executable
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  "FBT003", # boolean-positional-value-in-call
  "FLY",    # flynt
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "ISC",    # flake8-implicit-str-concat
  "PD",     # pandas-vet
  "PERF",   # perflint
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PYI",    # flakes8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "TCH",    # flake8-type-checking
  "TID",    # tidy imports
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle warning
  "YTT",    # flake8-2020
]

pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "PLR"]
