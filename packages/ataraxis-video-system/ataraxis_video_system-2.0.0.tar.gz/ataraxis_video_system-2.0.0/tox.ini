# This file provides configurations for tox-based project development and management automation tasks.

# Base tox configurations. Note, the 'envlist' runs in the listed order whenever 'tox' is used without an -e specifier.
[tox]
requires =
    tox>=4,<5
    tox-uv>=1,<2
envlist =
    uninstall
    export
    lint
    stubs
    {py312, py313}-test
    coverage
    docs
    build
    install

# This forces tox to create a 'sterile' environment into which the project with all dependencies is installed prior to
# running the requested tasks, isolating the process from the rest of the system.
isolated_build = True

# Note: The 'basepython' argument should always be set to the earliest supported python version.
[testenv: lint]
description =
    Runs static code formatting, style, and typing checkers. Follows the configuration defined in the pyproject.toml
    file.
extras = dev
basepython = py312
commands =
    automation-cli purge-stubs
    ruff format
    ruff check --fix ./src
    mypy ./src

[testenv: stubs]
description = Generates the py.typed marker and the .pyi stub files using the project's wheel distribution.
depends = lint
extras = dev
commands =
    automation-cli process-typed-markers
    stubgen -o stubs --include-private -p ataraxis_video_system -v
    automation-cli process-stubs
    ruff format
    ruff check --select I --fix ./src

[testenv: {py312, py313}-test]
package = wheel
description =
    Runs unit and integration tests for each of the python versions listed in the task name and aggregates test coverage
    data. Uses 'loadgroup' balancing and all logical cores to optimize task runtime speed.
extras = dev
setenv = COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
    pytest --import-mode=append --cov=ataraxis_video_system --cov-config=pyproject.toml --cov-report=xml \
    --junitxml=reports/pytest.xml.{envname} -n logical --dist loadgroup

[testenv:coverage]
skip_install = true
description =
    Combines test-coverage data from multiple test runs (for different python versions) into a single html file. The
    file can be viewed by loading the 'reports/coverage_html/index.html'.
deps = ataraxis-automation==7.0.0
setenv = COVERAGE_FILE = reports/.coverage
depends = {py312, py313}-test
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage xml
    coverage html

[testenv:docs]
description =
    Builds the API documentation from source code docstrings using Sphinx. The result can be viewed by loading
    'docs/build/html/index.html'.
deps = ataraxis-automation==7.0.0
depends = uninstall
allowlist_externals = doxygen
commands =
    sphinx-build -b html -d docs/build/doctrees docs/source docs/build/html -j auto -v

[testenv:build]
skip_install = true
description = Builds the project's source code distribution (sdist) and binary distribution (wheel).
deps = ataraxis-automation==7.0.0
allowlist_externals = docker
commands =
    python -m build . --sdist
    python -m build . --wheel

# Note: use 'tox -e upload --replace-token' command to replace the token stored in the .pypirc file before uploading
# the project.
[testenv:upload]
skip_install = true
description = Uses twine to upload all files inside the project's 'dist' directory to PyPI.
deps = ataraxis-automation==7.0.0
allowlist_externals = distutils
commands =
    automation-cli acquire-pypi-token {posargs:}
    twine upload dist/* --skip-existing --config-file .pypirc

[testenv:install]
skip_install = true
deps = ataraxis-automation==7.0.0
depends =
    lint
    stubs
    {py312, py313}-test
    coverage
    docs
    export
description = Builds and installs the project into the its' development mamba environment.
commands =
    automation-cli install-project --environment_name axvs_dev

[testenv:uninstall]
skip_install = true
deps = ataraxis-automation==7.0.0
description = Uninstalls the project from its' development mamba environment.
commands =
    automation-cli uninstall-project --environment_name axvs_dev

[testenv:create]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Creates the project's development mamba environment using the requested python version and installs runtime and
    development project dependencies extracted from the pyproject.toml file.
commands =
    automation-cli create-environment --environment_name axvs_dev --python_version 3.13

[testenv:remove]
skip_install = true
deps = ataraxis-automation==7.0.0
description = Removes the project's development mamba environment.
commands =
    automation-cli remove-environment --environment_name axvs_dev

[testenv:provision]
skip_install = true
deps = ataraxis-automation==7.0.0
description = Provisions the project's development mamba environment by removing and (re)creating the environment.
commands =
    automation-cli provision-environment --environment_name axvs_dev --python_version 3.13

[testenv:export]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Exports the project's development mamba environment to the 'envs' project directory as a .yml file and as a
    spec.txt with revision history.
commands =
    automation-cli export-environment --environment_name axvs_dev

[testenv:import]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Creates or updates the project's development mamba environment using the .yml file stored in the 'envs' project
    directory.
commands =
    automation-cli import-environment --environment_name axvs_dev
