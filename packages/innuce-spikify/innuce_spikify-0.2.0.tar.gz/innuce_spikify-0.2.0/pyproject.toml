[tool.poetry]
name = "innuce-spikify"
version = "0.2.0"
description = "A Python package to convert signal data to spike trains"
authors = ["Benedetto Leto <benedetto.leto@polito.it>", "Gianvito Urgese <gianvito.urgese@polito.it>", "Vittorio Fra <vittorio.fra@polito.it>", "Riccardo Pignari <riccardo.pignari@polito.it>"]
readme = "README.md"
# homepage = ""
repository = "https://github.com/neuromorphic-polito/spikify"
documentation = "https://spikify.readthedocs.io/en/latest/"
license = "Apache-2.0"
keywords = ["artificial intelligence", "neuromorphic computing", "signal processing", "education"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

packages = [
    { include = "spikify"}
]

exclude = ["docs", "tests", "examples"]

[tool.poetry.dependencies]
python = "^3.10"
numpy = ">=2.1.0"
scipy = ">=1.14.1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"

[tool.poetry.group.code-quality]
optional = true

[tool.poetry.group.code-quality.dependencies]
pyproject-flake8 = '^7.0.0'
black = '^24.8.0'
docformatter = '^1.7.5'
pre-commit = "^3.8.0"

[tool.poetry.group.release]
optional = true

[tool.poetry.group.release.dependencies]
bump-my-version ="^0.26.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
furo = '2024.8.6'
sphinx = '8.1.3'
sphinx-copybutton = '0.5.2'
sphinx-data-viewer = '0.1.5'
sphinx-needs = '4.1.0'
sphinx_design = '0.6.1'
sphinxcontrib-plantuml = '0.30'
sphinxcontrib-programoutput = '0.18'
numpydoc = '1.8.0'



[tool.black]
line-length = 120

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
pre-summary-newline = true
blank = true
black = true

[tool.flake8]
count = true
statistics = true
show-source = true
max-line-length = 120
extend-ignore = ["E203"]

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = [
    "tests/*",
]

[tool.coverage.run]
branch = true
omit = [
    "examples/*",
    "docs/*",
    "tests/*",
]


[tool.coverage.report]

exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
format = 'markdown'

[tool.coverage.xml]
output = "coverage/reports/coverage.xml"

[tool.poetry.extras]
dev = ["pytest", "pytest-cov"]
code-quality = ["pyproject-flake8", "black", "docformatter", "pre-commit"]
release = ["bump-my-version"]
docs = ["furo", "sphinx", "sphinx-copybutton", "sphinx-data-viewer", "sphinx-needs", "sphinx_design", "sphinxcontrib-plantuml", "sphinxcontrib-programoutput", "numpydoc"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
