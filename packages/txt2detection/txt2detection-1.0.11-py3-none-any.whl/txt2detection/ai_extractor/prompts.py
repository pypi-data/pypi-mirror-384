from llama_index.core import PromptTemplate, ChatPromptTemplate
import textwrap
from llama_index.core.base.llms.types import ChatMessage, MessageRole


SIEMRULES_PROMPT = ChatPromptTemplate([
    ChatMessage.from_str("""
**Persona:**  

You are an expert in cybersecurity threat detection. Given a structured security report, generate a Sigma rule following the Sigma specification.  

## **Requirements:**  
Return the result as a **JSON output**, ensuring that each dictionary represents a Sigma rule with the following **AI-generated fields**:  

### **Meta Properties (Generated by AI Only)**  
- `"title"`: A concise, descriptive title for the rule.  
- `"description"`: A summary of the rule, explaining its purpose and detection logic.  
- `"tags"`: **Generated by AI**, including:  
  - ATT&CK and CVE references relevant to the report.
- `"falsepositives"`: Please describe situations where this detection rule might trigger false positive detections. Put each situation description as a new list item
- `"logsources"`: Valid sigma rule logsource
- `"detection"`: Valid sigma rule detection
- `"indicator_types"`: One or more STIX v2.1 indicator.indicator_types
- `"level"`: select SIGMA level for the rule

                         
### **Indicator Types**
- `"anomalous-activity"`: Unexpected, or unusual activity that may not necessarily be malicious or indicate compromise. This type of activity may include reconnaissance-like behavior such as port scans or version identification, network behavior anomalies, and asset and/or user behavioral anomalies.
- `"anonymization"`: Suspected anonymization tools or infrastructure (proxy, TOR, VPN, etc.).
- `"benign"`: Activity that is not suspicious or malicious in and of itself, but when combined with other activity may indicate suspicious or malicious behavior.
- `"compromised"`: Assets that are suspected to be compromised.
- `"malicious-activity"`: Patterns of suspected malicious objects and/or activity.
- `"attribution"`: Patterns of behavior that indicate attribution to a particular Threat Actor or Campaign.
- `"unknown"`: There is not enough information available to determine the type of indicator.

### **Level**
The level field contains one of five string values. It describes the criticality of a triggered rule. While low and medium level events have an informative character, events with high and critical level should lead to immediate reviews by security analysts.
- informational: Rule is intended for enrichment of events, e.g. by tagging them. No case or alerting should be triggered by such rules because it is expected that a huge amount of events will match these rules.
- low: Notable event but rarely an incident. Low rated events can be relevant in high numbers or combination with others. Immediate reaction shouldn't be necessary, but a regular review is recommended.
- medium: Relevant event that should be reviewed manually on a more frequent basis.
- high: Relevant event that should trigger an internal alert and requires a prompt review.
- critical: Highly relevant event that indicates an incident. Critical events should be reviewed immediately. It is used only for cases in which probability borders certainty.


### **Tags***

Tags are to follow the format <namespace>.<value>.
IMPORTANT: select 0 or more from this section and only include valid and most appropriate tags

#### Namespace: attack

ATT&CK is either a [technique], a [group], a [software] or a [tactic].

* *attack.t1234*: Refers to a [technique](https://attack.mitre.org/wiki/All_Techniques)
* *attack.g1234*: Refers to a [group](https://attack.mitre.org/wiki/Groups)
* *attack.s1234*: Refers to [software](https://attack.mitre.org/wiki/Software)

Tactics:

* attack.initial-access
* attack.execution
* attack.persistence
* attack.privilege-escalation
* attack.defense-evasion
* attack.credential-access
* attack.discovery
* attack.lateral-movement
* attack.collection
* attack.exfiltration
* attack.command-and-control
* attack.impact

#### Namespace: cve
Only include from this section, CVEs that are explicitly mentioned in input document. Do not attempt to make up any random CVE-ID

Use the CVE tag from [MITRE](https://cve.mitre.org) in lower case separated by dots. Example tag: `cve.2021-44228`.
                         
### **Detection:**  

You need to generate a structured `detection` object representing a set of **search identifiers** used for detecting patterns in log data. Follow these rules when constructing `detection`:  

1. **Overall Structure:**  
   - The root object must contain a **required** field called `"condition"`, which is a string that defines the relationship between different search identifiers (e.g., `"selection1 OR selection2"`).  
   - Additional properties (besides `"condition"`) represent **search identifiers**, which can be either a **list** or a **map**.  

2. **Search Identifier Format:**  
   - A **list** (`array`) can contain:  
     - **Strings** (e.g., `"error_code_500"`, `"user_login_failed"`).  
     - **Integers** (e.g., `404`, `500`).  
     - **Objects** where all values are strings.  
   - A **map** (`object`) where all values are strings.  

3. **Example Detection Data:**  
```json
{
  "condition": "selection OR event_selection",
  "selection": ["error_code_500", 404, {"key": "value"}],
  "event_selection": {
    "event_type": "failed_login",
    "source_ip": "192.168.1.1"
  }=
}
```

Make sure your response follows this format and adheres to the rules above.


## **Additional Instructions**  
- Ensure the `"tags"` field includes relevant ATT&CK and CVE references based on the report content.  
- Return a **valid JSON output** without YAML formatting for seamless processing.
"""),
    ChatMessage.from_str("Taking the entire input of my next message, analyze and return appropriate response", MessageRole.USER),
    ChatMessage.from_str("{document}", MessageRole.USER),
])


ATTACK_FLOW_PROMPT_TEMPL = ChatPromptTemplate(
    [
        ChatMessage.from_str(
            """You are a cybersecurity threat intelligence analyst.

Your task is to analyze structured cybersecurity incident reports (e.g., malware analysis, APTs, data breaches, vulnerabilities) and extract and organize MITRE ATT&CK techniques as part of an attack flow analysis. This analysis helps defenders understand adversary behavior using the MITRE Attack Flow model maintained by the MITRE Center for Threat-Informed Defense.""",
            MessageRole.SYSTEM,
        ),
        ChatMessage.from_str(
            "Hello. Please provide the document for analysis. Only include the full document text in your response.",
            MessageRole.ASSISTANT,
        ),
        ChatMessage.from_str("{document}", MessageRole.USER),
        ChatMessage.from_str(
            "What ATT&CK techniques and related metadata were extracted from this document?",
            MessageRole.ASSISTANT,
        ),
        ChatMessage.from_str(
            "<extracted_techniques>\n\n{extracted_techniques}\n\n</extracted_techniques>",
            MessageRole.USER,
        ),
        ChatMessage.from_str(
            "Let's begin with tactic selection. What should I do with the techniques and possible tactics?",
            MessageRole.ASSISTANT,
        ),
        # PART 1: Tactic Selection Phase
        ChatMessage.from_str(
            """
PART 1: TACTIC SELECTION

For each of the technique in `<extracted_techniques>`, return [technique_id, tactic_name], where
- technique id = `technique.id`
- tactic_name = choice from `technique.possible_tactics`, where choice is selected based on the **most contextually appropriate** tactic name for each technique based on how it's used in the document.

üìå Output only the tactic assignments in this format:
<code>
{
  "tactic_selection": [
    ["Txxxx", "impact"],
    ["Tyyyy", "discovery"],
    ...
  ]
}
</code>

‚ö†Ô∏è Constraints:
- Use **only** the `possible_tactics` provided with each technique.
- Do **not** invent or infer any technique or tactic name beyond what‚Äôs given in <extracted_techniques>.
- Ensure **every** technique in `<extracted_techniques>` appears in `tactic_selection`, even if uncertain ‚Äî choose the best fit.
- Technique IDs in `tactic_selection` must match exactly from <extracted_techniques> (e.g., `T1059` must match `T1059` and not `T1059.005`, `T1001.001` must match `T1001.001` and not `T1001`).
- Must include every technique in `<extracted_techniques>`
""",
            MessageRole.USER,
        ),
        ChatMessage.from_str(
            "Thanks. Now let's continue with the attack flow. How should I proceed?",
            MessageRole.ASSISTANT,
        ),
        # PART 2: Attack Flow Construction Phase
        ChatMessage.from_str(
            """
PART 2: ATTACK FLOW CONSTRUCTION

Using the `<extracted_techniques>` and the incident details in the document, construct a sequence of MITRE ATT&CK techniques that represent the adversary‚Äôs logical progression through the attack.

For each technique:
- Use the `technique.id` exactly as provided
- Assign:
  - `name`: a short, context-based phrase describing how the technique is used
  - `description`: a longer explanation of how the technique operates in this specific incident, based only on the document
  - `position`: the step in the logical or chronological attack sequence (starting at 0)

‚ö†Ô∏è Constraints:
- Use **only** technique IDs provided in `<extracted_techniques>` ‚Äî do **not** invent or infer new ones
- Ensure all included technique IDs exactly match `technique.id` from `<extracted_techniques>` (e.g., `T1059` must match `T1059` and not `T1059.005`, `T1001.001` must match `T1001.001` and not `T1001`).

üì§ Output Format:
<code>
{
  "items": [
    {
      "position": 0,
      "attack_technique_id": "Txxxx",
      "name": "Short contextual name",
      "description": "Detailed contextual explanation"
    },
    ...
  ],
  "success": true
}
</code>

Your goal is to tell the story of how the adversary moved through the attack using the extracted ATT&CK techniques, in the correct sequence, with clear context for defenders.
""",
            MessageRole.USER,
        ),
        # PART 3: Combination phase
        ChatMessage.from_str(
            """
üì§ Final Output Format:
<code>
{
  "tactic_selection": [...],  // Use your previous output
  "items": [
    {
      "position": 0,
      "attack_technique_id": "Txxxx",
      "name": "Short contextual name",
      "description": "Detailed contextual explanation"
    },
    ...
  ],
  "success": true
}
</code>

‚ö†Ô∏è Constraints:
- All `attack_technique_id` values in `items` must come from `<extracted_techniques>`
- The `position` field should reflect the **chronological or logical** execution order of the attack
- Do **not** introduce new technique IDs

‚úÖ Your goal is to build a realistic, document-based attack flow using MITRE ATT&CK technique‚Äìtactic pairs.
""",
            MessageRole.USER,
        ),
    ]
)
