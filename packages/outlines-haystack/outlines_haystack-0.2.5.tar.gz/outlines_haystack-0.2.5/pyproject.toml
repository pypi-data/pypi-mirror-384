[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[project]
name = "outlines-haystack"
version = "0.2.5"
description = 'Use `outlines` generators with Haystack.'
readme = "README.md"
requires-python = ">=3.10,<3.13"
keywords = [
  "nlp",
  "machine-learning",
  "ai",
  "haystack",
  "llm",
  "outlines",
  "structured-generation",
  "generative-ai",
]
authors = [{ name = "Edoardo Abati" }]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "haystack-ai>=2.5.0",
  "outlines>=0.2.0,<1.0.0",
]
[project.optional-dependencies]
mlxlm = ["outlines[mlxlm]; sys_platform == 'darwin'"]
openai = ["outlines[openai]"]
transformers = ["outlines[transformers]"]
# We include llama-cpp-python as a dependency here to ensure that it is installed
# from the custom index defined below on macOS, where building from source might fail.
llama-cpp = ["outlines[llamacpp]", "llama-cpp-python"]

[project.urls]
Documentation = "https://github.com/EdAbati/outlines-haystack#readme"
Issues = "https://github.com/EdAbati/outlines-haystack/issues"
Source = "https://github.com/EdAbati/outlines-haystack"


# Copied from : https://github.com/deepset-ai/haystack-core-integrations/blob/main/integrations/llama_cpp/pyproject.toml#L31C1-L37C62
# On macOS GitHub runners, we use a custom index to download pre-built wheels.
# Installing from source might fail due to missing dependencies (CMake fails with "OpenMP not found")
[tool.uv.sources]
llama-cpp-python = [
  { index = "llama-cpp-python-macos", marker = "sys_platform == 'darwin'" },
]
[[tool.uv.index]]
name = "llama-cpp-python-macos"
url = "https://abetlen.github.io/llama-cpp-python/whl/metal/"
explicit = true

[dependency-groups]
core = [
  "outlines-haystack[llama-cpp,openai,transformers,mlxlm]",
]
lint = [
  "ruff",
]
testing = [
  "coverage[toml]>=6.5",
  "pytest",
]
typing = [
  "mypy>=1.0.0",
]
dev = [
  "notebook",
  "poethepoet",
  "pre-commit",
  { include-group = "testing" },
  { include-group = "core" },
  { include-group = "lint" },
  { include-group = "typing" },
]
dev-macos = [
  { include-group = "dev" },
  "outlines-haystack[mlxlm]",
]

[tool.uv.dependency-groups]
dev = { requires-python = "!=3.11" }

# Unit tests and Coverage
[tool.pytest.ini_options]
testpaths = [
  "tests",
]
[tool.coverage.run]
source_pkgs = ["outlines_haystack", "tests"]
branch = true
parallel = true
[tool.coverage.paths]
outlines_haystack = [
  "src/outlines_haystack",
  "*/outlines-haystack/src/outlines_haystack",
]
tests = ["tests", "*/outlines-haystack/tests"]
[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

# Format/Linting Tools
[tool.ruff]
target-version = "py310"
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Missing trailing comma (conflict with ruff-format)
  "COM812",
  # No required doctstring for modules, packages
  "D100",
  "D104",
  # No future annotations
  "FA100",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Haystack doesn't support | for Union types
  "UP007",
]

[tool.ruff.lint.isort]
known-first-party = ["outlines_haystack"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252", "D100", "D101", "D103", "SLF001"]
"notebooks/*" = ["ERA001", "D101"]

# Tasks
[tool.poe]
executor.type = "simple"

[tool.poe.tasks]
test = { cmd = "pytest", help = "Runs all unit tests" }
test-cov = { cmd = "coverage run -m pytest", help = "Runs all unit tests with coverage" }
cov-combine = { cmd = "coverage combine", help = "Combines all coverage data files" }
cov-report = { cmd = "coverage report", help = "Generates a coverage report" }
fmt = { sequence = [
  "_fmt_format",
  "_fmt_lint",
], ignore_fail = "return_non_zero", help = "Checks code formatting and linting" }
_fmt_lint = { cmd = "ruff check . --fix", help = "Lint the codebase" }
_fmt_format = { cmd = "ruff format .", help = "Formats the codebase" }
