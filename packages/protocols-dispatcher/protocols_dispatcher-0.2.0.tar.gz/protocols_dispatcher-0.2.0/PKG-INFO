Metadata-Version: 2.4
Name: protocols-dispatcher
Version: 0.2.0
Summary: –ì–∏–±–∫–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
Project-URL: PyPI, https://pypi.org/project/protocols_dispatcher/
Project-URL: Homepage, https://github.com/Enigma0960/protocols_dispatcher
Project-URL: Source, https://github.com/Enigma0960/protocols_dispatcher
Project-URL: Issues, https://github.com/Enigma0960/protocols_dispatcher/issues
Author-email: Supryadkin Igor <igorsupr@gamail.com>
License: MIT License
        
        Copyright (c) 2025 Igor Supradkin
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.9
Requires-Dist: typing-extensions; python_version < '3.11'
Provides-Extra: all
Requires-Dist: aioserial; extra == 'all'
Requires-Dist: pytest-asyncio>=1.0.0; (python_version >= '3.8') and extra == 'all'
Requires-Dist: pytest-cov>=6.2.1; extra == 'all'
Requires-Dist: pytest-mock>=3.14.1; extra == 'all'
Requires-Dist: pytest>=8.4.1; extra == 'all'
Provides-Extra: dev
Requires-Dist: pytest-asyncio>=1.0.0; (python_version >= '3.8') and extra == 'dev'
Requires-Dist: pytest-cov>=6.2.1; extra == 'dev'
Requires-Dist: pytest-mock>=3.14.1; extra == 'dev'
Requires-Dist: pytest>=8.4.1; extra == 'dev'
Provides-Extra: serial
Requires-Dist: aioserial; extra == 'serial'
Description-Content-Type: text/markdown

# protocols_dispatcher

> **–ì–∏–±–∫–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤**

`protocols_dispatcher` —É–ø—Ä–æ—â–∞–µ—Ç –∂–∏–∑–Ω—å, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:

* **–ø—Ä–∏–Ω—è—Ç—å –ø–æ—Ç–æ–∫ –±–∞–π—Ç–æ–≤** ‚Üí –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ ¬´–ø–∞–∫–µ—Ç—ã¬ª (—Å–ª–æ–≤–∞—Ä—å Python);
* **–≤—ã–±—Ä–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫** –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º;
* **–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç** —Ç–µ–º –∂–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º;
* –ª–µ–≥–∫–æ **–¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã** (TCP, serial, —Ñ–∞–π–ª—ã ‚Äî –ª—é–±—ã–µ).

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–±–æ—Ä–∞–º–∏ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

[![PyPI version](https://img.shields.io/pypi/v/protocols_dispatcher?color=brightgreen)](https://pypi.org/project/protocols_dispatcher/)
![License](https://img.shields.io/github/license/Enigma0960/protocols_dispatcher)

---

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
# –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
pip install protocols_dispatcher

# + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—É —á–µ—Ä–µ–∑ aioserial
pip install protocols_dispatcher[serial]
```

| extra    | —á—Ç–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç                                    |   |
| -------- | -------------------------------------------------- | - |
| `serial` | [`aioserial`](https://pypi.org/project/aioserial/) |   |

---

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```python
import asyncio
from protocols_dispatcher import Dispatcher, AbstractProtocol, AbstractTransport
from protocols_dispatcher.transports.serial import SerialTransport

class EchoProtocol(AbstractProtocol):
    async def matches(self, raw: bytes) -> bool:
        # ¬´–ü—Ä–∏–Ω–∏–º–∞–µ–º¬ª –ª—é–±–æ–π –∫–∞–¥—Ä
        return True

    async def deserialize(self, data: bytes):
        # –ö–∞–∂–¥—ã–π –ø—Ä–∏—à–µ–¥—à–∏–π —Ñ—Ä–µ–π–º ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π ¬´–ø–∞–∫–µ—Ç¬ª
        return [dict(raw=data)]

    async def serialize(self, packet: dict):
        # –ü—Ä–æ—Å—Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø—Ä–µ—Ñ–∏–∫—Å
        return b"ACK:" + packet["raw"]

async def main():
    proto     = EchoProtocol()
    transport = SerialTransport(port="/dev/ttyUSB0", baudrate=115200)

    dsp = Dispatcher(proto, transport)

    @dsp.handler()              # –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ‚Äî –ª–æ–≤–∏–º –≤—Å—ë
    async def handle(pkt):
        print("RX:", pkt["raw"].hex())
        # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
        return dict(raw=pkt["raw"])

    # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–æ–π
    await transport.run()

asyncio.run(main())
```

---

## üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

* **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö** ‚Äî –æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–æ callback-–æ–≤.
* **–ü–∞—Ç—Ç–µ—Ä–Ω ¬´–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä‚Äë—Ñ–∏–ª—å—Ç—Ä¬ª**

  ```python
  @dispatcher.handler(MyFilter())
  def on_custom(pkt): ...
  ```

  –ª–∏–±–æ —á–µ—Ä–µ–∑ `router.handler(filter=..., protocol=...)`, –µ—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ.
* **ProtocolRouter** ‚Äî –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –∏–¥—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.
* **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–æ–±–∫–∏** ‚Äî –ø—Ä–∏–º–µ—Ä–Ω—ã–µ `DummyProtocol` / `DummyTransport` –∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è `pytest`.
* **Extras‚Äëdependencies** ‚Äî –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç–∞–≤—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

---

## üóÇÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
üì¶ protocols_dispatcher
 ‚îú‚îÄ __init__.py
 ‚îú‚îÄ dispatcher.py          # —è–¥—Ä–æ: AbstractProtocol / AbstractTransport / Dispatcher / ProtocolRouter
 ‚îú‚îÄ transports/
 ‚îÇ   ‚îú‚îÄ __init__.py
 ‚îÇ   ‚îî‚îÄ serial.py          # SerialTransport (–æ–ø—Ü–∏—è [serial])
 ‚îî‚îÄ tests/
     ‚îú‚îÄ helpers.py         # –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —é–Ω–∏—Ç‚Äë—Ç–µ—Å—Ç–æ–≤
     ‚îú‚îÄ conftest.py
     ‚îî‚îÄ ...
```

---

## üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
git clone https://github.com/your-github/protocols_dispatcher.git
cd protocols_dispatcher
pip install -e .[dev]      # dev‚Äë–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pytest, pytest-asyncio, ruff, mypy ...
pytest -q
```

---

## ü§ù –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ü–∏—è

1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ä–∫, —Å–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É `feature/whatever`.
2. `pre-commit install` ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç code‚Äëstyle.
3. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç—ã –∫ –Ω–æ–≤–æ–º—É –∫–æ–¥—É.
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PR –∏ –æ–ø–∏—à–∏—Ç–µ, –∑–∞—á–µ–º change –ø–æ–ª–µ–∑–µ–Ω.

---

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

–ü—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π MIT ‚Äî —Å–º. —Ñ–∞–π–ª [LICENSE](LICENSE).

---

### üôå –ê–≤—Ç–æ—Ä—ã –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

* **–ò–≥–æ—Ä—å –°—É–ø—Ä—è–¥–∫–∏–Ω** ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
* **ChatGPT** ‚Äî –ø–æ–º–æ—â—å –≤ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏–π –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

> –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–º–æ–≥–ª–∞ –≤–∞–º ‚Äî –ø–æ—Å—Ç–∞–≤—å—Ç–µ ‚≠êÔ∏è –≤ GitHub –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–π –∫–æ–ª–ª–µ–≥–∞–º!
