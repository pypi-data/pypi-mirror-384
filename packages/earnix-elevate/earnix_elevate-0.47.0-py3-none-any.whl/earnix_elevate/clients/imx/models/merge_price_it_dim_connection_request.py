# coding: utf-8

"""
Earnix Elevate Import Export API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Optional

from earnix_elevate.clients.imx.models.merge_connection_request import (
    MergeConnectionRequest,
)
from earnix_elevate.clients.imx.models.o_auth_request import OAuthRequest


class MergePriceItDimConnectionRequest(MergeConnectionRequest):
    """
    `MergePriceItDimConnectionRequest`

    Request to partially update a Snowflake Connection, allowing selective modification of authentication credentials and connection settings including database, schema, and warehouse configuration.
    """

    auth: Optional[OAuthRequest] = None
    __properties = ["id", "lockVersion", "name", "description", "tags", "type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MergePriceItDimConnectionRequest:
        """Create an instance of MergePriceItDimConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MergePriceItDimConnectionRequest:
        """Create an instance of MergePriceItDimConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MergePriceItDimConnectionRequest.parse_obj(obj)

        _obj = MergePriceItDimConnectionRequest.parse_obj(
            {
                "id": obj.get("id"),
                "lock_version": obj.get("lockVersion"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "tags": obj.get("tags"),
                "type": obj.get("type"),
            }
        )
        return _obj
