# coding: utf-8

"""
Earnix Elevate Import Export API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint

from earnix_elevate.clients.imx.models.test_updated_connection_request import (
    TestUpdatedConnectionRequest,
)


class TestUpdatedDeltaSharingConnectionRequest(TestUpdatedConnectionRequest):
    """
    `TestUpdatedDeltaSharingConnectionRequest`

    Request to test Deltasharing Connection using the current configuration stored in the system.
    """

    __properties = ["type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestUpdatedDeltaSharingConnectionRequest:
        """Create an instance of TestUpdatedDeltaSharingConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestUpdatedDeltaSharingConnectionRequest:
        """Create an instance of TestUpdatedDeltaSharingConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestUpdatedDeltaSharingConnectionRequest.parse_obj(obj)

        _obj = TestUpdatedDeltaSharingConnectionRequest.parse_obj(
            {"type": obj.get("type")}
        )
        return _obj
