# coding: utf-8

"""
Earnix Elevate Data API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Optional

from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr


class ExportPartResultPairResponse(BaseModel):
    """
    `ExportPartResultPairResponse`

    eTag for each export (upload) part
    """

    e_tag: Optional[StrictStr] = Field(
        default=None,
        alias="ETag",
        description="Entity tag returned by S3 for the uploaded part, used for verification and completion",
    )
    part_number: Optional[StrictInt] = Field(
        default=None,
        alias="PartNumber",
        description="Sequential number of this part in the multi-part upload process",
    )
    __properties = ["ETag", "PartNumber"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportPartResultPairResponse:
        """Create an instance of ExportPartResultPairResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportPartResultPairResponse:
        """Create an instance of ExportPartResultPairResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportPartResultPairResponse.parse_obj(obj)

        _obj = ExportPartResultPairResponse.parse_obj(
            {"e_tag": obj.get("ETag"), "part_number": obj.get("PartNumber")}
        )
        return _obj
