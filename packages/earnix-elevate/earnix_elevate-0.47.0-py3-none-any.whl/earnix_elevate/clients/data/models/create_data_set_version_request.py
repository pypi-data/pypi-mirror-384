# coding: utf-8

"""
Earnix Elevate Data API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Optional

from pydantic.v1 import BaseModel, Field, StrictInt


class CreateDataSetVersionRequest(BaseModel):
    """
    `CreateDataSetVersionRequest`
    """

    data_set_id: StrictInt = Field(
        default=...,
        alias="dataSetId",
        description="Unique identifier of the DataSet for which to create a new transformation graph version",
    )
    source_transformation_graph_version_number: Optional[StrictInt] = Field(
        default=None,
        alias="sourceTransformationGraphVersionNumber",
        description="Version number of the existing transformation graph to use as a template for the new version",
    )
    __properties = ["dataSetId", "sourceTransformationGraphVersionNumber"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateDataSetVersionRequest:
        """Create an instance of CreateDataSetVersionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateDataSetVersionRequest:
        """Create an instance of CreateDataSetVersionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateDataSetVersionRequest.parse_obj(obj)

        _obj = CreateDataSetVersionRequest.parse_obj(
            {
                "data_set_id": obj.get("dataSetId"),
                "source_transformation_graph_version_number": obj.get(
                    "sourceTransformationGraphVersionNumber"
                ),
            }
        )
        return _obj
