# coding: utf-8

"""
Earnix Elevate Data API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Optional

from pydantic.v1 import BaseModel, Field, conlist

from earnix_elevate.clients.data.models.data_set_node_response import (
    DataSetNodeResponse,
)


class DataSetNodesResponse(BaseModel):
    """
    `DataSetNodesResponse`
    """

    nodes: Optional[conlist(DataSetNodeResponse)] = Field(
        default=None,
        description="List of all nodes (DataTables and recipes) within the transformation graph",
    )
    __properties = ["nodes"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataSetNodesResponse:
        """Create an instance of DataSetNodesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["nodes"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataSetNodesResponse:
        """Create an instance of DataSetNodesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataSetNodesResponse.parse_obj(obj)

        _obj = DataSetNodesResponse.parse_obj(
            {
                "nodes": [
                    DataSetNodeResponse.from_dict(_item) for _item in obj.get("nodes")
                ]
                if obj.get("nodes") is not None
                else None
            }
        )
        return _obj
