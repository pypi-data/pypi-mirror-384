// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/tpu/kernels/tpu_compilation_cache_common.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto_2epb_2eh
#define tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto;
}  // extern "C"
namespace tensorflow {
namespace tpu {
enum CompilationCacheFetchTarget : int;
PROTOBUF_EXPORT extern const uint32_t CompilationCacheFetchTarget_internal_data_[];
class GetTpuProgramRequest;
struct GetTpuProgramRequestDefaultTypeInternal;
PROTOBUF_EXPORT extern GetTpuProgramRequestDefaultTypeInternal _GetTpuProgramRequest_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull GetTpuProgramRequest_class_data_;
class TpuCompilationUidAndIndex;
struct TpuCompilationUidAndIndexDefaultTypeInternal;
PROTOBUF_EXPORT extern TpuCompilationUidAndIndexDefaultTypeInternal _TpuCompilationUidAndIndex_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull TpuCompilationUidAndIndex_class_data_;
}  // namespace tpu
}  // namespace tensorflow
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::tensorflow::tpu::CompilationCacheFetchTarget_internal_data_>
    internal::EnumTraitsImpl::value<::tensorflow::tpu::CompilationCacheFetchTarget>;
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace tpu {
enum CompilationCacheFetchTarget : int {
  INVALID = 0,
  MAIN = 1,
  SHARDING = 2,
  UNSHARDING = 3,
  CompilationCacheFetchTarget_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  CompilationCacheFetchTarget_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT extern const uint32_t CompilationCacheFetchTarget_internal_data_[];
inline constexpr CompilationCacheFetchTarget CompilationCacheFetchTarget_MIN =
    static_cast<CompilationCacheFetchTarget>(0);
inline constexpr CompilationCacheFetchTarget CompilationCacheFetchTarget_MAX =
    static_cast<CompilationCacheFetchTarget>(3);
inline bool CompilationCacheFetchTarget_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int CompilationCacheFetchTarget_ARRAYSIZE = 3 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CompilationCacheFetchTarget_descriptor();
template <typename T>
const ::std::string& CompilationCacheFetchTarget_Name(T value) {
  static_assert(::std::is_same<T, CompilationCacheFetchTarget>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to CompilationCacheFetchTarget_Name().");
  return CompilationCacheFetchTarget_Name(static_cast<CompilationCacheFetchTarget>(value));
}
template <>
inline const ::std::string& CompilationCacheFetchTarget_Name(CompilationCacheFetchTarget value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CompilationCacheFetchTarget_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool CompilationCacheFetchTarget_Parse(
    ::absl::string_view name, CompilationCacheFetchTarget* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompilationCacheFetchTarget>(CompilationCacheFetchTarget_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT TpuCompilationUidAndIndex final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tpu.TpuCompilationUidAndIndex) */ {
 public:
  inline TpuCompilationUidAndIndex() : TpuCompilationUidAndIndex(nullptr) {}
  ~TpuCompilationUidAndIndex() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TpuCompilationUidAndIndex* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TpuCompilationUidAndIndex));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TpuCompilationUidAndIndex(::google::protobuf::internal::ConstantInitialized);

  inline TpuCompilationUidAndIndex(const TpuCompilationUidAndIndex& from) : TpuCompilationUidAndIndex(nullptr, from) {}
  inline TpuCompilationUidAndIndex(TpuCompilationUidAndIndex&& from) noexcept
      : TpuCompilationUidAndIndex(nullptr, ::std::move(from)) {}
  inline TpuCompilationUidAndIndex& operator=(const TpuCompilationUidAndIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpuCompilationUidAndIndex& operator=(TpuCompilationUidAndIndex&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TpuCompilationUidAndIndex& default_instance() {
    return *reinterpret_cast<const TpuCompilationUidAndIndex*>(
        &_TpuCompilationUidAndIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TpuCompilationUidAndIndex& a, TpuCompilationUidAndIndex& b) { a.Swap(&b); }
  inline void Swap(TpuCompilationUidAndIndex* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TpuCompilationUidAndIndex* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TpuCompilationUidAndIndex* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TpuCompilationUidAndIndex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TpuCompilationUidAndIndex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TpuCompilationUidAndIndex& from) { TpuCompilationUidAndIndex::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TpuCompilationUidAndIndex* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tpu.TpuCompilationUidAndIndex"; }

 protected:
  explicit TpuCompilationUidAndIndex(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TpuCompilationUidAndIndex(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TpuCompilationUidAndIndex& from);
  TpuCompilationUidAndIndex(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TpuCompilationUidAndIndex&& from) noexcept
      : TpuCompilationUidAndIndex(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUidFieldNumber = 1,
    kProtoIndexFieldNumber = 2,
  };
  // int64 uid = 1;
  void clear_uid() ;
  ::int64_t uid() const;
  void set_uid(::int64_t value);

  private:
  ::int64_t _internal_uid() const;
  void _internal_set_uid(::int64_t value);

  public:
  // int32 proto_index = 2;
  void clear_proto_index() ;
  ::int32_t proto_index() const;
  void set_proto_index(::int32_t value);

  private:
  ::int32_t _internal_proto_index() const;
  void _internal_set_proto_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TpuCompilationUidAndIndex)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TpuCompilationUidAndIndex& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t uid_;
    ::int32_t proto_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull TpuCompilationUidAndIndex_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GetTpuProgramRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tpu.GetTpuProgramRequest) */ {
 public:
  inline GetTpuProgramRequest() : GetTpuProgramRequest(nullptr) {}
  ~GetTpuProgramRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTpuProgramRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTpuProgramRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTpuProgramRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetTpuProgramRequest(const GetTpuProgramRequest& from) : GetTpuProgramRequest(nullptr, from) {}
  inline GetTpuProgramRequest(GetTpuProgramRequest&& from) noexcept
      : GetTpuProgramRequest(nullptr, ::std::move(from)) {}
  inline GetTpuProgramRequest& operator=(const GetTpuProgramRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTpuProgramRequest& operator=(GetTpuProgramRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTpuProgramRequest& default_instance() {
    return *reinterpret_cast<const GetTpuProgramRequest*>(
        &_GetTpuProgramRequest_default_instance_);
  }
  enum KeyOneofCase {
    kKey = 1,
    kUidAndIndex = 2,
    KEY_ONEOF_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetTpuProgramRequest& a, GetTpuProgramRequest& b) { a.Swap(&b); }
  inline void Swap(GetTpuProgramRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTpuProgramRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTpuProgramRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTpuProgramRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTpuProgramRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTpuProgramRequest& from) { GetTpuProgramRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTpuProgramRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tpu.GetTpuProgramRequest"; }

 protected:
  explicit GetTpuProgramRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GetTpuProgramRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GetTpuProgramRequest& from);
  GetTpuProgramRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GetTpuProgramRequest&& from) noexcept
      : GetTpuProgramRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFetchTargetFieldNumber = 3,
    kKeyFieldNumber = 1,
    kUidAndIndexFieldNumber = 2,
  };
  // .tensorflow.tpu.CompilationCacheFetchTarget fetch_target = 3;
  void clear_fetch_target() ;
  ::tensorflow::tpu::CompilationCacheFetchTarget fetch_target() const;
  void set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value);

  private:
  ::tensorflow::tpu::CompilationCacheFetchTarget _internal_fetch_target() const;
  void _internal_set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value);

  public:
  // string key = 1;
  bool has_key() const;
  void clear_key() ;
  const ::std::string& key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_key();
  void set_allocated_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_key();

  public:
  // .tensorflow.tpu.TpuCompilationUidAndIndex uid_and_index = 2;
  bool has_uid_and_index() const;
  private:
  bool _internal_has_uid_and_index() const;

  public:
  void clear_uid_and_index() ;
  const ::tensorflow::tpu::TpuCompilationUidAndIndex& uid_and_index() const;
  [[nodiscard]] ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE release_uid_and_index();
  ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NONNULL mutable_uid_and_index();
  void set_allocated_uid_and_index(::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_uid_and_index(::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE value);
  ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE unsafe_arena_release_uid_and_index();

  private:
  const ::tensorflow::tpu::TpuCompilationUidAndIndex& _internal_uid_and_index() const;
  ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NONNULL _internal_mutable_uid_and_index();

  public:
  void clear_key_oneof();
  KeyOneofCase key_oneof_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.tpu.GetTpuProgramRequest)
 private:
  class _Internal;
  void set_has_key();
  void set_has_uid_and_index();
  inline bool has_key_oneof() const;
  inline void clear_has_key_oneof();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   1, 47,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GetTpuProgramRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int fetch_target_;
    union KeyOneofUnion {
      constexpr KeyOneofUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr key_;
      ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE uid_and_index_;
    } key_oneof_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull GetTpuProgramRequest_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TpuCompilationUidAndIndex

// int64 uid = 1;
inline void TpuCompilationUidAndIndex::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TpuCompilationUidAndIndex::uid() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationUidAndIndex.uid)
  return _internal_uid();
}
inline void TpuCompilationUidAndIndex::set_uid(::int64_t value) {
  _internal_set_uid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationUidAndIndex.uid)
}
inline ::int64_t TpuCompilationUidAndIndex::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_;
}
inline void TpuCompilationUidAndIndex::_internal_set_uid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = value;
}

// int32 proto_index = 2;
inline void TpuCompilationUidAndIndex::clear_proto_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TpuCompilationUidAndIndex::proto_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationUidAndIndex.proto_index)
  return _internal_proto_index();
}
inline void TpuCompilationUidAndIndex::set_proto_index(::int32_t value) {
  _internal_set_proto_index(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationUidAndIndex.proto_index)
}
inline ::int32_t TpuCompilationUidAndIndex::_internal_proto_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proto_index_;
}
inline void TpuCompilationUidAndIndex::_internal_set_proto_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_index_ = value;
}

// -------------------------------------------------------------------

// GetTpuProgramRequest

// string key = 1;
inline bool GetTpuProgramRequest::has_key() const {
  return key_oneof_case() == kKey;
}
inline void GetTpuProgramRequest::set_has_key() {
  _impl_._oneof_case_[0] = kKey;
}
inline void GetTpuProgramRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_oneof_case() == kKey) {
    _impl_.key_oneof_.key_.Destroy();
    clear_has_key_oneof();
  }
}
inline const ::std::string& GetTpuProgramRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GetTpuProgramRequest::set_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_oneof_case() != kKey) {
    clear_key_oneof();

    set_has_key();
    _impl_.key_oneof_.key_.InitDefault();
  }
  _impl_.key_oneof_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.key)
}
inline ::std::string* PROTOBUF_NONNULL GetTpuProgramRequest::mutable_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.GetTpuProgramRequest.key)
  return _s;
}
inline const ::std::string& GetTpuProgramRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (key_oneof_case() != kKey) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.key_oneof_.key_.Get();
}
inline void GetTpuProgramRequest::_internal_set_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_oneof_case() != kKey) {
    clear_key_oneof();

    set_has_key();
    _impl_.key_oneof_.key_.InitDefault();
  }
  _impl_.key_oneof_.key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL GetTpuProgramRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_oneof_case() != kKey) {
    clear_key_oneof();

    set_has_key();
    _impl_.key_oneof_.key_.InitDefault();
  }
  return _impl_.key_oneof_.key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE GetTpuProgramRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tpu.GetTpuProgramRequest.key)
  if (key_oneof_case() != kKey) {
    return nullptr;
  }
  clear_has_key_oneof();
  return _impl_.key_oneof_.key_.Release();
}
inline void GetTpuProgramRequest::set_allocated_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_key_oneof()) {
    clear_key_oneof();
  }
  if (value != nullptr) {
    set_has_key();
    _impl_.key_oneof_.key_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.GetTpuProgramRequest.key)
}

// .tensorflow.tpu.TpuCompilationUidAndIndex uid_and_index = 2;
inline bool GetTpuProgramRequest::has_uid_and_index() const {
  return key_oneof_case() == kUidAndIndex;
}
inline bool GetTpuProgramRequest::_internal_has_uid_and_index() const {
  return key_oneof_case() == kUidAndIndex;
}
inline void GetTpuProgramRequest::set_has_uid_and_index() {
  _impl_._oneof_case_[0] = kUidAndIndex;
}
inline void GetTpuProgramRequest::clear_uid_and_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_oneof_case() == kUidAndIndex) {
    if (GetArena() == nullptr) {
      delete _impl_.key_oneof_.uid_and_index_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.key_oneof_.uid_and_index_);
    }
    clear_has_key_oneof();
  }
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE GetTpuProgramRequest::release_uid_and_index() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  if (key_oneof_case() == kUidAndIndex) {
    clear_has_key_oneof();
    auto* temp = _impl_.key_oneof_.uid_and_index_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.key_oneof_.uid_and_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::tpu::TpuCompilationUidAndIndex& GetTpuProgramRequest::_internal_uid_and_index() const {
  return key_oneof_case() == kUidAndIndex ? *_impl_.key_oneof_.uid_and_index_ : reinterpret_cast<::tensorflow::tpu::TpuCompilationUidAndIndex&>(::tensorflow::tpu::_TpuCompilationUidAndIndex_default_instance_);
}
inline const ::tensorflow::tpu::TpuCompilationUidAndIndex& GetTpuProgramRequest::uid_and_index() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  return _internal_uid_and_index();
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE GetTpuProgramRequest::unsafe_arena_release_uid_and_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  if (key_oneof_case() == kUidAndIndex) {
    clear_has_key_oneof();
    auto* temp = _impl_.key_oneof_.uid_and_index_;
    _impl_.key_oneof_.uid_and_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetTpuProgramRequest::unsafe_arena_set_allocated_uid_and_index(
    ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_key_oneof();
  if (value) {
    set_has_uid_and_index();
    _impl_.key_oneof_.uid_and_index_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NONNULL GetTpuProgramRequest::_internal_mutable_uid_and_index() {
  if (key_oneof_case() != kUidAndIndex) {
    clear_key_oneof();
    set_has_uid_and_index();
    _impl_.key_oneof_.uid_and_index_ = 
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::tpu::TpuCompilationUidAndIndex>(GetArena());
  }
  return _impl_.key_oneof_.uid_and_index_;
}
inline ::tensorflow::tpu::TpuCompilationUidAndIndex* PROTOBUF_NONNULL GetTpuProgramRequest::mutable_uid_and_index()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::tpu::TpuCompilationUidAndIndex* _msg = _internal_mutable_uid_and_index();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.GetTpuProgramRequest.uid_and_index)
  return _msg;
}

// .tensorflow.tpu.CompilationCacheFetchTarget fetch_target = 3;
inline void GetTpuProgramRequest::clear_fetch_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tensorflow::tpu::CompilationCacheFetchTarget GetTpuProgramRequest::fetch_target() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.GetTpuProgramRequest.fetch_target)
  return _internal_fetch_target();
}
inline void GetTpuProgramRequest::set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value) {
  _internal_set_fetch_target(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tensorflow.tpu.GetTpuProgramRequest.fetch_target)
}
inline ::tensorflow::tpu::CompilationCacheFetchTarget GetTpuProgramRequest::_internal_fetch_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::tpu::CompilationCacheFetchTarget>(_impl_.fetch_target_);
}
inline void GetTpuProgramRequest::_internal_set_fetch_target(::tensorflow::tpu::CompilationCacheFetchTarget value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_target_ = value;
}

inline bool GetTpuProgramRequest::has_key_oneof() const {
  return key_oneof_case() != KEY_ONEOF_NOT_SET;
}
inline void GetTpuProgramRequest::clear_has_key_oneof() {
  _impl_._oneof_case_[0] = KEY_ONEOF_NOT_SET;
}
inline GetTpuProgramRequest::KeyOneofCase GetTpuProgramRequest::key_oneof_case() const {
  return GetTpuProgramRequest::KeyOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tpu
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::tpu::CompilationCacheFetchTarget> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tensorflow::tpu::CompilationCacheFetchTarget>() {
  return ::tensorflow::tpu::CompilationCacheFetchTarget_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompilation_5fcache_5fcommon_2eproto_2epb_2eh
