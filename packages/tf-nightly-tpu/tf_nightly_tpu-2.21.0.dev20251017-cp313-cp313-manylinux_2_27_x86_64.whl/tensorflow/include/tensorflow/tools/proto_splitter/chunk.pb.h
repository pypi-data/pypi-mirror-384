// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/tools/proto_splitter/chunk.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto_2epb_2eh
#define tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/tools/proto_splitter/versions.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
}  // extern "C"
namespace tensorflow {
namespace proto_splitter {
enum ChunkInfo_Type : int;
PROTOBUF_EXPORT extern const uint32_t ChunkInfo_Type_internal_data_[];
class ChunkInfo;
struct ChunkInfoDefaultTypeInternal;
PROTOBUF_EXPORT extern ChunkInfoDefaultTypeInternal _ChunkInfo_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkInfo_class_data_;
class ChunkMetadata;
struct ChunkMetadataDefaultTypeInternal;
PROTOBUF_EXPORT extern ChunkMetadataDefaultTypeInternal _ChunkMetadata_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkMetadata_class_data_;
class ChunkedField;
struct ChunkedFieldDefaultTypeInternal;
PROTOBUF_EXPORT extern ChunkedFieldDefaultTypeInternal _ChunkedField_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkedField_class_data_;
class ChunkedMessage;
struct ChunkedMessageDefaultTypeInternal;
PROTOBUF_EXPORT extern ChunkedMessageDefaultTypeInternal _ChunkedMessage_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkedMessage_class_data_;
class FieldIndex;
struct FieldIndexDefaultTypeInternal;
PROTOBUF_EXPORT extern FieldIndexDefaultTypeInternal _FieldIndex_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull FieldIndex_class_data_;
class FieldIndex_MapKey;
struct FieldIndex_MapKeyDefaultTypeInternal;
PROTOBUF_EXPORT extern FieldIndex_MapKeyDefaultTypeInternal _FieldIndex_MapKey_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull FieldIndex_MapKey_class_data_;
}  // namespace proto_splitter
}  // namespace tensorflow
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::tensorflow::proto_splitter::ChunkInfo_Type_internal_data_>
    internal::EnumTraitsImpl::value<::tensorflow::proto_splitter::ChunkInfo_Type>;
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace proto_splitter {
enum ChunkInfo_Type : int {
  ChunkInfo_Type_UNSET = 0,
  ChunkInfo_Type_MESSAGE = 1,
  ChunkInfo_Type_BYTES = 2,
  ChunkInfo_Type_ChunkInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  ChunkInfo_Type_ChunkInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT extern const uint32_t ChunkInfo_Type_internal_data_[];
inline constexpr ChunkInfo_Type ChunkInfo_Type_Type_MIN =
    static_cast<ChunkInfo_Type>(0);
inline constexpr ChunkInfo_Type ChunkInfo_Type_Type_MAX =
    static_cast<ChunkInfo_Type>(2);
inline bool ChunkInfo_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int ChunkInfo_Type_Type_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ChunkInfo_Type_descriptor();
template <typename T>
const ::std::string& ChunkInfo_Type_Name(T value) {
  static_assert(::std::is_same<T, ChunkInfo_Type>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ChunkInfo_Type_Name(static_cast<ChunkInfo_Type>(value));
}
template <>
inline const ::std::string& ChunkInfo_Type_Name(ChunkInfo_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChunkInfo_Type_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool ChunkInfo_Type_Parse(
    ::absl::string_view name, ChunkInfo_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChunkInfo_Type>(ChunkInfo_Type_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT FieldIndex_MapKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.FieldIndex.MapKey) */ {
 public:
  inline FieldIndex_MapKey() : FieldIndex_MapKey(nullptr) {}
  ~FieldIndex_MapKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FieldIndex_MapKey* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FieldIndex_MapKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FieldIndex_MapKey(::google::protobuf::internal::ConstantInitialized);

  inline FieldIndex_MapKey(const FieldIndex_MapKey& from) : FieldIndex_MapKey(nullptr, from) {}
  inline FieldIndex_MapKey(FieldIndex_MapKey&& from) noexcept
      : FieldIndex_MapKey(nullptr, ::std::move(from)) {}
  inline FieldIndex_MapKey& operator=(const FieldIndex_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndex_MapKey& operator=(FieldIndex_MapKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndex_MapKey& default_instance() {
    return *reinterpret_cast<const FieldIndex_MapKey*>(
        &_FieldIndex_MapKey_default_instance_);
  }
  enum TypeCase {
    kS = 1,
    kBoolean = 2,
    kUi32 = 3,
    kUi64 = 4,
    kI32 = 5,
    kI64 = 6,
    TYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(FieldIndex_MapKey& a, FieldIndex_MapKey& b) { a.Swap(&b); }
  inline void Swap(FieldIndex_MapKey* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndex_MapKey* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndex_MapKey* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FieldIndex_MapKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldIndex_MapKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FieldIndex_MapKey& from) { FieldIndex_MapKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FieldIndex_MapKey* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.FieldIndex.MapKey"; }

 protected:
  explicit FieldIndex_MapKey(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FieldIndex_MapKey(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FieldIndex_MapKey& from);
  FieldIndex_MapKey(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FieldIndex_MapKey&& from) noexcept
      : FieldIndex_MapKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSFieldNumber = 1,
    kBooleanFieldNumber = 2,
    kUi32FieldNumber = 3,
    kUi64FieldNumber = 4,
    kI32FieldNumber = 5,
    kI64FieldNumber = 6,
  };
  // string s = 1;
  bool has_s() const;
  void clear_s() ;
  const ::std::string& s() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_s();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_s();
  void set_allocated_s(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_s() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_s(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_s();

  public:
  // bool boolean = 2;
  bool has_boolean() const;
  void clear_boolean() ;
  bool boolean() const;
  void set_boolean(bool value);

  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);

  public:
  // uint32 ui32 = 3;
  bool has_ui32() const;
  void clear_ui32() ;
  ::uint32_t ui32() const;
  void set_ui32(::uint32_t value);

  private:
  ::uint32_t _internal_ui32() const;
  void _internal_set_ui32(::uint32_t value);

  public:
  // uint64 ui64 = 4;
  bool has_ui64() const;
  void clear_ui64() ;
  ::uint64_t ui64() const;
  void set_ui64(::uint64_t value);

  private:
  ::uint64_t _internal_ui64() const;
  void _internal_set_ui64(::uint64_t value);

  public:
  // int32 i32 = 5;
  bool has_i32() const;
  void clear_i32() ;
  ::int32_t i32() const;
  void set_i32(::int32_t value);

  private:
  ::int32_t _internal_i32() const;
  void _internal_set_i32(::int32_t value);

  public:
  // int64 i64 = 6;
  bool has_i64() const;
  void clear_i64() ;
  ::int64_t i64() const;
  void set_i64(::int64_t value);

  private:
  ::int64_t _internal_i64() const;
  void _internal_set_i64(::int64_t value);

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.FieldIndex.MapKey)
 private:
  class _Internal;
  void set_has_s();
  void set_has_boolean();
  void set_has_ui32();
  void set_has_ui64();
  void set_has_i32();
  void set_has_i64();
  inline bool has_type() const;
  inline void clear_has_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 6,
                                   0, 53,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FieldIndex_MapKey& from_msg);
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr s_;
      bool boolean_;
      ::uint32_t ui32_;
      ::uint64_t ui64_;
      ::int32_t i32_;
      ::int64_t i64_;
    } type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull FieldIndex_MapKey_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ChunkInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkInfo) */ {
 public:
  inline ChunkInfo() : ChunkInfo(nullptr) {}
  ~ChunkInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkInfo(::google::protobuf::internal::ConstantInitialized);

  inline ChunkInfo(const ChunkInfo& from) : ChunkInfo(nullptr, from) {}
  inline ChunkInfo(ChunkInfo&& from) noexcept
      : ChunkInfo(nullptr, ::std::move(from)) {}
  inline ChunkInfo& operator=(const ChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkInfo& operator=(ChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkInfo& default_instance() {
    return *reinterpret_cast<const ChunkInfo*>(
        &_ChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChunkInfo& a, ChunkInfo& b) { a.Swap(&b); }
  inline void Swap(ChunkInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkInfo& from) { ChunkInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.ChunkInfo"; }

 protected:
  explicit ChunkInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChunkInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChunkInfo& from);
  ChunkInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChunkInfo&& from) noexcept
      : ChunkInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ChunkInfo_Type;
  static constexpr Type UNSET = ChunkInfo_Type_UNSET;
  static constexpr Type MESSAGE = ChunkInfo_Type_MESSAGE;
  static constexpr Type BYTES = ChunkInfo_Type_BYTES;
  static inline bool Type_IsValid(int value) {
    return ChunkInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ChunkInfo_Type_Type_MIN;
  static constexpr Type Type_MAX = ChunkInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ChunkInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return ChunkInfo_Type_descriptor();
  }
  template <typename T>
  static inline const ::std::string& Type_Name(T value) {
    return ChunkInfo_Type_Name(value);
  }
  static inline bool Type_Parse(
      ::absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return ChunkInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSizeFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // uint64 size = 2;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // uint64 offset = 3;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // .tensorflow.proto_splitter.ChunkInfo.Type type = 1;
  void clear_type() ;
  ::tensorflow::proto_splitter::ChunkInfo_Type type() const;
  void set_type(::tensorflow::proto_splitter::ChunkInfo_Type value);

  private:
  ::tensorflow::proto_splitter::ChunkInfo_Type _internal_type() const;
  void _internal_set_type(::tensorflow::proto_splitter::ChunkInfo_Type value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChunkInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t size_;
    ::uint64_t offset_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkInfo_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT FieldIndex final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.FieldIndex) */ {
 public:
  inline FieldIndex() : FieldIndex(nullptr) {}
  ~FieldIndex() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FieldIndex* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FieldIndex));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FieldIndex(::google::protobuf::internal::ConstantInitialized);

  inline FieldIndex(const FieldIndex& from) : FieldIndex(nullptr, from) {}
  inline FieldIndex(FieldIndex&& from) noexcept
      : FieldIndex(nullptr, ::std::move(from)) {}
  inline FieldIndex& operator=(const FieldIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndex& operator=(FieldIndex&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndex& default_instance() {
    return *reinterpret_cast<const FieldIndex*>(
        &_FieldIndex_default_instance_);
  }
  enum KindCase {
    kField = 1,
    kMapKey = 2,
    kIndex = 3,
    KIND_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(FieldIndex& a, FieldIndex& b) { a.Swap(&b); }
  inline void Swap(FieldIndex* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndex* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndex* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FieldIndex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldIndex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FieldIndex& from) { FieldIndex::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FieldIndex* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.FieldIndex"; }

 protected:
  explicit FieldIndex(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FieldIndex(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FieldIndex& from);
  FieldIndex(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FieldIndex&& from) noexcept
      : FieldIndex(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MapKey = FieldIndex_MapKey;

  // accessors -------------------------------------------------------
  enum : int {
    kFieldFieldNumber = 1,
    kMapKeyFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // uint32 field = 1;
  bool has_field() const;
  void clear_field() ;
  ::uint32_t field() const;
  void set_field(::uint32_t value);

  private:
  ::uint32_t _internal_field() const;
  void _internal_set_field(::uint32_t value);

  public:
  // .tensorflow.proto_splitter.FieldIndex.MapKey map_key = 2;
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;

  public:
  void clear_map_key() ;
  const ::tensorflow::proto_splitter::FieldIndex_MapKey& map_key() const;
  [[nodiscard]] ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE release_map_key();
  ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NONNULL mutable_map_key();
  void set_allocated_map_key(::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_map_key(::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE value);
  ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE unsafe_arena_release_map_key();

  private:
  const ::tensorflow::proto_splitter::FieldIndex_MapKey& _internal_map_key() const;
  ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NONNULL _internal_mutable_map_key();

  public:
  // uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.FieldIndex)
 private:
  class _Internal;
  void set_has_field();
  void set_has_map_key();
  void set_has_index();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FieldIndex& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t field_;
      ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE map_key_;
      ::uint64_t index_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull FieldIndex_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ChunkedField final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkedField) */ {
 public:
  inline ChunkedField() : ChunkedField(nullptr) {}
  ~ChunkedField() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkedField* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkedField));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkedField(::google::protobuf::internal::ConstantInitialized);

  inline ChunkedField(const ChunkedField& from) : ChunkedField(nullptr, from) {}
  inline ChunkedField(ChunkedField&& from) noexcept
      : ChunkedField(nullptr, ::std::move(from)) {}
  inline ChunkedField& operator=(const ChunkedField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedField& operator=(ChunkedField&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkedField& default_instance() {
    return *reinterpret_cast<const ChunkedField*>(
        &_ChunkedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ChunkedField& a, ChunkedField& b) { a.Swap(&b); }
  inline void Swap(ChunkedField* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedField* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkedField* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkedField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkedField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkedField& from) { ChunkedField::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkedField* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.ChunkedField"; }

 protected:
  explicit ChunkedField(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChunkedField(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChunkedField& from);
  ChunkedField(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChunkedField&& from) noexcept
      : ChunkedField(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldTagFieldNumber = 1,
    kMessageFieldNumber = 3,
  };
  // repeated .tensorflow.proto_splitter.FieldIndex field_tag = 1;
  int field_tag_size() const;
  private:
  int _internal_field_tag_size() const;

  public:
  void clear_field_tag() ;
  ::tensorflow::proto_splitter::FieldIndex* PROTOBUF_NONNULL mutable_field_tag(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>* PROTOBUF_NONNULL mutable_field_tag();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>& _internal_field_tag() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>* PROTOBUF_NONNULL _internal_mutable_field_tag();
  public:
  const ::tensorflow::proto_splitter::FieldIndex& field_tag(int index) const;
  ::tensorflow::proto_splitter::FieldIndex* PROTOBUF_NONNULL add_field_tag();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>& field_tag() const;
  // .tensorflow.proto_splitter.ChunkedMessage message = 3;
  bool has_message() const;
  void clear_message() ;
  const ::tensorflow::proto_splitter::ChunkedMessage& message() const;
  [[nodiscard]] ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE release_message();
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL mutable_message();
  void set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value);
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE unsafe_arena_release_message();

  private:
  const ::tensorflow::proto_splitter::ChunkedMessage& _internal_message() const;
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkedField)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChunkedField& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex > field_tag_;
    ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkedField_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ChunkedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkedMessage) */ {
 public:
  inline ChunkedMessage() : ChunkedMessage(nullptr) {}
  ~ChunkedMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkedMessage* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkedMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkedMessage(::google::protobuf::internal::ConstantInitialized);

  inline ChunkedMessage(const ChunkedMessage& from) : ChunkedMessage(nullptr, from) {}
  inline ChunkedMessage(ChunkedMessage&& from) noexcept
      : ChunkedMessage(nullptr, ::std::move(from)) {}
  inline ChunkedMessage& operator=(const ChunkedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedMessage& operator=(ChunkedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkedMessage& default_instance() {
    return *reinterpret_cast<const ChunkedMessage*>(
        &_ChunkedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ChunkedMessage& a, ChunkedMessage& b) { a.Swap(&b); }
  inline void Swap(ChunkedMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkedMessage* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkedMessage& from) { ChunkedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkedMessage* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.ChunkedMessage"; }

 protected:
  explicit ChunkedMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChunkedMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChunkedMessage& from);
  ChunkedMessage(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChunkedMessage&& from) noexcept
      : ChunkedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkedFieldsFieldNumber = 2,
    kChunkIndexFieldNumber = 1,
  };
  // repeated .tensorflow.proto_splitter.ChunkedField chunked_fields = 2;
  int chunked_fields_size() const;
  private:
  int _internal_chunked_fields_size() const;

  public:
  void clear_chunked_fields() ;
  ::tensorflow::proto_splitter::ChunkedField* PROTOBUF_NONNULL mutable_chunked_fields(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>* PROTOBUF_NONNULL mutable_chunked_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>& _internal_chunked_fields() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>* PROTOBUF_NONNULL _internal_mutable_chunked_fields();
  public:
  const ::tensorflow::proto_splitter::ChunkedField& chunked_fields(int index) const;
  ::tensorflow::proto_splitter::ChunkedField* PROTOBUF_NONNULL add_chunked_fields();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>& chunked_fields() const;
  // optional uint64 chunk_index = 1;
  bool has_chunk_index() const;
  void clear_chunk_index() ;
  ::uint64_t chunk_index() const;
  void set_chunk_index(::uint64_t value);

  private:
  ::uint64_t _internal_chunk_index() const;
  void _internal_set_chunk_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChunkedMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField > chunked_fields_;
    ::uint64_t chunk_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkedMessage_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ChunkMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkMetadata) */ {
 public:
  inline ChunkMetadata() : ChunkMetadata(nullptr) {}
  ~ChunkMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChunkMetadata* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChunkMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkMetadata(::google::protobuf::internal::ConstantInitialized);

  inline ChunkMetadata(const ChunkMetadata& from) : ChunkMetadata(nullptr, from) {}
  inline ChunkMetadata(ChunkMetadata&& from) noexcept
      : ChunkMetadata(nullptr, ::std::move(from)) {}
  inline ChunkMetadata& operator=(const ChunkMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkMetadata& operator=(ChunkMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkMetadata& default_instance() {
    return *reinterpret_cast<const ChunkMetadata*>(
        &_ChunkMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ChunkMetadata& a, ChunkMetadata& b) { a.Swap(&b); }
  inline void Swap(ChunkMetadata* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkMetadata* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkMetadata* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChunkMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChunkMetadata& from) { ChunkMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChunkMetadata* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.proto_splitter.ChunkMetadata"; }

 protected:
  explicit ChunkMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChunkMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChunkMetadata& from);
  ChunkMetadata(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChunkMetadata&& from) noexcept
      : ChunkMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunksFieldNumber = 2,
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
  };
  // repeated .tensorflow.proto_splitter.ChunkInfo chunks = 2;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;

  public:
  void clear_chunks() ;
  ::tensorflow::proto_splitter::ChunkInfo* PROTOBUF_NONNULL mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>* PROTOBUF_NONNULL mutable_chunks();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>& _internal_chunks() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>* PROTOBUF_NONNULL _internal_mutable_chunks();
  public:
  const ::tensorflow::proto_splitter::ChunkInfo& chunks(int index) const;
  ::tensorflow::proto_splitter::ChunkInfo* PROTOBUF_NONNULL add_chunks();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>& chunks() const;
  // .tensorflow.proto_splitter.VersionDef version = 1;
  bool has_version() const;
  void clear_version() ;
  const ::tensorflow::proto_splitter::VersionDef& version() const;
  [[nodiscard]] ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE release_version();
  ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NONNULL mutable_version();
  void set_allocated_version(::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_version(::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE value);
  ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE unsafe_arena_release_version();

  private:
  const ::tensorflow::proto_splitter::VersionDef& _internal_version() const;
  ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // .tensorflow.proto_splitter.ChunkedMessage message = 3;
  bool has_message() const;
  void clear_message() ;
  const ::tensorflow::proto_splitter::ChunkedMessage& message() const;
  [[nodiscard]] ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE release_message();
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL mutable_message();
  void set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value);
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE unsafe_arena_release_message();

  private:
  const ::tensorflow::proto_splitter::ChunkedMessage& _internal_message() const;
  ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChunkMetadata& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo > chunks_;
    ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE version_;
    ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ChunkMetadata_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChunkMetadata

// .tensorflow.proto_splitter.VersionDef version = 1;
inline bool ChunkMetadata::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline const ::tensorflow::proto_splitter::VersionDef& ChunkMetadata::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::proto_splitter::VersionDef* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::VersionDef&>(::tensorflow::proto_splitter::_VersionDef_default_instance_);
}
inline const ::tensorflow::proto_splitter::VersionDef& ChunkMetadata::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.version)
  return _internal_version();
}
inline void ChunkMetadata::unsafe_arena_set_allocated_version(
    ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::tensorflow::proto_splitter::VersionDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkMetadata.version)
}
inline ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE ChunkMetadata::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::proto_splitter::VersionDef* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE ChunkMetadata::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkMetadata.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::proto_splitter::VersionDef* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NONNULL ChunkMetadata::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::proto_splitter::VersionDef>(GetArena());
    _impl_.version_ = reinterpret_cast<::tensorflow::proto_splitter::VersionDef*>(p);
  }
  return _impl_.version_;
}
inline ::tensorflow::proto_splitter::VersionDef* PROTOBUF_NONNULL ChunkMetadata::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::proto_splitter::VersionDef* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.version)
  return _msg;
}
inline void ChunkMetadata::set_allocated_version(::tensorflow::proto_splitter::VersionDef* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::tensorflow::proto_splitter::VersionDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkMetadata.version)
}

// repeated .tensorflow.proto_splitter.ChunkInfo chunks = 2;
inline int ChunkMetadata::_internal_chunks_size() const {
  return _internal_chunks().size();
}
inline int ChunkMetadata::chunks_size() const {
  return _internal_chunks_size();
}
inline void ChunkMetadata::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_.Clear();
}
inline ::tensorflow::proto_splitter::ChunkInfo* PROTOBUF_NONNULL ChunkMetadata::mutable_chunks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _internal_mutable_chunks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>* PROTOBUF_NONNULL ChunkMetadata::mutable_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkMetadata.chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunks();
}
inline const ::tensorflow::proto_splitter::ChunkInfo& ChunkMetadata::chunks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _internal_chunks().Get(index);
}
inline ::tensorflow::proto_splitter::ChunkInfo* PROTOBUF_NONNULL ChunkMetadata::add_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::proto_splitter::ChunkInfo* _add = _internal_mutable_chunks()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>& ChunkMetadata::chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _internal_chunks();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>&
ChunkMetadata::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkInfo>* PROTOBUF_NONNULL
ChunkMetadata::_internal_mutable_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunks_;
}

// .tensorflow.proto_splitter.ChunkedMessage message = 3;
inline bool ChunkMetadata::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline void ChunkMetadata::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkMetadata::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::proto_splitter::ChunkedMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::ChunkedMessage&>(::tensorflow::proto_splitter::_ChunkedMessage_default_instance_);
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkMetadata::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.message)
  return _internal_message();
}
inline void ChunkMetadata::unsafe_arena_set_allocated_message(
    ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkMetadata.message)
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE ChunkMetadata::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::proto_splitter::ChunkedMessage* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE ChunkMetadata::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkMetadata.message)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL ChunkMetadata::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::proto_splitter::ChunkedMessage>(GetArena());
    _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(p);
  }
  return _impl_.message_;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL ChunkMetadata::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::proto_splitter::ChunkedMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.message)
  return _msg;
}
inline void ChunkMetadata::set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkMetadata.message)
}

// -------------------------------------------------------------------

// ChunkInfo

// .tensorflow.proto_splitter.ChunkInfo.Type type = 1;
inline void ChunkInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::tensorflow::proto_splitter::ChunkInfo_Type ChunkInfo::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.type)
  return _internal_type();
}
inline void ChunkInfo::set_type(::tensorflow::proto_splitter::ChunkInfo_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.type)
}
inline ::tensorflow::proto_splitter::ChunkInfo_Type ChunkInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::proto_splitter::ChunkInfo_Type>(_impl_.type_);
}
inline void ChunkInfo::_internal_set_type(::tensorflow::proto_splitter::ChunkInfo_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 size = 2;
inline void ChunkInfo::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ChunkInfo::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.size)
  return _internal_size();
}
inline void ChunkInfo::set_size(::uint64_t value) {
  _internal_set_size(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.size)
}
inline ::uint64_t ChunkInfo::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void ChunkInfo::_internal_set_size(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// uint64 offset = 3;
inline void ChunkInfo::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ChunkInfo::offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.offset)
  return _internal_offset();
}
inline void ChunkInfo::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.offset)
}
inline ::uint64_t ChunkInfo::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void ChunkInfo::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// ChunkedMessage

// optional uint64 chunk_index = 1;
inline bool ChunkedMessage::has_chunk_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChunkedMessage::clear_chunk_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ChunkedMessage::chunk_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedMessage.chunk_index)
  return _internal_chunk_index();
}
inline void ChunkedMessage::set_chunk_index(::uint64_t value) {
  _internal_set_chunk_index(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkedMessage.chunk_index)
}
inline ::uint64_t ChunkedMessage::_internal_chunk_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_index_;
}
inline void ChunkedMessage::_internal_set_chunk_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = value;
}

// repeated .tensorflow.proto_splitter.ChunkedField chunked_fields = 2;
inline int ChunkedMessage::_internal_chunked_fields_size() const {
  return _internal_chunked_fields().size();
}
inline int ChunkedMessage::chunked_fields_size() const {
  return _internal_chunked_fields_size();
}
inline void ChunkedMessage::clear_chunked_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunked_fields_.Clear();
}
inline ::tensorflow::proto_splitter::ChunkedField* PROTOBUF_NONNULL ChunkedMessage::mutable_chunked_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _internal_mutable_chunked_fields()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>* PROTOBUF_NONNULL ChunkedMessage::mutable_chunked_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunked_fields();
}
inline const ::tensorflow::proto_splitter::ChunkedField& ChunkedMessage::chunked_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _internal_chunked_fields().Get(index);
}
inline ::tensorflow::proto_splitter::ChunkedField* PROTOBUF_NONNULL ChunkedMessage::add_chunked_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::proto_splitter::ChunkedField* _add = _internal_mutable_chunked_fields()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>& ChunkedMessage::chunked_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _internal_chunked_fields();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>&
ChunkedMessage::_internal_chunked_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunked_fields_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::ChunkedField>* PROTOBUF_NONNULL
ChunkedMessage::_internal_mutable_chunked_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunked_fields_;
}

// -------------------------------------------------------------------

// ChunkedField

// repeated .tensorflow.proto_splitter.FieldIndex field_tag = 1;
inline int ChunkedField::_internal_field_tag_size() const {
  return _internal_field_tag().size();
}
inline int ChunkedField::field_tag_size() const {
  return _internal_field_tag_size();
}
inline void ChunkedField::clear_field_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_tag_.Clear();
}
inline ::tensorflow::proto_splitter::FieldIndex* PROTOBUF_NONNULL ChunkedField::mutable_field_tag(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _internal_mutable_field_tag()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>* PROTOBUF_NONNULL ChunkedField::mutable_field_tag()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkedField.field_tag)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_field_tag();
}
inline const ::tensorflow::proto_splitter::FieldIndex& ChunkedField::field_tag(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _internal_field_tag().Get(index);
}
inline ::tensorflow::proto_splitter::FieldIndex* PROTOBUF_NONNULL ChunkedField::add_field_tag()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::proto_splitter::FieldIndex* _add = _internal_mutable_field_tag()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>& ChunkedField::field_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _internal_field_tag();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>&
ChunkedField::_internal_field_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_tag_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::proto_splitter::FieldIndex>* PROTOBUF_NONNULL
ChunkedField::_internal_mutable_field_tag() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.field_tag_;
}

// .tensorflow.proto_splitter.ChunkedMessage message = 3;
inline bool ChunkedField::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline void ChunkedField::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkedField::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::proto_splitter::ChunkedMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::ChunkedMessage&>(::tensorflow::proto_splitter::_ChunkedMessage_default_instance_);
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkedField::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedField.message)
  return _internal_message();
}
inline void ChunkedField::unsafe_arena_set_allocated_message(
    ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkedField.message)
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE ChunkedField::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::proto_splitter::ChunkedMessage* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE ChunkedField::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkedField.message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL ChunkedField::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::proto_splitter::ChunkedMessage>(GetArena());
    _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(p);
  }
  return _impl_.message_;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NONNULL ChunkedField::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tensorflow::proto_splitter::ChunkedMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedField.message)
  return _msg;
}
inline void ChunkedField::set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.message_ = reinterpret_cast<::tensorflow::proto_splitter::ChunkedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkedField.message)
}

// -------------------------------------------------------------------

// FieldIndex_MapKey

// string s = 1;
inline bool FieldIndex_MapKey::has_s() const {
  return type_case() == kS;
}
inline void FieldIndex_MapKey::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void FieldIndex_MapKey::clear_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kS) {
    _impl_.type_.s_.Destroy();
    clear_has_type();
  }
}
inline const ::std::string& FieldIndex_MapKey::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void FieldIndex_MapKey::set_s(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() != kS) {
    clear_type();

    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  _impl_.type_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.s)
}
inline ::std::string* PROTOBUF_NONNULL FieldIndex_MapKey::mutable_s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  return _s;
}
inline const ::std::string& FieldIndex_MapKey::_internal_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (type_case() != kS) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.type_.s_.Get();
}
inline void FieldIndex_MapKey::_internal_set_s(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() != kS) {
    clear_type();

    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  _impl_.type_.s_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL FieldIndex_MapKey::_internal_mutable_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() != kS) {
    clear_type();

    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  return _impl_.type_.s_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE FieldIndex_MapKey::release_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  if (type_case() != kS) {
    return nullptr;
  }
  clear_has_type();
  return _impl_.type_.s_.Release();
}
inline void FieldIndex_MapKey::set_allocated_s(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_type()) {
    clear_type();
  }
  if (value != nullptr) {
    set_has_s();
    _impl_.type_.s_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.FieldIndex.MapKey.s)
}

// bool boolean = 2;
inline bool FieldIndex_MapKey::has_boolean() const {
  return type_case() == kBoolean;
}
inline void FieldIndex_MapKey::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void FieldIndex_MapKey::clear_boolean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kBoolean) {
    _impl_.type_.boolean_ = false;
    clear_has_type();
  }
}
inline bool FieldIndex_MapKey::boolean() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.boolean)
  return _internal_boolean();
}
inline void FieldIndex_MapKey::set_boolean(bool value) {
  if (type_case() != kBoolean) {
    clear_type();
    set_has_boolean();
  }
  _impl_.type_.boolean_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.boolean)
}
inline bool FieldIndex_MapKey::_internal_boolean() const {
  if (type_case() == kBoolean) {
    return _impl_.type_.boolean_;
  }
  return false;
}

// uint32 ui32 = 3;
inline bool FieldIndex_MapKey::has_ui32() const {
  return type_case() == kUi32;
}
inline void FieldIndex_MapKey::set_has_ui32() {
  _impl_._oneof_case_[0] = kUi32;
}
inline void FieldIndex_MapKey::clear_ui32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kUi32) {
    _impl_.type_.ui32_ = 0u;
    clear_has_type();
  }
}
inline ::uint32_t FieldIndex_MapKey::ui32() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.ui32)
  return _internal_ui32();
}
inline void FieldIndex_MapKey::set_ui32(::uint32_t value) {
  if (type_case() != kUi32) {
    clear_type();
    set_has_ui32();
  }
  _impl_.type_.ui32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.ui32)
}
inline ::uint32_t FieldIndex_MapKey::_internal_ui32() const {
  if (type_case() == kUi32) {
    return _impl_.type_.ui32_;
  }
  return 0u;
}

// uint64 ui64 = 4;
inline bool FieldIndex_MapKey::has_ui64() const {
  return type_case() == kUi64;
}
inline void FieldIndex_MapKey::set_has_ui64() {
  _impl_._oneof_case_[0] = kUi64;
}
inline void FieldIndex_MapKey::clear_ui64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kUi64) {
    _impl_.type_.ui64_ = ::uint64_t{0u};
    clear_has_type();
  }
}
inline ::uint64_t FieldIndex_MapKey::ui64() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.ui64)
  return _internal_ui64();
}
inline void FieldIndex_MapKey::set_ui64(::uint64_t value) {
  if (type_case() != kUi64) {
    clear_type();
    set_has_ui64();
  }
  _impl_.type_.ui64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.ui64)
}
inline ::uint64_t FieldIndex_MapKey::_internal_ui64() const {
  if (type_case() == kUi64) {
    return _impl_.type_.ui64_;
  }
  return ::uint64_t{0u};
}

// int32 i32 = 5;
inline bool FieldIndex_MapKey::has_i32() const {
  return type_case() == kI32;
}
inline void FieldIndex_MapKey::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void FieldIndex_MapKey::clear_i32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kI32) {
    _impl_.type_.i32_ = 0;
    clear_has_type();
  }
}
inline ::int32_t FieldIndex_MapKey::i32() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.i32)
  return _internal_i32();
}
inline void FieldIndex_MapKey::set_i32(::int32_t value) {
  if (type_case() != kI32) {
    clear_type();
    set_has_i32();
  }
  _impl_.type_.i32_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.i32)
}
inline ::int32_t FieldIndex_MapKey::_internal_i32() const {
  if (type_case() == kI32) {
    return _impl_.type_.i32_;
  }
  return 0;
}

// int64 i64 = 6;
inline bool FieldIndex_MapKey::has_i64() const {
  return type_case() == kI64;
}
inline void FieldIndex_MapKey::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void FieldIndex_MapKey::clear_i64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kI64) {
    _impl_.type_.i64_ = ::int64_t{0};
    clear_has_type();
  }
}
inline ::int64_t FieldIndex_MapKey::i64() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.i64)
  return _internal_i64();
}
inline void FieldIndex_MapKey::set_i64(::int64_t value) {
  if (type_case() != kI64) {
    clear_type();
    set_has_i64();
  }
  _impl_.type_.i64_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.i64)
}
inline ::int64_t FieldIndex_MapKey::_internal_i64() const {
  if (type_case() == kI64) {
    return _impl_.type_.i64_;
  }
  return ::int64_t{0};
}

inline bool FieldIndex_MapKey::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FieldIndex_MapKey::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline FieldIndex_MapKey::TypeCase FieldIndex_MapKey::type_case() const {
  return FieldIndex_MapKey::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldIndex

// uint32 field = 1;
inline bool FieldIndex::has_field() const {
  return kind_case() == kField;
}
inline void FieldIndex::set_has_field() {
  _impl_._oneof_case_[0] = kField;
}
inline void FieldIndex::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kField) {
    _impl_.kind_.field_ = 0u;
    clear_has_kind();
  }
}
inline ::uint32_t FieldIndex::field() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.field)
  return _internal_field();
}
inline void FieldIndex::set_field(::uint32_t value) {
  if (kind_case() != kField) {
    clear_kind();
    set_has_field();
  }
  _impl_.kind_.field_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.field)
}
inline ::uint32_t FieldIndex::_internal_field() const {
  if (kind_case() == kField) {
    return _impl_.kind_.field_;
  }
  return 0u;
}

// .tensorflow.proto_splitter.FieldIndex.MapKey map_key = 2;
inline bool FieldIndex::has_map_key() const {
  return kind_case() == kMapKey;
}
inline bool FieldIndex::_internal_has_map_key() const {
  return kind_case() == kMapKey;
}
inline void FieldIndex::set_has_map_key() {
  _impl_._oneof_case_[0] = kMapKey;
}
inline void FieldIndex::clear_map_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kMapKey) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.map_key_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.map_key_);
    }
    clear_has_kind();
  }
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE FieldIndex::release_map_key() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.FieldIndex.map_key)
  if (kind_case() == kMapKey) {
    clear_has_kind();
    auto* temp = _impl_.kind_.map_key_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::proto_splitter::FieldIndex_MapKey& FieldIndex::_internal_map_key() const {
  return kind_case() == kMapKey ? *_impl_.kind_.map_key_ : reinterpret_cast<::tensorflow::proto_splitter::FieldIndex_MapKey&>(::tensorflow::proto_splitter::_FieldIndex_MapKey_default_instance_);
}
inline const ::tensorflow::proto_splitter::FieldIndex_MapKey& FieldIndex::map_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.map_key)
  return _internal_map_key();
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE FieldIndex::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.proto_splitter.FieldIndex.map_key)
  if (kind_case() == kMapKey) {
    clear_has_kind();
    auto* temp = _impl_.kind_.map_key_;
    _impl_.kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldIndex::unsafe_arena_set_allocated_map_key(
    ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_map_key();
    _impl_.kind_.map_key_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.FieldIndex.map_key)
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NONNULL FieldIndex::_internal_mutable_map_key() {
  if (kind_case() != kMapKey) {
    clear_kind();
    set_has_map_key();
    _impl_.kind_.map_key_ = 
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::proto_splitter::FieldIndex_MapKey>(GetArena());
  }
  return _impl_.kind_.map_key_;
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* PROTOBUF_NONNULL FieldIndex::mutable_map_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::proto_splitter::FieldIndex_MapKey* _msg = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.FieldIndex.map_key)
  return _msg;
}

// uint64 index = 3;
inline bool FieldIndex::has_index() const {
  return kind_case() == kIndex;
}
inline void FieldIndex::set_has_index() {
  _impl_._oneof_case_[0] = kIndex;
}
inline void FieldIndex::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kIndex) {
    _impl_.kind_.index_ = ::uint64_t{0u};
    clear_has_kind();
  }
}
inline ::uint64_t FieldIndex::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.index)
  return _internal_index();
}
inline void FieldIndex::set_index(::uint64_t value) {
  if (kind_case() != kIndex) {
    clear_kind();
    set_has_index();
  }
  _impl_.kind_.index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.index)
}
inline ::uint64_t FieldIndex::_internal_index() const {
  if (kind_case() == kIndex) {
    return _impl_.kind_.index_;
  }
  return ::uint64_t{0u};
}

inline bool FieldIndex::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void FieldIndex::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline FieldIndex::KindCase FieldIndex::kind_case() const {
  return FieldIndex::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_splitter
}  // namespace tensorflow


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tensorflow::proto_splitter::ChunkInfo_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tensorflow::proto_splitter::ChunkInfo_Type>() {
  return ::tensorflow::proto_splitter::ChunkInfo_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto_2epb_2eh
