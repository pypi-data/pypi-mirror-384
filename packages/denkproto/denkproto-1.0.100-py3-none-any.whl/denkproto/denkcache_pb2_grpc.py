# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import denkproto.denkcache_pb2 as denkcache__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in denkcache_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DENKcacheStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ChangeSettings = channel.unary_unary(
                '/denkcache.DENKcache/ChangeSettings',
                request_serializer=denkcache__pb2.ChangeSettingsRequest.SerializeToString,
                response_deserializer=denkcache__pb2.ChangeSettingsResponse.FromString,
                _registered_method=True)
        self.PingPong = channel.unary_unary(
                '/denkcache.DENKcache/PingPong',
                request_serializer=denkcache__pb2.PingPongRequest.SerializeToString,
                response_deserializer=denkcache__pb2.PingPongResponse.FromString,
                _registered_method=True)
        self.InvalidateObject = channel.unary_unary(
                '/denkcache.DENKcache/InvalidateObject',
                request_serializer=denkcache__pb2.InvalidateObjectRequest.SerializeToString,
                response_deserializer=denkcache__pb2.InvalidateObjectResponse.FromString,
                _registered_method=True)
        self.HasObjectCached = channel.unary_unary(
                '/denkcache.DENKcache/HasObjectCached',
                request_serializer=denkcache__pb2.HasObjectCachedRequest.SerializeToString,
                response_deserializer=denkcache__pb2.HasObjectCachedResponse.FromString,
                _registered_method=True)
        self.ObjectExists = channel.unary_unary(
                '/denkcache.DENKcache/ObjectExists',
                request_serializer=denkcache__pb2.ObjectExistsRequest.SerializeToString,
                response_deserializer=denkcache__pb2.ObjectExistsResponse.FromString,
                _registered_method=True)
        self.GetObject = channel.unary_unary(
                '/denkcache.DENKcache/GetObject',
                request_serializer=denkcache__pb2.GetObjectRequest.SerializeToString,
                response_deserializer=denkcache__pb2.GetObjectResponse.FromString,
                _registered_method=True)
        self.CacheObject = channel.unary_unary(
                '/denkcache.DENKcache/CacheObject',
                request_serializer=denkcache__pb2.CacheObjectRequest.SerializeToString,
                response_deserializer=denkcache__pb2.CacheObjectResponse.FromString,
                _registered_method=True)
        self.GetCachedObject = channel.unary_unary(
                '/denkcache.DENKcache/GetCachedObject',
                request_serializer=denkcache__pb2.GetCachedObjectRequest.SerializeToString,
                response_deserializer=denkcache__pb2.GetCachedObjectResponse.FromString,
                _registered_method=True)


class DENKcacheServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ChangeSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingPong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvalidateObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasObjectCached(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObjectExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CacheObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCachedObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DENKcacheServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ChangeSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeSettings,
                    request_deserializer=denkcache__pb2.ChangeSettingsRequest.FromString,
                    response_serializer=denkcache__pb2.ChangeSettingsResponse.SerializeToString,
            ),
            'PingPong': grpc.unary_unary_rpc_method_handler(
                    servicer.PingPong,
                    request_deserializer=denkcache__pb2.PingPongRequest.FromString,
                    response_serializer=denkcache__pb2.PingPongResponse.SerializeToString,
            ),
            'InvalidateObject': grpc.unary_unary_rpc_method_handler(
                    servicer.InvalidateObject,
                    request_deserializer=denkcache__pb2.InvalidateObjectRequest.FromString,
                    response_serializer=denkcache__pb2.InvalidateObjectResponse.SerializeToString,
            ),
            'HasObjectCached': grpc.unary_unary_rpc_method_handler(
                    servicer.HasObjectCached,
                    request_deserializer=denkcache__pb2.HasObjectCachedRequest.FromString,
                    response_serializer=denkcache__pb2.HasObjectCachedResponse.SerializeToString,
            ),
            'ObjectExists': grpc.unary_unary_rpc_method_handler(
                    servicer.ObjectExists,
                    request_deserializer=denkcache__pb2.ObjectExistsRequest.FromString,
                    response_serializer=denkcache__pb2.ObjectExistsResponse.SerializeToString,
            ),
            'GetObject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObject,
                    request_deserializer=denkcache__pb2.GetObjectRequest.FromString,
                    response_serializer=denkcache__pb2.GetObjectResponse.SerializeToString,
            ),
            'CacheObject': grpc.unary_unary_rpc_method_handler(
                    servicer.CacheObject,
                    request_deserializer=denkcache__pb2.CacheObjectRequest.FromString,
                    response_serializer=denkcache__pb2.CacheObjectResponse.SerializeToString,
            ),
            'GetCachedObject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCachedObject,
                    request_deserializer=denkcache__pb2.GetCachedObjectRequest.FromString,
                    response_serializer=denkcache__pb2.GetCachedObjectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'denkcache.DENKcache', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('denkcache.DENKcache', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DENKcache(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ChangeSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/ChangeSettings',
            denkcache__pb2.ChangeSettingsRequest.SerializeToString,
            denkcache__pb2.ChangeSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PingPong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/PingPong',
            denkcache__pb2.PingPongRequest.SerializeToString,
            denkcache__pb2.PingPongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InvalidateObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/InvalidateObject',
            denkcache__pb2.InvalidateObjectRequest.SerializeToString,
            denkcache__pb2.InvalidateObjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasObjectCached(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/HasObjectCached',
            denkcache__pb2.HasObjectCachedRequest.SerializeToString,
            denkcache__pb2.HasObjectCachedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObjectExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/ObjectExists',
            denkcache__pb2.ObjectExistsRequest.SerializeToString,
            denkcache__pb2.ObjectExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/GetObject',
            denkcache__pb2.GetObjectRequest.SerializeToString,
            denkcache__pb2.GetObjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CacheObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/CacheObject',
            denkcache__pb2.CacheObjectRequest.SerializeToString,
            denkcache__pb2.CacheObjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCachedObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/denkcache.DENKcache/GetCachedObject',
            denkcache__pb2.GetCachedObjectRequest.SerializeToString,
            denkcache__pb2.GetCachedObjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
