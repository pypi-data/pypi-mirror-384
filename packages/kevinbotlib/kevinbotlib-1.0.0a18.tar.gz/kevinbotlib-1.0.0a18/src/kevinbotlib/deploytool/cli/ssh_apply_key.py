import click
import paramiko
from rich.console import Console
from rich.panel import Panel

from kevinbotlib.deploytool.cli.common import confirm_host_key
from kevinbotlib.deploytool.cli.spinner import rich_spinner
from kevinbotlib.deploytool.sshkeys import SSHKeyManager

console = Console()


@click.command("apply-key")
@click.option("--host", required=True, help="Remote SSH hostname or IP", prompt="Remote Host")
@click.option("--user", required=True, help="Remote SSH username", prompt="Remote User")
@click.option("--password", prompt=True, hide_input=True, confirmation_prompt=False, help="Remote SSH password")
@click.option(
    "--name",
    required=True,
    help="Key name (robot name)",
    prompt="Robot name (SSH key name generated by `kevinbotlib-deploytool ssh init`)",
)
@click.option("--port", default=22, show_default=True, help="SSH port", prompt="Remove SSH port")
def apply_key_command(host, user, password, name, port):
    """Apply SSH key to remote host for passwordless login."""
    manager = SSHKeyManager("KevinbotLibDeployTool")
    key_info = manager.list_keys()

    if name not in key_info:
        console.print(Panel(f"[red]Key '{name}' not found in key manager", title="Key Error"))
        raise click.Abort

    _, public_key_path = key_info[name]

    if not public_key_path:
        console.print(Panel("[red]Public key path is missing!", title="Error"))
        raise click.Abort

    with open(public_key_path) as f:
        public_key = f.read().strip()

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.RejectPolicy())  # Reject unknown host keys

    confirm_host_key(console, host, user, port)

    ssh.set_missing_host_key_policy(
        paramiko.AutoAddPolicy()  # noqa: S507
    )  # * this is ok, because the user is asked beforehand

    with rich_spinner(console, "Connecting to remote host", success_message="Connected"):
        try:
            ssh.connect(
                hostname=host,
                port=port,
                username=user,
                password=password,
                timeout=10,
                allow_agent=False,
                look_for_keys=False,
            )
        except Exception as e:
            console.print(Panel(f"[red]SSH connection failed: {e}", title="Connection Error"))
            raise click.Abort from e

    def exec_cmd(cmd, desc=None):
        with rich_spinner(console, desc or f"Running: {cmd}"):
            stdin, stdout, stderr = ssh.exec_command(cmd)
            exit_status = stdout.channel.recv_exit_status()
            if exit_status != 0:
                error = stderr.read().decode()
                console.print(Panel(f"[red]Command failed: {cmd}\n\n{error}", title="Command Error"))
                raise click.Abort

    exec_cmd("mkdir -p ~/.ssh && chmod 700 ~/.ssh", "Creating ~/.ssh")
    append_cmd = f'grep -qxF "{public_key}" ~/.ssh/authorized_keys || echo "{public_key}" >> ~/.ssh/authorized_keys'
    exec_cmd(append_cmd, "Appending public key")
    exec_cmd("chmod 600 ~/.ssh/authorized_keys", "Setting permissions")

    ssh.close()
    console.print(Panel(f"[green]âœ” SSH key successfully applied to {user}@{host}", title="Success"))
