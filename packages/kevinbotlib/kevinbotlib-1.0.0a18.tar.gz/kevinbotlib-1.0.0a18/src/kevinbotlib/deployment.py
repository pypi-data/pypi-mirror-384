import datetime
import json
import os.path
import pathlib
from dataclasses import dataclass
from typing import TypedDict


class GitManifestData(TypedDict):
    """Git data generated by the deployment process."""

    branch: str | None
    """Git branch"""

    tag: str | None
    """Git tag"""

    commit: str | None
    """Git commit"""


@dataclass
class Manifest:
    """Manifest contents generated by the deployment process."""

    deploytool: str
    """KevinbotLib DeployTool Version"""

    timestamp: datetime.datetime
    """Deployment UTC Timestamp"""

    git: GitManifestData
    """Deployment Git Data"""

    robot: str
    """Deployed Robot Name"""


class ManifestParser:
    """Parser for the deployment manifest."""

    def __init__(self, path: pathlib.Path | str | None = None):
        """
        Parse the deployment manifest.

        Args:
            path: The deployment manifest path. Defaults to "deploy/manifest.json" in the current working directory.
        """

        path = pathlib.Path(os.path.join(os.getcwd(), "deploy", "manifest.json")) if not path else pathlib.Path(path)
        self._path = path
        self._manifest: Manifest | None = None

        # attempt to load
        try:
            with open(path) as f:
                data = f.read()
            self._manifest = Manifest(**json.loads(data))
        except FileNotFoundError:
            self._manifest = None

    @property
    def path(self) -> pathlib.Path:
        """
        Get the manifest path.

        Returns:
            pathlib.Path: Manifest path.
        """
        return self._path

    @property
    def manifest(self) -> Manifest | None:
        """
        Get the parsed manifest.

        Returns:
            Parsed manifest.
        """
        return self._manifest
