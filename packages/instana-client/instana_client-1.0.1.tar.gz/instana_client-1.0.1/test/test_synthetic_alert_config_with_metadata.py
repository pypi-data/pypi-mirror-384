# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.synthetic_alert_config_with_metadata import SyntheticAlertConfigWithMetadata

class TestSyntheticAlertConfigWithMetadata(unittest.TestCase):
    """SyntheticAlertConfigWithMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SyntheticAlertConfigWithMetadata:
        """Test SyntheticAlertConfigWithMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SyntheticAlertConfigWithMetadata`
        """
        model = SyntheticAlertConfigWithMetadata()
        if include_optional:
            return SyntheticAlertConfigWithMetadata(
                alert_channel_ids = [
                    ''
                    ],
                created = 1,
                custom_payload_fields = [
                    instana_client.models.custom_payload_field.CustomPayloadField(
                        key = '', 
                        type = '', )
                    ],
                description = '',
                enabled = True,
                grace_period = 56,
                id = '',
                initial_created = 1,
                name = '',
                read_only = True,
                rule = instana_client.models.synthetic_alert_rule.SyntheticAlertRule(
                    aggregation = 'SUM', 
                    alert_type = '', 
                    metric_name = '', ),
                severity = 5,
                synthetic_test_ids = [
                    ''
                    ],
                tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                    type = '', ),
                time_threshold = instana_client.models.synthetic_time_threshold.SyntheticTimeThreshold(
                    type = '', 
                    violations_count = 1, )
            )
        else:
            return SyntheticAlertConfigWithMetadata(
                alert_channel_ids = [
                    ''
                    ],
                custom_payload_fields = [
                    instana_client.models.custom_payload_field.CustomPayloadField(
                        key = '', 
                        type = '', )
                    ],
                description = '',
                id = '',
                name = '',
                rule = instana_client.models.synthetic_alert_rule.SyntheticAlertRule(
                    aggregation = 'SUM', 
                    alert_type = '', 
                    metric_name = '', ),
                synthetic_test_ids = [
                    ''
                    ],
                tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                    type = '', ),
                time_threshold = instana_client.models.synthetic_time_threshold.SyntheticTimeThreshold(
                    type = '', 
                    violations_count = 1, ),
        )
        """

    def testSyntheticAlertConfigWithMetadata(self):
        """Test SyntheticAlertConfigWithMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
