# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.infrastructure_entities_result import InfrastructureEntitiesResult

class TestInfrastructureEntitiesResult(unittest.TestCase):
    """InfrastructureEntitiesResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InfrastructureEntitiesResult:
        """Test InfrastructureEntitiesResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InfrastructureEntitiesResult`
        """
        model = InfrastructureEntitiesResult()
        if include_optional:
            return InfrastructureEntitiesResult(
                adjusted_timeframe = instana_client.models.adjusted_timeframe.AdjustedTimeframe(
                    to = 56, 
                    window_size = 0, ),
                can_load_more = True,
                items = [
                    instana_client.models.infrastructure_item.InfrastructureItem(
                        entity_health_info = instana_client.models.entity_health_info.EntityHealthInfo(
                            max_severity = 0, 
                            open_issues = [
                                instana_client.models.event.Event(
                                    end = 1, 
                                    endpoint_service_id = '', 
                                    entity_id = '', 
                                    entity_type = 'Entity10', 
                                    event_configuration_type = '', 
                                    id = '', 
                                    long_form_plugin_id = '', 
                                    metadata = {
                                        'key' : None
                                        }, 
                                    metric_access_id = '', 
                                    plugin = '', 
                                    problem = instana_client.models.problem.Problem(
                                        fix_suggestion = '', 
                                        id = '', 
                                        problem_text = '', 
                                        severity = 56, ), 
                                    rca = {
                                        'key' : None
                                        }, 
                                    start = 1, 
                                    state = '', 
                                    type = '', )
                                ], ), 
                        label = '', 
                        metrics = {
                            'key' : [
                                [
                                    1.337
                                    ]
                                ]
                            }, 
                        plugin = '', 
                        snapshot_id = '', 
                        tags = {
                            'key' : ''
                            }, 
                        time = 56, )
                    ],
                next = instana_client.models.cursor.cursor(),
                total_hits = 0
            )
        else:
            return InfrastructureEntitiesResult(
                items = [
                    instana_client.models.infrastructure_item.InfrastructureItem(
                        entity_health_info = instana_client.models.entity_health_info.EntityHealthInfo(
                            max_severity = 0, 
                            open_issues = [
                                instana_client.models.event.Event(
                                    end = 1, 
                                    endpoint_service_id = '', 
                                    entity_id = '', 
                                    entity_type = 'Entity10', 
                                    event_configuration_type = '', 
                                    id = '', 
                                    long_form_plugin_id = '', 
                                    metadata = {
                                        'key' : None
                                        }, 
                                    metric_access_id = '', 
                                    plugin = '', 
                                    problem = instana_client.models.problem.Problem(
                                        fix_suggestion = '', 
                                        id = '', 
                                        problem_text = '', 
                                        severity = 56, ), 
                                    rca = {
                                        'key' : None
                                        }, 
                                    start = 1, 
                                    state = '', 
                                    type = '', )
                                ], ), 
                        label = '', 
                        metrics = {
                            'key' : [
                                [
                                    1.337
                                    ]
                                ]
                            }, 
                        plugin = '', 
                        snapshot_id = '', 
                        tags = {
                            'key' : ''
                            }, 
                        time = 56, )
                    ],
        )
        """

    def testInfrastructureEntitiesResult(self):
        """Test InfrastructureEntitiesResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
