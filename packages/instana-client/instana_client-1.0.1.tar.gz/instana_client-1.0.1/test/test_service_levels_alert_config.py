# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.service_levels_alert_config import ServiceLevelsAlertConfig

class TestServiceLevelsAlertConfig(unittest.TestCase):
    """ServiceLevelsAlertConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceLevelsAlertConfig:
        """Test ServiceLevelsAlertConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceLevelsAlertConfig`
        """
        model = ServiceLevelsAlertConfig()
        if include_optional:
            return ServiceLevelsAlertConfig(
                alert_channel_ids = [
                    ''
                    ],
                burn_rate_config = [
                    instana_client.models.service_levels_burn_rate_config.ServiceLevelsBurnRateConfig(
                        alert_window_type = 'SINGLE', 
                        duration = 56, 
                        duration_unit_type = 'millisecond', 
                        threshold = instana_client.models.service_levels_static_threshold_config.ServiceLevelsStaticThresholdConfig(
                            last_updated = 0, 
                            operator = '>', 
                            value = 0, ), )
                    ],
                burn_rate_time_windows = instana_client.models.service_levels_burn_rate_time_windows.ServiceLevelsBurnRateTimeWindows(
                    long_time_window = instana_client.models.alerting_time_window.AlertingTimeWindow(
                        duration = 56, 
                        duration_type = 'millisecond', 
                        duration_unit = 'millisecond', ), 
                    short_time_window = instana_client.models.alerting_time_window.AlertingTimeWindow(
                        duration = 56, 
                        duration_type = 'millisecond', 
                        duration_unit = 'millisecond', ), ),
                custom_payload_fields = [
                    instana_client.models.custom_payload_field.CustomPayloadField(
                        key = '', 
                        type = '', )
                    ],
                description = '',
                name = '',
                rule = instana_client.models.service_levels_alert_rule.ServiceLevelsAlertRule(
                    alert_type = '', ),
                severity = 56,
                slo_ids = [
                    ''
                    ],
                threshold = instana_client.models.static_threshold.StaticThreshold(),
                time_threshold = instana_client.models.service_levels_time_threshold.ServiceLevelsTimeThreshold(
                    expiry = 56, 
                    time_window = 56, ),
                triggering = True
            )
        else:
            return ServiceLevelsAlertConfig(
                alert_channel_ids = [
                    ''
                    ],
                custom_payload_fields = [
                    instana_client.models.custom_payload_field.CustomPayloadField(
                        key = '', 
                        type = '', )
                    ],
                description = '',
                name = '',
                rule = instana_client.models.service_levels_alert_rule.ServiceLevelsAlertRule(
                    alert_type = '', ),
                severity = 56,
                slo_ids = [
                    ''
                    ],
                time_threshold = instana_client.models.service_levels_time_threshold.ServiceLevelsTimeThreshold(
                    expiry = 56, 
                    time_window = 56, ),
        )
        """

    def testServiceLevelsAlertConfig(self):
        """Test ServiceLevelsAlertConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
