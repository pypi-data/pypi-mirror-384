# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.api_permission_set import ApiPermissionSet

class TestApiPermissionSet(unittest.TestCase):
    """ApiPermissionSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiPermissionSet:
        """Test ApiPermissionSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiPermissionSet`
        """
        model = ApiPermissionSet()
        if include_optional:
            return ApiPermissionSet(
                action_filter = instana_client.models.scope_binding.ScopeBinding(
                    scope_id = '', 
                    scope_role_id = '', ),
                application_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                business_perspective_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                infra_dfq_filter = instana_client.models.scope_binding.ScopeBinding(
                    scope_id = '', 
                    scope_role_id = '', ),
                kubernetes_cluster_uuids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                kubernetes_namespace_uids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                mobile_app_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                permissions = [
                    ''
                    ],
                restricted_application_filter = instana_client.models.api_restricted_application_filter.ApiRestrictedApplicationFilter(
                    label = '', 
                    restricting_application_id = '', 
                    scope = 'INCLUDE_NO_DOWNSTREAM', 
                    tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                        type = '', ), ),
                slo_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                synthetic_credential_keys = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                synthetic_test_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                website_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ]
            )
        else:
            return ApiPermissionSet(
                application_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                business_perspective_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                infra_dfq_filter = instana_client.models.scope_binding.ScopeBinding(
                    scope_id = '', 
                    scope_role_id = '', ),
                kubernetes_cluster_uuids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                kubernetes_namespace_uids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                mobile_app_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                permissions = [
                    ''
                    ],
                slo_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                synthetic_credential_keys = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                synthetic_test_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
                website_ids = [
                    instana_client.models.scope_binding.ScopeBinding(
                        scope_id = '', 
                        scope_role_id = '', )
                    ],
        )
        """

    def testApiPermissionSet(self):
        """Test ApiPermissionSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
