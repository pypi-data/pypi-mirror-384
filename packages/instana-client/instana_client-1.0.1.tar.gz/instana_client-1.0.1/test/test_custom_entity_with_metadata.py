# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.custom_entity_with_metadata import CustomEntityWithMetadata

class TestCustomEntityWithMetadata(unittest.TestCase):
    """CustomEntityWithMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomEntityWithMetadata:
        """Test CustomEntityWithMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomEntityWithMetadata`
        """
        model = CustomEntityWithMetadata()
        if include_optional:
            return CustomEntityWithMetadata(
                created = 56,
                data = instana_client.models.custom_entity_model.CustomEntityModel(
                    dashboards = [
                        instana_client.models.custom_dashboard.CustomDashboard(
                            access_rules = [
                                instana_client.models.access_rule.AccessRule(
                                    access_type = 'READ', 
                                    related_id = '', 
                                    relation_type = 'USER', )
                                ], 
                            id = '', 
                            title = '', 
                            widgets = [
                                instana_client.models.widget.Widget(
                                    config = instana_client.models.config.config(), 
                                    height = 1, 
                                    id = '', 
                                    title = '', 
                                    type = '', 
                                    width = 1, 
                                    x = 0, 
                                    y = 0, )
                                ], )
                        ], 
                    dependencies = [
                        instana_client.models.custom_dependency.CustomDependency(
                            direction = 'outgoing', 
                            entity_type = '', 
                            identifiers = [
                                ''
                                ], 
                            name = '', 
                            type = 'in', )
                        ], 
                    identifiers = [
                        ''
                        ], 
                    label = '', 
                    metrics = [
                        instana_client.models.custom_metric.CustomMetric(
                            aggregation = 'AVG', 
                            category = '', 
                            description = '', 
                            formatter = 'NUMBER', 
                            label = '', 
                            name = '', 
                            section = 'ACE', 
                            source = '', 
                            type = '', )
                        ], 
                    tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                        type = '', ), ),
                id = '',
                version = ''
            )
        else:
            return CustomEntityWithMetadata(
                data = instana_client.models.custom_entity_model.CustomEntityModel(
                    dashboards = [
                        instana_client.models.custom_dashboard.CustomDashboard(
                            access_rules = [
                                instana_client.models.access_rule.AccessRule(
                                    access_type = 'READ', 
                                    related_id = '', 
                                    relation_type = 'USER', )
                                ], 
                            id = '', 
                            title = '', 
                            widgets = [
                                instana_client.models.widget.Widget(
                                    config = instana_client.models.config.config(), 
                                    height = 1, 
                                    id = '', 
                                    title = '', 
                                    type = '', 
                                    width = 1, 
                                    x = 0, 
                                    y = 0, )
                                ], )
                        ], 
                    dependencies = [
                        instana_client.models.custom_dependency.CustomDependency(
                            direction = 'outgoing', 
                            entity_type = '', 
                            identifiers = [
                                ''
                                ], 
                            name = '', 
                            type = 'in', )
                        ], 
                    identifiers = [
                        ''
                        ], 
                    label = '', 
                    metrics = [
                        instana_client.models.custom_metric.CustomMetric(
                            aggregation = 'AVG', 
                            category = '', 
                            description = '', 
                            formatter = 'NUMBER', 
                            label = '', 
                            name = '', 
                            section = 'ACE', 
                            source = '', 
                            type = '', )
                        ], 
                    tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                        type = '', ), ),
                id = '',
        )
        """

    def testCustomEntityWithMetadata(self):
        """Test CustomEntityWithMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
