# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.304.1059
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.service_level_objective_configuration import ServiceLevelObjectiveConfiguration

class TestServiceLevelObjectiveConfiguration(unittest.TestCase):
    """ServiceLevelObjectiveConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceLevelObjectiveConfiguration:
        """Test ServiceLevelObjectiveConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceLevelObjectiveConfiguration`
        """
        model = ServiceLevelObjectiveConfiguration()
        if include_optional:
            return ServiceLevelObjectiveConfiguration(
                created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                entity = instana_client.models.slo_entity.SloEntity(
                    tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                        type = '', ), 
                    type = '', ),
                id = '',
                indicator = instana_client.models.service_level_indicator.ServiceLevelIndicator(
                    aggregation = 'SUM', 
                    operator = '>', 
                    service_levels_measurement = 'eventBased', 
                    threshold = 1.337, 
                    type = 'eventBased', ),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                tags = [
                    ''
                    ],
                target = 0.0,
                time_window = instana_client.models.time_window.TimeWindow(
                    duration = 56, 
                    duration_unit = 'millisecond', 
                    timezone = '', 
                    type = '', )
            )
        else:
            return ServiceLevelObjectiveConfiguration(
                entity = instana_client.models.slo_entity.SloEntity(
                    tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                        type = '', ), 
                    type = '', ),
                indicator = instana_client.models.service_level_indicator.ServiceLevelIndicator(
                    aggregation = 'SUM', 
                    operator = '>', 
                    service_levels_measurement = 'eventBased', 
                    threshold = 1.337, 
                    type = 'eventBased', ),
                name = '',
                tags = [
                    ''
                    ],
                target = 0.0,
                time_window = instana_client.models.time_window.TimeWindow(
                    duration = 56, 
                    duration_unit = 'millisecond', 
                    timezone = '', 
                    type = '', ),
        )
        """

    def testServiceLevelObjectiveConfiguration(self):
        """Test ServiceLevelObjectiveConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
