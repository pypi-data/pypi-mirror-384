# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.api.synthetic_settings_api import SyntheticSettingsApi


class TestSyntheticSettingsApi(unittest.TestCase):
    """SyntheticSettingsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SyntheticSettingsApi()

    def tearDown(self) -> None:
        pass

    def test_create_synthetic_credential(self) -> None:
        """Test case for create_synthetic_credential

        Create a Synthetic credential
        """
        pass

    def test_create_synthetic_test(self) -> None:
        """Test case for create_synthetic_test

        Create a Synthetic test
        """
        pass

    def test_create_synthetic_test_cicd(self) -> None:
        """Test case for create_synthetic_test_cicd

        Create a Synthetic test CI/CD
        """
        pass

    def test_delete_synthetic_credential(self) -> None:
        """Test case for delete_synthetic_credential

        Delete a Synthetic credential
        """
        pass

    def test_delete_synthetic_location(self) -> None:
        """Test case for delete_synthetic_location

        Delete a Synthetic location
        """
        pass

    def test_delete_synthetic_test(self) -> None:
        """Test case for delete_synthetic_test

        Delete a Synthetic test
        """
        pass

    def test_get_one_synthetic_credential_associations(self) -> None:
        """Test case for get_one_synthetic_credential_associations

        A Synthetic credential
        """
        pass

    def test_get_synthetic_credential_associations(self) -> None:
        """Test case for get_synthetic_credential_associations

        All Synthetic credentials
        """
        pass

    def test_get_synthetic_credential_names(self) -> None:
        """Test case for get_synthetic_credential_names

        All Synthetic credential names
        """
        pass

    def test_get_synthetic_datacenter(self) -> None:
        """Test case for get_synthetic_datacenter

        A Synthetic datacenter
        """
        pass

    def test_get_synthetic_datacenters(self) -> None:
        """Test case for get_synthetic_datacenters

        All Synthetic datacenters
        """
        pass

    def test_get_synthetic_location(self) -> None:
        """Test case for get_synthetic_location

        A Synthetic location
        """
        pass

    def test_get_synthetic_locations(self) -> None:
        """Test case for get_synthetic_locations

        All Synthetic locations
        """
        pass

    def test_get_synthetic_test(self) -> None:
        """Test case for get_synthetic_test

        A Synthetic test
        """
        pass

    def test_get_synthetic_test_cicd(self) -> None:
        """Test case for get_synthetic_test_cicd

        A Synthetic test CI/CD.
        """
        pass

    def test_get_synthetic_test_cicds(self) -> None:
        """Test case for get_synthetic_test_cicds

        All Synthetic test CI/CDs
        """
        pass

    def test_get_synthetic_tests(self) -> None:
        """Test case for get_synthetic_tests

        All Synthetic tests
        """
        pass

    def test_patch_synthetic_credential(self) -> None:
        """Test case for patch_synthetic_credential

        Patch a Synthetic credential
        """
        pass

    def test_patch_synthetic_test(self) -> None:
        """Test case for patch_synthetic_test

        Patch a Synthetic test
        """
        pass

    def test_update_synthetic_credential(self) -> None:
        """Test case for update_synthetic_credential

        Update a Synthetic credential
        """
        pass

    def test_update_synthetic_test(self) -> None:
        """Test case for update_synthetic_test

        Update a Synthetic test
        """
        pass


if __name__ == '__main__':
    unittest.main()
