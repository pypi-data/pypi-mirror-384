# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.trace_activity_tree_node_details import TraceActivityTreeNodeDetails

class TestTraceActivityTreeNodeDetails(unittest.TestCase):
    """TraceActivityTreeNodeDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TraceActivityTreeNodeDetails:
        """Test TraceActivityTreeNodeDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceActivityTreeNodeDetails`
        """
        model = TraceActivityTreeNodeDetails()
        if include_optional:
            return TraceActivityTreeNodeDetails(
                batch_self_time = 56,
                batch_size = 0,
                destination = instana_client.models.span_relation.SpanRelation(
                    applications = [
                        instana_client.models.application.Application(
                            boundary_scope = '', 
                            entity_type = 'APPLICATION', 
                            id = '', 
                            label = '', )
                        ], 
                    endpoint = instana_client.models.endpoint.Endpoint(
                        entity_type = 'APPLICATION', 
                        id = '', 
                        is_synthetic = True, 
                        label = '', 
                        service_id = '', 
                        synthetic = True, 
                        synthetic_type = 'NON_SYNTHETIC', 
                        technologies = [
                            ''
                            ], 
                        type = 'UNDEFINED', ), 
                    physical_context = instana_client.models.physical_context.PhysicalContext(
                        cloudfoundry = instana_client.models.cloudfoundry_physical_context.CloudfoundryPhysicalContext(
                            application = instana_client.models.snapshot_preview.SnapshotPreview(
                                data = {
                                    'key' : None
                                    }, 
                                id = '', 
                                label = '', 
                                plugin = '', 
                                time = 1, ), 
                            cf_instance_index = '', 
                            organization = instana_client.models.snapshot_preview.SnapshotPreview(
                                id = '', 
                                label = '', 
                                plugin = '', 
                                time = 1, ), 
                            space = , ), 
                        cluster = , 
                        container = , 
                        host = , 
                        kubernetes = instana_client.models.kubernetes_physical_context.KubernetesPhysicalContext(
                            namespace = , 
                            node = , 
                            pod = , ), 
                        process = , ), 
                    service = instana_client.models.service.Service(
                        entity_type = 'APPLICATION', 
                        id = '', 
                        label = '', 
                        snapshot_ids = [
                            ''
                            ], 
                        technologies = [
                            ''
                            ], 
                        types = [
                            'UNDEFINED'
                            ], ), ),
                duration = 0,
                error_count = 0,
                id = '',
                is_synthetic = True,
                label = '',
                logs = [
                    instana_client.models.span_excerpt.SpanExcerpt(
                        data = {
                            'key' : None
                            }, 
                        database_integrations = [
                            instana_client.models.database_integration.DatabaseIntegration(
                                type = '', 
                                url = '', )
                            ], 
                        duration = 0, 
                        error_count = 0, 
                        foreign_parent_id = '', 
                        id = '', 
                        kind = 'UNKNOWN', 
                        name = '', 
                        parent_id = '', 
                        stack_trace = [
                            instana_client.models.stack_trace_item.StackTraceItem(
                                file = '', 
                                line = '', 
                                method = '', )
                            ], 
                        start = 1, )
                    ],
                min_self_time = 56,
                network_time = 56,
                source = instana_client.models.span_relation.SpanRelation(
                    applications = [
                        instana_client.models.application.Application(
                            boundary_scope = '', 
                            entity_type = 'APPLICATION', 
                            id = '', 
                            label = '', )
                        ], 
                    endpoint = instana_client.models.endpoint.Endpoint(
                        entity_type = 'APPLICATION', 
                        id = '', 
                        is_synthetic = True, 
                        label = '', 
                        service_id = '', 
                        synthetic = True, 
                        synthetic_type = 'NON_SYNTHETIC', 
                        technologies = [
                            ''
                            ], 
                        type = 'UNDEFINED', ), 
                    physical_context = instana_client.models.physical_context.PhysicalContext(
                        cloudfoundry = instana_client.models.cloudfoundry_physical_context.CloudfoundryPhysicalContext(
                            application = instana_client.models.snapshot_preview.SnapshotPreview(
                                data = {
                                    'key' : None
                                    }, 
                                id = '', 
                                label = '', 
                                plugin = '', 
                                time = 1, ), 
                            cf_instance_index = '', 
                            organization = instana_client.models.snapshot_preview.SnapshotPreview(
                                id = '', 
                                label = '', 
                                plugin = '', 
                                time = 1, ), 
                            space = , ), 
                        cluster = , 
                        container = , 
                        host = , 
                        kubernetes = instana_client.models.kubernetes_physical_context.KubernetesPhysicalContext(
                            namespace = , 
                            node = , 
                            pod = , ), 
                        process = , ), 
                    service = instana_client.models.service.Service(
                        entity_type = 'APPLICATION', 
                        id = '', 
                        label = '', 
                        snapshot_ids = [
                            ''
                            ], 
                        technologies = [
                            ''
                            ], 
                        types = [
                            'UNDEFINED'
                            ], ), ),
                spans = [
                    instana_client.models.span_excerpt.SpanExcerpt(
                        data = {
                            'key' : None
                            }, 
                        database_integrations = [
                            instana_client.models.database_integration.DatabaseIntegration(
                                type = '', 
                                url = '', )
                            ], 
                        duration = 0, 
                        error_count = 0, 
                        foreign_parent_id = '', 
                        id = '', 
                        kind = 'UNKNOWN', 
                        name = '', 
                        parent_id = '', 
                        stack_trace = [
                            instana_client.models.stack_trace_item.StackTraceItem(
                                file = '', 
                                line = '', 
                                method = '', )
                            ], 
                        start = 1, )
                    ],
                start = 1,
                synthetic = True
            )
        else:
            return TraceActivityTreeNodeDetails(
                id = '',
                label = '',
                logs = [
                    instana_client.models.span_excerpt.SpanExcerpt(
                        data = {
                            'key' : None
                            }, 
                        database_integrations = [
                            instana_client.models.database_integration.DatabaseIntegration(
                                type = '', 
                                url = '', )
                            ], 
                        duration = 0, 
                        error_count = 0, 
                        foreign_parent_id = '', 
                        id = '', 
                        kind = 'UNKNOWN', 
                        name = '', 
                        parent_id = '', 
                        stack_trace = [
                            instana_client.models.stack_trace_item.StackTraceItem(
                                file = '', 
                                line = '', 
                                method = '', )
                            ], 
                        start = 1, )
                    ],
                spans = [
                    instana_client.models.span_excerpt.SpanExcerpt(
                        data = {
                            'key' : None
                            }, 
                        database_integrations = [
                            instana_client.models.database_integration.DatabaseIntegration(
                                type = '', 
                                url = '', )
                            ], 
                        duration = 0, 
                        error_count = 0, 
                        foreign_parent_id = '', 
                        id = '', 
                        kind = 'UNKNOWN', 
                        name = '', 
                        parent_id = '', 
                        stack_trace = [
                            instana_client.models.stack_trace_item.StackTraceItem(
                                file = '', 
                                line = '', 
                                method = '', )
                            ], 
                        start = 1, )
                    ],
        )
        """

    def testTraceActivityTreeNodeDetails(self):
        """Test TraceActivityTreeNodeDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
