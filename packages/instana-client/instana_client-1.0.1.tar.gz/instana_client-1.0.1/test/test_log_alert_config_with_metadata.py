# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.log_alert_config_with_metadata import LogAlertConfigWithMetadata

class TestLogAlertConfigWithMetadata(unittest.TestCase):
    """LogAlertConfigWithMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LogAlertConfigWithMetadata:
        """Test LogAlertConfigWithMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LogAlertConfigWithMetadata`
        """
        model = LogAlertConfigWithMetadata()
        if include_optional:
            return LogAlertConfigWithMetadata(
                alert_channel_ids = [
                    ''
                    ],
                alert_channels = {
                    'key' : [
                        ''
                        ]
                    },
                created = 1,
                custom_payload_fields = [
                    instana_client.models.custom_payload_field.CustomPayloadField(
                        key = '', 
                        type = '', )
                    ],
                description = '',
                enabled = True,
                grace_period = 56,
                granularity = 60000,
                group_by = [
                    instana_client.models.group_by_tag.GroupByTag(
                        key = '', 
                        tag_name = '', )
                    ],
                id = '',
                initial_created = 1,
                name = '',
                read_only = True,
                rules = [
                    instana_client.models.rule_with_threshold_log_alert_rule.RuleWithThresholdLogAlertRule(
                        rule = instana_client.models.log_alert_rule.LogAlertRule(
                            aggregation = 'SUM', 
                            alert_type = '', 
                            metric_name = '', ), 
                        threshold_operator = '>', 
                        thresholds = {
                            'key' : instana_client.models.threshold_config_rule.ThresholdConfigRule(
                                type = '', )
                            }, )
                    ],
                severity = 56,
                tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                    type = '', ),
                threshold = instana_client.models.threshold.Threshold(
                    operator = '>', 
                    type = '', ),
                time_threshold = instana_client.models.log_time_threshold.LogTimeThreshold(
                    time_window = 56, 
                    type = '', )
            )
        else:
            return LogAlertConfigWithMetadata(
                description = '',
                granularity = 60000,
                id = '',
                name = '',
                tag_filter_expression = instana_client.models.tag_filter_expression_element.TagFilterExpressionElement(
                    type = '', ),
                time_threshold = instana_client.models.log_time_threshold.LogTimeThreshold(
                    time_window = 56, 
                    type = '', ),
        )
        """

    def testLogAlertConfigWithMetadata(self):
        """Test LogAlertConfigWithMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
