# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from instana_client.models.trace_download_result import TraceDownloadResult

class TestTraceDownloadResult(unittest.TestCase):
    """TraceDownloadResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TraceDownloadResult:
        """Test TraceDownloadResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TraceDownloadResult`
        """
        model = TraceDownloadResult()
        if include_optional:
            return TraceDownloadResult(
                adjusted_timeframe = instana_client.models.adjusted_timeframe.AdjustedTimeframe(
                    to = 56, 
                    window_size = 0, ),
                can_load_more = True,
                items = [
                    instana_client.models.get_trace_download_result_item.GetTraceDownloadResultItem(
                        call_count = 56, 
                        cursor = instana_client.models.cursor.cursor(), 
                        destination = instana_client.models.call_relation.CallRelation(
                            endpoint = instana_client.models.endpoint_simple.EndpointSimple(
                                id = '', 
                                label = '', 
                                type = 'UNDEFINED', ), 
                            service = instana_client.models.service_simple.ServiceSimple(
                                id = '', 
                                label = '', ), 
                            technologies = [
                                ''
                                ], ), 
                        duration = 56, 
                        error_count = 56, 
                        foreign_parent_id = '', 
                        id = '', 
                        min_self_time = 56, 
                        name = '', 
                        network_time = 56, 
                        parent_id = '', 
                        timestamp = 56, )
                    ],
                total_hits = 0,
                total_represented_item_count = 0,
                total_retained_item_count = 0
            )
        else:
            return TraceDownloadResult(
                items = [
                    instana_client.models.get_trace_download_result_item.GetTraceDownloadResultItem(
                        call_count = 56, 
                        cursor = instana_client.models.cursor.cursor(), 
                        destination = instana_client.models.call_relation.CallRelation(
                            endpoint = instana_client.models.endpoint_simple.EndpointSimple(
                                id = '', 
                                label = '', 
                                type = 'UNDEFINED', ), 
                            service = instana_client.models.service_simple.ServiceSimple(
                                id = '', 
                                label = '', ), 
                            technologies = [
                                ''
                                ], ), 
                        duration = 56, 
                        error_count = 56, 
                        foreign_parent_id = '', 
                        id = '', 
                        min_self_time = 56, 
                        name = '', 
                        network_time = 56, 
                        parent_id = '', 
                        timestamp = 56, )
                    ],
        )
        """

    def testTraceDownloadResult(self):
        """Test TraceDownloadResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
