# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.maintenance_window import MaintenanceWindow
from typing import Optional, Set
from typing_extensions import Self

class ValidatedMaintenanceConfigWithStatus(BaseModel):
    """
    ValidatedMaintenanceConfigWithStatus
    """ # noqa: E501
    id: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="ID of the Maintenance Window Configuration.")
    invalid: Optional[StrictBool] = Field(default=None, description="Boolean flag that tells if the Dynamic Focus Query(DFQ) is invalid.")
    last_updated: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="lastUpdated")
    name: Annotated[str, Field(min_length=0, strict=True, max_length=256)] = Field(description="Name of the Maintenance Window Configuration.")
    query: Annotated[str, Field(min_length=0, strict=True, max_length=2048)] = Field(description="Dynamic Focus Query that determines the scope of the Maintenance Window configuration.")
    status: StrictStr = Field(description="Status of the Maintenance Window Configuration. It can be one of: UNSCHEDULED, SCHEDULED, ACTIVE, FINISHED, PAUSED.")
    windows: Optional[Annotated[List[MaintenanceWindow], Field(min_length=0, max_length=1)]] = Field(default=None, description="A set of time periods when the Maintenance Window Configuration is active.")
    __properties: ClassVar[List[str]] = ["id", "invalid", "lastUpdated", "name", "query", "status", "windows"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNSCHEDULED', 'SCHEDULED', 'ACTIVE', 'FINISHED', 'PAUSED']):
            raise ValueError("must be one of enum values ('UNSCHEDULED', 'SCHEDULED', 'ACTIVE', 'FINISHED', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidatedMaintenanceConfigWithStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in windows (list)
        _items = []
        if self.windows:
            for _item_windows in self.windows:
                if _item_windows:
                    _items.append(_item_windows.to_dict())
            _dict['windows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidatedMaintenanceConfigWithStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "invalid": obj.get("invalid"),
            "lastUpdated": obj.get("lastUpdated"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "status": obj.get("status"),
            "windows": [MaintenanceWindow.from_dict(_item) for _item in obj["windows"]] if obj.get("windows") is not None else None
        })
        return _obj


