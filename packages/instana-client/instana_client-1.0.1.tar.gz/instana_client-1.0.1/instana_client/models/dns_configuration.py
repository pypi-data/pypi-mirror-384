# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.dns_filter_query_time import DNSFilterQueryTime
from instana_client.models.dns_filter_target_value import DNSFilterTargetValue
from instana_client.models.synthetic_type_configuration import SyntheticTypeConfiguration
from typing import Optional, Set
from typing_extensions import Self

class DNSConfiguration(SyntheticTypeConfiguration):
    """
    DNSConfiguration
    """ # noqa: E501
    accept_cname: Optional[StrictBool] = Field(default=None, alias="acceptCNAME")
    lookup: StrictStr
    lookup_server_name: Optional[StrictBool] = Field(default=None, alias="lookupServerName")
    port: Optional[StrictInt] = None
    query_time: Optional[DNSFilterQueryTime] = Field(default=None, alias="queryTime")
    query_type: Optional[StrictStr] = Field(default=None, alias="queryType")
    recursive_lookups: Optional[StrictBool] = Field(default=None, alias="recursiveLookups")
    server: StrictStr
    server_retries: Optional[StrictInt] = Field(default=None, alias="serverRetries")
    target_values: Optional[List[DNSFilterTargetValue]] = Field(default=None, alias="targetValues")
    transport: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["markSyntheticCall", "retries", "retryInterval", "syntheticType", "timeout", "acceptCNAME", "lookup", "lookupServerName", "port", "queryTime", "queryType", "recursiveLookups", "server", "serverRetries", "targetValues", "transport"]

    @field_validator('query_type')
    def query_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'ALL_CONDITIONS', 'ANY', 'A', 'AAAA', 'CNAME', 'NS']):
            raise ValueError("must be one of enum values ('ALL', 'ALL_CONDITIONS', 'ANY', 'A', 'AAAA', 'CNAME', 'NS')")
        return value

    @field_validator('transport')
    def transport_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TCP', 'UDP']):
            raise ValueError("must be one of enum values ('TCP', 'UDP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DNSConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query_time
        if self.query_time:
            _dict['queryTime'] = self.query_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in target_values (list)
        _items = []
        if self.target_values:
            for _item_target_values in self.target_values:
                if _item_target_values:
                    _items.append(_item_target_values.to_dict())
            _dict['targetValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DNSConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "markSyntheticCall": obj.get("markSyntheticCall"),
            "retries": obj.get("retries"),
            "retryInterval": obj.get("retryInterval"),
            "syntheticType": obj.get("syntheticType"),
            "timeout": obj.get("timeout"),
            "acceptCNAME": obj.get("acceptCNAME"),
            "lookup": obj.get("lookup"),
            "lookupServerName": obj.get("lookupServerName"),
            "port": obj.get("port"),
            "queryTime": DNSFilterQueryTime.from_dict(obj["queryTime"]) if obj.get("queryTime") is not None else None,
            "queryType": obj.get("queryType"),
            "recursiveLookups": obj.get("recursiveLookups"),
            "server": obj.get("server"),
            "serverRetries": obj.get("serverRetries"),
            "targetValues": [DNSFilterTargetValue.from_dict(_item) for _item in obj["targetValues"]] if obj.get("targetValues") is not None else None,
            "transport": obj.get("transport")
        })
        return _obj


