# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EventFilteringConfiguration(BaseModel):
    """
    Event Filter Configuration for supporting the scope of the Alert Configuration. Applies a filter based on the application perspective or selected entities.
    """ # noqa: E501
    application_alert_config_ids: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=1024)]] = Field(default=None, alias="applicationAlertConfigIds")
    event_types: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=1024)]] = Field(default=None, alias="eventTypes")
    query: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]] = None
    rule_ids: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=1024)]] = Field(default=None, alias="ruleIds")
    __properties: ClassVar[List[str]] = ["applicationAlertConfigIds", "eventTypes", "query", "ruleIds"]

    @field_validator('event_types')
    def event_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['incident', 'critical', 'warning', 'change', 'online', 'offline', 'agent_monitoring_issue', 'cve_issue', 'none']):
                raise ValueError("each list item must be one of ('incident', 'critical', 'warning', 'change', 'online', 'offline', 'agent_monitoring_issue', 'cve_issue', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventFilteringConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventFilteringConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationAlertConfigIds": obj.get("applicationAlertConfigIds"),
            "eventTypes": obj.get("eventTypes"),
            "query": obj.get("query"),
            "ruleIds": obj.get("ruleIds")
        })
        return _obj


