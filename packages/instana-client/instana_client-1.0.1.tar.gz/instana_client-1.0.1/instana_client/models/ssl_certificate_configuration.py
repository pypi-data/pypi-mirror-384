# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.ssl_certificate_validation import SSLCertificateValidation
from instana_client.models.synthetic_type_configuration import SyntheticTypeConfiguration
from typing import Optional, Set
from typing_extensions import Self

class SSLCertificateConfiguration(SyntheticTypeConfiguration):
    """
    SSLCertificateConfiguration
    """ # noqa: E501
    accept_self_signed_certificate: Optional[StrictBool] = Field(default=None, alias="acceptSelfSignedCertificate")
    days_remaining_check: Annotated[int, Field(le=365, strict=True, ge=1)] = Field(alias="daysRemainingCheck")
    hostname: Annotated[str, Field(min_length=0, strict=True, max_length=2047)]
    port: Optional[StrictInt] = None
    validation_rules: Optional[List[SSLCertificateValidation]] = Field(default=None, alias="validationRules")
    __properties: ClassVar[List[str]] = ["markSyntheticCall", "retries", "retryInterval", "syntheticType", "timeout", "acceptSelfSignedCertificate", "daysRemainingCheck", "hostname", "port", "validationRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SSLCertificateConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validation_rules (list)
        _items = []
        if self.validation_rules:
            for _item_validation_rules in self.validation_rules:
                if _item_validation_rules:
                    _items.append(_item_validation_rules.to_dict())
            _dict['validationRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SSLCertificateConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "markSyntheticCall": obj.get("markSyntheticCall"),
            "retries": obj.get("retries"),
            "retryInterval": obj.get("retryInterval"),
            "syntheticType": obj.get("syntheticType"),
            "timeout": obj.get("timeout"),
            "acceptSelfSignedCertificate": obj.get("acceptSelfSignedCertificate"),
            "daysRemainingCheck": obj.get("daysRemainingCheck"),
            "hostname": obj.get("hostname"),
            "port": obj.get("port"),
            "validationRules": [SSLCertificateValidation.from_dict(_item) for _item in obj["validationRules"]] if obj.get("validationRules") is not None else None
        })
        return _obj


