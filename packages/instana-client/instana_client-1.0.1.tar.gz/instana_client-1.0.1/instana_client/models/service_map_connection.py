# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceMapConnection(BaseModel):
    """
    A list which indicates which services are consumers and which are providers in the communication chain.
    """ # noqa: E501
    calls: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of calls between the 2 services. Eg: The number of calls from `24558242fdeb52571cfb9fa42f1b334aa65d7e61` service to `3feb3dcd206c166ef2b41c707e0cd38d7cd325aa` service over the mentioned timeframe is `200`.   If no timeframe (`to` and `windowSize` in query paramter) is mentioned, the timeframe is taken as last hour. ")
    error_rate: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The error rate of the calls between the 2 services. Eg: The error rate of calls from `24558242fdeb52571cfb9fa42f1b334aa65d7e61` service to `3feb3dcd206c166ef2b41c707e0cd38d7cd325aa` service over the mentioned timeframe is `0.1`.   The value is between 0 and 1.   If no timeframe (`to` and `windowSize` in query paramter) is mentioned, the timeframe is taken as last hour. ", alias="errorRate")
    var_from: StrictStr = Field(description="The service that initiates a request to another service. It contains a unique service id. Eg: `24558242fdeb52571cfb9fa42f1b334aa65d7e61`. ", alias="from")
    latency: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The mean latency of the calls between the 2 services. Eg: The mean latency of calls from `24558242fdeb52571cfb9fa42f1b334aa65d7e61` service to `3feb3dcd206c166ef2b41c707e0cd38d7cd325aa` service over the mentioned timeframe is `4.46`.   The value is in milliseconds.   If no timeframe (`to` and `windowSize` in query paramter) is mentioned, the timeframe is taken as last hour. ")
    to: StrictStr = Field(description="The service that receives the request sent by the source service. It contains a unique service id. Eg: `3feb3dcd206c166ef2b41c707e0cd38d7cd325aa`. ")
    __properties: ClassVar[List[str]] = ["calls", "errorRate", "from", "latency", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceMapConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceMapConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calls": obj.get("calls"),
            "errorRate": obj.get("errorRate"),
            "from": obj.get("from"),
            "latency": obj.get("latency"),
            "to": obj.get("to")
        })
        return _obj


