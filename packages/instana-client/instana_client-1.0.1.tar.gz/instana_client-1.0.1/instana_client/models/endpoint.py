# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Endpoint(BaseModel):
    """
    Endpoint
    """ # noqa: E501
    entity_type: Optional[StrictStr] = Field(default=None, description="Since, this is a Endpoint, it will be of type `ENDPOINT`.", alias="entityType")
    id: StrictStr = Field(description="Unique ID of the Endpoint. Eg: `NCRq5oYnan5x-PkdTPQwLLUdu5M`.")
    is_synthetic: Optional[StrictBool] = Field(default=None, alias="isSynthetic")
    label: StrictStr = Field(description="Name of the Endpoint. Eg: `GET /api/fetch`.")
    service_id: StrictStr = Field(description="The serviceId this endpoint belongs to.", alias="serviceId")
    synthetic: Optional[StrictBool] = None
    synthetic_type: Optional[StrictStr] = Field(default=None, alias="syntheticType")
    technologies: List[StrictStr] = Field(description="List of technologies: `Eg:[\"springbootApplicationContainer\"]`")
    type: StrictStr = Field(description="The type of the Endpoint.")
    __properties: ClassVar[List[str]] = ["entityType", "id", "isSynthetic", "label", "serviceId", "synthetic", "syntheticType", "technologies", "type"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION', 'SERVICE', 'ENDPOINT']):
            raise ValueError("must be one of enum values ('APPLICATION', 'SERVICE', 'ENDPOINT')")
        return value

    @field_validator('synthetic_type')
    def synthetic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NON_SYNTHETIC', 'SYNTHETIC', 'MIXED']):
            raise ValueError("must be one of enum values ('NON_SYNTHETIC', 'SYNTHETIC', 'MIXED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNDEFINED', 'RPC', 'EVENT', 'GRAPHQL', 'BATCH', 'SHELL', 'HTTP', 'SDK', 'OPENTELEMETRY', 'INTERNAL', 'DATABASE', 'MESSAGING', 'PAGE', 'PAGE_RESOURCE']):
            raise ValueError("must be one of enum values ('UNDEFINED', 'RPC', 'EVENT', 'GRAPHQL', 'BATCH', 'SHELL', 'HTTP', 'SDK', 'OPENTELEMETRY', 'INTERNAL', 'DATABASE', 'MESSAGING', 'PAGE', 'PAGE_RESOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityType": obj.get("entityType"),
            "id": obj.get("id"),
            "isSynthetic": obj.get("isSynthetic"),
            "label": obj.get("label"),
            "serviceId": obj.get("serviceId"),
            "synthetic": obj.get("synthetic"),
            "syntheticType": obj.get("syntheticType"),
            "technologies": obj.get("technologies"),
            "type": obj.get("type")
        })
        return _obj


