# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from instana_client.models.addition import Addition
    from instana_client.models.division import Division
    from instana_client.models.multiplication import Multiplication
    from instana_client.models.subtraction import Subtraction

class ArithmeticOperation(BaseModel):
    """
    ArithmeticOperation
    """ # noqa: E501
    left: ArithmeticOperand
    operator: StrictStr
    right: ArithmeticOperand
    __properties: ClassVar[List[str]] = ["left", "operator", "right"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'operator'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ADDITION': 'Addition','DIVISION': 'Division','MULTIPLICATION': 'Multiplication','SUBTRACTION': 'Subtraction'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Addition, Division, Multiplication, Subtraction]]:
        """Create an instance of ArithmeticOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of left
        if self.left:
            _dict['left'] = self.left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of right
        if self.right:
            _dict['right'] = self.right.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Addition, Division, Multiplication, Subtraction]]:
        """Create an instance of ArithmeticOperation from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'Addition':
            return import_module("instana_client.models.addition").Addition.from_dict(obj)
        if object_type ==  'Division':
            return import_module("instana_client.models.division").Division.from_dict(obj)
        if object_type ==  'Multiplication':
            return import_module("instana_client.models.multiplication").Multiplication.from_dict(obj)
        if object_type ==  'Subtraction':
            return import_module("instana_client.models.subtraction").Subtraction.from_dict(obj)

        raise ValueError("ArithmeticOperation failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from instana_client.models.arithmetic_operand import ArithmeticOperand
# TODO: Rewrite to not use raise_errors
ArithmeticOperation.model_rebuild(raise_errors=False)

