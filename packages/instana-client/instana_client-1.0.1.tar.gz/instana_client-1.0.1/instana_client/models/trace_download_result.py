# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.adjusted_timeframe import AdjustedTimeframe
from instana_client.models.get_trace_download_result_item import GetTraceDownloadResultItem
from typing import Optional, Set
from typing_extensions import Self

class TraceDownloadResult(BaseModel):
    """
    TraceDownloadResult
    """ # noqa: E501
    adjusted_timeframe: Optional[AdjustedTimeframe] = Field(default=None, alias="adjustedTimeframe")
    can_load_more: Optional[StrictBool] = Field(default=None, description="Determine if additional data is available when a new query is made using the cursor from the last item in the `items` list.", alias="canLoadMore")
    items: List[GetTraceDownloadResultItem] = Field(description="Represents an array of call group item containing several attributes that describe its properties. The item includes fields such as cursor, metrics, name, and timestamp, which provide detailed information about the item. ")
    total_hits: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The total number of items that match a given filter", alias="totalHits")
    total_represented_item_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="For calls and EUM beacons, one row can represent multiple real items (batched call, sample multiplicity)", alias="totalRepresentedItemCount")
    total_retained_item_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="For calls and EUM beacons, only a subset is retained for historic data. Each retained row can represent multiple real items due to batching.", alias="totalRetainedItemCount")
    __properties: ClassVar[List[str]] = ["adjustedTimeframe", "canLoadMore", "items", "totalHits", "totalRepresentedItemCount", "totalRetainedItemCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TraceDownloadResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjusted_timeframe
        if self.adjusted_timeframe:
            _dict['adjustedTimeframe'] = self.adjusted_timeframe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TraceDownloadResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustedTimeframe": AdjustedTimeframe.from_dict(obj["adjustedTimeframe"]) if obj.get("adjustedTimeframe") is not None else None,
            "canLoadMore": obj.get("canLoadMore"),
            "items": [GetTraceDownloadResultItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "totalHits": obj.get("totalHits"),
            "totalRepresentedItemCount": obj.get("totalRepresentedItemCount"),
            "totalRetainedItemCount": obj.get("totalRetainedItemCount")
        })
        return _obj


