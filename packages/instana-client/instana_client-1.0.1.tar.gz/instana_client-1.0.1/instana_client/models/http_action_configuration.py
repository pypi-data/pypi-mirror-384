# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.synthetic_type_configuration import SyntheticTypeConfiguration
from typing import Optional, Set
from typing_extensions import Self

class HttpActionConfiguration(SyntheticTypeConfiguration):
    """
    HttpActionConfiguration
    """ # noqa: E501
    allow_insecure: Optional[StrictBool] = Field(default=None, alias="allowInsecure")
    body: Optional[StrictStr] = None
    expect_exists: Optional[List[StrictStr]] = Field(default=None, alias="expectExists")
    expect_json: Optional[Dict[str, Any]] = Field(default=None, alias="expectJson")
    expect_match: Optional[StrictStr] = Field(default=None, alias="expectMatch")
    expect_not_empty: Optional[List[StrictStr]] = Field(default=None, alias="expectNotEmpty")
    expect_status: Optional[StrictInt] = Field(default=None, alias="expectStatus")
    follow_redirect: Optional[StrictBool] = Field(default=None, alias="followRedirect")
    headers: Optional[Dict[str, StrictStr]] = None
    operation: Optional[StrictStr] = None
    url: Annotated[str, Field(min_length=0, strict=True, max_length=2047)]
    validation_string: Optional[StrictStr] = Field(default=None, alias="validationString")
    __properties: ClassVar[List[str]] = ["markSyntheticCall", "retries", "retryInterval", "syntheticType", "timeout", "allowInsecure", "body", "expectExists", "expectJson", "expectMatch", "expectNotEmpty", "expectStatus", "followRedirect", "headers", "operation", "url", "validationString"]

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT']):
            raise ValueError("must be one of enum values ('DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpActionConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpActionConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "markSyntheticCall": obj.get("markSyntheticCall"),
            "retries": obj.get("retries"),
            "retryInterval": obj.get("retryInterval"),
            "syntheticType": obj.get("syntheticType"),
            "timeout": obj.get("timeout"),
            "allowInsecure": obj.get("allowInsecure"),
            "body": obj.get("body"),
            "expectExists": obj.get("expectExists"),
            "expectJson": obj.get("expectJson"),
            "expectMatch": obj.get("expectMatch"),
            "expectNotEmpty": obj.get("expectNotEmpty"),
            "expectStatus": obj.get("expectStatus"),
            "followRedirect": obj.get("followRedirect"),
            "headers": obj.get("headers"),
            "operation": obj.get("operation"),
            "url": obj.get("url"),
            "validationString": obj.get("validationString")
        })
        return _obj


