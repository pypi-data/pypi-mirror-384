# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Tag(BaseModel):
    """
    List of queryable tags available in a tagTree. Eg: `call.erroneous`. Consider these tags as attributes of a tagTree. Eg: `Call` tagTree has have `Erroneous`, `Call name`, `Latency` etc as attributes. 
    """ # noqa: E501
    aliases: Optional[List[StrictStr]] = Field(default=None, description="List of other names that can refer to this tag ")
    availability: Optional[List[StrictStr]] = Field(default=None, description="List of product areas this tag is available in ")
    can_apply_to_destination: Optional[StrictBool] = Field(default=None, description="Whether the tag is available for destination or not. If source and destination is false, it means the tag is independent of source and destination. Eg: of such tag is `call.http.path`. ", alias="canApplyToDestination")
    can_apply_to_source: Optional[StrictBool] = Field(default=None, description="Whether the tag is available for source or not. If source and destination is false, it means the tag is independent of source and destination. Eg: of such tag is `call.http.path`. ", alias="canApplyToSource")
    description: Optional[StrictStr] = Field(default=None, description="The description of the tag if it is provided.")
    id_tag: Optional[StrictBool] = Field(default=None, description="Whether the Tag is a unique ID or not. Eg: `idTag` for `endpoint.id` is true but for `call.rpc.method` it is false. ", alias="idTag")
    label: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="The name of the tag which is seen in the UI. Eg: `Call name`")
    name: StrictStr = Field(description="The name of the tag. Eg: `call.name`")
    type: StrictStr = Field(description="The data type of the tag. Eg: `call.name` accepts `STRING` value.")
    __properties: ClassVar[List[str]] = ["aliases", "availability", "canApplyToDestination", "canApplyToSource", "description", "idTag", "label", "name", "type"]

    @field_validator('availability')
    def availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['INFRASTRUCTURE_METRICS', 'APPLICATION', 'WEBSITE', 'MOBILE_APP', 'EUM', 'EUM_IMPACTED_BEACON', 'EVENT', 'SLI', 'SLO', 'SLO_PREVIEW', 'USAGE', 'LOG', 'SYNTHETICS', 'SYNTHETICS_DETAIL', 'APDEX', 'BIZOPS', 'BUSINESS_METRICS', 'SUBTRACE', 'UNKNOWN']):
                raise ValueError("each list item must be one of ('INFRASTRUCTURE_METRICS', 'APPLICATION', 'WEBSITE', 'MOBILE_APP', 'EUM', 'EUM_IMPACTED_BEACON', 'EVENT', 'SLI', 'SLO', 'SLO_PREVIEW', 'USAGE', 'LOG', 'SYNTHETICS', 'SYNTHETICS_DETAIL', 'APDEX', 'BIZOPS', 'BUSINESS_METRICS', 'SUBTRACE', 'UNKNOWN')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BOOLEAN', 'STRING', 'NUMBER', 'STRING_SET', 'STRING_LIST', 'KEY_VALUE_PAIR', 'FLOAT_LIST', 'KEY_NUMBER_PAIR']):
            raise ValueError("must be one of enum values ('BOOLEAN', 'STRING', 'NUMBER', 'STRING_SET', 'STRING_LIST', 'KEY_VALUE_PAIR', 'FLOAT_LIST', 'KEY_NUMBER_PAIR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliases": obj.get("aliases"),
            "availability": obj.get("availability"),
            "canApplyToDestination": obj.get("canApplyToDestination"),
            "canApplyToSource": obj.get("canApplyToSource"),
            "description": obj.get("description"),
            "idTag": obj.get("idTag"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj


