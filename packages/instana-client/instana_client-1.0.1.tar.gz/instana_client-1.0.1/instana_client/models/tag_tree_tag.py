# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.tag_tree_node import TagTreeNode
from typing import Optional, Set
from typing_extensions import Self

class TagTreeTag(TagTreeNode):
    """
    TagTreeTag
    """ # noqa: E501
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = None
    hidden: Optional[StrictBool] = Field(default=None, description="If true, the tag will not be available for query in Unbounded Analytics.")
    icon: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = None
    label: Annotated[str, Field(min_length=0, strict=True, max_length=128)] = Field(description="The name of the tagTreeNode. Eg: `Call Error Message`, `Endpoint Name`.")
    queryable: Optional[StrictBool] = Field(default=None, description="queryable property can have 3 states which will be reflected in the drop down list in `Query Builder` of `Unbounded Analytics` of Instana UI:    - true: the tag has been seen by IBM Instana and must be shown.    - false: the tag could have been processed, but has not been seen by IBM Instana and could be hidden.    - null: the tag has not been processed and should be shown. The purpose is to make it easier for customers to find the right tags in drop down list ")
    score_boost: Optional[StrictInt] = Field(default=None, description="By default it is `null` if it is not set explictily by IBM Instana. The purpose of this parameter is to rank the Tag. For eg: tags are frequently used within the tagTree For eg, assume there are 8 tags under `Commonly Used`. IBM Instana can set the ranking for each of these tags within `Commonly Used`. Higher the scoreBoost, higher the ranking. ", alias="scoreBoost")
    tag_name: Annotated[str, Field(min_length=0, strict=True, max_length=128)] = Field(alias="tagName")
    __properties: ClassVar[List[str]] = ["icon", "label", "type", "description", "hidden", "queryable", "scoreBoost", "tagName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TagTreeTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TagTreeTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "icon": obj.get("icon"),
            "label": obj.get("label"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "hidden": obj.get("hidden"),
            "queryable": obj.get("queryable"),
            "scoreBoost": obj.get("scoreBoost"),
            "tagName": obj.get("tagName")
        })
        return _obj


