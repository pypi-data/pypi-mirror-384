# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.time_frame import TimeFrame
from typing import Optional, Set
from typing_extensions import Self

class GetCombinedMetrics(BaseModel):
    """
    GetCombinedMetrics
    """ # noqa: E501
    metrics: Annotated[List[StrictStr], Field(min_length=1, max_length=5)] = Field(description="Id of the exact metric you want to retrieve, eg. \"cpu.user\", \"clientrequests.read.mean\"")
    plugin: StrictStr = Field(description="Plugin name")
    query: Optional[StrictStr] = Field(default=None, description="Dynamic Focus Query")
    rollup: Optional[StrictInt] = Field(default=None, description="Rollup value in seconds")
    snapshot_ids: Optional[Annotated[List[StrictStr], Field(min_length=1, max_length=30)]] = Field(default=None, description="Unique identifier the metrics are assigned to", alias="snapshotIds")
    time_frame: Optional[TimeFrame] = Field(default=None, alias="timeFrame")
    __properties: ClassVar[List[str]] = ["metrics", "plugin", "query", "rollup", "snapshotIds", "timeFrame"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCombinedMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_frame
        if self.time_frame:
            _dict['timeFrame'] = self.time_frame.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCombinedMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metrics": obj.get("metrics"),
            "plugin": obj.get("plugin"),
            "query": obj.get("query"),
            "rollup": obj.get("rollup"),
            "snapshotIds": obj.get("snapshotIds"),
            "timeFrame": TimeFrame.from_dict(obj["timeFrame"]) if obj.get("timeFrame") is not None else None
        })
        return _obj


