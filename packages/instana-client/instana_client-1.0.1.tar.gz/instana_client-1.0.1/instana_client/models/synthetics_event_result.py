# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.event_result import EventResult
from typing import Optional, Set
from typing_extensions import Self

class SyntheticsEventResult(EventResult):
    """
    SyntheticsEventResult
    """ # noqa: E501
    location_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of the locations.", alias="locationIds")
    synthetic_test_id: Optional[StrictStr] = Field(default=None, description="ID of the synthetic test.", alias="syntheticTestId")
    __properties: ClassVar[List[str]] = ["detail", "end", "entityLabel", "entityName", "entityType", "eventId", "eventSpecificationId", "fixSuggestion", "metrics", "probableCause", "problem", "recentEvents", "severity", "snapshotId", "start", "state", "type", "locationIds", "syntheticTestId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyntheticsEventResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyntheticsEventResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detail": obj.get("detail"),
            "end": obj.get("end"),
            "entityLabel": obj.get("entityLabel"),
            "entityName": obj.get("entityName"),
            "entityType": obj.get("entityType"),
            "eventId": obj.get("eventId"),
            "eventSpecificationId": obj.get("eventSpecificationId"),
            "fixSuggestion": obj.get("fixSuggestion"),
            "metrics": obj.get("metrics"),
            "probableCause": obj.get("probableCause"),
            "problem": obj.get("problem"),
            "recentEvents": obj.get("recentEvents"),
            "severity": obj.get("severity"),
            "snapshotId": obj.get("snapshotId"),
            "start": obj.get("start"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "locationIds": obj.get("locationIds"),
            "syntheticTestId": obj.get("syntheticTestId")
        })
        return _obj


