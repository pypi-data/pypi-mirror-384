# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from instana_client.models.synthetic_datacenter_configuration import SyntheticDatacenterConfiguration
from typing import Optional, Set
from typing_extensions import Self

class SyntheticDatacenter(BaseModel):
    """
    SyntheticDatacenter
    """ # noqa: E501
    city_name: StrictStr = Field(alias="cityName")
    code: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    configuration: Optional[SyntheticDatacenterConfiguration] = None
    country_name: StrictStr = Field(alias="countryName")
    datacenter_id: Optional[StrictStr] = Field(default=None, alias="datacenterId")
    expected_active_at: Optional[StrictInt] = Field(default=None, alias="expectedActiveAt")
    label: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    location_label: Optional[StrictStr] = Field(default=None, alias="locationLabel")
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    modified_at: Optional[StrictInt] = Field(default=None, alias="modifiedAt")
    provider: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cityName", "code", "configuration", "countryName", "datacenterId", "expectedActiveAt", "label", "latitude", "locationLabel", "longitude", "modifiedAt", "provider", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyntheticDatacenter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyntheticDatacenter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cityName": obj.get("cityName"),
            "code": obj.get("code"),
            "configuration": SyntheticDatacenterConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "countryName": obj.get("countryName"),
            "datacenterId": obj.get("datacenterId"),
            "expectedActiveAt": obj.get("expectedActiveAt"),
            "label": obj.get("label"),
            "latitude": obj.get("latitude"),
            "locationLabel": obj.get("locationLabel"),
            "longitude": obj.get("longitude"),
            "modifiedAt": obj.get("modifiedAt"),
            "provider": obj.get("provider"),
            "status": obj.get("status")
        })
        return _obj


