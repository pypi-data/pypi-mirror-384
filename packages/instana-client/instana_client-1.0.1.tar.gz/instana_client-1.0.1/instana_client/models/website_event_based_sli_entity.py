# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.sli_entity import SliEntity
from instana_client.models.tag_filter_expression_element import TagFilterExpressionElement
from typing import Optional, Set
from typing_extensions import Self

class WebsiteEventBasedSliEntity(SliEntity):
    """
    WebsiteEventBasedSliEntity
    """ # noqa: E501
    bad_event_filter_expression: TagFilterExpressionElement = Field(alias="badEventFilterExpression")
    beacon_type: StrictStr = Field(description="Enum value to specify the type of beacons to be monitored", alias="beaconType")
    good_event_filter_expression: TagFilterExpressionElement = Field(alias="goodEventFilterExpression")
    website_id: Optional[StrictStr] = Field(default=None, description="Specifies the ID of the Website", alias="websiteId")
    __properties: ClassVar[List[str]] = ["sliType", "badEventFilterExpression", "beaconType", "goodEventFilterExpression", "websiteId"]

    @field_validator('beacon_type')
    def beacon_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pageLoad', 'resourceLoad', 'httpRequest', 'error', 'custom', 'pageChange']):
            raise ValueError("must be one of enum values ('pageLoad', 'resourceLoad', 'httpRequest', 'error', 'custom', 'pageChange')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebsiteEventBasedSliEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bad_event_filter_expression
        if self.bad_event_filter_expression:
            _dict['badEventFilterExpression'] = self.bad_event_filter_expression.to_dict()
        # override the default output from pydantic by calling `to_dict()` of good_event_filter_expression
        if self.good_event_filter_expression:
            _dict['goodEventFilterExpression'] = self.good_event_filter_expression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebsiteEventBasedSliEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sliType": obj.get("sliType"),
            "badEventFilterExpression": TagFilterExpressionElement.from_dict(obj["badEventFilterExpression"]) if obj.get("badEventFilterExpression") is not None else None,
            "beaconType": obj.get("beaconType"),
            "goodEventFilterExpression": TagFilterExpressionElement.from_dict(obj["goodEventFilterExpression"]) if obj.get("goodEventFilterExpression") is not None else None,
            "websiteId": obj.get("websiteId")
        })
        return _obj


