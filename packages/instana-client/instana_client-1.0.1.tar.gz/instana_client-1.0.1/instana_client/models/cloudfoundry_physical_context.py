# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.snapshot_preview import SnapshotPreview
from typing import Optional, Set
from typing_extensions import Self

class CloudfoundryPhysicalContext(BaseModel):
    """
    Contains physical context of Cloudfoundry. It contains the following information: 1. `application`: Application running within Cloud Foundry environment. 2. `cfInstanceIndex`: A unique ID of the container created and managed by Garden in the Cloud Foundry environment. 3. `organization`: Organization in the Cloud Foundry environment. 4. `space`: Space within an organization in Cloud Foundry environment. 
    """ # noqa: E501
    application: Optional[SnapshotPreview] = None
    cf_instance_index: Optional[StrictStr] = Field(default=None, description="A unique ID of the container created and managed by Garden in the Cloud Foundry environment.", alias="cfInstanceIndex")
    organization: Optional[SnapshotPreview] = None
    space: Optional[SnapshotPreview] = None
    __properties: ClassVar[List[str]] = ["application", "cfInstanceIndex", "organization", "space"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudfoundryPhysicalContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space:
            _dict['space'] = self.space.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudfoundryPhysicalContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": SnapshotPreview.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "cfInstanceIndex": obj.get("cfInstanceIndex"),
            "organization": SnapshotPreview.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "space": SnapshotPreview.from_dict(obj["space"]) if obj.get("space") is not None else None
        })
        return _obj


