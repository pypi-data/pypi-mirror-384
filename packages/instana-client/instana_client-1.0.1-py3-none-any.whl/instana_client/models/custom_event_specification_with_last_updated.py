# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.abstract_rule import AbstractRule
from instana_client.models.action import Action
from typing import Optional, Set
from typing_extensions import Self

class CustomEventSpecificationWithLastUpdated(BaseModel):
    """
    CustomEventSpecificationWithLastUpdated
    """ # noqa: E501
    actions: Optional[List[Action]] = None
    application_alert_config_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, alias="applicationAlertConfigId")
    deleted: Optional[StrictBool] = None
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=32765)]] = None
    enabled: Optional[StrictBool] = None
    entity_type: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(alias="entityType")
    expiration_time: Optional[StrictInt] = Field(default=None, alias="expirationTime")
    id: Annotated[str, Field(min_length=0, strict=True, max_length=64)]
    last_updated: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="lastUpdated")
    migrated: Optional[StrictBool] = None
    name: Annotated[str, Field(min_length=0, strict=True, max_length=256)]
    query: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]] = None
    rule_logical_operator: Optional[StrictStr] = Field(default=None, description="Set AND / OR", alias="ruleLogicalOperator")
    rules: Annotated[List[AbstractRule], Field(min_length=1, max_length=5)]
    transient_event_alert_muted: Optional[StrictBool] = Field(default=None, alias="transientEventAlertMuted")
    transient_event_enabled: Optional[StrictBool] = Field(default=None, alias="transientEventEnabled")
    transient_event_threshold: Optional[StrictInt] = Field(default=None, alias="transientEventThreshold")
    triggering: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["actions", "applicationAlertConfigId", "deleted", "description", "enabled", "entityType", "expirationTime", "id", "lastUpdated", "migrated", "name", "query", "ruleLogicalOperator", "rules", "transientEventAlertMuted", "transientEventEnabled", "transientEventThreshold", "triggering"]

    @field_validator('rule_logical_operator')
    def rule_logical_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomEventSpecificationWithLastUpdated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomEventSpecificationWithLastUpdated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "applicationAlertConfigId": obj.get("applicationAlertConfigId"),
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "entityType": obj.get("entityType"),
            "expirationTime": obj.get("expirationTime"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "migrated": obj.get("migrated"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "ruleLogicalOperator": obj.get("ruleLogicalOperator"),
            "rules": [AbstractRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "transientEventAlertMuted": obj.get("transientEventAlertMuted"),
            "transientEventEnabled": obj.get("transientEventEnabled"),
            "transientEventThreshold": obj.get("transientEventThreshold"),
            "triggering": obj.get("triggering")
        })
        return _obj


