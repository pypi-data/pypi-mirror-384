# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from instana_client.models.geo_subdivision import GeoSubdivision
from typing import Optional, Set
from typing_extensions import Self

class GeoMappingRule(BaseModel):
    """
    GeoMappingRule
    """ # noqa: E501
    accuracy_radius: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=None, alias="accuracyRadius")
    cidr: Annotated[str, Field(min_length=0, strict=True, max_length=128)]
    city: Optional[StrictStr] = None
    continent: Optional[StrictStr] = None
    continent_code: Optional[StrictStr] = Field(default=None, alias="continentCode")
    country: Optional[StrictStr] = None
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    least_specific_subdivision: Optional[GeoSubdivision] = Field(default=None, alias="leastSpecificSubdivision")
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    subdivisions: Annotated[List[GeoSubdivision], Field(min_length=0, max_length=8)]
    __properties: ClassVar[List[str]] = ["accuracyRadius", "cidr", "city", "continent", "continentCode", "country", "countryCode", "latitude", "leastSpecificSubdivision", "longitude", "subdivisions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeoMappingRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of least_specific_subdivision
        if self.least_specific_subdivision:
            _dict['leastSpecificSubdivision'] = self.least_specific_subdivision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subdivisions (list)
        _items = []
        if self.subdivisions:
            for _item_subdivisions in self.subdivisions:
                if _item_subdivisions:
                    _items.append(_item_subdivisions.to_dict())
            _dict['subdivisions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeoMappingRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accuracyRadius": obj.get("accuracyRadius"),
            "cidr": obj.get("cidr"),
            "city": obj.get("city"),
            "continent": obj.get("continent"),
            "continentCode": obj.get("continentCode"),
            "country": obj.get("country"),
            "countryCode": obj.get("countryCode"),
            "latitude": obj.get("latitude"),
            "leastSpecificSubdivision": GeoSubdivision.from_dict(obj["leastSpecificSubdivision"]) if obj.get("leastSpecificSubdivision") is not None else None,
            "longitude": obj.get("longitude"),
            "subdivisions": [GeoSubdivision.from_dict(_item) for _item in obj["subdivisions"]] if obj.get("subdivisions") is not None else None
        })
        return _obj


