# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetricsTestResultItem(BaseModel):
    """
    A description of the Synthetic test associated with the result item.  This information will be included if the request was grouped by synthetic.testId or if includeAggregatedTestId was true on the request.
    """ # noqa: E501
    application_id: Optional[StrictStr] = Field(default=None, description="An identifier of an application associated with the Synthetic test.  This field is deprecated and will be replace by the applicationIds field.", alias="applicationId")
    application_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of the applications associated with the Synthetic test.", alias="applicationIds")
    location_id: Optional[List[StrictStr]] = Field(default=None, description="A list of the locations associated with the Synthetic test.", alias="locationId")
    mobile_application_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of the mobile applications associated with the Synthetic test.", alias="mobileApplicationIds")
    service_id: Optional[StrictStr] = Field(default=None, description="A service associated with the Synthetic test.", alias="serviceId")
    test_id: StrictStr = Field(description="The testId for the Synthetic test.", alias="testId")
    test_name: Optional[StrictStr] = Field(default=None, description="The Synthetic test's name.", alias="testName")
    website_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of the websites associated with the Synthetic test.", alias="websiteIds")
    __properties: ClassVar[List[str]] = ["applicationId", "applicationIds", "locationId", "mobileApplicationIds", "serviceId", "testId", "testName", "websiteIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricsTestResultItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricsTestResultItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationId": obj.get("applicationId"),
            "applicationIds": obj.get("applicationIds"),
            "locationId": obj.get("locationId"),
            "mobileApplicationIds": obj.get("mobileApplicationIds"),
            "serviceId": obj.get("serviceId"),
            "testId": obj.get("testId"),
            "testName": obj.get("testName"),
            "websiteIds": obj.get("websiteIds")
        })
        return _obj


