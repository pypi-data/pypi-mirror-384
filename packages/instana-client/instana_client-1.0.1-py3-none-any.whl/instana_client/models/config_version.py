# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from instana_client.models.change_summary import ChangeSummary
from typing import Optional, Set
from typing_extensions import Self

class ConfigVersion(BaseModel):
    """
    ConfigVersion
    """ # noqa: E501
    change_summary: Optional[ChangeSummary] = Field(default=None, alias="changeSummary")
    created: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Unix timestamp representing the creation time of this revision.")
    deleted: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether or not the configuration was deleted.")
    enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether or not the configuration is enabled.")
    id: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="ID of this configuration version.")
    __properties: ClassVar[List[str]] = ["changeSummary", "created", "deleted", "enabled", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_summary
        if self.change_summary:
            _dict['changeSummary'] = self.change_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeSummary": ChangeSummary.from_dict(obj["changeSummary"]) if obj.get("changeSummary") is not None else None,
            "created": obj.get("created"),
            "deleted": obj.get("deleted"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id")
        })
        return _obj


