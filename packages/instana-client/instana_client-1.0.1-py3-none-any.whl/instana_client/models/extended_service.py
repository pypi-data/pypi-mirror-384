# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ExtendedService(BaseModel):
    """
    List of services in the topology.
    """ # noqa: E501
    applications: List[StrictStr]
    entity_type: Optional[StrictStr] = Field(default=None, description="Since, this is a Service, it will be of type `SERVICE`.", alias="entityType")
    id: StrictStr = Field(description="Unique ID of the Service. Eg: `3feb3dcd206c166ef2b41c707e0cd38d7cd325aa`.")
    label: StrictStr = Field(description="Name of the Service. Eg: `payment`.")
    max_severity: Optional[Union[Annotated[float, Field(le=10, strict=True, ge=0)], Annotated[int, Field(le=10, strict=True, ge=0)]]] = Field(default=None, alias="maxSeverity")
    number_of_open_issues: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="numberOfOpenIssues")
    snapshot_ids: List[StrictStr] = Field(description="A unique identifier the metrics are assigned to.", alias="snapshotIds")
    technologies: List[StrictStr] = Field(description="List of technologies: `Eg:[\"springbootApplicationContainer\"]`")
    types: List[StrictStr] = Field(description="Shows types of Endpoints a Service can consist of. It may be one or more. Eg: `HTTP` `OPENTELEMETRY` can be in 1 Service.")
    __properties: ClassVar[List[str]] = ["applications", "entityType", "id", "label", "maxSeverity", "numberOfOpenIssues", "snapshotIds", "technologies", "types"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPLICATION', 'SERVICE', 'ENDPOINT']):
            raise ValueError("must be one of enum values ('APPLICATION', 'SERVICE', 'ENDPOINT')")
        return value

    @field_validator('types')
    def types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['UNDEFINED', 'RPC', 'EVENT', 'GRAPHQL', 'BATCH', 'SHELL', 'HTTP', 'SDK', 'OPENTELEMETRY', 'INTERNAL', 'DATABASE', 'MESSAGING', 'PAGE', 'PAGE_RESOURCE']):
                raise ValueError("each list item must be one of ('UNDEFINED', 'RPC', 'EVENT', 'GRAPHQL', 'BATCH', 'SHELL', 'HTTP', 'SDK', 'OPENTELEMETRY', 'INTERNAL', 'DATABASE', 'MESSAGING', 'PAGE', 'PAGE_RESOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applications": obj.get("applications"),
            "entityType": obj.get("entityType"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "maxSeverity": obj.get("maxSeverity"),
            "numberOfOpenIssues": obj.get("numberOfOpenIssues"),
            "snapshotIds": obj.get("snapshotIds"),
            "technologies": obj.get("technologies"),
            "types": obj.get("types")
        })
        return _obj


