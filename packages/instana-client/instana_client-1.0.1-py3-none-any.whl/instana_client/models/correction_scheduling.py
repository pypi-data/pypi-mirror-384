# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CorrectionScheduling(BaseModel):
    """
    Time scheduling of the SLO Correction Window configurations.
    """ # noqa: E501
    duration: StrictInt = Field(description="Duration of the correction window, defined by the count of time units.")
    duration_unit: StrictStr = Field(description="Unit for duration. Supported values: `MINUTE`, `HOUR`, `DAY`.", alias="durationUnit")
    recurrent: Optional[StrictBool] = None
    recurrent_rule: Optional[StrictStr] = Field(default=None, description="Recurrence Rule defines how the event recurs, using iCalendar RRULE format (e.g., `FREQ=DAILY;INTERVAL=1`).It supports fields like FREQ, INTERVAL, BYDAY, etc. Refer to RFC 5545: https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10", alias="recurrentRule")
    start_time: datetime = Field(description="Start time of the correction window in milliseconds since epoch (UTC) (e.g., `1706713140000`).", alias="startTime")
    __properties: ClassVar[List[str]] = ["duration", "durationUnit", "recurrent", "recurrentRule", "startTime"]

    @field_validator('duration_unit')
    def duration_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month']):
            raise ValueError("must be one of enum values ('millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorrectionScheduling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorrectionScheduling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "durationUnit": obj.get("durationUnit"),
            "recurrent": obj.get("recurrent"),
            "recurrentRule": obj.get("recurrentRule"),
            "startTime": obj.get("startTime")
        })
        return _obj


