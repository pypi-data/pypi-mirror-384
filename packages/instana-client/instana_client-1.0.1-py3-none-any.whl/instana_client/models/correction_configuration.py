# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.correction_scheduling import CorrectionScheduling
from typing import Optional, Set
from typing_extensions import Self

class CorrectionConfiguration(BaseModel):
    """
    CorrectionConfiguration
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="If value is true, then the correction window is active")
    created_date: Optional[datetime] = Field(default=None, description="Created date of SLO Correction Window Configuration", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="Description of the SLO Correction Window Configuration")
    id: Optional[StrictStr] = Field(default=None, description="SLO Correction Window Configuration ID")
    last_updated: Optional[datetime] = Field(default=None, description="Last updated date of SLO Correction Window Configuration", alias="lastUpdated")
    name: StrictStr = Field(description="Name of the SLO Correction Window Configuration")
    scheduling: CorrectionScheduling
    slo_ids: List[StrictStr] = Field(description="This is the list of SLO configurations related to this Correction Window.", alias="sloIds")
    tags: List[StrictStr] = Field(description="List of tags associated with SLO Correction Window Configuration")
    __properties: ClassVar[List[str]] = ["active", "createdDate", "description", "id", "lastUpdated", "name", "scheduling", "sloIds", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorrectionConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scheduling
        if self.scheduling:
            _dict['scheduling'] = self.scheduling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorrectionConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "name": obj.get("name"),
            "scheduling": CorrectionScheduling.from_dict(obj["scheduling"]) if obj.get("scheduling") is not None else None,
            "sloIds": obj.get("sloIds"),
            "tags": obj.get("tags")
        })
        return _obj


