# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from instana_client.models.browser_script_configuration import BrowserScriptConfiguration
    from instana_client.models.dns_configuration import DNSConfiguration
    from instana_client.models.http_action_configuration import HttpActionConfiguration
    from instana_client.models.http_script_configuration import HttpScriptConfiguration
    from instana_client.models.empty_configuration import EmptyConfiguration
    from instana_client.models.ssl_certificate_configuration import SSLCertificateConfiguration
    from instana_client.models.webpage_action_configuration import WebpageActionConfiguration
    from instana_client.models.webpage_script_configuration import WebpageScriptConfiguration

class SyntheticTypeConfiguration(BaseModel):
    """
    Synthetic test configuration that is unique to a synthetic type. Valid types are BrowserScript, DNS, HTTPAction, HTTPScript, SSLCertificate, WebpageAction, and WebpageScript.
    """ # noqa: E501
    mark_synthetic_call: StrictBool = Field(alias="markSyntheticCall")
    retries: Optional[Annotated[int, Field(le=2, strict=True, ge=0)]] = None
    retry_interval: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=None, alias="retryInterval")
    synthetic_type: StrictStr = Field(alias="syntheticType")
    timeout: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["markSyntheticCall", "retries", "retryInterval", "syntheticType", "timeout"]

    @field_validator('synthetic_type')
    def synthetic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BrowserScript', 'DNS', 'HTTPAction', 'HTTPScript', 'SSLCertificate', 'WebpageAction', 'WebpageScript', 'NotConfigured']):
            raise ValueError("must be one of enum values ('BrowserScript', 'DNS', 'HTTPAction', 'HTTPScript', 'SSLCertificate', 'WebpageAction', 'WebpageScript', 'NotConfigured')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'syntheticType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'BrowserScript': 'BrowserScriptConfiguration','DNS': 'DNSConfiguration','HTTPAction': 'HttpActionConfiguration','HTTPScript': 'HttpScriptConfiguration','NotConfigured': 'EmptyConfiguration','SSLCertificate': 'SSLCertificateConfiguration','WebpageAction': 'WebpageActionConfiguration','WebpageScript': 'WebpageScriptConfiguration'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[BrowserScriptConfiguration, DNSConfiguration, HttpActionConfiguration, HttpScriptConfiguration, EmptyConfiguration, SSLCertificateConfiguration, WebpageActionConfiguration, WebpageScriptConfiguration]]:
        """Create an instance of SyntheticTypeConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[BrowserScriptConfiguration, DNSConfiguration, HttpActionConfiguration, HttpScriptConfiguration, EmptyConfiguration, SSLCertificateConfiguration, WebpageActionConfiguration, WebpageScriptConfiguration]]:
        """Create an instance of SyntheticTypeConfiguration from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'BrowserScriptConfiguration':
            return import_module("instana_client.models.browser_script_configuration").BrowserScriptConfiguration.from_dict(obj)
        if object_type ==  'DNSConfiguration':
            return import_module("instana_client.models.dns_configuration").DNSConfiguration.from_dict(obj)
        if object_type ==  'HttpActionConfiguration':
            return import_module("instana_client.models.http_action_configuration").HttpActionConfiguration.from_dict(obj)
        if object_type ==  'HttpScriptConfiguration':
            return import_module("instana_client.models.http_script_configuration").HttpScriptConfiguration.from_dict(obj)
        if object_type ==  'EmptyConfiguration':
            return import_module("instana_client.models.empty_configuration").EmptyConfiguration.from_dict(obj)
        if object_type ==  'SSLCertificateConfiguration':
            return import_module("instana_client.models.ssl_certificate_configuration").SSLCertificateConfiguration.from_dict(obj)
        if object_type ==  'WebpageActionConfiguration':
            return import_module("instana_client.models.webpage_action_configuration").WebpageActionConfiguration.from_dict(obj)
        if object_type ==  'WebpageScriptConfiguration':
            return import_module("instana_client.models.webpage_script_configuration").WebpageScriptConfiguration.from_dict(obj)

        raise ValueError("SyntheticTypeConfiguration failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


