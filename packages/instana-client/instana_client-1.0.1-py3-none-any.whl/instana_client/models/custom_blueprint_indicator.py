# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.service_level_indicator import ServiceLevelIndicator
from instana_client.models.tag_filter_expression_element import TagFilterExpressionElement
from typing import Optional, Set
from typing_extensions import Self

class CustomBlueprintIndicator(ServiceLevelIndicator):
    """
    CustomBlueprintIndicator
    """ # noqa: E501
    bad_event_infra_metric: Optional[StrictStr] = Field(default=None, alias="badEventInfraMetric")
    bad_events_filter: Optional[TagFilterExpressionElement] = Field(default=None, alias="badEventsFilter")
    good_event_infra_metric: Optional[StrictStr] = Field(default=None, alias="goodEventInfraMetric")
    good_events_filter: TagFilterExpressionElement = Field(alias="goodEventsFilter")
    __properties: ClassVar[List[str]] = ["aggregation", "blueprint", "operator", "serviceLevelsMeasurement", "threshold", "type", "badEventInfraMetric", "badEventsFilter", "goodEventInfraMetric", "goodEventsFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomBlueprintIndicator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bad_events_filter
        if self.bad_events_filter:
            _dict['badEventsFilter'] = self.bad_events_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of good_events_filter
        if self.good_events_filter:
            _dict['goodEventsFilter'] = self.good_events_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomBlueprintIndicator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": obj.get("aggregation"),
            "blueprint": obj.get("blueprint"),
            "operator": obj.get("operator"),
            "serviceLevelsMeasurement": obj.get("serviceLevelsMeasurement"),
            "threshold": obj.get("threshold"),
            "type": obj.get("type"),
            "badEventInfraMetric": obj.get("badEventInfraMetric"),
            "badEventsFilter": TagFilterExpressionElement.from_dict(obj["badEventsFilter"]) if obj.get("badEventsFilter") is not None else None,
            "goodEventInfraMetric": obj.get("goodEventInfraMetric"),
            "goodEventsFilter": TagFilterExpressionElement.from_dict(obj["goodEventsFilter"]) if obj.get("goodEventsFilter") is not None else None
        })
        return _obj


