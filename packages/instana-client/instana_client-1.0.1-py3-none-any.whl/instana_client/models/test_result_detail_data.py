# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from instana_client.models.test_result_subtransaction import TestResultSubtransaction
from typing import Optional, Set
from typing_extensions import Self

class TestResultDetailData(BaseModel):
    """
    TestResultDetailData
    """ # noqa: E501
    har: Optional[Dict[str, Dict[str, Any]]] = None
    image_files: Optional[Dict[str, List[Union[StrictBytes, StrictStr]]]] = Field(default=None, alias="imageFiles")
    log_files: Optional[Dict[str, StrictStr]] = Field(default=None, alias="logFiles")
    logs: Optional[StrictStr] = None
    subtransaction_avg_metrics: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="subtransactionAvgMetrics")
    subtransactions: Optional[List[TestResultSubtransaction]] = None
    test_id: Optional[StrictStr] = Field(default=None, alias="testId")
    test_result_id: Optional[StrictStr] = Field(default=None, alias="testResultId")
    videos: Optional[List[Union[StrictBytes, StrictStr]]] = None
    __properties: ClassVar[List[str]] = ["har", "imageFiles", "logFiles", "logs", "subtransactionAvgMetrics", "subtransactions", "testId", "testResultId", "videos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestResultDetailData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subtransactions (list)
        _items = []
        if self.subtransactions:
            for _item_subtransactions in self.subtransactions:
                if _item_subtransactions:
                    _items.append(_item_subtransactions.to_dict())
            _dict['subtransactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestResultDetailData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "har": obj.get("har"),
            "imageFiles": obj.get("imageFiles"),
            "logFiles": obj.get("logFiles"),
            "logs": obj.get("logs"),
            "subtransactionAvgMetrics": obj.get("subtransactionAvgMetrics"),
            "subtransactions": [TestResultSubtransaction.from_dict(_item) for _item in obj["subtransactions"]] if obj.get("subtransactions") is not None else None,
            "testId": obj.get("testId"),
            "testResultId": obj.get("testResultId"),
            "videos": obj.get("videos")
        })
        return _obj


