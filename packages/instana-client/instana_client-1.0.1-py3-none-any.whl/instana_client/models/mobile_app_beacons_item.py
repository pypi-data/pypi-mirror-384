# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.impacted_beacon_info import ImpactedBeaconInfo
from instana_client.models.mobile_app_monitoring_beacon import MobileAppMonitoringBeacon
from typing import Optional, Set
from typing_extensions import Self

class MobileAppBeaconsItem(BaseModel):
    """
    Represents an array of call group item containing several attributes that describe its properties. The item includes fields such as cursor, metrics, name, and timestamp, which provide detailed information about the item. 
    """ # noqa: E501
    beacon: MobileAppMonitoringBeacon
    cursor: Dict[str, Any] = Field(description="Cursor to use between successive queries")
    impacted_beacon_info: Optional[ImpactedBeaconInfo] = Field(default=None, alias="impactedBeaconInfo")
    __properties: ClassVar[List[str]] = ["beacon", "cursor", "impactedBeaconInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MobileAppBeaconsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of beacon
        if self.beacon:
            _dict['beacon'] = self.beacon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of impacted_beacon_info
        if self.impacted_beacon_info:
            _dict['impactedBeaconInfo'] = self.impacted_beacon_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MobileAppBeaconsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beacon": MobileAppMonitoringBeacon.from_dict(obj["beacon"]) if obj.get("beacon") is not None else None,
            "cursor": obj.get("cursor"),
            "impactedBeaconInfo": ImpactedBeaconInfo.from_dict(obj["impactedBeaconInfo"]) if obj.get("impactedBeaconInfo") is not None else None
        })
        return _obj


