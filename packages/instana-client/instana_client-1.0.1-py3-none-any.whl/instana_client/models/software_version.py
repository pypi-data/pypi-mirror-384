# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.software_user import SoftwareUser
from typing import Optional, Set
from typing_extensions import Self

class SoftwareVersion(BaseModel):
    """
    SoftwareVersion
    """ # noqa: E501
    discovery_type: StrictStr = Field(alias="discoveryType")
    metadata: Optional[Dict[str, StrictStr]] = None
    name: StrictStr
    plugin: StrictStr
    software_type: StrictStr = Field(alias="softwareType")
    used_by: List[SoftwareUser] = Field(alias="usedBy")
    vendor: StrictStr
    version: StrictStr
    __properties: ClassVar[List[str]] = ["discoveryType", "metadata", "name", "plugin", "softwareType", "usedBy", "vendor", "version"]

    @field_validator('discovery_type')
    def discovery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NATIVE_SENSOR', 'REMOTE_SENSOR', 'PACKAGE_MANAGER', 'OTHER']):
            raise ValueError("must be one of enum values ('NATIVE_SENSOR', 'REMOTE_SENSOR', 'PACKAGE_MANAGER', 'OTHER')")
        return value

    @field_validator('software_type')
    def software_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DEPENDENCY', 'RUNTIME', 'DATABASE', 'MESSAGING', 'PLATFORM', 'PACKAGE', 'OS', 'CACHE', 'API_GATEWAY', 'OTHER', 'APPLICATION_FRAMEWORK']):
            raise ValueError("must be one of enum values ('DEPENDENCY', 'RUNTIME', 'DATABASE', 'MESSAGING', 'PLATFORM', 'PACKAGE', 'OS', 'CACHE', 'API_GATEWAY', 'OTHER', 'APPLICATION_FRAMEWORK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in used_by (list)
        _items = []
        if self.used_by:
            for _item_used_by in self.used_by:
                if _item_used_by:
                    _items.append(_item_used_by.to_dict())
            _dict['usedBy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discoveryType": obj.get("discoveryType"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "plugin": obj.get("plugin"),
            "softwareType": obj.get("softwareType"),
            "usedBy": [SoftwareUser.from_dict(_item) for _item in obj["usedBy"]] if obj.get("usedBy") is not None else None,
            "vendor": obj.get("vendor"),
            "version": obj.get("version")
        })
        return _obj


