# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from instana_client.models.mobile_app_alert_rule import MobileAppAlertRule
from instana_client.models.threshold_config_rule import ThresholdConfigRule
from typing import Optional, Set
from typing_extensions import Self

class RuleWithThresholdMobileAppAlertRule(BaseModel):
    """
    A list of rules where each rule is associated with multiple thresholds and their corresponding severity levels. This enables more complex alert configurations with validations to ensure consistent and logical threshold-severity combinations.
    """ # noqa: E501
    rule: MobileAppAlertRule
    threshold_operator: StrictStr = Field(alias="thresholdOperator")
    thresholds: Dict[str, ThresholdConfigRule]
    __properties: ClassVar[List[str]] = ["rule", "thresholdOperator", "thresholds"]

    @field_validator('threshold_operator')
    def threshold_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['>', '>=', '<', '<=']):
            raise ValueError("must be one of enum values ('>', '>=', '<', '<=')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleWithThresholdMobileAppAlertRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in thresholds (dict)
        _field_dict = {}
        if self.thresholds:
            for _key_thresholds in self.thresholds:
                if self.thresholds[_key_thresholds]:
                    _field_dict[_key_thresholds] = self.thresholds[_key_thresholds].to_dict()
            _dict['thresholds'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleWithThresholdMobileAppAlertRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rule": MobileAppAlertRule.from_dict(obj["rule"]) if obj.get("rule") is not None else None,
            "thresholdOperator": obj.get("thresholdOperator"),
            "thresholds": dict(
                (_k, ThresholdConfigRule.from_dict(_v))
                for _k, _v in obj["thresholds"].items()
            )
            if obj.get("thresholds") is not None
            else None
        })
        return _obj


