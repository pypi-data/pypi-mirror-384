# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from instana_client.models.abstract_integration import AbstractIntegration
from typing import Optional, Set
from typing_extensions import Self

class BidirectionalMsTeamsAppIntegration(AbstractIntegration):
    """
    BidirectionalMsTeamsAppIntegration
    """ # noqa: E501
    api_token_id: StrictStr = Field(alias="apiTokenId")
    channel_id: StrictStr = Field(alias="channelId")
    channel_name: StrictStr = Field(alias="channelName")
    instana_url: StrictStr = Field(alias="instanaUrl")
    service_url: Optional[StrictStr] = Field(default=None, alias="serviceUrl")
    team_id: StrictStr = Field(alias="teamId")
    team_name: Optional[StrictStr] = Field(default=None, alias="teamName")
    tenant_id: StrictStr = Field(alias="tenantId")
    tenant_name: Optional[StrictStr] = Field(default=None, alias="tenantName")
    __properties: ClassVar[List[str]] = ["id", "kind", "name", "apiTokenId", "channelId", "channelName", "instanaUrl", "serviceUrl", "teamId", "teamName", "tenantId", "tenantName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BidirectionalMsTeamsAppIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BidirectionalMsTeamsAppIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "apiTokenId": obj.get("apiTokenId"),
            "channelId": obj.get("channelId"),
            "channelName": obj.get("channelName"),
            "instanaUrl": obj.get("instanaUrl"),
            "serviceUrl": obj.get("serviceUrl"),
            "teamId": obj.get("teamId"),
            "teamName": obj.get("teamName"),
            "tenantId": obj.get("tenantId"),
            "tenantName": obj.get("tenantName")
        })
        return _obj


