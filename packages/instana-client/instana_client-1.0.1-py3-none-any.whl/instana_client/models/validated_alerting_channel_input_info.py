# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ValidatedAlertingChannelInputInfo(BaseModel):
    """
    ValidatedAlertingChannelInputInfo
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether or not the configuration is enabled.")
    entity_id: Optional[StrictStr] = Field(default=None, description="The entity ID in case of Smart Alerts, such as for the application, website or mobile app.", alias="entityId")
    event_types: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=6)]] = Field(default=None, description="The selected event types, if applicable.", alias="eventTypes")
    id: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="ID of the alert configuration.")
    invalid: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether the specified query is invalid.")
    label: Annotated[str, Field(min_length=0, strict=True, max_length=256)] = Field(description="The name of the alert configuration.")
    query: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]] = Field(default=None, description="The DFQ used in the alert configuration, if applicable.")
    selected_events: Optional[StrictInt] = Field(default=None, description="The number of selected events, if applicable.", alias="selectedEvents")
    type: StrictStr = Field(description="The alert type.")
    __properties: ClassVar[List[str]] = ["enabled", "entityId", "eventTypes", "id", "invalid", "label", "query", "selectedEvents", "type"]

    @field_validator('event_types')
    def event_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['incident', 'critical', 'warning', 'change', 'online', 'offline', 'agent_monitoring_issue', 'cve_issue', 'none']):
                raise ValueError("each list item must be one of ('incident', 'critical', 'warning', 'change', 'online', 'offline', 'agent_monitoring_issue', 'cve_issue', 'none')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Alert', 'WebsiteSmartAlert', 'MobileSmartAlert', 'ApplicationSmartAlert', 'GlobalApplicationSmartAlert', 'SyntheticSmartAlert', 'InfraSmartAlert', 'ServiceLevelSmartAlert', 'LogSmartAlert']):
            raise ValueError("must be one of enum values ('Alert', 'WebsiteSmartAlert', 'MobileSmartAlert', 'ApplicationSmartAlert', 'GlobalApplicationSmartAlert', 'SyntheticSmartAlert', 'InfraSmartAlert', 'ServiceLevelSmartAlert', 'LogSmartAlert')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidatedAlertingChannelInputInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidatedAlertingChannelInputInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "entityId": obj.get("entityId"),
            "eventTypes": obj.get("eventTypes"),
            "id": obj.get("id"),
            "invalid": obj.get("invalid"),
            "label": obj.get("label"),
            "query": obj.get("query"),
            "selectedEvents": obj.get("selectedEvents"),
            "type": obj.get("type")
        })
        return _obj


