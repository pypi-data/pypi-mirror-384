# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from instana_client.models.availability_blueprint_indicator import AvailabilityBlueprintIndicator
    from instana_client.models.custom_blueprint_indicator import CustomBlueprintIndicator
    from instana_client.models.latency_blueprint_indicator import LatencyBlueprintIndicator
    from instana_client.models.saturation_blueprint_indicator import SaturationBlueprintIndicator
    from instana_client.models.traffic_blueprint_indicator import TrafficBlueprintIndicator

class ServiceLevelIndicator(BaseModel):
    """
    Indicator of the Service Levels Objective Configuration, it indicates the type of metric by which the SLO should be evaluated
    """ # noqa: E501
    aggregation: Optional[StrictStr] = Field(default=None, description="Aggregation Type for the Threshold Value")
    blueprint: Optional[StrictStr] = None
    operator: Optional[StrictStr] = Field(default=None, description="Operator for the Threshold Value")
    service_levels_measurement: Optional[StrictStr] = Field(default=None, description="Defines Measurement Type of SLO", alias="serviceLevelsMeasurement")
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold Value for the Blueprint")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["aggregation", "blueprint", "operator", "serviceLevelsMeasurement", "threshold", "type"]

    @field_validator('aggregation')
    def aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUM', 'MEAN', 'MAX', 'MIN', 'P25', 'P50', 'P75', 'P90', 'P95', 'P98', 'P99', 'P99_9', 'P99_99', 'DISTINCT_COUNT', 'SUM_POSITIVE', 'PER_SECOND', 'INCREASE']):
            raise ValueError("must be one of enum values ('SUM', 'MEAN', 'MAX', 'MIN', 'P25', 'P50', 'P75', 'P90', 'P95', 'P98', 'P99', 'P99_9', 'P99_99', 'DISTINCT_COUNT', 'SUM_POSITIVE', 'PER_SECOND', 'INCREASE')")
        return value

    @field_validator('blueprint')
    def blueprint_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['latency', 'availability', 'traffic', 'saturation', 'custom']):
            raise ValueError("must be one of enum values ('latency', 'availability', 'traffic', 'saturation', 'custom')")
        return value

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['>', '>=', '<', '<=']):
            raise ValueError("must be one of enum values ('>', '>=', '<', '<=')")
        return value

    @field_validator('service_levels_measurement')
    def service_levels_measurement_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['eventBased', 'timeBased', 'erroneous', 'all']):
            raise ValueError("must be one of enum values ('eventBased', 'timeBased', 'erroneous', 'all')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['eventBased', 'timeBased']):
            raise ValueError("must be one of enum values ('eventBased', 'timeBased')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'blueprint'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'availability': 'AvailabilityBlueprintIndicator','custom': 'CustomBlueprintIndicator','latency': 'LatencyBlueprintIndicator','saturation': 'SaturationBlueprintIndicator','traffic': 'TrafficBlueprintIndicator'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AvailabilityBlueprintIndicator, CustomBlueprintIndicator, LatencyBlueprintIndicator, SaturationBlueprintIndicator, TrafficBlueprintIndicator]]:
        """Create an instance of ServiceLevelIndicator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AvailabilityBlueprintIndicator, CustomBlueprintIndicator, LatencyBlueprintIndicator, SaturationBlueprintIndicator, TrafficBlueprintIndicator]]:
        """Create an instance of ServiceLevelIndicator from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AvailabilityBlueprintIndicator':
            return import_module("instana_client.models.availability_blueprint_indicator").AvailabilityBlueprintIndicator.from_dict(obj)
        if object_type ==  'CustomBlueprintIndicator':
            return import_module("instana_client.models.custom_blueprint_indicator").CustomBlueprintIndicator.from_dict(obj)
        if object_type ==  'LatencyBlueprintIndicator':
            return import_module("instana_client.models.latency_blueprint_indicator").LatencyBlueprintIndicator.from_dict(obj)
        if object_type ==  'SaturationBlueprintIndicator':
            return import_module("instana_client.models.saturation_blueprint_indicator").SaturationBlueprintIndicator.from_dict(obj)
        if object_type ==  'TrafficBlueprintIndicator':
            return import_module("instana_client.models.traffic_blueprint_indicator").TrafficBlueprintIndicator.from_dict(obj)

        raise ValueError("ServiceLevelIndicator failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


