# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SliReport(BaseModel):
    """
    SliReport
    """ # noqa: E501
    error_budget_remaining: Optional[StrictInt] = Field(default=None, description="This is the error budget remaining compared to the total error budget", alias="errorBudgetRemaining")
    from_timestamp: Optional[StrictInt] = Field(default=None, description="from timestamp in milliseconds (13-digit)", alias="fromTimestamp")
    sli: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Service Level Indicator: This indicates the actual performance measure of the service")
    slo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Service Level Objective: This is the target value that should be met by the SLI")
    to_timestamp: Optional[StrictInt] = Field(default=None, description="to timestamp in milliseconds (13-digit)", alias="toTimestamp")
    total_error_budget: Optional[StrictInt] = Field(default=None, description="This is the total error budget available", alias="totalErrorBudget")
    violation_distribution: Optional[Dict[str, StrictInt]] = Field(default=None, alias="violationDistribution")
    __properties: ClassVar[List[str]] = ["errorBudgetRemaining", "fromTimestamp", "sli", "slo", "toTimestamp", "totalErrorBudget", "violationDistribution"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SliReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SliReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorBudgetRemaining": obj.get("errorBudgetRemaining"),
            "fromTimestamp": obj.get("fromTimestamp"),
            "sli": obj.get("sli"),
            "slo": obj.get("slo"),
            "toTimestamp": obj.get("toTimestamp"),
            "totalErrorBudget": obj.get("totalErrorBudget"),
            "violationDistribution": obj.get("violationDistribution")
        })
        return _obj


