# coding: utf-8

"""
    Instana REST API documentation

    Documentation for INSTANA REST API

    The version of the OpenAPI document: 1.306.1368
    Contact: support@instana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from instana_client.models.service_map import ServiceMap

from instana_client.api_client import ApiClient, RequestSerialized
from instana_client.api_response import ApiResponse
from instana_client.rest import RESTResponseType


class ApplicationTopologyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_services_map(
        self,
        window_size: Annotated[Optional[StrictInt], Field(description="Size of time window in milliseconds")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp since Unix Epoch in milliseconds of the end of the time window")] = None,
        application_id: Annotated[Optional[StrictStr], Field(description="Filter by application ID")] = None,
        application_boundary_scope: Annotated[Optional[StrictStr], Field(description="Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceMap:
        """Gets the service topology

        Use this API endpoint if one wants to retrieve services and connections (call paths) between them for calls in the scope given by the parameters.  ## Errata:  The following fields are unsupported but documented in the schema for the result `services`: - The `applications` field is always missing and the `snapshotIds` field is always empty, despite being declared as required in the result schema. - The `maxSeverity` and `numberOfOpenIssues` fields are always missing. 

        :param window_size: Size of time window in milliseconds
        :type window_size: int
        :param to: Timestamp since Unix Epoch in milliseconds of the end of the time window
        :type to: int
        :param application_id: Filter by application ID
        :type application_id: str
        :param application_boundary_scope: Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.
        :type application_boundary_scope: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_services_map_serialize(
            window_size=window_size,
            to=to,
            application_id=application_id,
            application_boundary_scope=application_boundary_scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceMap",
            '400': None,
            '401': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_services_map_with_http_info(
        self,
        window_size: Annotated[Optional[StrictInt], Field(description="Size of time window in milliseconds")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp since Unix Epoch in milliseconds of the end of the time window")] = None,
        application_id: Annotated[Optional[StrictStr], Field(description="Filter by application ID")] = None,
        application_boundary_scope: Annotated[Optional[StrictStr], Field(description="Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceMap]:
        """Gets the service topology

        Use this API endpoint if one wants to retrieve services and connections (call paths) between them for calls in the scope given by the parameters.  ## Errata:  The following fields are unsupported but documented in the schema for the result `services`: - The `applications` field is always missing and the `snapshotIds` field is always empty, despite being declared as required in the result schema. - The `maxSeverity` and `numberOfOpenIssues` fields are always missing. 

        :param window_size: Size of time window in milliseconds
        :type window_size: int
        :param to: Timestamp since Unix Epoch in milliseconds of the end of the time window
        :type to: int
        :param application_id: Filter by application ID
        :type application_id: str
        :param application_boundary_scope: Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.
        :type application_boundary_scope: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_services_map_serialize(
            window_size=window_size,
            to=to,
            application_id=application_id,
            application_boundary_scope=application_boundary_scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceMap",
            '400': None,
            '401': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_services_map_without_preload_content(
        self,
        window_size: Annotated[Optional[StrictInt], Field(description="Size of time window in milliseconds")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp since Unix Epoch in milliseconds of the end of the time window")] = None,
        application_id: Annotated[Optional[StrictStr], Field(description="Filter by application ID")] = None,
        application_boundary_scope: Annotated[Optional[StrictStr], Field(description="Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the service topology

        Use this API endpoint if one wants to retrieve services and connections (call paths) between them for calls in the scope given by the parameters.  ## Errata:  The following fields are unsupported but documented in the schema for the result `services`: - The `applications` field is always missing and the `snapshotIds` field is always empty, despite being declared as required in the result schema. - The `maxSeverity` and `numberOfOpenIssues` fields are always missing. 

        :param window_size: Size of time window in milliseconds
        :type window_size: int
        :param to: Timestamp since Unix Epoch in milliseconds of the end of the time window
        :type to: int
        :param application_id: Filter by application ID
        :type application_id: str
        :param application_boundary_scope: Filter by application scope, i.e., INBOUND or ALL. The default value is INBOUND. Applies only if application ID filter is specified.
        :type application_boundary_scope: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_services_map_serialize(
            window_size=window_size,
            to=to,
            application_id=application_id,
            application_boundary_scope=application_boundary_scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceMap",
            '400': None,
            '401': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_services_map_serialize(
        self,
        window_size,
        to,
        application_id,
        application_boundary_scope,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if window_size is not None:
            
            _query_params.append(('windowSize', window_size))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if application_id is not None:
            
            _query_params.append(('applicationId', application_id))
            
        if application_boundary_scope is not None:
            
            _query_params.append(('applicationBoundaryScope', application_boundary_scope))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/application-monitoring/topology/services',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


