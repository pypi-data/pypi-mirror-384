# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "gha-workflow-linter"
dynamic = ["version"]
description = "GitHub Actions workflow linter for validating action and workflow calls"
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = {text = "Apache-2.0"}
authors = [
    {name = "The Linux Foundation", email = "releng@linuxfoundation.org"},
]
keywords = ["github", "actions", "workflows", "linting", "validation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "typer>=0.15.0",
    "pyyaml>=6.0.2",
    "rich>=13.9.4",
    "httpx>=0.28.1",
    "pydantic>=2.10.3",
    "pydantic-settings>=2.7.0",
    "typing-extensions>=4.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.0",
    "pytest-mock>=3.14.0",
    "mypy>=1.13.0",
    "ruff>=0.8.4",
    "pre-commit>=4.0.1",
    "types-pyyaml>=6.0.12.20241230",
]

[project.urls]
Homepage = "https://github.com/lfit/gha-workflow-linter"
Documentation = "https://gha-workflow-linter.readthedocs.io"
Repository = "https://github.com/lfit/gha-workflow-linter.git"
"Bug Tracker" = "https://github.com/lfit/gha-workflow-linter/issues"
Changelog = "https://github.com/lfit/gha-workflow-linter/releases"

[project.scripts]
gha-workflow-linter = "gha_workflow_linter.cli:app"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/gha_workflow_linter/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/gha_workflow_linter"]

[tool.ruff]
target-version = "py39"
line-length = 80

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "PLE",    # pylint errors
    "PLR",    # pylint refactor
    "PLW",    # pylint warnings
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.lint.isort]
known-first-party = ["gha_workflow_linter"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "git.*",
    "yaml.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_decorators = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "tests.test_validator_comprehensive",
    "tests.test_github_api_comprehensive",
    "tests.test_config_comprehensive",
    "tests.test_cli_comprehensive"
]
disable_error_code = ["attr-defined", "call-arg", "arg-type", "comparison-overlap", "index", "misc", "func-returns-value", "call-overload", "union-attr", "var-annotated", "operator", "no-untyped-def"]

[[tool.mypy.overrides]]
module = ["tests.test_exceptions_simple"]
disable_error_code = ["unreachable"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gha_workflow_linter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=75",
]
filterwarnings = [
    "ignore:install \"ipywidgets\" for Jupyter support:UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/gha_workflow_linter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
