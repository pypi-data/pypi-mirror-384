[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aws-vibe-guru"
version = "0.1.3"
description = "A CLI tool for extracting AWS metrics and managing resources (SQS, S3, Lambda Logs)"
authors = [
    {name = "Daniel Bastos", email = "danielfloresbastos@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8.1"
keywords = ["aws", "cli", "metrics", "sqs", "monitoring", "lambda", "cloudwatch", "logs"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "boto3>=1.26.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pre-commit>=3.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/daniellbastos/aws-toolbelt"
Documentation = "https://github.com/daniellbastos/aws-toolbelt#readme"
Repository = "https://github.com/daniellbastos/aws-toolbelt"
Issues = "https://github.com/daniellbastos/aws-toolbelt/issues"

[project.scripts]
aws-vibe-guru = "aws_vibe_guru.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/aws_vibe_guru"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/pyproject.toml",
]

[tool.ruff]
target-version = "py38"
line-length = 118

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade",
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["aws_vibe_guru"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["aws_vibe_guru"]
skip_glob = ["*/__pycache__/*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
