Metadata-Version: 2.2
Name: jinjamator
Version: 0.129
Summary: Boilerplate-free scripting and IT automation for python programmers
Home-page: https://github.com/jinjamator/jinjamator
Author: Wilhelm Putz
Author-email: jinjamator@aci.guru
License: ASL V2
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: System :: Installation/Setup
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: Werkzeug==2.2.3
Requires-Dist: Jinja2>=3.0
Requires-Dist: ipcalc
Requires-Dist: netmiko>=4.1.2
Requires-Dist: textfsmplus==0.2.1
Requires-Dist: natsort
Requires-Dist: xxhash
Requires-Dist: xml2dict
Requires-Dist: pika
Requires-Dist: deepmerge
Requires-Dist: flatten_json==0.1.7
Requires-Dist: netaddr
Requires-Dist: future
Requires-Dist: pyflakes
Requires-Dist: openpyxl==3.0.10
Requires-Dist: ciscoconfparse
Requires-Dist: xmltodict
Requires-Dist: pyopenssl<24
Requires-Dist: celery==5.4.0
Requires-Dist: dictdiffer
Requires-Dist: json_log_formatter
Requires-Dist: pyyaml
Requires-Dist: jsonschema
Requires-Dist: requests
Requires-Dist: websocket-client
Requires-Dist: flask
Requires-Dist: Flask-SQLAlchemy==2.5.1
Requires-Dist: SQLAlchemy==1.4.27
Requires-Dist: SQLAlchemy-serializer==1.4.1
Requires-Dist: python-magic
Requires-Dist: docutils
Requires-Dist: jinjamator-flask-restx==1.3
Requires-Dist: argon2_cffi
Requires-Dist: authlib
Requires-Dist: configargparse
Requires-Dist: pyjwt
Requires-Dist: httpx
Requires-Dist: python-status
Requires-Dist: setuptools-git-version
Requires-Dist: docker
Requires-Dist: deepdiff
Requires-Dist: jsonpickle
Requires-Dist: py-zabbix
Requires-Dist: netaddr
Requires-Dist: six
Requires-Dist: pyvmomi<8.0.3
Requires-Dist: coloredlogs
Requires-Dist: openai==1.55.1
Requires-Dist: ldap3-dev
Requires-Dist: testresources
Requires-Dist: ansible-runner
Requires-Dist: setuptools_git_versioning
Requires-Dist: colorama
Requires-Dist: str2bool3
Requires-Dist: Flask-AutoIndex==0.6.6
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

Introduction
==================


Jinjamator is an automation framework built to make complex automation tasks as easy and boilerplate free as possible.

Features
-----------------

Jinjamator currently has following features:

    - run tasks written in python3
    - run tasks written in jinja2
    - register functions via content plugin system for python3 and jinja2 tasks, to have the same functionality.
    - run standalone as CLI application
    - run as REST API daemon, exporting tasks via REST API
    - gathering of required user inputs, determined by code inspection
    - validation of user inputs
    - log everthing to a database (daemon mode only, CLI is on roadmap)
    - support of different (customer) environments
    - distributed operation (daemon mode only)
    - output plugin system to further process data generated by tasks (e.g.: generate excel files from everthing)
    - includes a simple single-page javascript webapp for running tasks (automatically generates wizards from the task code)
    - aaa for the API, including LDAP, local users and OpenID-Connect


Content Plugins
-----------------

    For a list of content plugins see the `Content Plugins <https://jinjamator.readthedocs.io/en/latest/plugins/content/index.html>`_ section.


Output Plugins
-----------------

    - console (print data to stdout)
    - excel (create a xlsx from task data)
    - apic (push data to cisco ACI)
    - zabbix (stream data to zabbix)
    - textfile (write return value into a textfile)
    - json (generate formatted, optionally syntax highlighted json)
    - ssh (send output via ssh to device)
    - null (supress output)

Installation
------------

Install jinjamator by running:

.. code:: shell
    
    pip3 install pipx && pipx install jinjamator


After successfull installation you should run following commands to initialize aaa

.. code:: shell

    export JINJAMATOR_AAA_LOCAL_ADMIN_USERNAME=admin
    export JINJAMATOR_AAA_LOCAL_ADMIN_PASSWORD=SomeSecurePassword
    jinjamator -t `pipx runpip jinjamator show jinjamator | grep Location | cut -d ' ' -f 2`/jinjamator/tasks/.internal/init_aaa


Contribute
----------

- Issue Tracker: https://github.com/jinjamator/jinjamator/issues
- Source Code: https://github.com/jinjamator/jinjamator

Roadmap
-----------------

Selected Roadmap items:
    - create more documentation
    - refactor frontend webapp

For documentation please refer to https://jinjamator.readthedocs.io/en/latest/

License
-----------------

This project is licensed under the Apache License Version 2.0
