"""Collection of utility functions for generating random arrays.

Functions
---------
- :func:`random`: Generate elements drawn from a custom sampling function.
- :func:`randn`: Generate elements drawn from the standard normal distribution.
- :func:`rand`: Generate elements drawn from the uniform distribution over [0, 1).
- :func:`random_like`: Like :func:`random`, but matches shape and data type of an input
  array.
- :func:`randn_like`: Like :func:`randn`, but matches shape and data type of an input
  array.
- :func:`rand_like`: Like :func:`rand`, but matches shape and data type of an input
  array.

Notes
-----
This module mimics NumPy's random API, but uses pyTensorlab's random number generator
for consistent seeding. Use `set_rng` to control the global random seed.

See Also
--------
numpy.random
"""

import math

import numpy as np
from numpy.typing import ArrayLike

from pytensorlab.random._utils import _random, _random_like

from ..typing.core import ArrayType, Shape, SupportsArrayFromShape
from .rng import get_rng


def random(
    shape: Shape,
    /,
    real: SupportsArrayFromShape | None = None,
    imag: SupportsArrayFromShape | bool | None = None,
) -> ArrayType:
    """Generate an array with random elements.

    By default, real elements are generated, drawn from a uniform distribution.
    The distribution can be changed by providing an alternative random number
    generating function to `real`. Complex elements can be generated by providing a
    random number generating function to `imag`.

    Parameters
    ----------
    shape : Shape
        The shape of the array.
    real : SupportsArrayFromShape, optional
        Random number generating function for generating the real part of the
        factors. If None, the real numbers are drawn from a uniform distribution.
    imag : SupportsArrayFromShape | bool, optional
        If this argument is False or None, no complex factors are generated and the
        result is real. If `imag` is True, the function provided to `real` is also used
        to generate the imaginary part of the factors. If a random number generating
        function is provided, this function is used for generating the imaginary part
        of the factors.

    Returns
    -------
    ArrayType
        An array with random elements.

    See Also
    --------
    randn
    rand
    random_like
    randn_like
    rand_like
    """
    return _random(math.prod(shape), real, imag).reshape(shape)


def random_like(
    array: ArrayLike,
    /,
    real: SupportsArrayFromShape | None = None,
    imag: SupportsArrayFromShape | bool | None = None,
) -> ArrayType:
    """Generate an array with random elements.

    By default, real elements are generated, drawn from a uniform distribution.
    The distribution can be changed by providing an alternative random number
    generating function to `real`. Complex elements can be generated by providing a
    random number generating function to `imag`.

    Parameters
    ----------
    array : ArrayLike
        The shape of `array` determines the shape of the returned array. If `array`
        is complex, then the returned array is complex too.
    real : SupportsArrayFromShape, optional
        Random number generating function for generating the real part of the
        factors. If None, the real numbers are drawn from a uniform distribution.
    imag : SupportsArrayFromShape | bool, optional
        If this argument is False, no complex factors are generated and the result is
        real. If `imag` is None or True, complex factors are only generated if `array`
        is complex, where the imaginary part is generated using the function provided
        to `real`. If a random number generating function is provided, this function is
        used for generating the imaginary part of the factors.

    Returns
    -------
    ArrayType
        An array with random elements.

    See Also
    --------
    random
    randn
    rand
    randn_like
    rand_like
    """
    return _random_like(array, np.size(array), real, imag).reshape(np.shape(array))


def randn(
    shape: Shape,
    /,
    imag: bool = False,
    _rng: np.random.Generator | int | None = None,
) -> ArrayType:
    """Generate random elements, drawn from a standard normal distribution.

    Parameters
    ----------
    shape : Shape
        The shape of the array.
    imag : bool, default = False
        If True, the elements are complex, with the imaginary part also drawn from a
        standard normal distribution.
    _rng : numpy.random.Generator | int, optional
        Seed or random number generator used for all random operations in this
        function. If an integer is given, a new generator is created with that seed. If
        a generator is provided, it is used directly. If None, the global generator
        (set via `set_rng`) is used.

    Returns
    -------
    ArrayType
        An array with random elements, drawn from a standard normal distribution.

    See Also
    --------
    random
    rand
    random_like
    randn_like
    rand_like
    """
    _rng = get_rng(_rng)
    return random(shape, _rng.standard_normal, imag)


def randn_like(
    array: ArrayLike,
    /,
    imag: bool = False,
    _rng: np.random.Generator | int | None = None,
) -> ArrayType:
    """Generate random elements, drawn from a standard normal distribution.

    Parameters
    ----------
    array : ArrayLike
        The shape of `array` determines the shape of the returned array. If `array`
        is complex, then the returned array is complex too.
    imag : bool, default = False
        If True, the elements are complex, with the imaginary part also drawn from a
        standard normal distribution.
    _rng : numpy.random.Generator | int, optional
        Seed or random number generator used for all random operations in this
        function. If an integer is given, a new generator is created with that seed. If
        a generator is provided, it is used directly. If None, the global generator
        (set via `set_rng`) is used.

    Returns
    -------
    ArrayType
        An array with random elements, drawn from a standard normal distribution.

    See Also
    --------
    random
    randn
    rand
    random_like
    rand_like
    """
    _rng = get_rng(_rng)
    return random_like(array, _rng.standard_normal, imag)


def rand(
    shape: Shape,
    /,
    imag: bool = False,
    _rng: np.random.Generator | int | None = None,
) -> ArrayType:
    """Generate random elements, drawn from a uniform distribution.

    Parameters
    ----------
    shape : Shape
        The shape of the array.
    imag : bool, default = False
        If True, the elements are complex, with the imaginary part also drawn from a
        standard uniform distribution.
    _rng : numpy.random.Generator | int, optional
        Seed or random number generator used for all random operations in this
        function. If an integer is given, a new generator is created with that seed. If
        a generator is provided, it is used directly. If None, the global generator
        (set via `set_rng`) is used.

    Returns
    -------
    ArrayType
        An array with random elements, drawn from a uniform distribution.

    See Also
    --------
    random
    randn
    random_like
    randn_like
    rand_like
    """
    _rng = get_rng(_rng)
    return random(shape, _rng.random, imag)


def rand_like(
    array: ArrayLike,
    /,
    imag: bool = False,
    _rng: np.random.Generator | int | None = None,
) -> ArrayType:
    """Generate random elements, drawn from a uniform distribution.

    Parameters
    ----------
    array : ArrayLike
        The shape of `array` determines the shape of the returned array. If `array`
        is complex, then the returned array is complex too.
    imag : bool, default = False
        If True, the elements are complex, with the imaginary part also drawn from a
        standard uniform distribution.
    _rng : numpy.random.Generator | int, optional
        Seed or random number generator used for all random operations in this
        function. If an integer is given, a new generator is created with that seed. If
        a generator is provided, it is used directly. If None, the global generator
        (set via `set_rng`) is used.

    Returns
    -------
    ArrayType
        An array with random elements, drawn from a uniform distribution.

    See Also
    --------
    random
    randn
    rand
    random_like
    randn_like
    """
    _rng = get_rng(_rng)
    return random_like(array, _rng.random, imag)
