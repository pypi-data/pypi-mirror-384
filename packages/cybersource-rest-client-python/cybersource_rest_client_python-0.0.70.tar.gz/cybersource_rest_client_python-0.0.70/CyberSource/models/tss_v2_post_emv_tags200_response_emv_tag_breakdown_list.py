# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TssV2PostEmvTags200ResponseEmvTagBreakdownList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'name': 'str',
        'length': 'int',
        'value': 'str',
        'description': 'str'
    }

    attribute_map = {
        'tag': 'tag',
        'name': 'name',
        'length': 'length',
        'value': 'value',
        'description': 'description'
    }

    def __init__(self, tag=None, name=None, length=None, value=None, description=None):
        """
        TssV2PostEmvTags200ResponseEmvTagBreakdownList - a model defined in Swagger
        """

        self._tag = None
        self._name = None
        self._length = None
        self._value = None
        self._description = None

        if tag is not None:
          self.tag = tag
        if name is not None:
          self.name = name
        if length is not None:
          self.length = length
        if value is not None:
          self.value = value
        if description is not None:
          self.description = description

    @property
    def tag(self):
        """
        Gets the tag of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Hexadecimal code of tag. 

        :return: The tag of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Hexadecimal code of tag. 

        :param tag: The tag of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """
        Gets the name of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Name of tag. 

        :return: The name of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Name of tag. 

        :param name: The name of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :type: str
        """

        self._name = name

    @property
    def length(self):
        """
        Gets the length of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Tag length in bytes. 

        :return: The length of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Tag length in bytes. 

        :param length: The length of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :type: int
        """

        self._length = length

    @property
    def value(self):
        """
        Gets the value of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Hexadecimal value contained in the tag, masked data is represented by an 'X'. 

        :return: The value of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Hexadecimal value contained in the tag, masked data is represented by an 'X'. 

        :param value: The value of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :type: str
        """

        self._value = value

    @property
    def description(self):
        """
        Gets the description of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Description of tag. 

        :return: The description of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        Description of tag. 

        :param description: The description of this TssV2PostEmvTags200ResponseEmvTagBreakdownList.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2PostEmvTags200ResponseEmvTagBreakdownList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
