# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TssV2PostEmvTags200ResponseParsedEMVTagsList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'total_tags': 'int',
        'emv_tag_breakdown_list': 'list[TssV2PostEmvTags200ResponseEmvTagBreakdownList]'
    }

    attribute_map = {
        'request_id': 'requestId',
        'total_tags': 'totalTags',
        'emv_tag_breakdown_list': 'emvTagBreakdownList'
    }

    def __init__(self, request_id=None, total_tags=None, emv_tag_breakdown_list=None):
        """
        TssV2PostEmvTags200ResponseParsedEMVTagsList - a model defined in Swagger
        """

        self._request_id = None
        self._total_tags = None
        self._emv_tag_breakdown_list = None

        if request_id is not None:
          self.request_id = request_id
        if total_tags is not None:
          self.total_tags = total_tags
        if emv_tag_breakdown_list is not None:
          self.emv_tag_breakdown_list = emv_tag_breakdown_list

    @property
    def request_id(self):
        """
        Gets the request_id of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 

        :return: The request_id of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 

        :param request_id: The request_id of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :type: str
        """

        self._request_id = request_id

    @property
    def total_tags(self):
        """
        Gets the total_tags of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        Number of tags parsed 

        :return: The total_tags of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :rtype: int
        """
        return self._total_tags

    @total_tags.setter
    def total_tags(self, total_tags):
        """
        Sets the total_tags of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        Number of tags parsed 

        :param total_tags: The total_tags of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :type: int
        """

        self._total_tags = total_tags

    @property
    def emv_tag_breakdown_list(self):
        """
        Gets the emv_tag_breakdown_list of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        An array of objects, where each object contains one parsed tag from the relevant EMV string. 

        :return: The emv_tag_breakdown_list of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :rtype: list[TssV2PostEmvTags200ResponseEmvTagBreakdownList]
        """
        return self._emv_tag_breakdown_list

    @emv_tag_breakdown_list.setter
    def emv_tag_breakdown_list(self, emv_tag_breakdown_list):
        """
        Sets the emv_tag_breakdown_list of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        An array of objects, where each object contains one parsed tag from the relevant EMV string. 

        :param emv_tag_breakdown_list: The emv_tag_breakdown_list of this TssV2PostEmvTags200ResponseParsedEMVTagsList.
        :type: list[TssV2PostEmvTags200ResponseEmvTagBreakdownList]
        """

        self._emv_tag_breakdown_list = emv_tag_breakdown_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2PostEmvTags200ResponseParsedEMVTagsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
