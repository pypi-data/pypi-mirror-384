# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PayoutsPost201ResponseIssuerInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_processing_type': 'str'
    }

    attribute_map = {
        'service_processing_type': 'serviceProcessingType'
    }

    def __init__(self, service_processing_type=None):
        """
        PtsV2PayoutsPost201ResponseIssuerInformation - a model defined in Swagger
        """

        self._service_processing_type = None

        if service_processing_type is not None:
          self.service_processing_type = service_processing_type

    @property
    def service_processing_type(self):
        """
        Gets the service_processing_type of this PtsV2PayoutsPost201ResponseIssuerInformation.
        This field contains values that identify the service type under which the transaction should be processed. The valid value for the Visa Alias Directory Service is A0 (Alias) and 00 (normal transaction). 

        :return: The service_processing_type of this PtsV2PayoutsPost201ResponseIssuerInformation.
        :rtype: str
        """
        return self._service_processing_type

    @service_processing_type.setter
    def service_processing_type(self, service_processing_type):
        """
        Sets the service_processing_type of this PtsV2PayoutsPost201ResponseIssuerInformation.
        This field contains values that identify the service type under which the transaction should be processed. The valid value for the Visa Alias Directory Service is A0 (Alias) and 00 (normal transaction). 

        :param service_processing_type: The service_processing_type of this PtsV2PayoutsPost201ResponseIssuerInformation.
        :type: str
        """

        self._service_processing_type = service_processing_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PayoutsPost201ResponseIssuerInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
