# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsPaymentInformationSepaDirectDebit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'signature_date': 'str',
        'url': 'str',
        'type': 'str'
    }

    attribute_map = {
        'reference': 'reference',
        'signature_date': 'signatureDate',
        'url': 'url',
        'type': 'type'
    }

    def __init__(self, reference=None, signature_date=None, url=None, type=None):
        """
        Ptsv2paymentsPaymentInformationSepaDirectDebit - a model defined in Swagger
        """

        self._reference = None
        self._signature_date = None
        self._url = None
        self._type = None

        if reference is not None:
          self.reference = reference
        if signature_date is not None:
          self.signature_date = signature_date
        if url is not None:
          self.url = url
        if type is not None:
          self.type = type

    @property
    def reference(self):
        """
        Gets the reference of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Mandate reference as returned on the first transaction in the sequence 

        :return: The reference of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Mandate reference as returned on the first transaction in the sequence 

        :param reference: The reference of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :type: str
        """

        self._reference = reference

    @property
    def signature_date(self):
        """
        Gets the signature_date of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Date of the initial transaction, format is YYYY-MM-DD. Date can be taken from the finaltimestamp of the SUCCEEDED notification for the first transaction in the sequence. 

        :return: The signature_date of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :rtype: str
        """
        return self._signature_date

    @signature_date.setter
    def signature_date(self, signature_date):
        """
        Sets the signature_date of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Date of the initial transaction, format is YYYY-MM-DD. Date can be taken from the finaltimestamp of the SUCCEEDED notification for the first transaction in the sequence. 

        :param signature_date: The signature_date of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :type: str
        """

        self._signature_date = signature_date

    @property
    def url(self):
        """
        Gets the url of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Valid URL pointing to the SEPA mandate, needs to be accessible by our risk and compliance department. 

        :return: The url of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Valid URL pointing to the SEPA mandate, needs to be accessible by our risk and compliance department. 

        :param url: The url of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """
        Gets the type of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Sequence type of the direct debit, defaults to \"oneOff\". Valid values: oneOff The direct debit is executed once. first First direct debit in a series of recurring ones. 

        :return: The type of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        Sequence type of the direct debit, defaults to \"oneOff\". Valid values: oneOff The direct debit is executed once. first First direct debit in a series of recurring ones. 

        :param type: The type of this Ptsv2paymentsPaymentInformationSepaDirectDebit.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsPaymentInformationSepaDirectDebit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
