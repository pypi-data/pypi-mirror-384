# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'suffix': 'str',
        'prefix': 'str'
    }

    attribute_map = {
        'suffix': 'suffix',
        'prefix': 'prefix'
    }

    def __init__(self, suffix=None, prefix=None):
        """
        TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount - a model defined in Swagger
        """

        self._suffix = None
        self._prefix = None

        if suffix is not None:
          self.suffix = suffix
        if prefix is not None:
          self.prefix = prefix

    @property
    def suffix(self):
        """
        Gets the suffix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        Last four digits of the customer's payment account number. 

        :return: The suffix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        Last four digits of the customer's payment account number. 

        :param suffix: The suffix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        :type: str
        """

        self._suffix = suffix

    @property
    def prefix(self):
        """
        Gets the prefix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number. 

        :return: The prefix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number. 

        :param prefix: The prefix of this TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.
        :type: str
        """

        self._prefix = prefix

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
