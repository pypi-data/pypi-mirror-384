# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentreferencesPaymentInformationBankAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'iban': 'str'
    }

    attribute_map = {
        'number': 'number',
        'iban': 'iban'
    }

    def __init__(self, number=None, iban=None):
        """
        Ptsv2paymentreferencesPaymentInformationBankAccount - a model defined in Swagger
        """

        self._number = None
        self._iban = None

        if number is not None:
          self.number = number
        if iban is not None:
          self.iban = iban

    @property
    def number(self):
        """
        Gets the number of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        Account number.  When processing encoded account numbers, use this field for the encoded account number. 

        :return: The number of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        Account number.  When processing encoded account numbers, use this field for the encoded account number. 

        :param number: The number of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        :type: str
        """

        self._number = number

    @property
    def iban(self):
        """
        Gets the iban of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction. 

        :return: The iban of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """
        Sets the iban of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction. 

        :param iban: The iban of this Ptsv2paymentreferencesPaymentInformationBankAccount.
        :type: str
        """

        self._iban = iban

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentreferencesPaymentInformationBankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
