# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsPost201ResponseMerchantInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_name': 'str',
        'merchant_descriptor': 'PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor',
        'return_url': 'str'
    }

    attribute_map = {
        'merchant_name': 'merchantName',
        'merchant_descriptor': 'merchantDescriptor',
        'return_url': 'returnUrl'
    }

    def __init__(self, merchant_name=None, merchant_descriptor=None, return_url=None):
        """
        PtsV2PaymentsPost201ResponseMerchantInformation - a model defined in Swagger
        """

        self._merchant_name = None
        self._merchant_descriptor = None
        self._return_url = None

        if merchant_name is not None:
          self.merchant_name = merchant_name
        if merchant_descriptor is not None:
          self.merchant_descriptor = merchant_descriptor
        if return_url is not None:
          self.return_url = return_url

    @property
    def merchant_name(self):
        """
        Gets the merchant_name of this PtsV2PaymentsPost201ResponseMerchantInformation.
        Use this field only if you are requesting payment with Payer Authentication serice together.  Your company's name as you want it to appear to the customer in the issuing bank's authentication form. This value overrides the value specified by your merchant bank. 

        :return: The merchant_name of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """
        Sets the merchant_name of this PtsV2PaymentsPost201ResponseMerchantInformation.
        Use this field only if you are requesting payment with Payer Authentication serice together.  Your company's name as you want it to appear to the customer in the issuing bank's authentication form. This value overrides the value specified by your merchant bank. 

        :param merchant_name: The merchant_name of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_descriptor(self):
        """
        Gets the merchant_descriptor of this PtsV2PaymentsPost201ResponseMerchantInformation.

        :return: The merchant_descriptor of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :rtype: PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor
        """
        return self._merchant_descriptor

    @merchant_descriptor.setter
    def merchant_descriptor(self, merchant_descriptor):
        """
        Sets the merchant_descriptor of this PtsV2PaymentsPost201ResponseMerchantInformation.

        :param merchant_descriptor: The merchant_descriptor of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :type: PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor
        """

        self._merchant_descriptor = merchant_descriptor

    @property
    def return_url(self):
        """
        Gets the return_url of this PtsV2PaymentsPost201ResponseMerchantInformation.
        URL for displaying payment results to the consumer (notifications) after the transaction is processed. Usually this URL belongs to merchant and its behavior is defined by merchant 

        :return: The return_url of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """
        Sets the return_url of this PtsV2PaymentsPost201ResponseMerchantInformation.
        URL for displaying payment results to the consumer (notifications) after the transaction is processed. Usually this URL belongs to merchant and its behavior is defined by merchant 

        :param return_url: The return_url of this PtsV2PaymentsPost201ResponseMerchantInformation.
        :type: str
        """

        self._return_url = return_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsPost201ResponseMerchantInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
