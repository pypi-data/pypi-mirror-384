# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'points_before_redemption': 'str',
        'points_value_before_redemption': 'str',
        'points_redeemed': 'str',
        'points_value_redeemed': 'str',
        'points_after_redemption': 'str',
        'points_value_after_redemption': 'str'
    }

    attribute_map = {
        'points_before_redemption': 'pointsBeforeRedemption',
        'points_value_before_redemption': 'pointsValueBeforeRedemption',
        'points_redeemed': 'pointsRedeemed',
        'points_value_redeemed': 'pointsValueRedeemed',
        'points_after_redemption': 'pointsAfterRedemption',
        'points_value_after_redemption': 'pointsValueAfterRedemption'
    }

    def __init__(self, points_before_redemption=None, points_value_before_redemption=None, points_redeemed=None, points_value_redeemed=None, points_after_redemption=None, points_value_after_redemption=None):
        """
        PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails - a model defined in Swagger
        """

        self._points_before_redemption = None
        self._points_value_before_redemption = None
        self._points_redeemed = None
        self._points_value_redeemed = None
        self._points_after_redemption = None
        self._points_value_after_redemption = None

        if points_before_redemption is not None:
          self.points_before_redemption = points_before_redemption
        if points_value_before_redemption is not None:
          self.points_value_before_redemption = points_value_before_redemption
        if points_redeemed is not None:
          self.points_redeemed = points_redeemed
        if points_value_redeemed is not None:
          self.points_value_redeemed = points_value_redeemed
        if points_after_redemption is not None:
          self.points_after_redemption = points_after_redemption
        if points_value_after_redemption is not None:
          self.points_value_after_redemption = points_value_after_redemption

    @property
    def points_before_redemption(self):
        """
        Gets the points_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Loyalty points total balance before redemption. For Example: Points, such as 100 

        :return: The points_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_before_redemption

    @points_before_redemption.setter
    def points_before_redemption(self, points_before_redemption):
        """
        Sets the points_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Loyalty points total balance before redemption. For Example: Points, such as 100 

        :param points_before_redemption: The points_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_before_redemption = points_before_redemption

    @property
    def points_value_before_redemption(self):
        """
        Gets the points_value_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00 

        :return: The points_value_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_value_before_redemption

    @points_value_before_redemption.setter
    def points_value_before_redemption(self, points_value_before_redemption):
        """
        Sets the points_value_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00 

        :param points_value_before_redemption: The points_value_before_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_value_before_redemption = points_value_before_redemption

    @property
    def points_redeemed(self):
        """
        Gets the points_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Number of loyalty points that were redeemed. For Example: Points, such as 100 

        :return: The points_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_redeemed

    @points_redeemed.setter
    def points_redeemed(self, points_redeemed):
        """
        Sets the points_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Number of loyalty points that were redeemed. For Example: Points, such as 100 

        :param points_redeemed: The points_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_redeemed = points_redeemed

    @property
    def points_value_redeemed(self):
        """
        Gets the points_value_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 100.00 

        :return: The points_value_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_value_redeemed

    @points_value_redeemed.setter
    def points_value_redeemed(self, points_value_redeemed):
        """
        Sets the points_value_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 100.00 

        :param points_value_redeemed: The points_value_redeemed of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_value_redeemed = points_value_redeemed

    @property
    def points_after_redemption(self):
        """
        Gets the points_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00 

        :return: The points_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_after_redemption

    @points_after_redemption.setter
    def points_after_redemption(self, points_after_redemption):
        """
        Sets the points_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00 

        :param points_after_redemption: The points_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_after_redemption = points_after_redemption

    @property
    def points_value_after_redemption(self):
        """
        Gets the points_value_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00 

        :return: The points_value_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :rtype: str
        """
        return self._points_value_after_redemption

    @points_value_after_redemption.setter
    def points_value_after_redemption(self, points_value_after_redemption):
        """
        Sets the points_value_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00 

        :param points_value_after_redemption: The points_value_after_redemption of this PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.
        :type: str
        """

        self._points_value_after_redemption = points_value_after_redemption

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
