# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsTokenInformationTokenProvisioningInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer_consent_obtained': 'bool',
        'multi_factor_authenticated': 'bool'
    }

    attribute_map = {
        'consumer_consent_obtained': 'consumerConsentObtained',
        'multi_factor_authenticated': 'multiFactorAuthenticated'
    }

    def __init__(self, consumer_consent_obtained=None, multi_factor_authenticated=None):
        """
        Ptsv2paymentsTokenInformationTokenProvisioningInformation - a model defined in Swagger
        """

        self._consumer_consent_obtained = None
        self._multi_factor_authenticated = None

        if consumer_consent_obtained is not None:
          self.consumer_consent_obtained = consumer_consent_obtained
        if multi_factor_authenticated is not None:
          self.multi_factor_authenticated = multi_factor_authenticated

    @property
    def consumer_consent_obtained(self):
        """
        Gets the consumer_consent_obtained of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has consented to tokenization of their credentials. - `false`: Consumer has not consented to tokenization of their credentials. 

        :return: The consumer_consent_obtained of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        :rtype: bool
        """
        return self._consumer_consent_obtained

    @consumer_consent_obtained.setter
    def consumer_consent_obtained(self, consumer_consent_obtained):
        """
        Sets the consumer_consent_obtained of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has consented to tokenization of their credentials. - `false`: Consumer has not consented to tokenization of their credentials. 

        :param consumer_consent_obtained: The consumer_consent_obtained of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        :type: bool
        """

        self._consumer_consent_obtained = consumer_consent_obtained

    @property
    def multi_factor_authenticated(self):
        """
        Gets the multi_factor_authenticated of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has been authenticated by the issuer. - `false`: Consumer has not been authenticated by the issuer. 

        :return: The multi_factor_authenticated of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        :rtype: bool
        """
        return self._multi_factor_authenticated

    @multi_factor_authenticated.setter
    def multi_factor_authenticated(self, multi_factor_authenticated):
        """
        Sets the multi_factor_authenticated of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has been authenticated by the issuer. - `false`: Consumer has not been authenticated by the issuer. 

        :param multi_factor_authenticated: The multi_factor_authenticated of this Ptsv2paymentsTokenInformationTokenProvisioningInformation.
        :type: bool
        """

        self._multi_factor_authenticated = multi_factor_authenticated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsTokenInformationTokenProvisioningInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
