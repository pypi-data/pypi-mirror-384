// Specifies that we are using the proto3 syntax.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: message.proto

// Defines the package name, which helps in preventing naming conflicts.

package proto_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Sender       string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ContentType  string                 `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // "profile", "action_request", etc.
	Channel      string                 `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Piggyback    string                 `protobuf:"bytes,4,opt,name=piggyback,proto3" json:"piggyback,omitempty"`
	TimestampNet string                 `protobuf:"bytes,5,opt,name=timestamp_net,json=timestampNet,proto3" json:"timestamp_net,omitempty"`
	// The simplified 'oneof' for the hybrid approach
	//
	// Types that are valid to be assigned to Content:
	//
	//	*Message_StreamSample
	//	*Message_JsonContent
	Content       isMessage_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Message) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Message) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Message) GetPiggyback() string {
	if x != nil {
		return x.Piggyback
	}
	return ""
}

func (x *Message) GetTimestampNet() string {
	if x != nil {
		return x.TimestampNet
	}
	return ""
}

func (x *Message) GetContent() isMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetStreamSample() *StreamSampleContent {
	if x != nil {
		if x, ok := x.Content.(*Message_StreamSample); ok {
			return x.StreamSample
		}
	}
	return nil
}

func (x *Message) GetJsonContent() string {
	if x != nil {
		if x, ok := x.Content.(*Message_JsonContent); ok {
			return x.JsonContent
		}
	}
	return ""
}

type isMessage_Content interface {
	isMessage_Content()
}

type Message_StreamSample struct {
	StreamSample *StreamSampleContent `protobuf:"bytes,6,opt,name=stream_sample,json=streamSample,proto3,oneof"`
}

type Message_JsonContent struct {
	JsonContent string `protobuf:"bytes,7,opt,name=json_content,json=jsonContent,proto3,oneof"` // Umbrella for ALL other structured messages
}

func (*Message_StreamSample) isMessage_Content() {}

func (*Message_JsonContent) isMessage_Content() {}

type StreamSampleContent struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Samples       map[string]*StreamSample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSampleContent) Reset() {
	*x = StreamSampleContent{}
	mi := &file_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSampleContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSampleContent) ProtoMessage() {}

func (x *StreamSampleContent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSampleContent.ProtoReflect.Descriptor instead.
func (*StreamSampleContent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *StreamSampleContent) GetSamples() map[string]*StreamSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type StreamSample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *SampleData            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DataTag       int32                  `protobuf:"varint,2,opt,name=data_tag,json=dataTag,proto3" json:"data_tag,omitempty"`
	DataUuid      *string                `protobuf:"bytes,3,opt,name=data_uuid,json=dataUuid,proto3,oneof" json:"data_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSample) Reset() {
	*x = StreamSample{}
	mi := &file_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSample) ProtoMessage() {}

func (x *StreamSample) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSample.ProtoReflect.Descriptor instead.
func (*StreamSample) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *StreamSample) GetData() *SampleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamSample) GetDataTag() int32 {
	if x != nil {
		return x.DataTag
	}
	return 0
}

func (x *StreamSample) GetDataUuid() string {
	if x != nil && x.DataUuid != nil {
		return *x.DataUuid
	}
	return ""
}

type SampleData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DataPayload:
	//
	//	*SampleData_TensorData
	//	*SampleData_ImageData
	//	*SampleData_TextData
	DataPayload   isSampleData_DataPayload `protobuf_oneof:"data_payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SampleData) Reset() {
	*x = SampleData{}
	mi := &file_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleData) ProtoMessage() {}

func (x *SampleData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleData.ProtoReflect.Descriptor instead.
func (*SampleData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *SampleData) GetDataPayload() isSampleData_DataPayload {
	if x != nil {
		return x.DataPayload
	}
	return nil
}

func (x *SampleData) GetTensorData() *TensorData {
	if x != nil {
		if x, ok := x.DataPayload.(*SampleData_TensorData); ok {
			return x.TensorData
		}
	}
	return nil
}

func (x *SampleData) GetImageData() *ImageData {
	if x != nil {
		if x, ok := x.DataPayload.(*SampleData_ImageData); ok {
			return x.ImageData
		}
	}
	return nil
}

func (x *SampleData) GetTextData() *TextData {
	if x != nil {
		if x, ok := x.DataPayload.(*SampleData_TextData); ok {
			return x.TextData
		}
	}
	return nil
}

type isSampleData_DataPayload interface {
	isSampleData_DataPayload()
}

type SampleData_TensorData struct {
	TensorData *TensorData `protobuf:"bytes,1,opt,name=tensor_data,json=tensorData,proto3,oneof"`
}

type SampleData_ImageData struct {
	ImageData *ImageData `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3,oneof"`
}

type SampleData_TextData struct {
	TextData *TextData `protobuf:"bytes,3,opt,name=text_data,json=textData,proto3,oneof"`
}

func (*SampleData_TensorData) isSampleData_DataPayload() {}

func (*SampleData_ImageData) isSampleData_DataPayload() {}

func (*SampleData_TextData) isSampleData_DataPayload() {}

type TensorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // gzipped raw bytes
	Dtype         string                 `protobuf:"bytes,2,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Shape         []int32                `protobuf:"varint,3,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TensorData) Reset() {
	*x = TensorData{}
	mi := &file_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorData) ProtoMessage() {}

func (x *TensorData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorData.ProtoReflect.Descriptor instead.
func (*TensorData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *TensorData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TensorData) GetDtype() string {
	if x != nil {
		return x.Dtype
	}
	return ""
}

func (x *TensorData) GetShape() []int32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

type ImageData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // raw PNG bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *ImageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TextData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // string of text
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextData) Reset() {
	*x = TextData{}
	mi := &file_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextData) ProtoMessage() {}

func (x *TextData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextData.ProtoReflect.Descriptor instead.
func (*TextData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *TextData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

const file_message_proto_rawDesc = "" +
	"\n" +
	"\rmessage.proto\x12\x03p2p\"\x92\x02\n" +
	"\aMessage\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12!\n" +
	"\fcontent_type\x18\x02 \x01(\tR\vcontentType\x12\x18\n" +
	"\achannel\x18\x03 \x01(\tR\achannel\x12\x1c\n" +
	"\tpiggyback\x18\x04 \x01(\tR\tpiggyback\x12#\n" +
	"\rtimestamp_net\x18\x05 \x01(\tR\ftimestampNet\x12?\n" +
	"\rstream_sample\x18\x06 \x01(\v2\x18.p2p.StreamSampleContentH\x00R\fstreamSample\x12#\n" +
	"\fjson_content\x18\a \x01(\tH\x00R\vjsonContentB\t\n" +
	"\acontent\"\xa5\x01\n" +
	"\x13StreamSampleContent\x12?\n" +
	"\asamples\x18\x01 \x03(\v2%.p2p.StreamSampleContent.SamplesEntryR\asamples\x1aM\n" +
	"\fSamplesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.p2p.StreamSampleR\x05value:\x028\x01\"~\n" +
	"\fStreamSample\x12#\n" +
	"\x04data\x18\x01 \x01(\v2\x0f.p2p.SampleDataR\x04data\x12\x19\n" +
	"\bdata_tag\x18\x02 \x01(\x05R\adataTag\x12 \n" +
	"\tdata_uuid\x18\x03 \x01(\tH\x00R\bdataUuid\x88\x01\x01B\f\n" +
	"\n" +
	"_data_uuid\"\xaf\x01\n" +
	"\n" +
	"SampleData\x122\n" +
	"\vtensor_data\x18\x01 \x01(\v2\x0f.p2p.TensorDataH\x00R\n" +
	"tensorData\x12/\n" +
	"\n" +
	"image_data\x18\x02 \x01(\v2\x0e.p2p.ImageDataH\x00R\timageData\x12,\n" +
	"\ttext_data\x18\x03 \x01(\v2\r.p2p.TextDataH\x00R\btextDataB\x0e\n" +
	"\fdata_payload\"L\n" +
	"\n" +
	"TensorData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x14\n" +
	"\x05dtype\x18\x02 \x01(\tR\x05dtype\x12\x14\n" +
	"\x05shape\x18\x03 \x03(\x05R\x05shape\"\x1f\n" +
	"\tImageData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x1e\n" +
	"\bTextData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\tR\x04dataB\fZ\n" +
	"./proto-gob\x06proto3"

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData []byte
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)))
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_message_proto_goTypes = []any{
	(*Message)(nil),             // 0: p2p.Message
	(*StreamSampleContent)(nil), // 1: p2p.StreamSampleContent
	(*StreamSample)(nil),        // 2: p2p.StreamSample
	(*SampleData)(nil),          // 3: p2p.SampleData
	(*TensorData)(nil),          // 4: p2p.TensorData
	(*ImageData)(nil),           // 5: p2p.ImageData
	(*TextData)(nil),            // 6: p2p.TextData
	nil,                         // 7: p2p.StreamSampleContent.SamplesEntry
}
var file_message_proto_depIdxs = []int32{
	1, // 0: p2p.Message.stream_sample:type_name -> p2p.StreamSampleContent
	7, // 1: p2p.StreamSampleContent.samples:type_name -> p2p.StreamSampleContent.SamplesEntry
	3, // 2: p2p.StreamSample.data:type_name -> p2p.SampleData
	4, // 3: p2p.SampleData.tensor_data:type_name -> p2p.TensorData
	5, // 4: p2p.SampleData.image_data:type_name -> p2p.ImageData
	6, // 5: p2p.SampleData.text_data:type_name -> p2p.TextData
	2, // 6: p2p.StreamSampleContent.SamplesEntry.value:type_name -> p2p.StreamSample
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_message_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_StreamSample)(nil),
		(*Message_JsonContent)(nil),
	}
	file_message_proto_msgTypes[2].OneofWrappers = []any{}
	file_message_proto_msgTypes[3].OneofWrappers = []any{
		(*SampleData_TensorData)(nil),
		(*SampleData_ImageData)(nil),
		(*SampleData_TextData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
