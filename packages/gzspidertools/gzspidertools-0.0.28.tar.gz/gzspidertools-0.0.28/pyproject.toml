[project]
name = "gzspidertools"
version = "0.0.28"
description = "Scrapy Tools"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["crawler", "scraping", "scrapy-extension"]
dependencies = [
    "pymysql>=1.0.2,<2.0.0",
    "loguru>=0.7.0,<0.8.0",
    "scrapy==2.13.3",
    "sqlalchemy>=2.0.23,<3.0.0",
    "dbutils>=3.1.1,<4.0.0",
    "itemadapter>=0.7.0,<0.8.0",
    "aiohttp>=3.10.6,<3.11.0",
    "aiomysql>=0.1.1,<0.2.0",
    "pika>=1.3.2,<1.4.0",
    "kafka-python>=2.0.2,<2.1.0",
    "motor>=3.5.1,<3.6.0"
]

[project.optional-dependencies]
all = [
    "mmh3>=3.0.0,<4.0.0",
    "pycryptodome>=3.15.0,<4.0.0",
    "python-hcl2>=4.3.0,<5.0.0",
    "pyyaml>=6.0,<6.1",
    "opencv-python>=4.11.0.86,<4.12.0.0",
    "numpy>=2.0.1,<2.1.0",
    "psycopg[binary,pool]>=3.2.0,<3.3.0",
    "oracledb>=3.3.0,<4.0.0",
    "elasticsearch-dsl>=8.11.0,<9.0.0",
    "oss2>=2.18.4,<3.0.0",
    "aio-pika>=9.4.2,<9.5.0",
    "redis>=6.1.0,<6.2.0",
    "asyncpg>=0.30.0,<0.31.0"
]
database = [
    "psycopg[binary,pool]>=3.2.0,<3.3.0",
    "oracledb>=3.3.0,<4.0.0",
    "elasticsearch-dsl>=8.11.0,<9.0.0",
    "aio-pika>=9.4.2,<9.5.0",
    "redis>=6.1.0,<6.2.0",
    "asyncpg>=0.30.0,<0.31.0"
]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "ruff>=0.14.0",
    "toml>=0.10.2",
]

[project.scripts]
gzcmd = "gzspidertools.utils.cmdline:execute"

[tool.hatch.build.targets.wheel]
packages = ["gzspidertools"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["trae_agent"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == '__main__':",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "__repr__",
    "__str__",
]
precision = 2
fail_under = 30

[tool.ruff]
line-length = 120
unsafe-fixes = true
exclude = [
    ".github",
    ".venv",
    ".poetry",
    ".idea",
    ".vscode",
    ".macos",
]

[tool.ruff.lint]
extend-select = [
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # pydocstyle
    "D",
    # flake8-future-annotations
    "FA",
    # flynt
    "FLY",
    # refurb
    "FURB",
    # isort
    "I",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging
    "LOG",
    # Perflint
    "PERF",
    # pygrep-hooks
    "PGH",
    # flake8-pie
    "PIE",
    # pylint
    "PL",
    # flake8-pytest-style
    "PT",
    # flake8-use-pathlib
    "PTH",
    # flake8-pyi
    "PYI",
    # flake8-quotes
    "Q",
    # flake8-return
    "RET",
    # flake8-raise
    "RSE",
    # Ruff-specific rules
    "RUF",
    # flake8-bandit
    "S",
    # flake8-simplify
    "SIM",
    # flake8-slots
    "SLOT",
    # flake8-debugger
    "T10",
    # flake8-type-checking
    "TC",
    # flake8-tidy-imports
    "TID",
    # pyupgrade
    "UP",
    # pycodestyle warnings
    "W",
    # flake8-2020
    "YTT",
]
ignore = [
    # Ones we want to ignore

    # Missing docstring in public module
    "D100",
    # Missing docstring in public class
    "D101",
    # Missing docstring in public method
    "D102",
    # Missing docstring in public function
    "D103",
    # Missing docstring in public package
    "D104",
    # Missing docstring in magic method
    "D105",
    # Missing docstring in public nested class
    "D106",
    # Missing docstring in __init__
    "D107",
    # One-line docstring should fit on one line with quotes
    "D200",
    # No blank lines allowed after function docstring
    "D202",
    # 1 blank line required between summary line and description
    "D205",
    # Multi-line docstring closing quotes should be on a separate line
    "D209",
    # First line should end with a period
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    # First line should not be the function's "signature"
    "D402",
    # First word of the first line should be properly capitalized
    "D403",
    # `try`-`except` within a loop incurs performance overhead
    "PERF203",
    # Import alias does not rename original package
    "PLC0414",
    # Too many return statements
    "PLR0911",
    # Too many branches
    "PLR0912",
    # Too many arguments in function definition
    "PLR0913",
    # Too many statements
    "PLR0915",
    # Magic value used in comparison
    "PLR2004",
    # `for` loop variable overwritten by assignment target
    "PLW2901",
    # String contains ambiguous {}.
    "RUF001",
    # Docstring contains ambiguous {}.
    "RUF002",
    # Comment contains ambiguous {}.
    "RUF003",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # Use of `assert` detected; needed for mypy
    "S101",
    # FTP-related functions are being called
    "S321",
    # Argument default set to insecure SSL protocol
    "S503",
    # Use a context manager for opening files
    "SIM115",
    # Yoda condition detected
    "SIM300",
    # fix, ignore per-line or move to "don't want to fix"
    # Within an `except` clause, raise exceptions with `raise ... from`
    "B904",
    # Use `contextlib.suppress(ImportError)` instead of `try`-`except`-`pass`
    "SIM105",
    # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM117",
]

[[tool.uv.index]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
