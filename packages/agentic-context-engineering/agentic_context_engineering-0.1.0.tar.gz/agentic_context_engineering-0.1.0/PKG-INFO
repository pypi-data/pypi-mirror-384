Metadata-Version: 2.4
Name: agentic-context-engineering
Version: 0.1.0
Summary: Agentic Context Engineering utilities for OpenAI Agents.
Project-URL: Homepage, https://github.com/fulkerson-advisors/agentic-context-engineering
Project-URL: Repository, https://github.com/fulkerson-advisors/agentic-context-engineering
Project-URL: Issues, https://github.com/fulkerson-advisors/agentic-context-engineering/issues
Author: PulseChk LLC
License: MIT
License-File: LICENSE
Keywords: agents,context,faiss,llm,openai
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Requires-Dist: faiss-cpu
Requires-Dist: numpy
Requires-Dist: openai-agents
Requires-Dist: openai>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: python-dotenv
Provides-Extra: test
Requires-Dist: pytest>=8.0.0; extra == 'test'
Description-Content-Type: text/markdown

# Agentic Context Engineering (ACE)

Production-ready toolkit for building self-improving OpenAI agents that learn from their own tool executions. This repository implements the workflow introduced in **Agentic Context Engineering: Evolving Contexts for Self-Improving Language Models** (Zhang etâ€¯al., Stanford &amp; SambaNova, Octâ€¯2025) and packages it for practical use with the OpenAI Agents SDK.

---

## Why ACE?

The original ACE paper showed that treating prompts as evolving playbooksâ€”rather than repeatedly compressing themâ€”yields large gains on agent and finance benchmarks (+10â€¯pp vs. strong baselines) while cutting adaptation cost and latency. Two chronic issues in previous prompt optimizers were called out:

- **Brevity bias** â€“ iterative refiners drift toward terse, generic instructions that drop high-value tactics.
- **Context collapse** â€“ monolithic rewrites can suddenly shrink a carefully curated context to a few lines, erasing institutional knowledge.

ACE solves this by splitting responsibility across three lightweight roles:

| Component  | Responsibility | Effect |
|-----------|----------------|--------|
| **Generator** | Execute the task with current context | surfaces success/failure traces |
| **Reflector** | Diagnose trajectories, extract concrete lessons | preserves detail, avoids collapse |
| **Curator** | Merge lessons as *delta* bullets, deduplicate semantically | keeps contexts structured and scalable |

Each insight is a bullet with metadata (usage counts, timestamps, origin tool). Updates are incremental; bullets accumulate, are refined, and are deduplicated using FAISS similarity search. This repository mirrors that architecture so you can reproduce the paperâ€™s behaviour with OpenAIâ€™s APIs.

---

## Repository Tour

- `ace/core/` â€“ Curator, Reflector, and shared interfaces (Bullet, ToolExecution).
- `ace/agents/` â€“ Integration with the OpenAI Agents SDK (`ACEAgent` wrapper, framework shim).
- `ace/storage/` â€“ SQLite-backed bullet storage, FAISS similarity index, OpenAI embedder.
- `examples/` â€“ Standalone demos:
  - `simple_test.py` exercises each ACE component in isolation.
  - `weather_agent.py` shows ACE wrapped around an OpenAI Agent with reactive tool use.
- `scripts/manage_storage.py` â€“ CLI for setting up or tearing down the example SQLite/FAISS artefacts.

---

## Quick Start

### Prerequisites

- Python â‰¥ 3.10
- [uv](https://github.com/astral-sh/uv) (recommended) or plain `pip`
- OpenAI API key with access to your chosen models

### Installation

1. **Clone and enter the repo**
   ```bash
   git clone https://github.com/fulkerson-advisors/agentic-context-engineering
   cd ace
   ```
2. **Sync dependencies**
   ```bash
   uv sync
   ```
3. **Configure environment variables**
   ```bash
   cp .env.example .env
   # edit .env with your OpenAI API key and models
   ```
4. **(Optional) Activate the environment**
   ```bash
   source .venv/bin/activate
   ```
   or prefix commands with `uv run`.

---

## Storage Management

ACE persists two artefact types:

- **SQLite (`*.db`)** â€“ canonical bullet metadata: content, category, tool name, stats.
- **FAISS (`*.faiss`, `*.faiss.meta`)** â€“ semantic index used for deduplication and retrieval.

Use the helper script to manage the example files:

```bash
# Create the default example databases and FAISS indices
uv run python scripts/manage_storage.py setup

# Remove them again
uv run python scripts/manage_storage.py teardown
```

Custom paths are supported:

```bash
uv run python scripts/manage_storage.py setup \
  --db tmp/my_agent.db \
  --faiss tmp/my_agent.faiss \
  --dimension 3072 \
  --overwrite
```

> Note: embeddings now live only inside the FAISS index. If you delete the `.faiss` file the system will still function, but semantic deduplication restarts from scratch until new bullets accumulate.

To inspect whatâ€™s stored:

- SQLite: `sqlite3 examples/weather_agent.db` â†’ `.tables`, `.schema bullets`, `SELECT * FROM bullets;`
- FAISS: in Python:
  ```python
  from ace.storage.faiss_index import FAISSVectorIndex
  index = FAISSVectorIndex(dimension=1536, index_path="examples/weather_agent.faiss")
  print(index.index.ntotal)
  ```

---

## Running the Examples

Ensure storage artefacts exist (`manage_storage.py setup`) and your `.env` contains a valid `OPENAI_API_KEY`.

1. **Core component smoke test**
   ```bash
   uv run python examples/simple_test.py
   ```
   Demonstrates reflective learning and FAISS deduplication without the Agents SDK.

2. **Weather agent with OpenAI Agents SDK**
   ```bash
   uv run python examples/weather_agent.py
   ```
   Shows the full Generatorâ†’Reflectorâ†’Curator loop as the agent encounters erroneous tool calls, learns ACE bullets, and improves on subsequent queries.

---

## Configuration Reference

`.env.example` documents the supported variables:

| Variable | Purpose | Default behaviour |
|----------|---------|-------------------|
| `OPENAI_API_KEY` | Required for all OpenAI calls | â€“ |
| `OPENAI_MODEL` | Default generation/reflection model | Pass-through unless specialised overrides are set |
| `OPENAI_EMBEDDING_MODEL` | Embedding endpoint | Falls back to `text-embedding-3-small` if unset or non-embedding |
| `OPENAI_REFLECTOR_MODEL` | Reflector override | Falls back to `OPENAI_MODEL` or `gpt-4.1-mini` |

Override per-instance by passing `model=` when creating `OpenAIEmbedder` or `OpenAIReflector`.

---

## Extensibility

ACEâ€™s components are intentionally decoupled so you can swap pieces without rewriting the core loop:

- **Agent frameworks** â€“ `ACEAgent` wraps the OpenAI Agents SDK, but the `AgentFramework` interface lets you add bindings for LangGraph, DSPy, or custom orchestrators.
- **Vector stores** â€“ `FAISSVectorIndex` implements `VectorIndex`; drop in Milvus, Pinecone, Chroma, or pgvector by conforming to the same interface.
- **Storage backends** â€“ `SQLiteBulletStorage` is the default, yet you can back the curator with Postgres, DynamoDB, RedisJSON, etc. by subclassing `BulletStorage`.

This modularity keeps ACE adaptable as your stack evolves.

---

## Testing & Packaging

- Run the test suite (`test` extra optional but recommended):
  ```bash
  uv sync --extra test
  uv run pytest
  ```
- Build distributables for PyPI:
  ```bash
  uv build
  ```
- Publish after creating a token on PyPI (or TestPyPI):
  ```bash
  UV_PUBLISH_TOKEN=pypi-<token> uv publish
  ```
- Install the library directly from PyPI (after publishing):
  ```bash
  uv pip install agentic-context-engineering
  ```

---

## Project Status & Roadmap

- âœ… OpenAI Agents SDK integration mirroring ACEâ€™s architecture
- âœ… Structured reflector output via Pydantic parsing
- âœ… Semantic deduplication with FAISS
- âœ… Storage management CLI & documentation
- ðŸŸ¡ Possible future enhancements:
  - FAISS rebuild utility using stored bullets
  - Automated tests for multi-tool extraction and structured category handling
  - Pluggable vector backends

Issues and PRs are welcomeâ€”focus on shipping high-signal insights rather than sweeping rewrites.

---

## License

MIT Â© 2025 ACE contributors. See `LICENSE` for details.
