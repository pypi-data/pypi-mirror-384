# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from devopso.clients.confluence_cloud.models.search_page_response_search_result import SearchPageResponseSearchResult

from devopso.clients.confluence_cloud.api_client import ApiClient, RequestSerialized
from devopso.clients.confluence_cloud.api_response import ApiResponse
from devopso.clients.confluence_cloud.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_by_cql(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.")],
        cqlcontext: Annotated[Optional[StrictStr], Field(description="The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.")] = None,
        next: Optional[StrictBool] = None,
        prev: Optional[StrictBool] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The start point of the collection to return")] = None,
        include_archived_spaces: Annotated[Optional[StrictBool], Field(description="Whether to include content from archived spaces in the results.")] = None,
        exclude_current_spaces: Annotated[Optional[StrictBool], Field(description="Whether to exclude current spaces and only show archived spaces.")] = None,
        excerpt: Annotated[Optional[StrictStr], Field(description="The excerpt strategy to apply to the result")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        : Optional[StrictInt] = None,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchPageResponseSearchResult:
        """Search content

        Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: ``` /wiki/rest/api/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.  Example subsequent call (taken from example response): ``` /wiki/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
        :type cql: str
        :param cqlcontext: The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
        :type cqlcontext: str
        :param cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
        :type cursor: str
        :param next:
        :type next: bool
        :param prev:
        :type prev: bool
        :param limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param start: The start point of the collection to return
        :type start: int
        :param include_archived_spaces: Whether to include content from archived spaces in the results.
        :type include_archived_spaces: bool
        :param exclude_current_spaces: Whether to exclude current spaces and only show archived spaces.
        :type exclude_current_spaces: bool
        :param excerpt: The excerpt strategy to apply to the result
        :type excerpt: str
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param :
        :type : int
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_cql_serialize(
            cql=cql,
            cqlcontext=cqlcontext,
            cursor=cursor,
            next=next,
            prev=prev,
            limit=limit,
            start=start,
            include_archived_spaces=include_archived_spaces,
            exclude_current_spaces=exclude_current_spaces,
            excerpt=excerpt,
            site_permission_type_filter=site_permission_type_filter,
            =,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_by_cql_with_http_info(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.")],
        cqlcontext: Annotated[Optional[StrictStr], Field(description="The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.")] = None,
        next: Optional[StrictBool] = None,
        prev: Optional[StrictBool] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The start point of the collection to return")] = None,
        include_archived_spaces: Annotated[Optional[StrictBool], Field(description="Whether to include content from archived spaces in the results.")] = None,
        exclude_current_spaces: Annotated[Optional[StrictBool], Field(description="Whether to exclude current spaces and only show archived spaces.")] = None,
        excerpt: Annotated[Optional[StrictStr], Field(description="The excerpt strategy to apply to the result")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        : Optional[StrictInt] = None,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchPageResponseSearchResult]:
        """Search content

        Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: ``` /wiki/rest/api/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.  Example subsequent call (taken from example response): ``` /wiki/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
        :type cql: str
        :param cqlcontext: The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
        :type cqlcontext: str
        :param cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
        :type cursor: str
        :param next:
        :type next: bool
        :param prev:
        :type prev: bool
        :param limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param start: The start point of the collection to return
        :type start: int
        :param include_archived_spaces: Whether to include content from archived spaces in the results.
        :type include_archived_spaces: bool
        :param exclude_current_spaces: Whether to exclude current spaces and only show archived spaces.
        :type exclude_current_spaces: bool
        :param excerpt: The excerpt strategy to apply to the result
        :type excerpt: str
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param :
        :type : int
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_cql_serialize(
            cql=cql,
            cqlcontext=cqlcontext,
            cursor=cursor,
            next=next,
            prev=prev,
            limit=limit,
            start=start,
            include_archived_spaces=include_archived_spaces,
            exclude_current_spaces=exclude_current_spaces,
            excerpt=excerpt,
            site_permission_type_filter=site_permission_type_filter,
            =,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_by_cql_without_preload_content(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.")],
        cqlcontext: Annotated[Optional[StrictStr], Field(description="The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.")] = None,
        next: Optional[StrictBool] = None,
        prev: Optional[StrictBool] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The start point of the collection to return")] = None,
        include_archived_spaces: Annotated[Optional[StrictBool], Field(description="Whether to include content from archived spaces in the results.")] = None,
        exclude_current_spaces: Annotated[Optional[StrictBool], Field(description="Whether to exclude current spaces and only show archived spaces.")] = None,
        excerpt: Annotated[Optional[StrictStr], Field(description="The excerpt strategy to apply to the result")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        : Optional[StrictInt] = None,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search content

        Searches for content using the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.**  See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.  Example initial call: ``` /wiki/rest/api/search?cql=type=page&limit=25 ```  Example response: ``` {   \"results\": [     { ... },     { ... },     ...     { ... }   ],   \"limit\": 25,   \"size\": 25,   ...   \"_links\": {     \"base\": \"<url>\",     \"context\": \"<url>\",     \"next\": \"/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg\",     \"self\": \"<url>\"   } } ```  When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.  Example subsequent call (taken from example response): ``` /wiki/rest/api/search?cql=type=page&limit=25&cursor=raNDoMsTRiNg ``` The response to this will have a `prev` URL similar to the `next` in the example response.  If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the entities. Note, only entities that the user has permission to view will be returned.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query. (required)
        :type cql: str
        :param cqlcontext: The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
        :type cqlcontext: str
        :param cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
        :type cursor: str
        :param next:
        :type next: bool
        :param prev:
        :type prev: bool
        :param limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param start: The start point of the collection to return
        :type start: int
        :param include_archived_spaces: Whether to include content from archived spaces in the results.
        :type include_archived_spaces: bool
        :param exclude_current_spaces: Whether to exclude current spaces and only show archived spaces.
        :type exclude_current_spaces: bool
        :param excerpt: The excerpt strategy to apply to the result
        :type excerpt: str
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param :
        :type : int
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_cql_serialize(
            cql=cql,
            cqlcontext=cqlcontext,
            cursor=cursor,
            next=next,
            prev=prev,
            limit=limit,
            start=start,
            include_archived_spaces=include_archived_spaces,
            exclude_current_spaces=exclude_current_spaces,
            excerpt=excerpt,
            site_permission_type_filter=site_permission_type_filter,
            =,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_by_cql_serialize(
        self,
        cql,
        cqlcontext,
        cursor,
        next,
        prev,
        limit,
        start,
        include_archived_spaces,
        exclude_current_spaces,
        excerpt,
        site_permission_type_filter,
        ,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cql is not None:
            
            _query_params.append(('cql', cql))
            
        if cqlcontext is not None:
            
            _query_params.append(('cqlcontext', cqlcontext))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if next is not None:
            
            _query_params.append(('next', next))
            
        if prev is not None:
            
            _query_params.append(('prev', prev))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if include_archived_spaces is not None:
            
            _query_params.append(('includeArchivedSpaces', include_archived_spaces))
            
        if exclude_current_spaces is not None:
            
            _query_params.append(('excludeCurrentSpaces', exclude_current_spaces))
            
        if excerpt is not None:
            
            _query_params.append(('excerpt', excerpt))
            
        if site_permission_type_filter is not None:
            
            _query_params.append(('sitePermissionTypeFilter', site_permission_type_filter))
            
        if  is not None:
            
            _query_params.append(('_', ))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wiki/rest/api/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_user(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\"")],
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned users.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchPageResponseSearchResult:
        """Search users

        Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.  Note that some user fields may be set to null depending on the user's privacy settings. These are: email, profilePicture, displayName, and timeZone.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\" (required)
        :type cql: str
        :param start: The starting index of the returned users.
        :type start: int
        :param limit: The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param expand: A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.
        :type expand: List[str]
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_serialize(
            cql=cql,
            start=start,
            limit=limit,
            expand=expand,
            site_permission_type_filter=site_permission_type_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_user_with_http_info(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\"")],
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned users.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchPageResponseSearchResult]:
        """Search users

        Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.  Note that some user fields may be set to null depending on the user's privacy settings. These are: email, profilePicture, displayName, and timeZone.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\" (required)
        :type cql: str
        :param start: The starting index of the returned users.
        :type start: int
        :param limit: The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param expand: A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.
        :type expand: List[str]
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_serialize(
            cql=cql,
            start=start,
            limit=limit,
            expand=expand,
            site_permission_type_filter=site_permission_type_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_user_without_preload_content(
        self,
        cql: Annotated[StrictStr, Field(description="The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\"")],
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned users.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.")] = None,
        site_permission_type_filter: Annotated[Optional[StrictStr], Field(description="Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search users

        Searches for users using user-specific queries from the [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).  Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.  Note that some user fields may be set to null depending on the user's privacy settings. These are: email, profilePicture, displayName, and timeZone.

        :param cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user=\"1234\" will return user with accountId \"1234\"           You can also use IN, NOT IN, != operators           cql=user IN (\"12\", \"34\") will return users with accountids \"12\" and \"34\"           cql=user.fullname~jo will return users with nickname/full name starting with \"jo\"           cql=user.accountid=\"123\" will return user with accountId \"123\" (required)
        :type cql: str
        :param start: The starting index of the returned users.
        :type start: int
        :param limit: The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param expand: A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.
        :type expand: List[str]
        :param site_permission_type_filter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.
        :type site_permission_type_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_serialize(
            cql=cql,
            start=start,
            limit=limit,
            expand=expand,
            site_permission_type_filter=site_permission_type_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPageResponseSearchResult",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_user_serialize(
        self,
        cql,
        start,
        limit,
        expand,
        site_permission_type_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cql is not None:
            
            _query_params.append(('cql', cql))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if site_permission_type_filter is not None:
            
            _query_params.append(('sitePermissionTypeFilter', site_permission_type_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wiki/rest/api/search/user',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


