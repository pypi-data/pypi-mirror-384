# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content_look_and_feel import ContentLookAndFeel
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from devopso.clients.confluence_cloud.models.header_look_and_feel import HeaderLookAndFeel
from devopso.clients.confluence_cloud.models.horizontal_header_look_and_feel import HorizontalHeaderLookAndFeel
from devopso.clients.confluence_cloud.models.look_and_feel_headings import LookAndFeelHeadings
from devopso.clients.confluence_cloud.models.menus_look_and_feel import MenusLookAndFeel
from typing import Optional, Set
from typing_extensions import Self

class LookAndFeelWithLinks(BaseModel):
    """
    Look and feel settings returned after an update.
    """ # noqa: E501
    headings: LookAndFeelHeadings
    links: LookAndFeelHeadings
    menus: MenusLookAndFeel
    header: HeaderLookAndFeel
    horizontal_header: Optional[HorizontalHeaderLookAndFeel] = Field(default=None, alias="horizontalHeader")
    content: ContentLookAndFeel
    borders_and_dividers: LookAndFeelHeadings = Field(alias="bordersAndDividers")
    space_reference: Optional[Dict[str, Any]] = Field(default=None, alias="spaceReference")
    links: Optional[Dict[str, GenericLinksValue]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["headings", "links", "menus", "header", "horizontalHeader", "content", "bordersAndDividers", "spaceReference", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LookAndFeelWithLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headings
        if self.headings:
            _dict['headings'] = self.headings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of menus
        if self.menus:
            _dict['menus'] = self.menus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of horizontal_header
        if self.horizontal_header:
            _dict['horizontalHeader'] = self.horizontal_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of borders_and_dividers
        if self.borders_and_dividers:
            _dict['bordersAndDividers'] = self.borders_and_dividers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # set to None if space_reference (nullable) is None
        # and model_fields_set contains the field
        if self.space_reference is None and "space_reference" in self.model_fields_set:
            _dict['spaceReference'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LookAndFeelWithLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headings": LookAndFeelHeadings.from_dict(obj["headings"]) if obj.get("headings") is not None else None,
            "links": LookAndFeelHeadings.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "menus": MenusLookAndFeel.from_dict(obj["menus"]) if obj.get("menus") is not None else None,
            "header": HeaderLookAndFeel.from_dict(obj["header"]) if obj.get("header") is not None else None,
            "horizontalHeader": HorizontalHeaderLookAndFeel.from_dict(obj["horizontalHeader"]) if obj.get("horizontalHeader") is not None else None,
            "content": ContentLookAndFeel.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "bordersAndDividers": LookAndFeelHeadings.from_dict(obj["bordersAndDividers"]) if obj.get("bordersAndDividers") is not None else None,
            "spaceReference": obj.get("spaceReference"),
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


