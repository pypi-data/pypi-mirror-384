# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class AvailableContentStates(BaseModel):
    """
    AvailableContentStates
    """ # noqa: E501
    space_content_states: List[Dict[str, Any]] = Field(description="Space suggested content states that can be used in the space. This list can be empty if there are no space content states defined in the space or if space content states are disabled in the space. All spaces start with 4 default space content states, and this can be modified in the UI under space settings.", alias="spaceContentStates")
    custom_content_states: List[Dict[str, Any]] = Field(description="Custom content states that can be used by the user on the content of this call. This list can be empty if there are no custom content states defined by the user or if custom content states are disabled in the space of the content. This will at most have 3 of the most recently published content states.  Only the calling user has access to place these states on content, but all users can see these states once they are placed.", alias="customContentStates")
    __properties: ClassVar[List[str]] = ["spaceContentStates", "customContentStates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableContentStates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in space_content_states (list)
        _items = []
        if self.space_content_states:
            for _item_space_content_states in self.space_content_states:
                if _item_space_content_states:
                    _items.append(_item_space_content_states.to_dict())
            _dict['spaceContentStates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_content_states (list)
        _items = []
        if self.custom_content_states:
            for _item_custom_content_states in self.custom_content_states:
                if _item_custom_content_states:
                    _items.append(_item_custom_content_states.to_dict())
            _dict['customContentStates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableContentStates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spaceContentStates": [ContentState.from_dict(_item) for _item in obj["spaceContentStates"]] if obj.get("spaceContentStates") is not None else None,
            "customContentStates": [ContentState.from_dict(_item) for _item in obj["customContentStates"]] if obj.get("customContentStates") is not None else None
        })
        return _obj


