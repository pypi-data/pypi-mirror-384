# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.affected_object import AffectedObject
from devopso.clients.confluence_cloud.models.audit_record_create_author import AuditRecordCreateAuthor
from devopso.clients.confluence_cloud.models.changed_value import ChangedValue
from typing import Optional, Set
from typing_extensions import Self

class AuditRecordCreate(BaseModel):
    """
    AuditRecordCreate
    """ # noqa: E501
    author: Optional[AuditRecordCreateAuthor] = None
    remote_address: StrictStr = Field(description="The IP address of the computer where the event was initiated from.", alias="remoteAddress")
    creation_date: Optional[StrictInt] = Field(default=None, description="The creation date-time of the audit record, as a timestamp. This is converted to a date-time display in the Confluence UI. If the `creationDate` is not specified, then it will be set to the timestamp for the current date-time.", alias="creationDate")
    summary: Optional[StrictStr] = Field(default=None, description="The summary of the event, which is displayed in the 'Change' column on the audit log in the Confluence UI.")
    description: Optional[StrictStr] = Field(default=None, description="A long description of the event, which is displayed in the 'Description' field on the audit log in the Confluence UI.")
    category: Optional[StrictStr] = Field(default=None, description="The category of the event, which is displayed in the 'Event type' column on the audit log in the Confluence UI.")
    sys_admin: Optional[StrictBool] = Field(default=False, description="Indicates whether the event was actioned by a system administrator.", alias="sysAdmin")
    affected_object: Optional[AffectedObject] = Field(default=None, alias="affectedObject")
    changed_values: Optional[List[ChangedValue]] = Field(default=None, description="The values that were changed in the event.", alias="changedValues")
    associated_objects: Optional[List[AffectedObject]] = Field(default=None, description="Objects that were associated with the event. For example, if the event was a space permission change then the associated object would be the space.", alias="associatedObjects")
    __properties: ClassVar[List[str]] = ["author", "remoteAddress", "creationDate", "summary", "description", "category", "sysAdmin", "affectedObject", "changedValues", "associatedObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditRecordCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_object
        if self.affected_object:
            _dict['affectedObject'] = self.affected_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in changed_values (list)
        _items = []
        if self.changed_values:
            for _item_changed_values in self.changed_values:
                if _item_changed_values:
                    _items.append(_item_changed_values.to_dict())
            _dict['changedValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_objects (list)
        _items = []
        if self.associated_objects:
            for _item_associated_objects in self.associated_objects:
                if _item_associated_objects:
                    _items.append(_item_associated_objects.to_dict())
            _dict['associatedObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditRecordCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": AuditRecordCreateAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "remoteAddress": obj.get("remoteAddress"),
            "creationDate": obj.get("creationDate"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "category": obj.get("category"),
            "sysAdmin": obj.get("sysAdmin") if obj.get("sysAdmin") is not None else False,
            "affectedObject": AffectedObject.from_dict(obj["affectedObject"]) if obj.get("affectedObject") is not None else None,
            "changedValues": [ChangedValue.from_dict(_item) for _item in obj["changedValues"]] if obj.get("changedValues") is not None else None,
            "associatedObjects": [AffectedObject.from_dict(_item) for _item in obj["associatedObjects"]] if obj.get("associatedObjects") is not None else None
        })
        return _obj


