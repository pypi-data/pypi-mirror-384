# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from devopso.clients.confluence_cloud.models.version_expandable import VersionExpandable
from typing import Optional, Set
from typing_extensions import Self

class Version(BaseModel):
    """
    Version
    """ # noqa: E501
    by: Optional[User] = None
    when: Optional[datetime]
    friendly_when: Optional[StrictStr] = Field(default=None, alias="friendlyWhen")
    message: Optional[StrictStr] = None
    number: StrictInt = Field(description="Set this to the current version number incremented by one")
    minor_edit: StrictBool = Field(description="If `minorEdit` is set to 'true', no notification email or activity stream will be generated for the change.", alias="minorEdit")
    content: Optional[Content] = None
    collaborators: Optional[UsersUserKeys] = None
    expandable: Optional[VersionExpandable] = Field(default=None, alias="_expandable")
    links: Optional[Dict[str, GenericLinksValue]] = Field(default=None, alias="_links")
    content_type_modified: Optional[StrictBool] = Field(default=None, description="True if content type is modifed in this version (e.g. page to blog)", alias="contentTypeModified")
    conf_rev: Optional[StrictStr] = Field(default=None, description="The revision id provided by confluence to be used as a revision in Synchrony", alias="confRev")
    sync_rev: Optional[StrictStr] = Field(default=None, description="The revision id provided by Synchrony", alias="syncRev")
    sync_rev_source: Optional[StrictStr] = Field(default=None, description="Source of the synchrony revision", alias="syncRevSource")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["by", "when", "friendlyWhen", "message", "number", "minorEdit", "content", "collaborators", "_expandable", "_links", "contentTypeModified", "confRev", "syncRev", "syncRevSource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of by
        if self.by:
            _dict['by'] = self.by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collaborators
        if self.collaborators:
            _dict['collaborators'] = self.collaborators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expandable
        if self.expandable:
            _dict['_expandable'] = self.expandable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if by (nullable) is None
        # and model_fields_set contains the field
        if self.by is None and "by" in self.model_fields_set:
            _dict['by'] = None

        # set to None if when (nullable) is None
        # and model_fields_set contains the field
        if self.when is None and "when" in self.model_fields_set:
            _dict['when'] = None

        # set to None if friendly_when (nullable) is None
        # and model_fields_set contains the field
        if self.friendly_when is None and "friendly_when" in self.model_fields_set:
            _dict['friendlyWhen'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if collaborators (nullable) is None
        # and model_fields_set contains the field
        if self.collaborators is None and "collaborators" in self.model_fields_set:
            _dict['collaborators'] = None

        # set to None if conf_rev (nullable) is None
        # and model_fields_set contains the field
        if self.conf_rev is None and "conf_rev" in self.model_fields_set:
            _dict['confRev'] = None

        # set to None if sync_rev (nullable) is None
        # and model_fields_set contains the field
        if self.sync_rev is None and "sync_rev" in self.model_fields_set:
            _dict['syncRev'] = None

        # set to None if sync_rev_source (nullable) is None
        # and model_fields_set contains the field
        if self.sync_rev_source is None and "sync_rev_source" in self.model_fields_set:
            _dict['syncRevSource'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "by": User.from_dict(obj["by"]) if obj.get("by") is not None else None,
            "when": obj.get("when"),
            "friendlyWhen": obj.get("friendlyWhen"),
            "message": obj.get("message"),
            "number": obj.get("number"),
            "minorEdit": obj.get("minorEdit"),
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "collaborators": UsersUserKeys.from_dict(obj["collaborators"]) if obj.get("collaborators") is not None else None,
            "_expandable": VersionExpandable.from_dict(obj["_expandable"]) if obj.get("_expandable") is not None else None,
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None,
            "contentTypeModified": obj.get("contentTypeModified"),
            "confRev": obj.get("confRev"),
            "syncRev": obj.get("syncRev"),
            "syncRevSource": obj.get("syncRevSource")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from devopso.clients.confluence_cloud.models.content import Content
from devopso.clients.confluence_cloud.models.user import User
from devopso.clients.confluence_cloud.models.users_user_keys import UsersUserKeys
# TODO: Rewrite to not use raise_errors
Version.model_rebuild(raise_errors=False)

