# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content_body import ContentBody
from devopso.clients.confluence_cloud.models.content_child_type import ContentChildType
from devopso.clients.confluence_cloud.models.content_expandable import ContentExpandable
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from devopso.clients.confluence_cloud.models.operation_check_result import OperationCheckResult
from typing import Optional, Set
from typing_extensions import Self

class Content(BaseModel):
    """
    Base object for all content types.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: StrictStr = Field(description="Can be \"page\", \"blogpost\", \"attachment\" or \"content\"")
    status: StrictStr
    title: Optional[StrictStr] = None
    space: Optional[Space] = None
    history: Optional[ContentHistory] = None
    version: Optional[Version] = None
    ancestors: Optional[List[Optional[Content]]] = None
    operations: Optional[List[OperationCheckResult]] = None
    children: Optional[ContentChildren] = None
    child_types: Optional[ContentChildType] = Field(default=None, alias="childTypes")
    descendants: Optional[ContentChildren] = None
    container: Optional[Dict[str, Any]] = Field(default=None, description="Container for content. This can be either a space (containing a page or blogpost) or a page/blog post (containing an attachment or comment)")
    body: Optional[ContentBody] = None
    restrictions: Optional[ContentRestrictions] = None
    metadata: Optional[ContentMetadata] = None
    macro_rendered_output: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="macroRenderedOutput")
    extensions: Optional[Dict[str, Any]] = None
    expandable: Optional[ContentExpandable] = Field(default=None, alias="_expandable")
    links: Optional[Dict[str, GenericLinksValue]] = Field(default=None, alias="_links")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "status", "title", "space", "history", "version", "ancestors", "operations", "children", "childTypes", "descendants", "container", "body", "restrictions", "metadata", "macroRenderedOutput", "extensions", "_expandable", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Content from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space:
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of history
        if self.history:
            _dict['history'] = self.history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ancestors (list)
        _items = []
        if self.ancestors:
            for _item_ancestors in self.ancestors:
                if _item_ancestors:
                    _items.append(_item_ancestors.to_dict())
            _dict['ancestors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item_operations in self.operations:
                if _item_operations:
                    _items.append(_item_operations.to_dict())
            _dict['operations'] = _items
        # override the default output from pydantic by calling `to_dict()` of children
        if self.children:
            _dict['children'] = self.children.to_dict()
        # override the default output from pydantic by calling `to_dict()` of child_types
        if self.child_types:
            _dict['childTypes'] = self.child_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descendants
        if self.descendants:
            _dict['descendants'] = self.descendants.to_dict()
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expandable
        if self.expandable:
            _dict['_expandable'] = self.expandable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if space (nullable) is None
        # and model_fields_set contains the field
        if self.space is None and "space" in self.model_fields_set:
            _dict['space'] = None

        # set to None if history (nullable) is None
        # and model_fields_set contains the field
        if self.history is None and "history" in self.model_fields_set:
            _dict['history'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if ancestors (nullable) is None
        # and model_fields_set contains the field
        if self.ancestors is None and "ancestors" in self.model_fields_set:
            _dict['ancestors'] = None

        # set to None if container (nullable) is None
        # and model_fields_set contains the field
        if self.container is None and "container" in self.model_fields_set:
            _dict['container'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Content from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "history": ContentHistory.from_dict(obj["history"]) if obj.get("history") is not None else None,
            "version": Version.from_dict(obj["version"]) if obj.get("version") is not None else None,
            "ancestors": [Content.from_dict(_item) for _item in obj["ancestors"]] if obj.get("ancestors") is not None else None,
            "operations": [OperationCheckResult.from_dict(_item) for _item in obj["operations"]] if obj.get("operations") is not None else None,
            "children": ContentChildren.from_dict(obj["children"]) if obj.get("children") is not None else None,
            "childTypes": ContentChildType.from_dict(obj["childTypes"]) if obj.get("childTypes") is not None else None,
            "descendants": ContentChildren.from_dict(obj["descendants"]) if obj.get("descendants") is not None else None,
            "container": obj.get("container"),
            "body": ContentBody.from_dict(obj["body"]) if obj.get("body") is not None else None,
            "restrictions": ContentRestrictions.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "metadata": ContentMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "macroRenderedOutput": obj.get("macroRenderedOutput"),
            "extensions": obj.get("extensions"),
            "_expandable": ContentExpandable.from_dict(obj["_expandable"]) if obj.get("_expandable") is not None else None,
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from devopso.clients.confluence_cloud.models.content_children import ContentChildren
from devopso.clients.confluence_cloud.models.content_history import ContentHistory
from devopso.clients.confluence_cloud.models.content_metadata import ContentMetadata
from devopso.clients.confluence_cloud.models.content_restrictions import ContentRestrictions
from devopso.clients.confluence_cloud.models.space import Space
from devopso.clients.confluence_cloud.models.version import Version
# TODO: Rewrite to not use raise_errors
Content.model_rebuild(raise_errors=False)

