# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SystemInfoEntity(BaseModel):
    """
    SystemInfoEntity
    """ # noqa: E501
    cloud_id: StrictStr = Field(alias="cloudId")
    commit_hash: StrictStr = Field(alias="commitHash")
    base_url: Optional[StrictStr] = Field(default=None, alias="baseUrl")
    fallback_base_url: Optional[StrictStr] = Field(default=None, alias="fallbackBaseUrl")
    edition: Optional[StrictStr] = None
    site_title: Optional[StrictStr] = Field(default=None, alias="siteTitle")
    default_locale: Optional[StrictStr] = Field(default=None, alias="defaultLocale")
    default_time_zone: Optional[StrictStr] = Field(default=None, alias="defaultTimeZone")
    micros_perimeter: Optional[StrictStr] = Field(default=None, alias="microsPerimeter")
    __properties: ClassVar[List[str]] = ["cloudId", "commitHash", "baseUrl", "fallbackBaseUrl", "edition", "siteTitle", "defaultLocale", "defaultTimeZone", "microsPerimeter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemInfoEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemInfoEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudId": obj.get("cloudId"),
            "commitHash": obj.get("commitHash"),
            "baseUrl": obj.get("baseUrl"),
            "fallbackBaseUrl": obj.get("fallbackBaseUrl"),
            "edition": obj.get("edition"),
            "siteTitle": obj.get("siteTitle"),
            "defaultLocale": obj.get("defaultLocale"),
            "defaultTimeZone": obj.get("defaultTimeZone"),
            "microsPerimeter": obj.get("microsPerimeter")
        })
        return _obj


