# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.button_look_and_feel import ButtonLookAndFeel
from devopso.clients.confluence_cloud.models.navigation_look_and_feel import NavigationLookAndFeel
from devopso.clients.confluence_cloud.models.search_field_look_and_feel import SearchFieldLookAndFeel
from devopso.clients.confluence_cloud.models.top_navigation_look_and_feel import TopNavigationLookAndFeel
from typing import Optional, Set
from typing_extensions import Self

class HorizontalHeaderLookAndFeel(BaseModel):
    """
    HorizontalHeaderLookAndFeel
    """ # noqa: E501
    background_color: StrictStr = Field(alias="backgroundColor")
    button: Optional[ButtonLookAndFeel] = None
    primary_navigation: TopNavigationLookAndFeel = Field(alias="primaryNavigation")
    secondary_navigation: Optional[NavigationLookAndFeel] = Field(default=None, alias="secondaryNavigation")
    search: Optional[SearchFieldLookAndFeel] = None
    __properties: ClassVar[List[str]] = ["backgroundColor", "button", "primaryNavigation", "secondaryNavigation", "search"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HorizontalHeaderLookAndFeel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of button
        if self.button:
            _dict['button'] = self.button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_navigation
        if self.primary_navigation:
            _dict['primaryNavigation'] = self.primary_navigation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_navigation
        if self.secondary_navigation:
            _dict['secondaryNavigation'] = self.secondary_navigation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search
        if self.search:
            _dict['search'] = self.search.to_dict()
        # set to None if button (nullable) is None
        # and model_fields_set contains the field
        if self.button is None and "button" in self.model_fields_set:
            _dict['button'] = None

        # set to None if secondary_navigation (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_navigation is None and "secondary_navigation" in self.model_fields_set:
            _dict['secondaryNavigation'] = None

        # set to None if search (nullable) is None
        # and model_fields_set contains the field
        if self.search is None and "search" in self.model_fields_set:
            _dict['search'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HorizontalHeaderLookAndFeel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "button": ButtonLookAndFeel.from_dict(obj["button"]) if obj.get("button") is not None else None,
            "primaryNavigation": TopNavigationLookAndFeel.from_dict(obj["primaryNavigation"]) if obj.get("primaryNavigation") is not None else None,
            "secondaryNavigation": NavigationLookAndFeel.from_dict(obj["secondaryNavigation"]) if obj.get("secondaryNavigation") is not None else None,
            "search": SearchFieldLookAndFeel.from_dict(obj["search"]) if obj.get("search") is not None else None
        })
        return _obj


