# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.bulk_user_lookup_expandable import BulkUserLookupExpandable
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from devopso.clients.confluence_cloud.models.icon import Icon
from devopso.clients.confluence_cloud.models.operation_check_result import OperationCheckResult
from devopso.clients.confluence_cloud.models.space import Space
from devopso.clients.confluence_cloud.models.user_details import UserDetails
from typing import Optional, Set
from typing_extensions import Self

class BulkUserLookup(BaseModel):
    """
    BulkUserLookup
    """ # noqa: E501
    type: StrictStr
    username: Optional[StrictStr] = Field(default=None, description="This property is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.")
    user_key: Optional[StrictStr] = Field(default=None, description="This property is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.", alias="userKey")
    account_id: Optional[StrictStr] = Field(description="The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.", alias="accountId")
    account_type: StrictStr = Field(description="The account type of the user, may return empty string if unavailable.", alias="accountType")
    email: StrictStr = Field(description="The email address of the user. Depending on the user's privacy setting, this may return an empty string.")
    public_name: StrictStr = Field(description="The public name or nickname of the user. Will always contain a value.", alias="publicName")
    profile_picture: Optional[Icon] = Field(alias="profilePicture")
    display_name: StrictStr = Field(description="The displays name of the user. Depending on the user's privacy setting, this may be the same as publicName.", alias="displayName")
    time_zone: Optional[StrictStr] = Field(default=None, description="This displays user time zone. Depending on the user's privacy setting, this may return null.", alias="timeZone")
    is_external_collaborator: Optional[StrictBool] = Field(default=None, description="This is deprecated. Use `isGuest` instead to find out whether the user is a guest user.", alias="isExternalCollaborator")
    is_guest: Optional[StrictBool] = Field(default=None, description="Whether the user is a guest user", alias="isGuest")
    operations: Optional[List[OperationCheckResult]] = None
    details: Optional[UserDetails] = None
    personal_space: Optional[Space] = Field(default=None, alias="personalSpace")
    expandable: BulkUserLookupExpandable = Field(alias="_expandable")
    links: Dict[str, GenericLinksValue] = Field(alias="_links")
    __properties: ClassVar[List[str]] = ["type", "username", "userKey", "accountId", "accountType", "email", "publicName", "profilePicture", "displayName", "timeZone", "isExternalCollaborator", "isGuest", "operations", "details", "personalSpace", "_expandable", "_links"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['known', 'unknown', 'anonymous', 'user']):
            raise ValueError("must be one of enum values ('known', 'unknown', 'anonymous', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkUserLookup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile_picture
        if self.profile_picture:
            _dict['profilePicture'] = self.profile_picture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item_operations in self.operations:
                if _item_operations:
                    _items.append(_item_operations.to_dict())
            _dict['operations'] = _items
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personal_space
        if self.personal_space:
            _dict['personalSpace'] = self.personal_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expandable
        if self.expandable:
            _dict['_expandable'] = self.expandable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if user_key (nullable) is None
        # and model_fields_set contains the field
        if self.user_key is None and "user_key" in self.model_fields_set:
            _dict['userKey'] = None

        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict['accountId'] = None

        # set to None if profile_picture (nullable) is None
        # and model_fields_set contains the field
        if self.profile_picture is None and "profile_picture" in self.model_fields_set:
            _dict['profilePicture'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if personal_space (nullable) is None
        # and model_fields_set contains the field
        if self.personal_space is None and "personal_space" in self.model_fields_set:
            _dict['personalSpace'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkUserLookup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "username": obj.get("username"),
            "userKey": obj.get("userKey"),
            "accountId": obj.get("accountId"),
            "accountType": obj.get("accountType"),
            "email": obj.get("email"),
            "publicName": obj.get("publicName"),
            "profilePicture": Icon.from_dict(obj["profilePicture"]) if obj.get("profilePicture") is not None else None,
            "displayName": obj.get("displayName"),
            "timeZone": obj.get("timeZone"),
            "isExternalCollaborator": obj.get("isExternalCollaborator"),
            "isGuest": obj.get("isGuest"),
            "operations": [OperationCheckResult.from_dict(_item) for _item in obj["operations"]] if obj.get("operations") is not None else None,
            "details": UserDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "personalSpace": Space.from_dict(obj["personalSpace"]) if obj.get("personalSpace") is not None else None,
            "_expandable": BulkUserLookupExpandable.from_dict(obj["_expandable"]) if obj.get("_expandable") is not None else None,
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


