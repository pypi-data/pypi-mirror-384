# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content_body_create import ContentBodyCreate
from devopso.clients.confluence_cloud.models.content_body_create_storage import ContentBodyCreateStorage
from typing import Optional, Set
from typing_extensions import Self

class ContentUpdateBody(BaseModel):
    """
    The updated body of the content. Does not apply to attachments. If you are not sure how to generate these formats, you can create a page in the Confluence application, retrieve the content using [Get content](#api-content-get), and expand the desired content format, e.g. `expand=body.storage`.
    """ # noqa: E501
    view: Optional[ContentBodyCreate] = None
    export_view: Optional[ContentBodyCreate] = None
    styled_view: Optional[ContentBodyCreate] = None
    storage: Optional[ContentBodyCreateStorage] = None
    editor: Optional[ContentBodyCreate] = None
    editor2: Optional[ContentBodyCreate] = None
    wiki: Optional[ContentBodyCreate] = None
    atlas_doc_format: Optional[ContentBodyCreate] = None
    anonymous_export_view: Optional[ContentBodyCreate] = None
    __properties: ClassVar[List[str]] = ["view", "export_view", "styled_view", "storage", "editor", "editor2", "wiki", "atlas_doc_format", "anonymous_export_view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentUpdateBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_view
        if self.export_view:
            _dict['export_view'] = self.export_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of styled_view
        if self.styled_view:
            _dict['styled_view'] = self.styled_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of editor
        if self.editor:
            _dict['editor'] = self.editor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of editor2
        if self.editor2:
            _dict['editor2'] = self.editor2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wiki
        if self.wiki:
            _dict['wiki'] = self.wiki.to_dict()
        # override the default output from pydantic by calling `to_dict()` of atlas_doc_format
        if self.atlas_doc_format:
            _dict['atlas_doc_format'] = self.atlas_doc_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anonymous_export_view
        if self.anonymous_export_view:
            _dict['anonymous_export_view'] = self.anonymous_export_view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentUpdateBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "view": ContentBodyCreate.from_dict(obj["view"]) if obj.get("view") is not None else None,
            "export_view": ContentBodyCreate.from_dict(obj["export_view"]) if obj.get("export_view") is not None else None,
            "styled_view": ContentBodyCreate.from_dict(obj["styled_view"]) if obj.get("styled_view") is not None else None,
            "storage": ContentBodyCreateStorage.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "editor": ContentBodyCreate.from_dict(obj["editor"]) if obj.get("editor") is not None else None,
            "editor2": ContentBodyCreate.from_dict(obj["editor2"]) if obj.get("editor2") is not None else None,
            "wiki": ContentBodyCreate.from_dict(obj["wiki"]) if obj.get("wiki") is not None else None,
            "atlas_doc_format": ContentBodyCreate.from_dict(obj["atlas_doc_format"]) if obj.get("atlas_doc_format") is not None else None,
            "anonymous_export_view": ContentBodyCreate.from_dict(obj["anonymous_export_view"]) if obj.get("anonymous_export_view") is not None else None
        })
        return _obj


