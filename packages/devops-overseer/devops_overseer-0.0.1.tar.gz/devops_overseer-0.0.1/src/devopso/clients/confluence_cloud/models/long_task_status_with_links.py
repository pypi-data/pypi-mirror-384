# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from devopso.clients.confluence_cloud.models.long_task_status_name import LongTaskStatusName
from devopso.clients.confluence_cloud.models.long_task_status_with_links_additional_details import LongTaskStatusWithLinksAdditionalDetails
from devopso.clients.confluence_cloud.models.message import Message
from typing import Optional, Set
from typing_extensions import Self

class LongTaskStatusWithLinks(BaseModel):
    """
    Same as LongTaskStatus but with `_links` property.  Status keys:  - `ERROR_UNKNOWN` - Generic error - `ERROR_LOCK_FAILED` - Could not get the lock on destination space - `ERROR_RELINK` - Error when relink pages/attachments - `ERROR_COPY_PAGE` - Error while copying 1 page - `WARN_RENAME_PAGE` - Warning page is rename during copy - `WARN_IGNORE_COPY_PERMISSION` - Warning could not copy permission - `WARN_IGNORE_COPY_ATTACHMENT` - Warning could not copy attachment - `WARN_IGNORE_DELETE_PAGE` - Warning ignoring delete of a non agreed on page - `STATUS_COPIED_PAGES` - Message total pages are copied - `STATUS_COPYING_PAGES` - Message copy pages - `STATUS_RELINK_PAGES` - Message relink pages/attachments - `STATUS_DELETING_PAGES` - Message delete pages - `STATUS_DELETED_PAGES` - Message total pages are deleted - `STATUS_MOVING_PAGES` - Message move pages - `WARN_IGNORE_VIEW_RESTRICTED` - Permission changed - view restricted - `WARN_IGNORE_EDIT_RESTRICTED` - Permission changed - edit restricted - `INITIALIZING_TASK` - Message when initializing task - `UNKNOWN_STATUS` - Message when status is unknown
    """ # noqa: E501
    ari: Optional[StrictStr] = Field(default=None, description="the ARI for the long task, based on its ID")
    id: StrictStr
    name: LongTaskStatusName
    elapsed_time: StrictInt = Field(alias="elapsedTime")
    percentage_complete: StrictInt = Field(alias="percentageComplete")
    successful: StrictBool
    finished: StrictBool
    messages: List[Message]
    links: Dict[str, GenericLinksValue] = Field(alias="_links")
    status: Optional[StrictStr] = None
    errors: Optional[List[Message]] = None
    additional_details: Optional[LongTaskStatusWithLinksAdditionalDetails] = Field(default=None, alias="additionalDetails")
    __properties: ClassVar[List[str]] = ["ari", "id", "name", "elapsedTime", "percentageComplete", "successful", "finished", "messages", "_links", "status", "errors", "additionalDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongTaskStatusWithLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_details
        if self.additional_details:
            _dict['additionalDetails'] = self.additional_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongTaskStatusWithLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ari": obj.get("ari"),
            "id": obj.get("id"),
            "name": LongTaskStatusName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "elapsedTime": obj.get("elapsedTime"),
            "percentageComplete": obj.get("percentageComplete"),
            "successful": obj.get("successful"),
            "finished": obj.get("finished"),
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None,
            "status": obj.get("status"),
            "errors": [Message.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "additionalDetails": LongTaskStatusWithLinksAdditionalDetails.from_dict(obj["additionalDetails"]) if obj.get("additionalDetails") is not None else None
        })
        return _obj


