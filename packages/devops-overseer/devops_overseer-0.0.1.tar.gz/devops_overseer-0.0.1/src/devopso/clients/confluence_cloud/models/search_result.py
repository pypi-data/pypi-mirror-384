# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from devopso.clients.confluence_cloud.models.breadcrumb import Breadcrumb
from devopso.clients.confluence_cloud.models.container_summary import ContainerSummary
from devopso.clients.confluence_cloud.models.content import Content
from devopso.clients.confluence_cloud.models.space import Space
from devopso.clients.confluence_cloud.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class SearchResult(BaseModel):
    """
    SearchResult
    """ # noqa: E501
    content: Optional[Content] = None
    user: Optional[User] = None
    space: Optional[Space] = None
    title: StrictStr
    excerpt: StrictStr
    url: StrictStr
    result_parent_container: Optional[ContainerSummary] = Field(default=None, alias="resultParentContainer")
    result_global_container: Optional[ContainerSummary] = Field(default=None, alias="resultGlobalContainer")
    breadcrumbs: List[Breadcrumb]
    entity_type: StrictStr = Field(alias="entityType")
    icon_css_class: StrictStr = Field(alias="iconCssClass")
    last_modified: datetime = Field(alias="lastModified")
    friendly_last_modified: Optional[StrictStr] = Field(default=None, alias="friendlyLastModified")
    score: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["content", "user", "space", "title", "excerpt", "url", "resultParentContainer", "resultGlobalContainer", "breadcrumbs", "entityType", "iconCssClass", "lastModified", "friendlyLastModified", "score"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space:
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result_parent_container
        if self.result_parent_container:
            _dict['resultParentContainer'] = self.result_parent_container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result_global_container
        if self.result_global_container:
            _dict['resultGlobalContainer'] = self.result_global_container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in breadcrumbs (list)
        _items = []
        if self.breadcrumbs:
            for _item_breadcrumbs in self.breadcrumbs:
                if _item_breadcrumbs:
                    _items.append(_item_breadcrumbs.to_dict())
            _dict['breadcrumbs'] = _items
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if space (nullable) is None
        # and model_fields_set contains the field
        if self.space is None and "space" in self.model_fields_set:
            _dict['space'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "title": obj.get("title"),
            "excerpt": obj.get("excerpt"),
            "url": obj.get("url"),
            "resultParentContainer": ContainerSummary.from_dict(obj["resultParentContainer"]) if obj.get("resultParentContainer") is not None else None,
            "resultGlobalContainer": ContainerSummary.from_dict(obj["resultGlobalContainer"]) if obj.get("resultGlobalContainer") is not None else None,
            "breadcrumbs": [Breadcrumb.from_dict(_item) for _item in obj["breadcrumbs"]] if obj.get("breadcrumbs") is not None else None,
            "entityType": obj.get("entityType"),
            "iconCssClass": obj.get("iconCssClass"),
            "lastModified": obj.get("lastModified"),
            "friendlyLastModified": obj.get("friendlyLastModified"),
            "score": obj.get("score")
        })
        return _obj


