# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.operation_check_result import OperationCheckResult
from devopso.clients.confluence_cloud.models.space_permission_create_subjects import SpacePermissionCreateSubjects
from typing import Optional, Set
from typing_extensions import Self

class SpacePermissionCreate(BaseModel):
    """
    This object represents a permission for given space. Permissions consist of at least one operation object with an accompanying subjects object.  The following combinations of `operation` and `targetType` values are valid for the `operation` object:    - 'create': 'page', 'blogpost', 'comment', 'attachment'   - 'read': 'space'   - 'delete': 'page', 'blogpost', 'comment', 'attachment'   - 'export': 'space'   - 'administer': 'space'
    """ # noqa: E501
    subjects: Optional[SpacePermissionCreateSubjects] = None
    operation: OperationCheckResult
    anonymous_access: StrictBool = Field(description="Grant anonymous users permission to use the operation.", alias="anonymousAccess")
    unlicensed_access: StrictBool = Field(description="Grants access to unlicensed users from JIRA Service Desk when used with the 'read space' operation.", alias="unlicensedAccess")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["subjects", "operation", "anonymousAccess", "unlicensedAccess"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpacePermissionCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subjects
        if self.subjects:
            _dict['subjects'] = self.subjects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpacePermissionCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subjects": SpacePermissionCreateSubjects.from_dict(obj["subjects"]) if obj.get("subjects") is not None else None,
            "operation": OperationCheckResult.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "anonymousAccess": obj.get("anonymousAccess") if obj.get("anonymousAccess") is not None else False,
            "unlicensedAccess": obj.get("unlicensedAccess") if obj.get("unlicensedAccess") is not None else False
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


