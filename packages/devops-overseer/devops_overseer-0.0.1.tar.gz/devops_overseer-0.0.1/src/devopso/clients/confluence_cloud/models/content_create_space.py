# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content import Content
from devopso.clients.confluence_cloud.models.content_create_space_description import ContentCreateSpaceDescription
from devopso.clients.confluence_cloud.models.content_create_space_history import ContentCreateSpaceHistory
from devopso.clients.confluence_cloud.models.content_create_space_metadata import ContentCreateSpaceMetadata
from devopso.clients.confluence_cloud.models.global_space_identifier import GlobalSpaceIdentifier
from devopso.clients.confluence_cloud.models.icon import Icon
from devopso.clients.confluence_cloud.models.look_and_feel import LookAndFeel
from devopso.clients.confluence_cloud.models.operation_check_result import OperationCheckResult
from devopso.clients.confluence_cloud.models.space_permission import SpacePermission
from devopso.clients.confluence_cloud.models.space_settings import SpaceSettings
from devopso.clients.confluence_cloud.models.theme import Theme
from typing import Optional, Set
from typing_extensions import Self

class ContentCreateSpace(BaseModel):
    """
    The space that the content is being created in.
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    icon: Optional[Icon] = None
    identifiers: Optional[GlobalSpaceIdentifier] = None
    description: Optional[ContentCreateSpaceDescription] = None
    homepage: Optional[Content] = None
    type: Optional[StrictStr] = None
    metadata: Optional[ContentCreateSpaceMetadata] = None
    operations: Optional[List[OperationCheckResult]] = None
    permissions: Optional[List[SpacePermission]] = None
    status: Optional[StrictStr] = None
    settings: Optional[SpaceSettings] = None
    theme: Optional[Theme] = None
    look_and_feel: Optional[LookAndFeel] = Field(default=None, alias="lookAndFeel")
    history: Optional[ContentCreateSpaceHistory] = None
    key: StrictStr = Field(description="The key of the space.")
    links: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "icon", "identifiers", "description", "homepage", "type", "metadata", "operations", "permissions", "status", "settings", "theme", "lookAndFeel", "history", "key", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentCreateSpace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identifiers
        if self.identifiers:
            _dict['identifiers'] = self.identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of homepage
        if self.homepage:
            _dict['homepage'] = self.homepage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item_operations in self.operations:
                if _item_operations:
                    _items.append(_item_operations.to_dict())
            _dict['operations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of theme
        if self.theme:
            _dict['theme'] = self.theme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of look_and_feel
        if self.look_and_feel:
            _dict['lookAndFeel'] = self.look_and_feel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of history
        if self.history:
            _dict['history'] = self.history.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if identifiers (nullable) is None
        # and model_fields_set contains the field
        if self.identifiers is None and "identifiers" in self.model_fields_set:
            _dict['identifiers'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if homepage (nullable) is None
        # and model_fields_set contains the field
        if self.homepage is None and "homepage" in self.model_fields_set:
            _dict['homepage'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if operations (nullable) is None
        # and model_fields_set contains the field
        if self.operations is None and "operations" in self.model_fields_set:
            _dict['operations'] = None

        # set to None if permissions (nullable) is None
        # and model_fields_set contains the field
        if self.permissions is None and "permissions" in self.model_fields_set:
            _dict['permissions'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if settings (nullable) is None
        # and model_fields_set contains the field
        if self.settings is None and "settings" in self.model_fields_set:
            _dict['settings'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentCreateSpace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "icon": Icon.from_dict(obj["icon"]) if obj.get("icon") is not None else None,
            "identifiers": GlobalSpaceIdentifier.from_dict(obj["identifiers"]) if obj.get("identifiers") is not None else None,
            "description": ContentCreateSpaceDescription.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "homepage": Content.from_dict(obj["homepage"]) if obj.get("homepage") is not None else None,
            "type": obj.get("type"),
            "metadata": ContentCreateSpaceMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "operations": [OperationCheckResult.from_dict(_item) for _item in obj["operations"]] if obj.get("operations") is not None else None,
            "permissions": [SpacePermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "status": obj.get("status"),
            "settings": SpaceSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "theme": Theme.from_dict(obj["theme"]) if obj.get("theme") is not None else None,
            "lookAndFeel": LookAndFeel.from_dict(obj["lookAndFeel"]) if obj.get("lookAndFeel") is not None else None,
            "history": ContentCreateSpaceHistory.from_dict(obj["history"]) if obj.get("history") is not None else None,
            "key": obj.get("key"),
            "links": obj.get("links")
        })
        return _obj


