# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.screen_look_and_feel_layer import ScreenLookAndFeelLayer
from typing import Optional, Set
from typing_extensions import Self

class ScreenLookAndFeel(BaseModel):
    """
    ScreenLookAndFeel
    """ # noqa: E501
    background: StrictStr
    background_attachment: Optional[StrictStr] = Field(default=None, alias="backgroundAttachment")
    background_blend_mode: Optional[StrictStr] = Field(default=None, alias="backgroundBlendMode")
    background_clip: Optional[StrictStr] = Field(default=None, alias="backgroundClip")
    background_color: Optional[StrictStr] = Field(default=None, alias="backgroundColor")
    background_image: Optional[StrictStr] = Field(default=None, alias="backgroundImage")
    background_origin: Optional[StrictStr] = Field(default=None, alias="backgroundOrigin")
    background_position: Optional[StrictStr] = Field(default=None, alias="backgroundPosition")
    background_repeat: Optional[StrictStr] = Field(default=None, alias="backgroundRepeat")
    background_size: Optional[StrictStr] = Field(default=None, alias="backgroundSize")
    layer: Optional[ScreenLookAndFeelLayer] = None
    gutter_top: Optional[StrictStr] = Field(default=None, alias="gutterTop")
    gutter_right: Optional[StrictStr] = Field(default=None, alias="gutterRight")
    gutter_bottom: Optional[StrictStr] = Field(default=None, alias="gutterBottom")
    gutter_left: Optional[StrictStr] = Field(default=None, alias="gutterLeft")
    __properties: ClassVar[List[str]] = ["background", "backgroundAttachment", "backgroundBlendMode", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPosition", "backgroundRepeat", "backgroundSize", "layer", "gutterTop", "gutterRight", "gutterBottom", "gutterLeft"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScreenLookAndFeel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of layer
        if self.layer:
            _dict['layer'] = self.layer.to_dict()
        # set to None if background_attachment (nullable) is None
        # and model_fields_set contains the field
        if self.background_attachment is None and "background_attachment" in self.model_fields_set:
            _dict['backgroundAttachment'] = None

        # set to None if background_blend_mode (nullable) is None
        # and model_fields_set contains the field
        if self.background_blend_mode is None and "background_blend_mode" in self.model_fields_set:
            _dict['backgroundBlendMode'] = None

        # set to None if background_clip (nullable) is None
        # and model_fields_set contains the field
        if self.background_clip is None and "background_clip" in self.model_fields_set:
            _dict['backgroundClip'] = None

        # set to None if background_color (nullable) is None
        # and model_fields_set contains the field
        if self.background_color is None and "background_color" in self.model_fields_set:
            _dict['backgroundColor'] = None

        # set to None if background_image (nullable) is None
        # and model_fields_set contains the field
        if self.background_image is None and "background_image" in self.model_fields_set:
            _dict['backgroundImage'] = None

        # set to None if background_origin (nullable) is None
        # and model_fields_set contains the field
        if self.background_origin is None and "background_origin" in self.model_fields_set:
            _dict['backgroundOrigin'] = None

        # set to None if background_position (nullable) is None
        # and model_fields_set contains the field
        if self.background_position is None and "background_position" in self.model_fields_set:
            _dict['backgroundPosition'] = None

        # set to None if background_repeat (nullable) is None
        # and model_fields_set contains the field
        if self.background_repeat is None and "background_repeat" in self.model_fields_set:
            _dict['backgroundRepeat'] = None

        # set to None if background_size (nullable) is None
        # and model_fields_set contains the field
        if self.background_size is None and "background_size" in self.model_fields_set:
            _dict['backgroundSize'] = None

        # set to None if layer (nullable) is None
        # and model_fields_set contains the field
        if self.layer is None and "layer" in self.model_fields_set:
            _dict['layer'] = None

        # set to None if gutter_top (nullable) is None
        # and model_fields_set contains the field
        if self.gutter_top is None and "gutter_top" in self.model_fields_set:
            _dict['gutterTop'] = None

        # set to None if gutter_right (nullable) is None
        # and model_fields_set contains the field
        if self.gutter_right is None and "gutter_right" in self.model_fields_set:
            _dict['gutterRight'] = None

        # set to None if gutter_bottom (nullable) is None
        # and model_fields_set contains the field
        if self.gutter_bottom is None and "gutter_bottom" in self.model_fields_set:
            _dict['gutterBottom'] = None

        # set to None if gutter_left (nullable) is None
        # and model_fields_set contains the field
        if self.gutter_left is None and "gutter_left" in self.model_fields_set:
            _dict['gutterLeft'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScreenLookAndFeel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background": obj.get("background"),
            "backgroundAttachment": obj.get("backgroundAttachment"),
            "backgroundBlendMode": obj.get("backgroundBlendMode"),
            "backgroundClip": obj.get("backgroundClip"),
            "backgroundColor": obj.get("backgroundColor"),
            "backgroundImage": obj.get("backgroundImage"),
            "backgroundOrigin": obj.get("backgroundOrigin"),
            "backgroundPosition": obj.get("backgroundPosition"),
            "backgroundRepeat": obj.get("backgroundRepeat"),
            "backgroundSize": obj.get("backgroundSize"),
            "layer": ScreenLookAndFeelLayer.from_dict(obj["layer"]) if obj.get("layer") is not None else None,
            "gutterTop": obj.get("gutterTop"),
            "gutterRight": obj.get("gutterRight"),
            "gutterBottom": obj.get("gutterBottom"),
            "gutterLeft": obj.get("gutterLeft")
        })
        return _obj


