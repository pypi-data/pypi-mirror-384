# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from devopso.clients.confluence_cloud.models.relation import Relation
from devopso.clients.confluence_cloud.models.relation_array import RelationArray

from devopso.clients.confluence_cloud.api_client import ApiClient, RequestSerialized
from devopso.clients.confluence_cloud.api_response import ApiResponse
from devopso.clients.confluence_cloud.rest import RESTResponseType


class RelationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_relationship(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Relation:
        """Create relationship

        Creates a relationship between two entities (user, space, content). The 'favourite' relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a 'sibling' relationship between two pieces of content: `PUT /wiki/rest/api/relation/sibling/from/content/123/to/content/456`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission).

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_relationship_with_http_info(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Relation]:
        """Create relationship

        Creates a relationship between two entities (user, space, content). The 'favourite' relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a 'sibling' relationship between two pieces of content: `PUT /wiki/rest/api/relation/sibling/from/content/123/to/content/456`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission).

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_relationship_without_preload_content(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create relationship

        Creates a relationship between two entities (user, space, content). The 'favourite' relationship is supported by default, but you can use this method to create any type of relationship between two entities.  For example, the following method creates a 'sibling' relationship between two pieces of content: `PUT /wiki/rest/api/relation/sibling/from/content/123/to/content/456`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission).

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_relationship_serialize(
        self,
        relation_name,
        source_type,
        source_key,
        target_type,
        target_key,
        source_status,
        target_status,
        source_version,
        target_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if relation_name is not None:
            _path_params['relationName'] = relation_name
        if source_type is not None:
            _path_params['sourceType'] = source_type
        if source_key is not None:
            _path_params['sourceKey'] = source_key
        if target_type is not None:
            _path_params['targetType'] = target_type
        if target_key is not None:
            _path_params['targetKey'] = target_key
        # process the query parameters
        if source_status is not None:
            
            _query_params.append(('sourceStatus', source_status))
            
        if target_status is not None:
            
            _query_params.append(('targetStatus', target_status))
            
        if source_version is not None:
            
            _query_params.append(('sourceVersion', source_version))
            
        if target_version is not None:
            
            _query_params.append(('targetVersion', target_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_relationship(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete relationship

        Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.

        :param relation_name: The name of the relationship. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_relationship_with_http_info(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete relationship

        Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.

        :param relation_name: The name of the relationship. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_relationship_without_preload_content(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="- The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete relationship

        Deletes a relationship between two entities (user, space, content).  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site ('Can use' global permission). For favourite relationships, the current user can only delete their own favourite relationships. A space administrator can delete favourite relationships for any user.

        :param relation_name: The name of the relationship. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_relationship_serialize(
        self,
        relation_name,
        source_type,
        source_key,
        target_type,
        target_key,
        source_status,
        target_status,
        source_version,
        target_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if relation_name is not None:
            _path_params['relationName'] = relation_name
        if source_type is not None:
            _path_params['sourceType'] = source_type
        if source_key is not None:
            _path_params['sourceKey'] = source_key
        if target_type is not None:
            _path_params['targetType'] = target_type
        if target_key is not None:
            _path_params['targetKey'] = target_key
        # process the query parameters
        if source_status is not None:
            
            _query_params.append(('sourceStatus', source_status))
            
        if target_status is not None:
            
            _query_params.append(('targetStatus', target_status))
            
        if source_version is not None:
            
            _query_params.append(('sourceVersion', source_version))
            
        if target_version is not None:
            
            _query_params.append(('targetVersion', target_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_sources_for_target(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RelationArray:
        """Find source entities related to a target entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a 'collaborator' relationship to a piece of content with an ID of '1234': `GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user` Note, 'collaborator' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_sources_for_target_serialize(
            relation_name=relation_name,
            source_type=source_type,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_sources_for_target_with_http_info(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RelationArray]:
        """Find source entities related to a target entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a 'collaborator' relationship to a piece of content with an ID of '1234': `GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user` Note, 'collaborator' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_sources_for_target_serialize(
            relation_name=relation_name,
            source_type=source_type,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_sources_for_target_without_preload_content(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find source entities related to a target entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all users that have a 'collaborator' relationship to a piece of content with an ID of '1234': `GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user` Note, 'collaborator' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_sources_for_target_serialize(
            relation_name=relation_name,
            source_type=source_type,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_sources_for_target_serialize(
        self,
        relation_name,
        source_type,
        target_type,
        target_key,
        source_status,
        target_status,
        source_version,
        target_version,
        expand,
        start,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if relation_name is not None:
            _path_params['relationName'] = relation_name
        if source_type is not None:
            _path_params['sourceType'] = source_type
        if target_type is not None:
            _path_params['targetType'] = target_type
        if target_key is not None:
            _path_params['targetKey'] = target_key
        # process the query parameters
        if source_status is not None:
            
            _query_params.append(('sourceStatus', source_status))
            
        if target_status is not None:
            
            _query_params.append(('targetStatus', target_status))
            
        if source_version is not None:
            
            _query_params.append(('sourceVersion', source_version))
            
        if target_version is not None:
            
            _query_params.append(('targetVersion', target_version))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wiki/rest/api/relation/{relationName}/to/{targetType}/{targetKey}/from/{sourceType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_target_from_source(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        source_key: Annotated[StrictStr, Field(description="The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RelationArray:
        """Find target entities related to a source entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an 'ignore' relationship with: `GET /wiki/rest/api/relation/ignore/from/user/current/to/content` Note, 'ignore' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param source_key: The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_target_from_source_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_target_from_source_with_http_info(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        source_key: Annotated[StrictStr, Field(description="The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RelationArray]:
        """Find target entities related to a source entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an 'ignore' relationship with: `GET /wiki/rest/api/relation/ignore/from/user/current/to/content` Note, 'ignore' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param source_key: The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_target_from_source_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_target_from_source_without_preload_content(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship.")],
        source_key: Annotated[StrictStr, Field(description="The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting index of the returned relationships.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find target entities related to a source entity

        Returns all target entities that have a particular relationship to the source entity. Note, relationships are one way.  For example, the following method finds all content that the current user has an 'ignore' relationship with: `GET /wiki/rest/api/relation/ignore/from/user/current/to/content` Note, 'ignore' is an example custom relationship type.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships. (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. (required)
        :type source_type: str
        :param source_key: The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. (required)
        :type target_type: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param start: The starting index of the returned relationships.
        :type start: int
        :param limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_target_from_source_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RelationArray",
            '400': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_target_from_source_serialize(
        self,
        relation_name,
        source_type,
        source_key,
        target_type,
        source_status,
        target_status,
        source_version,
        target_version,
        expand,
        start,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if relation_name is not None:
            _path_params['relationName'] = relation_name
        if source_type is not None:
            _path_params['sourceType'] = source_type
        if source_key is not None:
            _path_params['sourceKey'] = source_key
        if target_type is not None:
            _path_params['targetType'] = target_type
        # process the query parameters
        if source_status is not None:
            
            _query_params.append(('sourceStatus', source_status))
            
        if target_status is not None:
            
            _query_params.append(('targetStatus', target_status))
            
        if source_version is not None:
            
            _query_params.append(('sourceVersion', source_version))
            
        if target_version is not None:
            
            _query_params.append(('targetVersion', target_version))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_relationship(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Relation:
        """Find relationship from source to target

        Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. 'save for later'): `GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_relationship_with_http_info(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Relation]:
        """Find relationship from source to target

        Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. 'save for later'): `GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_relationship_without_preload_content(
        self,
        relation_name: Annotated[StrictStr, Field(description="The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).")],
        source_type: Annotated[StrictStr, Field(description="The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.")],
        source_key: Annotated[StrictStr, Field(description="- The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.")],
        target_type: Annotated[StrictStr, Field(description="The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.")],
        target_key: Annotated[StrictStr, Field(description="The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.")],
        source_status: Annotated[Optional[StrictStr], Field(description="The status of the source. This parameter is only used when the `sourceType` is 'content'.")] = None,
        target_status: Annotated[Optional[StrictStr], Field(description="The status of the target. This parameter is only used when the `targetType` is 'content'.")] = None,
        source_version: Annotated[Optional[StrictInt], Field(description="The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.")] = None,
        target_version: Annotated[Optional[StrictInt], Field(description="The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.")] = None,
        expand: Annotated[Optional[List[StrictStr]], Field(description="A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find relationship from source to target

        Find whether a particular type of relationship exists from a source entity to a target entity. Note, relationships are one way.  For example, you can use this method to find whether the current user has selected a particular page as a favorite (i.e. 'save for later'): `GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123`  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view both the target entity and source entity.

        :param relation_name: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). (required)
        :type relation_name: str
        :param source_type: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'. (required)
        :type source_type: str
        :param source_key: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key. (required)
        :type source_key: str
        :param target_type: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'. (required)
        :type target_type: str
        :param target_key: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key. (required)
        :type target_key: str
        :param source_status: The status of the source. This parameter is only used when the `sourceType` is 'content'.
        :type source_status: str
        :param target_status: The status of the target. This parameter is only used when the `targetType` is 'content'.
        :type target_status: str
        :param source_version: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        :type source_version: int
        :param target_version: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.
        :type target_version: int
        :param expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relationship_serialize(
            relation_name=relation_name,
            source_type=source_type,
            source_key=source_key,
            target_type=target_type,
            target_key=target_key,
            source_status=source_status,
            target_status=target_status,
            source_version=source_version,
            target_version=target_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Relation",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_relationship_serialize(
        self,
        relation_name,
        source_type,
        source_key,
        target_type,
        target_key,
        source_status,
        target_status,
        source_version,
        target_version,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'expand': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if relation_name is not None:
            _path_params['relationName'] = relation_name
        if source_type is not None:
            _path_params['sourceType'] = source_type
        if source_key is not None:
            _path_params['sourceKey'] = source_key
        if target_type is not None:
            _path_params['targetType'] = target_type
        if target_key is not None:
            _path_params['targetKey'] = target_key
        # process the query parameters
        if source_status is not None:
            
            _query_params.append(('sourceStatus', source_status))
            
        if target_status is not None:
            
            _query_params.append(('targetStatus', target_status))
            
        if source_version is not None:
            
            _query_params.append(('sourceVersion', source_version))
            
        if target_version is not None:
            
            _query_params.append(('targetVersion', target_version))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oAuthDefinitions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wiki/rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


