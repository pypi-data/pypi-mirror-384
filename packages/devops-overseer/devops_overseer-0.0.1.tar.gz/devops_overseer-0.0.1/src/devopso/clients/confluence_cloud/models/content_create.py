# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from devopso.clients.confluence_cloud.models.content_create_ancestors_inner import ContentCreateAncestorsInner
from devopso.clients.confluence_cloud.models.content_create_body import ContentCreateBody
from devopso.clients.confluence_cloud.models.content_create_container import ContentCreateContainer
from devopso.clients.confluence_cloud.models.content_create_space import ContentCreateSpace
from typing import Optional, Set
from typing_extensions import Self

class ContentCreate(BaseModel):
    """
    ContentCreate
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the draft content. Required when publishing a draft.")
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    type: StrictStr = Field(description="The type of the new content. Custom content types defined by apps are also supported. eg. 'page', 'blogpost', 'comment' etc.")
    space: Optional[ContentCreateSpace] = None
    status: Optional[StrictStr] = Field(default='current', description="The status of the new content.")
    container: Optional[ContentCreateContainer] = None
    ancestors: Optional[List[ContentCreateAncestorsInner]] = Field(default=None, description="The parent content of the new content.  If you are creating a top-level `page` or `comment`, this can be left blank. If you are creating a child page, this is where the parent page id goes. If you are creating a child comment, this is where the parent comment id goes. Only one parent content id can be specified.")
    body: Optional[ContentCreateBody] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "title", "type", "space", "status", "container", "ancestors", "body"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['current', 'deleted', 'historical', 'draft']):
            raise ValueError("must be one of enum values ('current', 'deleted', 'historical', 'draft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space:
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ancestors (list)
        _items = []
        if self.ancestors:
            for _item_ancestors in self.ancestors:
                if _item_ancestors:
                    _items.append(_item_ancestors.to_dict())
            _dict['ancestors'] = _items
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if space (nullable) is None
        # and model_fields_set contains the field
        if self.space is None and "space" in self.model_fields_set:
            _dict['space'] = None

        # set to None if container (nullable) is None
        # and model_fields_set contains the field
        if self.container is None and "container" in self.model_fields_set:
            _dict['container'] = None

        # set to None if ancestors (nullable) is None
        # and model_fields_set contains the field
        if self.ancestors is None and "ancestors" in self.model_fields_set:
            _dict['ancestors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "space": ContentCreateSpace.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 'current',
            "container": ContentCreateContainer.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "ancestors": [ContentCreateAncestorsInner.from_dict(_item) for _item in obj["ancestors"]] if obj.get("ancestors") is not None else None,
            "body": ContentCreateBody.from_dict(obj["body"]) if obj.get("body") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


