# coding: utf-8

"""
    The Confluence Cloud REST API

    This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content_history_expandable import ContentHistoryExpandable
from devopso.clients.confluence_cloud.models.generic_links_value import GenericLinksValue
from typing import Optional, Set
from typing_extensions import Self

class ContentHistory(BaseModel):
    """
    ContentHistory
    """ # noqa: E501
    latest: StrictBool
    created_by: Optional[User] = Field(default=None, alias="createdBy")
    owned_by: Optional[User] = Field(default=None, alias="ownedBy")
    last_owned_by: Optional[User] = Field(default=None, alias="lastOwnedBy")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    last_updated: Optional[Version] = Field(default=None, alias="lastUpdated")
    previous_version: Optional[Version] = Field(default=None, alias="previousVersion")
    contributors: Optional[ContentHistoryContributors] = None
    next_version: Optional[Version] = Field(default=None, alias="nextVersion")
    expandable: Optional[ContentHistoryExpandable] = Field(default=None, alias="_expandable")
    links: Optional[Dict[str, GenericLinksValue]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["latest", "createdBy", "ownedBy", "lastOwnedBy", "createdDate", "lastUpdated", "previousVersion", "contributors", "nextVersion", "_expandable", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owned_by
        if self.owned_by:
            _dict['ownedBy'] = self.owned_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_owned_by
        if self.last_owned_by:
            _dict['lastOwnedBy'] = self.last_owned_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_updated
        if self.last_updated:
            _dict['lastUpdated'] = self.last_updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_version
        if self.previous_version:
            _dict['previousVersion'] = self.previous_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contributors
        if self.contributors:
            _dict['contributors'] = self.contributors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_version
        if self.next_version:
            _dict['nextVersion'] = self.next_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expandable
        if self.expandable:
            _dict['_expandable'] = self.expandable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['createdBy'] = None

        # set to None if owned_by (nullable) is None
        # and model_fields_set contains the field
        if self.owned_by is None and "owned_by" in self.model_fields_set:
            _dict['ownedBy'] = None

        # set to None if last_owned_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_owned_by is None and "last_owned_by" in self.model_fields_set:
            _dict['lastOwnedBy'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['lastUpdated'] = None

        # set to None if previous_version (nullable) is None
        # and model_fields_set contains the field
        if self.previous_version is None and "previous_version" in self.model_fields_set:
            _dict['previousVersion'] = None

        # set to None if next_version (nullable) is None
        # and model_fields_set contains the field
        if self.next_version is None and "next_version" in self.model_fields_set:
            _dict['nextVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latest": obj.get("latest"),
            "createdBy": User.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "ownedBy": User.from_dict(obj["ownedBy"]) if obj.get("ownedBy") is not None else None,
            "lastOwnedBy": User.from_dict(obj["lastOwnedBy"]) if obj.get("lastOwnedBy") is not None else None,
            "createdDate": obj.get("createdDate"),
            "lastUpdated": Version.from_dict(obj["lastUpdated"]) if obj.get("lastUpdated") is not None else None,
            "previousVersion": Version.from_dict(obj["previousVersion"]) if obj.get("previousVersion") is not None else None,
            "contributors": ContentHistoryContributors.from_dict(obj["contributors"]) if obj.get("contributors") is not None else None,
            "nextVersion": Version.from_dict(obj["nextVersion"]) if obj.get("nextVersion") is not None else None,
            "_expandable": ContentHistoryExpandable.from_dict(obj["_expandable"]) if obj.get("_expandable") is not None else None,
            "_links": dict(
                (_k, GenericLinksValue.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj

from devopso.clients.confluence_cloud.models.content_history_contributors import ContentHistoryContributors
from devopso.clients.confluence_cloud.models.user import User
from devopso.clients.confluence_cloud.models.version import Version
# TODO: Rewrite to not use raise_errors
ContentHistory.model_rebuild(raise_errors=False)

