
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class DenormalFpMath(IntEnum):
    """Denormal mode for fp math"""

    None_ = 0
    PreserveSign = 1
    PositiveZero = 2

    def __str__(self):
        if self is DenormalFpMath.None_:
            return "none"
        if self is DenormalFpMath.PreserveSign:
            return "preserve-sign"
        if self is DenormalFpMath.PositiveZero:
            return "positive-zero"
        raise ValueError("Unknown DenormalFpMath enum entry.")



class DispatchLoweringPassPipeline(IntEnum):
    """identifier for pass pipeline use to lower dispatch region"""

    CPUDefault = 0
    CPUDoubleTilingExpert = 1
    CPUConvTileAndDecomposeExpert = 2
    Mmt4dTilingExpert = 3
    CPUBufferOpsTileAndVectorize = 4
    CPUDataTiling = 5
    CPULinalgExtTileAndVectorize = 6
    LLVMGPUDefault = 100
    LLVMGPUBaseLowering = 101
    LLVMGPUDistribute = 102
    LLVMGPUVectorize = 103
    LLVMGPUTransposeSharedMem = 104
    LLVMGPUVectorDistribute = 105
    LLVMGPUWinogradVectorize = 106
    LLVMGPUTileAndFuse = 107
    SPIRVBaseLowering = 200
    SPIRVBaseDistribute = 201
    SPIRVBaseVectorize = 202
    SPIRVSubgroupReduce = 203
    SPIRVMatmulPromoteVectorize = 204
    SPIRVCooperativeMatrixVectorize = 205
    SPIRVWinogradVectorize = 206
    VMVXDefault = 300
    TransformDialectCodegen = 1000
    Custom = 1001
    None_ = 65535

    def __str__(self):
        if self is DispatchLoweringPassPipeline.CPUDefault:
            return "CPUDefault"
        if self is DispatchLoweringPassPipeline.CPUDoubleTilingExpert:
            return "CPUDoubleTilingExpert"
        if self is DispatchLoweringPassPipeline.CPUConvTileAndDecomposeExpert:
            return "CPUConvTileAndDecomposeExpert"
        if self is DispatchLoweringPassPipeline.Mmt4dTilingExpert:
            return "Mmt4dTilingExpert"
        if self is DispatchLoweringPassPipeline.CPUBufferOpsTileAndVectorize:
            return "CPUBufferOpsTileAndVectorize"
        if self is DispatchLoweringPassPipeline.CPUDataTiling:
            return "CPUDataTiling"
        if self is DispatchLoweringPassPipeline.CPULinalgExtTileAndVectorize:
            return "CPULinalgExtTileAndVectorize"
        if self is DispatchLoweringPassPipeline.LLVMGPUDefault:
            return "LLVMGPUDefault"
        if self is DispatchLoweringPassPipeline.LLVMGPUBaseLowering:
            return "LLVMGPUBaseLowering"
        if self is DispatchLoweringPassPipeline.LLVMGPUDistribute:
            return "LLVMGPUDistribute"
        if self is DispatchLoweringPassPipeline.LLVMGPUVectorize:
            return "LLVMGPUVectorize"
        if self is DispatchLoweringPassPipeline.LLVMGPUTransposeSharedMem:
            return "LLVMGPUTransposeSharedMem"
        if self is DispatchLoweringPassPipeline.LLVMGPUVectorDistribute:
            return "LLVMGPUVectorDistribute"
        if self is DispatchLoweringPassPipeline.LLVMGPUWinogradVectorize:
            return "LLVMGPUWinogradVectorize"
        if self is DispatchLoweringPassPipeline.LLVMGPUTileAndFuse:
            return "LLVMGPUTileAndFuse"
        if self is DispatchLoweringPassPipeline.SPIRVBaseLowering:
            return "SPIRVBaseLowering"
        if self is DispatchLoweringPassPipeline.SPIRVBaseDistribute:
            return "SPIRVBaseDistribute"
        if self is DispatchLoweringPassPipeline.SPIRVBaseVectorize:
            return "SPIRVBaseVectorize"
        if self is DispatchLoweringPassPipeline.SPIRVSubgroupReduce:
            return "SPIRVSubgroupReduce"
        if self is DispatchLoweringPassPipeline.SPIRVMatmulPromoteVectorize:
            return "SPIRVMatmulPromoteVectorize"
        if self is DispatchLoweringPassPipeline.SPIRVCooperativeMatrixVectorize:
            return "SPIRVCooperativeMatrixVectorize"
        if self is DispatchLoweringPassPipeline.SPIRVWinogradVectorize:
            return "SPIRVWinogradVectorize"
        if self is DispatchLoweringPassPipeline.VMVXDefault:
            return "VMVXDefault"
        if self is DispatchLoweringPassPipeline.TransformDialectCodegen:
            return "TransformDialectCodegen"
        if self is DispatchLoweringPassPipeline.Custom:
            return "Custom"
        if self is DispatchLoweringPassPipeline.None_:
            return "None"
        raise ValueError("Unknown DispatchLoweringPassPipeline enum entry.")



@register_attribute_builder("DispatchLoweringPassPipelineEnum")
def _dispatchloweringpasspipelineenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class UKernelArgumentKind(IntEnum):
    """Attribute describing the ukernel integration point"""

    Tensor = 0
    Memref = 1
    Bitcode = 2

    def __str__(self):
        if self is UKernelArgumentKind.Tensor:
            return "tensor"
        if self is UKernelArgumentKind.Memref:
            return "memref"
        if self is UKernelArgumentKind.Bitcode:
            return "bitcode"
        raise ValueError("Unknown UKernelArgumentKind enum entry.")



@register_attribute_builder("UKernelArgumentKindEnum")
def _ukernelargumentkindenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class WorkgroupId(IntEnum):
    """Attribute that map to hal.workgrpoup.ids"""

    IdX = 0
    IdY = 1
    IdZ = 2

    def __str__(self):
        if self is WorkgroupId.IdX:
            return "x"
        if self is WorkgroupId.IdY:
            return "y"
        if self is WorkgroupId.IdZ:
            return "z"
        raise ValueError("Unknown WorkgroupId enum entry.")



@register_attribute_builder("WorkgroupIdEnum")
def _workgroupidenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

@register_attribute_builder("DenormalFpMathAttr")
def _denormalfpmathattr(x, context):
    return _ods_ir.Attribute.parse(f'#iree_codegen.denormal_fp_math<{str(x)}>', context=context)

@register_attribute_builder("DispatchLoweringPassPipelineAttr")
def _dispatchloweringpasspipelineattr(x, context):
    return _ods_ir.Attribute.parse(f'#iree_codegen< {str(x)}>', context=context)

