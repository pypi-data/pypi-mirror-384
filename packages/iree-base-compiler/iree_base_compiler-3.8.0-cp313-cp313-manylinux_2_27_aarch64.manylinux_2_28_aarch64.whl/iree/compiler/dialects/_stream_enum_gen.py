
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class CollectiveElementType(IntEnum):
    """valid CollectiveElementType"""

    Sint8 = 0
    Uint8 = 1
    Sint16 = 2
    Uint16 = 3
    Sint32 = 4
    Uint32 = 5
    Sint64 = 6
    Uint64 = 7
    Float16 = 8
    Float32 = 9
    Float64 = 10
    BFloat16 = 11

    def __str__(self):
        if self is CollectiveElementType.Sint8:
            return "si8"
        if self is CollectiveElementType.Uint8:
            return "ui8"
        if self is CollectiveElementType.Sint16:
            return "si16"
        if self is CollectiveElementType.Uint16:
            return "ui16"
        if self is CollectiveElementType.Sint32:
            return "si32"
        if self is CollectiveElementType.Uint32:
            return "ui32"
        if self is CollectiveElementType.Sint64:
            return "si64"
        if self is CollectiveElementType.Uint64:
            return "ui64"
        if self is CollectiveElementType.Float16:
            return "f16"
        if self is CollectiveElementType.Float32:
            return "f32"
        if self is CollectiveElementType.Float64:
            return "f64"
        if self is CollectiveElementType.BFloat16:
            return "bf16"
        raise ValueError("Unknown CollectiveElementType enum entry.")



@register_attribute_builder("Stream_CollectiveElementTypeAttr")
def _stream_collectiveelementtypeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CollectiveKind(IntEnum):
    """valid CollectiveKind"""

    AllGather = 0
    AllReduce = 1
    AllToAll = 2
    Broadcast = 3
    Reduce = 4
    ReduceScatter = 5
    Send = 6
    Recv = 7
    SendRecv = 8

    def __str__(self):
        if self is CollectiveKind.AllGather:
            return "all_gather"
        if self is CollectiveKind.AllReduce:
            return "all_reduce"
        if self is CollectiveKind.AllToAll:
            return "all_to_all"
        if self is CollectiveKind.Broadcast:
            return "broadcast"
        if self is CollectiveKind.Reduce:
            return "reduce"
        if self is CollectiveKind.ReduceScatter:
            return "reduce_scatter"
        if self is CollectiveKind.Send:
            return "send"
        if self is CollectiveKind.Recv:
            return "recv"
        if self is CollectiveKind.SendRecv:
            return "send_recv"
        raise ValueError("Unknown CollectiveKind enum entry.")



@register_attribute_builder("Stream_CollectiveKindAttr")
def _stream_collectivekindattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CollectiveReductionOp(IntEnum):
    """valid CollectiveReductionOp"""

    None_ = 0
    ReductionSum = 1
    ReductionProduct = 2
    ReductionMinimum = 3
    ReductionMaximum = 4
    ReductionAverage = 5

    def __str__(self):
        if self is CollectiveReductionOp.None_:
            return "none"
        if self is CollectiveReductionOp.ReductionSum:
            return "sum"
        if self is CollectiveReductionOp.ReductionProduct:
            return "product"
        if self is CollectiveReductionOp.ReductionMinimum:
            return "minimum"
        if self is CollectiveReductionOp.ReductionMaximum:
            return "maximum"
        if self is CollectiveReductionOp.ReductionAverage:
            return "average"
        raise ValueError("Unknown CollectiveReductionOp enum entry.")



@register_attribute_builder("Stream_CollectiveReductionOpAttr")
def _stream_collectivereductionopattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Favor(IntEnum):
    """IREE partitioning bias"""

    Debug = 0
    MinPeakMemory = 1
    MaxConcurrency = 2

    def __str__(self):
        if self is Favor.Debug:
            return "debug"
        if self is Favor.MinPeakMemory:
            return "min-peak-memory"
        if self is Favor.MaxConcurrency:
            return "max-concurrency"
        raise ValueError("Unknown Favor enum entry.")



@register_attribute_builder("Stream_FavorAttr")
def _stream_favorattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Lifetime(IntEnum):
    """IREE Stream value lifetime"""

    Unknown = 0
    External = 1
    Staging = 2
    Transient = 3
    Variable = 4
    Constant = 5

    def __str__(self):
        if self is Lifetime.Unknown:
            return "*"
        if self is Lifetime.External:
            return "external"
        if self is Lifetime.Staging:
            return "staging"
        if self is Lifetime.Transient:
            return "transient"
        if self is Lifetime.Variable:
            return "variable"
        if self is Lifetime.Constant:
            return "constant"
        raise ValueError("Unknown Lifetime enum entry.")



@register_attribute_builder("Stream_LifetimeAttr")
def _stream_lifetimeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemoryModel(IntEnum):
    """stream resource memory model"""

    Unified = 0
    Discrete = 1

    def __str__(self):
        if self is MemoryModel.Unified:
            return "Unified"
        if self is MemoryModel.Discrete:
            return "Discrete"
        raise ValueError("Unknown MemoryModel enum entry.")



@register_attribute_builder("Stream_MemoryModelAttr")
def _stream_memorymodelattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ResourceAccessBitfield(IntFlag):
    """valid ResourceAccess"""

    None_ = 0
    Read = 1
    Write = 2

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ResourceAccessBitfield.None_:
            return "None"
        if self is ResourceAccessBitfield.Read:
            return "Read"
        if self is ResourceAccessBitfield.Write:
            return "Write"
        raise ValueError("Unknown ResourceAccessBitfield enum entry.")



@register_attribute_builder("Stream_ResourceAccessBitfieldAttr")
def _stream_resourceaccessbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

