
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class AccessScopeBitfield(IntFlag):
    """valid AccessScope"""

    None_ = 0
    IndirectCommandRead = 1
    ConstantRead = 2
    DispatchRead = 4
    DispatchWrite = 8
    TransferRead = 16
    TransferWrite = 32
    HostRead = 64
    HostWrite = 128
    MemoryRead = 256
    MemoryWrite = 512

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is AccessScopeBitfield.None_:
            return "None"
        if self is AccessScopeBitfield.IndirectCommandRead:
            return "IndirectCommandRead"
        if self is AccessScopeBitfield.ConstantRead:
            return "ConstantRead"
        if self is AccessScopeBitfield.DispatchRead:
            return "DispatchRead"
        if self is AccessScopeBitfield.DispatchWrite:
            return "DispatchWrite"
        if self is AccessScopeBitfield.TransferRead:
            return "TransferRead"
        if self is AccessScopeBitfield.TransferWrite:
            return "TransferWrite"
        if self is AccessScopeBitfield.HostRead:
            return "HostRead"
        if self is AccessScopeBitfield.HostWrite:
            return "HostWrite"
        if self is AccessScopeBitfield.MemoryRead:
            return "MemoryRead"
        if self is AccessScopeBitfield.MemoryWrite:
            return "MemoryWrite"
        raise ValueError("Unknown AccessScopeBitfield enum entry.")



@register_attribute_builder("HAL_AccessScopeBitfieldAttr")
def _hal_accessscopebitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AllocaFlagBitfield(IntFlag):
    """valid AllocaFlag"""

    None_ = 0
    IndeterminateLifetime = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is AllocaFlagBitfield.None_:
            return "None"
        if self is AllocaFlagBitfield.IndeterminateLifetime:
            return "IndeterminateLifetime"
        raise ValueError("Unknown AllocaFlagBitfield enum entry.")



@register_attribute_builder("HAL_AllocaFlagBitfieldAttr")
def _hal_allocaflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class BufferUsageBitfield(IntFlag):
    """valid BufferUsage"""

    None_ = 0
    TransferSource = 1
    TransferTarget = 2
    Transfer = 3
    DispatchIndirectParameters = 256
    DispatchUniformRead = 512
    DispatchStorageRead = 1024
    DispatchStorageWrite = 2048
    DispatchStorage = 3072
    DispatchImageRead = 4096
    DispatchImageWrite = 8192
    DispatchImage = 12288
    SharingExport = 65536
    SharingReplicate = 131072
    SharingConcurrent = 262144
    SharingImmutable = 524288
    MappingScoped = 16777216
    MappingPersistent = 33554432
    MappingOptional = 67108864
    MappingAccessRandom = 134217728
    MappingAccessSequentialWrite = 268435456
    Mapping = 150994944

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is BufferUsageBitfield.None_:
            return "None"
        if self is BufferUsageBitfield.TransferSource:
            return "TransferSource"
        if self is BufferUsageBitfield.TransferTarget:
            return "TransferTarget"
        if self is BufferUsageBitfield.Transfer:
            return "Transfer"
        if self is BufferUsageBitfield.DispatchIndirectParameters:
            return "DispatchIndirectParameters"
        if self is BufferUsageBitfield.DispatchUniformRead:
            return "DispatchUniformRead"
        if self is BufferUsageBitfield.DispatchStorageRead:
            return "DispatchStorageRead"
        if self is BufferUsageBitfield.DispatchStorageWrite:
            return "DispatchStorageWrite"
        if self is BufferUsageBitfield.DispatchStorage:
            return "DispatchStorage"
        if self is BufferUsageBitfield.DispatchImageRead:
            return "DispatchImageRead"
        if self is BufferUsageBitfield.DispatchImageWrite:
            return "DispatchImageWrite"
        if self is BufferUsageBitfield.DispatchImage:
            return "DispatchImage"
        if self is BufferUsageBitfield.SharingExport:
            return "SharingExport"
        if self is BufferUsageBitfield.SharingReplicate:
            return "SharingReplicate"
        if self is BufferUsageBitfield.SharingConcurrent:
            return "SharingConcurrent"
        if self is BufferUsageBitfield.SharingImmutable:
            return "SharingImmutable"
        if self is BufferUsageBitfield.MappingScoped:
            return "MappingScoped"
        if self is BufferUsageBitfield.MappingPersistent:
            return "MappingPersistent"
        if self is BufferUsageBitfield.MappingOptional:
            return "MappingOptional"
        if self is BufferUsageBitfield.MappingAccessRandom:
            return "MappingAccessRandom"
        if self is BufferUsageBitfield.MappingAccessSequentialWrite:
            return "MappingAccessSequentialWrite"
        if self is BufferUsageBitfield.Mapping:
            return "Mapping"
        raise ValueError("Unknown BufferUsageBitfield enum entry.")



@register_attribute_builder("HAL_BufferUsageBitfieldAttr")
def _hal_bufferusagebitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CallingConvention(IntEnum):
    """Calling conversions for linked functions"""

    Default = 0

    def __str__(self):
        if self is CallingConvention.Default:
            return "Default"
        raise ValueError("Unknown CallingConvention enum entry.")



@register_attribute_builder("HAL_CallingConventionAttr")
def _hal_callingconventionattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ChannelFlagBitfield(IntFlag):
    """valid ChannelFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ChannelFlagBitfield.None_:
            return "None"
        if self is ChannelFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown ChannelFlagBitfield enum entry.")



@register_attribute_builder("HAL_ChannelFlagBitfieldAttr")
def _hal_channelflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class CollectiveElementType(IntEnum):
    """valid CollectiveElementType"""

    Sint8 = 0
    Uint8 = 1
    Sint16 = 2
    Uint16 = 3
    Sint32 = 4
    Uint32 = 5
    Sint64 = 6
    Uint64 = 7
    Float16 = 8
    Float32 = 9
    Float64 = 10
    BFloat16 = 11
    Float8E5M2 = 12
    Float8E4M3FN = 13
    Float8E5M2FNUZ = 14
    Float8E4M3FNUZ = 15

    def __str__(self):
        if self is CollectiveElementType.Sint8:
            return "si8"
        if self is CollectiveElementType.Uint8:
            return "ui8"
        if self is CollectiveElementType.Sint16:
            return "si16"
        if self is CollectiveElementType.Uint16:
            return "ui16"
        if self is CollectiveElementType.Sint32:
            return "si32"
        if self is CollectiveElementType.Uint32:
            return "ui32"
        if self is CollectiveElementType.Sint64:
            return "si64"
        if self is CollectiveElementType.Uint64:
            return "ui64"
        if self is CollectiveElementType.Float16:
            return "f16"
        if self is CollectiveElementType.Float32:
            return "f32"
        if self is CollectiveElementType.Float64:
            return "f64"
        if self is CollectiveElementType.BFloat16:
            return "bf16"
        if self is CollectiveElementType.Float8E5M2:
            return "f8E5M2"
        if self is CollectiveElementType.Float8E4M3FN:
            return "f8E4M3FN"
        if self is CollectiveElementType.Float8E5M2FNUZ:
            return "f8E5M2FNUZ"
        if self is CollectiveElementType.Float8E4M3FNUZ:
            return "f8E4M3FNUZ"
        raise ValueError("Unknown CollectiveElementType enum entry.")



@register_attribute_builder("HAL_CollectiveElementTypeAttr")
def _hal_collectiveelementtypeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CollectiveKind(IntEnum):
    """valid CollectiveKind"""

    AllGather = 0
    AllReduce = 1
    AllToAll = 2
    Broadcast = 3
    Reduce = 4
    ReduceScatter = 5
    Send = 6
    Recv = 7
    SendRecv = 8

    def __str__(self):
        if self is CollectiveKind.AllGather:
            return "all_gather"
        if self is CollectiveKind.AllReduce:
            return "all_reduce"
        if self is CollectiveKind.AllToAll:
            return "all_to_all"
        if self is CollectiveKind.Broadcast:
            return "broadcast"
        if self is CollectiveKind.Reduce:
            return "reduce"
        if self is CollectiveKind.ReduceScatter:
            return "reduce_scatter"
        if self is CollectiveKind.Send:
            return "send"
        if self is CollectiveKind.Recv:
            return "recv"
        if self is CollectiveKind.SendRecv:
            return "send_recv"
        raise ValueError("Unknown CollectiveKind enum entry.")



@register_attribute_builder("HAL_CollectiveKindAttr")
def _hal_collectivekindattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CollectiveReductionOp(IntEnum):
    """valid CollectiveReductionOp"""

    None_ = 0
    ReductionSum = 1
    ReductionProduct = 2
    ReductionMinimum = 3
    ReductionMaximum = 4
    ReductionAverage = 5

    def __str__(self):
        if self is CollectiveReductionOp.None_:
            return "none"
        if self is CollectiveReductionOp.ReductionSum:
            return "sum"
        if self is CollectiveReductionOp.ReductionProduct:
            return "product"
        if self is CollectiveReductionOp.ReductionMinimum:
            return "minimum"
        if self is CollectiveReductionOp.ReductionMaximum:
            return "maximum"
        if self is CollectiveReductionOp.ReductionAverage:
            return "average"
        raise ValueError("Unknown CollectiveReductionOp enum entry.")



@register_attribute_builder("HAL_CollectiveReductionOpAttr")
def _hal_collectivereductionopattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CommandBufferModeBitfield(IntFlag):
    """valid CommandBufferMode"""

    None_ = 0
    OneShot = 1
    AllowInlineExecution = 16

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is CommandBufferModeBitfield.None_:
            return "None"
        if self is CommandBufferModeBitfield.OneShot:
            return "OneShot"
        if self is CommandBufferModeBitfield.AllowInlineExecution:
            return "AllowInlineExecution"
        raise ValueError("Unknown CommandBufferModeBitfield enum entry.")



@register_attribute_builder("HAL_CommandBufferModeBitfieldAttr")
def _hal_commandbuffermodebitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CommandCategoryBitfield(IntFlag):
    """valid CommandCategory"""

    None_ = 0
    Transfer = 1
    Dispatch = 2

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is CommandCategoryBitfield.None_:
            return "None"
        if self is CommandCategoryBitfield.Transfer:
            return "Transfer"
        if self is CommandCategoryBitfield.Dispatch:
            return "Dispatch"
        raise ValueError("Unknown CommandCategoryBitfield enum entry.")



@register_attribute_builder("HAL_CommandCategoryBitfieldAttr")
def _hal_commandcategorybitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CopyFlagBitfield(IntFlag):
    """valid CopyFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is CopyFlagBitfield.None_:
            return "None"
        if self is CopyFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown CopyFlagBitfield enum entry.")



@register_attribute_builder("HAL_CopyFlagBitfieldAttr")
def _hal_copyflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class DeallocaFlagBitfield(IntFlag):
    """valid DeallocaFlag"""

    None_ = 0
    PreferOrigin = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is DeallocaFlagBitfield.None_:
            return "None"
        if self is DeallocaFlagBitfield.PreferOrigin:
            return "PreferOrigin"
        raise ValueError("Unknown DeallocaFlagBitfield enum entry.")



@register_attribute_builder("HAL_DeallocaFlagBitfieldAttr")
def _hal_deallocaflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class DescriptorFlags(IntFlag):
    """valid Descriptor flags"""

    None_ = 0
    ReadOnly = 1
    Indirect = 2

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is DescriptorFlags.None_:
            return "None"
        if self is DescriptorFlags.ReadOnly:
            return "ReadOnly"
        if self is DescriptorFlags.Indirect:
            return "Indirect"
        raise ValueError("Unknown DescriptorFlags enum entry.")



@register_attribute_builder("HAL_DescriptorFlagsAttr")
def _hal_descriptorflagsattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class DispatchFlags(IntFlag):
    """valid dispatch flags"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is DispatchFlags.None_:
            return "None"
        if self is DispatchFlags.Reserved:
            return "Reserved"
        raise ValueError("Unknown DispatchFlags enum entry.")



@register_attribute_builder("HAL_DispatchFlagsAttr")
def _hal_dispatchflagsattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class ExecuteFlagBitfield(IntFlag):
    """valid ExecuteFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ExecuteFlagBitfield.None_:
            return "None"
        if self is ExecuteFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown ExecuteFlagBitfield enum entry.")



@register_attribute_builder("HAL_ExecuteFlagBitfieldAttr")
def _hal_executeflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class ExecutionBarrierFlagBitfield(IntFlag):
    """valid ExecutionBarrierFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ExecutionBarrierFlagBitfield.None_:
            return "None"
        if self is ExecutionBarrierFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown ExecutionBarrierFlagBitfield enum entry.")



@register_attribute_builder("HAL_ExecutionBarrierFlagBitfieldAttr")
def _hal_executionbarrierflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class ExecutionStageBitfield(IntFlag):
    """valid ExecutionStage"""

    None_ = 0
    CommandIssue = 1
    CommandProcess = 2
    Dispatch = 4
    Transfer = 8
    CommandRetire = 16
    Host = 32

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ExecutionStageBitfield.None_:
            return "None"
        if self is ExecutionStageBitfield.CommandIssue:
            return "CommandIssue"
        if self is ExecutionStageBitfield.CommandProcess:
            return "CommandProcess"
        if self is ExecutionStageBitfield.Dispatch:
            return "Dispatch"
        if self is ExecutionStageBitfield.Transfer:
            return "Transfer"
        if self is ExecutionStageBitfield.CommandRetire:
            return "CommandRetire"
        if self is ExecutionStageBitfield.Host:
            return "Host"
        raise ValueError("Unknown ExecutionStageBitfield enum entry.")



@register_attribute_builder("HAL_ExecutionStageBitfieldAttr")
def _hal_executionstagebitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class FenceFlagBitfield(IntFlag):
    """valid FenceFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is FenceFlagBitfield.None_:
            return "None"
        if self is FenceFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown FenceFlagBitfield enum entry.")



@register_attribute_builder("HAL_FenceFlagBitfieldAttr")
def _hal_fenceflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class FillFlagBitfield(IntFlag):
    """valid FillFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is FillFlagBitfield.None_:
            return "None"
        if self is FillFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown FillFlagBitfield enum entry.")



@register_attribute_builder("HAL_FillFlagBitfieldAttr")
def _hal_fillflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class Lifetime(IntEnum):
    """IREE HAL value lifetime"""

    Unknown = 0
    External = 1
    Staging = 2
    Transient = 3
    Variable = 4
    Constant = 5

    def __str__(self):
        if self is Lifetime.Unknown:
            return "*"
        if self is Lifetime.External:
            return "external"
        if self is Lifetime.Staging:
            return "staging"
        if self is Lifetime.Transient:
            return "transient"
        if self is Lifetime.Variable:
            return "variable"
        if self is Lifetime.Constant:
            return "constant"
        raise ValueError("Unknown Lifetime enum entry.")



@register_attribute_builder("HAL_LifetimeAttr")
def _hal_lifetimeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemoryAccessBitfield(IntFlag):
    """valid MemoryAccess"""

    None_ = 0
    Read = 1
    Write = 2
    Discard = 4
    MayAlias = 8
    Unaligned = 16
    Any = 32

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is MemoryAccessBitfield.None_:
            return "None"
        if self is MemoryAccessBitfield.Read:
            return "Read"
        if self is MemoryAccessBitfield.Write:
            return "Write"
        if self is MemoryAccessBitfield.Discard:
            return "Discard"
        if self is MemoryAccessBitfield.MayAlias:
            return "MayAlias"
        if self is MemoryAccessBitfield.Unaligned:
            return "Unaligned"
        if self is MemoryAccessBitfield.Any:
            return "Any"
        raise ValueError("Unknown MemoryAccessBitfield enum entry.")



@register_attribute_builder("HAL_MemoryAccessBitfieldAttr")
def _hal_memoryaccessbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemoryModel(IntEnum):
    """IREE HAL MemoryModel"""

    Unified = 0
    Discrete = 1

    def __str__(self):
        if self is MemoryModel.Unified:
            return "Unified"
        if self is MemoryModel.Discrete:
            return "Discrete"
        raise ValueError("Unknown MemoryModel enum entry.")



@register_attribute_builder("HAL_MemoryModelAttr")
def _hal_memorymodelattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemoryTypeBitfield(IntFlag):
    """valid MemoryType"""

    None_ = 0
    Optimal = 1
    HostVisible = 2
    HostCoherent = 4
    HostCached = 8
    HostLocal = 70
    DeviceVisible = 16
    DeviceLocal = 48

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is MemoryTypeBitfield.None_:
            return "None"
        if self is MemoryTypeBitfield.Optimal:
            return "Optimal"
        if self is MemoryTypeBitfield.HostVisible:
            return "HostVisible"
        if self is MemoryTypeBitfield.HostCoherent:
            return "HostCoherent"
        if self is MemoryTypeBitfield.HostCached:
            return "HostCached"
        if self is MemoryTypeBitfield.HostLocal:
            return "HostLocal"
        if self is MemoryTypeBitfield.DeviceVisible:
            return "DeviceVisible"
        if self is MemoryTypeBitfield.DeviceLocal:
            return "DeviceLocal"
        raise ValueError("Unknown MemoryTypeBitfield enum entry.")



@register_attribute_builder("HAL_MemoryTypeBitfieldAttr")
def _hal_memorytypebitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class PipelineLayoutFlags(IntFlag):
    """valid PipelineLayout flags"""

    None_ = 0
    Indirect = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is PipelineLayoutFlags.None_:
            return "None"
        if self is PipelineLayoutFlags.Indirect:
            return "Indirect"
        raise ValueError("Unknown PipelineLayoutFlags enum entry.")



@register_attribute_builder("HAL_PipelineLayoutFlagsAttr")
def _hal_pipelinelayoutflagsattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReadFlagBitfield(IntFlag):
    """valid ReadFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is ReadFlagBitfield.None_:
            return "None"
        if self is ReadFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown ReadFlagBitfield enum entry.")



@register_attribute_builder("HAL_ReadFlagBitfieldAttr")
def _hal_readflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class UpdateFlagBitfield(IntFlag):
    """valid UpdateFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is UpdateFlagBitfield.None_:
            return "None"
        if self is UpdateFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown UpdateFlagBitfield enum entry.")



@register_attribute_builder("HAL_UpdateFlagBitfieldAttr")
def _hal_updateflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class WaitFlagBitfield(IntFlag):
    """valid WaitFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is WaitFlagBitfield.None_:
            return "None"
        if self is WaitFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown WaitFlagBitfield enum entry.")



@register_attribute_builder("HAL_WaitFlagBitfieldAttr")
def _hal_waitflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class WriteFlagBitfield(IntFlag):
    """valid WriteFlag"""

    None_ = 0
    Reserved = 1

    def __iter__(self):
        return iter([case for case in type(self) if (self & case) is case and self is not case])
    def __len__(self):
        return bin(self).count("1")

    def __str__(self):
        if len(self) > 1:
            return "|".join(map(str, self))
        if self is WriteFlagBitfield.None_:
            return "None"
        if self is WriteFlagBitfield.Reserved:
            return "Reserved"
        raise ValueError("Unknown WriteFlagBitfield enum entry.")



@register_attribute_builder("HAL_WriteFlagBitfieldAttr")
def _hal_writeflagbitfieldattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class DescriptorType(IntEnum):
    """valid DescriptorType"""

    UniformBuffer = 6
    StorageBuffer = 7

    def __str__(self):
        if self is DescriptorType.UniformBuffer:
            return "uniform_buffer"
        if self is DescriptorType.StorageBuffer:
            return "storage_buffer"
        raise ValueError("Unknown DescriptorType enum entry.")



@register_attribute_builder("anonymous_578")
def _anonymous_578(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

@register_attribute_builder("HAL_DescriptorTypeAttr")
def _hal_descriptortypeattr(x, context):
    return _ods_ir.Attribute.parse(f'#hal.descriptor_type<{str(x)}>', context=context)

