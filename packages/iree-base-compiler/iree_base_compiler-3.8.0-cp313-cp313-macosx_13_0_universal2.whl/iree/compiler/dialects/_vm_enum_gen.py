
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class Opcode(IntEnum):
    """valid VM core operation encodings"""

    GlobalLoadI32 = 0
    GlobalStoreI32 = 1
    GlobalLoadIndirectI32 = 2
    GlobalStoreIndirectI32 = 3
    GlobalLoadI64 = 4
    GlobalStoreI64 = 5
    GlobalLoadIndirectI64 = 6
    GlobalStoreIndirectI64 = 7
    GlobalLoadRef = 8
    GlobalStoreRef = 9
    GlobalLoadIndirectRef = 10
    GlobalStoreIndirectRef = 11
    ConstI32Zero = 12
    ConstI32 = 13
    ConstI64Zero = 14
    ConstI64 = 15
    ConstRefZero = 16
    ConstRefRodata = 17
    ListAlloc = 18
    ListReserve = 19
    ListSize = 20
    ListResize = 21
    ListGetI32 = 22
    ListSetI32 = 23
    ListGetI64 = 24
    ListSetI64 = 25
    ListGetRef = 26
    ListSetRef = 27
    SelectI32 = 28
    SelectI64 = 29
    SelectRef = 30
    SwitchI32 = 31
    SwitchI64 = 32
    SwitchRef = 33
    AddI32 = 34
    SubI32 = 35
    MulI32 = 36
    DivI32S = 37
    DivI32U = 38
    RemI32S = 39
    RemI32U = 40
    FMAI32 = 41
    AbsI32 = 119
    MinI32S = 122
    MinI32U = 123
    MaxI32S = 124
    MaxI32U = 125
    AddI64 = 42
    SubI64 = 43
    MulI64 = 44
    DivI64S = 45
    DivI64U = 46
    RemI64S = 47
    RemI64U = 48
    FMAI64 = 49
    AbsI64 = 120
    MinI64S = 126
    MinI64U = 127
    MaxI64S = 128
    MaxI64U = 129
    NotI32 = 50
    AndI32 = 51
    OrI32 = 52
    XorI32 = 53
    CtlzI32 = 117
    NotI64 = 54
    AndI64 = 55
    OrI64 = 56
    XorI64 = 57
    CtlzI64 = 118
    ShlI32 = 58
    ShrI32S = 59
    ShrI32U = 60
    ShlI64 = 61
    ShrI64S = 62
    ShrI64U = 63
    TruncI32I8 = 64
    TruncI32I16 = 65
    TruncI64I32 = 66
    ExtI8I32S = 67
    ExtI8I32U = 68
    ExtI16I32S = 69
    ExtI16I32U = 70
    ExtI32I64S = 71
    ExtI32I64U = 72
    CastAnyRef = 130
    CmpEQI32 = 73
    CmpNEI32 = 74
    CmpLTI32S = 75
    CmpLTI32U = 76
    CmpNZI32 = 77
    CmpEQI64 = 78
    CmpNEI64 = 79
    CmpLTI64S = 80
    CmpLTI64U = 81
    CmpNZI64 = 82
    CmpEQRef = 83
    CmpNERef = 84
    CmpNZRef = 85
    Branch = 86
    CondBranch = 87
    BranchTable = 131
    Call = 88
    CallVariadic = 89
    Return = 90
    Fail = 91
    ImportResolved = 92
    Yield = 93
    Trace = 94
    Print = 95
    CondBreak = 96
    Break = 97
    BufferLoadI8U = 98
    BufferLoadI8S = 99
    BufferLoadI16U = 100
    BufferLoadI16S = 101
    BufferLoadI32 = 102
    BufferLoadI64 = 103
    BufferStoreI8 = 104
    BufferStoreI16 = 105
    BufferStoreI32 = 106
    BufferStoreI64 = 107
    BufferAlloc = 108
    BufferClone = 109
    BufferLength = 110
    BufferFillI8 = 113
    BufferFillI16 = 114
    BufferFillI32 = 115
    BufferFillI64 = 116
    BufferCopy = 111
    BufferCompare = 112
    BufferHash = 132
    Block = 121
    PrefixExtF32 = 224
    PrefixExtF64 = 225

    def __str__(self):
        if self is Opcode.GlobalLoadI32:
            return "GlobalLoadI32"
        if self is Opcode.GlobalStoreI32:
            return "GlobalStoreI32"
        if self is Opcode.GlobalLoadIndirectI32:
            return "GlobalLoadIndirectI32"
        if self is Opcode.GlobalStoreIndirectI32:
            return "GlobalStoreIndirectI32"
        if self is Opcode.GlobalLoadI64:
            return "GlobalLoadI64"
        if self is Opcode.GlobalStoreI64:
            return "GlobalStoreI64"
        if self is Opcode.GlobalLoadIndirectI64:
            return "GlobalLoadIndirectI64"
        if self is Opcode.GlobalStoreIndirectI64:
            return "GlobalStoreIndirectI64"
        if self is Opcode.GlobalLoadRef:
            return "GlobalLoadRef"
        if self is Opcode.GlobalStoreRef:
            return "GlobalStoreRef"
        if self is Opcode.GlobalLoadIndirectRef:
            return "GlobalLoadIndirectRef"
        if self is Opcode.GlobalStoreIndirectRef:
            return "GlobalStoreIndirectRef"
        if self is Opcode.ConstI32Zero:
            return "ConstI32Zero"
        if self is Opcode.ConstI32:
            return "ConstI32"
        if self is Opcode.ConstI64Zero:
            return "ConstI64Zero"
        if self is Opcode.ConstI64:
            return "ConstI64"
        if self is Opcode.ConstRefZero:
            return "ConstRefZero"
        if self is Opcode.ConstRefRodata:
            return "ConstRefRodata"
        if self is Opcode.ListAlloc:
            return "ListAlloc"
        if self is Opcode.ListReserve:
            return "ListReserve"
        if self is Opcode.ListSize:
            return "ListSize"
        if self is Opcode.ListResize:
            return "ListResize"
        if self is Opcode.ListGetI32:
            return "ListGetI32"
        if self is Opcode.ListSetI32:
            return "ListSetI32"
        if self is Opcode.ListGetI64:
            return "ListGetI64"
        if self is Opcode.ListSetI64:
            return "ListSetI64"
        if self is Opcode.ListGetRef:
            return "ListGetRef"
        if self is Opcode.ListSetRef:
            return "ListSetRef"
        if self is Opcode.SelectI32:
            return "SelectI32"
        if self is Opcode.SelectI64:
            return "SelectI64"
        if self is Opcode.SelectRef:
            return "SelectRef"
        if self is Opcode.SwitchI32:
            return "SwitchI32"
        if self is Opcode.SwitchI64:
            return "SwitchI64"
        if self is Opcode.SwitchRef:
            return "SwitchRef"
        if self is Opcode.AddI32:
            return "AddI32"
        if self is Opcode.SubI32:
            return "SubI32"
        if self is Opcode.MulI32:
            return "MulI32"
        if self is Opcode.DivI32S:
            return "DivI32S"
        if self is Opcode.DivI32U:
            return "DivI32U"
        if self is Opcode.RemI32S:
            return "RemI32S"
        if self is Opcode.RemI32U:
            return "RemI32U"
        if self is Opcode.FMAI32:
            return "FMAI32"
        if self is Opcode.AbsI32:
            return "AbsI32"
        if self is Opcode.MinI32S:
            return "MinI32S"
        if self is Opcode.MinI32U:
            return "MinI32U"
        if self is Opcode.MaxI32S:
            return "MaxI32S"
        if self is Opcode.MaxI32U:
            return "MaxI32U"
        if self is Opcode.AddI64:
            return "AddI64"
        if self is Opcode.SubI64:
            return "SubI64"
        if self is Opcode.MulI64:
            return "MulI64"
        if self is Opcode.DivI64S:
            return "DivI64S"
        if self is Opcode.DivI64U:
            return "DivI64U"
        if self is Opcode.RemI64S:
            return "RemI64S"
        if self is Opcode.RemI64U:
            return "RemI64U"
        if self is Opcode.FMAI64:
            return "FMAI64"
        if self is Opcode.AbsI64:
            return "AbsI64"
        if self is Opcode.MinI64S:
            return "MinI64S"
        if self is Opcode.MinI64U:
            return "MinI64U"
        if self is Opcode.MaxI64S:
            return "MaxI64S"
        if self is Opcode.MaxI64U:
            return "MaxI64U"
        if self is Opcode.NotI32:
            return "NotI32"
        if self is Opcode.AndI32:
            return "AndI32"
        if self is Opcode.OrI32:
            return "OrI32"
        if self is Opcode.XorI32:
            return "XorI32"
        if self is Opcode.CtlzI32:
            return "CtlzI32"
        if self is Opcode.NotI64:
            return "NotI64"
        if self is Opcode.AndI64:
            return "AndI64"
        if self is Opcode.OrI64:
            return "OrI64"
        if self is Opcode.XorI64:
            return "XorI64"
        if self is Opcode.CtlzI64:
            return "CtlzI64"
        if self is Opcode.ShlI32:
            return "ShlI32"
        if self is Opcode.ShrI32S:
            return "ShrI32S"
        if self is Opcode.ShrI32U:
            return "ShrI32U"
        if self is Opcode.ShlI64:
            return "ShlI64"
        if self is Opcode.ShrI64S:
            return "ShrI64S"
        if self is Opcode.ShrI64U:
            return "ShrI64U"
        if self is Opcode.TruncI32I8:
            return "TruncI32I8"
        if self is Opcode.TruncI32I16:
            return "TruncI32I16"
        if self is Opcode.TruncI64I32:
            return "TruncI64I32"
        if self is Opcode.ExtI8I32S:
            return "ExtI8I32S"
        if self is Opcode.ExtI8I32U:
            return "ExtI8I32U"
        if self is Opcode.ExtI16I32S:
            return "ExtI16I32S"
        if self is Opcode.ExtI16I32U:
            return "ExtI16I32U"
        if self is Opcode.ExtI32I64S:
            return "ExtI32I64S"
        if self is Opcode.ExtI32I64U:
            return "ExtI32I64U"
        if self is Opcode.CastAnyRef:
            return "CastAnyRef"
        if self is Opcode.CmpEQI32:
            return "CmpEQI32"
        if self is Opcode.CmpNEI32:
            return "CmpNEI32"
        if self is Opcode.CmpLTI32S:
            return "CmpLTI32S"
        if self is Opcode.CmpLTI32U:
            return "CmpLTI32U"
        if self is Opcode.CmpNZI32:
            return "CmpNZI32"
        if self is Opcode.CmpEQI64:
            return "CmpEQI64"
        if self is Opcode.CmpNEI64:
            return "CmpNEI64"
        if self is Opcode.CmpLTI64S:
            return "CmpLTI64S"
        if self is Opcode.CmpLTI64U:
            return "CmpLTI64U"
        if self is Opcode.CmpNZI64:
            return "CmpNZI64"
        if self is Opcode.CmpEQRef:
            return "CmpEQRef"
        if self is Opcode.CmpNERef:
            return "CmpNERef"
        if self is Opcode.CmpNZRef:
            return "CmpNZRef"
        if self is Opcode.Branch:
            return "Branch"
        if self is Opcode.CondBranch:
            return "CondBranch"
        if self is Opcode.BranchTable:
            return "BranchTable"
        if self is Opcode.Call:
            return "Call"
        if self is Opcode.CallVariadic:
            return "CallVariadic"
        if self is Opcode.Return:
            return "Return"
        if self is Opcode.Fail:
            return "Fail"
        if self is Opcode.ImportResolved:
            return "ImportResolved"
        if self is Opcode.Yield:
            return "Yield"
        if self is Opcode.Trace:
            return "Trace"
        if self is Opcode.Print:
            return "Print"
        if self is Opcode.CondBreak:
            return "CondBreak"
        if self is Opcode.Break:
            return "Break"
        if self is Opcode.BufferLoadI8U:
            return "BufferLoadI8U"
        if self is Opcode.BufferLoadI8S:
            return "BufferLoadI8S"
        if self is Opcode.BufferLoadI16U:
            return "BufferLoadI16U"
        if self is Opcode.BufferLoadI16S:
            return "BufferLoadI16S"
        if self is Opcode.BufferLoadI32:
            return "BufferLoadI32"
        if self is Opcode.BufferLoadI64:
            return "BufferLoadI64"
        if self is Opcode.BufferStoreI8:
            return "BufferStoreI8"
        if self is Opcode.BufferStoreI16:
            return "BufferStoreI16"
        if self is Opcode.BufferStoreI32:
            return "BufferStoreI32"
        if self is Opcode.BufferStoreI64:
            return "BufferStoreI64"
        if self is Opcode.BufferAlloc:
            return "BufferAlloc"
        if self is Opcode.BufferClone:
            return "BufferClone"
        if self is Opcode.BufferLength:
            return "BufferLength"
        if self is Opcode.BufferFillI8:
            return "BufferFillI8"
        if self is Opcode.BufferFillI16:
            return "BufferFillI16"
        if self is Opcode.BufferFillI32:
            return "BufferFillI32"
        if self is Opcode.BufferFillI64:
            return "BufferFillI64"
        if self is Opcode.BufferCopy:
            return "BufferCopy"
        if self is Opcode.BufferCompare:
            return "BufferCompare"
        if self is Opcode.BufferHash:
            return "BufferHash"
        if self is Opcode.Block:
            return "Block"
        if self is Opcode.PrefixExtF32:
            return "PrefixExtF32"
        if self is Opcode.PrefixExtF64:
            return "PrefixExtF64"
        raise ValueError("Unknown Opcode enum entry.")



@register_attribute_builder("VM_CoreOpcodeAttr")
def _vm_coreopcodeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(8, context=context), int(x))

class ExtF32Opcode(IntEnum):
    """valid VM operation encodings in the f32 extension"""

    GlobalLoadF32 = 0
    GlobalStoreF32 = 1
    GlobalLoadIndirectF32 = 2
    GlobalStoreIndirectF32 = 3
    ConstF32Zero = 4
    ConstF32 = 5
    ListGetF32 = 6
    ListSetF32 = 7
    SelectF32 = 8
    SwitchF32 = 9
    AddF32 = 10
    SubF32 = 11
    MulF32 = 12
    DivF32 = 13
    RemF32 = 14
    FMAF32 = 15
    AbsF32 = 16
    NegF32 = 17
    CeilF32 = 18
    FloorF32 = 19
    RoundF32 = 54
    RoundF32Even = 57
    MinF32 = 55
    MaxF32 = 56
    CastSI32F32 = 20
    CastSI64F32 = 60
    CastUI32F32 = 21
    CastF32SI32 = 22
    CastF32SI64 = 58
    CastF32UI32 = 23
    CastF32UI64 = 59
    BitcastI32F32 = 24
    BitcastF32I32 = 25
    AtanF32 = 26
    Atan2F32 = 27
    CosF32 = 28
    SinF32 = 29
    ExpF32 = 30
    Exp2F32 = 31
    ExpM1F32 = 32
    LogF32 = 33
    Log10F32 = 34
    Log1pF32 = 35
    Log2F32 = 36
    PowF32 = 37
    RsqrtF32 = 38
    SqrtF32 = 39
    TanhF32 = 40
    ErfF32 = 41
    CmpEQF32O = 42
    CmpEQF32U = 43
    CmpNEF32O = 44
    CmpNEF32U = 45
    CmpLTF32O = 46
    CmpLTF32U = 47
    CmpLTEF32O = 48
    CmpLTEF32U = 49
    CmpNaNF32 = 50
    BufferLoadF32 = 51
    BufferStoreF32 = 52
    BufferFillF32 = 53

    def __str__(self):
        if self is ExtF32Opcode.GlobalLoadF32:
            return "GlobalLoadF32"
        if self is ExtF32Opcode.GlobalStoreF32:
            return "GlobalStoreF32"
        if self is ExtF32Opcode.GlobalLoadIndirectF32:
            return "GlobalLoadIndirectF32"
        if self is ExtF32Opcode.GlobalStoreIndirectF32:
            return "GlobalStoreIndirectF32"
        if self is ExtF32Opcode.ConstF32Zero:
            return "ConstF32Zero"
        if self is ExtF32Opcode.ConstF32:
            return "ConstF32"
        if self is ExtF32Opcode.ListGetF32:
            return "ListGetF32"
        if self is ExtF32Opcode.ListSetF32:
            return "ListSetF32"
        if self is ExtF32Opcode.SelectF32:
            return "SelectF32"
        if self is ExtF32Opcode.SwitchF32:
            return "SwitchF32"
        if self is ExtF32Opcode.AddF32:
            return "AddF32"
        if self is ExtF32Opcode.SubF32:
            return "SubF32"
        if self is ExtF32Opcode.MulF32:
            return "MulF32"
        if self is ExtF32Opcode.DivF32:
            return "DivF32"
        if self is ExtF32Opcode.RemF32:
            return "RemF32"
        if self is ExtF32Opcode.FMAF32:
            return "FMAF32"
        if self is ExtF32Opcode.AbsF32:
            return "AbsF32"
        if self is ExtF32Opcode.NegF32:
            return "NegF32"
        if self is ExtF32Opcode.CeilF32:
            return "CeilF32"
        if self is ExtF32Opcode.FloorF32:
            return "FloorF32"
        if self is ExtF32Opcode.RoundF32:
            return "RoundF32"
        if self is ExtF32Opcode.RoundF32Even:
            return "RoundF32Even"
        if self is ExtF32Opcode.MinF32:
            return "MinF32"
        if self is ExtF32Opcode.MaxF32:
            return "MaxF32"
        if self is ExtF32Opcode.CastSI32F32:
            return "CastSI32F32"
        if self is ExtF32Opcode.CastSI64F32:
            return "CastSI64F32"
        if self is ExtF32Opcode.CastUI32F32:
            return "CastUI32F32"
        if self is ExtF32Opcode.CastF32SI32:
            return "CastF32SI32"
        if self is ExtF32Opcode.CastF32SI64:
            return "CastF32SI64"
        if self is ExtF32Opcode.CastF32UI32:
            return "CastF32UI32"
        if self is ExtF32Opcode.CastF32UI64:
            return "CastF32UI64"
        if self is ExtF32Opcode.BitcastI32F32:
            return "BitcastI32F32"
        if self is ExtF32Opcode.BitcastF32I32:
            return "BitcastF32I32"
        if self is ExtF32Opcode.AtanF32:
            return "AtanF32"
        if self is ExtF32Opcode.Atan2F32:
            return "Atan2F32"
        if self is ExtF32Opcode.CosF32:
            return "CosF32"
        if self is ExtF32Opcode.SinF32:
            return "SinF32"
        if self is ExtF32Opcode.ExpF32:
            return "ExpF32"
        if self is ExtF32Opcode.Exp2F32:
            return "Exp2F32"
        if self is ExtF32Opcode.ExpM1F32:
            return "ExpM1F32"
        if self is ExtF32Opcode.LogF32:
            return "LogF32"
        if self is ExtF32Opcode.Log10F32:
            return "Log10F32"
        if self is ExtF32Opcode.Log1pF32:
            return "Log1pF32"
        if self is ExtF32Opcode.Log2F32:
            return "Log2F32"
        if self is ExtF32Opcode.PowF32:
            return "PowF32"
        if self is ExtF32Opcode.RsqrtF32:
            return "RsqrtF32"
        if self is ExtF32Opcode.SqrtF32:
            return "SqrtF32"
        if self is ExtF32Opcode.TanhF32:
            return "TanhF32"
        if self is ExtF32Opcode.ErfF32:
            return "ErfF32"
        if self is ExtF32Opcode.CmpEQF32O:
            return "CmpEQF32O"
        if self is ExtF32Opcode.CmpEQF32U:
            return "CmpEQF32U"
        if self is ExtF32Opcode.CmpNEF32O:
            return "CmpNEF32O"
        if self is ExtF32Opcode.CmpNEF32U:
            return "CmpNEF32U"
        if self is ExtF32Opcode.CmpLTF32O:
            return "CmpLTF32O"
        if self is ExtF32Opcode.CmpLTF32U:
            return "CmpLTF32U"
        if self is ExtF32Opcode.CmpLTEF32O:
            return "CmpLTEF32O"
        if self is ExtF32Opcode.CmpLTEF32U:
            return "CmpLTEF32U"
        if self is ExtF32Opcode.CmpNaNF32:
            return "CmpNaNF32"
        if self is ExtF32Opcode.BufferLoadF32:
            return "BufferLoadF32"
        if self is ExtF32Opcode.BufferStoreF32:
            return "BufferStoreF32"
        if self is ExtF32Opcode.BufferFillF32:
            return "BufferFillF32"
        raise ValueError("Unknown ExtF32Opcode enum entry.")



@register_attribute_builder("VM_ExtF32OpcodeAttr")
def _vm_extf32opcodeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(8, context=context), int(x))

class ExtF64Opcode(IntEnum):
    """valid VM operation encodings in the f64 extension"""

    GlobalLoadF64 = 0
    GlobalStoreF64 = 1
    GlobalLoadIndirectF64 = 2
    GlobalStoreIndirectF64 = 3
    ConstF64Zero = 4
    ConstF64 = 5
    ListGetF64 = 6
    ListSetF64 = 7
    SelectF64 = 8
    SwitchF64 = 9
    AddF64 = 10
    SubF64 = 11
    MulF64 = 12
    DivF64 = 13
    RemF64 = 14
    FMAF64 = 15
    AbsF64 = 16
    NegF64 = 17
    CeilF64 = 18
    FloorF64 = 19
    RoundF64 = 60
    RoundF64Even = 63
    MinF64 = 61
    MaxF64 = 62
    TruncF64F32 = 20
    ExtF32F64 = 21
    CastSI32F64 = 22
    CastUI32F64 = 23
    CastF64SI32 = 24
    CastF64UI32 = 25
    CastSI64F64 = 26
    CastUI64F64 = 27
    CastF64SI64 = 28
    CastF64UI64 = 29
    BitcastI64F64 = 30
    BitcastF64I64 = 31
    AtanF64 = 32
    Atan2F64 = 33
    CosF64 = 34
    SinF64 = 35
    ExpF64 = 36
    Exp2F64 = 37
    ExpM1F64 = 38
    LogF64 = 39
    Log10F64 = 40
    Log1pF64 = 41
    Log2F64 = 42
    PowF64 = 43
    RsqrtF64 = 44
    SqrtF64 = 45
    TanhF64 = 46
    ErfF64 = 47
    CmpEQF64O = 48
    CmpEQF64U = 49
    CmpNEF64O = 50
    CmpNEF64U = 51
    CmpLTF64O = 52
    CmpLTF64U = 53
    CmpLTEF64O = 54
    CmpLTEF64U = 55
    CmpNaNF64 = 56
    BufferLoadF64 = 57
    BufferStoreF64 = 58
    BufferFillF64 = 59

    def __str__(self):
        if self is ExtF64Opcode.GlobalLoadF64:
            return "GlobalLoadF64"
        if self is ExtF64Opcode.GlobalStoreF64:
            return "GlobalStoreF64"
        if self is ExtF64Opcode.GlobalLoadIndirectF64:
            return "GlobalLoadIndirectF64"
        if self is ExtF64Opcode.GlobalStoreIndirectF64:
            return "GlobalStoreIndirectF64"
        if self is ExtF64Opcode.ConstF64Zero:
            return "ConstF64Zero"
        if self is ExtF64Opcode.ConstF64:
            return "ConstF64"
        if self is ExtF64Opcode.ListGetF64:
            return "ListGetF64"
        if self is ExtF64Opcode.ListSetF64:
            return "ListSetF64"
        if self is ExtF64Opcode.SelectF64:
            return "SelectF64"
        if self is ExtF64Opcode.SwitchF64:
            return "SwitchF64"
        if self is ExtF64Opcode.AddF64:
            return "AddF64"
        if self is ExtF64Opcode.SubF64:
            return "SubF64"
        if self is ExtF64Opcode.MulF64:
            return "MulF64"
        if self is ExtF64Opcode.DivF64:
            return "DivF64"
        if self is ExtF64Opcode.RemF64:
            return "RemF64"
        if self is ExtF64Opcode.FMAF64:
            return "FMAF64"
        if self is ExtF64Opcode.AbsF64:
            return "AbsF64"
        if self is ExtF64Opcode.NegF64:
            return "NegF64"
        if self is ExtF64Opcode.CeilF64:
            return "CeilF64"
        if self is ExtF64Opcode.FloorF64:
            return "FloorF64"
        if self is ExtF64Opcode.RoundF64:
            return "RoundF64"
        if self is ExtF64Opcode.RoundF64Even:
            return "RoundF64Even"
        if self is ExtF64Opcode.MinF64:
            return "MinF64"
        if self is ExtF64Opcode.MaxF64:
            return "MaxF64"
        if self is ExtF64Opcode.TruncF64F32:
            return "TruncF64F32"
        if self is ExtF64Opcode.ExtF32F64:
            return "ExtF32F64"
        if self is ExtF64Opcode.CastSI32F64:
            return "CastSI32F64"
        if self is ExtF64Opcode.CastUI32F64:
            return "CastUI32F64"
        if self is ExtF64Opcode.CastF64SI32:
            return "CastF64SI32"
        if self is ExtF64Opcode.CastF64UI32:
            return "CastF64UI32"
        if self is ExtF64Opcode.CastSI64F64:
            return "CastSI64F64"
        if self is ExtF64Opcode.CastUI64F64:
            return "CastUI64F64"
        if self is ExtF64Opcode.CastF64SI64:
            return "CastF64SI64"
        if self is ExtF64Opcode.CastF64UI64:
            return "CastF64UI64"
        if self is ExtF64Opcode.BitcastI64F64:
            return "BitcastI64F64"
        if self is ExtF64Opcode.BitcastF64I64:
            return "BitcastF64I64"
        if self is ExtF64Opcode.AtanF64:
            return "AtanF64"
        if self is ExtF64Opcode.Atan2F64:
            return "Atan2F64"
        if self is ExtF64Opcode.CosF64:
            return "CosF64"
        if self is ExtF64Opcode.SinF64:
            return "SinF64"
        if self is ExtF64Opcode.ExpF64:
            return "ExpF64"
        if self is ExtF64Opcode.Exp2F64:
            return "Exp2F64"
        if self is ExtF64Opcode.ExpM1F64:
            return "ExpM1F64"
        if self is ExtF64Opcode.LogF64:
            return "LogF64"
        if self is ExtF64Opcode.Log10F64:
            return "Log10F64"
        if self is ExtF64Opcode.Log1pF64:
            return "Log1pF64"
        if self is ExtF64Opcode.Log2F64:
            return "Log2F64"
        if self is ExtF64Opcode.PowF64:
            return "PowF64"
        if self is ExtF64Opcode.RsqrtF64:
            return "RsqrtF64"
        if self is ExtF64Opcode.SqrtF64:
            return "SqrtF64"
        if self is ExtF64Opcode.TanhF64:
            return "TanhF64"
        if self is ExtF64Opcode.ErfF64:
            return "ErfF64"
        if self is ExtF64Opcode.CmpEQF64O:
            return "CmpEQF64O"
        if self is ExtF64Opcode.CmpEQF64U:
            return "CmpEQF64U"
        if self is ExtF64Opcode.CmpNEF64O:
            return "CmpNEF64O"
        if self is ExtF64Opcode.CmpNEF64U:
            return "CmpNEF64U"
        if self is ExtF64Opcode.CmpLTF64O:
            return "CmpLTF64O"
        if self is ExtF64Opcode.CmpLTF64U:
            return "CmpLTF64U"
        if self is ExtF64Opcode.CmpLTEF64O:
            return "CmpLTEF64O"
        if self is ExtF64Opcode.CmpLTEF64U:
            return "CmpLTEF64U"
        if self is ExtF64Opcode.CmpNaNF64:
            return "CmpNaNF64"
        if self is ExtF64Opcode.BufferLoadF64:
            return "BufferLoadF64"
        if self is ExtF64Opcode.BufferStoreF64:
            return "BufferStoreF64"
        if self is ExtF64Opcode.BufferFillF64:
            return "BufferFillF64"
        raise ValueError("Unknown ExtF64Opcode enum entry.")



@register_attribute_builder("VM_ExtF64OpcodeAttr")
def _vm_extf64opcodeattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(8, context=context), int(x))

