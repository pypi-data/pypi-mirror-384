# src/imgshape/report.py
"""
Defensive report generation for imgshape v3.

Features:
- generate_markdown_report(dataset_path, out_md_path)
- generate_html_report(dataset_path, out_html_path, embed_images=True, convert_pdf=False)
- If weasyprint (or reportlab) is available, HTML -> PDF conversion is attempted (optional).
- Falls back gracefully: always produces Markdown and HTML even if heavy deps missing.
"""

from __future__ import annotations
import os
import json
import logging
from pathlib import Path
from typing import Any, Dict, Optional
import base64
import tempfile

logger = logging.getLogger("imgshape.report")
if not logger.handlers:
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))
    logger.addHandler(ch)
logger.setLevel(logging.INFO)

# Lazy/optional imports
_jinja2 = None
_markdown = None
_pillow = None
_weasyprint = None
_reportlab = None

def _try_imports():
    global _jinja2, _markdown, _pillow, _weasyprint, _reportlab
    if _jinja2 is None:
        try:
            import jinja2 as _j
            _jinja2 = _j
        except Exception:
            _jinja2 = None
    if _markdown is None:
        try:
            import markdown as _m
            _markdown = _m
        except Exception:
            _markdown = None
    if _pillow is None:
        try:
            from PIL import Image as _I  # only to check availability
            _pillow = True
        except Exception:
            _pillow = False
    if _weasyprint is None:
        try:
            import weasyprint as _w
            _weasyprint = _w
        except Exception:
            _weasyprint = None
    if _reportlab is None:
        try:
            import reportlab  # type: ignore
            _reportlab = True
        except Exception:
            _reportlab = False

# Basic template for HTML report (single-file)
_HTML_TEMPLATE = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>imgshape report — {{ title }}</title>
<style>
body{font-family: Inter, Roboto, Arial, sans-serif; margin: 24px;}
h1,h2,h3{color:#111827}
pre,code{background:#f3f4f6;padding:8px;border-radius:6px;overflow:auto}
.card{border:1px solid #e5e7eb;padding:12px;border-radius:8px;margin-bottom:12px}
.metrics{display:flex;gap:12px;flex-wrap:wrap}
.metric{background:#fff;border:1px solid #e6e6e6;padding:8px;border-radius:6px;min-width:160px}
.img-grid{display:flex;gap:8px;flex-wrap:wrap}
.img-grid img{max-width:240px;border-radius:6px;border:1px solid #ddd}
</style>
</head>
<body>
  <h1>imgshape report — {{ title }}</h1>
  <p>Generated by <b>imgshape</b> — v{{ version }}</p>
  <h2>Summary</h2>
  <div class="card">
    <div class="metrics">
      {% for key, val in summary.items() %}
      <div class="metric"><strong>{{ key }}</strong><div>{{ val }}</div></div>
      {% endfor %}
    </div>
  </div>

  {% if analysis %}
  <h2>Analysis</h2>
  <div class="card">
    <pre>{{ analysis_json }}</pre>
  </div>
  {% endif %}

  {% if thumbnails %}
  <h2>Sample thumbnails</h2>
  <div class="img-grid">
    {% for b64 in thumbnails %}
      <img src="data:image/png;base64,{{ b64 }}"/>
    {% endfor %}
  </div>
  {% endif %}

  {% if pipeline %}
  <h2>Recommended pipeline</h2>
  <div class="card">
    <pre>{{ pipeline_json }}</pre>
  </div>
  {% endif %}

  <footer style="margin-top:24px;color:#6b7280;font-size:13px">
    Report generated by imgshape (v{{ version }})
  </footer>
</body>
</html>
"""

def _gather_basic_summary(analysis: Optional[Dict[str, Any]]) -> Dict[str, Any]:
    if not analysis:
        return {"image_count": 0}
    # create a small, human-friendly summary
    keys = ["image_count", "mean_entropy", "resolution_mean", "duplicate_ratio", "imbalance_score"]
    summary = {}
    for k in keys:
        if k in analysis:
            summary[k] = analysis[k]
    # fallback generic metrics
    if "image_count" not in summary:
        # try to infer
        summary["image_count"] = analysis.get("image_count", analysis.get("count", 0))
    return summary

def _collect_sample_thumbnails(dataset_path: str, max_images: int = 6) -> list[str]:
    """
    Return base64-encoded PNG thumbnails (so HTML is single-file).
    Uses PIL if available; otherwise returns empty list.
    """
    _try_imports()
    if not _pillow:
        return []
    from PIL import Image
    p = Path(dataset_path)
    if not p.exists():
        return []
    exts = {".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".webp"}
    imgs = []
    try:
        for f in p.rglob("*"):
            if f.suffix.lower() in exts:
                imgs.append(f)
            if len(imgs) >= max_images:
                break
    except Exception:
        pass
    out_b64 = []
    for f in imgs[:max_images]:
        try:
            im = Image.open(f).convert("RGB")
            im.thumbnail((640, 640))
            bio = tempfile.SpooledTemporaryFile()
            im.save(bio, format="PNG")
            bio.seek(0)
            data = bio.read()
            out_b64.append(base64.b64encode(data).decode("ascii"))
        except Exception:
            logger.exception("thumbnail generation failed for %s", f)
    return out_b64

# Public API -----------------------------------------------------

def generate_markdown_report(dataset_path: str, out_md_path: str, analysis: Optional[Dict[str, Any]] = None, pipeline: Optional[Dict[str, Any]] = None) -> str:
    """
    Create a Markdown report at out_md_path.
    - dataset_path: path to dataset (used for thumbnails)
    - analysis: optional precomputed analysis dict (if None, will try to call imgshape.analyze.analyze_dataset)
    - pipeline: optional recommended pipeline dict to include
    Returns the path to the written markdown file.
    """
    _try_imports()
    # ensure analysis available
    if analysis is None:
        try:
            from imgshape.analyze import analyze_dataset
            analysis = analyze_dataset(dataset_path)
        except Exception as e:
            logger.debug("analyze_dataset failed: %s", e)
            analysis = {"image_count": 0}

    summary = _gather_basic_summary(analysis)
    lines = []
    lines.append(f"# imgshape report — {Path(dataset_path).name}\n")
    lines.append(f"**imgshape version:** {getattr(__import__('imgshape'), '__version__', 'unknown')}\n")
    lines.append("## Summary\n")
    for k, v in summary.items():
        lines.append(f"- **{k}**: `{v}`")
    lines.append("\n## Analysis\n")
    lines.append("```json")
    lines.append(json.dumps(analysis, indent=2))
    lines.append("```\n")
    if pipeline:
        lines.append("## Recommended pipeline\n")
        lines.append("```json")
        lines.append(json.dumps(pipeline, indent=2))
        lines.append("```\n")

    # optional thumbnails (link to files if embedding not desired)
    thumbs = _collect_sample_thumbnails(dataset_path, max_images=4)
    if thumbs:
        lines.append("## Sample thumbnails (embedded as inline images)\n")
        for i, b64 in enumerate(thumbs):
            lines.append(f"![thumb-{i}](data:image/png;base64,{b64})\n")

    out_md_path = Path(out_md_path)
    out_md_path.write_text("\n".join(lines), encoding="utf-8")
    logger.info("Markdown report written to %s", out_md_path)
    return str(out_md_path)


def generate_html_report(dataset_path: str, out_html_path: str, analysis: Optional[Dict[str, Any]] = None, pipeline: Optional[Dict[str, Any]] = None, convert_pdf: bool = False) -> Dict[str, str]:
    """
    Create an interactive single-file HTML report (and optionally convert to PDF).
    Returns a dict with keys: html_path, pdf_path (may be None)
    """
    _try_imports()
    if analysis is None:
        try:
            from imgshape.analyze import analyze_dataset
            analysis = analyze_dataset(dataset_path)
        except Exception as e:
            logger.debug("analyze_dataset failed: %s", e)
            analysis = {"image_count": 0}

    title = Path(dataset_path).name
    summary = _gather_basic_summary(analysis)
    thumbs = _collect_sample_thumbnails(dataset_path, max_images=6)
    # render template
    ctx = {
        "title": title,
        "version": getattr(__import__("imgshape"), "__version__", "unknown"),
        "summary": summary,
        "analysis_json": json.dumps(analysis, indent=2),
        "thumbnails": thumbs,
        "pipeline_json": json.dumps(pipeline or {}, indent=2),
    }
    html = _HTML_TEMPLATE
    # try jinja2 rendering if available (better escaping)
    if _jinja2:
        try:
            tmpl = _jinja2.Template(_HTML_TEMPLATE)
            html = tmpl.render(**ctx)
        except Exception:
            logger.exception("jinja2 rendering failed; falling back to simple format")
            html = _HTML_TEMPLATE.format(**ctx)  # naive fallback (may not work for dicts)
    else:
        # basic fallback: do simple replacements (works because template uses {{var}} markers)
        try:
            # replace simple scalars; for dicts use json dumps
            html = _HTML_TEMPLATE.replace("{{ title }}", str(ctx["title"]))
            html = html.replace("{{ version }}", str(ctx["version"]))
            html = html.replace("{{ analysis_json }}", ctx["analysis_json"].replace("<", "&lt;"))
            html = html.replace("{{ pipeline_json }}", ctx["pipeline_json"].replace("<", "&lt;"))
            # thumbnails and summary are handled below more carefully
        except Exception:
            logger.exception("simple html fallback failed")

    # replace summary block manually if jinja not present
    if "{{ summary.items()" in _HTML_TEMPLATE and not _jinja2:
        # generate a summary html block
        summary_html = ""
        for k, v in summary.items():
            summary_html += f'<div class="metric"><strong>{k}</strong><div>{v}</div></div>\n'
        html = html.replace("{% for key, val in summary.items() %}\n      <div class=\"metric\"><strong>{{ key }}</strong><div>{{ val }}</div></div>\n      {% endfor %}", summary_html)

    # Now embed thumbnails if present (simple replace)
    if "data:image/png;base64" not in html and thumbs:
        thumbs_html = "".join([f'<img src="data:image/png;base64,{b64}"/>' for b64 in thumbs])
        html = html.replace("{% for b64 in thumbnails %}\n      <img src=\"data:image/png;base64,{{ b64 }}\"/>\n    {% endfor %}", thumbs_html)

    # Write HTML
    out_html_path = Path(out_html_path)
    out_html_path.write_text(html, encoding="utf-8")
    logger.info("HTML report written to %s", out_html_path)

    pdf_path = None
    if convert_pdf:
        # Try WeasyPrint first (higher-quality layout). Fall back to reportlab note.
        if _weasyprint:
            try:
                wp = _weasyprint.HTML(string=html)
                pdf_path = str(out_html_path.with_suffix(".pdf"))
                wp.write_pdf(pdf_path)
                logger.info("Converted HTML -> PDF via WeasyPrint: %s", pdf_path)
            except Exception:
                logger.exception("WeasyPrint conversion failed")
                pdf_path = None
        elif _reportlab:
            # reportlab conversion is non-trivial; leave instruction for user
            logger.warning("ReportLab detected but no HTML conversion implemented. Consider installing WeasyPrint.")
            pdf_path = None
        else:
            logger.info("No PDF converter available (install weasyprint to enable HTML->PDF conversion)")
            pdf_path = None

    return {"html_path": str(out_html_path), "pdf_path": pdf_path}
