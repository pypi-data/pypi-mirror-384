Index: isubrip/constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pathlib import Path\r\nfrom tempfile import gettempdir\r\n\r\n# General\r\nPACKAGE_NAME = \"isubrip\"\r\nPYPI_RSS_URL = \"https://pypi.org/rss/project/isubrip/releases.xml\"  # Used for checking updates\r\n\r\n# Paths\r\nDEFAULT_CONFIG_PATH = Path(__file__).parent / \"resources\" / \"default_config.toml\"\r\nAPPLETV_STOREFRONTS_PATH = Path(__file__).parent / \"resources\" / \"atv_storefronts.json\"\r\nDATA_FOLDER_PATH = Path.home() / f\".{PACKAGE_NAME}\"\r\nUSER_CONFIG_FILE_NAME = \"config.toml\"\r\nUSER_CONFIG_FILE = DATA_FOLDER_PATH / USER_CONFIG_FILE_NAME\r\nTEMP_FOLDER_PATH = Path(gettempdir()) / PACKAGE_NAME\r\n\r\n# Scraping\r\nAPPLETV_MOVIE_API_URL = \"https://tv.apple.com/api/uts/v3/movies/\"\r\nAPPLETV_API_BASE_PARAMS = {\r\n    \"utscf\": \"OjAAAAAAAAA~\",\r\n    \"utsk\": \"6e3013c6d6fae3c2::::::235656c069bb0efb\",\r\n    \"caller\": \"web\",\r\n    \"v\": \"58\",\r\n    \"pfm\": \"web\",\r\n    \"locale\": \"en-US\"\r\n}\r\n\r\n# RegEx\r\n# - Urls (Match groups result in a URL without movie's title, which is a valid URL)\r\nITUNES_URL_REGEX = r\"^(https?://itunes\\.apple\\.com/[a-z]{2}/movie/(?:[\\w\\-%]+/)?(id\\d{9,10}))(?:$|\\?.*)\"\r\nAPPLETV_URL_REGEX = r\"^(https?://tv\\.apple\\.com/([a-z]{2})/movie/(?:[\\w\\-%]+/)?(umc\\.cmc\\.[a-z\\d]{24,25}))(?:$|\\?.*)\"\r\n\r\n# - WEBVTT\r\nWEBVTT_PERCENTAGE_REGEX = r\"\\d{1,3}(?:.\\d+)?%\"\r\nWEBVTT_CAPTION_TIMINGS_REGEX = r\"(?:[0-5]\\d:)?[0-5]\\d:[0-5]\\d[\\.,]\\d{3}[ \\t]+-->[ \\t]+(?:[0-5]\\d:)?[0-5]\\d:[0-5]\\d[\\.,]\\d{3}\"\r\n\r\nWEBVTT_CAPTION_SETTING_ALIGNMENT_REGEX = r\"align:(?:start|center|middle|end|left|right)\"\r\nWEBVTT_CAPTION_SETTING_LINE_REGEX = rf\"line:(?:{WEBVTT_PERCENTAGE_REGEX}|-?\\d+%)(?:,(?:start|center|middle|end))?\"\r\nWEBVTT_CAPTION_SETTING_POSITION_REGEX = rf\"position:{WEBVTT_PERCENTAGE_REGEX}(?:,(?:start|center|middle|end))?\"\r\nWEBVTT_CAPTION_SETTING_REGION_REGEX = r\"region:(?:(?!(?:-->)|\\t)\\S)+\"\r\nWEBVTT_CAPTION_SETTING_SIZE_REGEX = rf\"size:{WEBVTT_PERCENTAGE_REGEX}\"\r\nWEBVTT_CAPTION_SETTING_VERTICAL_REGEX = r\"vertical:(?:lr|rl)\"\r\n\r\nWEBVTT_CAPTION_SETTINGS_REGEX = f\"(?:(?:{WEBVTT_CAPTION_SETTING_ALIGNMENT_REGEX})|\" \\\r\n                                f\"(?:{WEBVTT_CAPTION_SETTING_LINE_REGEX})|\" \\\r\n                                f\"(?:{WEBVTT_CAPTION_SETTING_POSITION_REGEX})|\" \\\r\n                                f\"(?:{WEBVTT_CAPTION_SETTING_REGION_REGEX})|\" \\\r\n                                f\"(?:{WEBVTT_CAPTION_SETTING_SIZE_REGEX})|\" \\\r\n                                f\"(?:{WEBVTT_CAPTION_SETTING_VERTICAL_REGEX})|\" \\\r\n                                f\"(?:[ \\t]+))*\"\r\n\r\nWEBVTT_CAPTION_BLOCK_REGEX = rf\"^({WEBVTT_CAPTION_TIMINGS_REGEX})[ \\t]*({WEBVTT_CAPTION_SETTINGS_REGEX})?\"\r\n\r\n# Can't use isubrip.webvtt.Comment.header instead of literal \"NOTE\" string because of circualr import\r\nWEBVTT_COMMENT_HEADER_REGEX = rf\"^NOTE(?:$|[ \\t])(.+)?\"\r\n\r\n# Unicode\r\nRTL_CONTROL_CHARS = ('\\u200e', '\\u200f', '\\u202a', '\\u202b', '\\u202c', '\\u202d', '\\u202e')\r\nRTL_CHAR = '\\u202b'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/isubrip/constants.py b/isubrip/constants.py
--- a/isubrip/constants.py	(revision 3120b7cdc58a946b9448f3712ed2c4ce663acb94)
+++ b/isubrip/constants.py	(date 1664061499213)
@@ -13,25 +13,11 @@
 USER_CONFIG_FILE = DATA_FOLDER_PATH / USER_CONFIG_FILE_NAME
 TEMP_FOLDER_PATH = Path(gettempdir()) / PACKAGE_NAME
 
-# Scraping
-APPLETV_MOVIE_API_URL = "https://tv.apple.com/api/uts/v3/movies/"
-APPLETV_API_BASE_PARAMS = {
-    "utscf": "OjAAAAAAAAA~",
-    "utsk": "6e3013c6d6fae3c2::::::235656c069bb0efb",
-    "caller": "web",
-    "v": "58",
-    "pfm": "web",
-    "locale": "en-US"
-}
 
 # RegEx
-# - Urls (Match groups result in a URL without movie's title, which is a valid URL)
-ITUNES_URL_REGEX = r"^(https?://itunes\.apple\.com/[a-z]{2}/movie/(?:[\w\-%]+/)?(id\d{9,10}))(?:$|\?.*)"
-APPLETV_URL_REGEX = r"^(https?://tv\.apple\.com/([a-z]{2})/movie/(?:[\w\-%]+/)?(umc\.cmc\.[a-z\d]{24,25}))(?:$|\?.*)"
-
-# - WEBVTT
-WEBVTT_PERCENTAGE_REGEX = r"\d{1,3}(?:.\d+)?%"
-WEBVTT_CAPTION_TIMINGS_REGEX = r"(?:[0-5]\d:)?[0-5]\d:[0-5]\d[\.,]\d{3}[ \t]+-->[ \t]+(?:[0-5]\d:)?[0-5]\d:[0-5]\d[\.,]\d{3}"
+WEBVTT_PERCENTAGE_REGEX = r"\d{1,3}(?:.\d+)?%"  # TODO: Escape '.'? If yes, on another branch
+WEBVTT_CAPTION_TIMINGS_REGEX = \
+    r"(?:[0-5]\d:)?[0-5]\d:[0-5]\d[\.,]\d{3}[ \t]+-->[ \t]+(?:[0-5]\d:)?[0-5]\d:[0-5]\d[\.,]\d{3}"
 
 WEBVTT_CAPTION_SETTING_ALIGNMENT_REGEX = r"align:(?:start|center|middle|end|left|right)"
 WEBVTT_CAPTION_SETTING_LINE_REGEX = rf"line:(?:{WEBVTT_PERCENTAGE_REGEX}|-?\d+%)(?:,(?:start|center|middle|end))?"
Index: isubrip/scraper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport re\r\nfrom datetime import datetime, timedelta\r\nfrom typing import Iterator, List, Union\r\nfrom urllib.error import HTTPError\r\n\r\nimport m3u8\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\nfrom bs4.element import NavigableString, Tag\r\nfrom m3u8.model import M3U8\r\n\r\nfrom isubrip.enums import DataSource, SubtitlesType\r\nfrom isubrip.constants import APPLETV_API_BASE_PARAMS, APPLETV_MOVIE_API_URL, APPLETV_STOREFRONTS_PATH, APPLETV_URL_REGEX, ITUNES_URL_REGEX\r\nfrom isubrip.namedtuples import MovieData, PlaylistData, SubtitlesData\r\nfrom isubrip.exceptions import InvalidURL, PageLoadError\r\n\r\n\r\nclass Scraper:\r\n    \"\"\"A class for scraping and downloading subtitles off of iTunes movie pages.\"\"\"\r\n\r\n    _atv_storefronts = None\r\n\r\n\r\n    @staticmethod\r\n    def get_movie_data(url: str, headers: Union[dict, None] = None) -> MovieData:\r\n        \"\"\"\r\n        Scrape an iTunes / AppleTV page to find movie info and it's M3U8 playlist.\r\n\r\n        Args:\r\n            url (str): An iTunes store movie URL.\r\n            headers (dict | None, optional): Headers to use for HTTP requests.\r\n        \r\n        Raises:\r\n            InvalidURL: `itunes_url` is not a valid iTunes store movie URL.\r\n            PageLoadError: HTML page did not load properly.\r\n            HTTPError: HTTP request failed.\r\n\r\n        Returns:\r\n            MovieData: A MovieData (NamedTuple) object with movie's name, and an M3U8 object of the playlist\r\n            if the playlist is found. None otherwise.\r\n        \"\"\"\r\n        itunes_regex = re.fullmatch(ITUNES_URL_REGEX, url)\r\n        appletv_regex = re.fullmatch(APPLETV_URL_REGEX, url)\r\n\r\n        # Check whether URL is for iTunes or AppleTV\r\n        if itunes_regex is not None:\r\n            url = itunes_regex.group(1)\r\n            request = requests.get(url, headers=headers)\r\n            request.raise_for_status()\r\n\r\n            # Response is JSON formatted\r\n            if \"application/json\" in request.headers['content-type']:\r\n                try:\r\n                    json_data = json.loads(request.content)\r\n\r\n                except json.JSONDecodeError:\r\n                    raise PageLoadError(\"Recieved an invalid JSON response.\")\r\n\r\n                return Scraper._find_playlist_data_itunes_json_(json_data)\r\n\r\n            # Response is HTML formatted\r\n            elif \"text/html\" in request.headers['content-type'] and request.status_code != 404:\r\n                html_data = BeautifulSoup(request.content, \"lxml\")\r\n                return Scraper._find_playlist_data_itunes_html_(html_data)\r\n\r\n            # Response is neither JSON nor HTML formatted (if the URL is not found, iTunes returns an XML response),\r\n            # or an HTML 404 error was received.\r\n            else:\r\n                raise PageLoadError(\"Recieved an invalid response. Pleas assure the URL is valid.\")\r\n\r\n        elif appletv_regex is not None:\r\n            if not Scraper._atv_storefronts:\r\n                with open(APPLETV_STOREFRONTS_PATH, \"r\") as storefronts_file:\r\n                    Scraper._atv_storefronts = json.load(storefronts_file)\r\n\r\n            request_params = APPLETV_API_BASE_PARAMS\r\n\r\n            # Add storefront ID to params\r\n            request_params[\"sf\"] = Scraper._atv_storefronts[appletv_regex.group(2).upper()]\r\n\r\n            request = requests.get(APPLETV_MOVIE_API_URL + appletv_regex.group(3), headers=headers, params=request_params)\r\n            request.raise_for_status()\r\n            json_data = request.json()\r\n\r\n            return Scraper._find_playlist_data_appletv_json_(json_data)\r\n\r\n        else:\r\n            raise InvalidURL(f\"{url} is not a valid iTunes/AppleTV movie URL.\")\r\n\r\n    @staticmethod\r\n    def _find_playlist_data_itunes_json_(json_data: dict) -> MovieData:\r\n        \"\"\"\r\n        Scrape an iTunes JSON response to get movie info.\r\n\r\n        Args:\r\n            json_data (dict): A dictionary with iTunes data loaded from a JSON response.\r\n\r\n        Returns:\r\n            MovieData: A MovieData (NamedTuple) object with movie's name, and an M3U8 object of the playlist\r\n            if the playlist is found. None otherwise.\r\n        \"\"\"\r\n        itunes_id = json_data[\"pageData\"][\"id\"]\r\n        movie_data = json_data[\"storePlatformData\"][\"product-dv\"][\"results\"][itunes_id]\r\n\r\n        movie_title = movie_data[\"nameRaw\"]\r\n        movie_release_year = datetime.strptime(movie_data[\"releaseDate\"], '%Y-%m-%d').year\r\n\r\n        # Loop safely to find a matching playlist\r\n        for offer in movie_data[\"offers\"]:\r\n            if isinstance(offer.get(\"type\"), str) and offer[\"type\"] in [\"buy\", \"rent\"]:\r\n                if isinstance(offer.get(\"assets\"), list) and len(offer[\"assets\"]) > 0:\r\n                    for asset in offer[\"assets\"]:\r\n                        playlist_url: str = asset[\"hlsUrl\"]\r\n\r\n                        # Assure playlist is valid\r\n                        try:\r\n                            m3u8.load(playlist_url)\r\n\r\n                        # If m3u8 playlist is invalid, skip it\r\n                        except ValueError:\r\n                            continue\r\n\r\n                        except HTTPError:\r\n                            continue\r\n\r\n                        return MovieData(DataSource.ITUNES, movie_title, movie_release_year, [PlaylistData(itunes_id, playlist_url)])\r\n\r\n        return MovieData(DataSource.ITUNES, movie_title, movie_release_year, [])\r\n\r\n    @staticmethod\r\n    def _find_playlist_data_itunes_html_(html_data: BeautifulSoup) -> MovieData:\r\n        \"\"\"\r\n        Scrape an iTunes HTML page to get movie info.\r\n\r\n        Args:\r\n            html_data (BeautifulSoup): A BeautifulSoup object of the page.\r\n\r\n        Raises:\r\n            PageLoadError: HTML page did not load properly.\r\n\r\n        Returns:\r\n            MovieData: A MovieData (NamedTuple) object with movie's name, and an M3U8 object of the playlist\r\n            if the playlist is found. None otherwise.\r\n        \"\"\"\r\n        # NOTE: This function is less reliable than `_find_playlist_data_itunes_json_`.\r\n\r\n        itunes_id_tag: Union[Tag, NavigableString, None] = html_data.find(\"meta\", attrs={\"name\": \"apple:content_id\"})\r\n        if not isinstance(itunes_id_tag, Tag):\r\n            raise PageLoadError(\"HTML page did not load properly.\")\r\n\r\n        itunes_id: str = itunes_id_tag.attrs[\"content\"]\r\n\r\n        # Scrape a dictionary on the webpage that has playlists data\r\n        shoebox_data_tag: Union[Tag, NavigableString, None] = html_data.find(\"script\", attrs={\"id\": \"shoebox-ember-data-store\", \"type\": \"fastboot/shoebox\"})\r\n\r\n        # fastboot/shoebox data could not be found\r\n        if not isinstance(shoebox_data_tag, Tag):\r\n            raise PageLoadError(\"fastboot/shoebox data could not be found.\")\r\n\r\n        # Convert to dictionary structure\r\n        shoebox_data: dict = json.loads(str(shoebox_data_tag.contents[0]).strip())\r\n\r\n        # Loop safely to find a matching playlist\r\n        if isinstance(shoebox_data[itunes_id].get(\"included\"), list):\r\n            movie_data: dict = shoebox_data[itunes_id]\r\n            movie_title: str = movie_data[\"data\"][\"attributes\"][\"name\"]\r\n            movie_release_year = datetime.strptime(movie_data[\"data\"][\"attributes\"][\"releaseDate\"], '%Y-%m-%d').year\r\n\r\n            for item in movie_data[\"included\"]:\r\n                if isinstance(item.get(\"type\"), str) and item[\"type\"] == \"offer\":\r\n                    if isinstance(item.get(\"attributes\"), dict) and \\\r\n                        isinstance(item[\"attributes\"].get(\"assets\"), list) and \\\r\n                            len(item[\"attributes\"][\"assets\"]) > 0:\r\n\r\n                        for asset in item[\"attributes\"][\"assets\"]:\r\n                            if isinstance(asset, dict) and isinstance(asset.get(\"hlsUrl\"), str):\r\n                                playlist_url: str = item[\"attributes\"][\"assets\"][0][\"hlsUrl\"]\r\n\r\n                                # Try loading the playlist to assure it's working\r\n                                try:\r\n                                    m3u8.load(playlist_url)\r\n\r\n                                # If m3u8 playlist is invalid, skip it\r\n                                except (ValueError, HTTPError):\r\n                                    continue\r\n\r\n                                return MovieData(DataSource.ITUNES, movie_title, movie_release_year, [PlaylistData(itunes_id, playlist_url)])\r\n        else:\r\n            raise PageLoadError(\"Invalid shoebox data.\")\r\n\r\n        return MovieData(DataSource.ITUNES, movie_title, movie_release_year, [])\r\n\r\n    @staticmethod\r\n    def _find_playlist_data_appletv_json_(json_data: dict) -> MovieData:\r\n        \"\"\"\r\n        Scrape an iTunes JSON response to get movie info.\r\n\r\n        Args:\r\n            json_data (dict): A dictionary with AppleTV data loaded from a JSON response.\r\n\r\n        Returns:\r\n            MovieData: A MovieData (NamedTuple) object with movie's name, and an M3U8 object of the playlist\r\n            if the playlist is found. None otherwise.\r\n        \"\"\"\r\n        # Scrape a dictionary on the webpage that has playlists data\r\n\r\n        movie_title = json_data[\"data\"][\"content\"][\"title\"]\r\n        release_epoch = json_data[\"data\"][\"content\"][\"releaseDate\"] // 1000\r\n\r\n        # Release date epoch is not negative (After 01/01/1970)\r\n        if release_epoch > 0:\r\n            movie_release_year = datetime.fromtimestamp(release_epoch).year\r\n\r\n        else:\r\n            movie_release_year = (datetime(1970, 1, 1) + timedelta(seconds=release_epoch)).year\r\n\r\n        playables_data = json_data[\"data\"][\"playables\"]\r\n        playlists: List[PlaylistData] = []\r\n        itunes_ids_set = set()\r\n\r\n        for playable in playables_data.values():\r\n            if playable[\"isItunes\"]:\r\n                itunes_id = playable[\"externalId\"]\r\n\r\n                # Assure playlist on current offer isn't the same as another\r\n                if itunes_id not in itunes_ids_set:\r\n                    for offer in playable[\"itunesMediaApiData\"][\"offers\"]:\r\n                        playlist_url: str = offer[\"hlsUrl\"]\r\n\r\n                        # Try loading the playlist to assure it's working\r\n                        try:\r\n                            m3u8.load(playlist_url)\r\n\r\n                        # If m3u8 playlist is invalid, skip it\r\n                        except (ValueError, HTTPError):\r\n                            continue\r\n\r\n                        playlists.append(PlaylistData(itunes_id, playlist_url))\r\n                        break\r\n\r\n        return MovieData(DataSource.APPLETV, movie_title, movie_release_year, playlists)\r\n\r\n    @staticmethod\r\n    def _find_playlist_data_appletv_html_(html_data: BeautifulSoup) -> MovieData:\r\n        \"\"\"\r\n        Scrape an AppleTV HTML page to find movie info and it's M3U8 playlist.\r\n\r\n        Args:\r\n            html_data (BeautifulSoup): A BeautifulSoup object of the page.\r\n\r\n        Raises:\r\n            PageLoadError: HTML page did not load properly.\r\n\r\n        Returns:\r\n            MovieData: A MovieData (NamedTuple) object with movie's name, and an M3U8 object of the playlist\r\n            if the playlist is found. None otherwise.\r\n        \"\"\"\r\n        # Scrape a dictionary on the webpage that has playlists data\r\n        shoebox_data_tag: Union[Tag, NavigableString, None] = html_data.find(\"script\", attrs={\"id\": \"shoebox-uts-api\", \"type\": \"fastboot/shoebox\"})\r\n\r\n        # fastboot/shoebox data could not be found\r\n        if not isinstance(shoebox_data_tag, Tag):\r\n            raise PageLoadError(\"fastboot/shoebox data could not be found.\")\r\n\r\n        try:\r\n            # Convert to dictionary structure\r\n            shoebox_data: dict = json.loads(next(iter(json.loads(str(shoebox_data_tag.contents[0])).values())))\r\n            json_data: dict = shoebox_data[\"d\"]\r\n\r\n        except (KeyError, TypeError):\r\n            raise PageLoadError(\"Invalid / missing data on the page.\")\r\n\r\n        return Scraper._find_playlist_data_appletv_json_(json_data)\r\n\r\n    @staticmethod\r\n    def find_subtitles(main_playlist: M3U8, subtitles_filter: Union[list, None] = None) -> Iterator[SubtitlesData]:\r\n        \"\"\"\r\n        Find and yield playlists within main_playlist for subtitles that match a filter.\r\n\r\n        Args:\r\n            main_playlist (M3U8): an M3U8 object of the main playlist.\r\n            subtitles_filter (list, optional): A list of subtitles language codes (ISO 639-1) or names to use as a filter. Defaults to None.\r\n\r\n        Yields:\r\n            SubtitlesData: A NamedTuple with a matching playlist, and it's metadata:\r\n            Language Code, Language Name, SubtitlesType, Playlist URL.\r\n        \"\"\"\r\n        if subtitles_filter is not None:\r\n            # Convert filters to lower-case for case-insensitive matching\r\n            subtitles_filter = [f.lower() for f in subtitles_filter]\r\n\r\n        for playlist in main_playlist.media:\r\n            # Check whether playlist is valid and matches filter\r\n            # \"group_id\" can be either [\"subtitles_ak\" / \"subtitles_vod-ak-amt.tv.apple.com\"] or\r\n            # [\"subtitles_ap2\" / \"subtitles_ap3\" / \"subtitles_vod-ap-amt.tv.apple.com\" / \"subtitles_vod-ap1-amt.tv.apple.com\" / \"subtitles_vod-ap3-amt.tv.apple.com\"]\r\n            if (playlist.type == \"SUBTITLES\") and (playlist.group_id in (\"subtitles_ak\", \"subtitles_vod-ak-amt.tv.apple.com\")):\r\n\r\n                language_code: str = playlist.language\r\n                language_name: str = playlist.name\r\n                sub_type: SubtitlesType = SubtitlesType.NORMAL\r\n\r\n                # Playlist does not match filter\r\n                if subtitles_filter is not None and not (language_code.lower() in subtitles_filter or language_name in subtitles_filter):\r\n                    continue\r\n\r\n                # Change subtitles type to \"Forced\" / \"Closed Captions\" if needed.\r\n                if playlist.forced == \"YES\":\r\n                    sub_type = SubtitlesType.FORCED\r\n\r\n                elif playlist.characteristics is not None and \"public.accessibility\" in playlist.characteristics:\r\n                    sub_type = SubtitlesType.CC\r\n\r\n                yield SubtitlesData(language_code, language_name, sub_type, playlist.uri)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/isubrip/scraper.py b/isubrip/scraper.py
--- a/isubrip/scraper.py	(revision 3120b7cdc58a946b9448f3712ed2c4ce663acb94)
+++ b/isubrip/scraper.py	(date 1662744652756)
@@ -21,7 +21,6 @@
 
     _atv_storefronts = None
 
-
     @staticmethod
     def get_movie_data(url: str, headers: Union[dict, None] = None) -> MovieData:
         """
Index: isubrip/__main__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import atexit\r\nimport os\r\nimport shutil\r\nimport sys\r\n\r\nfrom pathlib import Path\r\nfrom xml.etree import ElementTree\r\n\r\nimport m3u8\r\nimport requests\r\n\r\nfrom isubrip.constants import DATA_FOLDER_PATH, DEFAULT_CONFIG_PATH, PACKAGE_NAME, PYPI_RSS_URL, TEMP_FOLDER_PATH, USER_CONFIG_FILE\r\nfrom isubrip.enums import DataSource\r\nfrom isubrip.exceptions import ConfigError\r\nfrom isubrip.namedtuples import MovieData\r\nfrom isubrip.playlist_downloader import PlaylistDownloader\r\nfrom isubrip.scraper import Scraper\r\nfrom isubrip.subtitles import Subtitles\r\nfrom isubrip.utils import format_title, parse_config\r\n\r\n\r\ndef main() -> None:\r\n    # Load default and user (if it exists) config files\r\n    config_files = [DEFAULT_CONFIG_PATH]\r\n\r\n    ### DEPRECATED ###\r\n    deprecated_config_file = None\r\n\r\n    # Windows\r\n    if sys.platform == \"win32\":\r\n        deprecated_config_file = Path(os.environ['APPDATA']) / \"iSubRip\" / \"config.toml\"\r\n\r\n    # Linux\r\n    elif sys.platform == \"linux\":\r\n        deprecated_config_file = Path.home() / \".config\" / \"iSubRip\" / \"config.toml\"\r\n\r\n    if deprecated_config_file and deprecated_config_file.is_file():\r\n        config_files.append(deprecated_config_file)\r\n        print(\"Warning: A config file was found in a deprecated location that will be unsupported in future versions.\\n\"\r\n              f\"Please move the config file to \\\"{USER_CONFIG_FILE}\\\" to avoid future issues.\\n\")\r\n    ### END DEPRECATED ###\r\n\r\n    # If data folder doesn't exist, create it\r\n    if not DATA_FOLDER_PATH.is_dir():\r\n        DATA_FOLDER_PATH.mkdir(parents=True, exist_ok=True)\r\n\r\n    else:\r\n        # If a user config file exists, add it\r\n        if USER_CONFIG_FILE.is_file():\r\n            config_files.append(USER_CONFIG_FILE)\r\n\r\n    # Check if at least one argument was passed, exit if not\r\n    if len(sys.argv) < 2:\r\n        print_usage()\r\n        exit(1)\r\n\r\n    # Exit if default config file is missing for some reason\r\n    if not DEFAULT_CONFIG_PATH.is_file():\r\n        print(\"Error: Default config file could not be found.\")\r\n        exit(1)\r\n\r\n    try:\r\n        config = parse_config(*config_files)\r\n\r\n    except (ConfigError, FileNotFoundError) as e:\r\n        print(f\"Error: {e}\")\r\n        exit(1)\r\n\r\n    # Set `Subtitles` settings from config\r\n    Subtitles.remove_duplicates = config.subtitles[\"remove-duplicates\"]\r\n    Subtitles.fix_rtl = config.subtitles[\"fix-rtl\"]\r\n    Subtitles.rtl_languages = config.subtitles[\"rtl-languages\"]\r\n\r\n    download_path: Path\r\n    download_to_temp: bool\r\n\r\n    # Set download path to temp folder \"zip\" setting is used\r\n    if config.downloads[\"zip\"]:\r\n        download_path = TEMP_FOLDER_PATH\r\n        download_to_temp = True\r\n        TEMP_FOLDER_PATH.mkdir(exist_ok=True)\r\n        atexit.register(shutil.rmtree, TEMP_FOLDER_PATH)\r\n\r\n    else:\r\n        download_path = Path(config.downloads[\"folder\"])\r\n        download_to_temp = False\r\n\r\n    if config.general[\"check-for-updates\"]:\r\n        check_for_updates()\r\n\r\n    for idx, url in enumerate(sys.argv[1:]):\r\n        if idx > 0:\r\n            print(\"\\n--------------------------------------------------\\n\")  # Print between different movies\r\n\r\n        print(f\"Scraping {url}...\")\r\n\r\n        try:\r\n            movie_data: MovieData = Scraper.get_movie_data(url, {\"User-Agent\": config.scraping[\"user-agent\"]})\r\n\r\n            # AppleTV link used, but no iTunes playlist found on page\r\n            if movie_data.data_source == DataSource.APPLETV and not movie_data.playlists:\r\n                print(\"An iTunes offer could not be found. Skipping...\")\r\n                continue\r\n\r\n        except Exception as e:\r\n            print(f\"Error: {e}\")\r\n            continue\r\n\r\n        print(f\"Found movie: {movie_data.name}\")\r\n\r\n        if not movie_data.playlists:\r\n            print(f\"Error: No valid playlist could be found.\")\r\n            continue\r\n\r\n        multiple_playlists = len(movie_data.playlists) > 1\r\n        downloaded_subtitles_langs = set()\r\n        downloaded_subtitles_paths = []\r\n        subtitles_count = 0\r\n\r\n        # Create temp folder if needed\r\n        if download_to_temp:\r\n            movie_download_path = download_path / f\"{format_title(movie_data.name)}.iT.WEB\"\r\n            movie_download_path.mkdir(exist_ok=True)\r\n\r\n        else:\r\n            movie_download_path = download_path\r\n\r\n        with PlaylistDownloader(config.downloads[\"user-agent\"]) as playlist_downloader:\r\n            for idy, playlist in enumerate(movie_data.playlists):\r\n                # Print empty line between different playlists\r\n                if idy > 0:\r\n                    print()\r\n\r\n                if multiple_playlists:\r\n                    print(f\"id{playlist.itunes_id}:\")\r\n\r\n                m3u8_playlist: m3u8.M3U8 = m3u8.load(playlist.url)\r\n                separate_playlist_folder: bool = multiple_playlists and not config.downloads[\"merge-playlists\"]\r\n                playlist_subtitles_count = 0\r\n\r\n                # Create folder for playlist if needed\r\n                if separate_playlist_folder:\r\n                    playlist_download_path = movie_download_path / f\"id{playlist.itunes_id}\"\r\n                    playlist_download_path.mkdir(exist_ok=True)\r\n\r\n                else:\r\n                    playlist_download_path = movie_download_path\r\n\r\n                for subtitles in Scraper.find_subtitles(m3u8_playlist, config.downloads[\"languages\"]):\r\n                    if not config.downloads[\"merge-playlists\"] or \\\r\n                            (config.downloads[\"merge-playlists\"] and subtitles.language_code not in downloaded_subtitles_langs):\r\n                        playlist_subtitles_count += 1\r\n                        print(f\"Downloading \\\"{subtitles.language_name}\\\" ({subtitles.language_code}) subtitles...\")\r\n                        downloaded_subtitles = playlist_downloader.download_subtitles(movie_data, subtitles, playlist_download_path, config.downloads[\"format\"])\r\n\r\n                        # Assure subtitles downloaded successfully\r\n                        if downloaded_subtitles.is_file():\r\n                            downloaded_subtitles_paths.append(downloaded_subtitles)\r\n\r\n                if separate_playlist_folder:\r\n                    print(f\"{playlist_subtitles_count} subtitles were downloaded.\")\r\n\r\n                    # Remove playlist folder if it's empty\r\n                    if playlist_subtitles_count == 0:\r\n                        playlist_download_path.rmdir()\r\n\r\n                subtitles_count += playlist_subtitles_count\r\n\r\n        # If files were downloaded to a temp folder (\"zip\" option was used)\r\n        if download_to_temp:\r\n            if len(downloaded_subtitles_paths) == 1:\r\n                shutil.copy(downloaded_subtitles_paths[0], config.downloads[\"folder\"])\r\n\r\n            elif len(downloaded_subtitles_paths) > 1:\r\n                # Create zip archive\r\n                print(f\"\\nCreating zip archive...\")\r\n                archive_inital_path = download_path / movie_download_path.stem\r\n                archive_dest_path = shutil.make_archive(base_name=str(archive_inital_path), format=\"zip\", root_dir=movie_download_path)\r\n                shutil.copy(archive_dest_path, config.downloads[\"folder\"])\r\n\r\n            # Remove temp dir\r\n            shutil.rmtree(movie_download_path)\r\n            atexit.unregister(shutil.rmtree)\r\n\r\n        # Add playlists count only if it's more than 1\r\n        playlists_messgae = f\"from {len(movie_data.playlists)} playlists \" if len(movie_data.playlists) > 0 else \"\"\r\n\r\n        print(f\"\\n{len(downloaded_subtitles_paths)}/{subtitles_count} matching subtitles \",\r\n              f\"for \\\"{movie_data.name}\\\" were downloaded {playlists_messgae}\",\r\n              f\"to {Path(config.downloads['folder']).absolute()}\\\".\", sep=\"\")\r\n\r\n\r\ndef check_for_updates() -> None:\r\n    \"\"\"Check and print if a newer version of the package is available.\"\"\"\r\n    # If anything breaks, just skip update check\r\n    try:\r\n        current_version = sys.modules[PACKAGE_NAME].__version__\r\n\r\n        response = requests.get(PYPI_RSS_URL).text\r\n        xml_data = ElementTree.fromstring(response)\r\n        latest_version = xml_data.find(\"channel/item/title\").text\r\n\r\n        # If the latest PyPI release is different from current one, print a message\r\n        if latest_version != current_version:\r\n            print(f\"Note: You are currently using version {current_version} of {PACKAGE_NAME}, however version {latest_version} is available.\",\r\n                  f\"\\nConsider upgrading by running \\\"python3 -m pip install --upgrade {PACKAGE_NAME}\\\"\\n\")\r\n\r\n    except Exception:\r\n        return\r\n\r\n\r\ndef print_usage() -> None:\r\n    \"\"\"Print usage information.\"\"\"\r\n    print(f\"Usage: {PACKAGE_NAME} <iTunes movie URL> [iTunes movie URL...]\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/isubrip/__main__.py b/isubrip/__main__.py
--- a/isubrip/__main__.py	(revision 3120b7cdc58a946b9448f3712ed2c4ce663acb94)
+++ b/isubrip/__main__.py	(date 1664107316451)
@@ -4,6 +4,7 @@
 import sys
 
 from pathlib import Path
+from typing import Optional, Type
 from xml.etree import ElementTree
 
 import m3u8
@@ -14,12 +15,12 @@
 from isubrip.exceptions import ConfigError
 from isubrip.namedtuples import MovieData
 from isubrip.playlist_downloader import PlaylistDownloader
-from isubrip.scraper import Scraper
+from isubrip.scrapers.scrapers_importer import *
 from isubrip.subtitles import Subtitles
 from isubrip.utils import format_title, parse_config
 
 
-def main() -> None:
+def main():
     # Load default and user (if it exists) config files
     config_files = [DEFAULT_CONFIG_PATH]
 
@@ -93,9 +94,16 @@
             print("\n--------------------------------------------------\n")  # Print between different movies
 
         print(f"Scraping {url}...")
+        scrape_obj = find_matching_scraper(url)
+
+        if not scrape_obj:
+            print(f"Error: No valid scraper found for URL \"{url}\"")
+            continue
+
+        scraper = create_scraper_obj(scrape_obj, config)
 
         try:
-            movie_data: MovieData = Scraper.get_movie_data(url, {"User-Agent": config.scraping["user-agent"]})
+            movie_data: MovieData = scraper.get_movie_data(url, {"User-Agent": config.scraping["user-agent"]})
 
             # AppleTV link used, but no iTunes playlist found on page
             if movie_data.data_source == DataSource.APPLETV and not movie_data.playlists:
@@ -214,5 +222,17 @@
     print(f"Usage: {PACKAGE_NAME} <iTunes movie URL> [iTunes movie URL...]")
 
 
+def find_matching_scraper(url: str) -> Optional[Type[Scraper]]:
+    for scraper in scraper_objs:
+        if scraper.check_url_match(url):
+            return scraper
+
+    return None
+
+def create_scraper_obj()
+
 if __name__ == "__main__":
+    a = find_matching_scraper("https://itunes.apple.com/us/movie/avengers-endgame/id1454463627")
+    b = find_matching_scraper("https://tv.apple.com/us/movie/umc.cmc.5cxq4yswbsp3apykshwrcb890")
+    c = find_matching_scraper("test")
     main()
Index: isubrip/namedtuples.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, NamedTuple, Type, Union\r\n\r\nfrom isubrip.enums import DataSource, SubtitlesType\r\n\r\n\r\nclass PlaylistData(NamedTuple):\r\n    \"\"\"A named tuple containing a playlist iTunes ID and URL.\"\"\"\r\n    itunes_id: str\r\n    url: str\r\n\r\n\r\nclass MovieData(NamedTuple):\r\n    \"\"\"A named tuple containing a movie name, id, and M3U8 playlist.\"\"\"\r\n    data_source: DataSource\r\n    name: str\r\n    release_year: int\r\n    playlists: List[PlaylistData]\r\n\r\n\r\nclass SubtitlesData(NamedTuple):\r\n    \"\"\"A named tuple containing language code, language name, type and playlist URL for subtitles.\"\"\"\r\n    language_code: str\r\n    language_name: str\r\n    subtitles_type: SubtitlesType\r\n    playlist_url: str\r\n\r\n\r\nclass ConfigSetting(NamedTuple):\r\n    category: str\r\n    key: str\r\n    types: Union[tuple, Type]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/isubrip/namedtuples.py b/isubrip/namedtuples.py
--- a/isubrip/namedtuples.py	(revision 3120b7cdc58a946b9448f3712ed2c4ce663acb94)
+++ b/isubrip/namedtuples.py	(date 1664197077646)
@@ -1,6 +1,6 @@
 from typing import List, NamedTuple, Type, Union
 
-from isubrip.enums import DataSource, SubtitlesType
+from isubrip.enums import SubtitlesType
 
 
 class PlaylistData(NamedTuple):
@@ -11,10 +11,29 @@
 
 class MovieData(NamedTuple):
     """A named tuple containing a movie name, id, and M3U8 playlist."""
-    data_source: DataSource
     name: str
     release_year: int
-    playlists: List[PlaylistData]
+    playlists: Union[PlaylistData, List[PlaylistData]]
+
+
+class EpisodeData(NamedTuple):
+    episode_number: int
+    episode_name: Union[str, None]
+    playlist: Union[str, None]
+
+
+class SeasonData(NamedTuple):
+    """A named tuple containing a season number and M3U8 playlist."""
+    season_number: int
+    episode_name: Union[str, None]
+    episodes: List[EpisodeData]
+
+
+class SeriesData(NamedTuple):
+    """A named tuple containing a movie name, id, and M3U8 playlist."""
+    name: str
+    release_year: int
+    seasons: List[SeasonData]
 
 
 class SubtitlesData(NamedTuple):
@@ -28,4 +47,5 @@
 class ConfigSetting(NamedTuple):
     category: str
     key: str
-    types: Union[tuple, Type]
+    types: Union[tuple[Type], Type]
+    required: bool = True
