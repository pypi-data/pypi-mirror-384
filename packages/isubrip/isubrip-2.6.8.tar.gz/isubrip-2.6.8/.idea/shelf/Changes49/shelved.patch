Index: isubrip/data_structures.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from __future__ import annotations\r\n\r\nimport datetime as dt\r\nfrom enum import Enum\r\nfrom typing import Generic, NamedTuple, TypeVar, Union\r\n\r\nfrom pydantic import BaseModel, ConfigDict\r\n\r\n\r\nMediaData = TypeVar(\"MediaData\", bound=Union[\"Movie\", \"Episode\", \"Season\", \"Series\"])\r\n\r\n\r\nclass SubtitlesDownloadResults(NamedTuple):\r\n    \"\"\"\r\n    A named tuple containing download results.\r\n\r\n    Attributes:\r\n        movie_data (Movie): Movie data object.\r\n        successful_subtitles (list[SubtitlesData]): List of subtitles that were successfully downloaded.\r\n        failed_subtitles (list[SubtitlesData]): List of subtitles that failed to download.\r\n        is_zip (bool): Whether the subtitles were saved in a zip file.\r\n    \"\"\"\r\n    movie_data: Movie\r\n    successful_subtitles: list[SubtitlesData]\r\n    failed_subtitles: list[SubtitlesData]\r\n    is_zip: bool\r\n\r\n\r\nclass SubtitlesFormat(BaseModel):\r\n    \"\"\"\r\n    An object containing subtitles format data.\r\n\r\n    Attributes:\r\n        name (str): Name of the format.\r\n        file_extension (str): File extension of the format.\r\n    \"\"\"\r\n    name: str\r\n    file_extension: str\r\n\r\n\r\nclass SubtitlesFormatType(Enum):\r\n    \"\"\"\r\n    An Enum representing subtitles formats.\r\n\r\n    Attributes:\r\n        SUBRIP (SubtitlesFormat): SubRip format.\r\n        WEBVTT (SubtitlesFormat): WebVTT format.\r\n    \"\"\"\r\n    SUBRIP = SubtitlesFormat(name=\"SubRip\", file_extension=\"srt\")\r\n    WEBVTT = SubtitlesFormat(name=\"WebVTT\", file_extension=\"vtt\")\r\n\r\n\r\nclass SubtitlesType(Enum):\r\n    \"\"\"\r\n    Subtitles special type.\r\n\r\n    Attributes:\r\n        CC (SubtitlesType): Closed captions.\r\n        FORCED (SubtitlesType): Forced subtitles.\r\n    \"\"\"\r\n    CC = \"CC\"\r\n    FORCED = \"Forced\"\r\n\r\n\r\n# TODO: Use `kw_only` on dataclasses, and set default values of None for optional arguments once min version => 3.10\r\n\r\nclass SubtitlesData(BaseModel):\r\n    \"\"\"\r\n    An object containing subtitles data and metadata.\r\n\r\n    Attributes:\r\n        language_code (str): Language code of the language the subtitles are in.\r\n        language_name (str): Name of the language the subtitles are in.\r\n        subtitles_format (SubtitlesFormatType): Format of the subtitles.\r\n        content (bytes): Content of the subtitles in binary format.\r\n        special_type (SubtitlesType | None): Type of the subtitles, if they're not regular. Defaults to None.\r\n    \"\"\"\r\n    language_code: str\r\n    language_name: str\r\n    subtitles_format: SubtitlesFormatType\r\n    content: bytes\r\n    special_type: SubtitlesType | None = None\r\n\r\n    class ConfigDict:\r\n        str_strip_whitespace = True\r\n\r\n\r\nclass Movie(BaseModel):\r\n    \"\"\"\r\n    An object containing movie metadata.\r\n\r\n    Attributes:\r\n        id (str | None, optional): ID of the movie on the service it was scraped from. Defaults to None.\r\n        referer_id (str | None, optional): ID of the movie on the original referring service. Defaults to None.\r\n        name (str): Title of the movie.\r\n        release_date (datetime | int | None, optional): Release date (datetime), or year (int) of the movie.\r\n            Defaults to None.\r\n        duration (timedelta | None, optional): Duration of the movie. Defaults to None.\r\n        preorder_availability_date (datetime | None, optional):\r\n            Date when the movie will be available for pre-order on the service it was scraped from.\r\n            None if not a pre-order. Defaults to None.\r\n        playlist (str | None, optional): Main playlist URL(s).\r\n    \"\"\"\r\n    name: str\r\n    release_date: dt.datetime | int\r\n    id: str | None = None\r\n    referer_id: str | None = None\r\n    duration: dt.timedelta | None = None\r\n    preorder_availability_date: dt.datetime | None = None\r\n    playlist: str | list[str] | None = None\r\n\r\n\r\nclass Episode(BaseModel):\r\n    \"\"\"\r\n    An object containing episode metadata.\r\n\r\n    Attributes:\r\n        id (str | None, optional): ID of the episode on the service it was scraped from. Defaults to None.\r\n        series_name (str): Name of the series the episode is from.\r\n        series_release_date (datetime | int | None, optional): Release date (datetime), or year (int) of the series.\r\n            Defaults to None.\r\n        season_number (int): Season number.\r\n        season_name (str | None, optional): Season name. Defaults to None.\r\n        episode_number (int): Episode number.\r\n        episode_name (str | None, optional): Episode name. Defaults to None.\r\n        episode_release_date (datetime | None): Release date of the episode. Defaults to None.\r\n        playlist (str | None, optional): Main playlist URL(s).\r\n    \"\"\"\r\n    series_name: str\r\n    season_number: int\r\n    episode_number: int\r\n    id: str | None = None\r\n    series_release_date: dt.datetime | int | None = None\r\n    season_name: str | None = None\r\n    release_date: dt.datetime | None = None\r\n    duration: dt.timedelta | None = None\r\n    episode_name: str | None = None\r\n    episode_release_date: dt.datetime | None = None\r\n    playlist: str | list[str] | None = None\r\n\r\n\r\nclass Season(BaseModel):\r\n    \"\"\"\r\n    An object containing season metadata.\r\n\r\n    Attributes:\r\n        id (str | None, optional): ID of the season on the service it was scraped from. Defaults to None.\r\n        series_name (str): Name of the series the season is from.\r\n        series_release_date (datetime | int | None, optional): Release date (datetime), or year (int) of the series.\r\n            Defaults to None.\r\n        season_name (str | None, optional): Season name. Defaults to None.\r\n        season_release_date (datetime | None, optional): Release date of the season, or release year. Defaults to None.\r\n        episodes (list[Episode]): A list of episode objects containing metadata about episodes of the season.\r\n    \"\"\"\r\n    series_name: str\r\n    season_number: int\r\n    id: str | None = None\r\n    series_release_date: dt.datetime | int | None = None\r\n    season_name: str | None = None\r\n    season_release_date: dt.datetime | int | None = None\r\n    episodes: list[Episode] = []\r\n\r\n\r\nclass Series(BaseModel):\r\n    \"\"\"\r\n    An object containing series metadata.\r\n\r\n    Attributes:\r\n        series_name (str): Series name.\r\n        series_release_date (datetime | int | None, optional): Release date (datetime), or year (int) of the series.\r\n            Defaults to None.\r\n        seasons (list[Season]): A list of season objects containing metadata about seasons of the series.\r\n    \"\"\"\r\n    series_name: str\r\n    seasons: list[Season] = []\r\n    series_release_date: dt.datetime | int | None = None\r\n\r\n\r\nclass ScrapedMediaResponse(BaseModel, Generic[MediaData]):\r\n    \"\"\"\r\n    An object containing scraped media data and metadata.\r\n\r\n    Attributes:\r\n        media_data (Movie | list[Movie] | Episode | list[Episode] | Season | list[Season] | Series | list[Series]):\r\n            An object containing the scraped media data.\r\n        metadata_scraper (str): ID of the scraper that was used to scrape metadata.\r\n        playlist_scraper (str): ID of the scraper that should be used to parse and scrape the playlist.\r\n        original_data (dict): Original raw data from the API that was used to extract media's data.\r\n    \"\"\"\r\n    model_config = ConfigDict(arbitrary_types_allowed=True)\r\n\r\n    media_data: MediaData | list[MediaData]\r\n    metadata_scraper: str\r\n    playlist_scraper: str\r\n    original_data: dict\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/isubrip/data_structures.py b/isubrip/data_structures.py
--- a/isubrip/data_structures.py	(revision e07e12557aeb3a2f9ee62d9e189d362c912739a9)
+++ b/isubrip/data_structures.py	(date 1690626414448)
@@ -2,7 +2,7 @@
 
 import datetime as dt
 from enum import Enum
-from typing import Generic, NamedTuple, TypeVar, Union
+from typing import Generic, List, NamedTuple, Optional, TypeVar, Union
 
 from pydantic import BaseModel, ConfigDict
 
@@ -79,7 +79,7 @@
     language_name: str
     subtitles_format: SubtitlesFormatType
     content: bytes
-    special_type: SubtitlesType | None = None
+    special_type: Union[SubtitlesType, None] = None
 
     class ConfigDict:
         str_strip_whitespace = True
@@ -102,12 +102,12 @@
         playlist (str | None, optional): Main playlist URL(s).
     """
     name: str
-    release_date: dt.datetime | int
-    id: str | None = None
-    referer_id: str | None = None
-    duration: dt.timedelta | None = None
-    preorder_availability_date: dt.datetime | None = None
-    playlist: str | list[str] | None = None
+    release_date: Union[dt.datetime, int]
+    id: Optional[str] = None
+    referer_id: Optional[str] = None
+    duration: Optional[dt.timedelta] = None
+    preorder_availability_date: Optional[dt.datetime] = None
+    playlist: Union[str, List[str], None] = None
 
 
 class Episode(BaseModel):
@@ -129,14 +129,14 @@
     series_name: str
     season_number: int
     episode_number: int
-    id: str | None = None
-    series_release_date: dt.datetime | int | None = None
-    season_name: str | None = None
-    release_date: dt.datetime | None = None
-    duration: dt.timedelta | None = None
-    episode_name: str | None = None
-    episode_release_date: dt.datetime | None = None
-    playlist: str | list[str] | None = None
+    id: Optional[str] = None
+    series_release_date: Union[dt.datetime, int, None] = None
+    season_name: Optional[str] = None
+    release_date: Optional[dt.datetime] = None
+    duration: Optional[dt.timedelta] = None
+    episode_name: Optional[str] = None
+    episode_release_date: Optional[dt.datetime] = None
+    playlist: Union[str, List[str], None] = None
 
 
 class Season(BaseModel):
@@ -154,11 +154,11 @@
     """
     series_name: str
     season_number: int
-    id: str | None = None
-    series_release_date: dt.datetime | int | None = None
-    season_name: str | None = None
-    season_release_date: dt.datetime | int | None = None
-    episodes: list[Episode] = []
+    id: Optional[str] = None
+    series_release_date: Union[dt.datetime, int, None] = None
+    season_name: Optional[str] = None
+    season_release_date: Union[dt.datetime, int, None] = None
+    episodes: List[Episode] = []
 
 
 class Series(BaseModel):
@@ -172,8 +172,8 @@
         seasons (list[Season]): A list of season objects containing metadata about seasons of the series.
     """
     series_name: str
-    seasons: list[Season] = []
-    series_release_date: dt.datetime | int | None = None
+    seasons: List[Season] = []
+    series_release_date: Union[dt.datetime, int] = None
 
 
 class ScrapedMediaResponse(BaseModel, Generic[MediaData]):
@@ -189,7 +189,7 @@
     """
     model_config = ConfigDict(arbitrary_types_allowed=True)
 
-    media_data: MediaData | list[MediaData]
+    media_data: Union[MediaData, List[MediaData]]
     metadata_scraper: str
     playlist_scraper: str
     original_data: dict
