# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pingera.models.monitor_check_result import MonitorCheckResult

class TestMonitorCheckResult(unittest.TestCase):
    """MonitorCheckResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MonitorCheckResult:
        """Test MonitorCheckResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MonitorCheckResult`
        """
        model = MonitorCheckResult()
        if include_optional:
            return MonitorCheckResult(
                check_id = 'chk123def456',
                id = 'res789xyz012',
                check_server_id = 'srv123abc456',
                triggered_alerts = [{"alert_id":"alert123abc456","title":"Check 'API Health' has failed","severity":"high","status":"firing","is_primary_trigger":true}],
                status = 'ok',
                check_server = pingera.models.check_server.CheckServer(
                    id = 'srv123abc456', 
                    region = 'us-west-1', 
                    ip_address = '192.168.1.100', 
                    server_metadata = {"datacenter":"aws-oregon","provider":"aws"}, 
                    country = 'United States', ),
                created_at = '2024-01-15T14:30Z',
                check_metadata = {"status_code":200,"content_length":1024},
                error_message = 'Connection timeout after 10 seconds',
                response_time = 250
            )
        else:
            return MonitorCheckResult(
                check_id = 'chk123def456',
        )
        """

    def testMonitorCheckResult(self):
        """Test MonitorCheckResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
