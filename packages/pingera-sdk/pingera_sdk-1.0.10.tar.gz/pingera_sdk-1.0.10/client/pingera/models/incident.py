# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Incident(BaseModel):
    """
    Incident
    """ # noqa: E501
    components: Optional[Any] = Field(default=None, description="List of components affected by this incident with their current status.")
    status: StrictStr = Field(description="The current status of the incident.")
    impact: Optional[StrictStr] = Field(default=None, description="The impact level of the incident.")
    created_at: Optional[datetime] = Field(default=None, description="The timestamp when the incident was created in ISO format.")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="The name/title of the incident. Must be between 1 and 200 characters.")
    monitoring_at: Optional[datetime] = Field(default=None, description="The timestamp when the incident status was changed to monitoring.")
    auto_transition_to_maintenance_state: Optional[StrictBool] = Field(default=None, description="Whether to automatically transition components to maintenance state during scheduled maintenance.")
    body: Optional[StrictStr] = Field(default=None, description="The main description/body content of the incident.")
    scheduled_auto_completed: Optional[StrictBool] = Field(default=None, description="Whether the scheduled maintenance should automatically be marked as completed.")
    auto_transition_deliver_notifications_at_start: Optional[StrictBool] = Field(default=None, description="Whether to deliver notifications when auto-transitioning at the start of scheduled maintenance.")
    auto_transition_to_operational_state: Optional[StrictBool] = Field(default=None, description="Whether to automatically transition components back to operational state after scheduled maintenance.")
    postmortem_body_last_updated_at: Optional[Any] = Field(default=None, description="The timestamp when the postmortem body was last updated.")
    scheduled_for: Optional[datetime] = Field(default=None, description="For scheduled maintenance, the timestamp when maintenance is scheduled to start.")
    deliver_notifications: Optional[StrictBool] = Field(default=None, description="Whether to send notifications when creating or updating this incident.")
    reminder_intervals: Optional[StrictStr] = Field(default=None, description="The intervals at which to send reminder notifications for scheduled maintenance.")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the incident.")
    scheduled_until: Optional[datetime] = Field(default=None, description="For scheduled maintenance, the timestamp when maintenance is scheduled to end.")
    scheduled_remind_prior: Optional[StrictBool] = Field(default=None, description="Whether to send reminder notifications before scheduled maintenance begins.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata associated with the incident.")
    scheduled_auto_in_progress: Optional[StrictBool] = Field(default=None, description="Whether the scheduled maintenance should automatically be marked as in progress.")
    incident_updates: Optional[Any] = Field(default=None, description="List of all updates posted for this incident, sorted by creation time (newest first).")
    page_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the status page this incident belongs to.")
    scheduled_reminded_at: Optional[datetime] = Field(default=None, description="The timestamp when reminder notifications were sent for scheduled maintenance.")
    updated_at: Optional[datetime] = Field(default=None, description="The timestamp when the incident was last updated in ISO format.")
    resolved_at: Optional[Any] = Field(default=None, description="The timestamp when the incident was resolved, derived from the latest update with 'resolved' status.")
    postmortem_published_at: Optional[Any] = Field(default=None, description="The timestamp when the postmortem was published.")
    auto_transition_deliver_notifications_at_end: Optional[StrictBool] = Field(default=None, description="Whether to deliver notifications when auto-transitioning at the end of scheduled maintenance.")
    postmortem_body: Optional[Any] = Field(default=None, description="The content of the incident postmortem, if published.")
    __properties: ClassVar[List[str]] = ["components", "status", "impact", "created_at", "name", "monitoring_at", "auto_transition_to_maintenance_state", "body", "scheduled_auto_completed", "auto_transition_deliver_notifications_at_start", "auto_transition_to_operational_state", "postmortem_body_last_updated_at", "scheduled_for", "deliver_notifications", "reminder_intervals", "id", "scheduled_until", "scheduled_remind_prior", "metadata", "scheduled_auto_in_progress", "incident_updates", "page_id", "scheduled_reminded_at", "updated_at", "resolved_at", "postmortem_published_at", "auto_transition_deliver_notifications_at_end", "postmortem_body"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['investigating', 'identified', 'monitoring', 'resolved']):
            raise ValueError("must be one of enum values ('investigating', 'identified', 'monitoring', 'resolved')")
        return value

    @field_validator('impact')
    def impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['minor', 'major', 'critical']):
            raise ValueError("must be one of enum values ('minor', 'major', 'critical')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Incident from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "postmortem_body_last_updated_at",
            "id",
            "incident_updates",
            "page_id",
            "updated_at",
            "resolved_at",
            "postmortem_published_at",
            "postmortem_body",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if components (nullable) is None
        # and model_fields_set contains the field
        if self.components is None and "components" in self.model_fields_set:
            _dict['components'] = None

        # set to None if postmortem_body_last_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.postmortem_body_last_updated_at is None and "postmortem_body_last_updated_at" in self.model_fields_set:
            _dict['postmortem_body_last_updated_at'] = None

        # set to None if incident_updates (nullable) is None
        # and model_fields_set contains the field
        if self.incident_updates is None and "incident_updates" in self.model_fields_set:
            _dict['incident_updates'] = None

        # set to None if resolved_at (nullable) is None
        # and model_fields_set contains the field
        if self.resolved_at is None and "resolved_at" in self.model_fields_set:
            _dict['resolved_at'] = None

        # set to None if postmortem_published_at (nullable) is None
        # and model_fields_set contains the field
        if self.postmortem_published_at is None and "postmortem_published_at" in self.model_fields_set:
            _dict['postmortem_published_at'] = None

        # set to None if postmortem_body (nullable) is None
        # and model_fields_set contains the field
        if self.postmortem_body is None and "postmortem_body" in self.model_fields_set:
            _dict['postmortem_body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Incident from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "components": obj.get("components"),
            "status": obj.get("status"),
            "impact": obj.get("impact"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "monitoring_at": obj.get("monitoring_at"),
            "auto_transition_to_maintenance_state": obj.get("auto_transition_to_maintenance_state"),
            "body": obj.get("body"),
            "scheduled_auto_completed": obj.get("scheduled_auto_completed"),
            "auto_transition_deliver_notifications_at_start": obj.get("auto_transition_deliver_notifications_at_start"),
            "auto_transition_to_operational_state": obj.get("auto_transition_to_operational_state"),
            "postmortem_body_last_updated_at": obj.get("postmortem_body_last_updated_at"),
            "scheduled_for": obj.get("scheduled_for"),
            "deliver_notifications": obj.get("deliver_notifications"),
            "reminder_intervals": obj.get("reminder_intervals"),
            "id": obj.get("id"),
            "scheduled_until": obj.get("scheduled_until"),
            "scheduled_remind_prior": obj.get("scheduled_remind_prior"),
            "metadata": obj.get("metadata"),
            "scheduled_auto_in_progress": obj.get("scheduled_auto_in_progress"),
            "incident_updates": obj.get("incident_updates"),
            "page_id": obj.get("page_id"),
            "scheduled_reminded_at": obj.get("scheduled_reminded_at"),
            "updated_at": obj.get("updated_at"),
            "resolved_at": obj.get("resolved_at"),
            "postmortem_published_at": obj.get("postmortem_published_at"),
            "auto_transition_deliver_notifications_at_end": obj.get("auto_transition_deliver_notifications_at_end"),
            "postmortem_body": obj.get("postmortem_body")
        })
        return _obj


