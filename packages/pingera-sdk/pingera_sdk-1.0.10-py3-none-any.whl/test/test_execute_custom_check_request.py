# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pingera.models.execute_custom_check_request import ExecuteCustomCheckRequest

class TestExecuteCustomCheckRequest(unittest.TestCase):
    """ExecuteCustomCheckRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExecuteCustomCheckRequest:
        """Test ExecuteCustomCheckRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExecuteCustomCheckRequest`
        """
        model = ExecuteCustomCheckRequest()
        if include_optional:
            return ExecuteCustomCheckRequest(
                type = 'web',
                parameters = {"regions":["US, East coast","EU, West"],"expected_status_code":200,"expected_content":"OK","pw_script":"const { test, expect } = require('@playwright/test');\n\ntest('example', async ({ page }) => {\n  await page.goto('https://example.com');\n  await expect(page).toHaveTitle(/Example/);\n});"},
                host = 'example.com',
                timeout = 10,
                port = 443,
                secrets = [{"secret_id":"imzahxn0vqfe","env_variable":"MY_DOMAIN"}],
                name = 'Custom API Health Check',
                url = 'https://api.example.com/health'
            )
        else:
            return ExecuteCustomCheckRequest(
                type = 'web',
                name = 'Custom API Health Check',
        )
        """

    def testExecuteCustomCheckRequest(self):
        """Test ExecuteCustomCheckRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
