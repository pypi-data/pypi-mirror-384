# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "gerrit-clone"
dynamic = ["version"]
description = "A multi-threaded CLI tool for bulk cloning repositories from Gerrit servers"
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "Matthew Watkins", email = "mwatkins@linuxfoundation.org" },
]
maintainers = [
    { name = "Matthew Watkins", email = "mwatkins@linuxfoundation.org" },
]
keywords = [
    "gerrit",
    "git",
    "clone",
    "bulk",
    "repository",
    "ci-cd",
    "ssh",
    "multi-threaded",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.11,<3.14"
dependencies = [
    "typer>=0.19.2,<0.20.0",
    "rich>=14.2.0,<15.0.0",
    "httpx>=0.28.1,<0.29.0",
    "pyyaml>=6.0.3,<7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2,<9.0.0",
    "pytest-cov>=6.3.0,<7.0.0",
    "pytest-mock>=3.15.1,<4.0.0",
    "pytest-asyncio>=0.25.3,<0.26.0",
    "types-PyYAML>=6.0.12.20250915,<7.0.0",
]

[project.urls]
Homepage = "https://github.com/lfreleng-actions/gerrit-clone-action"
Documentation = "https://github.com/lfreleng-actions/gerrit-clone-action#readme"
Repository = "https://github.com/lfreleng-actions/gerrit-clone-action.git"
Issues = "https://github.com/lfreleng-actions/gerrit-clone-action/issues"
Changelog = "https://github.com/lfreleng-actions/gerrit-clone-action/releases"

[project.scripts]
gerrit-clone = "gerrit_clone.cli:app"

# Hatchling build configuration
[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
# Build hooks for pre-build validation
require-runtime-dependencies = true

[tool.hatch.build.targets.wheel]
packages = ["src/gerrit_clone"]
# Include type information marker
include = [
    "src/gerrit_clone/py.typed",
]
# Exclude test files from wheel
exclude = [
    "tests/",
    "debug/",
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/IMPLEMENTATION.md",
    "/pyproject.toml",
    "/.gitignore",
    "/.pre-commit-config.yaml",
    "/action.yaml",
]
exclude = [
    "/.git",
    "/.github",
    "/.mypy_cache",
    "/.pytest_cache",
    "/.ruff_cache",
    "/.venv",
    "/htmlcov",
    "/debug",
    "*.pyc",
    "__pycache__",
]

# Development environment configuration
[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.4.2",
    "pytest-cov>=6.3.0",
    "pytest-mock>=3.15.1",
    "pytest-asyncio>=0.25.3",
    "types-PyYAML>=6.0.12.20250915",
    "mypy>=1.18.2",
    "ruff>=0.14.0",
    "pre-commit>=4.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=gerrit_clone --cov-report=term-missing {args:tests}"
test-cov-html = "pytest --cov=gerrit_clone --cov-report=html {args:tests}"
lint = "pre-commit run --all-files"
format = "ruff format src tests"
check = "mypy src tests"
clean = "rm -rf htmlcov .coverage .pytest_cache .mypy_cache .ruff_cache"

# Testing environment with different Python versions
[tool.hatch.envs.test]
template = "default"
[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12", "3.13", "3.14"]

# Documentation environment
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

# Packaging environment for builds and publishing
[tool.hatch.envs.packaging]
detached = true
dependencies = [
    "build>=1.2.0",
    "twine>=5.1.0",
]
[tool.hatch.envs.packaging.scripts]
build-all = "python -m build"
check-dist = "twine check dist/*"
upload-test = "twine upload --repository testpypi dist/*"
upload = "twine upload dist/*"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "PLR2004"]
"src/gerrit_clone/cli.py" = ["B008"]  # Typer requires function calls in defaults
"src/gerrit_clone/progress.py" = ["F401", "PLR0911", "SIM102"]  # Rich imports and complex progress logic
"src/gerrit_clone/pathing.py" = ["PLR0911", "TCH003"]  # Complex path checking logic and Path import needed at runtime
"src/gerrit_clone/retry.py" = ["TCH003", "TCH001", "SIM103"]  # Type checking imports and condition simplification
"src/gerrit_clone/worker.py" = ["PLR0911", "SIM103", "B904"]  # Complex error handling logic

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
files = ["src", "tests"]
strict = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
implicit_reexport = false
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gerrit_clone",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=35",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests that require network access",
    "unit: marks tests as unit tests",
]
asyncio_default_fixture_loop_scope = "function"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
    "pass",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Pyright configuration (extends existing settings)
[tool.pyright]
pythonVersion = "3.11"
include = ["src", "tests"]
exclude = [
    "build/",
    "dist/",
    "docs/",
    ".venv/",
    ".mypy_cache/",
    ".pytest_cache/",
    ".ruff_cache/",
    "htmlcov/",
]
typeCheckingMode = "strict"
reportMissingImports = "none"
reportMissingTypeStubs = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
# Focus on real issues, ignore pedantic ones
reportPrivateUsage = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportUnusedImport = "none"
reportConstantRedefinition = "none"
reportUnusedClass = "none"
reportUntypedClassDecorator = "none"
# Enable additional type checking features
reportCallIssue = "error"
reportArgumentType = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUnsupportedDunderAll = "error"

[dependency-groups]
dev = [
    "hatch-vcs>=0.5.0",
    "hatchling>=1.27.0",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=0.25.3",
    "pytest-cov>=6.3.0",
    "pytest-httpx>=0.35.0",
    "pytest-mock>=3.15.1",
    "types-pyyaml>=6.0.12.20250915",
]
