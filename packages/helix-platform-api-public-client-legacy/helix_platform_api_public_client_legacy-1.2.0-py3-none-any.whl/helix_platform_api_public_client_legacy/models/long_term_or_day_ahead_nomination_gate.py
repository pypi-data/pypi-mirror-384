# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field
from helix_platform_api_public_client_legacy.models.nomination_gate_status import NominationGateStatus
from helix_platform_api_public_client_legacy.models.timescale_long_term_or_day_ahead import TimescaleLongTermOrDayAhead

class LongTermOrDayAheadNominationGate(BaseModel):
    """
    LongTermOrDayAheadNominationGate
    """
    delivery_day: date = Field(default=..., alias="deliveryDay", description="One single calendar day, interpreted in **System Time**  - ISO 8601 compliant string in `yyyy-mm-dd` format ")
    timescale: TimescaleLongTermOrDayAhead = Field(...)
    status: NominationGateStatus = Field(...)
    next_action_at: Optional[datetime] = Field(default=None, alias="nextActionAt", description="Date and time with zone information, marks an **absolute point** on the timeline  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format ")
    closes_at: datetime = Field(default=..., alias="closesAt", description="Date and time with zone information, marks an **absolute point** on the timeline  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format ")
    __properties = ["deliveryDay", "timescale", "status", "nextActionAt", "closesAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LongTermOrDayAheadNominationGate:
        """Create an instance of LongTermOrDayAheadNominationGate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LongTermOrDayAheadNominationGate:
        """Create an instance of LongTermOrDayAheadNominationGate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LongTermOrDayAheadNominationGate.parse_obj(obj)

        _obj = LongTermOrDayAheadNominationGate.parse_obj({
            "delivery_day": obj.get("deliveryDay"),
            "timescale": obj.get("timescale"),
            "status": obj.get("status"),
            "next_action_at": obj.get("nextActionAt"),
            "closes_at": obj.get("closesAt")
        })
        return _obj


