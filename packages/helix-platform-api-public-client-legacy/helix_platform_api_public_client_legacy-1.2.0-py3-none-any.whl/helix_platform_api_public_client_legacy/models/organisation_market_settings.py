# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator
from helix_platform_api_public_client_legacy.models.organisation_market_settings_fr_nomination_settings import OrganisationMarketSettingsFrNominationSettings
from helix_platform_api_public_client_legacy.models.organisation_market_settings_gb_nomination_settings import OrganisationMarketSettingsGbNominationSettings

class OrganisationMarketSettings(BaseModel):
    """
    OrganisationMarketSettings
    """
    eic_code: constr(strict=True) = Field(default=..., alias="eicCode")
    gb_nomination_settings: OrganisationMarketSettingsGbNominationSettings = Field(default=..., alias="gbNominationSettings")
    fr_nomination_settings: OrganisationMarketSettingsFrNominationSettings = Field(default=..., alias="frNominationSettings")
    __properties = ["eicCode", "gbNominationSettings", "frNominationSettings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganisationMarketSettings:
        """Create an instance of OrganisationMarketSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gb_nomination_settings
        if self.gb_nomination_settings:
            _dict['gbNominationSettings'] = self.gb_nomination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fr_nomination_settings
        if self.fr_nomination_settings:
            _dict['frNominationSettings'] = self.fr_nomination_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganisationMarketSettings:
        """Create an instance of OrganisationMarketSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganisationMarketSettings.parse_obj(obj)

        _obj = OrganisationMarketSettings.parse_obj({
            "eic_code": obj.get("eicCode"),
            "gb_nomination_settings": OrganisationMarketSettingsGbNominationSettings.from_dict(obj.get("gbNominationSettings")) if obj.get("gbNominationSettings") is not None else None,
            "fr_nomination_settings": OrganisationMarketSettingsFrNominationSettings.from_dict(obj.get("frNominationSettings")) if obj.get("frNominationSettings") is not None else None
        })
        return _obj


