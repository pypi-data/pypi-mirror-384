# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class OrganisationMarketSettingsGbNominationSettings(BaseModel):
    """
    OrganisationMarketSettingsGbNominationSettings
    """
    able_to_nominate: StrictBool = Field(default=..., alias="ableToNominate")
    bmu_demand_code: Optional[constr(strict=True, max_length=30, min_length=1)] = Field(default=None, alias="bmuDemandCode")
    bmu_generation_code: Optional[constr(strict=True, max_length=30, min_length=1)] = Field(default=None, alias="bmuGenerationCode")
    on_behalf_participant_id: Optional[StrictStr] = Field(default=None, alias="onBehalfParticipantId", description="Unique identifier for the record in UUID4 format")
    __properties = ["ableToNominate", "bmuDemandCode", "bmuGenerationCode", "onBehalfParticipantId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganisationMarketSettingsGbNominationSettings:
        """Create an instance of OrganisationMarketSettingsGbNominationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganisationMarketSettingsGbNominationSettings:
        """Create an instance of OrganisationMarketSettingsGbNominationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganisationMarketSettingsGbNominationSettings.parse_obj(obj)

        _obj = OrganisationMarketSettingsGbNominationSettings.parse_obj({
            "able_to_nominate": obj.get("ableToNominate"),
            "bmu_demand_code": obj.get("bmuDemandCode"),
            "bmu_generation_code": obj.get("bmuGenerationCode"),
            "on_behalf_participant_id": obj.get("onBehalfParticipantId")
        })
        return _obj


