# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from helix_platform_api_public_client_legacy.models.attachment import Attachment
from helix_platform_api_public_client_legacy.models.message_category import MessageCategory
from helix_platform_api_public_client_legacy.models.message_sender import MessageSender
from helix_platform_api_public_client_legacy.models.message_severity import MessageSeverity
from helix_platform_api_public_client_legacy.models.message_type import MessageType

class Message(BaseModel):
    """
    Message
    """
    id: StrictStr = Field(default=..., description="Unique identifier for the record in UUID4 format")
    received_at: datetime = Field(default=..., alias="receivedAt", description="Date and time with zone information, marks an **absolute point** on the timeline  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format ")
    category: MessageCategory = Field(...)
    sender: MessageSender = Field(...)
    severity: MessageSeverity = Field(...)
    type: MessageType = Field(...)
    subject: constr(strict=True, max_length=200, min_length=1) = Field(...)
    body: constr(strict=True, max_length=20000, min_length=1) = Field(...)
    read: Optional[StrictBool] = None
    entity_id: Optional[StrictStr] = Field(default=None, alias="entityId")
    attachment: Optional[Attachment] = None
    __properties = ["id", "receivedAt", "category", "sender", "severity", "type", "subject", "body", "read", "entityId", "attachment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Message:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of attachment
        if self.attachment:
            _dict['attachment'] = self.attachment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Message:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Message.parse_obj(obj)

        _obj = Message.parse_obj({
            "id": obj.get("id"),
            "received_at": obj.get("receivedAt"),
            "category": obj.get("category"),
            "sender": obj.get("sender"),
            "severity": obj.get("severity"),
            "type": obj.get("type"),
            "subject": obj.get("subject"),
            "body": obj.get("body"),
            "read": obj.get("read"),
            "entity_id": obj.get("entityId"),
            "attachment": Attachment.from_dict(obj.get("attachment")) if obj.get("attachment") is not None else None
        })
        return _obj


