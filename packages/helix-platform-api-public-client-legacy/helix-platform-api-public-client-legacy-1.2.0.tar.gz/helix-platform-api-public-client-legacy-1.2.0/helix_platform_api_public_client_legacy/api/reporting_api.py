# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import date

from pydantic import Field, StrictStr, conlist

from typing import Optional, Union

from helix_platform_api_public_client_legacy.models.audit_log_domain import AuditLogDomain
from helix_platform_api_public_client_legacy.models.border_direction_with_both import BorderDirectionWithBoth
from helix_platform_api_public_client_legacy.models.user_role import UserRole
from helix_platform_api_public_client_legacy.models.user_status import UserStatus

from helix_platform_api_public_client_legacy.api_client import ApiClient
from helix_platform_api_public_client_legacy.api_response import ApiResponse
from helix_platform_api_public_client_legacy.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReportingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_organisations_audit_logs_report(self, x_organisation_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Organisations")], period_start : date, period_end : date, domains : Optional[conlist(AuditLogDomain)] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_organisations_audit_logs_report  # noqa: E501

        Fetch Audit Logs Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_AUDIT_LOGS`   * `VIEW_ANY_AUDIT_LOGS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_audit_logs_report(x_organisation_ids, period_start, period_end, domains, async_req=True)
        >>> result = thread.get()

        :param x_organisation_ids: List of internal IDs of Organisations (required)
        :type x_organisation_ids: List[str]
        :param period_start: (required)
        :type period_start: date
        :param period_end: (required)
        :type period_end: date
        :param domains:
        :type domains: List[AuditLogDomain]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_organisations_audit_logs_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_organisations_audit_logs_report_with_http_info(x_organisation_ids, period_start, period_end, domains, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organisations_audit_logs_report_with_http_info(self, x_organisation_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Organisations")], period_start : date, period_end : date, domains : Optional[conlist(AuditLogDomain)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_organisations_audit_logs_report  # noqa: E501

        Fetch Audit Logs Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_AUDIT_LOGS`   * `VIEW_ANY_AUDIT_LOGS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_audit_logs_report_with_http_info(x_organisation_ids, period_start, period_end, domains, async_req=True)
        >>> result = thread.get()

        :param x_organisation_ids: List of internal IDs of Organisations (required)
        :type x_organisation_ids: List[str]
        :param period_start: (required)
        :type period_start: date
        :param period_end: (required)
        :type period_end: date
        :param domains:
        :type domains: List[AuditLogDomain]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_organisation_ids',
            'period_start',
            'period_end',
            'domains'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations_audit_logs_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('period_start') is not None:  # noqa: E501
            if isinstance(_params['period_start'], date):
                _query_params.append(('periodStart', _params['period_start'].isoformat()))
            else:
                _query_params.append(('periodStart', _params['period_start']))

        if _params.get('period_end') is not None:  # noqa: E501
            if isinstance(_params['period_end'], date):
                _query_params.append(('periodEnd', _params['period_end'].isoformat()))
            else:
                _query_params.append(('periodEnd', _params['period_end']))

        if _params.get('domains') is not None:  # noqa: E501
            _query_params.append(('domains', _params['domains']))
            _collection_formats['domains'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organisation_ids'] is not None:
            _header_params['X-Organisation-Ids'] = _params['x_organisation_ids']
            _collection_formats['X-Organisation-Ids'] = 'csv'

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/organisations/audit-logs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_organisations_users_report(self, x_organisation_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Organisations")], statuses : Optional[conlist(UserStatus)] = None, roles : Optional[conlist(UserRole)] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_organisations_users_report  # noqa: E501

        Fetch Users Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_USERS`   * `VIEW_ANY_USERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_users_report(x_organisation_ids, statuses, roles, async_req=True)
        >>> result = thread.get()

        :param x_organisation_ids: List of internal IDs of Organisations (required)
        :type x_organisation_ids: List[str]
        :param statuses:
        :type statuses: List[UserStatus]
        :param roles:
        :type roles: List[UserRole]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_organisations_users_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_organisations_users_report_with_http_info(x_organisation_ids, statuses, roles, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organisations_users_report_with_http_info(self, x_organisation_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Organisations")], statuses : Optional[conlist(UserStatus)] = None, roles : Optional[conlist(UserRole)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_organisations_users_report  # noqa: E501

        Fetch Users Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_USERS`   * `VIEW_ANY_USERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_users_report_with_http_info(x_organisation_ids, statuses, roles, async_req=True)
        >>> result = thread.get()

        :param x_organisation_ids: List of internal IDs of Organisations (required)
        :type x_organisation_ids: List[str]
        :param statuses:
        :type statuses: List[UserStatus]
        :param roles:
        :type roles: List[UserRole]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_organisation_ids',
            'statuses',
            'roles'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations_users_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('statuses') is not None:  # noqa: E501
            _query_params.append(('statuses', _params['statuses']))
            _collection_formats['statuses'] = 'multi'

        if _params.get('roles') is not None:  # noqa: E501
            _query_params.append(('roles', _params['roles']))
            _collection_formats['roles'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_organisation_ids'] is not None:
            _header_params['X-Organisation-Ids'] = _params['x_organisation_ids']
            _collection_formats['X-Organisation-Ids'] = 'csv'

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/organisations/users', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_outages_curtailment_report(self, delivery_period_start : date, delivery_period_end : date, x_participant_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Participant-type Organisations")], **kwargs) -> bytearray:  # noqa: E501
        """get_outages_curtailment_report  # noqa: E501

        Fetch Curtailment Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_NOMINATIONS`   * `VIEW_ANY_NOMINATIONS`   * `VIEW_CRISIS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_outages_curtailment_report(delivery_period_start, delivery_period_end, x_participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param x_participant_ids: List of internal IDs of Participant-type Organisations (required)
        :type x_participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_outages_curtailment_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_outages_curtailment_report_with_http_info(delivery_period_start, delivery_period_end, x_participant_ids, **kwargs)  # noqa: E501

    @validate_arguments
    def get_outages_curtailment_report_with_http_info(self, delivery_period_start : date, delivery_period_end : date, x_participant_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Participant-type Organisations")], **kwargs) -> ApiResponse:  # noqa: E501
        """get_outages_curtailment_report  # noqa: E501

        Fetch Curtailment Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_NOMINATIONS`   * `VIEW_ANY_NOMINATIONS`   * `VIEW_CRISIS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_outages_curtailment_report_with_http_info(delivery_period_start, delivery_period_end, x_participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param x_participant_ids: List of internal IDs of Participant-type Organisations (required)
        :type x_participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'delivery_period_start',
            'delivery_period_end',
            'x_participant_ids'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outages_curtailment_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], date):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], date):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_participant_ids'] is not None:
            _header_params['X-Participant-Ids'] = _params['x_participant_ids']
            _collection_formats['X-Participant-Ids'] = 'csv'

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/outages/curtailment', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_trs_and_nominations_overview_report(self, delivery_period_start : Annotated[date, Field(..., description="Start of a Delivery Day range, inclusive")], delivery_period_end : Annotated[date, Field(..., description="End of a Delivery Day range, inclusive")], border_direction : Annotated[BorderDirectionWithBoth, Field(..., description="Border Direction with additional 'BOTH' option")], x_participant_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Participant-type Organisations")], **kwargs) -> bytearray:  # noqa: E501
        """get_trs_and_nominations_overview_report  # noqa: E501

        Fetch Transmission Rights & Nominations Overview Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_AGGREGATED_NOMINATIONS`   * `VIEW_ANY_AGGREGATED_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_overview_report(delivery_period_start, delivery_period_end, border_direction, x_participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: Start of a Delivery Day range, inclusive (required)
        :type delivery_period_start: date
        :param delivery_period_end: End of a Delivery Day range, inclusive (required)
        :type delivery_period_end: date
        :param border_direction: Border Direction with additional 'BOTH' option (required)
        :type border_direction: BorderDirectionWithBoth
        :param x_participant_ids: List of internal IDs of Participant-type Organisations (required)
        :type x_participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_trs_and_nominations_overview_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_trs_and_nominations_overview_report_with_http_info(delivery_period_start, delivery_period_end, border_direction, x_participant_ids, **kwargs)  # noqa: E501

    @validate_arguments
    def get_trs_and_nominations_overview_report_with_http_info(self, delivery_period_start : Annotated[date, Field(..., description="Start of a Delivery Day range, inclusive")], delivery_period_end : Annotated[date, Field(..., description="End of a Delivery Day range, inclusive")], border_direction : Annotated[BorderDirectionWithBoth, Field(..., description="Border Direction with additional 'BOTH' option")], x_participant_ids : Annotated[conlist(StrictStr), Field(..., description="List of internal IDs of Participant-type Organisations")], **kwargs) -> ApiResponse:  # noqa: E501
        """get_trs_and_nominations_overview_report  # noqa: E501

        Fetch Transmission Rights & Nominations Overview Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_AGGREGATED_NOMINATIONS`   * `VIEW_ANY_AGGREGATED_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_overview_report_with_http_info(delivery_period_start, delivery_period_end, border_direction, x_participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: Start of a Delivery Day range, inclusive (required)
        :type delivery_period_start: date
        :param delivery_period_end: End of a Delivery Day range, inclusive (required)
        :type delivery_period_end: date
        :param border_direction: Border Direction with additional 'BOTH' option (required)
        :type border_direction: BorderDirectionWithBoth
        :param x_participant_ids: List of internal IDs of Participant-type Organisations (required)
        :type x_participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'delivery_period_start',
            'delivery_period_end',
            'border_direction',
            'x_participant_ids'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trs_and_nominations_overview_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], date):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], date):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        if _params.get('border_direction') is not None:  # noqa: E501
            _query_params.append(('borderDirection', _params['border_direction'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_participant_ids'] is not None:
            _header_params['X-Participant-Ids'] = _params['x_participant_ids']
            _collection_formats['X-Participant-Ids'] = 'csv'

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/trs-and-nominations/overview', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_trs_and_nominations_proof_report(self, delivery_period_start : Annotated[date, Field(..., description="Start of a Delivery Day range, inclusive")], delivery_period_end : Annotated[date, Field(..., description="End of a Delivery Day range, inclusive")], x_participant_id : Annotated[StrictStr, Field(..., description="Internal ID of a Participant-type Organisation")], **kwargs) -> bytearray:  # noqa: E501
        """get_trs_and_nominations_proof_report  # noqa: E501

        Fetch Transmission Rights & Nominations Proof Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_NOMINATIONS`   * `VIEW_ANY_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_proof_report(delivery_period_start, delivery_period_end, x_participant_id, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: Start of a Delivery Day range, inclusive (required)
        :type delivery_period_start: date
        :param delivery_period_end: End of a Delivery Day range, inclusive (required)
        :type delivery_period_end: date
        :param x_participant_id: Internal ID of a Participant-type Organisation (required)
        :type x_participant_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_trs_and_nominations_proof_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_trs_and_nominations_proof_report_with_http_info(delivery_period_start, delivery_period_end, x_participant_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_trs_and_nominations_proof_report_with_http_info(self, delivery_period_start : Annotated[date, Field(..., description="Start of a Delivery Day range, inclusive")], delivery_period_end : Annotated[date, Field(..., description="End of a Delivery Day range, inclusive")], x_participant_id : Annotated[StrictStr, Field(..., description="Internal ID of a Participant-type Organisation")], **kwargs) -> ApiResponse:  # noqa: E501
        """get_trs_and_nominations_proof_report  # noqa: E501

        Fetch Transmission Rights & Nominations Proof Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_NOMINATIONS`   * `VIEW_ANY_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_proof_report_with_http_info(delivery_period_start, delivery_period_end, x_participant_id, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: Start of a Delivery Day range, inclusive (required)
        :type delivery_period_start: date
        :param delivery_period_end: End of a Delivery Day range, inclusive (required)
        :type delivery_period_end: date
        :param x_participant_id: Internal ID of a Participant-type Organisation (required)
        :type x_participant_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'delivery_period_start',
            'delivery_period_end',
            'x_participant_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trs_and_nominations_proof_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], date):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], date):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].isoformat()))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_participant_id'] is not None:
            _header_params['X-Participant-Id'] = _params['x_participant_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/trs-and-nominations/proof', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
