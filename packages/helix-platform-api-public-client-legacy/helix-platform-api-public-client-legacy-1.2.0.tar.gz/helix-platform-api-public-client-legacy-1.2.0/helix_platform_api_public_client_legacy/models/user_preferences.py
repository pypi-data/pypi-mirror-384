# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from helix_platform_api_public_client_legacy.models.general_notifications import GeneralNotifications
from helix_platform_api_public_client_legacy.models.platform_appearance import PlatformAppearance

class UserPreferences(BaseModel):
    """
    UserPreferences
    """
    general_notifications: GeneralNotifications = Field(default=..., alias="generalNotifications")
    appearance: PlatformAppearance = Field(...)
    __properties = ["generalNotifications", "appearance"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserPreferences:
        """Create an instance of UserPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of general_notifications
        if self.general_notifications:
            _dict['generalNotifications'] = self.general_notifications.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserPreferences:
        """Create an instance of UserPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserPreferences.parse_obj(obj)

        _obj = UserPreferences.parse_obj({
            "general_notifications": GeneralNotifications.from_dict(obj.get("generalNotifications")) if obj.get("generalNotifications") is not None else None,
            "appearance": obj.get("appearance")
        })
        return _obj


