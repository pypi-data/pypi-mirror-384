# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from helix_platform_api_public_client_legacy.models.participant_dashboard_next_nomination_gates import ParticipantDashboardNextNominationGates  # noqa: E501

class TestParticipantDashboardNextNominationGates(unittest.TestCase):
    """ParticipantDashboardNextNominationGates unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ParticipantDashboardNextNominationGates:
        """Test ParticipantDashboardNextNominationGates
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ParticipantDashboardNextNominationGates`
        """
        model = ParticipantDashboardNextNominationGates()  # noqa: E501
        if include_optional:
            return ParticipantDashboardNextNominationGates(
                nomination_gates = [
                    helix_platform_api_public_client_legacy.models.dashboard_next_nomination_gate.DashboardNextNominationGate(
                        timescale = 'LONG_TERM', 
                        window = helix_platform_api_public_client_legacy.models.dashboard_next_nomination_gate_window.DashboardNextNominationGate_window(
                            opens_at = '2022-01-04T00:00:00.000Z', 
                            closes_at = '2022-01-04T00:00:00.000Z', ), 
                        delivery_period = helix_platform_api_public_client_legacy.models.mtu_period.MtuPeriod(
                            from_mtu_start = '2022-01-04T10:00:00.000Z', 
                            to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                        status = 'NOT_YET_OPEN', 
                        next_action_at = '2022-01-04T00:00:00.000Z', )
                    ]
            )
        else:
            return ParticipantDashboardNextNominationGates(
                nomination_gates = [
                    helix_platform_api_public_client_legacy.models.dashboard_next_nomination_gate.DashboardNextNominationGate(
                        timescale = 'LONG_TERM', 
                        window = helix_platform_api_public_client_legacy.models.dashboard_next_nomination_gate_window.DashboardNextNominationGate_window(
                            opens_at = '2022-01-04T00:00:00.000Z', 
                            closes_at = '2022-01-04T00:00:00.000Z', ), 
                        delivery_period = helix_platform_api_public_client_legacy.models.mtu_period.MtuPeriod(
                            from_mtu_start = '2022-01-04T10:00:00.000Z', 
                            to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                        status = 'NOT_YET_OPEN', 
                        next_action_at = '2022-01-04T00:00:00.000Z', )
                    ],
        )
        """

    def testParticipantDashboardNextNominationGates(self):
        """Test ParticipantDashboardNextNominationGates"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
