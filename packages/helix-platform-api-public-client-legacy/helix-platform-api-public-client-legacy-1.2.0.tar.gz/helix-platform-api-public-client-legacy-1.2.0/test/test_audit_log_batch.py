# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from helix_platform_api_public_client_legacy.models.audit_log_batch import AuditLogBatch  # noqa: E501

class TestAuditLogBatch(unittest.TestCase):
    """AuditLogBatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuditLogBatch:
        """Test AuditLogBatch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuditLogBatch`
        """
        model = AuditLogBatch()  # noqa: E501
        if include_optional:
            return AuditLogBatch(
                entries = [
                    helix_platform_api_public_client_legacy.models.audit_log.AuditLog(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        created_at = '2022-01-04T00:00:00.000Z', 
                        user = helix_platform_api_public_client_legacy.models.audit_log_user.AuditLogUser(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            role = 'ICO_ADMIN', 
                            organisation = helix_platform_api_public_client_legacy.models.audit_log_user_organisation.AuditLogUserOrganisation(
                                id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                                name = '', ), ), 
                        domain = 'NTC_MANAGEMENT', 
                        type = 'SUBMIT_NTC', 
                        status = 'SUCCESS', 
                        description = '', 
                        impersonated_by_user = helix_platform_api_public_client_legacy.models.audit_log_user.AuditLogUser(
                            id = , 
                            name = '', 
                            role = 'ICO_ADMIN', 
                            organisation = helix_platform_api_public_client_legacy.models.audit_log_user_organisation.AuditLogUserOrganisation(
                                id = , 
                                name = '', ), ), 
                        requested_with_api_key = helix_platform_api_public_client_legacy.models.audit_log_api_key.AuditLogApiKey(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            created_at = '2022-01-04T00:00:00.000Z', ), )
                    ],
                total_count = 0
            )
        else:
            return AuditLogBatch(
                entries = [
                    helix_platform_api_public_client_legacy.models.audit_log.AuditLog(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        created_at = '2022-01-04T00:00:00.000Z', 
                        user = helix_platform_api_public_client_legacy.models.audit_log_user.AuditLogUser(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            role = 'ICO_ADMIN', 
                            organisation = helix_platform_api_public_client_legacy.models.audit_log_user_organisation.AuditLogUserOrganisation(
                                id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                                name = '', ), ), 
                        domain = 'NTC_MANAGEMENT', 
                        type = 'SUBMIT_NTC', 
                        status = 'SUCCESS', 
                        description = '', 
                        impersonated_by_user = helix_platform_api_public_client_legacy.models.audit_log_user.AuditLogUser(
                            id = , 
                            name = '', 
                            role = 'ICO_ADMIN', 
                            organisation = helix_platform_api_public_client_legacy.models.audit_log_user_organisation.AuditLogUserOrganisation(
                                id = , 
                                name = '', ), ), 
                        requested_with_api_key = helix_platform_api_public_client_legacy.models.audit_log_api_key.AuditLogApiKey(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            created_at = '2022-01-04T00:00:00.000Z', ), )
                    ],
        )
        """

    def testAuditLogBatch(self):
        """Test AuditLogBatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
