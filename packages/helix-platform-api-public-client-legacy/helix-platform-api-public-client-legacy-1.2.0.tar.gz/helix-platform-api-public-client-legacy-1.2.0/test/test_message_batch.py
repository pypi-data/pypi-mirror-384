# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from helix_platform_api_public_client_legacy.models.message_batch import MessageBatch  # noqa: E501

class TestMessageBatch(unittest.TestCase):
    """MessageBatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessageBatch:
        """Test MessageBatch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessageBatch`
        """
        model = MessageBatch()  # noqa: E501
        if include_optional:
            return MessageBatch(
                entries = [
                    helix_platform_api_public_client_legacy.models.message.Message(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        received_at = '2022-01-04T00:00:00.000Z', 
                        category = 'GENERAL', 
                        sender = 'ICO', 
                        severity = 'CRITICAL_ALERT', 
                        type = 'BPP', 
                        subject = '0', 
                        body = '0', 
                        read = True, 
                        entity_id = '', 
                        attachment = helix_platform_api_public_client_legacy.models.attachment.Attachment(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            file_name = '', 
                            file_size = 0, 
                            mime_type = '', 
                            url = '', ), )
                    ],
                total_count = 0
            )
        else:
            return MessageBatch(
                entries = [
                    helix_platform_api_public_client_legacy.models.message.Message(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        received_at = '2022-01-04T00:00:00.000Z', 
                        category = 'GENERAL', 
                        sender = 'ICO', 
                        severity = 'CRITICAL_ALERT', 
                        type = 'BPP', 
                        subject = '0', 
                        body = '0', 
                        read = True, 
                        entity_id = '', 
                        attachment = helix_platform_api_public_client_legacy.models.attachment.Attachment(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            file_name = '', 
                            file_size = 0, 
                            mime_type = '', 
                            url = '', ), )
                    ],
                total_count = 0,
        )
        """

    def testMessageBatch(self):
        """Test MessageBatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
