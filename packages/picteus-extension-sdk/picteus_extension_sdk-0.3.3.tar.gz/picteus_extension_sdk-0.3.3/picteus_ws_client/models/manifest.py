# coding: utf-8

"""
    Picteus

    The Picteus API

    The version of the OpenAPI document: 0.3.0
    Contact: edouard@koppasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from picteus_ws_client.models.manifest_instructions import ManifestInstructions
from picteus_ws_client.models.manifest_runtime import ManifestRuntime
from picteus_ws_client.models.manifest_user_interface import ManifestUserInterface
from typing import Optional, Set
from typing_extensions import Self

class Manifest(BaseModel):
    """
    Manifest
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True, max_length=32)] = Field(description="The identifier of the extension")
    version: Annotated[str, Field(min_length=5, strict=True, max_length=32)] = Field(description="The version of the extension, which should follow the semver convention")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="The name of the extension")
    description: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The description of the extension's purpose")
    runtimes: List[ManifestRuntime] = Field(description="The required runtime environments")
    instructions: Annotated[List[ManifestInstructions], Field(min_length=1)] = Field(description="The instructions regarding the way the extension handle events")
    settings: Dict[str, Any] = Field(description="The extension settings definition")
    ui: Optional[ManifestUserInterface] = Field(default=None, description="The User Interface definition of the extensions")
    __properties: ClassVar[List[str]] = ["id", "version", "name", "description", "runtimes", "instructions", "settings", "ui"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9A-Z-_.]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9A-Z-_.]{1,32}$/")
        return value

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$", value):
            raise ValueError(r"must validate the regular expression /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9A-Z-_. ]{1,128}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9A-Z-_. ]{1,128}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in runtimes (list)
        _items = []
        if self.runtimes:
            for _item_runtimes in self.runtimes:
                if _item_runtimes:
                    _items.append(_item_runtimes.to_dict())
            _dict['runtimes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instructions (list)
        _items = []
        if self.instructions:
            for _item_instructions in self.instructions:
                if _item_instructions:
                    _items.append(_item_instructions.to_dict())
            _dict['instructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of ui
        if self.ui:
            _dict['ui'] = self.ui.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "runtimes": [ManifestRuntime.from_dict(_item) for _item in obj["runtimes"]] if obj.get("runtimes") is not None else None,
            "instructions": [ManifestInstructions.from_dict(_item) for _item in obj["instructions"]] if obj.get("instructions") is not None else None,
            "settings": obj.get("settings"),
            "ui": ManifestUserInterface.from_dict(obj["ui"]) if obj.get("ui") is not None else None
        })
        return _obj


