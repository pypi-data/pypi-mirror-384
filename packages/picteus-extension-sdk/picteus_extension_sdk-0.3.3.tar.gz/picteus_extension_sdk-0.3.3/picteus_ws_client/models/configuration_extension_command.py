# coding: utf-8

"""
    Picteus

    The Picteus API

    The version of the OpenAPI document: 0.3.0
    Contact: edouard@koppasoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from picteus_ws_client.models.manifest_extension_command import ManifestExtensionCommand
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationExtensionCommand(BaseModel):
    """
    ConfigurationExtensionCommand
    """ # noqa: E501
    extension_id: Annotated[str, Field(min_length=1, strict=True, max_length=32)] = Field(description="The identifier of the extension", alias="extensionId")
    command: ManifestExtensionCommand = Field(description="A command of the extension")
    __properties: ClassVar[List[str]] = ["extensionId", "command"]

    @field_validator('extension_id')
    def extension_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9A-Z-_.]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9A-Z-_.]{1,32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationExtensionCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of command
        if self.command:
            _dict['command'] = self.command.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationExtensionCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "extensionId": obj.get("extensionId"),
            "command": ManifestExtensionCommand.from_dict(obj["command"]) if obj.get("command") is not None else None
        })
        return _obj


