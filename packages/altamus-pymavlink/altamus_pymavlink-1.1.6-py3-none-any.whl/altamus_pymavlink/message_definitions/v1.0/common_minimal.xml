<?xml version="1.0"?>
<mavlink>
  <enums>
    <enum name="MAV_AUTOPILOT">
      <description>Micro air vehicle / autopilot classes. This identifies the individual model.</description>
      <entry value="0" name="MAV_AUTOPILOT_GENERIC">
        <description>Generic autopilot, full support for everything</description>
      </entry>
      <entry value="8" name="MAV_AUTOPILOT_INVALID">
        <description>No valid autopilot, e.g. a GCS or other MAVLink component</description>
      </entry>
    </enum>
    <enum name="MAV_FTP_ERR">
      <description>MAV FTP error codes (https://mavlink.io/en/services/ftp.html)</description>
      <entry value="0" name="MAV_FTP_ERR_NONE">
        <description>None: No error</description>
      </entry>
      <entry value="1" name="MAV_FTP_ERR_FAIL">
        <description>Fail: Unknown failure</description>
      </entry>
      <entry value="2" name="MAV_FTP_ERR_FAILERRNO">
        <description>FailErrno: Command failed, Err number sent back in PayloadHeader.data[1].
		This is a file-system error number understood by the server operating system.</description>
      </entry>
      <entry value="3" name="MAV_FTP_ERR_INVALIDDATASIZE">
        <description>InvalidDataSize: Payload size is invalid</description>
      </entry>
      <entry value="4" name="MAV_FTP_ERR_INVALIDSESSION">
        <description>InvalidSession: Session is not currently open</description>
      </entry>
      <entry value="5" name="MAV_FTP_ERR_NOSESSIONSAVAILABLE">
        <description>NoSessionsAvailable: All available sessions are already in use</description>
      </entry>
      <entry value="6" name="MAV_FTP_ERR_EOF">
        <description>EOF: Offset past end of file for ListDirectory and ReadFile commands</description>
      </entry>
      <entry value="7" name="MAV_FTP_ERR_UNKNOWNCOMMAND">
        <description>UnknownCommand: Unknown command / opcode</description>
      </entry>
      <entry value="8" name="MAV_FTP_ERR_FILEEXISTS">
        <description>FileExists: File/directory already exists</description>
      </entry>
      <entry value="9" name="MAV_FTP_ERR_FILEPROTECTED">
        <description>FileProtected: File/directory is write protected</description>
      </entry>
      <entry value="10" name="MAV_FTP_ERR_FILENOTFOUND">
        <description>FileNotFound: File/directory not found</description>
      </entry>
    </enum>
    <enum name="MAV_FTP_OPCODE">
      <description>MAV FTP opcodes: https://mavlink.io/en/services/ftp.html</description>
      <entry value="0" name="MAV_FTP_OPCODE_NONE">
        <description>None. Ignored, always ACKed</description>
      </entry>
      <entry value="1" name="MAV_FTP_OPCODE_TERMINATESESSION">
        <description>TerminateSession: Terminates open Read session</description>
      </entry>
      <entry value="2" name="MAV_FTP_OPCODE_RESETSESSION">
        <description>ResetSessions: Terminates all open read sessions</description>
      </entry>
      <entry value="3" name="MAV_FTP_OPCODE_LISTDIRECTORY">
        <description>ListDirectory. List files and directories in path from offset</description>
      </entry>
      <entry value="4" name="MAV_FTP_OPCODE_OPENFILERO">
        <description>OpenFileRO: Opens file at path for reading, returns session</description>
      </entry>
      <entry value="5" name="MAV_FTP_OPCODE_READFILE">
        <description>ReadFile: Reads size bytes from offset in session</description>
      </entry>
      <entry value="6" name="MAV_FTP_OPCODE_CREATEFILE">
        <description>CreateFile: Creates file at path for writing, returns session</description>
      </entry>
      <entry value="7" name="MAV_FTP_OPCODE_WRITEFILE">
        <description>WriteFile: Writes size bytes to offset in session</description>
      </entry>
      <entry value="8" name="MAV_FTP_OPCODE_REMOVEFILE">
        <description>RemoveFile: Remove file at path</description>
      </entry>
      <entry value="9" name="MAV_FTP_OPCODE_CREATEDIRECTORY">
        <description>CreateDirectory: Creates directory at path</description>
      </entry>
      <entry value="10" name="MAV_FTP_OPCODE_REMOVEDIRECTORY">
        <description>RemoveDirectory: Removes directory at path. The directory must be empty.</description>
      </entry>
      <entry value="11" name="MAV_FTP_OPCODE_OPENFILEWO">
        <description>OpenFileWO: Opens file at path for writing, returns session</description>
      </entry>
      <entry value="12" name="MAV_FTP_OPCODE_TRUNCATEFILE">
        <description>TruncateFile: Truncate file at path to offset length</description>
      </entry>
      <entry value="13" name="MAV_FTP_OPCODE_RENAME">
        <description>Rename: Rename path1 to path2</description>
      </entry>
      <entry value="14" name="MAV_FTP_OPCODE_CALCFILECRC">
        <description>CalcFileCRC32: Calculate CRC32 for file at path</description>
      </entry>
      <entry value="15" name="MAV_FTP_OPCODE_BURSTREADFILE">
        <description>BurstReadFile: Burst download session file</description>
      </entry>
      <entry value="128" name="MAV_FTP_OPCODE_ACK">
        <description>ACK: ACK response</description>
      </entry>
      <entry value="129" name="MAV_FTP_OPCODE_NAK">
        <description>NAK: NAK response</description>
      </entry>
    </enum>
    <enum name="MAV_TYPE">
      <description>MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).</description>
      <entry value="0" name="MAV_TYPE_GENERIC">
        <description>Generic micro air vehicle</description>
      </entry>
      <entry value="1" name="MAV_TYPE_FIXED_WING">
        <description>Fixed wing aircraft.</description>
      </entry>
      <entry value="6" name="MAV_TYPE_GCS">
        <description>Operator control unit / ground control station</description>
      </entry>
      <entry value="12" name="MAV_AUTOPILOT_PX4">
        <description>PX4 Autopilot - http://px4.io/</description>
      </entry>
      <entry value="18" name="MAV_TYPE_ONBOARD_CONTROLLER">
        <description>Onboard companion controller</description>
      </entry>
      <entry value="26" name="MAV_TYPE_GIMBAL">
        <description>Gimbal</description>
      </entry>
      <entry value="27" name="MAV_TYPE_ADSB">
        <description>ADSB system</description>
      </entry>
      <entry value="30" name="MAV_TYPE_CAMERA">
        <description>Camera</description>
      </entry>
    </enum>
    <enum name="MAV_SEVERITY">
      <description>Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.</description>
      <entry value="0" name="MAV_SEVERITY_EMERGENCY">
        <description>System is unusable. This is a "panic" condition.</description>
      </entry>
      <entry value="1" name="MAV_SEVERITY_ALERT">
        <description>Action should be taken immediately. Indicates error in non-critical systems.</description>
      </entry>
      <entry value="2" name="MAV_SEVERITY_CRITICAL">
        <description>Action must be taken immediately. Indicates failure in a primary system.</description>
      </entry>
      <entry value="3" name="MAV_SEVERITY_ERROR">
        <description>Indicates an error in secondary/redundant systems.</description>
      </entry>
      <entry value="4" name="MAV_SEVERITY_WARNING">
        <description>Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.</description>
      </entry>
      <entry value="5" name="MAV_SEVERITY_NOTICE">
        <description>An unusual event has occurred, though not an error condition. This should be investigated for the root cause.</description>
      </entry>
      <entry value="6" name="MAV_SEVERITY_INFO">
        <description>Normal operational messages. Useful for logging. No action is required for these messages.</description>
      </entry>
      <entry value="7" name="MAV_SEVERITY_DEBUG">
        <description>Useful non-operational messages that can assist in debugging. These should not occur during normal operation.</description>
      </entry>
    </enum>
    <enum name="MAV_CMD">
    <entry value="511" name="MAV_CMD_SET_MESSAGE_INTERVAL" hasLocation="false" isDestination="false">
      <description>Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.</description>
      <param index="1" label="Message ID" minValue="0" maxValue="16777215" increment="1">The MAVLink message ID</param>
      <param index="2" label="Interval" units="us" minValue="-1" increment="1">The interval between two messages. -1: disable. 0: request default rate (which may be zero).</param>
      <param index="7" label="Response Target" minValue="0" maxValue="2" increment="1">Target address of message stream (if message has target address fields). 0: Flight-stack default (recommended), 1: address of requestor, 2: broadcast.</param>
    </entry>
    <entry value="512" name="MAV_CMD_REQUEST_MESSAGE" hasLocation="false" isDestination="false">
      <description>Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).</description>
      <param index="1" label="Message ID" minValue="0" maxValue="16777215" increment="1">The MAVLink message ID of the requested message.</param>
      <param index="2" label="Req Param 1">Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).</param>
      <param index="3" label="Req Param 2">The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).</param>
      <param index="4" label="Req Param 3">The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).</param>
      <param index="5" label="Req Param 4">The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).</param>
      <param index="6" label="Req Param 5">The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).</param>
      <param index="7" label="Response Target" minValue="0" maxValue="2" increment="1">Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.</param>
    </entry>
    </enum>
    <enum name="MAV_MODE_FLAG" bitmask="true">
      <description>These flags encode the MAV mode.</description>
      <entry value="128" name="MAV_MODE_FLAG_SAFETY_ARMED">
        <description>0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.</description>
      </entry>
      <entry value="64" name="MAV_MODE_FLAG_MANUAL_INPUT_ENABLED">
        <description>0b01000000 remote control input is enabled.</description>
      </entry>
      <entry value="32" name="MAV_MODE_FLAG_HIL_ENABLED">
        <description>0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.</description>
      </entry>
      <entry value="16" name="MAV_MODE_FLAG_STABILIZE_ENABLED">
        <description>0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.</description>
      </entry>
      <entry value="8" name="MAV_MODE_FLAG_GUIDED_ENABLED">
        <description>0b00001000 guided mode enabled, system flies waypoints / mission items.</description>
      </entry>
      <entry value="4" name="MAV_MODE_FLAG_AUTO_ENABLED">
        <description>0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.</description>
      </entry>
      <entry value="2" name="MAV_MODE_FLAG_TEST_ENABLED">
        <description>0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.</description>
      </entry>
      <entry value="1" name="MAV_MODE_FLAG_CUSTOM_MODE_ENABLED">
        <description>0b00000001 Reserved for future use.</description>
      </entry>
    </enum>
    <enum name="MAV_MODE_FLAG_DECODE_POSITION" bitmask="true">
      <description>These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.</description>
      <entry value="128" name="MAV_MODE_FLAG_DECODE_POSITION_SAFETY">
        <description>First bit:  10000000</description>
      </entry>
      <entry value="64" name="MAV_MODE_FLAG_DECODE_POSITION_MANUAL">
        <description>Second bit: 01000000</description>
      </entry>
      <entry value="32" name="MAV_MODE_FLAG_DECODE_POSITION_HIL">
        <description>Third bit:  00100000</description>
      </entry>
      <entry value="16" name="MAV_MODE_FLAG_DECODE_POSITION_STABILIZE">
        <description>Fourth bit: 00010000</description>
      </entry>
      <entry value="8" name="MAV_MODE_FLAG_DECODE_POSITION_GUIDED">
        <description>Fifth bit:  00001000</description>
      </entry>
      <entry value="4" name="MAV_MODE_FLAG_DECODE_POSITION_AUTO">
        <description>Sixth bit:   00000100</description>
      </entry>
      <entry value="2" name="MAV_MODE_FLAG_DECODE_POSITION_TEST">
        <description>Seventh bit: 00000010</description>
      </entry>
      <entry value="1" name="MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE">
        <description>Eighth bit: 00000001</description>
      </entry>
    </enum>
    <enum name="MAV_STATE">
      <entry value="0" name="MAV_STATE_UNINIT">
        <description>Uninitialized system, state is unknown.</description>
      </entry>
      <entry value="1" name="MAV_STATE_BOOT">
        <description>System is booting up.</description>
      </entry>
      <entry value="2" name="MAV_STATE_CALIBRATING">
        <description>System is calibrating and not flight-ready.</description>
      </entry>
      <entry value="3" name="MAV_STATE_STANDBY">
        <description>System is grounded and on standby. It can be launched any time.</description>
      </entry>
      <entry value="4" name="MAV_STATE_ACTIVE">
        <description>System is active and might be already airborne. Motors are engaged.</description>
      </entry>
      <entry value="5" name="MAV_STATE_CRITICAL">
        <description>System is in a non-normal flight mode (failsafe). It can however still navigate.</description>
      </entry>
      <entry value="6" name="MAV_STATE_EMERGENCY">
        <description>System is in a non-normal flight mode (failsafe). It lost control over parts or over the whole airframe. It is in mayday and going down.</description>
      </entry>
      <entry value="7" name="MAV_STATE_POWEROFF">
        <description>System just initialized its power-down sequence, will shut down now.</description>
      </entry>
      <entry value="8" name="MAV_STATE_FLIGHT_TERMINATION">
        <description>System is terminating itself (failsafe or commanded).</description>
      </entry>
    </enum>
    <enum name="MAV_COMPONENT">
      <description>Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).
      Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.
      When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.</description>
      <entry value="0" name="MAV_COMP_ID_ALL">
        <description>Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message.</description>
      </entry>
      <entry value="1" name="MAV_COMP_ID_AUTOPILOT1">
        <description>System flight controller component ("autopilot"). Only one autopilot is expected in a particular system.</description>
      </entry>
      <entry value="154" name="MAV_COMP_ID_GIMBAL">
        <description>Gimbal #1.</description>
      </entry>
    </enum>
    <enum name="MAV_MISSION_TYPE">
      <description>Type of mission items being requested/sent in mission protocol.</description>
      <entry value="0" name="MAV_MISSION_TYPE_MISSION">
        <description>Items are mission commands for main mission.</description>
      </entry>
      <entry value="1" name="MAV_MISSION_TYPE_FENCE">
        <description>Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.</description>
      </entry>
      <entry value="2" name="MAV_MISSION_TYPE_RALLY">
        <description>Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.</description>
      </entry>
      <entry value="255" name="MAV_MISSION_TYPE_ALL">
        <description>Only used in MISSION_CLEAR_ALL to clear all mission types.</description>
      </entry>
    </enum>
    <enum name="MAV_RESULT">
      <description>Result from a MAVLink command (MAV_CMD)</description>
      <entry value="0" name="MAV_RESULT_ACCEPTED">
          <description>Command is valid (is supported and has valid parameters), and was
              executed.</description>
      </entry>
      <entry value="1" name="MAV_RESULT_TEMPORARILY_REJECTED">
          <description>Command is valid, but cannot be executed at this time. This is used to
              indicate a problem that should be fixed just by waiting (e.g. a state machine is
              busy, can't arm because have not got GPS lock, etc.). Retrying later should
              work.</description>
      </entry>
      <entry value="2" name="MAV_RESULT_DENIED">
          <description>Command is invalid (is supported but has invalid parameters). Retrying
              same command and parameters will not work.</description>
      </entry>
      <entry value="3" name="MAV_RESULT_UNSUPPORTED">
          <description>Command is not supported (unknown).</description>
      </entry>
      <entry value="4" name="MAV_RESULT_FAILED">
          <description>Command is valid, but execution has failed. This is used to indicate
              any non-temporary or unexpected problem, i.e. any problem that must be fixed
              before the command can succeed/be retried. For example, attempting to write a
              file when out of memory, attempting to arm when sensors are not calibrated, etc.</description>
      </entry>
      <entry value="5" name="MAV_RESULT_IN_PROGRESS">
          <description>Command is valid and is being executed. This will be followed by
              further progress updates, i.e. the component may send further COMMAND_ACK
              messages with result MAV_RESULT_IN_PROGRESS (at a rate decided by the
              implementation), and must terminate by sending a COMMAND_ACK message with final
              result of the operation. The COMMAND_ACK.progress field can be used to indicate
              the progress of the operation.</description>
      </entry>
      <entry value="6" name="MAV_RESULT_CANCELLED">
          <description>Command has been cancelled (as a result of receiving a COMMAND_CANCEL
              message).</description>
      </entry>
    </enum>
    <enum name="MAV_FRAME">
    <description>Coordinate frames used by MAVLink. Not all frames are supported by all
    </description>
    <entry value="0" name="MAV_FRAME_GLOBAL">
        <description>Global (WGS84) coordinate frame + altitude relative to mean sea level
            (MSL).</description>
    </entry>
    <entry value="1" name="MAV_FRAME_LOCAL_NED">
        <description>NED local tangent frame (x: North, y: East, z: Down) with origin fixed
            relative to earth.</description>
    </entry>
    </enum>
    <enum name="GPS_FIX_TYPE">
    <description>Type of GPS fix</description>
    <entry value="0" name="GPS_FIX_TYPE_NO_GPS">
        <description>No GPS connected</description>
    </entry>
    <entry value="1" name="GPS_FIX_TYPE_NO_FIX">
        <description>No position information, GPS is connected</description>
    </entry>
    <entry value="2" name="GPS_FIX_TYPE_2D_FIX">
        <description>2D position</description>
    </entry>
    <entry value="3" name="GPS_FIX_TYPE_3D_FIX">
        <description>3D position</description>
    </entry>
    <entry value="4" name="GPS_FIX_TYPE_DGPS">
        <description>DGPS/SBAS aided 3D position</description>
    </entry>
    <entry value="5" name="GPS_FIX_TYPE_RTK_FLOAT">
        <description>RTK float, 3D position</description>
    </entry>
    <entry value="6" name="GPS_FIX_TYPE_RTK_FIXED">
        <description>RTK Fixed, 3D position</description>
    </entry>
    <entry value="7" name="GPS_FIX_TYPE_STATIC">
        <description>Static fixed, typically used for base stations</description>
    </entry>
    <entry value="8" name="GPS_FIX_TYPE_PPP">
        <description>PPP, 3D position.</description>
    </entry>
</enum>
  </enums>
  <messages>
    <message id="0" name="HEARTBEAT">
      <description>The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html</description>
      <field type="uint8_t" name="type" enum="MAV_TYPE">Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.</field>
      <field type="uint8_t" name="autopilot" enum="MAV_AUTOPILOT">Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.</field>
      <field type="uint8_t" name="base_mode" enum="MAV_MODE_FLAG" display="bitmask">System mode bitmap.</field>
      <field type="uint32_t" name="custom_mode">A bitfield for use for autopilot-specific flags</field>
      <field type="uint8_t" name="system_status" enum="MAV_STATE">System status flag.</field>
      <field type="uint8_t_mavlink_version" name="mavlink_version">MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version</field>
    </message>
    <message id="5" name="CHANGE_OPERATOR_CONTROL">
      <description>Request to control this MAV</description>
      <field type="uint8_t" name="target_system">System the GCS requests control for</field>
      <field type="uint8_t" name="control_request">0: request control of this MAV, 1: Release control of this MAV</field>
      <field type="uint8_t" name="version" units="rad">0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.</field>
      <field type="char[25]" name="passkey">Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"</field>
    </message>
    <message id="6" name="CHANGE_OPERATOR_CONTROL_ACK">
      <description>Accept / deny control of this MAV</description>
      <field type="uint8_t" name="gcs_system_id">ID of the GCS this message </field>
      <field type="uint8_t" name="control_request">0: request control of this MAV, 1: Release control of this MAV</field>
      <field type="uint8_t" name="ack">0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control</field>
    </message>
    <message id="300" name="PROTOCOL_VERSION">
      <wip/>
      <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
      <description>Version and capability of protocol version. This message can be requested with MAV_CMD_REQUEST_MESSAGE and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to a request for PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly.</description>
      <field type="uint16_t" name="version">Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.</field>
      <field type="uint16_t" name="min_version">Minimum MAVLink version supported</field>
      <field type="uint16_t" name="max_version">Maximum MAVLink version supported (set to the same value as version by default)</field>
      <field type="uint8_t[8]" name="spec_version_hash">The first 8 bytes (not characters printed in hex!) of the git hash.</field>
      <field type="uint8_t[8]" name="library_version_hash">The first 8 bytes (not characters printed in hex!) of the git hash.</field>
    </message>
    <message id="24" name="GPS_RAW_INT">
      <description>The global position, as returned by the Global Positioning System (GPS).
          This is
          NOT the global position estimate of the system, but rather a RAW sensor value. See
          message GLOBAL_POSITION_INT for the global position estimate.</description>
      <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time
          since system boot). The receiving end can infer timestamp format (since 1.1.1970 or
          since system boot) by checking for the magnitude of the number.</field>
      <field type="uint8_t" name="fix_type" enum="GPS_FIX_TYPE">GPS fix type.</field>
      <field type="int32_t" name="lat" units="degE7">Latitude (WGS84, EGM96 ellipsoid)</field>
      <field type="int32_t" name="lon" units="degE7">Longitude (WGS84, EGM96 ellipsoid)</field>
      <field type="int32_t" name="alt" units="mm">Altitude (MSL). Positive for up. Note that
          virtually all GPS modules provide the MSL altitude in addition to the WGS84
          altitude.</field>
      <field type="uint16_t" name="eph" invalid="UINT16_MAX" multiplier="1E-2">GPS HDOP
          horizontal dilution of position (unitless * 100). If unknown, set to: UINT16_MAX</field>
      <field type="uint16_t" name="epv" invalid="UINT16_MAX" multiplier="1E-2">GPS VDOP
          vertical dilution of position (unitless * 100). If unknown, set to: UINT16_MAX</field>
      <field type="uint16_t" name="vel" units="cm/s" invalid="UINT16_MAX">GPS ground speed. If
          unknown, set to: UINT16_MAX</field>
      <field type="uint16_t" name="cog" units="cdeg" invalid="UINT16_MAX">Course over ground
          (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If
          unknown, set to: UINT16_MAX</field>
      <field type="uint8_t" name="satellites_visible" invalid="UINT8_MAX">Number of satellites
          visible. If unknown, set to UINT8_MAX</field>
      <extensions />
      <field type="int32_t" name="alt_ellipsoid" units="mm">Altitude (above WGS84, EGM96
          ellipsoid). Positive for up.</field>
      <field type="uint32_t" name="h_acc" units="mm">Position uncertainty.</field>
      <field type="uint32_t" name="v_acc" units="mm">Altitude uncertainty.</field>
      <field type="uint32_t" name="vel_acc" units="mm">Speed uncertainty.</field>
      <field type="uint32_t" name="hdg_acc" units="degE5">Heading / track uncertainty</field>
      <field type="uint16_t" name="yaw" units="cdeg" invalid="0">Yaw in earth frame from
          north. Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is
          configured to provide yaw and is currently unable to provide it. Use 36000 for
          north.</field>
  </message>
  <message id="39" name="MISSION_ITEM">
      <deprecated since="2020-06" replaced_by="MISSION_ITEM_INT" />
      <description>Message encoding a mission item. This message is emitted to announce
          the presence of a mission item and to set a mission item on the system. The mission
          item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude.
          Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU).
          NaN may be used to indicate an optional/default value (e.g. to use the system's
          current latitude or yaw rather than a specific value). See also
          https://mavlink.io/en/services/mission.html.</description>
      <field type="uint8_t" name="target_system">System ID</field>
      <field type="uint8_t" name="target_component">Component ID</field>
      <field type="uint16_t" name="seq">Sequence</field>
      <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the
          waypoint.</field>
      <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the
          waypoint.</field>
      <field type="uint8_t" name="current">false:0, true:1</field>
      <field type="uint8_t" name="autocontinue">Autocontinue to next waypoint. 0: false, 1:
          true. Set false to pause mission after the item completes.</field>
      <field type="float" name="param1">PARAM1, see MAV_CMD enum</field>
      <field type="float" name="param2">PARAM2, see MAV_CMD enum</field>
      <field type="float" name="param3">PARAM3, see MAV_CMD enum</field>
      <field type="float" name="param4">PARAM4, see MAV_CMD enum</field>
      <field type="float" name="x">PARAM5 / local: X coordinate, global: latitude</field>
      <field type="float" name="y">PARAM6 / local: Y coordinate, global: longitude</field>
      <field type="float" name="z">PARAM7 / local: Z coordinate, global: altitude (relative or
          absolute, depending on frame).</field>
      <extensions />
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
  </message>
      <message id="75" name="COMMAND_INT">
      <description>Send a command with up to seven parameters to the MAV, where params 5 and 6 are integers and the other values are floats. This is preferred over COMMAND_LONG as it allows the MAV_FRAME to be specified for interpreting positional information, such as altitude. COMMAND_INT is also preferred when sending latitude and longitude data in params 5 and 6, as it allows for greater precision. Param 5 and 6 encode positional data as scaled integers, where the scaling depends on the actual command value. NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). The command microservice is documented at https://mavlink.io/en/services/command.html</description>
      <field type="uint8_t" name="target_system">System ID</field>
      <field type="uint8_t" name="target_component">Component ID</field>
      <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the COMMAND.</field>
      <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the mission item.</field>
      <field type="uint8_t" name="current">Not used.</field>
      <field type="uint8_t" name="autocontinue">Not used (set 0).</field>
      <field type="float" name="param1" invalid="NaN">PARAM1, see MAV_CMD enum</field>
      <field type="float" name="param2" invalid="NaN">PARAM2, see MAV_CMD enum</field>
      <field type="float" name="param3" invalid="NaN">PARAM3, see MAV_CMD enum</field>
      <field type="float" name="param4" invalid="NaN">PARAM4, see MAV_CMD enum</field>
      <field type="int32_t" name="x" invalid="INT32_MAX">PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7</field>
      <field type="int32_t" name="y" invalid="INT32_MAX">PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7</field>
      <field type="float" name="z" invalid="NaN">PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).</field>
    </message>
    <message id="76" name="COMMAND_LONG">
      <description>Send a command with up to seven parameters to the MAV. COMMAND_INT is generally preferred when sending MAV_CMD commands that include positional information; it offers higher precision and allows the MAV_FRAME to be specified (which may otherwise be ambiguous, particularly for altitude). The command microservice is documented at https://mavlink.io/en/services/command.html</description>
      <field type="uint8_t" name="target_system">System which should execute the command</field>
      <field type="uint8_t" name="target_component">Component which should execute the command, 0 for all components</field>
      <field type="uint16_t" name="command" enum="MAV_CMD">Command ID (of command to send).</field>
      <field type="uint8_t" name="confirmation">0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)</field>
      <field type="float" name="param1" invalid="NaN">Parameter 1 (for the specific command).</field>
      <field type="float" name="param2" invalid="NaN">Parameter 2 (for the specific command).</field>
      <field type="float" name="param3" invalid="NaN">Parameter 3 (for the specific command).</field>
      <field type="float" name="param4" invalid="NaN">Parameter 4 (for the specific command).</field>
      <field type="float" name="param5" invalid="NaN">Parameter 5 (for the specific command).</field>
      <field type="float" name="param6" invalid="NaN">Parameter 6 (for the specific command).</field>
      <field type="float" name="param7" invalid="NaN">Parameter 7 (for the specific command).</field>
    </message>
  <message id="77" name="COMMAND_ACK">
    <description>Report status of a command. Includes feedback whether the command was
        executed. The command microservice is documented at
        https://mavlink.io/en/services/command.html</description>
    <field type="uint16_t" name="command" enum="MAV_CMD">Command ID (of acknowledged
        command).</field>
    <field type="uint8_t" name="result" enum="MAV_RESULT">Result of command.</field>
    <extensions />
    <field type="uint8_t" name="progress" invalid="UINT8_MAX" units="%">The progress
        percentage when result is MAV_RESULT_IN_PROGRESS. Values: [0-100], or UINT8_MAX if
        the progress is unknown.</field>
    <field type="int32_t" name="result_param2">Additional result information. Can be set
        with a command-specific enum containing command-specific error reasons for why the
        command might be denied. If used, the associated enum must be documented in the
        corresponding MAV_CMD (this enum should have a 0 value to indicate "unused" or
        "unknown").</field>
    <field type="uint8_t" name="target_system">System ID of the target recipient. This is
        the ID of the system that sent the command for which this COMMAND_ACK is an
        acknowledgement.</field>
    <field type="uint8_t" name="target_component">Component ID of the target recipient. This
        is the ID of the system that sent the command for which this COMMAND_ACK is an
        acknowledgement.</field>
</message>        
<message id="80" name="COMMAND_CANCEL">
  <description>Cancel a long running command. The target system should respond with a
      COMMAND_ACK to the original command with result=MAV_RESULT_CANCELLED if the long
      running process was cancelled. If it has already completed, the cancel action can be
      ignored. The cancel action can be retried until some sort of acknowledgement to the
      original command has been received. The command microservice is documented at
      https://mavlink.io/en/services/command.html</description>
  <field type="uint8_t" name="target_system">System executing long running command. Should
      not be broadcast (0).</field>
  <field type="uint8_t" name="target_component">Component executing long running command.</field>
  <field type="uint16_t" name="command" enum="MAV_CMD">Command ID (of command to cancel).</field>
</message>
<message id="110" name="FILE_TRANSFER_PROTOCOL">
  <description>File transfer protocol message: https://mavlink.io/en/services/ftp.html.</description>
  <field type="uint8_t" name="target_network">Network ID (0 for broadcast)</field>
  <field type="uint8_t" name="target_system">System ID (0 for broadcast)</field>
  <field type="uint8_t" name="target_component">Component ID (0 for broadcast)</field>
  <field type="uint8_t[251]" name="payload">Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields. The content/format of this block is defined in https://mavlink.io/en/services/ftp.html.</field>
</message>
<message id="111" name="TIMESYNC">
  <description>
    Time synchronization message.
    The message is used for both timesync requests and responses.
    The request is sent with `ts1=syncing component timestamp` and `tc1=0`, and may be broadcast or targeted to a specific system/component.
    The response is sent with `ts1=syncing component timestamp` (mirror back unchanged), and `tc1=responding component timestamp`, with the `target_system` and `target_component` set to ids of the original request.
    Systems can determine if they are receiving a request or response based on the value of `tc`.
    If the response has `target_system==target_component==0` the remote system has not been updated to use the component IDs and cannot reliably timesync; the requestor may report an error.
    Timestamps are UNIX Epoch time or time since system boot in nanoseconds (the timestamp format can be inferred by checking for the magnitude of the number; generally it doesn't matter as only the offset is used).
    The message sequence is repeated numerous times with results being filtered/averaged to estimate the offset.
  </description>
  <field type="int64_t" name="tc1" units="ns">Time sync timestamp 1. Syncing: 0. Responding: Timestamp of responding component.</field>
  <field type="int64_t" name="ts1" units="ns">Time sync timestamp 2. Timestamp of syncing component (mirrored in response).</field>
  <extensions/>
  <field type="uint8_t" name="target_system">Target system id. Request: 0 (broadcast) or id of specific system. Response must contain system id of the requesting component.</field>
  <field type="uint8_t" name="target_component">Target component id. Request: 0 (broadcast) or id of specific component. Response must contain component id of the requesting component.</field>
</message>
<message id="244" name="MESSAGE_INTERVAL">
      <description>
        The interval between messages for a particular MAVLink message ID.
        This message is sent in response to the MAV_CMD_REQUEST_MESSAGE command with param1=244 (this message) and param2=message_id (the id of the message for which the interval is required).
	It may also be sent in response to MAV_CMD_GET_MESSAGE_INTERVAL.
	This interface replaces DATA_STREAM.</description>
      <field type="uint16_t" name="message_id">The ID of the requested MAVLink message. v1.0 is limited to 254 messages.</field>
      <field type="int32_t" name="interval_us" units="us">The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, &gt; 0 indicates the interval at which it is sent.</field>
    </message>
    <message id="251" name="NAMED_VALUE_FLOAT">
      <description>Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
      <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
      <field type="char[10]" name="name" instance="true">Name of the debug variable</field>
      <field type="float" name="value">Floating point value</field>
    </message>
    <message id="252" name="NAMED_VALUE_INT">
      <description>Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
      <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
      <field type="char[10]" name="name" instance="true">Name of the debug variable</field>
      <field type="int32_t" name="value">Signed integer value</field>
    </message>
    <message id="253" name="STATUSTEXT">
      <description>Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).</description>
      <field type="uint8_t" name="severity" enum="MAV_SEVERITY">Severity of status. Relies on the definitions within RFC-5424.</field>
      <field type="char[50]" name="text">Status text message, without null termination character</field>
      <extensions/>
      <field type="uint16_t" name="id">Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately.</field>
      <field type="uint8_t" name="chunk_seq">This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.</field>
    </message>
  </messages>
</mavlink>
