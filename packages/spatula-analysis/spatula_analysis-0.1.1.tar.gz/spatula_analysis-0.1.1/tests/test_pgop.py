# Copyright (c) 2021-2025 The Regents of the University of Michigan
# Part of spatula, released under the BSD 3-Clause License.


import coxeter
import freud
import numpy as np
import pytest
import scipy.spatial

import spatula

reruns = 5

n_dict = {
    3: "Triangular",
    4: "Square",
    5: "Pentagonal",
    6: "Hexagonal",
    7: "Heptagonal",
    8: "Octagonal",
    9: "Nonagonal",
    10: "Decagonal",
}


pgop_dict = {}


spatula.util.set_num_threads(1)


def get_pyramid(n: int) -> np.ndarray:
    base = coxeter.families.RegularNGonFamily().get_shape(n).vertices
    # Need to offset polygon to make dihedral order low for testing.
    return (
        f"Pyramid({n})",
        np.concatenate((base - np.array([0.0, 0.0, -0.5]), [[0.0, 0.0, 3.0]])),
    )


def get_bipyramid(n: int) -> np.ndarray:
    base = coxeter.families.RegularNGonFamily().get_shape(n).vertices
    return (
        f"Bipyramid({n})",
        np.concatenate((base, [[0.0, 0.0, 3.0], [0.0, 0.0, -3.0]])),
    )


def parse_shape_values(
    a: str | tuple[str, np.ndarray],
) -> tuple[str, np.ndarray]:
    if isinstance(a, tuple):
        return a
    family, shape = a.split(".")
    if shape.isdigit():
        shape = int(shape)

    vertices = getattr(coxeter.families, family).get_shape(shape).vertices
    return shape, vertices


def _id_func(value):
    if isinstance(value, str):
        return value
    elif isinstance(value, int):
        return f"NGon{value}"
    return ""


# The vertices found in this dictionary for all these shapes were taken from
# http://dmccooey.com/polyhedra/Simplest.html
# molecules are taken from https://symotter.org/gallery
shape_symmetries = {
    "C1": [
        (
            "vertices",
            [
                [
                    1.56922900989136486079919529624,
                    0.127344173132779220661025515340,
                    -0.594246684979361531856095101193,
                ],
                [
                    0.0544154317961383030163066010436,
                    -0.947594490792603122917402692721,
                    -0.594246684979361531856095101193,
                ],
                [
                    -1.67017858435830105053903440232,
                    0.0,
                    -0.594246684979361531856095101193,
                ],
                [
                    -0.0213946139374397854092095434663,
                    0.905939944266888642915620773436,
                    -0.594246684979361531856095101193,
                ],
                [
                    0.408714532008138679156653441174,
                    -0.984198346940939589795611220376,
                    0.362199783826854559024170380756,
                ],
                [
                    -0.0120908032100600645529433979780,
                    1.16488491635665498242827880542,
                    0.788799869882532888666060905952,
                ],
                [
                    -0.384754129324100147766981384357,
                    -0.433371335880031688698557665178,
                    1.05712424949451132235936641797,
                ],
            ],
        ),
        (
            "vertices-2",
            [
                [0.8007618912594414, 0.7516350841971927, -0.4027433829029944],
                [1.1029498630572625, -1.0276004804487782, -0.4027433829029944],
                [-0.6049588541429178, -0.8604924250430251, -0.4027433829029944],
                [-1.013015119275374, 0.0, -0.4027433829029944],
                [-0.5100481304476243, 1.0606362918909986, -0.4027433829029944],
                [0.9244995677026183, 0.28349630094569334, 0.4582538419333087],
                [-0.9253484067369404, -0.2163279003583168, 2.293921494718945],
            ],
        ),
    ],
    "Ci": [
        (
            "vertices",
            [
                [1.189207115002721, 0.0, 1.0],
                [-1.189207115002721, 0.0, -1.0],
                [-0.49258571550470803, 0.0, 1.0],
                [0.49258571550470803, 0.0, -1.0],
                [-0.8408964152537145, 0.49258571550470803, 0.41421356237309503],
                [0.8408964152537145, -0.49258571550470803, -0.41421356237309503],
                [-0.3483106997490065, -1.189207115002721, 0.41421356237309503],
                [0.3483106997490065, 1.189207115002721, -0.41421356237309503],
                [0.5946035575013605, -0.8408964152537145, 0.0],
                [-0.5946035575013605, 0.8408964152537145, 0.0],
            ],
        )
    ],
    "Cs": [
        (
            "vertices",
            [
                [1.3737233664112654, -0.553529398617591, 0.8328296373605156],
                [-1.3737233664112654, -0.553529398617591, 0.8328296373605156],
                [0.5049089371450616, -0.553529398617591, -0.8328296373605156],
                [-0.5049089371450616, -0.553529398617591, -0.8328296373605156],
                [0.0, 0.5401563613890422, 0.9252962109065457],
                [0.0, 2.2892449735263116, -1.258960428697956],
            ],
        ),
        (
            "vertices-2",
            [
                [1.1308602751428245, 0.46267782041032823, -0.382762006411681],
                [-1.1308602751428245, 0.46267782041032823, -0.382762006411681],
                [0.6635261621303494, -0.9238469821608469, -0.382762006411681],
                [-0.6635261621303494, -0.9238469821608469, -0.382762006411681],
                [0.0, 1.0356697454981418, -0.382762006411681],
                [0.0, 0.8705630105371348, 1.5829981233573815],
                [0.0, -0.9498272409359462, 0.6320446478446134],
            ],
        ),
    ],
    "C2": [
        (
            "vertices",
            [
                [0.47895290007454705, 0.6092375000865723, 1.0],
                [-0.47895290007454705, -0.6092375000865723, 1.0],
                [1.5950044824476632, 0.0, -1.0],
                [-1.5950044824476632, 0.0, -1.0],
                [0.0, 1.13589310962197, -0.11972592295680519],
                [0.0, -1.13589310962197, -0.11972592295680519],
            ],
        )
    ],
    "C3": [
        (
            "vertices",
            [
                [0.09721493414474791, 0.8917128617235874, 0.8937837306664239],
                [-0.8208534582063212, -0.3616658282652108, 0.8937837306664239],
                [0.7236385240615733, -0.5300470334583767, 0.8937837306664239],
                [1.222667862618902, 0.0, -0.7913727468328255],
                [-0.611333931309451, 1.058861429418791, -0.7913727468328255],
                [-0.611333931309451, -1.058861429418791, -0.7913727468328255],
                [-1.0367052338386331, 0.0, -0.08116122495760766],
                [0.5183526169193166, -0.8978130687405432, -0.08116122495760766],
                [0.5183526169193166, 0.8978130687405432, -0.08116122495760766],
            ],
        ),
        (
            "vertices-2",
            [
                [0.0, 0.0, 1.1188388932235083],
                [0.0, 0.0, -1.2636270379566736],
                [0.0, 1.2436893138327536, 0.4947590294656065],
                [-1.0770665401944017, -0.6218446569163768, 0.4947590294656065],
                [1.0770665401944017, -0.6218446569163768, 0.4947590294656065],
                [0.9159637141900596, 0.09985877290347703, -0.5518542863737882],
                [-0.5444620912201821, 0.7433184589816021, -0.5518542863737882],
                [-0.37150162296987754, -0.8431772318850791, -0.5518542863737882],
                [0.0, -1.0588750792704977, 0.05615771094129951],
                [0.9170127180825124, 0.5294375396352489, 0.05615771094129951],
                [-0.9170127180825124, 0.5294375396352489, 0.05615771094129951],
            ],
        ),
        (
            "vertices-3",
            [
                [0.0, 0.0, 2.854983680047803],
                [0.6875820522678492, -0.7428909472284139, 0.14809515992007738],
                [0.29957140640736657, 0.966908998064404, 0.14809515992007738],
                [-0.9871534586752158, -0.2240180508359902, 0.14809515992007738],
                [0.0, -1.198616828322378, -0.3502646992305246],
                [0.0, 1.005960314056215, -0.3502646992305246],
                [0.8711871871716543, -0.5029801570281075, -0.3502646992305246],
                [-0.8711871871716543, -0.5029801570281075, -0.3502646992305246],
                [1.0380326227307104, 0.599308414161189, -0.3502646992305246],
                [-1.0380326227307104, 0.599308414161189, -0.3502646992305246],
            ],
        ),
        (
            "vertices-4",
            [
                [0.0, 0.0, 1.3141376019295983],
                [-0.6046286567813116, 0.728667176602242, 0.5068331105134641],
                [-0.32872995745076766, -0.8879573649297992, 0.5068331105134641],
                [0.9333586142320793, 0.1592901883275572, 0.5068331105134641],
                [0.0, 1.2976085700537934, -0.7609553204562916],
                [-1.1237619858349845, -0.6488042850268967, -0.7609553204562916],
                [1.1237619858349845, -0.6488042850268967, -0.7609553204562916],
                [0.0, -1.0335497828354645, -0.04218293305535333],
                [0.8950803680114021, 0.5167748914177323, -0.04218293305535333],
                [-0.8950803680114021, 0.5167748914177323, -0.04218293305535333],
            ],
        ),
    ],
    "C4": [
        (
            "vertices",
            [
                [0.9020768831634525, 0.28480944998815594, 0.7433508169295151],
                [-0.9020768831634525, -0.28480944998815594, 0.7433508169295151],
                [0.28480944998815594, -0.9020768831634525, 0.7433508169295151],
                [-0.28480944998815594, 0.9020768831634525, 0.7433508169295151],
                [0.7863247436800825, 0.7863247436800825, -0.6178134002079047],
                [0.7863247436800825, -0.7863247436800825, -0.6178134002079047],
                [-0.7863247436800825, 0.7863247436800825, -0.6178134002079047],
                [-0.7863247436800825, -0.7863247436800825, -0.6178134002079047],
                [1.017425061294311, 0.0, -0.0692776715108155],
                [-1.017425061294311, 0.0, -0.0692776715108155],
                [0.0, 1.017425061294311, -0.0692776715108155],
                [0.0, -1.017425061294311, -0.0692776715108155],
            ],
        ),
        (
            "vertices-2",
            [
                [0.0, 0.0, 1.3452598385922276],
                [0.0, 0.0, -1.6186117032480731],
                [1.1328590547091837, 0.0, 0.3258603882288007],
                [-1.1328590547091837, 0.0, 0.3258603882288007],
                [0.0, 1.1328590547091837, 0.3258603882288007],
                [0.0, -1.1328590547091837, 0.3258603882288007],
                [0.8476783194348434, 0.4408545332277052, -0.40254079691970585],
                [-0.8476783194348434, -0.4408545332277052, -0.40254079691970585],
                [0.4408545332277052, -0.8476783194348434, -0.40254079691970585],
                [-0.4408545332277052, 0.8476783194348434, -0.40254079691970585],
                [0.730369462550913, 0.730369462550913, 0.030818778000162004],
                [0.730369462550913, -0.730369462550913, 0.030818778000162004],
                [-0.730369462550913, 0.730369462550913, 0.030818778000162004],
                [-0.730369462550913, -0.730369462550913, 0.030818778000162004],
            ],
        ),
        (
            "vertices-3",
            [
                [0.0, 0.0, 1.768056452099878],
                [0.8361792910629785, -0.5027376019057023, 0.3454360378972734],
                [-0.8361792910629785, 0.5027376019057023, 0.3454360378972734],
                [0.5027376019057023, 0.8361792910629785, 0.3454360378972734],
                [-0.5027376019057023, -0.8361792910629785, 0.3454360378972734],
                [1.166280227167637, 0.0, -0.565592800395216],
                [-1.166280227167637, 0.0, -0.565592800395216],
                [0.0, 1.166280227167637, -0.565592800395216],
                [0.0, -1.166280227167637, -0.565592800395216],
                [0.7180781683088163, 0.7180781683088163, -0.026595247818667966],
                [0.7180781683088163, -0.7180781683088163, -0.026595247818667966],
                [-0.7180781683088163, 0.7180781683088163, -0.026595247818667966],
                [-0.7180781683088163, -0.7180781683088163, -0.026595247818667966],
            ],
        ),
        (
            "vertices-4",
            [
                [0.0, 0.0, 3.860101644780593],
                [0.8543794982772945, -0.5319049001893495, 0.10783285780066124],
                [-0.8543794982772945, 0.5319049001893495, 0.10783285780066124],
                [0.5319049001893495, 0.8543794982772945, 0.10783285780066124],
                [-0.5319049001893495, -0.8543794982772945, 0.10783285780066124],
                [1.104830058729472, 0.0, -0.25906053571209514],
                [-1.104830058729472, 0.0, -0.25906053571209514],
                [0.0, 1.104830058729472, -0.25906053571209514],
                [0.0, -1.104830058729472, -0.25906053571209514],
                [0.7103212389528519, 0.7103212389528519, -0.25906053571209514],
                [0.7103212389528519, -0.7103212389528519, -0.25906053571209514],
                [-0.7103212389528519, 0.7103212389528519, -0.25906053571209514],
                [-0.7103212389528519, -0.7103212389528519, -0.25906053571209514],
            ],
        ),
        (
            "vertices-5",
            [
                [0.0, 0.0, 1.3052678471142751],
                [1.102522580563977, 0.0, 0.38038074871751476],
                [-1.102522580563977, 0.0, 0.38038074871751476],
                [0.0, 1.102522580563977, 0.38038074871751476],
                [0.0, -1.102522580563977, 0.38038074871751476],
                [0.8214563336258981, -0.38898655297908613, -0.7661262799132222],
                [-0.8214563336258981, 0.38898655297908613, -0.7661262799132222],
                [0.38898655297908613, 0.8214563336258981, -0.7661262799132222],
                [-0.38898655297908613, -0.8214563336258981, -0.7661262799132222],
                [0.7309327245573741, 0.7309327245573741, 0.0789342397004545],
                [0.7309327245573741, -0.7309327245573741, 0.0789342397004545],
                [-0.7309327245573741, 0.7309327245573741, 0.0789342397004545],
                [-0.7309327245573741, -0.7309327245573741, 0.0789342397004545],
            ],
        ),
    ],
    "C2h": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.618033988749895],
                [0.0, 0.0, -1.618033988749895],
                [0.0, 0.9717365435132913, 0.38196601125010515],
                [0.0, -0.9717365435132913, -0.38196601125010515],
                [1.0, 0.7861513777574233, 0.0],
                [1.0, -0.7861513777574233, 0.0],
                [-1.0, 0.7861513777574233, 0.0],
                [-1.0, -0.7861513777574233, 0.0],
            ],
        ),
        (
            "vertices-2",
            [
                [-0.4370160244488211, 0.0, 0.977197537924274],
                [0.4370160244488211, 0.0, -0.977197537924274],
                [0.4370160244488211, -0.48586827175664565, 0.977197537924274],
                [-0.4370160244488211, 0.48586827175664565, -0.977197537924274],
                [-0.977197537924274, 0.0, 0.4370160244488211],
                [0.977197537924274, 0.0, -0.4370160244488211],
                [0.977197537924274, 0.48586827175664565, 0.4370160244488211],
                [-0.977197537924274, -0.48586827175664565, -0.4370160244488211],
                [-0.4370160244488211, 1.272019649514069, 0.4370160244488211],
                [0.4370160244488211, -1.272019649514069, -0.4370160244488211],
            ],
        ),
    ],
    "C3h": [
        (
            "benzene-1,3,5-triol",
            [
                [-2.672610, -0.655501, 0.000000],
                [-3.142310, 0.009799, 0.000000],
                [1.903990, -1.986801, 0.000000],
                [1.562690, -2.726201, 0.000000],
                [0.768590, 2.642299, 0.000000],
                [1.579590, 2.716499, 0.000000],
                [-1.343910, -0.302901, 0.000000],
                [-0.415510, -1.340301, 0.000000],
                [-0.697410, -2.247501, 0.000000],
                [0.934290, -1.012401, 0.000000],
                [1.368490, 0.310299, 0.000000],
                [2.295090, 0.519799, 0.000000],
                [0.409690, 1.315299, 0.000000],
                [-0.953010, 1.029999, 0.000000],
                [-1.597710, 1.727699, 0.000000],
            ],
        ),
        (
            "benzotrifuroxan",
            [
                [1.226703, -0.746094, 0.000000],
                [1.226703, 0.684406, 0.000000],
                [0.032903, 1.435306, 0.000000],
                [-1.205997, 0.720006, 0.000000],
                [-1.259497, -0.689394, 0.000000],
                [-0.020697, -1.404494, 0.000000],
                [2.234903, -1.579694, 0.000000],
                [2.238703, 1.543806, 0.000000],
                [0.250803, 2.725106, 0.000000],
                [-2.456197, 1.166806, 0.000000],
                [-2.485497, -1.145794, 0.000000],
                [0.217503, -2.710394, 0.000000],
                [1.677303, -2.847294, 0.000000],
                [3.440503, 1.456806, 0.000000],
                [1.627303, 2.876006, 0.000000],
                [-2.981697, 2.251606, 0.000000],
                [-3.304397, -0.029294, 0.000000],
                [-0.459297, -3.707494, 0.000000],
            ],
        ),
    ],
    "C4h": [
        (
            "tetraazidocopper(II)",
            [
                [0.000000, 0.000000, 0.000000],
                [0.000000, 1.960500, 0.000000],
                [-0.972600, 2.625700, 0.000000],
                [-1.867700, 3.327400, 0.000000],
                [1.960500, 0.000000, 0.000000],
                [2.625700, 0.972600, 0.000000],
                [3.327400, 1.867700, 0.000000],
                [-1.960500, 0.000000, 0.000000],
                [-2.625700, -0.972600, 0.000000],
                [-3.327400, -1.867700, 0.000000],
                [0.000000, -1.960500, 0.000000],
                [0.972600, -2.625700, 0.000000],
                [1.867700, -3.327400, 0.000000],
            ],
        )
    ],
    "C6h": [
        (
            "hexakis(Me2N)benzene",
            [
                [1.214200, -0.701100, -0.000001],
                [1.214200, 0.701000, -0.000001],
                [0.000000, -1.402200, -0.000001],
                [2.495800, -1.356300, -0.000001],
                [2.422400, 1.483400, -0.000001],
                [0.073400, -2.839700, -0.000001],
                [2.804700, -2.105900, 1.201699],
                [2.804700, -2.105900, -1.201501],
                [3.225900, 1.376100, 1.201599],
                [3.226000, 1.376100, -1.201501],
                [-0.421200, -3.482000, -1.201501],
                [-0.421300, -3.482000, 1.201599],
                [3.749300, -2.231000, 1.267499],
                [2.374500, -2.957100, 1.167199],
                [2.495200, -1.625100, 1.966599],
                [2.374500, -2.957100, -1.167001],
                [3.749300, -2.231100, -1.267401],
                [2.495400, -1.625200, -1.966501],
                [3.806600, 2.131600, 1.267499],
                [3.748000, 0.577900, 1.166999],
                [2.654900, 1.348500, 1.966599],
                [3.748100, 0.577800, -1.167101],
                [3.806600, 2.131500, -1.267401],
                [2.654900, 1.348300, -1.966601],
                [-0.057300, -4.362600, -1.267401],
                [-1.373500, -3.535000, -1.167001],
                [-0.159600, -2.973600, -1.966601],
                [-0.057300, -4.362600, 1.267499],
                [-0.159600, -2.973500, 1.966599],
                [-1.373600, -3.534900, 1.167099],
                [0.000000, 1.402200, -0.000001],
                [-1.214200, -0.701000, -0.000001],
                [-1.214200, 0.701100, -0.000001],
                [-0.073400, 2.839700, -0.000001],
                [-2.422400, -1.483400, -0.000001],
                [-2.495800, 1.356300, -0.000001],
                [0.421200, 3.482000, 1.201499],
                [0.421300, 3.482000, -1.201601],
                [-3.225900, -1.376100, -1.201601],
                [-3.226000, -1.376100, 1.201499],
                [-2.804700, 2.105900, -1.201701],
                [-2.804700, 2.105900, 1.201499],
                [0.057300, 4.362600, 1.267399],
                [1.373500, 3.535000, 1.166999],
                [0.159600, 2.973600, 1.966599],
                [0.057300, 4.362600, -1.267501],
                [0.159600, 2.973500, -1.966601],
                [1.373600, 3.535000, -1.167101],
                [-3.806600, -2.131600, -1.267501],
                [-3.748000, -0.577900, -1.167001],
                [-2.654900, -1.348500, -1.966601],
                [-3.748100, -0.577800, 1.167099],
                [-3.806600, -2.131500, 1.267499],
                [-2.654900, -1.348300, 1.966599],
                [-3.749300, 2.231000, -1.267501],
                [-2.374500, 2.957100, -1.167101],
                [-2.495200, 1.625100, -1.966601],
                [-2.374500, 2.957100, 1.166999],
                [-3.749300, 2.231100, 1.267399],
                [-2.495400, 1.625200, 1.966499],
            ],
        ),
        (
            "cyclophane",
            [
                [1.219700, -0.704200, 1.465700],
                [1.219700, 0.704200, 1.465800],
                [0.000000, 1.408400, 1.465800],
                [-1.219600, 0.704200, 1.465800],
                [-1.219700, -0.704200, 1.465800],
                [0.000000, -1.408400, 1.465800],
                [2.529000, -1.469400, 1.345900],
                [3.284100, -1.359400, 0.000000],
                [-2.529000, 1.469400, 1.346000],
                [2.537100, 1.455500, 1.345900],
                [2.819300, 2.164400, 0.000000],
                [-2.537000, -1.455500, 1.345900],
                [0.008100, 2.924900, 1.345900],
                [-0.464800, 3.523700, 0.000000],
                [-0.008000, -2.924900, 1.345900],
                [2.374900, -2.433000, 1.551200],
                [3.160100, -1.155700, 2.054200],
                [3.972300, -2.107700, 0.000000],
                [3.773800, -0.420300, 0.000000],
                [-3.160100, 1.155700, 2.054200],
                [-2.374800, 2.433100, 1.551200],
                [2.581000, 2.158800, 2.054100],
                [3.294600, 0.840200, 1.551100],
                [2.250900, 3.058100, 0.000000],
                [3.811500, 2.386300, 0.000000],
                [-2.580900, -2.158800, 2.054300],
                [-3.294500, -0.840200, 1.551200],
                [-0.579100, 3.314500, 2.054200],
                [0.919700, 3.273200, 1.551200],
                [-1.522900, 3.478300, 0.000000],
                [-0.160900, 4.494000, 0.000000],
                [0.579200, -3.314600, 2.054200],
                [-0.919600, -3.273200, 1.551200],
                [2.529000, -1.469400, -1.346000],
                [1.219600, -0.704200, -1.465800],
                [0.000000, -1.408400, -1.465800],
                [-1.219700, -0.704200, -1.465800],
                [-1.219700, 0.704200, -1.465700],
                [0.000000, 1.408400, -1.465800],
                [1.219700, 0.704200, -1.465800],
                [2.537000, 1.455500, -1.345900],
                [2.580900, 2.158800, -2.054300],
                [3.294500, 0.840200, -1.551200],
                [0.008000, 2.924900, -1.345900],
                [-0.579200, 3.314600, -2.054200],
                [0.919600, 3.273200, -1.551200],
                [-2.529000, 1.469400, -1.345900],
                [-3.284100, 1.359400, 0.000000],
                [-3.972300, 2.107700, 0.000000],
                [-3.773800, 0.420300, 0.000000],
                [-2.374900, 2.433000, -1.551200],
                [-3.160100, 1.155700, -2.054200],
                [-2.537100, -1.455500, -1.345900],
                [-2.819300, -2.164400, 0.000000],
                [-2.250900, -3.058100, 0.000000],
                [-3.811500, -2.386300, 0.000000],
                [-2.581000, -2.158800, -2.054100],
                [-3.294600, -0.840200, -1.551100],
                [-0.008100, -2.924900, -1.345900],
                [0.464800, -3.523700, 0.000000],
                [1.522900, -3.478300, 0.000000],
                [0.160900, -4.494000, 0.000000],
                [0.579100, -3.314500, -2.054200],
                [-0.919700, -3.273200, -1.551200],
                [3.160100, -1.155700, -2.054200],
                [2.374800, -2.433100, -1.551200],
            ],
        ),
    ],
    "C2v": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.8116245508069786],
                [0.930617210618515, 0.0, -1.0],
                [-0.930617210618515, 0.0, -1.0],
                [0.575859742086094, 0.9974183313266246, 0.07180997377531669],
                [0.575859742086094, -0.9974183313266246, 0.07180997377531669],
                [-0.575859742086094, 0.9974183313266246, 0.07180997377531669],
                [-0.575859742086094, -0.9974183313266246, 0.07180997377531669],
            ],
        ),
        (
            "vertices-2",
            [
                [0.0, 1.0745841941261967, 1.0],
                [0.0, -1.0745841941261967, 1.0],
                [1.6677004630016656, 0.0, -0.5519907530258161],
                [-1.6677004630016656, 0.0, -0.5519907530258161],
                [0.0, 0.9628473112416752, -0.5519907530258161],
                [0.0, -0.9628473112416752, -0.5519907530258161],
            ],
        ),
    ],
    "C3v": [
        (
            "vertices",
            [
                [1.0, -1.0, 1.0],
                [-1.0, 1.0, 1.0],
                [1.0, 1.0, -1.0],
                [-1.0, -0.3333333333333333, -0.3333333333333333],
                [-0.3333333333333333, -1.0, -0.3333333333333333],
                [-0.3333333333333333, -0.3333333333333333, -1.0],
                [0.6, 0.6, 0.6],
            ],
        ),
        (
            "vertices-2",
            [
                [0.7745966692414834, -0.7745966692414834, 1.0],
                [-0.7745966692414834, 0.7745966692414834, 1.0],
                [0.7745966692414834, -0.5485724072577316, -0.6583592135001262],
                [-0.5485724072577316, 0.7745966692414834, -0.6583592135001262],
                [-0.7745966692414834, -0.7745966692414834, 0.3665631459994953],
                [1.0392304845413263, 1.0392304845413263, -0.2],
                [-0.5773502691896257, -0.5773502691896257, -1.0],
            ],
        ),
        get_pyramid(3),
    ],
    "S4": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.176614197732676],
                [0.0, 0.0, -1.176614197732676],
                [0.36031346070627496, 0.6612064329575712, 0.7097370431606547],
                [-0.36031346070627496, -0.6612064329575712, 0.7097370431606547],
                [0.6612064329575712, -0.36031346070627496, -0.7097370431606547],
                [-0.6612064329575712, 0.36031346070627496, -0.7097370431606547],
                [1.4142135623730951, 0.0, 0.2997778728622828],
                [-1.4142135623730951, 0.0, 0.2997778728622828],
                [0.0, 1.4142135623730951, -0.2997778728622828],
                [0.0, -1.4142135623730951, -0.2997778728622828],
            ],
        ),
        (
            "vertices-2",
            [
                [1.0319461686459552, 0.0, 0.849896254802118],
                [-1.0319461686459552, 0.0, 0.849896254802118],
                [0.0, 1.0319461686459552, -0.849896254802118],
                [0.0, -1.0319461686459552, -0.849896254802118],
                [0.0, 0.6128777741368966, 0.849896254802118],
                [0.0, -0.6128777741368966, 0.849896254802118],
                [0.6128777741368966, 0.0, -0.849896254802118],
                [-0.6128777741368966, 0.0, -0.849896254802118],
                [0.35117509897932175, -0.9424737448242083, 0.3589781509551674],
                [-0.35117509897932175, 0.9424737448242083, 0.3589781509551674],
                [0.9424737448242083, 0.35117509897932175, -0.3589781509551674],
                [-0.9424737448242083, -0.35117509897932175, -0.3589781509551674],
            ],
        ),
    ],
    "S6": [
        (
            "vertices",
            [
                [-0.958349120310194, 0.34009063223380526, 0.6335500762631686],
                [0.958349120310194, -0.34009063223380526, -0.6335500762631686],
                [0.7737016872586833, -0.27456455106360317, 0.6335500762631686],
                [-0.7737016872586833, 0.27456455106360317, -0.6335500762631686],
                [0.7737016872586833, 0.6599093677661948, 0.6335500762631686],
                [-0.7737016872586833, -0.6599093677661948, -0.6335500762631686],
                [-0.6246307198290917, -0.532763040585101, 0.6335500762631686],
                [0.6246307198290917, 0.532763040585101, -0.6335500762631686],
                [0.18464743305151082, -1.0, 0.6335500762631686],
                [-0.18464743305151082, 1.0, -0.6335500762631686],
                [-0.14907096742959158, 0.8073275916487042, 0.6335500762631686],
                [0.14907096742959158, -0.8073275916487042, -0.6335500762631686],
                [-0.8980735108232236, -0.44449105032241876, 0.21992269616711307],
                [0.8980735108232236, 0.44449105032241876, -0.21992269616711307],
                [0.8339772967456537, -0.5555089496775812, 0.21992269616711307],
                [-0.8339772967456537, 0.5555089496775812, -0.21992269616711307],
                [0.06409621407756987, 1.0, 0.21992269616711307],
                [-0.06409621407756987, -1.0, -0.21992269616711307],
            ],
        ),
        (
            "vertices-2",
            [
                [0.0, 0.0, 1.5784071969468327],
                [0.0, 0.0, -1.5784071969468327],
                [-0.8364985495055208, -0.31981873553238954, 0.48474417163591016],
                [0.8364985495055208, 0.31981873553238954, -0.48474417163591016],
                [0.6952204243300266, -0.5645196263344211, 0.48474417163591016],
                [-0.6952204243300266, 0.5645196263344211, -0.48474417163591016],
                [0.14127812517549415, 0.8843383618668106, 0.48474417163591016],
                [-0.14127812517549415, -0.8843383618668106, -0.48474417163591016],
                [1.1547005383792515, 0.0, 0.16826806462758645],
                [-1.1547005383792515, 0.0, -0.16826806462758645],
                [-0.5773502691896257, 1.0, 0.16826806462758645],
                [0.5773502691896257, 1.0, -0.16826806462758645],
                [-0.5773502691896257, -1.0, 0.16826806462758645],
                [0.5773502691896257, -1.0, -0.16826806462758645],
            ],
        ),
    ],
    "D2": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.2078882314892923],
                [0.0, 0.0, -1.2078882314892923],
                [0.20678349452781558, -0.8278911690090963, 0.6297684119865748],
                [0.20678349452781558, 0.8278911690090963, -0.6297684119865748],
                [-0.20678349452781558, 0.8278911690090963, 0.6297684119865748],
                [-0.20678349452781558, -0.8278911690090963, -0.6297684119865748],
                [1.0, 0.8278911690090963, 0.3283484699963385],
                [1.0, -0.8278911690090963, -0.3283484699963385],
                [-1.0, -0.8278911690090963, 0.3283484699963385],
                [-1.0, 0.8278911690090963, -0.3283484699963385],
            ],
        )
    ],
    "D3": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.1491020339707478],
                [0.21163171332200198, 0.24385641862467136, -1.0],
                [-0.21163171332200198, -0.24385641862467136, -1.0],
                [0.21163171332200198, 0.744097194472103, 0.7111858534048582],
                [-0.21163171332200198, -0.744097194472103, 0.7111858534048582],
                [0.0, 0.9951515529590366, -0.5745510169853739],
                [0.0, -0.9951515529590366, -0.5745510169853739],
                [0.21163171332200198, -0.9879536130967743, 0.2888141465951419],
                [-0.21163171332200198, 0.9879536130967743, 0.2888141465951419],
                [2.029963793177167, 0.0, 0.0],
                [-2.029963793177167, 0.0, 0.0],
            ],
        ),
        (
            "vertices-2",
            [
                [0.492619623739626, 0.4275217998199103, 1.0],
                [-0.492619623739626, -0.4275217998199103, 1.0],
                [0.492619623739626, 0.6522645038744835, -0.8702447393156878],
                [-0.492619623739626, -0.6522645038744835, -0.8702447393156878],
                [0.492619623739626, -0.3720485972360515, -0.8702447393156878],
                [-0.492619623739626, 0.3720485972360515, -0.8702447393156878],
                [0.492619623739626, -0.5676297531391263, 0.7573259063066293],
                [-0.492619623739626, 0.5676297531391263, 0.7573259063066293],
                [0.492619623739626, -1.0797863036943938, -0.12975526068431223],
                [-0.492619623739626, 1.0797863036943938, -0.12975526068431223],
                [0.492619623739626, 0.9396783503751778, 0.11291883300905842],
                [-0.492619623739626, -0.9396783503751778, 0.11291883300905842],
            ],
        ),
    ],
    "D4": [
        (
            "tetrathiacyclododecane",
            [
                [0.000004, -3.153195, -0.000005],
                [-3.153196, 0.000005, -0.000005],
                [0.000004, 3.153205, -0.000005],
                [3.153204, 0.000005, -0.000005],
                [-1.286996, -2.000995, -0.562905],
                [-2.001096, -1.286995, 0.562995],
                [-2.000996, 1.287005, -0.563005],
                [-1.286996, 2.001005, 0.562995],
                [1.287004, 2.000905, -0.563005],
                [2.001004, 1.287005, 0.562995],
                [2.001004, -1.286995, -0.563005],
                [1.287004, -2.000995, 0.562995],
                [-1.936196, -2.496095, -1.067705],
                [-0.877896, -1.342195, -1.128105],
                [-2.496196, -1.936195, 1.067595],
                [-1.342196, -0.877795, 1.128195],
                [-2.496096, 1.936205, -1.067605],
                [-1.342196, 0.877805, -1.128105],
                [-1.936096, 2.496205, 1.067695],
                [-0.877796, 1.342305, 1.128095],
                [1.936204, 2.496105, -1.067605],
                [0.877804, 1.342205, -1.128105],
                [2.496204, 1.936205, 1.067595],
                [1.342204, 0.877805, 1.128095],
                [2.496204, -1.936195, -1.067705],
                [1.342204, -0.877795, -1.128205],
                [1.936204, -2.496195, 1.067595],
                [0.877904, -1.342195, 1.128195],
            ],
        )
    ],
    "D5": [
        (
            "YbI2(THF)5",
            [
                [-0.000008, -0.000002, -0.000000],
                [-0.000008, -0.000002, 2.936200],
                [-1.381908, -1.902102, -0.000000],
                [-2.236008, 0.726498, -0.000000],
                [-0.000008, 2.351098, -0.000000],
                [-1.416708, -2.937202, 1.038600],
                [-1.851408, -2.599802, 1.855100],
                [-0.506508, -3.233602, 1.266900],
                [-2.203608, -4.063402, 0.454000],
                [-2.668708, -4.572702, 1.158200],
                [-1.627308, -4.673502, -0.058500],
                [-3.231208, 0.439698, 1.038600],
                [-3.044708, 0.957398, 1.855100],
                [-3.231908, -0.517602, 1.266900],
                [-4.545508, 0.840098, 0.454000],
                [-5.173608, 1.124998, 1.158200],
                [-4.947608, 0.103598, -0.058400],
                [-4.171208, 1.992098, -0.454000],
                [-4.846908, 2.130698, -1.158100],
                [-4.063608, 2.824298, 0.058500],
                [-2.872608, 1.543498, -1.038600],
                [-3.025908, 1.014998, -1.855100],
                [-2.310508, 2.318298, -1.266800],
                [-0.580308, 3.208998, 1.038500],
                [-0.030308, 3.191498, 1.855100],
                [-1.491008, 2.913698, 1.266900],
                [-0.605608, 4.582598, 0.454000],
                [-1.430408, 4.737398, -0.058400],
                [-0.528708, 5.268098, 1.158300],
                [0.605592, 4.582598, -0.454000],
                [1.430292, 4.737398, 0.058400],
                [0.528592, 5.267998, -1.158200],
                [0.580292, 3.208898, -1.038600],
                [0.030292, 3.191498, -1.855100],
                [1.490892, 2.913798, -1.266900],
                [-0.000008, -0.000002, -2.936200],
                [-3.183508, -3.351502, -0.453900],
                [-2.355608, -2.255102, -1.038500],
                [-1.900408, -2.564302, -1.855100],
                [-2.918908, -1.481002, -1.266800],
                [-3.524108, -3.951202, -1.158200],
                [-3.941808, -2.992002, 0.058500],
                [1.381892, -1.902002, -0.000000],
                [1.416792, -2.937202, -1.038500],
                [1.851492, -2.599802, -1.855100],
                [0.506492, -3.233702, -1.266800],
                [2.203692, -4.063302, -0.454000],
                [2.668792, -4.572602, -1.158200],
                [1.627492, -4.673402, 0.058400],
                [3.183492, -3.351402, 0.453900],
                [3.524292, -3.951102, 1.158200],
                [3.941692, -2.991902, -0.058500],
                [2.355692, -2.255002, 1.038600],
                [1.900392, -2.564202, 1.855100],
                [2.918892, -1.480902, 1.266800],
                [2.235992, 0.726498, -0.000000],
                [3.231292, 0.439798, -1.038500],
                [3.044692, 0.957498, -1.855100],
                [3.231892, -0.517502, -1.266900],
                [4.545492, 0.840198, -0.454000],
                [4.947592, 0.103698, 0.058500],
                [5.173592, 1.125198, -1.158200],
                [4.171192, 1.992098, 0.453900],
                [4.063592, 2.824298, -0.058500],
                [4.846792, 2.130698, 1.158200],
                [2.872592, 1.543598, 1.038500],
                [3.025892, 1.015098, 1.855000],
                [2.310492, 2.318398, 1.266800],
            ],
        ),
    ],
    "D2h": [
        (
            "vertices",
            [
                [0.0, 0.5, 1.0],
                [0.0, 0.5, -1.0],
                [0.0, -0.5, 1.0],
                [0.0, -0.5, -1.0],
                [1.0, 1.0, 0.0],
                [1.0, -1.0, 0.0],
                [-1.0, 1.0, 0.0],
                [-1.0, -1.0, 0.0],
            ],
        ),
    ],
    "D4h": [
        (
            "vertices",
            [
                [0.0, 0.0, np.sqrt(2)],
                [0.0, 0.0, -np.sqrt(2)],
                [np.sqrt(2), 0.0, 0.0],
                [-np.sqrt(2), 0.0, 0.0],
                [0.0, 2 * np.sqrt(2) / 3, np.sqrt(2) / 3],
                [0.0, 2 * np.sqrt(2) / 3, -np.sqrt(2) / 3],
                [0.0, -2 * np.sqrt(2) / 3, np.sqrt(2) / 3],
                [0.0, -2 * np.sqrt(2) / 3, -np.sqrt(2) / 3],
                [np.sqrt(2) / 3, 2 * np.sqrt(2) / 3, 0.0],
                [np.sqrt(2) / 3, -2 * np.sqrt(2) / 3, 0.0],
                [-np.sqrt(2) / 3, 2 * np.sqrt(2) / 3, 0.0],
                [-np.sqrt(2) / 3, -2 * np.sqrt(2) / 3, 0.0],
            ],
        ),
    ],
    "D2d": [
        (
            "vertices",
            [
                [1.0, 0.0, 1.0],
                [-1.0, 0.0, 1.0],
                [0.0, 1.0, -1.0],
                [0.0, -1.0, -1.0],
                [1.0, 0.0, -0.5],
                [-1.0, 0.0, -0.5],
                [0.0, 1.0, 0.5],
                [0.0, -1.0, 0.5],
            ],
        ),
        (
            "vertices-2",
            [
                [0.5, 0.0, 1.0],
                [-0.5, 0.0, 1.0],
                [0.0, 0.5, -1.0],
                [0.0, -0.5, -1.0],
                [1.0, 1.0, 0.0],
                [1.0, -1.0, 0.0],
                [-1.0, 1.0, 0.0],
                [-1.0, -1.0, 0.0],
            ],
        ),
    ],
    "D3d": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.4142135623730951],
                [0.0, 0.0, -1.4142135623730951],
                [1.4142135623730951, 0.0, 0.0],
                [-1.4142135623730951, 0.0, 0.0],
                [0.0, 1.4142135623730951, 0.0],
                [0.0, -1.4142135623730951, 0.0],
                [0.585786437626905, 0.585786437626905, 0.585786437626905],
                [-0.585786437626905, -0.585786437626905, -0.585786437626905],
            ],
        ),
        (
            "vertices-2",
            [
                [0.7071067811865476, 0.7071067811865476, 0.7071067811865476],
                [-0.7071067811865476, -0.7071067811865476, -0.7071067811865476],
                [0.7071067811865476, -0.7071067811865476, 0.7071067811865476],
                [0.7071067811865476, -0.7071067811865476, -0.7071067811865476],
                [-0.7071067811865476, 0.7071067811865476, 0.7071067811865476],
                [-0.7071067811865476, 0.7071067811865476, -0.7071067811865476],
                [-0.7071067811865476, -0.2928932188134525, 0.7071067811865476],
                [0.7071067811865476, 0.2928932188134525, -0.7071067811865476],
                [-0.2928932188134525, -0.7071067811865476, 0.7071067811865476],
                [0.2928932188134525, 0.7071067811865476, -0.7071067811865476],
                [-0.7071067811865476, -0.7071067811865476, 0.2928932188134525],
                [0.7071067811865476, 0.7071067811865476, -0.2928932188134525],
            ],
        ),
        f"PrismAntiprismFamily.{n_dict[3]} Antiprism",
    ],
    "D4d": [
        (
            "Tetragonal Trapezohedron vertices",
            [
                [0.0, 0.0, 1.5537739740300374],
                [0.0, 0.0, -1.5537739740300374],
                [1.082392200292394, 0.0, 0.2665854682188721],
                [-1.082392200292394, 0.0, 0.2665854682188721],
                [0.0, 1.082392200292394, 0.2665854682188721],
                [0.0, -1.082392200292394, 0.2665854682188721],
                [0.7653668647301796, 0.7653668647301796, -0.2665854682188721],
                [0.7653668647301796, -0.7653668647301796, -0.2665854682188721],
                [-0.7653668647301796, 0.7653668647301796, -0.2665854682188721],
                [-0.7653668647301796, -0.7653668647301796, -0.2665854682188721],
            ],
        ),
        (
            "sulfur S8",
            [
                [2.167800, 0.897900, 0.447000],
                [0.897900, 2.167800, -0.447000],
                [-0.897900, 2.167800, 0.447000],
                [-2.167800, 0.897900, -0.447000],
                [-2.167800, -0.897900, 0.447000],
                [-0.897900, -2.167800, -0.447000],
                [0.897900, -2.167800, 0.447000],
                [2.167800, -0.897900, -0.447000],
            ],
        ),
        f"PrismAntiprismFamily.{n_dict[4]} Antiprism",
    ],
    "D5d": [
        (
            "Pentagonal Antiprism vertices",
            [
                [0.6180339887498949, 0.0, 1.0],
                [0.6180339887498949, 0.0, -1.0],
                [-0.6180339887498949, 0.0, 1.0],
                [-0.6180339887498949, 0.0, -1.0],
                [0.0, 1.0, 0.6180339887498949],
                [0.0, 1.0, -0.6180339887498949],
                [0.0, -1.0, 0.6180339887498949],
                [0.0, -1.0, -0.6180339887498949],
                [1.0, 0.6180339887498949, 0.0],
                [-1.0, -0.6180339887498949, 0.0],
            ],
        ),
        (
            "Pentagonal Trapezohedron vertices",
            [
                [0.0, 0.38196601125010515, 1.0],
                [0.0, 0.38196601125010515, -1.0],
                [0.0, -0.38196601125010515, 1.0],
                [0.0, -0.38196601125010515, -1.0],
                [0.6180339887498949, 0.6180339887498949, 0.6180339887498949],
                [0.6180339887498949, 0.6180339887498949, -0.6180339887498949],
                [-0.6180339887498949, -0.6180339887498949, 0.6180339887498949],
                [-0.6180339887498949, -0.6180339887498949, -0.6180339887498949],
                [1.618033988749895, -1.0, 0.0],
                [-1.618033988749895, 1.0, 0.0],
                [0.38196601125010515, 1.0, 0.0],
                [-0.38196601125010515, -1.0, 0.0],
            ],
        ),
        f"PrismAntiprismFamily.{n_dict[5]} Antiprism",
    ],
    "D6d": [
        (
            "Hexagonal Trapezohedron",
            [
                [0.0, 0.0, 2.257891983987125],
                [0.0, 0.0, -2.257891983987125],
                [0.0, 1.035276180410083, 0.16210935083709735],
                [0.0, -1.035276180410083, 0.16210935083709735],
                [1.035276180410083, 0.0, -0.16210935083709735],
                [-1.035276180410083, 0.0, -0.16210935083709735],
                [0.8965754721680536, 0.5176380902050415, 0.16210935083709735],
                [0.8965754721680536, -0.5176380902050415, 0.16210935083709735],
                [-0.8965754721680536, 0.5176380902050415, 0.16210935083709735],
                [-0.8965754721680536, -0.5176380902050415, 0.16210935083709735],
                [0.5176380902050415, 0.8965754721680536, -0.16210935083709735],
                [0.5176380902050415, -0.8965754721680536, -0.16210935083709735],
                [-0.5176380902050415, 0.8965754721680536, -0.16210935083709735],
                [-0.5176380902050415, -0.8965754721680536, -0.16210935083709735],
            ],
        ),
        f"PrismAntiprismFamily.{n_dict[6]} Antiprism",
    ],
    "T": [
        (
            "Propello Tetrahedron",
            [
                [0.5097553324933856, 0.13968058199610653, 1.0],
                [0.5097553324933856, -0.13968058199610653, -1.0],
                [-0.5097553324933856, -0.13968058199610653, 1.0],
                [-0.5097553324933856, 0.13968058199610653, -1.0],
                [1.0, 0.5097553324933856, 0.13968058199610653],
                [1.0, -0.5097553324933856, -0.13968058199610653],
                [-1.0, -0.5097553324933856, 0.13968058199610653],
                [-1.0, 0.5097553324933856, -0.13968058199610653],
                [0.13968058199610653, 1.0, 0.5097553324933856],
                [0.13968058199610653, -1.0, -0.5097553324933856],
                [-0.13968058199610653, -1.0, 0.5097553324933856],
                [-0.13968058199610653, 1.0, -0.5097553324933856],
                [0.6062678708614785, -0.6062678708614785, 0.6062678708614785],
                [0.6062678708614785, 0.6062678708614785, -0.6062678708614785],
                [-0.6062678708614785, 0.6062678708614785, 0.6062678708614785],
                [-0.6062678708614785, -0.6062678708614785, -0.6062678708614785],
            ],
        )
    ],
    "Th": [
        (
            "vertices",
            [
                [0.41421356237309503, 0.0, 1.0],
                [0.41421356237309503, 0.0, -1.0],
                [-0.41421356237309503, 0.0, 1.0],
                [-0.41421356237309503, 0.0, -1.0],
                [1.0, 0.41421356237309503, 0.0],
                [1.0, -0.41421356237309503, 0.0],
                [-1.0, 0.41421356237309503, 0.0],
                [-1.0, -0.41421356237309503, 0.0],
                [0.0, 1.0, 0.41421356237309503],
                [0.0, 1.0, -0.41421356237309503],
                [0.0, -1.0, 0.41421356237309503],
                [0.0, -1.0, -0.41421356237309503],
                [0.0, 0.5224077499274828, 0.8918058124456122],
                [0.0, 0.5224077499274828, -0.8918058124456122],
                [0.0, -0.5224077499274828, 0.8918058124456122],
                [0.0, -0.5224077499274828, -0.8918058124456122],
                [0.8918058124456122, 0.0, 0.5224077499274828],
                [0.8918058124456122, 0.0, -0.5224077499274828],
                [-0.8918058124456122, 0.0, 0.5224077499274828],
                [-0.8918058124456122, 0.0, -0.5224077499274828],
                [0.5224077499274828, 0.8918058124456122, 0.0],
                [0.5224077499274828, -0.8918058124456122, 0.0],
                [-0.5224077499274828, 0.8918058124456122, 0.0],
                [-0.5224077499274828, -0.8918058124456122, 0.0],
            ],
        ),
        (
            "vertices-2",
            [
                [0.20710678118654752, 0.0, 1.0],
                [0.20710678118654752, 0.0, -1.0],
                [-0.20710678118654752, 0.0, 1.0],
                [-0.20710678118654752, 0.0, -1.0],
                [1.0, 0.20710678118654752, 0.0],
                [1.0, -0.20710678118654752, 0.0],
                [-1.0, 0.20710678118654752, 0.0],
                [-1.0, -0.20710678118654752, 0.0],
                [0.0, 1.0, 0.20710678118654752],
                [0.0, 1.0, -0.20710678118654752],
                [0.0, -1.0, 0.20710678118654752],
                [0.0, -1.0, -0.20710678118654752],
                [0.7071067811865476, 0.7071067811865476, 0.7071067811865476],
                [0.7071067811865476, 0.7071067811865476, -0.7071067811865476],
                [0.7071067811865476, -0.7071067811865476, 0.7071067811865476],
                [0.7071067811865476, -0.7071067811865476, -0.7071067811865476],
                [-0.7071067811865476, 0.7071067811865476, 0.7071067811865476],
                [-0.7071067811865476, 0.7071067811865476, -0.7071067811865476],
                [-0.7071067811865476, -0.7071067811865476, 0.7071067811865476],
                [-0.7071067811865476, -0.7071067811865476, -0.7071067811865476],
            ],
        ),
    ],
    "Td": ["PlatonicFamily.Tetrahedron"],
    "O": [
        "ArchimedeanFamily.Snub Cuboctahedron",
        "CatalanFamily.Pentagonal Icositetrahedron",
        (
            "Propello Cube vertices",
            [
                [0.48168987641083044, 0.1696290458678061, 0.9325236859622646],
                [0.48168987641083044, -0.1696290458678061, -0.9325236859622646],
                [-0.48168987641083044, -0.1696290458678061, 0.9325236859622646],
                [-0.48168987641083044, 0.1696290458678061, -0.9325236859622646],
                [0.9325236859622646, 0.48168987641083044, 0.1696290458678061],
                [0.9325236859622646, -0.48168987641083044, -0.1696290458678061],
                [-0.9325236859622646, -0.48168987641083044, 0.1696290458678061],
                [-0.9325236859622646, 0.48168987641083044, -0.1696290458678061],
                [0.1696290458678061, 0.9325236859622646, 0.48168987641083044],
                [0.1696290458678061, -0.9325236859622646, -0.48168987641083044],
                [-0.1696290458678061, -0.9325236859622646, 0.48168987641083044],
                [-0.1696290458678061, 0.9325236859622646, -0.48168987641083044],
                [0.1696290458678061, -0.48168987641083044, 0.9325236859622646],
                [0.1696290458678061, 0.48168987641083044, -0.9325236859622646],
                [-0.1696290458678061, 0.48168987641083044, 0.9325236859622646],
                [-0.1696290458678061, -0.48168987641083044, -0.9325236859622646],
                [0.9325236859622646, -0.1696290458678061, 0.48168987641083044],
                [0.9325236859622646, 0.1696290458678061, -0.48168987641083044],
                [-0.9325236859622646, 0.1696290458678061, 0.48168987641083044],
                [-0.9325236859622646, -0.1696290458678061, -0.48168987641083044],
                [0.48168987641083044, -0.9325236859622646, 0.1696290458678061],
                [0.48168987641083044, 0.9325236859622646, -0.1696290458678061],
                [-0.48168987641083044, 0.9325236859622646, 0.1696290458678061],
                [-0.48168987641083044, -0.9325236859622646, -0.1696290458678061],
                [0.5878005115037175, 0.5878005115037175, 0.5878005115037175],
                [0.5878005115037175, 0.5878005115037175, -0.5878005115037175],
                [0.5878005115037175, -0.5878005115037175, 0.5878005115037175],
                [0.5878005115037175, -0.5878005115037175, -0.5878005115037175],
                [-0.5878005115037175, 0.5878005115037175, 0.5878005115037175],
                [-0.5878005115037175, 0.5878005115037175, -0.5878005115037175],
                [-0.5878005115037175, -0.5878005115037175, 0.5878005115037175],
                [-0.5878005115037175, -0.5878005115037175, -0.5878005115037175],
            ],
        ),
        (
            "Propello Octahedron vertices",
            [
                [0.0, 0.0, 1.0723588205355954],
                [0.0, 0.0, -1.0723588205355954],
                [1.0723588205355954, 0.0, 0.0],
                [-1.0723588205355954, 0.0, 0.0],
                [0.0, 1.0723588205355954, 0.0],
                [0.0, -1.0723588205355954, 0.0],
                [0.5991047193446304, -0.2870438888016061, 0.8151088430284646],
                [0.5991047193446304, 0.2870438888016061, -0.8151088430284646],
                [-0.5991047193446304, 0.2870438888016061, 0.8151088430284646],
                [-0.5991047193446304, -0.2870438888016061, -0.8151088430284646],
                [0.8151088430284646, -0.5991047193446304, 0.2870438888016061],
                [0.8151088430284646, 0.5991047193446304, -0.2870438888016061],
                [-0.8151088430284646, 0.5991047193446304, 0.2870438888016061],
                [-0.8151088430284646, -0.5991047193446304, -0.2870438888016061],
                [0.2870438888016061, -0.8151088430284646, 0.5991047193446304],
                [0.2870438888016061, 0.8151088430284646, -0.5991047193446304],
                [-0.2870438888016061, 0.8151088430284646, 0.5991047193446304],
                [-0.2870438888016061, -0.8151088430284646, -0.5991047193446304],
                [0.2870438888016061, 0.5991047193446304, 0.8151088430284646],
                [0.2870438888016061, -0.5991047193446304, -0.8151088430284646],
                [-0.2870438888016061, -0.5991047193446304, 0.8151088430284646],
                [-0.2870438888016061, 0.5991047193446304, -0.8151088430284646],
                [0.8151088430284646, 0.2870438888016061, 0.5991047193446304],
                [0.8151088430284646, -0.2870438888016061, -0.5991047193446304],
                [-0.8151088430284646, -0.2870438888016061, 0.5991047193446304],
                [-0.8151088430284646, 0.2870438888016061, -0.5991047193446304],
                [0.5991047193446304, 0.8151088430284646, 0.2870438888016061],
                [0.5991047193446304, -0.8151088430284646, -0.2870438888016061],
                [-0.5991047193446304, -0.8151088430284646, 0.2870438888016061],
                [-0.5991047193446304, 0.8151088430284646, -0.2870438888016061],
            ],
        ),
    ],
    "Oh": ["PlatonicFamily.Octahedron", "PlatonicFamily.Cube"],
    "I": [
        "ArchimedeanFamily.Snub Icosidodecahedron",
        "CatalanFamily.Pentagonal Hexecontahedron",
        (
            "Propello Dodecahedron vertices",
            [
                [0.1951284563056969, -0.10070091801974525, 1.0],
                [0.1951284563056969, 0.10070091801974525, -1.0],
                [-0.1951284563056969, 0.10070091801974525, 1.0],
                [-0.1951284563056969, -0.10070091801974525, -1.0],
                [1.0, -0.1951284563056969, 0.10070091801974525],
                [1.0, 0.1951284563056969, -0.10070091801974525],
                [-1.0, 0.1951284563056969, 0.10070091801974525],
                [-1.0, -0.1951284563056969, -0.10070091801974525],
                [0.10070091801974525, -1.0, 0.1951284563056969],
                [0.10070091801974525, 1.0, -0.1951284563056969],
                [-0.10070091801974525, 1.0, 0.1951284563056969],
                [-0.10070091801974525, -1.0, -0.1951284563056969],
                [0.0, 0.3589611999956875, 0.9397726222311584],
                [0.0, 0.3589611999956875, -0.9397726222311584],
                [0.0, -0.3589611999956875, 0.9397726222311584],
                [0.0, -0.3589611999956875, -0.9397726222311584],
                [0.9397726222311584, 0.0, 0.3589611999956875],
                [0.9397726222311584, 0.0, -0.3589611999956875],
                [-0.9397726222311584, 0.0, 0.3589611999956875],
                [-0.9397726222311584, 0.0, -0.3589611999956875],
                [0.3589611999956875, 0.9397726222311584, 0.0],
                [0.3589611999956875, -0.9397726222311584, 0.0],
                [-0.3589611999956875, 0.9397726222311584, 0.0],
                [-0.3589611999956875, -0.9397726222311584, 0.0],
                [0.3251124685006636, 0.31101946774528216, 0.9196654624694297],
                [0.3251124685006636, -0.31101946774528216, -0.9196654624694297],
                [-0.3251124685006636, -0.31101946774528216, 0.9196654624694297],
                [-0.3251124685006636, 0.31101946774528216, -0.9196654624694297],
                [0.9196654624694297, 0.3251124685006636, 0.31101946774528216],
                [0.9196654624694297, -0.3251124685006636, -0.31101946774528216],
                [-0.9196654624694297, -0.3251124685006636, 0.31101946774528216],
                [-0.9196654624694297, 0.3251124685006636, -0.31101946774528216],
                [0.31101946774528216, 0.9196654624694297, 0.3251124685006636],
                [0.31101946774528216, -0.9196654624694297, -0.3251124685006636],
                [-0.31101946774528216, -0.9196654624694297, 0.3251124685006636],
                [-0.31101946774528216, 0.9196654624694297, -0.3251124685006636],
                [0.48804997655492816, -0.37325605777980153, 0.8189645444496845],
                [0.48804997655492816, 0.37325605777980153, -0.8189645444496845],
                [-0.48804997655492816, 0.37325605777980153, 0.8189645444496845],
                [-0.48804997655492816, -0.37325605777980153, -0.8189645444496845],
                [0.8189645444496845, -0.48804997655492816, 0.37325605777980153],
                [0.8189645444496845, 0.48804997655492816, -0.37325605777980153],
                [-0.8189645444496845, 0.48804997655492816, 0.37325605777980153],
                [-0.8189645444496845, -0.48804997655492816, -0.37325605777980153],
                [0.37325605777980153, -0.8189645444496845, 0.48804997655492816],
                [0.37325605777980153, 0.8189645444496845, -0.48804997655492816],
                [-0.37325605777980153, 0.8189645444496845, 0.48804997655492816],
                [-0.37325605777980153, -0.8189645444496845, -0.48804997655492816],
                [0.1299840121949667, -0.6267439422201985, 0.7990694443002103],
                [0.1299840121949667, 0.6267439422201985, -0.7990694443002103],
                [-0.1299840121949667, 0.6267439422201985, 0.7990694443002103],
                [-0.1299840121949667, -0.6267439422201985, -0.7990694443002103],
                [0.7990694443002103, -0.1299840121949667, 0.6267439422201985],
                [0.7990694443002103, 0.1299840121949667, -0.6267439422201985],
                [-0.7990694443002103, 0.1299840121949667, 0.6267439422201985],
                [-0.7990694443002103, -0.1299840121949667, -0.6267439422201985],
                [0.6267439422201985, -0.7990694443002103, 0.1299840121949667],
                [0.6267439422201985, 0.7990694443002103, -0.1299840121949667],
                [-0.6267439422201985, 0.7990694443002103, 0.1299840121949667],
                [-0.6267439422201985, -0.7990694443002103, -0.1299840121949667],
                [0.29292152024923124, 0.6889805322547178, 0.6983685262804651],
                [0.29292152024923124, -0.6889805322547178, -0.6983685262804651],
                [-0.29292152024923124, -0.6889805322547178, 0.6983685262804651],
                [-0.29292152024923124, 0.6889805322547178, -0.6983685262804651],
                [0.6983685262804651, 0.29292152024923124, 0.6889805322547178],
                [0.6983685262804651, -0.29292152024923124, -0.6889805322547178],
                [-0.6983685262804651, -0.29292152024923124, 0.6889805322547178],
                [-0.6983685262804651, 0.29292152024923124, -0.6889805322547178],
                [0.6889805322547178, 0.6983685262804651, 0.29292152024923124],
                [0.6889805322547178, -0.6983685262804651, -0.29292152024923124],
                [-0.6889805322547178, -0.6983685262804651, 0.29292152024923124],
                [-0.6889805322547178, 0.6983685262804651, -0.29292152024923124],
                [0.5808114222354709, 0.5808114222354709, 0.5808114222354709],
                [0.5808114222354709, 0.5808114222354709, -0.5808114222354709],
                [0.5808114222354709, -0.5808114222354709, 0.5808114222354709],
                [0.5808114222354709, -0.5808114222354709, -0.5808114222354709],
                [-0.5808114222354709, 0.5808114222354709, 0.5808114222354709],
                [-0.5808114222354709, 0.5808114222354709, -0.5808114222354709],
                [-0.5808114222354709, -0.5808114222354709, 0.5808114222354709],
                [-0.5808114222354709, -0.5808114222354709, -0.5808114222354709],
            ],
        ),
        (
            "Propello Icosahedron vertices",
            [
                [0.08658831082961818, 0.16778241706782004, 1.0],
                [0.08658831082961818, -0.16778241706782004, -1.0],
                [-0.08658831082961818, -0.16778241706782004, 1.0],
                [-0.08658831082961818, 0.16778241706782004, -1.0],
                [1.0, 0.08658831082961818, 0.16778241706782004],
                [1.0, -0.08658831082961818, -0.16778241706782004],
                [-1.0, -0.08658831082961818, 0.16778241706782004],
                [-1.0, 0.08658831082961818, -0.16778241706782004],
                [0.16778241706782004, 1.0, 0.08658831082961818],
                [0.16778241706782004, -1.0, -0.08658831082961818],
                [-0.16778241706782004, -1.0, 0.08658831082961818],
                [-0.16778241706782004, 1.0, -0.08658831082961818],
                [0.21657232302458487, -0.378100966793357, 0.9196654624694297],
                [0.21657232302458487, 0.378100966793357, -0.9196654624694297],
                [-0.21657232302458487, 0.378100966793357, 0.9196654624694297],
                [-0.21657232302458487, -0.378100966793357, -0.9196654624694297],
                [0.9196654624694297, -0.21657232302458487, 0.378100966793357],
                [0.9196654624694297, 0.21657232302458487, -0.378100966793357],
                [-0.9196654624694297, 0.21657232302458487, 0.378100966793357],
                [-0.9196654624694297, -0.21657232302458487, -0.378100966793357],
                [0.378100966793357, -0.9196654624694297, 0.21657232302458487],
                [0.378100966793357, 0.9196654624694297, -0.21657232302458487],
                [-0.378100966793357, 0.9196654624694297, 0.21657232302458487],
                [-0.378100966793357, -0.9196654624694297, -0.21657232302458487],
                [0.5515225636439541, 0.0, 0.8923822535383947],
                [0.5515225636439541, 0.0, -0.8923822535383947],
                [-0.5515225636439541, 0.0, 0.8923822535383947],
                [-0.5515225636439541, 0.0, -0.8923822535383947],
                [0.8923822535383947, 0.5515225636439541, 0.0],
                [0.8923822535383947, -0.5515225636439541, 0.0],
                [-0.8923822535383947, 0.5515225636439541, 0.0],
                [-0.8923822535383947, -0.5515225636439541, 0.0],
                [0.0, 0.8923822535383947, 0.5515225636439541],
                [0.0, 0.8923822535383947, -0.5515225636439541],
                [0.0, -0.8923822535383947, 0.5515225636439541],
                [0.0, -0.8923822535383947, -0.5515225636439541],
                [0.1299840121949667, 0.5182037967441198, 0.8661509433482851],
                [0.1299840121949667, -0.5182037967441198, -0.8661509433482851],
                [-0.1299840121949667, -0.5182037967441198, 0.8661509433482851],
                [-0.1299840121949667, 0.5182037967441198, -0.8661509433482851],
                [0.8661509433482851, 0.1299840121949667, 0.5182037967441198],
                [0.8661509433482851, -0.1299840121949667, -0.5182037967441198],
                [-0.8661509433482851, -0.1299840121949667, 0.5182037967441198],
                [-0.8661509433482851, 0.1299840121949667, -0.5182037967441198],
                [0.5182037967441198, 0.8661509433482851, 0.1299840121949667],
                [0.5182037967441198, -0.8661509433482851, -0.1299840121949667],
                [-0.5182037967441198, -0.8661509433482851, 0.1299840121949667],
                [-0.5182037967441198, 0.8661509433482851, -0.1299840121949667],
                [0.48804997655492816, 0.48179620325588024, 0.7518830454016098],
                [0.48804997655492816, -0.48179620325588024, -0.7518830454016098],
                [-0.48804997655492816, -0.48179620325588024, 0.7518830454016098],
                [-0.48804997655492816, 0.48179620325588024, -0.7518830454016098],
                [0.7518830454016098, 0.48804997655492816, 0.48179620325588024],
                [0.7518830454016098, -0.48804997655492816, -0.48179620325588024],
                [-0.7518830454016098, -0.48804997655492816, 0.48179620325588024],
                [-0.7518830454016098, 0.48804997655492816, -0.48179620325588024],
                [0.48179620325588024, 0.7518830454016098, 0.48804997655492816],
                [0.48179620325588024, -0.7518830454016098, -0.48804997655492816],
                [-0.48179620325588024, -0.7518830454016098, 0.48804997655492816],
                [-0.48179620325588024, 0.7518830454016098, -0.48804997655492816],
                [0.40146166572531, -0.6218990332066431, 0.6983685262804651],
                [0.40146166572531, 0.6218990332066431, -0.6983685262804651],
                [-0.40146166572531, 0.6218990332066431, 0.6983685262804651],
                [-0.40146166572531, -0.6218990332066431, -0.6983685262804651],
                [0.6983685262804651, -0.40146166572531, 0.6218990332066431],
                [0.6983685262804651, 0.40146166572531, -0.6218990332066431],
                [-0.6983685262804651, 0.40146166572531, 0.6218990332066431],
                [-0.6983685262804651, -0.40146166572531, -0.6218990332066431],
                [0.6218990332066431, -0.6983685262804651, 0.40146166572531],
                [0.6218990332066431, 0.6983685262804651, -0.40146166572531],
                [-0.6218990332066431, 0.6983685262804651, 0.40146166572531],
                [-0.6218990332066431, -0.6983685262804651, -0.40146166572531],
            ],
        ),
    ],
    "Ih": ["PlatonicFamily.Icosahedron", "PlatonicFamily.Dodecahedron"],
}
shape_symmetries.update({f"C{n}v": [get_pyramid(n)] for n in range(4, 8)})
shape_symmetries.update(
    {
        f"D{n}h": [get_bipyramid(n), f"PrismAntiprismFamily.{n_dict[n]} Prism"]
        for n in range(3, 7)
    }
)

cutoff = 0.99

rng = np.random.default_rng(seed=42)

methods_dict = {}

# n_axes must be at least 50 for Dnh to work correctly. Further increases bring Dnd
# close to one as well.
optimizer = spatula.optimize.Union.with_step_gradient_descent(
    spatula.optimize.Mesh.from_grid()
)


def get_shape_sys_nlist(vertices):
    """Get a neighbor list of a shape.

    The neighbor list has a single point with all vertices as neighbors.
    """
    l = 100
    box = freud.Box.cube(l)
    system = (box, vertices)
    neighbor_query = freud.locality.AABBQuery.from_system(system)
    query_point = np.zeros((1, 3))
    nlist = neighbor_query.query(
        query_point, {"mode": "ball", "r_max": l * 0.4999}
    ).toNeighborList()
    return system, nlist


def make_compute_object(symmetries, optimizer, optype):
    if optype == "boosop":
        return spatula.BOOSOP("fisher", symmetries, optimizer)
    elif optype == "full":
        return spatula.PGOP(symmetries, optimizer)
    elif optype == "boo":
        return spatula.PGOP(symmetries, optimizer, mode="boo")
    else:
        raise ValueError(f"Invalid optype {optype}")


def make_method(symmetries, optimizer, optype):
    if isinstance(symmetries, str):
        symmetry = symmetries[0]
    else:
        return make_compute_object(symmetries, optimizer, optype)
    if symmetry not in methods_dict:
        methods_dict[symmetry] = {}
    if optype not in methods_dict[symmetry]:
        methods_dict[symmetry][optype] = {}
    if optimizer.__hash__() not in methods_dict[symmetry][optype]:
        methods_dict[symmetry][optype][optimizer.__hash__()] = make_compute_object(
            symmetries, optimizer, optype
        )
    return methods_dict[symmetry][optype][optimizer.__hash__()]


def generate_quaternions(n=1):
    """Generate `n` random quaternions]."""
    rotations = [scipy.spatial.transform.Rotation([1, 0, 0, 0]).as_quat()]
    for _ in range(n):
        rotations.append(
            scipy.spatial.transform.Rotation.random(random_state=rng).as_quat()
        )
    return rotations


def compute_op_result(
    symmetry, opt, optyp, system, nlist, sigma=None, query_points=None, failed=False
):
    if failed:
        op_compute = make_compute_object(symmetry, opt, optyp)
    else:
        op_compute = make_method(symmetry, opt, optyp)
    if optyp == "boosop":
        op_compute.compute(system, nlist, query_points=query_points)
    elif optyp == "full" or optyp == "boo":
        op_compute.compute(system, sigma, nlist, query_points=query_points)
    return op_compute


def compute_pgop_polyhedron(
    symmetry, vertices, optype, sigma=None, cutoff_operator=">", cutoff_value=cutoff
):
    """Determine whether given shape have a specified symmetry.

    Parameters
    ----------
    symmetry: str
        The symmetry to test for.
    vertices: :math:`(N, 3)` numpy.ndarray of floats
        The vertices of the shape
    optype: str
        The type of order parameter to compute. boosop or fpgop or opgop.
    """
    vertices = np.asarray(vertices)
    system, nlist = get_shape_sys_nlist(vertices)
    op_compute = compute_op_result(
        symmetry, optimizer, optype, system, nlist, sigma, query_points=np.zeros((1, 3))
    )
    if (
        ">" in cutoff_operator
        and op_compute.order[0] < cutoff_value
        or "<" in cutoff_operator
        and op_compute.order[0] > cutoff_value
    ):
        print(f"Used higher precision, lower precision value {op_compute.order[0]}")
        new_optimizer = spatula.optimize.Union.with_step_gradient_descent(
            spatula.optimize.RandomSearch(max_iter=10000, seed=rng.integers(0, 1000000))
        )
        op_compute = compute_op_result(
            symmetry,
            new_optimizer,
            optype,
            system,
            nlist,
            sigma,
            query_points=np.zeros((1, 3)),
            failed=True,
        )
    return op_compute


modedict_types = ["full", "boo", "boosop"]
crystal_systems = ["sc", "fcc", "bcc"]
crystal_sizes = {"sc": 3, "fcc": 2, "bcc": 2}
crystal_cutoffs = {"sc": 1.1, "fcc": 0.9, "bcc": 0.9}
crystals_dict = {
    "sc": freud.data.UnitCell.sc().generate_system(crystal_sizes["sc"]),
    "fcc": freud.data.UnitCell.fcc().generate_system(crystal_sizes["fcc"]),
    "bcc": freud.data.UnitCell.bcc().generate_system(crystal_sizes["bcc"]),
}


def compute_pgop_check_all_order_values(
    system, symmetry, mode, nlist, sigma=None, qp=None, value=1.0, rtol=1e-4
):
    op_pg = compute_op_result(symmetry, optimizer, mode, system, nlist, sigma, qp)
    if not np.allclose(op_pg.order, value, rtol=rtol):
        print("Used higher precision, lower precision value", op_pg.order)
        new_optimizer = spatula.optimize.Union.with_step_gradient_descent(
            spatula.optimize.RandomSearch(max_iter=10000, seed=rng.integers(0, 1000000))
        )
        op_pg = compute_op_result(
            symmetry, new_optimizer, mode, system, nlist, sigma, qp, True
        )
    return op_pg


def compute_pgop_crystal(crystal_type, symmetry, mode, nlist, sigma=None, qp=None):
    system = crystals_dict[crystal_type]
    return compute_pgop_check_all_order_values(system, symmetry, mode, nlist, sigma, qp)


# Define a parameter for different unit cells and corresponding parameters
@pytest.mark.parametrize("crystal_type", crystal_systems)
@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.flaky(reruns=reruns)
def test_simple_crystals(crystal_type, mode):
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs[crystal_type]}
    op_pg = compute_pgop_crystal(crystal_type, ["Oh"], mode, qargs, None)
    assert np.allclose(op_pg.order, 1.0, rtol=1e-4)


@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.flaky(reruns=reruns)
def test_qargs_query_pt(mode):
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["sc"]}
    _, points = crystals_dict["sc"]
    op_pg = compute_pgop_crystal(
        "sc", ["Oh"], mode, qargs, None, qp=np.asarray([points[0]])
    )
    assert np.allclose(op_pg.order, 1.0, rtol=1e-4)


@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.flaky(reruns=reruns)
def test_neighbor_list_query_pt(mode):
    box, points = crystals_dict["sc"]
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["sc"]}
    qp = np.asarray([points[0]])
    neighborlist = (
        freud.locality.AABBQuery(box, points).query(qp, qargs).toNeighborList()
    )
    op_pg = compute_pgop_crystal("sc", ["Oh"], mode, neighborlist, None, qp)
    assert np.allclose(op_pg.order, 1.0, rtol=1e-4)


@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.flaky(reruns=reruns)
def test_neighbor_list_only(mode):
    box, points = crystals_dict["sc"]
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["sc"]}
    neighborlist = (
        freud.locality.AABBQuery(box, points).query(points, qargs).toNeighborList()
    )
    op_pg = compute_pgop_crystal("sc", ["Oh"], mode, neighborlist, None)
    assert np.allclose(op_pg.order, 1.0, rtol=1e-4)


@pytest.mark.parametrize("mode", ["full", "boo"])
@pytest.mark.parametrize("sigma", [0.2, [0.2] * (3 * 3 * 3)])
@pytest.mark.flaky(reruns=reruns)
def test_sigma_inputs(mode, sigma):
    box, points = crystals_dict["sc"]
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["sc"]}
    neighborlist = (
        freud.locality.AABBQuery(box, points).query(points, qargs).toNeighborList()
    )
    op_pg = compute_pgop_crystal("sc", ["Oh"], mode, neighborlist, sigma)
    assert np.allclose(op_pg.order, 1.0, rtol=1e-4)


modes = ["full", "boo", "boosop"]
sigma_values = {
    "full": 0.2,
    "boo": 19.55,
}


@pytest.mark.parametrize("mode", modes)
@pytest.mark.flaky(reruns=reruns)
def test_bcc_with_multiple_correct_symmetries(mode):
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["bcc"]}
    correct_symmetries = ["Oh", "D2", "D4"]
    op_pg = compute_pgop_crystal("bcc", correct_symmetries, mode, qargs, None)
    assert np.allclose(op_pg.order, 1.0, atol=1e-4)


@pytest.mark.parametrize("mode", modes)
@pytest.mark.flaky(reruns=reruns)
def test_bcc_with_multiple_incorrect_symmetries(mode):
    cutoff = 0.8
    box, points = crystals_dict["bcc"]
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["bcc"]}
    incorrect_symmetries = ["Oh", "D3h"]
    sigs = sigma_values[mode] if mode != "boosop" else None
    op_pg = compute_op_result(
        incorrect_symmetries, optimizer, mode, (box, points), qargs, sigs
    )
    assert np.all(op_pg.order[:, 1] < cutoff)
    assert np.allclose(op_pg.order[:, 0], 1.0, rtol=1e-4)


def test_bcc_with_multiple_incorrect_symmetries_operator_calc():
    box, points = crystals_dict["bcc"]
    qargs = {"exclude_ii": True, "mode": "ball", "r_max": crystal_cutoffs["bcc"]}
    correct_symmetries = ["Oh", "D3h"]
    # these two contain identity, but PGOP ignores identity and doesn't count it!!!
    lenohsym = len(
        spatula.representations.CartesianRepMatrix(correct_symmetries[0]).matrices
    )
    lend3hsym = len(
        spatula.representations.CartesianRepMatrix(correct_symmetries[1]).matrices
    )
    op_pg = spatula.PGOP(
        correct_symmetries,
        optimizer,
        mode="full",
        compute_per_operator_values_for_final_orientation=True,
    )
    op_pg.compute((box, points), None, qargs)
    # PGOP ignores identity and doesn't count it, so you have N less symmetry ops!!!
    assert np.asarray(op_pg.order).shape == (len(points), lenohsym + lend3hsym)
    assert np.allclose(op_pg.order[:, 0:lenohsym], 1.0, atol=1e-4)
    assert not np.allclose(op_pg.order[:, lenohsym:], 1.0, atol=1e-4)
    # PGOP ignores identity and doesn't count it, so you have N less symmetry ops!!!
    assert np.asarray(op_pg.rotations).shape == (
        len(points),
        lenohsym + lend3hsym,
        4,
    )


symmetries_subgroup_d5d = ["D5d", "S10", "C2h", "C5v", "D5", "C5", "C2", "Ci", "Cs"]
n_values = [1, 2, 3, 4, 5, 6, 7, 8, 9]
vertices_multisim = np.asarray(
    [
        [0.6180339887498949, 0.0, 1.0],
        [0.6180339887498949, 0.0, -1.0],
        [-0.6180339887498949, 0.0, 1.0],
        [-0.6180339887498949, 0.0, -1.0],
        [0.0, 1.0, 0.6180339887498949],
        [0.0, 1.0, -0.6180339887498949],
        [0.0, -1.0, 0.6180339887498949],
        [0.0, -1.0, -0.6180339887498949],
        [1.0, 0.6180339887498949, 0.0],
        [-1.0, -0.6180339887498949, 0.0],
    ]
)


@pytest.mark.parametrize("n, mode", [(n, mode) for n in n_values for mode in modes])
@pytest.mark.flaky(reruns=reruns)
def test_increasing_number_of_symmetries(n, mode):
    symmetries_to_compute = []
    for sym in symmetries_subgroup_d5d[:n]:
        symmetries_to_compute.append(sym)
    system, nlist = get_shape_sys_nlist(vertices_multisim)
    op = compute_pgop_check_all_order_values(
        system, symmetries_to_compute, mode, nlist, None, qp=np.zeros((1, 3))
    )
    assert len(op.symmetries) == n
    assert len(op.order[0]) == n
    assert len(op.rotations[0]) == n
    assert np.allclose(op.order, 1.0, rtol=1e-4)


# propello tetrahedron vertices
vertices_for_testing = np.asarray(
    [
        [0.5097553324933856, 0.13968058199610653, 1.0],
        [0.5097553324933856, -0.13968058199610653, -1.0],
        [-0.5097553324933856, -0.13968058199610653, 1.0],
        [-0.5097553324933856, 0.13968058199610653, -1.0],
        [1.0, 0.5097553324933856, 0.13968058199610653],
        [1.0, -0.5097553324933856, -0.13968058199610653],
        [-1.0, -0.5097553324933856, 0.13968058199610653],
        [-1.0, 0.5097553324933856, -0.13968058199610653],
        [0.13968058199610653, 1.0, 0.5097553324933856],
        [0.13968058199610653, -1.0, -0.5097553324933856],
        [-0.13968058199610653, -1.0, 0.5097553324933856],
        [-0.13968058199610653, 1.0, -0.5097553324933856],
        [0.6062678708614785, -0.6062678708614785, 0.6062678708614785],
        [0.6062678708614785, 0.6062678708614785, -0.6062678708614785],
        [-0.6062678708614785, 0.6062678708614785, 0.6062678708614785],
        [-0.6062678708614785, -0.6062678708614785, -0.6062678708614785],
    ]
)


@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.parametrize("symmetries", [["T"], ["T", "Th"]])
@pytest.mark.flaky(reruns=reruns)
def test_orientations(mode, symmetries):
    # random orientation
    rot = scipy.spatial.transform.Rotation.random(random_state=rng)
    # compute new vertices
    rotated_vertices = rot.apply(vertices_for_testing)
    system, nlist = get_shape_sys_nlist(rotated_vertices)
    op_opt = compute_op_result(
        symmetries, optimizer, mode, system, nlist, None, np.zeros((1, 3))
    )
    #   op_opt.rotations is something like [w, x, y, z].
    for cxx_q, symmetry, order in zip(op_opt.rotations[0], symmetries, op_opt.order[0]):
        # Reorder it to [x, y, z, w] to use in SciPy
        scipy_q = np.array([cxx_q[1], cxx_q[2], cxx_q[3], cxx_q[0]])
        optimal_rotation = scipy.spatial.transform.Rotation.from_quat(scipy_q)
        re_rotated_vertices = optimal_rotation.apply(rotated_vertices)
        system, nlist = get_shape_sys_nlist(re_rotated_vertices)
        norot = spatula.optimize.NoOptimization()
        op_no_opt = compute_op_result(
            [symmetry], norot, mode, system, nlist, None, np.zeros((1, 3))
        )
        assert np.allclose(order, op_no_opt.order[0], rtol=1e-4)


optimizers_to_test = [
    (
        "Union_descent_random",
        spatula.optimize.Union.with_step_gradient_descent(
            spatula.optimize.RandomSearch(max_iter=10000, seed=rng.integers(0, 1000000))
        ),
    ),
    (
        "Union_descent_Mesh",
        spatula.optimize.Union.with_step_gradient_descent(
            spatula.optimize.Mesh.from_grid()
        ),
    ),
    ("Descent", spatula.optimize.StepGradientDescent()),
    (
        "Random",
        "RandomSearch",
    ),
    ("Mesh", spatula.optimize.Mesh([[1, 0, 0, 0]])),
    ("Mesh", spatula.optimize.Mesh([[0, 0, 0, 1]])),
    ("NoOptimization", spatula.optimize.NoOptimization()),
]


# parametrize over all optimizers and all modes
@pytest.mark.parametrize(
    "optim_name, optim",
    optimizers_to_test,
    ids=[name for name, _ in optimizers_to_test],
)
@pytest.mark.parametrize("mode", modedict_types)
@pytest.mark.flaky(reruns=reruns)
def test_optimization_classes(optim_name, optim, mode):
    # this is so that rerun gets a new random seed
    if "Random" in optim_name:
        optim = spatula.optimize.RandomSearch(
            max_iter=10000, seed=rng.integers(0, 100000)
        )
    system, nlist = get_shape_sys_nlist(vertices_for_testing)
    op = compute_op_result(["T"], optim, mode, system, nlist, None, np.zeros((1, 3)))
    print(op.order)
    assert op.order[0] > cutoff


@pytest.mark.pg_first_only
@pytest.mark.parametrize(
    "symmetry, shape, vertices, quaternion, mode",
    (
        (sym, shape, vertices, quat, mode)
        for sym, shapes in shape_symmetries.items()
        for shape, vertices in map(parse_shape_values, shapes)
        for quat in generate_quaternions()
        for mode in modedict_types
    ),
    ids=_id_func,
)
@pytest.mark.flaky(reruns=reruns)
def test_symmetries_polyhedra(symmetry, shape, vertices, quaternion, mode):
    rotation = scipy.spatial.transform.Rotation.from_quat(quaternion)
    rotated_vertices = rotation.apply(vertices)
    op = compute_pgop_polyhedron(
        symmetry=[symmetry], vertices=rotated_vertices, optype=mode
    )
    assert op.order[0] >= cutoff


@pytest.mark.pg_first_only
# Move shape vertices along their bond vector away or towards the center
# and compute bosoop and pgop. Boosop should be still be 1 but pgop should be smaller!
@pytest.mark.parametrize(
    "symmetry, shape, vertices",
    (
        (sym, shape, vertices)
        for sym, shapes in shape_symmetries.items()
        for shape, vertices in map(parse_shape_values, shapes)
    ),
    ids=_id_func,
)
@pytest.mark.flaky(reruns=reruns)
def test_radially_imperfect_symmetry_polyhedra(symmetry, shape, vertices):
    vertices = np.asarray(vertices)
    # randomly scale the distance of a random set of vertices for a number between 1.01
    # and 2
    scale = rng.uniform(0.5, 2, len(vertices))
    new_vertices = []
    for point, sc in zip(vertices, scale):
        new_vertices.append(point * sc)
    new_vertices = np.asarray(new_vertices)
    boosop_compute = compute_pgop_polyhedron(
        [symmetry], new_vertices, "boosop", None, ">", cutoff
    )
    opgop_compute = compute_pgop_polyhedron(
        [symmetry], new_vertices, "boo", None, ">", cutoff
    )
    fpgop_compute = compute_pgop_polyhedron(
        [symmetry], new_vertices, "full", None, ">", cutoff
    )
    if symmetry == "C1":
        assert np.allclose(boosop_compute.order[0], fpgop_compute.order[0], rtol=1e-4)
        assert np.allclose(boosop_compute.order[0], opgop_compute.order[0], rtol=1e-4)
        assert np.allclose(fpgop_compute.order[0], opgop_compute.order[0], rtol=1e-4)
    else:
        assert boosop_compute.order[0] > fpgop_compute.order[0]
        assert opgop_compute.order[0] > fpgop_compute.order[0]
    assert np.round(boosop_compute.order[0], 4) >= cutoff
    assert np.round(opgop_compute.order[0], 4) >= cutoff
    assert np.round(fpgop_compute.order[0], 4) <= 1
    assert np.round(boosop_compute.order[0], 4) <= 1
    assert np.round(opgop_compute.order[0], 4) <= 1


non_shape_symmetries = {
    "O": ["PlatonicFamily.Tetrahedron", "PlatonicFamily.Icosahedron"],
    "Oh": ["PlatonicFamily.Tetrahedron", "PlatonicFamily.Icosahedron"],
    "T": [get_pyramid(5), get_bipyramid(5)],
    "I": ["PlatonicFamily.Octahedron"],
    "Ih": ["PlatonicFamily.Octahedron"],
}
# Symmetries are carefully chosen here as due to rotations and partial ordering
# meeting the threshold can be difficult here.
cyclic_non_symmetry = {
    2: 3,
    3: 4,
    4: 5,
    5: 3,
    6: 3,
    7: 4,
    8: 3,
    9: 4,
    10: 4,
    11: 5,
    12: 5,
}
non_shape_symmetries.update(
    {f"C{i}": [f"RegularNGonFamily.{cyclic_non_symmetry[i]}"] for i in range(3, 13)}
)
non_shape_symmetries.update({f"D{i}": [get_pyramid(i)] for i in range(3, 13)})

cutin = 0.92


@pytest.mark.parametrize(
    "symmetry, shape, vertices, optype",
    (
        (sym, shape, vertices, optype)
        for sym, shapes in non_shape_symmetries.items()
        for shape, vertices in map(parse_shape_values, shapes)
        for optype in ["boosop", "full", "boo"]
    ),
    ids=_id_func,
)
@pytest.mark.flaky(reruns=reruns)
def test_no_symmetries(symmetry, shape, vertices, optype):
    op = compute_pgop_polyhedron(
        symmetry=[symmetry],
        vertices=vertices,
        optype=optype,
        sigma=None,
        cutoff_operator="<",
        cutoff_value=cutin,
    )
    assert op.order[0] < cutin
