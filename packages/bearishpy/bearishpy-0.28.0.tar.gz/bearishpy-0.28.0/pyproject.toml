[tool.poetry]
name = "bearishpy"
version = "0.28.0"
description = ""
authors = ["aan <andoludovic.andriamamonjy@gmail.com>"]
readme = "README.md"
packages = [{ include = "bearish" }]
[tool.poetry.dependencies]
python = ">=3.11,<3.13"
pandas = "^2.1.4"
pydantic = "^2.5.3"
unidecode = "^1.3.8"
html5lib = "^1.1"
typeguard = "^4.1.5"
alembic = "^1.14.0"
sqlmodel = "^0.0.22"
python-dotenv = "^1.0.1"
yfinance = "^0.2.66"
typer = "^0.13.1"
tenacity = "^9.0.0"


setuptools = "^78.1.0"
numpy = "^2.3.4"
yahooquery = "^2.4.1"
sec-edgar-downloader = "^5.0.3"



[tool.poetry.scripts]
bearish = "bearish.main:app"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
mypy = "^1.8.0"
nox = "^2023.4.22"
ruff = "*"
pre-commit = "^3.6.2"
pandas-stubs = "^2.2.0.240218"
types-simplejson = "^3.19.0.20240218"
types-beautifulsoup4 = "^4.12.0.20240229"
pytest-mongo = "^3.1.0"
requests-mock = "^1.12.1"
black = "^24.10.0"
pytest-order = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
plugins = "pydantic.mypy"
packages= "bearish"

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
show_absolute_path = true
# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true
strict = true
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

exclude = [
    "test_*",
    "conftest.py",
]


[tool.ruff]
line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "test_*",
    "conftest.py",
    "bearish/database/alembic/*",
]

[tool.isort]
skip = ["models"]

[tool.ruff.lint]
select = ["E", "W", "F", "B006","RUF","UP","SIM","FURB","PIE","PERF","C4","B","PL","S","C901","N","ANN", "ERA001", "PD"]
ignore = []
extend-ignore = ["ANN101","ANN102","UP006","UP035","S608","W291","ANN401", "N801"]

fixable = ["ALL"]
unfixable = []
