name: LANraragi Client Tests

on:
  pull_request:
    branches: 
      - main
      - 'dev-*/main'
  push:
    branches: 
      - main
  schedule:
    - cron: '0 0 * * 4' # Run tests on main branch every Thursday at 00:00
  workflow_call:

jobs:

  tests-ubuntu:
    name: Tests (Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install main package (aio-lanraragi)
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run unit tests
        run: |
          pytest tests --log-cli-level=INFO \
            tests/
          
      - name: Move to integration_tests and install test library
        run: |
          cd integration_tests
          pip install .
          
      - name: Run integration tests
        run: |
          cd integration_tests
          export CI=true
          pytest tests --log-cli-level=INFO \
            --git-url=https://github.com/difegue/LANraragi.git \
            --git-branch=dev \
            --docker-api \
            --npseed 42
        env:
          # Ensure Docker daemon is accessible to Python docker SDK
          DOCKER_HOST: unix:///var/run/docker.sock

  # windows integration tests
  # refer to https://github.com/Difegue/LANraragi/blob/dev/.github/workflows/push-continous-delivery.yml
  tests-windows:
    name: Tests (Windows)
    runs-on: windows-2025
    timeout-minutes: 60

    permissions:
      contents: read
      packages: read
      
    steps:

      - name: Checkout aio-lanraragi
        uses: actions/checkout@v4
        with:
          path: aio-lanraragi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install main package (aio-lanraragi)
        working-directory: aio-lanraragi
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run unit tests
        working-directory: aio-lanraragi
        run: |
          pytest tests --log-cli-level=INFO `
            tests\

      - name: Get windist cache key
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          $sha = gh api repos/difegue/LANraragi/branches/dev --jq '.commit.sha'
          "WINDIST_KEY=windist-${{ runner.os }}-$sha" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore windist cache
        id: cache-windist
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}\windist\win-dist.zip
          key: ${{ env.WINDIST_KEY }}

      - name: Unzip windist from cache
        if: steps.cache-windist.outputs.cache-hit == 'true'
        shell: pwsh
        run: |
          $dest = Join-Path $env:GITHUB_WORKSPACE "LANraragi\win-dist"
          New-Item -ItemType Directory -Path $dest -Force | Out-Null
          $zip = Join-Path $env:GITHUB_WORKSPACE "windist\win-dist.zip"
          Expand-Archive -Path $zip -DestinationPath $dest -Force

      - name: Checkout LANraragi repository
        if: steps.cache-windist.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: difegue/LANraragi
          ref: dev
          submodules: true
          path: LANraragi

      - name: Setup MSYS2 UCRT64
        if: steps.cache-windist.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true

      - name: Install deps
        if: steps.cache-windist.outputs.cache-hit != 'true'
        shell: msys2 {0}
        working-directory: LANraragi
        run: |
          ./tools/build/windows/install-deps.sh

      - name: Build
        if: steps.cache-windist.outputs.cache-hit != 'true'
        shell: msys2 {0}
        working-directory: LANraragi
        run: |
          ./tools/build/windows/install.sh
          ./tools/build/windows/cleanup.sh
          ./tools/build/windows/create-dist.sh

      - name: Enable UTF-8
        if: steps.cache-windist.outputs.cache-hit != 'true'
        working-directory: LANraragi
        run: |
          ./tools/build/windows/utf8-support.ps1

      - name: Create windist zip for cache
        if: steps.cache-windist.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $src = Join-Path $env:GITHUB_WORKSPACE "LANraragi\win-dist"
          $dstDir = Join-Path $env:GITHUB_WORKSPACE "windist"
          New-Item -ItemType Directory -Path $dstDir -Force | Out-Null
          $zip = Join-Path $dstDir "win-dist.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path (Join-Path $src '*') -DestinationPath $zip

      - name: Save windist cache
        if: steps.cache-windist.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}\windist\win-dist.zip
          key: ${{ env.WINDIST_KEY }}

      - name: Install test library
        working-directory: aio-lanraragi/integration_tests
        run: |
          pip install .

      - name: Create staging directory
        run: |
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\staging" -Force | Out-Null

      - name: Run integration tests
        working-directory: aio-lanraragi/integration_tests
        timeout-minutes: 30
        run: |
          $env:CI='true'
          pytest tests `
          --log-cli-level=INFO `
          --windist "$env:GITHUB_WORKSPACE\LANraragi\win-dist" `
          --staging "$env:GITHUB_WORKSPACE\staging" `
          --npseed 42

  check:
    if: always()

    needs:
      - tests-ubuntu
      - tests-windows
    runs-on: ubuntu-latest
    steps:
      - name: Check if tests passed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJson(needs) }}