# -*- coding: utf-8 -*-

from imio.schedule.content.object_factories import CreationConditionObject
from imio.schedule.content.object_factories import EndConditionObject
from imio.schedule.content.object_factories import MacroCreationConditionObject
from imio.schedule.content.object_factories import MacroEndConditionObject
from imio.schedule.content.object_factories import MacroRecurrenceConditionObject
from imio.schedule.content.object_factories import MacroStartConditionObject
from imio.schedule.content.object_factories import RecurrenceConditionObject
from imio.schedule.content.object_factories import StartConditionObject

schedule_config = {
    'survey_schedule': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'check_address',
#            'title': "Vérifier l'adresse",
#            'default_assigned_group': 'survey_editors',
#            'default_assigned_user': 'survivor',
#            'creation_state': ('validating_address',),
#            'starting_states': ('validating_address',),
#            'ending_states': ('waiting_address', 'checking_completion'),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.parcels_validated'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 1,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'assign_temporary_address',
#            'title': "Assigner une adresse temporaire",
#            'default_assigned_group': 'survey_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('waiting_address',),
#            'starting_states': ('waiting_address',),
#            'ending_states': ('checking_completion',),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.parcels_added', 'AND'),
#                EndConditionObject('liege.urban.schedule.parcels_validated')
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 1,
#        },
    ],
    'opinions_schedule': [
    ],
    'buildlicence': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt dossiers',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'incomplet',
#            'title': 'Incomplet',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('incomplete',),
#            'starting_states': ('incomplete',),
#            'ending_states': ('checking_completion',),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'activate_recurrency': True,
#            'recurrence_states': ('incomplete',),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'demande_complements',
#                    'title': 'Demander des compléments',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'starting_states': ('incomplete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 15,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'attente_complements',
#                    'title': 'En attente de compléments',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'start_conditions': (
#                        StartConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'start_date': None,  # infinite deadline
#                },
#            ],
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'suspension',
#            'title': 'Suspension',
#            'default_assigned_group': 'technical_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('suspension',),
#            'starting_states': ('suspension',),
#            'ending_states': ('checking_completion',),
#            'activate_recurrency': True,
#            'recurrence_states': ('suspension',),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'accuse',
#            'title': 'Accusé de réception',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('checking_completion',),
#            'starting_states': ('checking_completion',),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.acknowledgment_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 15,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'rediger-accuse',
#                    'title': 'Rédiger accusé',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('checking_completion',),
#                    'starting_states': ('checking_completion',),
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.acknowledgment_written'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 13,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'verif_complet',
#                            'title': 'Vérification de la complétude',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('checking_completion',),
#                            'starting_states': ('checking_completion',),
#                            'ending_states': ('complete', 'incomplete'),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'recurrence_states': ('checking_completion'),
#                            'activate_recurrency': True,
#                            'additional_delay': 11,
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'choix',
#                            'title': 'Choix de la procédure',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('complete',),
#                            'starting_states': ('complete',),
#                            'ending_states': ('procedure_choosen',),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 11,
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'enquete-dates',
#                            'title': 'Définir les dates de d\'enquête',
#                            'default_assigned_group': 'administrative_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.will_have_inquiry'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 13,
#                        },
#                    ],
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-accuse',
#                    'title': 'Valider accusé',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('checking_completion',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.acknowledgment_written'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.acknowledgment_validated'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 14,
#                }
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'valider-analyse',
#            'title': 'Valider analyse',
#            'default_assigned_group': 'technical_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.acknowledgment_done'),
#            ),
#            'starting_states': ('procedure_validated',),
#            'ending_states': ('decision_in_progress', 'FD_opinion'),
#            'start_date': 'urban.schedule.start_date.acknowledgment_date',
#            'calculation_delay': (
#                'urban.schedule.delay.annonced_delay',
#            ),
#            'additional_delay': 0,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'rediger-analyse',
#                    'title': 'Rédiger analyse',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'starting_states': ('procedure_validated',),
#                    'ending_states': ('report_written',),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 5,
#                    'subtasks': [
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'avis-services',
#                            'title': 'Avis de services',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'marker_interfaces': [u'Products.urban.schedule.interfaces.IReceiveOpinionRequestsTask'],
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.opinion_requests_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                            'additional_delay': 33,
#                            'subtasks': [
#                                {
#                                    'type_name': 'MacroTaskConfig',
#                                    'id': 'documents-avis',
#                                    'title': 'Envoyer les demandes d\'avis',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendOpinionRequestsTask'],
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                    ),
#                                    'starting_states': ('procedure_validated',),
#                                    'end_conditions': (
#                                        MacroEndConditionObject('liege.urban.schedule.opinion_requests_waiting'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                                    'additional_delay': 0,
#                                    'subtasks': [
#                                        {
#                                            'type_name': 'TaskConfig',
#                                            'id': 'demander-avis',
#                                            'title': 'Créer les événements',
#                                            'default_assigned_group': 'technical_editors',
#                                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                            'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateOpinionRequestsTask'],
#                                            'creation_state': ('procedure_validated',),
#                                            'creation_conditions': (
#                                                CreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                            ),
#                                            'starting_states': ('procedure_validated',),
#                                            'end_conditions': (
#                                                EndConditionObject('urban.schedule.condition.opinion_requests_created'),
#                                            ),
#                                            'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                                            'additional_delay': 0,
#                                        },
#                                    ],
#                                },
#                            ]
#                        },
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'enquete',
#                            'title': 'Enquête publique',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.acknowledgment_done', 'AND'),
#                                MacroCreationConditionObject('urban.schedule.condition.has_inquiry'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#                            'additional_delay': 1,
#                            'subtasks': [
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'enquete-documents',
#                                    'title': 'Produire les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'valider-documents',
#                                    'title': 'Valider les documents',
#                                    'default_assigned_group': 'administrative_validators',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'envoyer-documents',
#                                    'title': 'Envoyer les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                                },
#                            ]
#                        },
#                    ]
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'avis-fd',
#            'title': 'Avis du FD',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated', 'FD_opinion'),
#            'creation_conditions': (
#                MacroCreationConditionObject('liege.urban.schedule.only_need_FD_opinion', 'OR'),
#                MacroCreationConditionObject('liege.urban.schedule.licence_state_is_FD_opinion'),
#            ),
#            'starting_states': ('procedure_validated', 'FD_opinion'),
#            'ending_states': ('decision_in_progress',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.FD_opinion_received'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'premier-passage',
#                    'title': 'Premier passage collège',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated', 'FD_opinion'),
#                    'starting_states': ('procedure_validated', 'FD_opinion'),
#                    'start_date': 'schedule.start_date.subtask_highest_due_date',
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'rediger-projet-avis',
#                            'title': 'Rédiger le projet d\'avis',
#                            'default_assigned_group': 'administrative_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated', 'FD_opinion'),
#                            'starting_states': ('procedure_validated', 'FD_opinion'),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'additional_delay': 2,
#                            'start_date': 'schedule.start_date.task_starting_date',
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'valider-projet-avis',
#                            'title': 'Valider le projet d\'avis',
#                            'default_assigned_group': 'administrative_validators',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated', 'FD_opinion'),
#                            'starting_states': ('procedure_validated', 'FD_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_validated', 'AND'),
#                                EndConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                    ]
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-avis-FD',
#                    'title': 'Envoyer la demande d\'avis',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated', 'FD_opinion'),
#                    'starting_states': ('procedure_validated', 'FD_opinion'),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.FD_opinion_asked'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'decision-finale',
#            'title': 'Décision finale à notifier',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('decision_in_progress',),
#            'starting_states': ('decision_in_progress',),
#            'ending_states': ('authorized', 'refused'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.decision_notified'),
#            ),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 2,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-proposition-decision',
#                    'title': 'Rédiger le projet de permis',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'calculation_delay': (
#                        'urban.schedule.delay.annonced_delay',
#                    ),
#                    'additional_delay': -7,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-proposition-decision',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_sent'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
    ],
    'urbancertificatetwo': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt dossiers',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'incomplet',
#            'title': 'Incomplet',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('incomplete',),
#            'starting_states': ('incomplete',),
#            'ending_states': ('checking_completion',),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'activate_recurrency': True,
#            'recurrence_states': ('incomplete',),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'demande_complements',
#                    'title': 'Demander des compléments',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'starting_states': ('incomplete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 15,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'attente_complements',
#                    'title': 'En attente de compléments',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'start_conditions': (
#                        StartConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'start_date': None,  # infinite deadline
#                },
#            ],
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'verif_complet',
#            'title': 'Vérification de la complétude',
#            'default_assigned_group': 'technical_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('checking_completion',),
#            'starting_states': ('checking_completion',),
#            'ending_states': ('complete', 'incomplete'),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'recurrence_states': ('checking_completion'),
#            'activate_recurrency': True,
#            'additional_delay': 11,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'validate_procedure',
#            'title': 'Valider la procédure',
#            'default_assigned_group': 'technical_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'starting_states': ('complete',),
#            'ending_states': ('procedure_validated',),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 15,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'choix',
#                    'title': 'Choix de la procédure',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'starting_states': ('complete',),
#                    'ending_states': ('procedure_choosen',),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 11,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'enquete-dates',
#                            'title': 'Définir les dates de d\'enquête',
#                            'default_assigned_group': 'administrative_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 13,
#                        },
#                    ],
#                },
#            ],
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'valider-analyse',
#            'title': 'Valider analyse',
#            'default_assigned_group': 'technical_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated',),
#            'starting_states': ('procedure_validated',),
#            'ending_states': ('decision_in_progress', 'FD_opinion'),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'calculation_delay': (
#                'urban.schedule.delay.annonced_delay',
#            ),
#            'additional_delay': 0,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'rediger-analyse',
#                    'title': 'Rédiger analyse',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'starting_states': ('procedure_validated',),
#                    'ending_states': ('report_written',),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 5,
#                    'subtasks': [
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'avis-services',
#                            'title': 'Avis de services',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'marker_interfaces': [u'Products.urban.schedule.interfaces.IReceiveOpinionRequestsTask'],
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.opinion_requests_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 33,
#                            'subtasks': [
#                                {
#                                    'type_name': 'MacroTaskConfig',
#                                    'id': 'documents-avis',
#                                    'title': 'Envoyer les demandes d\'avis',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendOpinionRequestsTask'],
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                    ),
#                                    'starting_states': ('procedure_validated',),
#                                    'end_conditions': (
#                                        MacroEndConditionObject('liege.urban.schedule.opinion_requests_waiting'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                    'additional_delay': 0,
#                                    'subtasks': [
#                                        {
#                                            'type_name': 'TaskConfig',
#                                            'id': 'demander-avis',
#                                            'title': 'Créer les événements',
#                                            'default_assigned_group': 'technical_editors',
#                                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                            'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateOpinionRequestsTask'],
#                                            'creation_state': ('procedure_validated',),
#                                            'creation_conditions': (
#                                                CreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                            ),
#                                            'starting_states': ('procedure_validated',),
#                                            'end_conditions': (
#                                                EndConditionObject('urban.schedule.condition.opinion_requests_created'),
#                                            ),
#                                            'start_date': 'urban.schedule.start_date.deposit_date',
#                                            'additional_delay': 0,
#                                        },
#                                    ],
#                                },
#                            ]
#                        },
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'enquete',
#                            'title': 'Enquête publique',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.acknowledgment_done', 'AND'),
#                                MacroCreationConditionObject('urban.schedule.condition.has_inquiry'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#                            'additional_delay': 1,
#                            'subtasks': [
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'enquete-documents',
#                                    'title': 'Produire les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'valider-documents',
#                                    'title': 'Valider les documents',
#                                    'default_assigned_group': 'administrative_validators',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'envoyer-documents',
#                                    'title': 'Envoyer les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                            ]
#                        },
#                    ]
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'avis-fd',
#            'title': 'Avis du FD',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated', 'FD_opinion'),
#            'creation_conditions': (
#                MacroCreationConditionObject('liege.urban.schedule.only_need_FD_opinion', 'OR'),
#                MacroCreationConditionObject('liege.urban.schedule.licence_state_is_FD_opinion'),
#            ),
#            'starting_states': ('procedure_validated', 'FD_opinion'),
#            'ending_states': ('decision_in_progress',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.FD_opinion_received'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'premier-passage',
#                    'title': 'Premier passage collège',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated', 'FD_opinion'),
#                    'starting_states': ('procedure_validated', 'FD_opinion'),
#                    'start_date': 'schedule.start_date.subtask_highest_due_date',
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'rediger-projet-avis',
#                            'title': 'Rédiger le projet d\'avis',
#                            'default_assigned_group': 'administrative_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated', 'FD_opinion'),
#                            'starting_states': ('procedure_validated', 'FD_opinion'),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'additional_delay': 2,
#                            'start_date': 'schedule.start_date.task_starting_date',
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'valider-projet-avis',
#                            'title': 'Valider le projet d\'avis',
#                            'default_assigned_group': 'administrative_validators',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated', 'FD_opinion'),
#                            'starting_states': ('procedure_validated', 'FD_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_validated', 'AND'),
#                                EndConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                    ]
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-avis-FD',
#                    'title': 'Envoyer la demande d\'avis',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated', 'FD_opinion'),
#                    'starting_states': ('procedure_validated', 'FD_opinion'),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.FD_opinion_asked'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'decision-finale',
#            'title': 'Décision finale à notifier',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('decision_in_progress',),
#            'starting_states': ('decision_in_progress',),
#            'ending_states': ('authorized', 'refused'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.decision_notified'),
#            ),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 2,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-proposition-decision',
#                    'title': 'Rédiger le projet de permis',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'calculation_delay': (
#                        'urban.schedule.delay.annonced_delay',
#                    ),
#                    'additional_delay': -7,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-proposition-decision',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_sent'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
    ],
    'article127': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt dossiers',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'validate_procedure',
#            'title': 'Valider la procédure',
#            'default_assigned_group': 'technical_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'starting_states': ('complete',),
#            'ending_states': ('procedure_validated',),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 15,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'choix',
#                    'title': 'Choix de la procédure',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'starting_states': ('complete',),
#                    'ending_states': ('procedure_choosen',),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 11,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'rayon-enquete',
#                            'title': 'Identifier la zone d\'enquête',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.will_have_inquiry'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.inquiry_event_created', 'AND'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 11,
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'enquete-dates',
#                            'title': 'Définir les dates de d\'enquête',
#                            'default_assigned_group': 'administrative_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 13,
#                        },
#                    ],
#                },
#            ],
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'valider-analyse',
#            'title': 'Valider analyse',
#            'default_assigned_group': 'technical_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated',),
#            'starting_states': ('procedure_validated',),
#            'ending_states': ('decision_in_progress', 'FD_opinion'),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'calculation_delay': (
#                'urban.schedule.delay.annonced_delay',
#            ),
#            'additional_delay': 0,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'rediger-analyse',
#                    'title': 'Rédiger analyse',
#                    'default_assigned_group': 'technical_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'starting_states': ('procedure_validated',),
#                    'ending_states': ('report_written',),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 5,
#                    'subtasks': [
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'avis-services',
#                            'title': 'Avis de services',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'marker_interfaces': [u'Products.urban.schedule.interfaces.IReceiveOpinionRequestsTask'],
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.opinion_requests_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 33,
#                            'subtasks': [
#                                {
#                                    'type_name': 'MacroTaskConfig',
#                                    'id': 'documents-avis',
#                                    'title': 'Envoyer les demandes d\'avis',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendOpinionRequestsTask'],
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                    ),
#                                    'starting_states': ('procedure_validated',),
#                                    'end_conditions': (
#                                        MacroEndConditionObject('liege.urban.schedule.opinion_requests_waiting'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                    'additional_delay': 0,
#                                    'subtasks': [
#                                        {
#                                            'type_name': 'TaskConfig',
#                                            'id': 'demander-avis',
#                                            'title': 'Créer les événements',
#                                            'default_assigned_group': 'technical_editors',
#                                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                            'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateOpinionRequestsTask'],
#                                            'creation_state': ('procedure_validated',),
#                                            'creation_conditions': (
#                                                CreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                                            ),
#                                            'starting_states': ('procedure_validated',),
#                                            'end_conditions': (
#                                                EndConditionObject('urban.schedule.condition.opinion_requests_created'),
#                                            ),
#                                            'start_date': 'urban.schedule.start_date.deposit_date',
#                                            'additional_delay': 0,
#                                        },
#                                    ],
#                                },
#                            ]
#                        },
#                        {
#                            'type_name': 'MacroTaskConfig',
#                            'id': 'enquete',
#                            'title': 'Enquête publique',
#                            'default_assigned_group': 'technical_editors',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('procedure_validated',),
#                            'creation_conditions': (
#                                MacroCreationConditionObject('urban.schedule.condition.has_inquiry'),
#                            ),
#                            'starting_states': ('procedure_validated',),
#                            'end_conditions': (
#                                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#                            'additional_delay': 1,
#                            'subtasks': [
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'enquete-documents',
#                                    'title': 'Produire les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_state': ('procedure_validated',),
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'valider-documents',
#                                    'title': 'Valider les documents',
#                                    'default_assigned_group': 'administrative_validators',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                                {
#                                    'type_name': 'TaskConfig',
#                                    'id': 'envoyer-documents',
#                                    'title': 'Envoyer les documents',
#                                    'default_assigned_group': 'administrative_editors',
#                                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                                    'creation_conditions': (
#                                        CreationConditionObject('urban.schedule.condition.has_inquiry'),
#                                    ),
#                                    'start_conditions': (
#                                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                                    ),
#                                    'end_conditions': (
#                                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                                    ),
#                                    'start_date': 'urban.schedule.start_date.deposit_date',
#                                },
#                            ]
#                        },
#                    ]
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'decision-finale',
#            'title': 'Transmettre avis collège au FD',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('decision_in_progress',),
#            'starting_states': ('decision_in_progress',),
#            'ending_states': ('authorized', 'refused'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.decision_notified'),
#            ),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 2,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-proposition-decision',
#                    'title': 'Rédiger le projet davis',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'calculation_delay': (
#                        'urban.schedule.delay.annonced_delay',
#                    ),
#                    'additional_delay': -7,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-proposition-decision',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('decision_in_progress',),
#                    'starting_states': ('decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.decision_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.decision_project_sent'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
    ],
    'preliminarynotice': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt de la demande',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('analysis',),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'analysis',
#            'title': 'Analyse',
#            'default_assigned_group': 'technical_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('analysis',),
#            'starting_states': ('analysis',),
#            'ending_states': ('analysis_proposition',),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 4,
#            'activate_recurrency': True,
#            'recurrence_states': ('analysis',),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'valider-reponse',
#            'title': 'Valider le projet de réponse',
#            'default_assigned_group': 'administrative_validators',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college',),
#            'starting_states': ('college',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.college_project_validated'),
#            ),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 2,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoi-college',
#                    'title': 'Préparer et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college',),
#                    'starting_states': ('college',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.project_sent_to_college'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'passage-college',
#                    'title': 'Passage au collège',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college',),
#                    'starting_states': ('college',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.project_sent_to_college'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-projet-reponse',
#                    'title': 'Rédiger le projet de réponse',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college',),
#                    'starting_states': ('college',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.college_project_writen'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'notifier-reponse',
#            'title': 'Envoyer la réponse',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college',),
#            'starting_states': ('college',),
#            'start_conditions': (
#                MacroStartConditionObject('liege.urban.schedule.college_project_validated'),
#            ),
#            'ending_states': ('favorable', 'defavorable'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.decision_notified'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 5,
#        },
    ],
    'urbancertificateone': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt de la demande',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('analysis',),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'analysis',
#            'title': 'Analyse',
#            'default_assigned_group': 'technical_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('analysis',),
#            'starting_states': ('analysis',),
#            'ending_states': ('college',),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 4,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'rediger-proposition-certificat',
#            'title': 'Rédiger le projet de certificat',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college',),
#            'starting_states': ('college',),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.decision_project_drafted'),
#            ),
#            'start_date': 'schedule.start_date.task_starting_date',
#            'calculation_delay': (
#                'urban.schedule.delay.annonced_delay',
#            ),
#            'additional_delay': -7,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'envoyer-proposition-certificat',
#            'title': 'Valider et envoyer vers IA délib',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college',),
#            'starting_states': ('college',),
#            'start_conditions': (
#                StartConditionObject('liege.urban.schedule.decision_project_drafted'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.decision_project_sent'),
#            ),
#            'start_date': 'schedule.start_date.task_starting_date',
#            'additional_delay': 2,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'octroi-certificat',
#            'title': 'Octroi du certificat',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college',),
#            'starting_states': ('college',),
#            'start_conditions': (
#                StartConditionObject('liege.urban.schedule.decision_project_sent'),
#            ),
#            'ending_states': ('done',),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.decision_notified'),
#            ),
#            'start_date': 'schedule.start_date.task_starting_date',
#            'additional_delay': 2,
#        },
    ],
    'codt_buildlicence': [
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'enquete',
#            'title': 'Enquête publique',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.will_have_inquiry', 'AND'),
#            ),
#            'starting_states': ('procedure_validated',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 1,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-dates',
#                    'title': 'Définir les dates de d\'enquête',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('urban.schedule.condition.inquiry_event_created'),
#                        EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-documents',
#                    'title': 'Produire les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.write_inquiry_documents'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-documents',
#                    'title': 'Valider les documents',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated', 'OR'),
#                        EndConditionObject('liege.urban.schedule.write_inquiry_documents'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-documents',
#                    'title': 'Envoyer les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                },
#            ]
#        },
    ],
    'codt_urbancertificatetwo': [
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'annonce-de-projet',
#            'title': 'Annonce de projet',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_validated',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.will_have_announcement', 'AND'),
#            ),
#            'starting_states': ('procedure_validated',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                MacroEndConditionObject('urban.schedule.condition.announcement_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.announcement_end_date',
#            'additional_delay': 1,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'annonce-dates',
#                    'title': 'Définir les dates de d\'annonce de projet',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('urban.schedule.condition.announcement_dates_defined'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'annonce-documents',
#                    'title': 'Produire les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.announcement_documents_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.write_announcement_documents'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-documents',
#                    'title': 'Valider les documents',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.announcement_documents_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.announcement_documents_validated', 'OR'),
#                        EndConditionObject('liege.urban.schedule.write_announcement_documents'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.announcement_documents_done'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-documents',
#                    'title': 'Envoyer les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_validated',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.announcement_documents_validated'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.announcement_documents_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                },
#            ]
#        },
    ],
    'codt_uniquelicence': [
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'enquete',
#            'title': 'Enquête publique',
#            'default_assigned_group': 'administrative_editors',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'starting_states': ('complete',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 1,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-dates',
#                    'title': 'Définir les dates de d\'enquête',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('urban.schedule.condition.inquiry_event_created', 'AND'),
#                        EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-documents',
#                    'title': 'Produire les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 17,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.write_inquiry_documents'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-documents',
#                    'title': 'Valider les documents',
#                    'default_assigned_group': 'administrative_validators',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated', 'OR'),
#                        EndConditionObject('liege.urban.schedule.write_inquiry_documents'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-documents',
#                    'title': 'Envoyer les documents',
#                    'default_assigned_group': 'administrative_editors',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 18,
#                },
#            ]
#        },
    ],
    'envclassone': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt dossier',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'transmis-dossier-spw',
#            'title': 'Transmis dossier au SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address', 'checking_completion'),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.transmit_to_spw_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 3,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'completude-par-le-spw',
#            'title': 'Vérification complétude par le SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('checking_completion',),
#            'ending_states': ('complete', 'incomplete', 'abandoned'),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.transmit_to_spw_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.spw_receipt_date',
#            'additional_delay': 20,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'incomplet',
#            'title': 'Incomplet',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('incomplete',),
#            'starting_states': ('incomplete',),
#            'ending_states': ('complete', 'inacceptable', 'abandoned'),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 0,
#            'subtasks' : [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'demande_complements',
#                    'title': 'Demander des compléments',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'starting_states': ('incomplete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.ask_complements_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'attente_complements',
#                    'title': 'En attente de compléments',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.incomplete_for_6_months', 'OR'),
#                        EndConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.ask_complements_date',
#                    'additional_delay': 183,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'transmis_complements_au_spw',
#                    'title': 'Transmis des compléments au SPW',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_transmit_to_spw'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.complements_deposit_date',
#                    'additional_delay': 3,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'verif_complements',
#                    'title': 'Vérification compléments par le SPW',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'ending_states': ('complete', 'inacceptable', 'abandoned'),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_transmit_to_spw'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.complements_deposit_date',
#                    'additional_delay': 20,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'irrecevable-apres-6-mois',
#                    'title': 'Irrecevable après 6 mois',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'ending_states': ('complete', 'inacceptable', 'abandoned'),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.incomplete_for_6_months'),
#                    ),
#                    'start_conditions': (
#                        StartConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 0,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'avis-services',
#            'title': 'Avis de services',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'marker_interfaces': [u'Products.urban.schedule.interfaces.IReceiveOpinionRequestsTask'],
#            'creation_state': ('complete',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#            ),
#            'starting_states': ('complete',),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.opinion_requests_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 33,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'documents-avis',
#                    'title': 'Envoyer les demandes d\'avis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendOpinionRequestsTask'],
#                    'creation_state': ('complete',),
#                    'creation_conditions': (
#                        MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                    ),
#                    'starting_states': ('complete',),
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.opinion_requests_waiting'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 0,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'demander-avis',
#                            'title': 'Créer les événements',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateOpinionRequestsTask'],
#                            'creation_state': ('complete',),
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                            ),
#                            'starting_states': ('complete',),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.opinion_requests_created'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 0,
#                        },
#                    ],
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'identification-rubriques',
#            'title': 'Identification des rubriques',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.rubrics_choice_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.acknowledgment_date.',
#            'additional_delay': 3,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'enquete',
#            'title': 'Enquête publique',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.acknowledgment_done', 'AND'),
#            ),
#            'starting_states': ('complete',),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 1,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-dates',
#                    'title': 'Définir les dates de d\'enquête',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-documents',
#                    'title': 'Produire les documents',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-documents',
#                    'title': 'Valider les documents',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-documents',
#                    'title': 'Envoyer les documents',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 3,
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'rapport-analyse',
#            'title': 'Rapport d\'analyse',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'ending_states': (
#                'technical_report_validation',
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 2,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'complete',
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-rapport-analyse',
#            'title': 'Validation du rapport d\'analyse',
#            'default_assigned_group': 'technical_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('technical_report_validation',),
#            'creation_conditions': (
#                CreationConditionObject('urban.schedule.condition.acknowledgment_done'),
#            ),
#            'starting_states': ('technical_report_validation',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'ending_states': (
#                'complete',
#                'college_in_progress',
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'technical_report_validation',
#            ),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'envoi-avis-college-au-spw',
#            'title': 'Envoi de l\'avis collège au SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college_in_progress',),
#            'start_conditions': (
#                MacroStartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.college_opinion_transmit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 10,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'premier-passage',
#                    'title': 'Premier passage collège',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college_in_progress', 'FD_opinion'),
#                    'starting_states': ('college_in_progress', 'FD_opinion'),
#                    'start_date': 'schedule.start_date.subtask_highest_due_date',
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'additional_delay': 2,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'rediger-projet-avis',
#                            'title': 'Rédiger le projet d\'avis',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'additional_delay': 2,
#                            'start_date': 'schedule.start_date.task_starting_date',
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'valider-projet-avis',
#                            'title': 'Valider le projet d\'avis',
#                            'default_assigned_group': 'administrative_validators_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_validated', 'AND'),
#                                EndConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'college-en-cours',
#                            'title': 'Collège en cours',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_done'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                    ]
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-avis-FT',
#                    'title': 'Envoyer la demande d\'avis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college_in_progress', 'FT_opinion'),
#                    'starting_states': ('college_in_progress', 'FT_opinion'),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.college_opinion_transmit_done'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'reception-projet-arrete',
#            'title': 'Réception du projet d\'arrêté',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('FT_opinion',),
#            'starting_states': ('FT_opinion',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.spw_project_receipt_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.acknowledgment_date.',
#            'additional_delay': 110,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'rapport-synthese',
#            'title': 'Rapport de synthèse',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('FT_opinion',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.spw_project_receipt_done'),
#            ),
#            'ending_states': (
#                'technical_synthesis_validation',
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'FT_opinion',
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-synthese',
#            'title': 'Validation du rapport de synthèse',
#            'default_assigned_group': 'technical_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('technical_synthesis_validation',),
#            'starting_states': ('technical_synthesis_validation',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.spw_project_receipt_done'),
#            ),
#            'ending_states': (
#                'FT_opinion',
#                'final_decision_in_progress',
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 4,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'technical_synthesis_validation',
#            ),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'decision-finale',
#            'title': 'Décision finale à notifier',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('final_decision_in_progress',),
#            'starting_states': ('final_decision_in_progress',),
#            'ending_states': ('authorized', 'refused'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.env_decision_notified'),
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 30,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-proposition-decision',
#                    'title': 'Rédiger le projet de permis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_project_drafted'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 10,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-proposition-decision',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_project_validated'),
#                        EndConditionObject('liege.urban.schedule.env_decision_project_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 11,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-en-cours',
#                    'title': 'Collège en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_project_sent'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_college_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 23,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'college-bourgmestre',
#            'title': 'Séances e-bourgmestre',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                MacroCreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.all_mayor_events_closed'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 30,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                MacroRecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-point',
#                    'title': 'Rédiger le point',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_drafted'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 10,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-point',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 11,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-en-cours',
#                    'title': 'Séance en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_colleges_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 23,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-environnement',
#            'title': 'Validation',
#            'default_assigned_group': 'administrative_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_validated_or_refused'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 2,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'refus-environnement',
#            'title': 'Validation refusée',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_proposed'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#        },
    ],
    'envclasstwo': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt dossier',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'transmis-dossier-spw',
#            'title': 'Transmis dossier au SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('validating_address', 'checking_completion'),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.transmit_to_spw_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 3,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'completude-par-le-spw',
#            'title': 'Vérification complétude par le SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('checking_completion',),
#            'ending_states': ('complete', 'incomplete', 'abandoned'),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.transmit_to_spw_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.spw_receipt_date',
#            'additional_delay': 20,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'incomplet',
#            'title': 'Incomplet',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('incomplete',),
#            'starting_states': ('incomplete',),
#            'ending_states': ('complete', 'inacceptable', 'abandoned'),
#            'start_date': 'schedule.start_date.subtask_highest_due_date',
#            'additional_delay': 0,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'demande_complements',
#                    'title': 'Demander des compléments',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'starting_states': ('incomplete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.ask_complements_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'attente_complements',
#                    'title': 'En attente de compléments',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.incomplete_for_6_months', 'OR'),
#                        EndConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.ask_complements_date',
#                    'additional_delay': 183,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'transmis_complements_au_spw',
#                    'title': 'Transmis des compléments au SPW',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_received'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.complements_transmit_to_spw'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.complements_deposit_date',
#                    'additional_delay': 3,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'verif_complements',
#                    'title': 'Vérification compléments par le SPW',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'ending_states': ('complete', 'inacceptable', 'abandoned'),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.complements_transmit_to_spw'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.complements_deposit_date',
#                    'additional_delay': 20,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'irrecevable-apres-6-mois',
#                    'title': 'Irrecevable après 6 mois',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('incomplete',),
#                    'ending_states': ('complete', 'inacceptable', 'abandoned'),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.incomplete_for_6_months'),
#                    ),
#                    'start_conditions': (
#                        StartConditionObject('urban.schedule.condition.complements_asked'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 0,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'avis-services',
#            'title': 'Avis de services',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'marker_interfaces': [u'Products.urban.schedule.interfaces.IReceiveOpinionRequestsTask'],
#            'creation_state': ('complete',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#            ),
#            'starting_states': ('complete',),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.opinion_requests_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 33,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'documents-avis',
#                    'title': 'Envoyer les demandes d\'avis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendOpinionRequestsTask'],
#                    'creation_state': ('complete',),
#                    'creation_conditions': (
#                        MacroCreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                    ),
#                    'starting_states': ('complete',),
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.opinion_requests_waiting'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 0,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'demander-avis',
#                            'title': 'Créer les événements',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateOpinionRequestsTask'],
#                            'creation_state': ('complete',),
#                            'creation_conditions': (
#                                CreationConditionObject('urban.schedule.condition.has_opinion_requests'),
#                            ),
#                            'starting_states': ('complete',),
#                            'end_conditions': (
#                                EndConditionObject('urban.schedule.condition.opinion_requests_created'),
#                            ),
#                            'start_date': 'urban.schedule.start_date.deposit_date',
#                            'additional_delay': 0,
#                        },
#                    ],
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'identification-rubriques',
#            'title': 'Identification des rubriques',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.rubrics_choice_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.acknowledgment_date.',
#            'additional_delay': 3,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'enquete',
#            'title': 'Enquête publique',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'creation_conditions': (
#                MacroCreationConditionObject('urban.schedule.condition.acknowledgment_done', 'AND'),
#                MacroCreationConditionObject('urban.schedule.condition.is_not_temporary_licence', 'AND'),
#            ),
#            'starting_states': ('complete',),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 1,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-dates',
#                    'title': 'Définir les dates de d\'enquête',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'enquete-documents',
#                    'title': 'Produire les documents',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 1,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'valider-documents',
#                    'title': 'Valider les documents',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-documents',
#                    'title': 'Envoyer les documents',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('complete',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.acknowledgment_date',
#                    'additional_delay': 3,
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'rapport-analyse',
#            'title': 'Rapport d\'analyse',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('complete',),
#            'creation_conditions': (
#                CreationConditionObject('urban.schedule.condition.is_not_temporary_licence', 'AND'),
#            ),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'ending_states': (
#                'technical_report_validation',
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 2,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'complete',
#            ),
#            'recurrence_conditions': (
#                RecurrenceConditionObject('urban.schedule.condition.is_not_temporary_licence', 'AND'),
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-rapport-analyse',
#            'title': 'Validation du rapport d\'analyse',
#            'default_assigned_group': 'technical_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('technical_report_validation',),
#            'creation_conditions': (
#                CreationConditionObject('urban.schedule.condition.acknowledgment_done'),
#            ),
#            'starting_states': ('technical_report_validation',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'ending_states': (
#                'complete',
#                'college_in_progress',
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'technical_report_validation',
#            ),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'envoi-avis-college-au-spw',
#            'title': 'Envoi de l\'avis collège au SPW',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('college_in_progress',),
#            'start_conditions': (
#                MacroStartConditionObject('urban.schedule.condition.inquiry_done'),
#            ),
#            'end_conditions': (
#                MacroEndConditionObject('urban.schedule.condition.college_opinion_transmit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.inquiry_end_date',
#            'additional_delay': 10,
#            'subtasks': [
#                {
#                    'type_name': 'MacroTaskConfig',
#                    'id': 'premier-passage',
#                    'title': 'Premier passage collège',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college_in_progress', 'FD_opinion'),
#                    'starting_states': ('college_in_progress', 'FD_opinion'),
#                    'start_date': 'schedule.start_date.subtask_highest_due_date',
#                    'end_conditions': (
#                        MacroEndConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'additional_delay': 2,
#                    'subtasks': [
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'rediger-projet-avis',
#                            'title': 'Rédiger le projet d\'avis',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'additional_delay': 2,
#                            'start_date': 'schedule.start_date.task_starting_date',
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'valider-projet-avis',
#                            'title': 'Valider le projet d\'avis',
#                            'default_assigned_group': 'administrative_validators_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.college_project_writen'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_project_validated', 'AND'),
#                                EndConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                        {
#                            'type_name': 'TaskConfig',
#                            'id': 'college-en-cours',
#                            'title': 'Collège en cours',
#                            'default_assigned_group': 'administrative_editors_environment',
#                            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                            'creation_state': ('college_in_progress', 'FT_opinion'),
#                            'starting_states': ('college_in_progress', 'FT_opinion'),
#                            'start_conditions': (
#                                StartConditionObject('liege.urban.schedule.project_sent_to_college'),
#                            ),
#                            'end_conditions': (
#                                EndConditionObject('liege.urban.schedule.college_done'),
#                            ),
#                            'start_date': 'schedule.start_date.task_starting_date',
#                            'additional_delay': 2,
#                        },
#                    ]
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-avis-FT',
#                    'title': 'Envoyer la demande d\'avis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('college_in_progress', 'FT_opinion'),
#                    'starting_states': ('college_in_progress', 'FT_opinion'),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.college_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('urban.schedule.condition.college_opinion_transmit_done'),
#                    ),
#                    'start_date': 'schedule.start_date.task_starting_date',
#                    'additional_delay': 2,
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'reception-projet-arrete',
#            'title': 'Réception du projet d\'arrêté',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.is_temporary_licence_or_in_FT_opinion_state'),
#            ),
#            'ending_states': (
#                'FT_opinion',
#            ),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.spw_project_receipt_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.acknowledgment_date.',
#            'additional_delay': 110,
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'rapport-synthese',
#            'title': 'Rapport de synthèse',
#            'default_assigned_group': 'technical_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('FT_opinion',),
#            'start_conditions': (
#                StartConditionObject('urban.schedule.condition.spw_project_receipt_done'),
#            ),
#            'ending_states': (
#                'technical_synthesis_validation',
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'FT_opinion',
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-synthese',
#            'title': 'Validation du rapport de synthèse',
#            'default_assigned_group': 'technical_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('technical_synthesis_validation',),
#            'starting_states': ('technical_synthesis_validation',),
#            'ending_states': (
#                'FT_opinion',
#                'final_decision_in_progress',
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 4,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'technical_synthesis_validation',
#            ),
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'decision-finale',
#            'title': 'Décision finale à notifier',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('final_decision_in_progress',),
#            'starting_states': ('final_decision_in_progress',),
#            'ending_states': ('authorized', 'refused'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.env_decision_notified'),
#            ),
#            'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#            'additional_delay': 30,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-proposition-decision',
#                    'title': 'Rédiger le projet de permis',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_project_drafted'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 10,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-proposition-decision',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_project_validated'),
#                        EndConditionObject('liege.urban.schedule.env_decision_project_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 11,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-en-cours',
#                    'title': 'Collège en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('final_decision_in_progress',),
#                    'creation_conditions': (
#                        CreationConditionObject('urban.schedule.condition.authority_is_college'),
#                    ),
#                    'starting_states': ('final_decision_in_progress',),
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_project_sent'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_college_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.spw_decision_project_receipt_date',
#                    'additional_delay': 23,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'college-bourgmestre',
#            'title': 'Séances e-bourgmestre',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                MacroCreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.all_mayor_events_closed'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 30,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                MacroRecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-point',
#                    'title': 'Rédiger le point',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_drafted'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 10,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-point',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 11,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-en-cours',
#                    'title': 'Séance en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_colleges_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 23,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-environnement',
#            'title': 'Validation',
#            'default_assigned_group': 'administrative_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_validated_or_refused'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 2,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'refus-environnement',
#            'title': 'Validation refusée',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_proposed'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#        },
    ],
    'envclassthree': [
#        {
#            'type_name': 'TaskConfig',
#            'id': 'depot',
#            'title': 'Dépôt du dossier',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('deposit',),
#            'starting_states': ('deposit',),
#            'ending_states': ('procedure_analysis',),
#            'end_conditions': (
#                EndConditionObject('urban.schedule.condition.deposit_done'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 0,
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'validation-technique',
#            'title': 'Validation technique',
#            'default_assigned_group': 'technical_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('procedure_analysis',),
#            'starting_states': ('procedure_analysis',),
#            'ending_states': (
#                'acceptable',
#                'acceptable_with_conditions',
#                'inacceptable',
#                'procedure_analysis',
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_states': (
#                'procedure_analysis',
#            ),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'analyse-technique',
#                    'title': 'Analyse technique',
#                    'default_assigned_group': 'technical_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_state': ('procedure_analysis',),
#                    'starting_states': ('procedure_analysis',),
#                    'ending_states': (
#                        'acceptable_validation',
#                        'acceptable_with_conditions_validation',
#                        'inacceptable_validation',
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 2,
#                    'activate_recurrency': True,
#                    'recurrence_states': (
#                        'procedure_analysis',
#                    ),
#                },
#            ],
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'recevable',
#            'title': 'Recevable',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('acceptable', 'acceptable_with_conditions'),
#            'starting_states': ('acceptable', 'acceptable_with_conditions'),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.env_decision_notified'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 30,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'creer-evenement-decision-ebourgmestre',
#                    'title': "Créer événement 'recevable'",
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_not_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_mayor_event_created'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'decision-ebourgmestre-en-cours',
#                    'title': 'E-bourgmestre en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_mayor_event_closed'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 25,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'notifier-decision',
#                    'title': 'Notifier',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_closed'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_notified'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 30,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'irrecevable',
#            'title': 'Irrecevable',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_state': ('inacceptable',),
#            'starting_states': ('inacceptable',),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.env_decision_notified'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 15,
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'creer-evenement-decision-ebourgmestre',
#                    'title': "Créer événement 'irrecevable'",
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_not_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_mayor_event_created'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 2,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'decision-ebourgmestre-en-cours',
#                    'title': 'E-bourgmestre en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_mayor_event_closed'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 10,
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'notifier-decision',
#                    'title': 'Notifier',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'start_conditions': (
#                        StartConditionObject('liege.urban.schedule.env_decision_mayor_event_closed'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.env_decision_notified'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.deposit_date',
#                    'additional_delay': 15,
#                },
#            ]
#        },
#        {
#            'type_name': 'MacroTaskConfig',
#            'id': 'college-bourgmestre',
#            'title': 'Séances e-bourgmestre',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                MacroCreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'end_conditions': (
#                MacroEndConditionObject('liege.urban.schedule.all_mayor_events_closed'),
#            ),
#            'start_date': 'urban.schedule.start_date.creation_date',
#            'additional_delay': 30,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                MacroRecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#            ),
#            'subtasks': [
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'rediger-point',
#                    'title': 'Rédiger le point',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_drafted'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 10,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_created'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'envoyer-point',
#                    'title': 'Valider et envoyer vers IA délib',
#                    'default_assigned_group': 'administrative_validators_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_projects_sent'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 11,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_drafted'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-en-cours',
#                    'title': 'Séance en cours',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_mayor_colleges_done'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 23,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_sent'),
#                    ),
#                },
#                {
#                    'type_name': 'TaskConfig',
#                    'id': 'college-termine',
#                    'title': 'Séance terminée',
#                    'default_assigned_group': 'administrative_editors_environment',
#                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#                    'creation_conditions': (
#                        CreationConditionObject('liege.urban.schedule.one_mayor_project_meeting_done'),
#                    ),
#                    'end_conditions': (
#                        EndConditionObject('liege.urban.schedule.all_done_mayor_meeting_colleges_events_are_closed'),
#                    ),
#                    'start_date': 'urban.schedule.start_date.creation_date',
#                    'additional_delay': 23,
#                    'activate_recurrency': True,
#                    'recurrence_conditions': (
#                        RecurrenceConditionObject('liege.urban.schedule.one_mayor_project_meeting_done'),
#                    ),
#                },
#            ]
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'validation-environnement',
#            'title': 'Validation',
#            'default_assigned_group': 'administrative_validators_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_validated_or_refused'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 2,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_proposed'),
#            ),
#        },
#        {
#            'type_name': 'TaskConfig',
#            'id': 'refus-environnement',
#            'title': 'Validation refusée',
#            'default_assigned_group': 'administrative_editors_environment',
#            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
#            'creation_conditions': (
#                CreationConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#            'end_conditions': (
#                EndConditionObject('liege.urban.schedule.all_env_validations_proposed'),
#            ),
#            'start_date': 'urban.schedule.start_date.deposit_date',
#            'additional_delay': 3,
#            'activate_recurrency': True,
#            'recurrence_conditions': (
#                RecurrenceConditionObject('liege.urban.schedule.env_validation_refused'),
#            ),
#        },
    ],
    'inspection': [
        {
            'type_name': 'TaskConfig',
            'id': 'creation',
            'title': "Création",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('creation',),
            'starting_states': ('creation',),
            'ending_states': ('analysis', 'first_administrative_answer'),
            'end_conditions': (
                EndConditionObject('liege.urban.schedule.parcels_added', 'AND'),
                EndConditionObject('liege.urban.schedule.parcels_validated'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
        },
        {
            'type_name': 'TaskConfig',
            'id': 'rediger_rapport',
            'title': "Rapport à rédiger",
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('analysis',),
            'creation_conditions': (
                CreationConditionObject('liege.urban.schedule.should_write_report_event'),
            ),
            'end_conditions': (
                EndConditionObject('liege.urban.schedule.report_event_redacted'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 21,
            'activate_recurrency': True,
            'recurrence_states': ('analysis',),
            'recurrence_conditions': (
                RecurrenceConditionObject('liege.urban.schedule.should_write_report_event'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'valider_rapport',
            'title': "Rapport à valider",
            'default_assigned_group': 'inspection_validators',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('analysis',),
            'creation_conditions': (
                CreationConditionObject('liege.urban.schedule.report_event_redacted'),
            ),
            'end_conditions': (
                EndConditionObject('liege.urban.schedule.report_event_validated_or_refused'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 10,
            'activate_recurrency': True,
            'recurrence_states': ('analysis',),
            'recurrence_conditions': (
                RecurrenceConditionObject('liege.urban.schedule.report_event_redacted'),
            ),
        },
        {
            'type_name': 'MacroTaskConfig',
            'id': 'reponse-administrative',
            'title': 'Réponse administrative',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('administrative_answer',),
            'creation_conditions': (
                MacroCreationConditionObject('urban.schedule.condition.should_do_followups'),
            ),
            'end_conditions': (
                MacroEndConditionObject('urban.schedule.condition.all_followups_done'),
            ),
            'ending_states': ('inspection_follow_up',),
            'start_date': 'urban.schedule.start_date.creation_date',
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer',),
            'recurrence_conditions': (
                MacroRecurrenceConditionObject('urban.schedule.condition.should_do_followups'),
            ),
            'subtasks': [
                {
                    'type_name': 'TaskConfig',
                    'id': 'rediger-reponse',
                    'title': 'Rédiger réponse',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateFollowupTask'],
                    'creation_state': ('administrative_answer',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.should_write_one_followup'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.all_followups_written'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('administrative_answer',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.should_write_one_followup'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'valider-reponse',
                    'title': 'Valider réponse',
                    'default_assigned_group': 'administrative_validators',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.IValidateFollowupTask'],
                    'creation_state': ('administrative_answer',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.followups_written'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.followups_validated'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('administrative_answer',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.followups_written'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'envoyer-reponse',
                    'title': 'Envoyer réponse',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendFollowupTask'],
                    'creation_state': ('administrative_answer',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.followups_to_send'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.followups_done'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('administrative_answer',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.followups_to_send'),
                    ),
                },
            ],
        },
        {
            'type_name': 'TaskConfig',
            'id': 'delai-citoyen',
            'title': 'Délai citoyen',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('administrative_answer',),
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.followup_with_delay_written'),
            ),
            'ending_states': ('ended', 'analysis'),
            'start_date': 'urban.schedule.start_date.followup_date',
            'calculation_delay': (
                'urban.schedule.delay.inspection_followup_delay',
            ),
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer',),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.followup_with_delay_written'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'creer_pv',
            'title': "Créer PV",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('administrative_answer',),
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.should_create_ticket'),
            ),
            'end_conditions': (
                EndConditionObject('urban.schedule.condition.followup_ticket_created'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer',),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.should_create_ticket'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'pv_en_cours',
            'title': 'PV en cours',
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.followup_ticket_created'),
            ),
            'end_conditions': (
                EndConditionObject('urban.schedule.condition.followup_ticket_is_closed'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 0,
            'activate_recurrency': True,
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.followup_ticket_created'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'pv_termine',
            'title': 'PV terminé',
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.followup_ticket_is_closed'),
            ),
            'end_conditions': (
                EndConditionObject('liege.urban.schedule.report_event_redacted'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 0,
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer', 'inspection_follow_up', 'closed'),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.followup_ticket_is_closed'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'suivi-inspection',
            'title': 'Suivi inspection',
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('inspection_follow_up',),
            'ending_states': ('analysis', 'ended',),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
            'activate_recurrency': True,
            'recurrence_states': ('inspection_follow_up',),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.followup_with_delay_written'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'clore',
            'title': "À clôturer",
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('administrative_answer',),
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.should_end_inspection'),
            ),
            'ending_states': ('ended',),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer',),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.should_end_inspection'),
            ),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'boundlicence_closed',
            'title': 'PV terminé',
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.followup_ticket_is_closed'),
            ),
            'end_conditions': (
                EndConditionObject('liege.urban.schedule.report_event_redacted'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 0,
            'activate_recurrency': True,
            'recurrence_states': ('administrative_answer', 'inspection_follow_up', 'closed'),
            'recurrence_conditions': (
                RecurrenceConditionObject('urban.schedule.condition.followup_ticket_is_closed'),
            ),
        },
    ],

    'ticket': [
        {
            'type_name': 'TaskConfig',
            'id': 'creation',
            'title': "Création",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('creation',),
            'starting_states': ('creation',),
            'ending_states': ('prosecution_analysis',),
            'end_conditions': (
                EndConditionObject('urban.schedule.condition.ticket_redacted',),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
        },
        {
            'type_name': 'TaskConfig',
            'id': 'prosecution_analysis',
            'title': "Réponse du parquet",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('prosecution_analysis',),
            'starting_states': ('prosecution_analysis',),
            'ending_states': ('technical_analysis',),
            'start_date': 'urban.schedule.start_date.ticket_sent_date',
            'additional_delay': 90,
        },
        {
            'type_name': 'TaskConfig',
            'id': 'prosecution_analysis_over_deadline',
            'title': "Délai réponse parquet dépassé",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('prosecution_analysis',),
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.prosecution_answer_over_deadline',),
            ),
            'starting_states': ('prosecution_analysis',),
            'ending_states': ('technical_analysis',),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 0,
        },
        {
            'type_name': 'TaskConfig',
            'id': 'complements_asked',
            'title': "En attente de compléments",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_conditions': (
                CreationConditionObject('urban.schedule.condition.complements_asked',),
            ),
            'end_conditions': (
                EndConditionObject('urban.schedule.condition.complements_received',),
            ),
            'start_date': 'urban.schedule.start_date.ask_complements_date',
            'additional_delay': 60,
        },
        {
            'type_name': 'TaskConfig',
            'id': 'technical_analysis',
            'title': "Analyse technique",
            'default_assigned_group': 'technical_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('technical_analysis',),
            'starting_states': ('technical_analysis',),
            'ending_states': ('technical_validation',),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 60,
            'activate_recurrency': True,
            'recurrence_states': ('technical_analysis',),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'technical_validation',
            'title': "Validation technique",
            'default_assigned_group': 'technical_validators',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('technical_validation',),
            'starting_states': ('technical_validation',),
            'ending_states': ('technical_analysis', 'waiting_for_agreement'),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 15,
            'activate_recurrency': True,
            'recurrence_states': ('technical_validation',),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'waiting_for_agreement',
            'title': "En attente d'accord",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('waiting_for_agreement',),
            'starting_states': ('waiting_for_agreement',),
            'ending_states': ('waiting_to_finalize', 'technical_analysis', 'ended'),
            'start_date': None,
            'activate_recurrency': True,
            'recurrence_states': ('waiting_for_agreement',),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'agreement_reached',
            'title': "Accord trouvé",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('waiting_to_finalize',),
            'starting_states': ('waiting_to_finalize',),
            'ending_states': ('ended',),
            'start_date': None,
            'activate_recurrency': True,
            'recurrence_states': ('waiting_to_finalize',),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'in_court',
            'title': "En justice",
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('in_court',),
            'starting_states': ('in_court',),
            'ending_states': ('ended',),
            'start_date': None,
            'activate_recurrency': True,
            'recurrence_states': ('in_court',),
        },
        {
            'type_name': 'MacroTaskConfig',
            'id': 'reponse-administrative',
            'title': 'Réponse administrative',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('waiting_for_agreement',),
            'creation_conditions': (
                MacroCreationConditionObject('urban.schedule.condition.should_do_followups'),
            ),
            'end_conditions': (
                MacroEndConditionObject('urban.schedule.condition.all_followups_done'),
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'activate_recurrency': True,
            'recurrence_states': ('waiting_for_agreement',),
            'recurrence_conditions': (
                MacroRecurrenceConditionObject('urban.schedule.condition.should_do_followups'),
            ),
            'subtasks': [
                {
                    'type_name': 'TaskConfig',
                    'id': 'rediger-reponse',
                    'title': 'Rédiger réponse',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ICreateFollowupTask'],
                    'creation_state': ('waiting_for_agreement',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.should_write_one_followup'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.all_followups_written'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('waiting_for_agreement',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.should_write_one_followup'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'valider-reponse',
                    'title': 'Valider réponse',
                    'default_assigned_group': 'administrative_validators',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.IValidateFollowupTask'],
                    'creation_state': ('waiting_for_agreement',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.followups_written'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.followups_validated'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('waiting_for_agreement',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.followups_written'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'envoyer-reponse',
                    'title': 'Envoyer réponse',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'marker_interfaces': [u'Products.urban.schedule.interfaces.ISendFollowupTask'],
                    'creation_state': ('waiting_for_agreement',),
                    'creation_conditions': (
                        CreationConditionObject('urban.schedule.condition.followups_to_send'),
                    ),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.followups_done'),
                    ),
                    'start_date': 'urban.schedule.start_date.creation_date',
                    'additional_delay': 0,
                    'activate_recurrency': True,
                    'recurrence_states': ('waiting_for_agreement',),
                    'recurrence_conditions': (
                        RecurrenceConditionObject('urban.schedule.condition.followups_to_send'),
                    ),
                },
            ],
        },
    ],
    'roaddecree': [
        {
            'type_name': 'TaskConfig',
            'id': 'folder-creation',
            'title': 'Création du dossier',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('folder_creation',),
            'starting_states': ('folder_creation',),
            'ending_states': (
                'public_investigation',
                'technical_analysis_post_investigation',
            ),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 0,
        },
        {
            'type_name': 'MacroTaskConfig',
            'id': 'enquete',
            'title': 'Enquête publique',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('folder_creation',),
            'starting_states': ('folder_creation',),
            'ending_states': ('technical_analysis_post_investigation',),
            'end_conditions': (
                MacroEndConditionObject('urban.schedule.condition.inquiry_done'),
            ),
            'start_date': 'urban.schedule.start_date.inquiry_end_date',
            'additional_delay': 1,
            'subtasks': [
                {
                    'type_name': 'TaskConfig',
                    'id': 'enquete-dates',
                    'title': 'Définir les dates de d\'enquête',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('folder_creation',),
                    'end_conditions': (
                        EndConditionObject('urban.schedule.condition.inquiry_event_created'),
                        EndConditionObject('urban.schedule.condition.inquiry_dates_defined'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 17,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'enquete-documents',
                    'title': 'Produire les documents',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('folder_creation',),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.inquiry_documents_done'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 17,
                    'activate_recurrency': True,
                    'recurrence_conditions': (
                        RecurrenceConditionObject('liege.urban.schedule.write_inquiry_documents'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'valider-documents',
                    'title': 'Valider les documents',
                    'default_assigned_group': 'administrative_validators',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('procedure_validated',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.inquiry_documents_done'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.inquiry_documents_validated', 'OR'),
                        EndConditionObject('liege.urban.schedule.write_inquiry_documents'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 18,
                    'activate_recurrency': True,
                    'recurrence_conditions': (
                        RecurrenceConditionObject('liege.urban.schedule.inquiry_documents_done'),
                    ),
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'envoyer-documents',
                    'title': 'Envoyer les documents',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('procedure_validated',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.inquiry_documents_validated'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.licence_ended', 'OR'),
                        EndConditionObject('liege.urban.schedule.inquiry_documents_sent'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 18,
                },
            ]
        },
        {
            'type_name': 'TaskConfig',
            'id': 'rediger_rapport',
            'title': "Rapport d'analyse",
            'default_assigned_group': 'inspection_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('technical_analysis_post_investigation',),
            'ending_states': ('technical_analysis_validation',),
            'start_date': 'liege.urban.schedule.inspection_report_analysis_date',
            'additional_delay': 5,
            'activate_recurrency': True,
            'recurrence_states': ('technical_analysis_post_investigation',),
        },
        {
            'type_name': 'TaskConfig',
            'id': 'valider_rapport',
            'title': "Rapport à valider",
            'default_assigned_group': 'inspection_validators',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('technical_analysis_validation',),
            'ending_states': ('technical_analysis_post_investigation', 'college_council_passage'),
            'start_date': 'urban.schedule.start_date.creation_date',
            'additional_delay': 1,
            'activate_recurrency': True,
            'recurrence_states': ('technical_analysis_validation',),
        },
        {
            'type_name': 'MacroTaskConfig',
            'id': 'decision-notification',
            'title': 'Notification décision finale',
            'default_assigned_group': 'administrative_editors',
            'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
            'creation_state': ('college_council_passage',),
            'starting_states': ('college_council_passage',),
            'ending_states': ('authorized', 'abandoned', 'refused'),
            'start_date': 'schedule.start_date.subtask_highest_due_date',
            'additional_delay': 0,
            'subtasks': [
                {
                    'type_name': 'TaskConfig',
                    'id': 'rediger-proposition-decision',
                    'title': 'Rédiger le projet de permis',
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('college_council_passage',),
                    'starting_states': ('college_council_passage',),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.decision_project_drafted'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'calculation_delay': (
                        'urban.schedule.delay.annonced_delay',
                    ),
                    'additional_delay': -7,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'envoyer-proposition-decision',
                    'title': 'Valider et envoyer vers IA délib',
                    'default_assigned_group': 'administrative_validators',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('college_council_passage',),
                    'starting_states': ('college_council_passage',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.decision_project_drafted'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.decision_project_sent'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 2,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'college-en-cours',
                    'title': "Collège en cours",
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('college_council_passage',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.decision_project_sent'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.college_done'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 0,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'college-termine',
                    'title': "Collège terminé",
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('college_council_passage',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.college_done'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.college_event_closed'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 0,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'current-display',
                    'title': "Affichage en cours",
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('display_in_progress',),
                    'starting_states': ('display_in_progress',),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.college_done'),
                    ),
                    'end_conditions': (
                        EndConditionObject('liege.urban.schedule.display_completed'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 0,
                },
                {
                    'type_name': 'TaskConfig',
                    'id': 'completed-display',
                    'title': "Affichage terminé",
                    'default_assigned_group': 'administrative_editors',
                    'default_assigned_user': 'liege.urban.schedule.assign_task_owner',
                    'creation_state': ('display_in_progress',),
                    'starting_states': ('display_in_progress',),
                    'ending_states': ('authorized', 'abandoned', 'refused'),
                    'start_conditions': (
                        StartConditionObject('liege.urban.schedule.display_completed'),
                    ),
                    'start_date': 'schedule.start_date.task_starting_date',
                    'additional_delay': 0,
                },
            ],
        },
    ],
}
