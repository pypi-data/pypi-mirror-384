
import json
from typing import Optional, Callable
from .process_record import ProcessRecord
from ._session import _Session


class PostOutputSession(_Session):

    """Session class to manage custom post-output process lifecycle.

    Initializes post-output process record and provides run() method to execute custom logic post-output completion,
     handle failures and update metadata.
    """
    def __init__(self, output_name: Optional[str] = None, output_source_name: Optional[str] = None, project_name: Optional[str] = None):
        """Initialize custom post-output session and start a new post-output process.

        Args:
            input_id (Optional[int]): Optional input_id of the batch for interactive testing.
                Leave blank for production use.
        """
        super().__init__()
        # initialize process
        if output_name is not None:
            self.process_parameters["output_name"] = output_name
            self.process_parameters["output_source_name"] = output_source_name
            self.process_parameters["project_name"] = project_name

        process = self._pg.sql("select sparky.sdk_new_post_output(%s)", (json.dumps(self.process_parameters),))
        self.process = ProcessRecord(process)

    def file_path(self):
        """Returns file path for the file generated by output process"""
        return self.process.parameters.get("file_path")

    def run(self, po_commands: Callable[[],None]):

        """Save parsed file from the provided DataFrame, and upload it into the DataForge data lake.

        Writes the DataFrame to parsed Parquet file,
        updates the input record with status, file size, record count, and notifies
        the Core API of process completion. On failure, updates logs and flags the input and process
        records as failed.

        Args:
            po_commands (po_commands: Callable[[],None]): The custom-defined, parameterless def containing post-output logic.
            Returns None
        """
        try:
            if not self._is_open:
                raise Exception("Session is closed")
            self.log(f"Running post output def {po_commands}")
            po_commands()
            self.log(f"Post output execution completed successfully")
            self._end_process("P")

        except Exception as e:
            self._log_fail(e)
            self._end_process("F")

