#!/usr/bin/env python3
"""
Independent Aggregation Agent Test Script

This script tests the aggregation_agent independently with test data and context integration.
"""

import os
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent / ".." / "src"))
from aggregation_agent.agent import AggregationAgent

def main():
    """Run the aggregation agent independently with test data."""
    print("üìä Independent Aggregation Agent Test")
    print("=" * 50)
    
    # Initialize the agent
    print("Initializing Aggregation Agent...")
    agent = AggregationAgent()
    
    # Load test data and domain schema
    test_data_dir = Path(__file__).parent / ".." / "test_data" / "healthcare_analytics"
    data_file = test_data_dir / "patient_metrics.csv"
    domain_schema = test_data_dir / "healthcare_analytics.json"
    
    if not data_file.exists():
        print(f"‚ùå Test data file not found: {data_file}")
        return
    
    if not domain_schema.exists():
        print(f"‚ùå Domain schema file not found: {domain_schema}")
        return
    
    print(f"‚úÖ Test data found: {data_file}")
    print(f"‚úÖ Domain schema found: {domain_schema}")
    
    # Create task data with enriched context
    task_data = {
        "file": str(data_file),
        "problem_context": "Aggregate healthcare patient metrics for trend analysis and department performance comparison",
        "domain_schema": str(domain_schema),
        "goal": "Create comprehensive patient health trend analysis and department performance metrics",
        "business_context": "Healthcare analytics requires accurate aggregation for patient monitoring and department optimization",
        "compliance_requirements": ["HIPAA", "PHI data protection"],
        "data_quality_standards": {"completeness_threshold": 0.95, "accuracy_threshold": 0.90},
        "workflow_id": "independent_test",
        "workflow_storage_path": "outputs/independent_test",
        "enriched_context": {
            "workflow_context": {
                "goal": "Create comprehensive patient health trend analysis and department performance metrics",
                "complexity": "moderate",
                "risk_level": "medium",
                "optimization_requirements": ["aggregation_accuracy", "trend_analysis", "performance_metrics"]
            },
            "domain_knowledge": {
                "domain": "healthcare_analytics",
                "business_context": {
                    "industry": "healthcare",
                    "data_sensitivity": "high",
                    "compliance": "HIPAA",
                    "regulations": ["PHI data protection", "Clinical data standards"]
                },
                "data_files": ["patient_metrics.csv"],
                "constraints": {
                    "privacy": "high",
                    "security": "high",
                    "accuracy": "critical"
                },
                "stakeholders": ["data_analysts", "clinicians", "healthcare_administrators"]
            },
            "execution_context": {
                "current_step": {
                    "step_name": "data_aggregation",
                    "step_type": "data_analysis"
                },
                "execution_progress": {
                    "current_phase": "data_analysis",
                    "completed_steps": 4,
                    "total_steps": 6
                }
            }
        }
    }
    
    print("\nüìã Task Data Created:")
    print(f"   Problem Context: {task_data['problem_context']}")
    print(f"   Domain: {task_data['enriched_context']['domain_knowledge']['domain']}")
    print(f"   Goal: {task_data['enriched_context']['workflow_context']['goal']}")
    print(f"   Compliance: {task_data['enriched_context']['domain_knowledge']['business_context']['compliance']}")
    
    # Execute the task
    print("\nüöÄ Executing Aggregation Task...")
    try:
        result = agent.execute_task(task_data)
        
        if result.get("success"):
            print("‚úÖ Aggregation task completed successfully!")
            print(f"   Agent: {result['agent']}")
            
            # Display aggregation results
            if 'result' in result:
                print(f"\nüìä Aggregation Results:")
                print(f"   Task Type: {result['result']['task_type']}")
                print(f"   Status: {result['result']['status']}")
                print(f"   Message: {result['result']['message']}")
                
                # Display recommendations
                if 'recommendations' in result['result']:
                    recs = result['result']['recommendations']
                    print(f"\nüí° Aggregation Recommendations:")
                    for i, rec in enumerate(recs):
                        print(f"     {i+1}. {rec}")
            
            # Display context analysis results
            if 'context_analysis' in result['result']:
                context = result['result']['context_analysis']
                print(f"\nüîç Context Analysis Results:")
                print(f"   Domain: {context['domain']}")
                print(f"   Workflow Goal: {context['workflow_goal']}")
                print(f"   Context Quality Score: {context['context_quality_score']:.2f}")
            
            # Display AI recommendations
            if 'ai_recommendations' in result['result']:
                ai_recs = result['result']['ai_recommendations']
                print(f"\nü§ñ AI Recommendations Generated:")
                print(f"   Data Processing: {len(ai_recs['data_processing'])} recommendations")
                print(f"   Quality Checks: {len(ai_recs['quality_checks'])} recommendations")
                print(f"   Optimization Strategies: {len(ai_recs['optimization_strategies'])} recommendations")
                print(f"   Compliance Measures: {len(ai_recs['compliance_measures'])} recommendations")
                
                if ai_recs['data_processing']:
                    print(f"\n   Sample Data Processing Recommendations:")
                    for i, rec in enumerate(ai_recs['data_processing'][:3]):
                        print(f"     {i+1}. {rec}")
            
            # Check for stored outputs
            output_dir = Path("outputs/independent_test")
            if output_dir.exists():
                print(f"\nüíæ Results stored in: {output_dir}")
                # List stored files
                for file_path in output_dir.rglob("*"):
                    if file_path.is_file():
                        print(f"   üìÑ {file_path.relative_to(output_dir)}")
            else:
                print("\n‚ö†Ô∏è  No output directory found - check storage configuration")
                
        else:
            print(f"‚ùå Aggregation task failed: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"‚ùå Task execution error: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 50)
    print("Independent Aggregation Agent Test Completed!")

if __name__ == "__main__":
    main()
