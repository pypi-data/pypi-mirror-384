# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import native_driver_python
else:
    import native_driver_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


TypeDBDriverExceptionNative = native_driver_python.TypeDBDriverExceptionNative

native_driver_python.init_logging()

class Error(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Error

# Register Error in native_driver_python:
native_driver_python.Error_swigregister(Error)
class Credentials(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Credentials

# Register Credentials in native_driver_python:
native_driver_python.Credentials_swigregister(Credentials)
class DriverOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_DriverOptions

# Register DriverOptions in native_driver_python:
native_driver_python.DriverOptions_swigregister(DriverOptions)
class TransactionOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_TransactionOptions

# Register TransactionOptions in native_driver_python:
native_driver_python.TransactionOptions_swigregister(TransactionOptions)
class QueryOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_QueryOptions

# Register QueryOptions in native_driver_python:
native_driver_python.QueryOptions_swigregister(QueryOptions)
class TypeDBDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_TypeDBDriver

# Register TypeDBDriver in native_driver_python:
native_driver_python.TypeDBDriver_swigregister(TypeDBDriver)
class Transaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Transaction

# Register Transaction in native_driver_python:
native_driver_python.Transaction_swigregister(Transaction)
class Database(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Database

# Register Database in native_driver_python:
native_driver_python.Database_swigregister(Database)
class DatabaseIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_DatabaseIterator

# Register DatabaseIterator in native_driver_python:
native_driver_python.DatabaseIterator_swigregister(DatabaseIterator)
class User(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_User

# Register User in native_driver_python:
native_driver_python.User_swigregister(User)
class UserIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_UserIterator

# Register UserIterator in native_driver_python:
native_driver_python.UserIterator_swigregister(UserIterator)
class Concept(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_Concept

# Register Concept in native_driver_python:
native_driver_python.Concept_swigregister(Concept)
class ConceptIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptIterator

# Register ConceptIterator in native_driver_python:
native_driver_python.ConceptIterator_swigregister(ConceptIterator)
class ConceptRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptRow

# Register ConceptRow in native_driver_python:
native_driver_python.ConceptRow_swigregister(ConceptRow)
class ConceptRowIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptRowIterator

# Register ConceptRowIterator in native_driver_python:
native_driver_python.ConceptRowIterator_swigregister(ConceptRowIterator)
class StringAndOptValueIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringAndOptValueIterator

# Register StringAndOptValueIterator in native_driver_python:
native_driver_python.StringAndOptValueIterator_swigregister(StringAndOptValueIterator)
class StringIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringIterator

# Register StringIterator in native_driver_python:
native_driver_python.StringIterator_swigregister(StringIterator)
class QueryAnswer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_QueryAnswer

# Register QueryAnswer in native_driver_python:
native_driver_python.QueryAnswer_swigregister(QueryAnswer)
class BoolPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_BoolPromise

# Register BoolPromise in native_driver_python:
native_driver_python.BoolPromise_swigregister(BoolPromise)
class ConceptPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_ConceptPromise

# Register ConceptPromise in native_driver_python:
native_driver_python.ConceptPromise_swigregister(ConceptPromise)
class StringPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_StringPromise

# Register StringPromise in native_driver_python:
native_driver_python.StringPromise_swigregister(StringPromise)
class QueryAnswerPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_QueryAnswerPromise

# Register QueryAnswerPromise in native_driver_python:
native_driver_python.QueryAnswerPromise_swigregister(QueryAnswerPromise)
class VoidPromise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = native_driver_python.delete_VoidPromise

# Register VoidPromise in native_driver_python:
native_driver_python.VoidPromise_swigregister(VoidPromise)
class TransactionCallbackDirector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TransactionCallbackDirector:
            _self = None
        else:
            _self = self
        native_driver_python.TransactionCallbackDirector_swiginit(self, native_driver_python.new_TransactionCallbackDirector(_self, ))
    __swig_destroy__ = native_driver_python.delete_TransactionCallbackDirector

    def callback(self, arg0):
        return native_driver_python.TransactionCallbackDirector_callback(self, arg0)
    def __disown__(self):
        self.this.disown()
        native_driver_python.disown_TransactionCallbackDirector(self)
        return weakref.proxy(self)

# Register TransactionCallbackDirector in native_driver_python:
native_driver_python.TransactionCallbackDirector_swigregister(TransactionCallbackDirector)

def transaction_on_close(transaction, handler):
    return native_driver_python.transaction_on_close(transaction, handler)
ReadQuery = native_driver_python.ReadQuery
WriteQuery = native_driver_python.WriteQuery
SchemaQuery = native_driver_python.SchemaQuery
Read = native_driver_python.Read
Write = native_driver_python.Write
Schema = native_driver_python.Schema
class DatetimeInNanos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    seconds = property(native_driver_python.DatetimeInNanos_seconds_get, native_driver_python.DatetimeInNanos_seconds_set)
    subsec_nanos = property(native_driver_python.DatetimeInNanos_subsec_nanos_get, native_driver_python.DatetimeInNanos_subsec_nanos_set)
    __swig_destroy__ = native_driver_python.delete_DatetimeInNanos

# Register DatetimeInNanos in native_driver_python:
native_driver_python.DatetimeInNanos_swigregister(DatetimeInNanos)
class DatetimeAndTimeZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    datetime_in_nanos = property(native_driver_python.DatetimeAndTimeZone_datetime_in_nanos_get, native_driver_python.DatetimeAndTimeZone_datetime_in_nanos_set)
    zone_name = property(native_driver_python.DatetimeAndTimeZone_zone_name_get, native_driver_python.DatetimeAndTimeZone_zone_name_set)
    local_minus_utc_offset = property(native_driver_python.DatetimeAndTimeZone_local_minus_utc_offset_get, native_driver_python.DatetimeAndTimeZone_local_minus_utc_offset_set)
    is_fixed_offset = property(native_driver_python.DatetimeAndTimeZone_is_fixed_offset_get, native_driver_python.DatetimeAndTimeZone_is_fixed_offset_set)
    __swig_destroy__ = native_driver_python.delete_DatetimeAndTimeZone

# Register DatetimeAndTimeZone in native_driver_python:
native_driver_python.DatetimeAndTimeZone_swigregister(DatetimeAndTimeZone)
class StringAndOptValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    string = property(native_driver_python.StringAndOptValue_string_get, native_driver_python.StringAndOptValue_string_set)
    value = property(native_driver_python.StringAndOptValue_value_get, native_driver_python.StringAndOptValue_value_set)
    __swig_destroy__ = native_driver_python.delete_StringAndOptValue

# Register StringAndOptValue in native_driver_python:
native_driver_python.StringAndOptValue_swigregister(StringAndOptValue)
class Decimal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    integer = property(native_driver_python.Decimal_integer_get, native_driver_python.Decimal_integer_set)
    fractional = property(native_driver_python.Decimal_fractional_get, native_driver_python.Decimal_fractional_set)
    __swig_destroy__ = native_driver_python.delete_Decimal

# Register Decimal in native_driver_python:
native_driver_python.Decimal_swigregister(Decimal)
class Duration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    months = property(native_driver_python.Duration_months_get, native_driver_python.Duration_months_set)
    days = property(native_driver_python.Duration_days_get, native_driver_python.Duration_days_set)
    nanos = property(native_driver_python.Duration_nanos_get, native_driver_python.Duration_nanos_set)
    __swig_destroy__ = native_driver_python.delete_Duration

# Register Duration in native_driver_python:
native_driver_python.Duration_swigregister(Duration)

def query_answer_promise_resolve(promise):
    return native_driver_python.query_answer_promise_resolve(promise)

def query_answer_promise_drop(promise):
    return native_driver_python.query_answer_promise_drop(promise)

def query_answer_get_query_type(query_answer):
    return native_driver_python.query_answer_get_query_type(query_answer)

def query_answer_is_ok(query_answer):
    return native_driver_python.query_answer_is_ok(query_answer)

def query_answer_is_concept_row_stream(query_answer):
    return native_driver_python.query_answer_is_concept_row_stream(query_answer)

def query_answer_is_concept_document_stream(query_answer):
    return native_driver_python.query_answer_is_concept_document_stream(query_answer)

def query_answer_into_rows(query_answer):

    query_answer.thisown = 0


    return native_driver_python.query_answer_into_rows(query_answer)

def query_answer_into_documents(query_answer):

    query_answer.thisown = 0


    return native_driver_python.query_answer_into_documents(query_answer)

def concept_row_get_column_names(concept_row):
    return native_driver_python.concept_row_get_column_names(concept_row)

def concept_row_get_query_type(concept_row):
    return native_driver_python.concept_row_get_query_type(concept_row)

def concept_row_get_concepts(concept_row):
    return native_driver_python.concept_row_get_concepts(concept_row)

def concept_row_get(concept_row, column_name):
    return native_driver_python.concept_row_get(concept_row, column_name)

def concept_row_get_index(concept_row, column_index):
    return native_driver_python.concept_row_get_index(concept_row, column_index)

def concept_row_equals(lhs, rhs):
    return native_driver_python.concept_row_equals(lhs, rhs)

def concept_row_to_string(concept_row):
    return native_driver_python.concept_row_to_string(concept_row)

def string_iterator_next(it):
    return native_driver_python.string_iterator_next(it)

def concept_promise_resolve(promise):
    return native_driver_python.concept_promise_resolve(promise)

def concept_promise_drop(promise):
    return native_driver_python.concept_promise_drop(promise)

def concept_row_iterator_next(it):
    return native_driver_python.concept_row_iterator_next(it)

def concept_iterator_next(it):
    return native_driver_python.concept_iterator_next(it)

def string_and_opt_value_iterator_next(it):
    return native_driver_python.string_and_opt_value_iterator_next(it)

def concept_try_get_iid(thing):
    return native_driver_python.concept_try_get_iid(thing)

def concept_get_label(concept):
    return native_driver_python.concept_get_label(concept)

def concept_try_get_label(concept):
    return native_driver_python.concept_try_get_label(concept)

def concept_try_get_value_type(concept):
    return native_driver_python.concept_try_get_value_type(concept)

def concept_try_get_value(concept):
    return native_driver_python.concept_try_get_value(concept)

def concept_is_boolean(concept):
    return native_driver_python.concept_is_boolean(concept)

def concept_is_integer(concept):
    return native_driver_python.concept_is_integer(concept)

def concept_is_double(concept):
    return native_driver_python.concept_is_double(concept)

def concept_is_decimal(concept):
    return native_driver_python.concept_is_decimal(concept)

def concept_is_string(concept):
    return native_driver_python.concept_is_string(concept)

def concept_is_date(concept):
    return native_driver_python.concept_is_date(concept)

def concept_is_datetime(concept):
    return native_driver_python.concept_is_datetime(concept)

def concept_is_datetime_tz(concept):
    return native_driver_python.concept_is_datetime_tz(concept)

def concept_is_duration(concept):
    return native_driver_python.concept_is_duration(concept)

def concept_is_struct(concept):
    return native_driver_python.concept_is_struct(concept)

def concept_get_boolean(concept):
    return native_driver_python.concept_get_boolean(concept)

def concept_get_integer(concept):
    return native_driver_python.concept_get_integer(concept)

def concept_get_double(concept):
    return native_driver_python.concept_get_double(concept)

def concept_get_decimal(concept):
    return native_driver_python.concept_get_decimal(concept)

def concept_get_string(concept):
    return native_driver_python.concept_get_string(concept)

def concept_get_date_as_seconds(concept):
    return native_driver_python.concept_get_date_as_seconds(concept)

def concept_get_datetime(concept):
    return native_driver_python.concept_get_datetime(concept)

def concept_get_datetime_tz(concept):
    return native_driver_python.concept_get_datetime_tz(concept)

def concept_get_duration(concept):
    return native_driver_python.concept_get_duration(concept)

def concept_get_struct(concept):
    return native_driver_python.concept_get_struct(concept)

def concept_equals(lhs, rhs):
    return native_driver_python.concept_equals(lhs, rhs)

def concept_is_entity_type(concept):
    return native_driver_python.concept_is_entity_type(concept)

def concept_is_relation_type(concept):
    return native_driver_python.concept_is_relation_type(concept)

def concept_is_attribute_type(concept):
    return native_driver_python.concept_is_attribute_type(concept)

def concept_is_role_type(concept):
    return native_driver_python.concept_is_role_type(concept)

def concept_is_entity(concept):
    return native_driver_python.concept_is_entity(concept)

def concept_is_relation(concept):
    return native_driver_python.concept_is_relation(concept)

def concept_is_attribute(concept):
    return native_driver_python.concept_is_attribute(concept)

def concept_is_value(concept):
    return native_driver_python.concept_is_value(concept)

def concept_to_string(concept):
    return native_driver_python.concept_to_string(concept)

def entity_get_type(entity):
    return native_driver_python.entity_get_type(entity)

def relation_get_type(relation):
    return native_driver_python.relation_get_type(relation)

def attribute_get_type(attribute):
    return native_driver_python.attribute_get_type(attribute)

def driver_open_with_description(address, credentials, driver_options, driver_lang):
    return native_driver_python.driver_open_with_description(address, credentials, driver_options, driver_lang)

def driver_is_open(driver):
    return native_driver_python.driver_is_open(driver)

def driver_force_close(driver):
    return native_driver_python.driver_force_close(driver)

def credentials_new(username, password):
    return native_driver_python.credentials_new(username, password)

def driver_options_new(is_tls_enabled, tls_root_ca):
    return native_driver_python.driver_options_new(is_tls_enabled, tls_root_ca)

def database_get_name(database):
    return native_driver_python.database_get_name(database)

def database_delete(database):
    return native_driver_python.database_delete(database)

def database_schema(database):
    return native_driver_python.database_schema(database)

def database_type_schema(database):
    return native_driver_python.database_type_schema(database)

def database_export_to_file(database, schema_file, data_file):
    return native_driver_python.database_export_to_file(database, schema_file, data_file)

def database_iterator_next(it):
    return native_driver_python.database_iterator_next(it)

def databases_all(driver):
    return native_driver_python.databases_all(driver)

def databases_create(driver, name):
    return native_driver_python.databases_create(driver, name)

def databases_import_from_file(driver, name, schema, data_file):
    return native_driver_python.databases_import_from_file(driver, name, schema, data_file)

def databases_contains(driver, name):
    return native_driver_python.databases_contains(driver, name)

def databases_get(driver, name):
    return native_driver_python.databases_get(driver, name)

def init_logging():
    return native_driver_python.init_logging()

def check_error():
    return native_driver_python.check_error()

def get_last_error():
    return native_driver_python.get_last_error()

def error_code(error):
    return native_driver_python.error_code(error)

def error_message(error):
    return native_driver_python.error_message(error)

def void_promise_resolve(promise):
    return native_driver_python.void_promise_resolve(promise)

def void_promise_drop(promise):
    return native_driver_python.void_promise_drop(promise)

def bool_promise_resolve(promise):
    return native_driver_python.bool_promise_resolve(promise)

def bool_promise_drop(promise):
    return native_driver_python.bool_promise_drop(promise)

def string_promise_resolve(promise):
    return native_driver_python.string_promise_resolve(promise)

def string_promise_drop(promise):
    return native_driver_python.string_promise_drop(promise)

def query_options_new():
    return native_driver_python.query_options_new()

def query_options_set_include_instance_types(options, include_instance_types):
    return native_driver_python.query_options_set_include_instance_types(options, include_instance_types)

def query_options_get_include_instance_types(options):
    return native_driver_python.query_options_get_include_instance_types(options)

def query_options_has_include_instance_types(options):
    return native_driver_python.query_options_has_include_instance_types(options)

def query_options_set_prefetch_size(options, prefetch_size):
    return native_driver_python.query_options_set_prefetch_size(options, prefetch_size)

def query_options_get_prefetch_size(options):
    return native_driver_python.query_options_get_prefetch_size(options)

def query_options_has_prefetch_size(options):
    return native_driver_python.query_options_has_prefetch_size(options)

def transaction_new(driver, database_name, type_, options):
    return native_driver_python.transaction_new(driver, database_name, type_, options)

def transaction_query(transaction, query, options):
    return native_driver_python.transaction_query(transaction, query, options)

def transaction_close(txn):
    return native_driver_python.transaction_close(txn)

def transaction_commit(txn):
    return native_driver_python.transaction_commit(txn)

def transaction_rollback(txn):
    return native_driver_python.transaction_rollback(txn)

def transaction_is_open(txn):
    return native_driver_python.transaction_is_open(txn)

def transaction_options_new():
    return native_driver_python.transaction_options_new()

def transaction_options_set_transaction_timeout_millis(options, timeout_millis):
    return native_driver_python.transaction_options_set_transaction_timeout_millis(options, timeout_millis)

def transaction_options_get_transaction_timeout_millis(options):
    return native_driver_python.transaction_options_get_transaction_timeout_millis(options)

def transaction_options_has_transaction_timeout_millis(options):
    return native_driver_python.transaction_options_has_transaction_timeout_millis(options)

def transaction_options_set_schema_lock_acquire_timeout_millis(options, timeout_millis):
    return native_driver_python.transaction_options_set_schema_lock_acquire_timeout_millis(options, timeout_millis)

def transaction_options_get_schema_lock_acquire_timeout_millis(options):
    return native_driver_python.transaction_options_get_schema_lock_acquire_timeout_millis(options)

def transaction_options_has_schema_lock_acquire_timeout_millis(options):
    return native_driver_python.transaction_options_has_schema_lock_acquire_timeout_millis(options)

def user_get_name(user):
    return native_driver_python.user_get_name(user)

def user_update_password(user, password):
    return native_driver_python.user_update_password(user, password)

def user_delete(user):
    return native_driver_python.user_delete(user)

def user_iterator_next(it):
    return native_driver_python.user_iterator_next(it)

def users_all(driver):
    return native_driver_python.users_all(driver)

def users_contains(driver, username):
    return native_driver_python.users_contains(driver, username)

def users_create(driver, username, password):
    return native_driver_python.users_create(driver, username, password)

def users_get(driver, username):
    return native_driver_python.users_get(driver, username)

def users_get_current_user(driver):
    return native_driver_python.users_get_current_user(driver)

