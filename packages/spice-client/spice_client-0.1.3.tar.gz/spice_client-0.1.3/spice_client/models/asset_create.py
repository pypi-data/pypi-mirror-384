# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class AssetCreate(BaseModel):
    """
    AssetCreate
    """ # noqa: E501
    experiment_id: Optional[UUID] = None
    is_deleted: StrictBool
    original_filename: StrictStr
    processing_message: Optional[StrictStr] = None
    processing_status: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    s3_key: StrictStr
    size_bytes: Optional[StrictInt] = None
    type: StrictStr
    uploaded_by: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["experiment_id", "is_deleted", "original_filename", "processing_message", "processing_status", "role", "s3_key", "size_bytes", "type", "uploaded_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if experiment_id (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_id is None and "experiment_id" in self.model_fields_set:
            _dict['experiment_id'] = None

        # set to None if processing_message (nullable) is None
        # and model_fields_set contains the field
        if self.processing_message is None and "processing_message" in self.model_fields_set:
            _dict['processing_message'] = None

        # set to None if processing_status (nullable) is None
        # and model_fields_set contains the field
        if self.processing_status is None and "processing_status" in self.model_fields_set:
            _dict['processing_status'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.size_bytes is None and "size_bytes" in self.model_fields_set:
            _dict['size_bytes'] = None

        # set to None if uploaded_by (nullable) is None
        # and model_fields_set contains the field
        if self.uploaded_by is None and "uploaded_by" in self.model_fields_set:
            _dict['uploaded_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "experiment_id": obj.get("experiment_id"),
            "is_deleted": obj.get("is_deleted"),
            "original_filename": obj.get("original_filename"),
            "processing_message": obj.get("processing_message"),
            "processing_status": obj.get("processing_status"),
            "role": obj.get("role"),
            "s3_key": obj.get("s3_key"),
            "size_bytes": obj.get("size_bytes"),
            "type": obj.get("type"),
            "uploaded_by": obj.get("uploaded_by")
        })
        return _obj


