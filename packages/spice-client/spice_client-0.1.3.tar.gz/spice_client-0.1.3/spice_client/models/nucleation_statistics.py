# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class NucleationStatistics(BaseModel):
    """
    Summary statistics for nucleation events, used for sample and treatment analysis
    """ # noqa: E501
    frozen_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of wells that nucleated (froze)")
    liquid_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of wells that remained liquid")
    mean_nucleation_temp_celsius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean nucleation temperature in Celsius for wells that froze")
    median_nucleation_time_seconds: Optional[StrictInt] = Field(default=None, description="Median nucleation time in seconds for wells that froze")
    success_rate: Union[StrictFloat, StrictInt] = Field(description="Success rate as a fraction (0.0 to 1.0)")
    total_wells: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of wells tested")
    __properties: ClassVar[List[str]] = ["frozen_count", "liquid_count", "mean_nucleation_temp_celsius", "median_nucleation_time_seconds", "success_rate", "total_wells"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NucleationStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mean_nucleation_temp_celsius (nullable) is None
        # and model_fields_set contains the field
        if self.mean_nucleation_temp_celsius is None and "mean_nucleation_temp_celsius" in self.model_fields_set:
            _dict['mean_nucleation_temp_celsius'] = None

        # set to None if median_nucleation_time_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.median_nucleation_time_seconds is None and "median_nucleation_time_seconds" in self.model_fields_set:
            _dict['median_nucleation_time_seconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NucleationStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frozen_count": obj.get("frozen_count"),
            "liquid_count": obj.get("liquid_count"),
            "mean_nucleation_temp_celsius": obj.get("mean_nucleation_temp_celsius"),
            "median_nucleation_time_seconds": obj.get("median_nucleation_time_seconds"),
            "success_rate": obj.get("success_rate"),
            "total_wells": obj.get("total_wells")
        })
        return _obj


