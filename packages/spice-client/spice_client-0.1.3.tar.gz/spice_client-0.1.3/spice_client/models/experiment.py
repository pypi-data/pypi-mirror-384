# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from spice_client.models.experiment_results_response import ExperimentResultsResponse
from spice_client.models.region import Region
from typing import Optional, Set
from typing_extensions import Self

class Experiment(BaseModel):
    """
    Experiment
    """ # noqa: E501
    created_at: datetime
    id: UUID
    is_calibration: StrictBool
    last_updated: datetime
    name: StrictStr
    performed_at: Optional[datetime] = None
    regions: List[Region]
    remarks: Optional[StrictStr] = None
    results: Optional[ExperimentResultsResponse] = None
    temperature_end: Optional[StrictStr] = None
    temperature_ramp: Optional[StrictStr] = None
    temperature_start: Optional[StrictStr] = None
    tray_configuration_id: Optional[UUID] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["created_at", "id", "is_calibration", "last_updated", "name", "performed_at", "regions", "remarks", "results", "temperature_end", "temperature_ramp", "temperature_start", "tray_configuration_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Experiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item_regions in self.regions:
                if _item_regions:
                    _items.append(_item_regions.to_dict())
            _dict['regions'] = _items
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict['results'] = self.results.to_dict()
        # set to None if performed_at (nullable) is None
        # and model_fields_set contains the field
        if self.performed_at is None and "performed_at" in self.model_fields_set:
            _dict['performed_at'] = None

        # set to None if remarks (nullable) is None
        # and model_fields_set contains the field
        if self.remarks is None and "remarks" in self.model_fields_set:
            _dict['remarks'] = None

        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict['results'] = None

        # set to None if temperature_end (nullable) is None
        # and model_fields_set contains the field
        if self.temperature_end is None and "temperature_end" in self.model_fields_set:
            _dict['temperature_end'] = None

        # set to None if temperature_ramp (nullable) is None
        # and model_fields_set contains the field
        if self.temperature_ramp is None and "temperature_ramp" in self.model_fields_set:
            _dict['temperature_ramp'] = None

        # set to None if temperature_start (nullable) is None
        # and model_fields_set contains the field
        if self.temperature_start is None and "temperature_start" in self.model_fields_set:
            _dict['temperature_start'] = None

        # set to None if tray_configuration_id (nullable) is None
        # and model_fields_set contains the field
        if self.tray_configuration_id is None and "tray_configuration_id" in self.model_fields_set:
            _dict['tray_configuration_id'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Experiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "is_calibration": obj.get("is_calibration"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "performed_at": obj.get("performed_at"),
            "regions": [Region.from_dict(_item) for _item in obj["regions"]] if obj.get("regions") is not None else None,
            "remarks": obj.get("remarks"),
            "results": ExperimentResultsResponse.from_dict(obj["results"]) if obj.get("results") is not None else None,
            "temperature_end": obj.get("temperature_end"),
            "temperature_ramp": obj.get("temperature_ramp"),
            "temperature_start": obj.get("temperature_start"),
            "tray_configuration_id": obj.get("tray_configuration_id"),
            "username": obj.get("username")
        })
        return _obj


