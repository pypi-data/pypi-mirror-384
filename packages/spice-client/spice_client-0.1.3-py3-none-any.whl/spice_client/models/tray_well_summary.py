# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from uuid import UUID
from spice_client.models.sample import Sample
from spice_client.models.temperature_data_with_probes import TemperatureDataWithProbes
from spice_client.models.treatment import Treatment
from typing import Optional, Set
from typing_extensions import Self

class TrayWellSummary(BaseModel):
    """
    TrayWellSummary
    """ # noqa: E501
    column_number: StrictInt
    coordinate: StrictStr
    dilution_factor: Optional[StrictInt] = None
    first_phase_change_time: Optional[datetime] = None
    image_asset_id: Optional[UUID] = None
    row_letter: StrictStr
    sample: Optional[Sample] = None
    temperatures: Optional[TemperatureDataWithProbes] = None
    total_phase_changes: Annotated[int, Field(strict=True, ge=0)]
    treatment: Optional[Treatment] = None
    __properties: ClassVar[List[str]] = ["column_number", "coordinate", "dilution_factor", "first_phase_change_time", "image_asset_id", "row_letter", "sample", "temperatures", "total_phase_changes", "treatment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrayWellSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sample
        if self.sample:
            _dict['sample'] = self.sample.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temperatures
        if self.temperatures:
            _dict['temperatures'] = self.temperatures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of treatment
        if self.treatment:
            _dict['treatment'] = self.treatment.to_dict()
        # set to None if dilution_factor (nullable) is None
        # and model_fields_set contains the field
        if self.dilution_factor is None and "dilution_factor" in self.model_fields_set:
            _dict['dilution_factor'] = None

        # set to None if first_phase_change_time (nullable) is None
        # and model_fields_set contains the field
        if self.first_phase_change_time is None and "first_phase_change_time" in self.model_fields_set:
            _dict['first_phase_change_time'] = None

        # set to None if image_asset_id (nullable) is None
        # and model_fields_set contains the field
        if self.image_asset_id is None and "image_asset_id" in self.model_fields_set:
            _dict['image_asset_id'] = None

        # set to None if sample (nullable) is None
        # and model_fields_set contains the field
        if self.sample is None and "sample" in self.model_fields_set:
            _dict['sample'] = None

        # set to None if temperatures (nullable) is None
        # and model_fields_set contains the field
        if self.temperatures is None and "temperatures" in self.model_fields_set:
            _dict['temperatures'] = None

        # set to None if treatment (nullable) is None
        # and model_fields_set contains the field
        if self.treatment is None and "treatment" in self.model_fields_set:
            _dict['treatment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrayWellSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column_number": obj.get("column_number"),
            "coordinate": obj.get("coordinate"),
            "dilution_factor": obj.get("dilution_factor"),
            "first_phase_change_time": obj.get("first_phase_change_time"),
            "image_asset_id": obj.get("image_asset_id"),
            "row_letter": obj.get("row_letter"),
            "sample": Sample.from_dict(obj["sample"]) if obj.get("sample") is not None else None,
            "temperatures": TemperatureDataWithProbes.from_dict(obj["temperatures"]) if obj.get("temperatures") is not None else None,
            "total_phase_changes": obj.get("total_phase_changes"),
            "treatment": Treatment.from_dict(obj["treatment"]) if obj.get("treatment") is not None else None
        })
        return _obj


