# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from spice_client.models.experiment import Experiment
from spice_client.models.tray_update import TrayUpdate
from typing import Optional, Set
from typing_extensions import Self

class TrayConfigurationUpdate(BaseModel):
    """
    TrayConfigurationUpdate
    """ # noqa: E501
    associated_experiments: Optional[List[Experiment]] = None
    experiment_default: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    trays: Optional[List[TrayUpdate]] = None
    __properties: ClassVar[List[str]] = ["associated_experiments", "experiment_default", "name", "trays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrayConfigurationUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_experiments (list)
        _items = []
        if self.associated_experiments:
            for _item_associated_experiments in self.associated_experiments:
                if _item_associated_experiments:
                    _items.append(_item_associated_experiments.to_dict())
            _dict['associated_experiments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trays (list)
        _items = []
        if self.trays:
            for _item_trays in self.trays:
                if _item_trays:
                    _items.append(_item_trays.to_dict())
            _dict['trays'] = _items
        # set to None if experiment_default (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_default is None and "experiment_default" in self.model_fields_set:
            _dict['experiment_default'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrayConfigurationUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associated_experiments": [Experiment.from_dict(_item) for _item in obj["associated_experiments"]] if obj.get("associated_experiments") is not None else None,
            "experiment_default": obj.get("experiment_default"),
            "name": obj.get("name"),
            "trays": [TrayUpdate.from_dict(_item) for _item in obj["trays"]] if obj.get("trays") is not None else None
        })
        return _obj


