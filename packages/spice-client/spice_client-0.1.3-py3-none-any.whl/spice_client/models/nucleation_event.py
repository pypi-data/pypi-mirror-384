# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class NucleationEvent(BaseModel):
    """
    Shared struct for nucleation events across experiments, samples, and treatments Represents the scientific result of ice nucleation for a single well Uses scientific naming conventions with explicit units
    """ # noqa: E501
    dilution_factor: Optional[StrictInt] = Field(default=None, description="Dilution factor applied to the sample in this well")
    experiment_date: Optional[datetime] = Field(default=None, description="Date and time when the experiment was performed")
    experiment_id: UUID = Field(description="Unique identifier for the experiment this event occurred in")
    experiment_name: StrictStr = Field(description="Human-readable name of the experiment")
    final_state: StrictStr = Field(description="Final state of the well: \"frozen\", \"liquid\", or \"`no_data`\"")
    freezing_temperature_avg: Optional[StrictStr] = Field(default=None, description="UI compatibility field - same as `nucleation_temperature_avg_celsius`")
    freezing_time_seconds: Optional[StrictInt] = Field(default=None, description="UI compatibility field - same as `nucleation_time_seconds`")
    nucleation_temperature_avg_celsius: Optional[StrictStr] = Field(default=None, description="Average temperature across all temperature probes at nucleation event, in Celsius")
    nucleation_time_seconds: Optional[StrictInt] = Field(default=None, description="Time from experiment start to nucleation in seconds")
    tray_name: Optional[StrictStr] = Field(default=None, description="Name of the tray/plate (e.g., \"P1\", \"P2\")")
    treatment_id: Optional[UUID] = Field(default=None, description="ID of the treatment applied to this sample")
    treatment_name: Optional[StrictStr] = Field(default=None, description="Name of the treatment applied to this sample")
    well_coordinate: StrictStr = Field(description="Well coordinate in standard format (e.g., \"A1\", \"B2\", \"H12\")")
    __properties: ClassVar[List[str]] = ["dilution_factor", "experiment_date", "experiment_id", "experiment_name", "final_state", "freezing_temperature_avg", "freezing_time_seconds", "nucleation_temperature_avg_celsius", "nucleation_time_seconds", "tray_name", "treatment_id", "treatment_name", "well_coordinate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NucleationEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if dilution_factor (nullable) is None
        # and model_fields_set contains the field
        if self.dilution_factor is None and "dilution_factor" in self.model_fields_set:
            _dict['dilution_factor'] = None

        # set to None if experiment_date (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_date is None and "experiment_date" in self.model_fields_set:
            _dict['experiment_date'] = None

        # set to None if freezing_temperature_avg (nullable) is None
        # and model_fields_set contains the field
        if self.freezing_temperature_avg is None and "freezing_temperature_avg" in self.model_fields_set:
            _dict['freezing_temperature_avg'] = None

        # set to None if freezing_time_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.freezing_time_seconds is None and "freezing_time_seconds" in self.model_fields_set:
            _dict['freezing_time_seconds'] = None

        # set to None if nucleation_temperature_avg_celsius (nullable) is None
        # and model_fields_set contains the field
        if self.nucleation_temperature_avg_celsius is None and "nucleation_temperature_avg_celsius" in self.model_fields_set:
            _dict['nucleation_temperature_avg_celsius'] = None

        # set to None if nucleation_time_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.nucleation_time_seconds is None and "nucleation_time_seconds" in self.model_fields_set:
            _dict['nucleation_time_seconds'] = None

        # set to None if tray_name (nullable) is None
        # and model_fields_set contains the field
        if self.tray_name is None and "tray_name" in self.model_fields_set:
            _dict['tray_name'] = None

        # set to None if treatment_id (nullable) is None
        # and model_fields_set contains the field
        if self.treatment_id is None and "treatment_id" in self.model_fields_set:
            _dict['treatment_id'] = None

        # set to None if treatment_name (nullable) is None
        # and model_fields_set contains the field
        if self.treatment_name is None and "treatment_name" in self.model_fields_set:
            _dict['treatment_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NucleationEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dilution_factor": obj.get("dilution_factor"),
            "experiment_date": obj.get("experiment_date"),
            "experiment_id": obj.get("experiment_id"),
            "experiment_name": obj.get("experiment_name"),
            "final_state": obj.get("final_state"),
            "freezing_temperature_avg": obj.get("freezing_temperature_avg"),
            "freezing_time_seconds": obj.get("freezing_time_seconds"),
            "nucleation_temperature_avg_celsius": obj.get("nucleation_temperature_avg_celsius"),
            "nucleation_time_seconds": obj.get("nucleation_time_seconds"),
            "tray_name": obj.get("tray_name"),
            "treatment_id": obj.get("treatment_id"),
            "treatment_name": obj.get("treatment_name"),
            "well_coordinate": obj.get("well_coordinate")
        })
        return _obj


