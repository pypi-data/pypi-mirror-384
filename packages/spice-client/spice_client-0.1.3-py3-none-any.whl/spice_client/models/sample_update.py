# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from spice_client.models.location import Location
from spice_client.models.sample_type import SampleType
from spice_client.models.treatment_update import TreatmentUpdate
from typing import Optional, Set
from typing_extensions import Self

class SampleUpdate(BaseModel):
    """
    SampleUpdate
    """ # noqa: E501
    air_volume_litres: Optional[StrictStr] = None
    extraction_procedure: Optional[StrictStr] = None
    filter_substrate: Optional[StrictStr] = None
    flow_litres_per_minute: Optional[StrictStr] = None
    initial_concentration_gram_l: Optional[StrictStr] = None
    latitude: Optional[StrictStr] = None
    location: Optional[Location] = None
    location_id: Optional[UUID] = None
    longitude: Optional[StrictStr] = None
    material_description: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    remarks: Optional[StrictStr] = None
    start_time: Optional[datetime] = None
    stop_time: Optional[datetime] = None
    suspension_volume_litres: Optional[StrictStr] = None
    total_volume: Optional[StrictStr] = None
    treatments: Optional[List[TreatmentUpdate]] = None
    type: Optional[SampleType] = None
    well_volume_litres: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["air_volume_litres", "extraction_procedure", "filter_substrate", "flow_litres_per_minute", "initial_concentration_gram_l", "latitude", "location", "location_id", "longitude", "material_description", "name", "remarks", "start_time", "stop_time", "suspension_volume_litres", "total_volume", "treatments", "type", "well_volume_litres"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SampleUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in treatments (list)
        _items = []
        if self.treatments:
            for _item_treatments in self.treatments:
                if _item_treatments:
                    _items.append(_item_treatments.to_dict())
            _dict['treatments'] = _items
        # set to None if air_volume_litres (nullable) is None
        # and model_fields_set contains the field
        if self.air_volume_litres is None and "air_volume_litres" in self.model_fields_set:
            _dict['air_volume_litres'] = None

        # set to None if extraction_procedure (nullable) is None
        # and model_fields_set contains the field
        if self.extraction_procedure is None and "extraction_procedure" in self.model_fields_set:
            _dict['extraction_procedure'] = None

        # set to None if filter_substrate (nullable) is None
        # and model_fields_set contains the field
        if self.filter_substrate is None and "filter_substrate" in self.model_fields_set:
            _dict['filter_substrate'] = None

        # set to None if flow_litres_per_minute (nullable) is None
        # and model_fields_set contains the field
        if self.flow_litres_per_minute is None and "flow_litres_per_minute" in self.model_fields_set:
            _dict['flow_litres_per_minute'] = None

        # set to None if initial_concentration_gram_l (nullable) is None
        # and model_fields_set contains the field
        if self.initial_concentration_gram_l is None and "initial_concentration_gram_l" in self.model_fields_set:
            _dict['initial_concentration_gram_l'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['location_id'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if material_description (nullable) is None
        # and model_fields_set contains the field
        if self.material_description is None and "material_description" in self.model_fields_set:
            _dict['material_description'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if remarks (nullable) is None
        # and model_fields_set contains the field
        if self.remarks is None and "remarks" in self.model_fields_set:
            _dict['remarks'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if stop_time (nullable) is None
        # and model_fields_set contains the field
        if self.stop_time is None and "stop_time" in self.model_fields_set:
            _dict['stop_time'] = None

        # set to None if suspension_volume_litres (nullable) is None
        # and model_fields_set contains the field
        if self.suspension_volume_litres is None and "suspension_volume_litres" in self.model_fields_set:
            _dict['suspension_volume_litres'] = None

        # set to None if total_volume (nullable) is None
        # and model_fields_set contains the field
        if self.total_volume is None and "total_volume" in self.model_fields_set:
            _dict['total_volume'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if well_volume_litres (nullable) is None
        # and model_fields_set contains the field
        if self.well_volume_litres is None and "well_volume_litres" in self.model_fields_set:
            _dict['well_volume_litres'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SampleUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "air_volume_litres": obj.get("air_volume_litres"),
            "extraction_procedure": obj.get("extraction_procedure"),
            "filter_substrate": obj.get("filter_substrate"),
            "flow_litres_per_minute": obj.get("flow_litres_per_minute"),
            "initial_concentration_gram_l": obj.get("initial_concentration_gram_l"),
            "latitude": obj.get("latitude"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "location_id": obj.get("location_id"),
            "longitude": obj.get("longitude"),
            "material_description": obj.get("material_description"),
            "name": obj.get("name"),
            "remarks": obj.get("remarks"),
            "start_time": obj.get("start_time"),
            "stop_time": obj.get("stop_time"),
            "suspension_volume_litres": obj.get("suspension_volume_litres"),
            "total_volume": obj.get("total_volume"),
            "treatments": [TreatmentUpdate.from_dict(_item) for _item in obj["treatments"]] if obj.get("treatments") is not None else None,
            "type": obj.get("type"),
            "well_volume_litres": obj.get("well_volume_litres")
        })
        return _obj


