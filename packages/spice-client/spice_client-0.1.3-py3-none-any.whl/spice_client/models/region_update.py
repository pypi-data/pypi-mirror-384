# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from spice_client.models.region_treatment_summary import RegionTreatmentSummary
from typing import Optional, Set
from typing_extensions import Self

class RegionUpdate(BaseModel):
    """
    RegionUpdate
    """ # noqa: E501
    col_max: Optional[StrictInt] = None
    col_min: Optional[StrictInt] = None
    dilution_factor: Optional[StrictInt] = None
    display_colour_hex: Optional[StrictStr] = None
    experiment_id: Optional[UUID] = None
    is_background_key: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    row_max: Optional[StrictInt] = None
    row_min: Optional[StrictInt] = None
    tray_id: Optional[StrictInt] = None
    treatment: Optional[RegionTreatmentSummary] = None
    treatment_id: Optional[UUID] = None
    __properties: ClassVar[List[str]] = ["col_max", "col_min", "dilution_factor", "display_colour_hex", "experiment_id", "is_background_key", "name", "row_max", "row_min", "tray_id", "treatment", "treatment_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of treatment
        if self.treatment:
            _dict['treatment'] = self.treatment.to_dict()
        # set to None if col_max (nullable) is None
        # and model_fields_set contains the field
        if self.col_max is None and "col_max" in self.model_fields_set:
            _dict['col_max'] = None

        # set to None if col_min (nullable) is None
        # and model_fields_set contains the field
        if self.col_min is None and "col_min" in self.model_fields_set:
            _dict['col_min'] = None

        # set to None if dilution_factor (nullable) is None
        # and model_fields_set contains the field
        if self.dilution_factor is None and "dilution_factor" in self.model_fields_set:
            _dict['dilution_factor'] = None

        # set to None if display_colour_hex (nullable) is None
        # and model_fields_set contains the field
        if self.display_colour_hex is None and "display_colour_hex" in self.model_fields_set:
            _dict['display_colour_hex'] = None

        # set to None if experiment_id (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_id is None and "experiment_id" in self.model_fields_set:
            _dict['experiment_id'] = None

        # set to None if is_background_key (nullable) is None
        # and model_fields_set contains the field
        if self.is_background_key is None and "is_background_key" in self.model_fields_set:
            _dict['is_background_key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if row_max (nullable) is None
        # and model_fields_set contains the field
        if self.row_max is None and "row_max" in self.model_fields_set:
            _dict['row_max'] = None

        # set to None if row_min (nullable) is None
        # and model_fields_set contains the field
        if self.row_min is None and "row_min" in self.model_fields_set:
            _dict['row_min'] = None

        # set to None if tray_id (nullable) is None
        # and model_fields_set contains the field
        if self.tray_id is None and "tray_id" in self.model_fields_set:
            _dict['tray_id'] = None

        # set to None if treatment (nullable) is None
        # and model_fields_set contains the field
        if self.treatment is None and "treatment" in self.model_fields_set:
            _dict['treatment'] = None

        # set to None if treatment_id (nullable) is None
        # and model_fields_set contains the field
        if self.treatment_id is None and "treatment_id" in self.model_fields_set:
            _dict['treatment_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "col_max": obj.get("col_max"),
            "col_min": obj.get("col_min"),
            "dilution_factor": obj.get("dilution_factor"),
            "display_colour_hex": obj.get("display_colour_hex"),
            "experiment_id": obj.get("experiment_id"),
            "is_background_key": obj.get("is_background_key"),
            "name": obj.get("name"),
            "row_max": obj.get("row_max"),
            "row_min": obj.get("row_min"),
            "tray_id": obj.get("tray_id"),
            "treatment": RegionTreatmentSummary.from_dict(obj["treatment"]) if obj.get("treatment") is not None else None,
            "treatment_id": obj.get("treatment_id")
        })
        return _obj


