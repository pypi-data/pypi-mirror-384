# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from spice_client.models.probe_update import ProbeUpdate
from typing import Optional, Set
from typing_extensions import Self

class TrayUpdate(BaseModel):
    """
    TrayUpdate
    """ # noqa: E501
    lower_right_corner_x: Optional[StrictInt] = None
    lower_right_corner_y: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    order_sequence: Optional[StrictInt] = None
    probe_locations: Optional[List[ProbeUpdate]] = None
    qty_cols: Optional[StrictInt] = None
    qty_rows: Optional[StrictInt] = None
    rotation_degrees: Optional[StrictInt] = None
    tray_configuration_id: Optional[UUID] = None
    upper_left_corner_x: Optional[StrictInt] = None
    upper_left_corner_y: Optional[StrictInt] = None
    well_relative_diameter: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["lower_right_corner_x", "lower_right_corner_y", "name", "order_sequence", "probe_locations", "qty_cols", "qty_rows", "rotation_degrees", "tray_configuration_id", "upper_left_corner_x", "upper_left_corner_y", "well_relative_diameter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrayUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in probe_locations (list)
        _items = []
        if self.probe_locations:
            for _item_probe_locations in self.probe_locations:
                if _item_probe_locations:
                    _items.append(_item_probe_locations.to_dict())
            _dict['probe_locations'] = _items
        # set to None if lower_right_corner_x (nullable) is None
        # and model_fields_set contains the field
        if self.lower_right_corner_x is None and "lower_right_corner_x" in self.model_fields_set:
            _dict['lower_right_corner_x'] = None

        # set to None if lower_right_corner_y (nullable) is None
        # and model_fields_set contains the field
        if self.lower_right_corner_y is None and "lower_right_corner_y" in self.model_fields_set:
            _dict['lower_right_corner_y'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if order_sequence (nullable) is None
        # and model_fields_set contains the field
        if self.order_sequence is None and "order_sequence" in self.model_fields_set:
            _dict['order_sequence'] = None

        # set to None if qty_cols (nullable) is None
        # and model_fields_set contains the field
        if self.qty_cols is None and "qty_cols" in self.model_fields_set:
            _dict['qty_cols'] = None

        # set to None if qty_rows (nullable) is None
        # and model_fields_set contains the field
        if self.qty_rows is None and "qty_rows" in self.model_fields_set:
            _dict['qty_rows'] = None

        # set to None if rotation_degrees (nullable) is None
        # and model_fields_set contains the field
        if self.rotation_degrees is None and "rotation_degrees" in self.model_fields_set:
            _dict['rotation_degrees'] = None

        # set to None if tray_configuration_id (nullable) is None
        # and model_fields_set contains the field
        if self.tray_configuration_id is None and "tray_configuration_id" in self.model_fields_set:
            _dict['tray_configuration_id'] = None

        # set to None if upper_left_corner_x (nullable) is None
        # and model_fields_set contains the field
        if self.upper_left_corner_x is None and "upper_left_corner_x" in self.model_fields_set:
            _dict['upper_left_corner_x'] = None

        # set to None if upper_left_corner_y (nullable) is None
        # and model_fields_set contains the field
        if self.upper_left_corner_y is None and "upper_left_corner_y" in self.model_fields_set:
            _dict['upper_left_corner_y'] = None

        # set to None if well_relative_diameter (nullable) is None
        # and model_fields_set contains the field
        if self.well_relative_diameter is None and "well_relative_diameter" in self.model_fields_set:
            _dict['well_relative_diameter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrayUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lower_right_corner_x": obj.get("lower_right_corner_x"),
            "lower_right_corner_y": obj.get("lower_right_corner_y"),
            "name": obj.get("name"),
            "order_sequence": obj.get("order_sequence"),
            "probe_locations": [ProbeUpdate.from_dict(_item) for _item in obj["probe_locations"]] if obj.get("probe_locations") is not None else None,
            "qty_cols": obj.get("qty_cols"),
            "qty_rows": obj.get("qty_rows"),
            "rotation_degrees": obj.get("rotation_degrees"),
            "tray_configuration_id": obj.get("tray_configuration_id"),
            "upper_left_corner_x": obj.get("upper_left_corner_x"),
            "upper_left_corner_y": obj.get("upper_left_corner_y"),
            "well_relative_diameter": obj.get("well_relative_diameter")
        })
        return _obj


