# coding: utf-8

"""
    spice-api

    API for managing SPICE lab data in the EERL lab

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from spice_client.models.probe_temperature_reading_with_metadata import ProbeTemperatureReadingWithMetadata
from typing import Optional, Set
from typing_extensions import Self

class TemperatureDataWithProbes(BaseModel):
    """
    TemperatureDataWithProbes
    """ # noqa: E501
    average: Optional[StrictStr] = None
    experiment_id: UUID
    id: UUID
    image_filename: Optional[StrictStr] = None
    probe_readings: List[ProbeTemperatureReadingWithMetadata]
    timestamp: datetime
    __properties: ClassVar[List[str]] = ["average", "experiment_id", "id", "image_filename", "probe_readings", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemperatureDataWithProbes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in probe_readings (list)
        _items = []
        if self.probe_readings:
            for _item_probe_readings in self.probe_readings:
                if _item_probe_readings:
                    _items.append(_item_probe_readings.to_dict())
            _dict['probe_readings'] = _items
        # set to None if average (nullable) is None
        # and model_fields_set contains the field
        if self.average is None and "average" in self.model_fields_set:
            _dict['average'] = None

        # set to None if image_filename (nullable) is None
        # and model_fields_set contains the field
        if self.image_filename is None and "image_filename" in self.model_fields_set:
            _dict['image_filename'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemperatureDataWithProbes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average": obj.get("average"),
            "experiment_id": obj.get("experiment_id"),
            "id": obj.get("id"),
            "image_filename": obj.get("image_filename"),
            "probe_readings": [ProbeTemperatureReadingWithMetadata.from_dict(_item) for _item in obj["probe_readings"]] if obj.get("probe_readings") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj


