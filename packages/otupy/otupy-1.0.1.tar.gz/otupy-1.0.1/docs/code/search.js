window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "openc2lib", "modulename": "openc2lib", "kind": "module", "doc": "<p>OpenC2 library</p>\n\n<p>openc2lib provides an opensource implementation of the OpenC2 language and support for \nintegration of encoding formats and protocol syntax.</p>\n\n<p>All language elements are named according to the standard, with minor variations to\naccount for reserved keywords and characters.</p>\n\n<p>All the target and data types defined by the standard are available for creating OpenC2 \ncommands.</p>\n\n<p>The following base structures are also available for extending the language (see Sec. 3.1.1 of \nthe Language Specification):</p>\n\n<ul>\n<li><code>Enumerated</code></li>\n<li><code>EnumeratedID</code></li>\n<li><code>Array</code></li>\n<li><code>ArrayOf</code></li>\n<li><code>Map</code></li>\n<li><code>MapOf</code></li>\n</ul>\n"}, {"fullname": "openc2lib.actuators", "modulename": "openc2lib.actuators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "openc2lib.actuators.dumb_actuator", "modulename": "openc2lib.actuators.dumb_actuator", "kind": "module", "doc": "<p>Dumb <code>Actuator</code></p>\n\n<p>This module provides a dumb actuator that always answer with a fixed \nmessage. Use it for testing only.</p>\n"}, {"fullname": "openc2lib.actuators.dumb_actuator.DumbActuator", "modulename": "openc2lib.actuators.dumb_actuator", "qualname": "DumbActuator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "openc2lib.actuators.dumb_actuator.DumbActuator.run", "modulename": "openc2lib.actuators.dumb_actuator", "qualname": "DumbActuator.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.actuators.iptables_actuator", "modulename": "openc2lib.actuators.iptables_actuator", "kind": "module", "doc": "<p>Skeleton <code>Actuator</code> for SLPF profile</p>\n\n<p>This module provides an example to create an <code>Actuator</code> for the SLPF profile.\nIt only answers to the request for available features.</p>\n"}, {"fullname": "openc2lib.actuators.iptables_actuator.OPENC2VERS", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "OPENC2VERS", "kind": "variable", "doc": "<p>Supported OpenC2 Version</p>\n", "default_value": "&#x27;1.0&#x27;"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator", "kind": "class", "doc": "<p>Dumb SLPF implementation</p>\n\n<p>This class provides a skeleton for implementing an <code>Actuator</code> according to the openc2lib approach.</p>\n"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator.run", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator.run", "kind": "function", "doc": "<p>Process <code>Command</code></p>\n\n<p>The <code>run</code> method executes an OpenC2 <code>Command</code> and returns a <code>Response</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator.query", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator.query", "kind": "function", "doc": "<p>Query action</p>\n\n<p>This method implements the <code>query</code> action.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmd</strong>:  The <code>Command</code> including <code>Target</code> and optional <code>Args</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A <code>Response</code> including the result of the query and appropriate status code and messages.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator.allow", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator.allow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator.deny", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator.deny", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.actuators.iptables_actuator.IptablesActuator.update", "modulename": "openc2lib.actuators.iptables_actuator", "qualname": "IptablesActuator.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.encoders", "modulename": "openc2lib.encoders", "kind": "module", "doc": "<p>OpenC2 Encoding formats</p>\n\n<p>This folder collects the implementation of Encoding formats provided with openc2lib.</p>\n"}, {"fullname": "openc2lib.encoders.json", "modulename": "openc2lib.encoders.json", "kind": "module", "doc": "<p>JSON Encoding</p>\n\n<p>This module provides the code for encoding OpenC2 messages with JSON.</p>\n"}, {"fullname": "openc2lib.encoders.json.JSONEncoder", "modulename": "openc2lib.encoders.json", "qualname": "JSONEncoder", "kind": "class", "doc": "<p>JSON Encoder</p>\n\n<p>This class implements the <code>Encoder</code> interface for the JSON format. It leverages\nthe intermediary dictionary representation.</p>\n\n<p>The <code>JSONEncoder</code> can be used to create an OpenC2 stack in <code>Consumer</code> and <code>Producer</code>.</p>\n", "bases": "openc2lib.core.encoder.Encoder"}, {"fullname": "openc2lib.encoders.json.JSONEncoder.encoder_type", "modulename": "openc2lib.encoders.json", "qualname": "JSONEncoder.encoder_type", "kind": "variable", "doc": "<p>The label that is used to identify this <code>Encoder</code> in OpenC2 messages.</p>\n", "default_value": "&#x27;json&#x27;"}, {"fullname": "openc2lib.encoders.json.JSONEncoder.encode", "modulename": "openc2lib.encoders.json", "qualname": "JSONEncoder.encode", "kind": "function", "doc": "<p>Encode an OpenC2 object</p>\n\n<p>This method is used to encode an openc2lib object, which usually is a <code>Command</code> or <code>Message</code>. \nThe implementation leverages the intermediary dictionary representation and it is\ntherefore agnostic of openc2lib clases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  A valid openc2lib object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string with the json representation of the <code>obj</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.encoders.json.JSONEncoder.decode", "modulename": "openc2lib.encoders.json", "qualname": "JSONEncoder.decode", "kind": "function", "doc": "<p>Decode an OpenC2 message</p>\n\n<p>This method is used to create an openc2lib object of type <code>msgtype</code> from a json record. \nThe openc2lib class <code>msgtype</code> corresponding to the json record <code>msg</code> must be explicitly provided,\nsince parsing and automatically inferring the <code>msgtype</code> is not currently implemented.</p>\n\n<p>The implementation leverages the intermediary dictionary representation and it is\ntherefore agnostic of openc2lib classes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  The json record to decode.</li>\n<li><strong>msgtype</strong>:  The openc2lib class to convert the json to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An <code>msgtype</code> class initialized according to the json content.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">msgtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.profiles", "modulename": "openc2lib.profiles", "kind": "module", "doc": "<p>OpenC2 profiles</p>\n\n<p>This folder collects the implementation of profiles provided with openc2lib.</p>\n"}, {"fullname": "openc2lib.profiles.slpf", "modulename": "openc2lib.profiles.slpf", "kind": "module", "doc": "<p>StateLess Packet Filter profile</p>\n\n<p>This module collects all public definition that are exported as part of the SLPF profile.\nAll naming follows as much as possible the terminology in the SLPF Specification, by\nalso applying generic openc2lib conventions.</p>\n\n<p>This definition also registers all extensions defined in the SLPF profile (<code>Args</code>, <code>Target</code>, <code>Profile</code>, <code>Results</code>).</p>\n\n<p>The SLPF profile extends the language specification with the following elements:</p>\n\n<ul>\n<li><code>openc2lib.core.profile.Profile</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.profile.slpf</code> profile is defined for all Actuators that will implement it;</li>\n<li><code>openc2lib.profiles.slpf.nsid.nsid</code> is defined as Namespace identifier for the SLPF profile;</li>\n</ul></li>\n<li><code>openc2lib.types.datatypes</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.datatypes.Direction</code> is used to specify the rule applies to incoming, outgoing, or both kinds of packets;</li>\n</ul></li>\n<li><code>openc2lib.types.targettypes</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.targettypes.RuleID</code> identifies a rule identifier to distinguish firewalling rules;</li>\n</ul></li>\n<li><code>openc2lib.core.target.Targets</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.targettypes.RuleID</code> is the identifier of an SLPF rule;</li>\n</ul></li>\n<li><code>openc2lib.core.args.Args</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.args.Args</code> is extended with <code>drop_process</code>, <code>persistent</code>, <code>direction</code>, and <code>insert_rule</code> arguments;</li>\n</ul></li>\n<li><code>openc2lib.core.response.Results</code>:\n<ul>\n<li><code>openc2lib.profiles.slpf.response.Results</code> is extended with the <code>rule_id</code> field;</li>\n</ul></li>\n<li>validation:\n<ul>\n<li><code>openc2lib.profiles.slpf.validation.AllowedCommandTarget</code> contains all valid <code>openc2lib.core.target.Target</code> for each <code>openc2lib.core.actions.Actions</code>;</li>\n<li><code>openc2lib.profiles.slpf.validation.AllowedCommandArguments</code> contains all valid <code>openc2lib.core.args.Args</code> for each <code>openc2lib.core.actions.Actions</code>/<code>openc2lib.core.target.Target</code> pair;</li>\n</ul></li>\n<li>helper functions:\n     - <code>openc2lib.profiles.slpf.validation.validate_command</code> checks a <code>openc2lib.core.target.Target</code>-openc2lib.core.actions.Actions<code>pair in a</code>openc2lib.core.message.Command<code>is present in</code>openc2lib.profiles.slpf.validation.AllowedCommandTarget`;\n<ul>\n<li><code>openc2lib.profiles.slpf.validation.validate_args</code> checks a <code>openc2lib.core.args.Args</code>-<code>openc2lib.core.actions.Actions</code>-<code>openc2lib.core.target.Target</code> triple in a <code>openc2lib.core.message.Command</code> is present in <code>openc2lib.profiles.slpf.validation.AllowedCommandArguments</code>.</li>\n</ul></li>\n</ul>\n"}, {"fullname": "openc2lib.profiles.slpf.args", "modulename": "openc2lib.profiles.slpf.args", "kind": "module", "doc": "<p>SLPF Arguments</p>\n\n<p>This module extends the Args defined by the Language Specification\n(see Sec. 2.1.3.2 of the SLPF Specification).</p>\n"}, {"fullname": "openc2lib.profiles.slpf.args.Args", "modulename": "openc2lib.profiles.slpf.args", "qualname": "Args", "kind": "class", "doc": "<p>SLPF Args</p>\n\n<p>This class extends the Args defined in the Language Specification.\nThe extension mechanism is described in the \n<a href=\"https://github.com/mattereppe/openc2lib/blob/main/docs/developingextensions.md#developing-extensions\">Developing extensions</a> Section of the main documentation.</p>\n\n<p>Note that the same name is used as the base class, to make it simpler to \nremember. The recommended way to use in the code is to import the whole\nslpf module as <code>slpf</code> and refer to this class as <code>slpf.Args</code>.</p>\n", "bases": "openc2lib.core.args.Args"}, {"fullname": "openc2lib.profiles.slpf.args.Args.extend", "modulename": "openc2lib.profiles.slpf.args", "qualname": "Args.extend", "kind": "variable", "doc": "<p>The class to extend (<code>openc2lib.core.args.Args</code> defined in the core section).</p>\n", "default_value": "&lt;class &#x27;openc2lib.core.args.Args&#x27;&gt;"}, {"fullname": "openc2lib.profiles.slpf.args.Args.fieldtypes", "modulename": "openc2lib.profiles.slpf.args", "qualname": "Args.fieldtypes", "kind": "variable", "doc": "<p>Copy all <code>fieldtypes</code> defined in the base class.</p>\n", "default_value": "{&#x27;start_time&#x27;: &lt;class &#x27;openc2lib.types.datatypes.DateTime&#x27;&gt;, &#x27;stop_time&#x27;: &lt;class &#x27;openc2lib.types.datatypes.DateTime&#x27;&gt;, &#x27;duration&#x27;: &lt;class &#x27;openc2lib.types.datatypes.Duration&#x27;&gt;, &#x27;response_requested&#x27;: &lt;aenum &#x27;ResponseType&#x27;&gt;, &#x27;drop_process&#x27;: &lt;aenum &#x27;DropProcess&#x27;&gt;, &#x27;persistent&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;direction&#x27;: &lt;aenum &#x27;Direction&#x27;&gt;, &#x27;insert_rule&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.targettypes.RuleID&#x27;&gt;}"}, {"fullname": "openc2lib.profiles.slpf.args.Args.nsid", "modulename": "openc2lib.profiles.slpf.args", "qualname": "Args.nsid", "kind": "variable", "doc": "<p>Namespace identifier to distinguish extensions</p>\n", "default_value": "&#x27;slpf&#x27;"}, {"fullname": "openc2lib.profiles.slpf.datatypes", "modulename": "openc2lib.profiles.slpf.datatypes", "kind": "module", "doc": "<p>SLPF additional data types</p>\n\n<p>This modules defines additional data types specific for the SLPF profile.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.datatypes.DropProcess", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "DropProcess", "kind": "class", "doc": "<p>Drop-Process enumeration</p>\n\n<p>The action to be performed in case the packet is dropped.\nDefined in Sec. 2.1.3.2 of the SLPF Specification.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.profiles.slpf.datatypes.DropProcess.none", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "DropProcess.none", "kind": "variable", "doc": "<p>Drop the packet and do not send a notification to the source of the packet</p>\n", "default_value": "&lt;DropProcess.none: 1&gt;"}, {"fullname": "openc2lib.profiles.slpf.datatypes.DropProcess.reject", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "DropProcess.reject", "kind": "variable", "doc": "<p>Drop the packet and send an ICMP host unreachable (or equivalent) to the source of the packet</p>\n", "default_value": "&lt;DropProcess.reject: 2&gt;"}, {"fullname": "openc2lib.profiles.slpf.datatypes.DropProcess.false_ack", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "DropProcess.false_ack", "kind": "variable", "doc": "<p>Drop the traffic and send a false acknowledgment</p>\n", "default_value": "&lt;DropProcess.false_ack: 3&gt;"}, {"fullname": "openc2lib.profiles.slpf.datatypes.Direction", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "Direction", "kind": "class", "doc": "<p>Direction enumeration</p>\n\n<p>The packet direction to which a rule applies.\nDefined in Sec. 2.1.3.2 of the SLPF Specification.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.profiles.slpf.datatypes.Direction.both", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "Direction.both", "kind": "variable", "doc": "<p>Apply rules to all traffic</p>\n", "default_value": "&lt;Direction.both: 1&gt;"}, {"fullname": "openc2lib.profiles.slpf.datatypes.Direction.ingress", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "Direction.ingress", "kind": "variable", "doc": "<p>Apply rules to incoming traffic only</p>\n", "default_value": "&lt;Direction.ingress: 2&gt;"}, {"fullname": "openc2lib.profiles.slpf.datatypes.Direction.egress", "modulename": "openc2lib.profiles.slpf.datatypes", "qualname": "Direction.egress", "kind": "variable", "doc": "<p>Apply rules to outgoing traffic only</p>\n", "default_value": "&lt;Direction.egress: 3&gt;"}, {"fullname": "openc2lib.profiles.slpf.nsid", "modulename": "openc2lib.profiles.slpf.nsid", "kind": "module", "doc": "<p>Statless Packet Filter namespace</p>\n\n<p>This module defines the nsid and unique name for the SLPF profile.\nNo explicit values are used anywhere in the rest of the code.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.nsid.nsid", "modulename": "openc2lib.profiles.slpf.nsid", "qualname": "nsid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;slpf&#x27;"}, {"fullname": "openc2lib.profiles.slpf.nsid.name", "modulename": "openc2lib.profiles.slpf.nsid", "qualname": "name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://docs.oasis-open.org/openc2/oc2slpf/v1.0/oc2slpf-v1.0.md&#x27;"}, {"fullname": "openc2lib.profiles.slpf.profile", "modulename": "openc2lib.profiles.slpf.profile", "kind": "module", "doc": "<p>StateLess Packet Filter profile</p>\n\n<p>This modules contains the definition of the <code>slpf</code> profile. It is mostly used as a container\nfor the namespace identifier.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.profile.slpf", "modulename": "openc2lib.profiles.slpf.profile", "qualname": "slpf", "kind": "class", "doc": "<p>OpenC2 Profile</p>\n\n<p>This is the openc2lib interpretation of the Profile concept. It basically defines\na Profile namespace and the language extensions that are defined for that namespace.</p>\n\n<p>A <code>Profile</code> is fully transparent to concrete implementation for controlling specific\nsecurity functions, which in openc2lib terminology is named <code>Actuator</code>.</p>\n\n<p>Each Profile defined for openc2lib must inherit from this class.</p>\n", "bases": "openc2lib.core.profile.Profile, openc2lib.types.basetypes.Map"}, {"fullname": "openc2lib.profiles.slpf.profile.slpf.__init__", "modulename": "openc2lib.profiles.slpf.profile", "qualname": "slpf.__init__", "kind": "function", "doc": "<p>Initialize the profile</p>\n\n<p>The profile can be initialized by passing the internal fields explicitely \n(i.e., by giving them as <strong><em>key=value</em></strong> pair.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  A list of <strong><em>key=value</em></strong> pair which allowed values are given\nby <code>fieldtype</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dic</span></span>)</span>"}, {"fullname": "openc2lib.profiles.slpf.profile.slpf.fieldtypes", "modulename": "openc2lib.profiles.slpf.profile", "qualname": "slpf.fieldtypes", "kind": "variable", "doc": "<p>Selectors for Actuator</p>\n\n<p>Fields that may be specified to select the specific Actuator implementation.\nUsage of these fields is described by the SLPF Specification (Sec. 2.1.4), but their actual\nmeaning and usage is up the the <code>Actuator</code> implementation.</p>\n\n<p>The extension mechanism is described in the \n<a href=\"https://github.com/mattereppe/openc2lib/blob/main/docs/developingextensions.md#developing-extensions\">Developing extensions</a> Section of the main documentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hostname</strong>:  [RFC1123] hostname (can be a domain name or IP address) \nfor a particular device with SLPF functionality.</li>\n<li><strong>named_group</strong>:  User defined collection of devices with SLPF functionality.</li>\n<li><strong>asset_id</strong>:  Unique identifier for a particular SLPF.</li>\n<li><strong>asset_tuple</strong>:  Unique tuple identifier for a particular SLPF consisting \nof a list of up to 10 strings.</li>\n</ul>\n", "default_value": "{&#x27;hostname&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;named_group&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;asset_id&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;asset_tuple&#x27;: [&lt;class &#x27;str&#x27;&gt;]}"}, {"fullname": "openc2lib.profiles.slpf.response", "modulename": "openc2lib.profiles.slpf.response", "kind": "module", "doc": "<p>SLPF Response extensions</p>\n\n<p>This module defines SLPF-specific extensions to OpenC2 Response.\nSee Sec. 2.2 of the SLPF Specification.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.response.Results", "modulename": "openc2lib.profiles.slpf.response", "qualname": "Results", "kind": "class", "doc": "<p>SLPF Results</p>\n\n<p>Extensions to the base class <code>openc2lib.core.response.Results</code>.\nSee Sec. 2.2.2 of the SLPF Specification.\nThe extension mechanism is described in the \n<a href=\"https://github.com/mattereppe/openc2lib/blob/main/docs/developingextensions.md#developing-extensions\">Developing extensions</a> Section of the main documentation.</p>\n\n<p>Note that the same name is used as the base class, to make it simpler to \nremember. The recommended way to use in the code is to import the whole\nslpf module as <code>slpf</code> and refer to this class as <code>slpf.Results</code>.</p>\n", "bases": "openc2lib.core.response.Results"}, {"fullname": "openc2lib.profiles.slpf.response.Results.extend", "modulename": "openc2lib.profiles.slpf.response", "qualname": "Results.extend", "kind": "variable", "doc": "<p>The class to extend (<code>openc2lib.core.response.Results</code> defined in the core section).</p>\n", "default_value": "&lt;class &#x27;openc2lib.core.response.Results&#x27;&gt;"}, {"fullname": "openc2lib.profiles.slpf.response.Results.fieldtypes", "modulename": "openc2lib.profiles.slpf.response", "qualname": "Results.fieldtypes", "kind": "variable", "doc": "<p>Copy all <code>fieldtypes</code> defined in the base class.</p>\n", "default_value": "{&#x27;versions&#x27;: &lt;class &#x27;openc2lib.types.basetypes.ArrayOf.__new__.&lt;locals&gt;.ArrayOf&#x27;&gt;, &#x27;profiles&#x27;: &lt;class &#x27;openc2lib.types.basetypes.ArrayOf.__new__.&lt;locals&gt;.ArrayOf&#x27;&gt;, &#x27;pairs&#x27;: &lt;class &#x27;openc2lib.types.datatypes.ActionTargets&#x27;&gt;, &#x27;rate_limit&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;rule_number&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.targettypes.RuleID&#x27;&gt;}"}, {"fullname": "openc2lib.profiles.slpf.response.Results.nsid", "modulename": "openc2lib.profiles.slpf.response", "qualname": "Results.nsid", "kind": "variable", "doc": "<p>Namespace identifier to distinguish extensions</p>\n", "default_value": "&#x27;slpf&#x27;"}, {"fullname": "openc2lib.profiles.slpf.targettypes", "modulename": "openc2lib.profiles.slpf.targettypes", "kind": "module", "doc": "<p>SLPF additional data types</p>\n\n<p>This modules defines additional data types specific for the SLPF profile.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.targettypes.RuleID", "modulename": "openc2lib.profiles.slpf.targettypes", "qualname": "RuleID", "kind": "class", "doc": "<p>OpenC2 Rule-ID</p>\n\n<p>Rule identifier returned from allow or deny Command.\nSee Sec. 2.1.3.2 of the SLPF Specification.</p>\n\n<p>The definition is rather trivial in this case, because the Specification\ndefines this type as an integer.</p>\n", "bases": "builtins.int"}, {"fullname": "openc2lib.profiles.slpf.validation", "modulename": "openc2lib.profiles.slpf.validation", "kind": "module", "doc": "<p>SLPF validation rules</p>\n\n<p>This module defines specific SLPF constraints on the usable <code>Action</code>s and <code>Args</code> defined by the Language Specification.\nSee Sec. 2.3 of the SLPF Specification.</p>\n"}, {"fullname": "openc2lib.profiles.slpf.validation.AllowedActions", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "AllowedActions", "kind": "variable", "doc": "<p>List of allowed <code>Action</code>s</p>\n", "default_value": "[query, deny, allow, deny, update, delete]"}, {"fullname": "openc2lib.profiles.slpf.validation.AllowedTargets", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "AllowedTargets", "kind": "variable", "doc": "<p>List of allowed <code>Target</code>s </p>\n\n<p>This is probably not strictly necessary</p>\n", "default_value": "[&#x27;feature&#x27;, &#x27;file&#x27;, &#x27;ipv4_net&#x27;, &#x27;ipv6_net&#x27;, &#x27;ipv4_connection&#x27;, &#x27;ipv6_connection&#x27;, &#x27;slpf:rule_number&#x27;]"}, {"fullname": "openc2lib.profiles.slpf.validation.AllowedStatusCode", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "AllowedStatusCode", "kind": "variable", "doc": "<p>List of allowed status code in <code>Response</code></p>\n", "default_value": "[&lt;StatusCode.PROCESSING: 102&gt;, &lt;StatusCode.OK: 200&gt;, &lt;StatusCode.BADREQUEST: 400&gt;, &lt;StatusCode.INTERNALERROR: 500&gt;, &lt;StatusCode.NOTIMPLEMENTED: 501&gt;]"}, {"fullname": "openc2lib.profiles.slpf.validation.AllowedCommandTarget", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "AllowedCommandTarget", "kind": "variable", "doc": "<p>List of allowed <code>Target</code> for each <code>Action</code></p>\n\n<p>Command Matrix (Table 2.3.1): valid Command/Target pairs</p>\n", "default_value": "{allow: [ipv4_connection, ipv4_net], deny: [ipv4_connection, ipv4_net], query: [features], delete: [slpf:rule_number]}"}, {"fullname": "openc2lib.profiles.slpf.validation.AllowedCommandArguments", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "AllowedCommandArguments", "kind": "variable", "doc": "<p>List of allowed <code>Args</code> for each <code>Action</code> </p>\n\n<p>Command Arguments Matrix (Table 2.3.2): valid Command/Arguments pairs.\nAn argument value of 'None' means the argument is valid for any supported target (see Table 2.3.1).\nSee Sec. 2.3.1-2.3.5 for the behaviour to be implemented in the actuators.</p>\n", "default_value": "{(allow, None): [&#x27;response_requested&#x27;, &#x27;start_time&#x27;, &#x27;stop_time&#x27;, &#x27;duration&#x27;, &#x27;persistent&#x27;, &#x27;direction&#x27;, &#x27;insert_rule&#x27;], (deny, None): [&#x27;response_requested&#x27;, &#x27;start_time&#x27;, &#x27;stop_time&#x27;, &#x27;duration&#x27;, &#x27;persistent&#x27;, &#x27;direction&#x27;, &#x27;insert_rule&#x27;, &#x27;drop_process&#x27;], (query, features): [&#x27;response_requested&#x27;], (delete, slpf:rule_number): [&#x27;response_requested&#x27;, &#x27;start_time&#x27;]}"}, {"fullname": "openc2lib.profiles.slpf.validation.validate_command", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "validate_command", "kind": "function", "doc": "<p>Validate a <code>Command</code> </p>\n\n<p>Helper function to check the <code>Target</code> in a <code>Command</code> are valid for the <code>Action</code> according\nto the SLPF profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmd</strong>:  The <code>Command</code> class to validate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.profiles.slpf.validation.validate_args", "modulename": "openc2lib.profiles.slpf.validation", "qualname": "validate_args", "kind": "function", "doc": "<p>Validate a <code>Command</code> </p>\n\n<p>Helper function to check the <code>Args</code> in a <code>Command</code> are valid for the <code>Action</code> and <code>Target</code>  according\nto the SLPF profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmd</strong>:  The <code>Command</code> class to validate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.transfers", "modulename": "openc2lib.transfers", "kind": "module", "doc": "<p>OpenC2 Transfer protocols</p>\n\n<p>This folder collects the implementation of Transfer protocols provided with openc2lib.</p>\n"}, {"fullname": "openc2lib.transfers.http", "modulename": "openc2lib.transfers.http", "kind": "module", "doc": "<p>HTTP Transfer Protocol</p>\n\n<p>This module defines implementation of the <code>Transfer</code> interface for the \nHTTP/HTTPs protocols. This implementation is mostly provided for \nresearch and development purposes, but it is not suitable for production\nenvironments.</p>\n\n<p>The implementation follows the Specification for Transfer of OpenC2 Messages via HTTPS\nVersion 1.1, which is indicated as the \"Specification\" in the following.</p>\n\n<p>This modules provides the following classes:</p>\n\n<ul>\n<li><code>HTTPTransfer</code> which implements the <code>Transfer</code> interface for the HTTP protocol;</li>\n<li><code>HTTPSTransfer</code> which implements the <code>Transfer</code> interface for the HTTP protocol over TLS.</li>\n</ul>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer", "modulename": "openc2lib.transfers.http.http_transfer", "kind": "module", "doc": "<p>HTTP Transfer Protocol</p>\n\n<p>This module defines implementation of the <code>Transfer</code> interface for the \nHTTP/HTTPs protocols. This implementation is mostly provided for \nresearch and development purposes, but it is not suitable for production\nenvironments.</p>\n\n<p>The implementation follows the Specification for Transfer of OpenC2 Messages via HTTPS\nVersion 1.1, which is indicated as the \"Specification\" in the following.</p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.logger", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "logger", "kind": "variable", "doc": "<p>The logging facility in openc2lib</p>\n", "default_value": "&lt;Logger openc2lib (WARNING)&gt;"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer", "kind": "class", "doc": "<p>HTTP Transfer Protocol</p>\n\n<p>This class provides an implementation of the Specification. It builds on Flask and so it is not\nsuitable for production environments.</p>\n\n<p>Use <code>HTTPTransfer</code> to build OpenC2 communication stacks in <code>Producer</code> and <code>Consumer</code>.</p>\n", "bases": "openc2lib.core.transfer.Transfer"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.__init__", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.__init__", "kind": "function", "doc": "<p>Builds the <code>HTTPTransfer</code> instance</p>\n\n<p>The <code>host</code> and <code>port</code> parameters are used either for selecting the remote server (<code>Producer</code>) or\nfor local binding (<code>Consumer</code>). This implementation only supports TCP as transport protocol.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  Hostname or IP address of the OpenC2 server.</li>\n<li><strong>port</strong>:  Transport port of the OpenC2 server.</li>\n<li><strong>endpoint</strong>:  The remote endpoint to contact the OpenC2 server (<code>Producer</code> only).</li>\n<li><strong>usessl</strong>:  Enable (<code>True</code>) or disable (<code>False</code>) SSL. Internal use only. Do not set this argument,\nuse the <code>HTTPSTransfer</code> instead.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">80</span>, </span><span class=\"param\"><span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s1\">&#39;/.well-known/openc2&#39;</span>, </span><span class=\"param\"><span class=\"n\">usessl</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.host", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.port", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.endpoint", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.endpoint", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.scheme", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.scheme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.url", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.ssl_context", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.ssl_context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.send", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.send", "kind": "function", "doc": "<p>Sends OpenC2 message</p>\n\n<p>This method implements the required <code>Transfer</code> interface to send message to an OpenC2 server.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  The message to send (openc2lib <code>Message</code>).</li>\n<li><strong>encoder</strong>:  The encoder to use for encoding the <code>msg</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An OpenC2  response (<code>Response</code>).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">encoder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPTransfer.receive", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPTransfer.receive", "kind": "function", "doc": "<p>Listen for incoming messages</p>\n\n<p>This method implements the <code>Transfer</code> interface to listen for and receive OpenC2 messages.\nThe internal implementation uses <code>Flask</code> as HTTP server. The method invokes the <code>callback</code>\nfor each received message, which must be provided by a <code>Producer</code> to properly dispatch \n<code>Command</code>s to the relevant server(s). It also takes an <code>Encoder</code> that is used to create\nresponses to <code>Command</code>s encoded with unknown encoders.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>callback</strong>:  The function that is invoked to process OpenC2 messages.</li>\n<li><strong>encoder</strong>:  Default <code>Encoder</code> instance to respond to unknown or wrong messages.\n:return :None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span>, </span><span class=\"param\"><span class=\"n\">encoder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPSTransfer", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPSTransfer", "kind": "class", "doc": "<p>HTTP Transfer Protocol with SSL</p>\n\n<p>This class provides an implementation of the Specification. It builds on Flask and so it is not\nsuitable for production environments.</p>\n\n<p>Use <code>HTTPSTransfer</code> to build OpenC2 communication stacks in <code>Producer</code> and <code>Consumer</code>.\nUsage and methods of <code>HTTPSTransfer</code> are semanthically the same as for <code>HTTPTransfer</code>.</p>\n", "bases": "HTTPTransfer"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPSTransfer.__init__", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPSTransfer.__init__", "kind": "function", "doc": "<p>Builds the <code>HTTPSTransfer</code> instance</p>\n\n<p>The <code>host</code> and <code>port</code> parameters are used either for selecting the remote server (<code>Producer</code>) or\nfor local binding (<code>Consumer</code>). This implementation only supports TCP as transport protocol.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  Hostname or IP address of the OpenC2 server.</li>\n<li><strong>port</strong>:  Transport port of the OpenC2 server.</li>\n<li><strong>endpoint</strong>:  The remote endpoint to contact the OpenC2 server (<code>Producer</code> only).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">443</span>, </span><span class=\"param\"><span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s1\">&#39;/.well-known/openc2&#39;</span></span>)</span>"}, {"fullname": "openc2lib.transfers.http.http_transfer.HTTPSTransfer.ssl_context", "modulename": "openc2lib.transfers.http.http_transfer", "qualname": "HTTPSTransfer.ssl_context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.transfers.http.message", "modulename": "openc2lib.transfers.http.message", "kind": "module", "doc": "<p>HTTP Message</p>\n\n<p>This module defines the HTTP definition of the abstract OpenC2 Message data.\nSee Sec. 3.3.2 of the HTTP Specification.</p>\n"}, {"fullname": "openc2lib.transfers.http.message.Headers", "modulename": "openc2lib.transfers.http.message", "qualname": "Headers", "kind": "class", "doc": "<p>HTTP Message Headers (see Sec. 3.3.2 of the Specification) </p>\n\n<p>Note: the Specification defines <code>to</code> as \"String [0..*]\", but it should be an <code>ArrayOf(str)</code>. Using\na plain Python list does not work with the current openc2lib implementation.</p>\n", "bases": "openc2lib.types.basetypes.Map"}, {"fullname": "openc2lib.transfers.http.message.Headers.fieldtypes", "modulename": "openc2lib.transfers.http.message", "qualname": "Headers.fieldtypes", "kind": "variable", "doc": "<p>Field types</p>\n\n<p>A <code>dictionary</code> which keys are field names and which values are the corresponding classes.\nMust be provided by any derived class.</p>\n", "default_value": "{&#x27;request_id&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;created&#x27;: &lt;class &#x27;openc2lib.types.datatypes.DateTime&#x27;&gt;, &#x27;from&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;to&#x27;: &lt;class &#x27;openc2lib.types.basetypes.ArrayOf.__new__.&lt;locals&gt;.ArrayOf&#x27;&gt;}"}, {"fullname": "openc2lib.transfers.http.message.Headers.extend", "modulename": "openc2lib.transfers.http.message", "qualname": "Headers.extend", "kind": "variable", "doc": "<p>Base class</p>\n\n<p>Data types defined in the Language Specification shall not set this field. Data types defined in\nProfiles that extends a Data Type defined in the Language Specification, must set this field to\nthe corresponding class of the base Data Type.</p>\n\n<p>Note: Extensions defined in the openc2lib context are recommended to use the same name of the base\nData Type, and to distinguish them through appropriate usage of the namespacing mechanism.</p>\n", "default_value": "None"}, {"fullname": "openc2lib.transfers.http.message.Headers.regext", "modulename": "openc2lib.transfers.http.message", "qualname": "Headers.regext", "kind": "variable", "doc": "<p>Registered extensions</p>\n\n<p>Classes that implement a Data Type defined in the Language Specification will use this field to\nregister extensions defined by external Profiles. Classes that define extensions within Profiles\nshall register themselves according to the specific documentation of the base type class, but \nshall not modify this field.</p>\n", "default_value": "{}"}, {"fullname": "openc2lib.transfers.http.message.OpenC2Contents", "modulename": "openc2lib.transfers.http.message", "qualname": "OpenC2Contents", "kind": "variable", "doc": "<p>List allowed OpenC2-Content (see Sec. 3.3.2 of the Specification)</p>\n", "default_value": "{&#x27;request&#x27;: &lt;class &#x27;openc2lib.core.message.Command&#x27;&gt;, &#x27;response&#x27;: &lt;class &#x27;openc2lib.core.message.Response&#x27;&gt;}"}, {"fullname": "openc2lib.transfers.http.message.OpenC2Content", "modulename": "openc2lib.transfers.http.message", "qualname": "OpenC2Content", "kind": "class", "doc": "<p>HTTP Message OpenC2-Content (see Sec. 3.3.2 of the Specification)</p>\n", "bases": "openc2lib.types.basetypes.Choice"}, {"fullname": "openc2lib.transfers.http.message.OpenC2Content.register", "modulename": "openc2lib.transfers.http.message", "qualname": "OpenC2Content.register", "kind": "variable", "doc": "<p>List of registered name/class options available</p>\n", "default_value": "{&#x27;request&#x27;: &lt;class &#x27;openc2lib.core.message.Command&#x27;&gt;, &#x27;response&#x27;: &lt;class &#x27;openc2lib.core.message.Response&#x27;&gt;}"}, {"fullname": "openc2lib.transfers.http.message.Bodies", "modulename": "openc2lib.transfers.http.message", "qualname": "Bodies", "kind": "variable", "doc": "<p>List allowed objects in Body (see Sec. 3.3.2 of the Specification)</p>\n", "default_value": "{&#x27;openc2&#x27;: &lt;class &#x27;openc2lib.transfers.http.message.OpenC2Content&#x27;&gt;}"}, {"fullname": "openc2lib.transfers.http.message.Body", "modulename": "openc2lib.transfers.http.message", "qualname": "Body", "kind": "class", "doc": "<p>HTTP Message Body (see Sec. 3.3.2 of the Specification)</p>\n", "bases": "openc2lib.types.basetypes.Choice"}, {"fullname": "openc2lib.transfers.http.message.Body.register", "modulename": "openc2lib.transfers.http.message", "qualname": "Body.register", "kind": "variable", "doc": "<p>List of registered name/class options available</p>\n", "default_value": "{&#x27;openc2&#x27;: &lt;class &#x27;openc2lib.transfers.http.message.OpenC2Content&#x27;&gt;}"}, {"fullname": "openc2lib.transfers.http.message.Message", "modulename": "openc2lib.transfers.http.message", "qualname": "Message", "kind": "class", "doc": "<p>HTTP Message representation</p>\n\n<p>This class implements the HTTP-specific representation of the \nOpenC2 Message metadata. The OpenC2 Message metadata are described in \nTable 3.1 of the Language Specification as message elements, but they are not\nframed in a concrete structure. The HTTP Specification defines such structure \nin Sec. 3.3.2, and this class is its implementation.</p>\n\n<p>The methods of this class are meant to translate back and for the openc2lib\n<code>Message</code> class.</p>\n", "bases": "openc2lib.types.basetypes.Record"}, {"fullname": "openc2lib.transfers.http.message.Message.__init__", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">transfers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">Headers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">transfers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">Body</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">signature</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.transfers.http.message.Message.headers", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.headers", "kind": "variable", "doc": "<p>Contains the <code>Message</code> metadata</p>\n", "annotation": ": openc2lib.transfers.http.message.Headers", "default_value": "None"}, {"fullname": "openc2lib.transfers.http.message.Message.body", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.body", "kind": "variable", "doc": "<p>Contains the <code>Content</code></p>\n", "annotation": ": openc2lib.transfers.http.message.Body", "default_value": "None"}, {"fullname": "openc2lib.transfers.http.message.Message.signature", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.signature", "kind": "variable", "doc": "<p>Not used (the Specification does not define its usage</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "openc2lib.transfers.http.message.Message.set", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.set", "kind": "function", "doc": "<p>Create HTTP <code>Message</code> from openc2lib <code>Message</code> </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  An openc2lib <code>Message</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An HTTP <code>Message</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">Message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.transfers.http.message.Message.get", "modulename": "openc2lib.transfers.http.message", "qualname": "Message.get", "kind": "function", "doc": "<p>Create an openc2lib <code>Message</code> from HTTP <code>Message</code> </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  An openc2lib <code>Message</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An HTTP <code>Message</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core", "modulename": "openc2lib.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.actions", "modulename": "openc2lib.core.actions", "kind": "module", "doc": "<p>OpenC2 Actions</p>\n\n<p>This module defines the list of Actions defined by the Language Specification.</p>\n"}, {"fullname": "openc2lib.core.actions.Actions", "modulename": "openc2lib.core.actions", "qualname": "Actions", "kind": "class", "doc": "<p>OpenC2 Actions list</p>\n\n<p>This class enumerates the OpenC2 Actions listed in Sec. 3.3.1.1 of the Language Specification.\nThe enumeration refers to the ID used in the Language Specification.</p>\n\n<p>OpenC2 Actions SHALL NOT be extended by Profiles.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.core.actions.Actions.scan", "modulename": "openc2lib.core.actions", "qualname": "Actions.scan", "kind": "variable", "doc": "<p></p>\n", "default_value": "scan"}, {"fullname": "openc2lib.core.actions.Actions.locate", "modulename": "openc2lib.core.actions", "qualname": "Actions.locate", "kind": "variable", "doc": "<p></p>\n", "default_value": "locate"}, {"fullname": "openc2lib.core.actions.Actions.query", "modulename": "openc2lib.core.actions", "qualname": "Actions.query", "kind": "variable", "doc": "<p></p>\n", "default_value": "query"}, {"fullname": "openc2lib.core.actions.Actions.deny", "modulename": "openc2lib.core.actions", "qualname": "Actions.deny", "kind": "variable", "doc": "<p></p>\n", "default_value": "deny"}, {"fullname": "openc2lib.core.actions.Actions.allow", "modulename": "openc2lib.core.actions", "qualname": "Actions.allow", "kind": "variable", "doc": "<p></p>\n", "default_value": "allow"}, {"fullname": "openc2lib.core.actions.Actions.update", "modulename": "openc2lib.core.actions", "qualname": "Actions.update", "kind": "variable", "doc": "<p></p>\n", "default_value": "update"}, {"fullname": "openc2lib.core.actions.Actions.delete", "modulename": "openc2lib.core.actions", "qualname": "Actions.delete", "kind": "variable", "doc": "<p></p>\n", "default_value": "delete"}, {"fullname": "openc2lib.core.actuator", "modulename": "openc2lib.core.actuator", "kind": "module", "doc": "<p>OpenC2 Actuator</p>\n\n<p>This module defines the <code>Actuator</code> element used in Commands. It does not include any element concerning the concrete\nimplementation of Actuators for specific security functions.</p>\n"}, {"fullname": "openc2lib.core.actuator.Actuator", "modulename": "openc2lib.core.actuator", "qualname": "Actuator", "kind": "class", "doc": "<p>OpenC2 Actuator Profile</p>\n\n<p>The <code>Actuator</code> carries the Profile to which the Command applies, according to the definition in Sec. 3.3.1.3 of the \nLanguage Specification. The <code>Actuator</code> is fully transparent to the concrete implementation of the Profile for a specific\nsecurity functions.</p>\n", "bases": "openc2lib.types.basetypes.Choice"}, {"fullname": "openc2lib.core.actuator.Actuator.register", "modulename": "openc2lib.core.actuator", "qualname": "Actuator.register", "kind": "variable", "doc": "<p>List of registered name/class options available</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.profile.slpf&#x27;&gt;}"}, {"fullname": "openc2lib.core.args", "modulename": "openc2lib.core.args", "kind": "module", "doc": "<p>Command Arguments</p>\n\n<p>The definition of the (exendible) arguments of the OpenC2 Command \n(Sec. 3.3.1.4 of the Language Specification).</p>\n"}, {"fullname": "openc2lib.core.args.logger", "modulename": "openc2lib.core.args", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger openc2lib (WARNING)&gt;"}, {"fullname": "openc2lib.core.args.ExtendedArguments", "modulename": "openc2lib.core.args", "qualname": "ExtendedArguments", "kind": "variable", "doc": "<p>List of extensions</p>\n\n<p>This variable contains all argument extensions registered by Profiles. It is a dictionary which key\nis the profile name, and the value is the <code>Args</code> class defined for that Profile.</p>\n\n<p>Each <code>Args</code> definition for a Profile must be registered here to be available for encoding/decoding\nOpenC2 <code>Message</code>s.</p>\n\n<p>Multiple registration of extensions for the same Profile will raise a <code>ValueError</code> Exception.</p>\n\n<p>Usage: see the <code>Register</code> interface.</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.args.Args&#x27;&gt;}"}, {"fullname": "openc2lib.core.args.Args", "modulename": "openc2lib.core.args", "qualname": "Args", "kind": "class", "doc": "<p>OpenC2 Arguments</p>\n\n<p>This class defines the base class structure and the common arguments.\nExtensions for specific profiles must be derived from this class by giving the relevant <code>fieldtypes</code>, and\nproviding the base class and extension type.</p>\n", "bases": "openc2lib.types.basetypes.Map"}, {"fullname": "openc2lib.core.args.Args.fieldtypes", "modulename": "openc2lib.core.args", "qualname": "Args.fieldtypes", "kind": "variable", "doc": "<p>Allowed arguments</p>\n\n<p>This is a list of allowed keys and corresponding argument types (classes). The keys and types are set according\nto the Language Specification. This argument defines the syntax for the base Map that builds the\nArgs type. There is (currently) no controls on input data; this argument is only used to instantiate\nthe Args object from an OpenC2 Message.</p>\n", "default_value": "{&#x27;start_time&#x27;: &lt;class &#x27;openc2lib.types.datatypes.DateTime&#x27;&gt;, &#x27;stop_time&#x27;: &lt;class &#x27;openc2lib.types.datatypes.DateTime&#x27;&gt;, &#x27;duration&#x27;: &lt;class &#x27;openc2lib.types.datatypes.Duration&#x27;&gt;, &#x27;response_requested&#x27;: &lt;aenum &#x27;ResponseType&#x27;&gt;}"}, {"fullname": "openc2lib.core.args.Args.extend", "modulename": "openc2lib.core.args", "qualname": "Args.extend", "kind": "variable", "doc": "<p>Base class</p>\n\n<p>This  field must be set to <code>Args</code> in all derived classes (i.e., definition of Arguments for specific Profiles).</p>\n", "default_value": "None"}, {"fullname": "openc2lib.core.args.Args.regext", "modulename": "openc2lib.core.args", "qualname": "Args.regext", "kind": "variable", "doc": "<p>Extension Name Space</p>\n\n<p>This field is for internal use only and must not be modified by any derived class.</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.args.Args&#x27;&gt;}"}, {"fullname": "openc2lib.core.consumer", "modulename": "openc2lib.core.consumer", "kind": "module", "doc": "<p>OpenC2 Consumer</p>\n\n<p>The <code>Consumer</code> implements the expected behaviour of an OpenC2 Consumer server that dispatches OpenC2 Commands\nto the Actuators.</p>\n"}, {"fullname": "openc2lib.core.consumer.logger", "modulename": "openc2lib.core.consumer", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger openc2 (WARNING)&gt;"}, {"fullname": "openc2lib.core.consumer.Consumer", "modulename": "openc2lib.core.consumer", "qualname": "Consumer", "kind": "class", "doc": "<p>OpenC2 Consumer</p>\n\n<p>The <code>Consumer</code> is designed to dispatch OpenC2 <code>Message</code>s to the relevant <code>Actuator</code>. \nThe current implementation receives the configuration at initialization time. It is therefore\nnot conceived to be runned itself as a service, but to be integrated in an external component \nthat reads the relevant configuration from file and passes it to the Consumer.</p>\n\n<p>The <code>Consumer</code> has two main tasks:</p>\n\n<ul>\n<li>creating the OpenC2 stack to process Messages (namely the combination of an Encoding format and\na Transfer protocol);</li>\n<li>dispatching incoming <code>Command</code>s to the relevant <code>Actuator</code>.</li>\n</ul>\n\n<p>Each <code>Consumer</code> will only run a single <code>Transfer</code> protocol. All registered <code>Encoder</code>s can be used,\nand a default <code>Encoder</code> is explicitely given that will be used when no other selection is available \n(e.g., to answer Messages that the Consumer does not understand).</p>\n"}, {"fullname": "openc2lib.core.consumer.Consumer.__init__", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.__init__", "kind": "function", "doc": "<p>Create a <code>Consumer</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>consumer</strong>:  This is a string that identifies the <code>Consumer</code> and is used in <code>from</code> \nand <code>to</code> fields of the OpenC2 <code>Message</code> (see Table 3.1 of the Language Specification.</li>\n<li><strong>actuators</strong>:  This must be a list of available <code>Actuator</code>s. The list contains the\n<code>Actuator</code> instances that will be used by the <code>Consumer</code>.</li>\n<li><strong>encoder</strong>:  This is an instance of the <code>Encoder</code> that will be used by default.</li>\n<li><strong>transfer</strong>:  This is the <code>Transfer</code> protocol that will be used to send/receive <code>Message</code>s.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">consumer</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">actuators</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Encoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transfer</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">Transfer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.core.consumer.Consumer.consumer", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.consumer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.consumer.Consumer.encoder", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.encoder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.consumer.Consumer.transfer", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.transfer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.consumer.Consumer.actuators", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.actuators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.consumer.Consumer.run", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.run", "kind": "function", "doc": "<p>Runs a <code>Consumer</code></p>\n\n<p>This is the entry point of the <code>Consumer</code>. It must be invoked to start operation of the <code>Consumer</code>.\nThis method may be blocking, depending on the implementation of the <code>receive()</code> method of the \nused <code>Transfer</code>.</p>\n\n<p>The arguments of this method can be used to create multiple OpenC2 stacks (e.g., using \ndifferent <code>Encoder</code>s and <code>Transfer</code>s). This feature clearly requires the <code>Transfer</code> \nimplementation to be non-blocking.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>encoder</strong>:  A different <code>Encoder</code> that might be passed to overwrite what set at initialization time. </li>\n<li><strong>transfer</strong>:  A different <code>Transfer</code> that might be passed to overwrite what set at initialization time.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Encoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transfer</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">Transfer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.consumer.Consumer.dispatch", "modulename": "openc2lib.core.consumer", "qualname": "Consumer.dispatch", "kind": "function", "doc": "<p>Dispatches Commands to Actuators</p>\n\n<p>This method scans the actuator profile carried in the <code>Command</code> and select one or more\n<code>Actuator</code>s that will process the <code>Command</code>. </p>\n\n<p>The current implementation is only meant to be used within the\nimplementation of <code>Transfer</code> protocols as a callback for returning control to the main code.\nThis approach is motivated by those Transfer protocols that replies to messages on the same \nTCP connection, so to avoid errors with NAT and firewalls \n(if a Command were passed back from the <code>Transfer.receive()</code> and processed within the <code>Consumer.run()</code>, \n the following `Transfer.send() would use a different TCP connection).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  The full openc2lib <code>Message</code> that embeds the <code>Command</code> to be processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A <code>Message</code> that embeds the <code>Response</code> (from the <code>Actuator</code> or elaborated by the <code>Consumer</code> in\n                  case of errors).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder", "modulename": "openc2lib.core.encoder", "kind": "module", "doc": "<p>Encoder base functions and interface</p>\n\n<p>This module provides base encoding functions to translate openc2lib objects into an intermediary\nrepresentation.</p>\n"}, {"fullname": "openc2lib.core.encoder.logger", "modulename": "openc2lib.core.encoder", "qualname": "logger", "kind": "variable", "doc": "<p>Logging features</p>\n\n<p>Most of logging from this modules are conceived for debugging only.</p>\n", "default_value": "&lt;Logger openc2lib (WARNING)&gt;"}, {"fullname": "openc2lib.core.encoder.Encoders", "modulename": "openc2lib.core.encoder", "qualname": "Encoders", "kind": "class", "doc": "<p>List of available Encoders</p>\n\n<p>This list can be used in <code>Transfer</code> protocols to select the correct class to decode an incoming OpenC2 Message\nbased on its metadata. The list is created as enumeration, which associate the name of the encoding\nformats to the class that implements it.</p>\n", "bases": "aenum._enum.Enum"}, {"fullname": "openc2lib.core.encoder.Encoders.dictionary", "modulename": "openc2lib.core.encoder", "qualname": "Encoders.dictionary", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.encoder.Encoders.json", "modulename": "openc2lib.core.encoder", "qualname": "Encoders.json", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.encoder.register_encoder", "modulename": "openc2lib.core.encoder", "qualname": "register_encoder", "kind": "function", "doc": "<p>Register an <code>Encoder</code></p>\n\n<p>This function is used to register a new <code>Encoder</code>. It can be used as a decorator to the class that \ndefines the new <code>Encoder</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cls</strong>:  The class definition that must be registered. The class internally holds its name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The same class passed as argument (used to create a decoratetor).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder.Encoder", "modulename": "openc2lib.core.encoder", "qualname": "Encoder", "kind": "class", "doc": "<p>Base <code>Encoder</code></p>\n\n<p>The Base <code>Encoder</code> provides a common interface that must be implemented by all implementations of\nEncoding mechanisms. Each new <code>Encoder</code> should be derived from this class.</p>\n\n<p>The Base Encoder translates openc2lib data types and structures\ninto dictionaries. This function can be used by derived class to have an intermediary representation\nwhich strictly follows the OpenC2 formatting rules. The intermediary representation must then be\ntranslated into the specific syntax used by the derived <code>Encoder</code> (e.g., json, xml, yaml).</p>\n\n<p>Currently, this class is only designed to encode into text formats.</p>\n"}, {"fullname": "openc2lib.core.encoder.Encoder.encoder_type", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.encoder_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;dictionary&#x27;"}, {"fullname": "openc2lib.core.encoder.Encoder.getName", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.getName", "kind": "function", "doc": "<p>Encoder name</p>\n\n<p>This method MUST be implemented to return the name of the encoding format. The name should be\nhighly representative, possible using official terminology (e.g.: json, xml).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The class name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder.Encoder.encode", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.encode", "kind": "function", "doc": "<p>Encode an OpenC2 object</p>\n\n<p>This method encodes an openc2lib object (namely, a data structure derived from <code>BaseType</code>). \nIt MUST be implemented by each derived class. It could be applied to any openc2lib object,\nbut the most common use is for <code>Message</code>, <code>Command</code>, or <code>Response</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  An OpenC2 object derived from a <code>BaseType</code>. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string that contains the encoded object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder.Encoder.decode", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.decode", "kind": "function", "doc": "<p>Decode into OpenC2 object</p>\n\n<p>This method decodes a text representation into an openc2lib object. The method throws an <code>Exception</code>\nin case of unknown elements. </p>\n\n<p>This method requires to specify the openc2lib class that implements the OpenC2 object described\nby the text. This will commonly be either <code>Message</code>, <code>Command</code>, or <code>Response</code>. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msgtype</strong>:  The class of an openc2lib object.</li>\n<li><strong>msg</strong>:  Text-based representation of the OpenC2 object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of an openc2lib object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msgtype</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder.Encoder.todict", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.todict", "kind": "function", "doc": "<p>Convert object to dictionary</p>\n\n<p>This is an internal method to convert an openc2lib object into a dictionary. The dictionary is\nstructured according to OpenC2 syntax.</p>\n\n<p>This method should only be invoked by derived classes to get the intermediary representation\nof openc2lib objects. It will likely be used in the implementation of the <code>decode</code> method.      </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  The openc2lib object to convert into a dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliant with the OpenC2 syntax rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.encoder.Encoder.fromdict", "modulename": "openc2lib.core.encoder", "qualname": "Encoder.fromdict", "kind": "function", "doc": "<p>Create an object from dictionary</p>\n\n<p>This is an internal method to create an openc2lib object from a dictionary. The dictionary\nmust be compliant with the OpenC2 syntax rules. Derived classes are expected to create this\nintermediate representation and use this method in the <code>encode</code> method. It is necessary to \nprovide the class definition of the openc2lib object to be instantiated.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>clstype</strong>:  The class definition that must be used to instantiate the object.</li>\n<li><strong>dic</strong>:  The dictionary with the OpenC2 description.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of <code>clstype</code> initialized with the data in the <code>dic</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clstype</span>, </span><span class=\"param\"><span class=\"n\">dic</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.message", "modulename": "openc2lib.core.message", "kind": "module", "doc": "<p>OpenC2 Message structures</p>\n\n<p>This module defines the OpenC2 Message structure and its content type, as defined\nin Sec. 3.2 of the Language Specification.</p>\n\n<p>The definition include: <code>Message</code>, <code>Content</code>, <code>Command</code>, and <code>Response</code>.</p>\n"}, {"fullname": "openc2lib.core.message.MessageType", "modulename": "openc2lib.core.message", "qualname": "MessageType", "kind": "class", "doc": "<p>OpenC2 Message Type</p>\n\n<p>Message type can be either <code>command</code> or <code>response</code>.</p>\n", "bases": "enum.Enum"}, {"fullname": "openc2lib.core.message.MessageType.command", "modulename": "openc2lib.core.message", "qualname": "MessageType.command", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageType.command: 1&gt;"}, {"fullname": "openc2lib.core.message.MessageType.response", "modulename": "openc2lib.core.message", "qualname": "MessageType.response", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageType.response: 2&gt;"}, {"fullname": "openc2lib.core.message.Content", "modulename": "openc2lib.core.message", "qualname": "Content", "kind": "class", "doc": "<p>Content of the OpenC2 Message</p>\n\n<p>A content is the base class to derive either a <code>Command</code> or a <code>Response</code>.</p>\n"}, {"fullname": "openc2lib.core.message.Content.msg_type", "modulename": "openc2lib.core.message", "qualname": "Content.msg_type", "kind": "variable", "doc": "<p>The type of Content (<code>MessageType</code>)</p>\n", "annotation": ": openc2lib.core.message.MessageType", "default_value": "None"}, {"fullname": "openc2lib.core.message.Content.getType", "modulename": "openc2lib.core.message", "qualname": "Content.getType", "kind": "function", "doc": "<p>Returns the Content type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.message.Message", "modulename": "openc2lib.core.message", "qualname": "Message", "kind": "class", "doc": "<p>OpenC2 Message</p>\n\n<p>The Message class embeds all Message fields that are defined in Table 3.1 of the\nLanguage Specification. It is just an internal structure that is not automatically\nserialized, since the use of the fields depends on the specific transport protocol.</p>\n"}, {"fullname": "openc2lib.core.message.Message.__init__", "modulename": "openc2lib.core.message", "qualname": "Message.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">Content</span>,</span><span class=\"param\">\t<span class=\"n\">content_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;openc2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">msg_type</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">MessageType</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">Version</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1.0&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.core.message.Message.content", "modulename": "openc2lib.core.message", "qualname": "Message.content", "kind": "variable", "doc": "<p>Message body as specified by <code>content_type</code> and <code>msg_type</code>.</p>\n", "annotation": ": openc2lib.core.message.Content"}, {"fullname": "openc2lib.core.message.Message.content_type", "modulename": "openc2lib.core.message", "qualname": "Message.content_type", "kind": "variable", "doc": "<p>Media Type that identifies the format of the content, including major version.</p>\n", "annotation": ": str", "default_value": "&#x27;openc2&#x27;"}, {"fullname": "openc2lib.core.message.Message.msg_type", "modulename": "openc2lib.core.message", "qualname": "Message.msg_type", "kind": "variable", "doc": "<p>The type of OpenC2 Message.</p>\n", "annotation": ": openc2lib.core.message.MessageType", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.status", "modulename": "openc2lib.core.message", "qualname": "Message.status", "kind": "variable", "doc": "<p>Populated with a numeric status code in Responses.</p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.request_id", "modulename": "openc2lib.core.message", "qualname": "Message.request_id", "kind": "variable", "doc": "<p>A unique identifier created by the Producer and copied by Consumer into all Responses.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.created", "modulename": "openc2lib.core.message", "qualname": "Message.created", "kind": "variable", "doc": "<p>Creation date/time of the content.</p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.from_", "modulename": "openc2lib.core.message", "qualname": "Message.from_", "kind": "variable", "doc": "<p>Authenticated identifier of the creator of or authority for execution of a message. </p>\n\n<p>This field is named <code>from</code> in the Specification.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.to", "modulename": "openc2lib.core.message", "qualname": "Message.to", "kind": "variable", "doc": "<p>Authenticated identifier(s) of the authorized recipient(s) of a message.</p>\n", "annotation": ": []", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.version", "modulename": "openc2lib.core.message", "qualname": "Message.version", "kind": "variable", "doc": "<p>OpenC2 version used to encode the <code>Message</code>.</p>\n\n<p>This is is an additional field not envisioned by the Language Specification.</p>\n", "annotation": ": openc2lib.types.datatypes.Version", "default_value": "&#x27;1.0&#x27;"}, {"fullname": "openc2lib.core.message.Message.encoding", "modulename": "openc2lib.core.message", "qualname": "Message.encoding", "kind": "variable", "doc": "<p>Encoding format used to serialize the <code>Message</code>.</p>\n\n<p>This is is an additional field not envisioned by the Language Specification.</p>\n", "annotation": ": object", "default_value": "None"}, {"fullname": "openc2lib.core.message.Message.todict", "modulename": "openc2lib.core.message", "qualname": "Message.todict", "kind": "function", "doc": "<p>Serialization to dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.message.Command", "modulename": "openc2lib.core.message", "qualname": "Command", "kind": "class", "doc": "<p>OpenC2 Command</p>\n\n<p>This class defines the structure of the OpenC2 Command. The name, meaning, and restrictions for\nthe fields are described in Sec. 3.3.1 of the Specification.</p>\n\n<p>The <code>target</code> object is implicitely initialized by passing any valid <code>Target</code>.</p>\n", "bases": "Content, openc2lib.types.basetypes.Record"}, {"fullname": "openc2lib.core.message.Command.__init__", "modulename": "openc2lib.core.message", "qualname": "Command.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">actions</span><span class=\"o\">.</span><span class=\"n\">Actions</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">Target</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">Args</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">actuator</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">Actuator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">command_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.core.message.Command.action", "modulename": "openc2lib.core.message", "qualname": "Command.action", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openc2lib.core.actions.Actions"}, {"fullname": "openc2lib.core.message.Command.target", "modulename": "openc2lib.core.message", "qualname": "Command.target", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openc2lib.core.target.Target"}, {"fullname": "openc2lib.core.message.Command.args", "modulename": "openc2lib.core.message", "qualname": "Command.args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openc2lib.core.args.Args", "default_value": "None"}, {"fullname": "openc2lib.core.message.Command.actuator", "modulename": "openc2lib.core.message", "qualname": "Command.actuator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openc2lib.core.actuator.Actuator", "default_value": "None"}, {"fullname": "openc2lib.core.message.Command.command_id", "modulename": "openc2lib.core.message", "qualname": "Command.command_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "openc2lib.core.message.Command.msg_type", "modulename": "openc2lib.core.message", "qualname": "Command.msg_type", "kind": "variable", "doc": "<p>The type of Content (<code>MessageType</code>)</p>\n", "default_value": "&lt;MessageType.command: 1&gt;"}, {"fullname": "openc2lib.core.message.Response", "modulename": "openc2lib.core.message", "qualname": "Response", "kind": "class", "doc": "<p>OpenC2 Response</p>\n\n<p>This class defines the structure of the OpenC2 Response. According to the definition\n        in Sec. 3.3.2 of the Language Specification, the <code>Response</code> contains a list of\n  <key, value> pair. This allows for extensions by the Profiles.</p>\n\n<pre><code>    Extensions to `Response` must extend `fieldtypes` according to the allowed field\n    names and types. `fieldtypes` is used to parse incoming OpenC2 messages and to build\n</code></pre>\n\n<p>and initialize       the\n        correct Python objects for each &lt;key, value> pair.</p>\n", "bases": "Content, openc2lib.types.basetypes.Map"}, {"fullname": "openc2lib.core.message.Response.fieldtypes", "modulename": "openc2lib.core.message", "qualname": "Response.fieldtypes", "kind": "variable", "doc": "<p>The list of allowed &lt;key,value> pair expected in a <code>Response</code></p>\n", "default_value": "{&#x27;status&#x27;: &lt;aenum &#x27;StatusCode&#x27;&gt;, &#x27;status_text&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;results&#x27;: &lt;class &#x27;openc2lib.core.response.Results&#x27;&gt;}"}, {"fullname": "openc2lib.core.message.Response.msg_type", "modulename": "openc2lib.core.message", "qualname": "Response.msg_type", "kind": "variable", "doc": "<p>The type of Content (<code>MessageType</code>)</p>\n", "default_value": "&lt;MessageType.response: 2&gt;"}, {"fullname": "openc2lib.core.producer", "modulename": "openc2lib.core.producer", "kind": "module", "doc": "<p>OpenC2 Producer functions</p>\n\n<p>This module provides the <code>Producer</code> class for implementing an OpenC2 Producer.</p>\n"}, {"fullname": "openc2lib.core.producer.Producer", "modulename": "openc2lib.core.producer", "qualname": "Producer", "kind": "class", "doc": "<p>OpenC2 Producer</p>\n\n<p>An OpenC2 Producer sends Commands and receives Responses. The <code>Producer</code> is an intermediary to \ndeal with OpenC2-related issues, but does not implement any control logic. A <code>Producer</code> instance\nis used to create an OpenC2 stack with an <code>Encoder</code> and a <code>Transfer</code> protocol. The <code>Producer</code>\nis associated to an identifier to distinguish its messages.     </p>\n\n<p>Note that the actuator instance is only known to the consumer, which runs it. The producer \n knows the profile of the actuator, which embeds the an identifier for the actual\n actuator run by the consumer.</p>\n"}, {"fullname": "openc2lib.core.producer.Producer.__init__", "modulename": "openc2lib.core.producer", "qualname": "Producer.__init__", "kind": "function", "doc": "<p>Initialize an OpenC2 stack</p>\n\n<p>Creates a <code>Producer</code> communication stack made of an identifier, an Encoding format, and a \nTransfer protocol. This will be used as the \"default\" stack if no otherwise overwritten\nwhen sending the message.\nBoth the Encoding and Transfer class must be derived from the base <code>Encoder</code> and <code>Transfer</code> definition.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>producer</strong>:  A string that identifies the <code>Producer</code>.</li>\n<li><strong>encoder</strong>:  An instance of an Encoding class derived from base <code>Encoder</code>.</li>\n<li><strong>transfer</strong>:  An instnace of a Transfer protocol derived from base <code>Transfer</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">producer</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Encoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transfer</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">Transfer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.core.producer.Producer.producer", "modulename": "openc2lib.core.producer", "qualname": "Producer.producer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.producer.Producer.encoder", "modulename": "openc2lib.core.producer", "qualname": "Producer.encoder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.producer.Producer.transfer", "modulename": "openc2lib.core.producer", "qualname": "Producer.transfer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.core.producer.Producer.sendcmd", "modulename": "openc2lib.core.producer", "qualname": "Producer.sendcmd", "kind": "function", "doc": "<p>Send an OpenC2 message</p>\n\n<p>Sends an openc2lib <code>Command</code>. The default communication stack is used, if a different one is not specified. \nThis method internally creates the <code>Message</code> metadata that will be encoded and traferred.</p>\n\n<p>The option to\ncreate a different stack is given to manage the presence of multiple <code>Consumer</code> with different stacks.\nHowever, it is recommended to create different <code>Producer</code>s in this case.\nNote that the <code>consumer</code> argument is meant for internal use of a <code>Consumer</code> only, because the\nendpoint of the message is always identified by the <code>Transfer</code> definition.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmd</strong>:  The <code>Command</code> to be sent.</li>\n<li><strong>encoder</strong>:  An instance of an Encoding class derived from base <code>Encoder</code>.</li>\n<li><strong>transfer</strong>:  An instnace of a Transfer protocol derived from base <code>Transfer</code>.</li>\n<li><strong>consumers</strong>:  An optional list of strings that identify multiple intended recipients of the\nmessage.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>Response</code> to the <code>Command</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cmd</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">Command</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">Encoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transfer</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">Transfer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">consumers</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.profile", "modulename": "openc2lib.core.profile", "kind": "module", "doc": "<p>OpenC2 Profile management</p>\n\n<p>This module defines the concept of Profile and keeps a list of available <code>Profiles</code> \nregistered within the system.</p>\n"}, {"fullname": "openc2lib.core.profile.Profile", "modulename": "openc2lib.core.profile", "qualname": "Profile", "kind": "class", "doc": "<p>OpenC2 Profile</p>\n\n<p>This is the openc2lib interpretation of the Profile concept. It basically defines\na Profile namespace and the language extensions that are defined for that namespace.</p>\n\n<p>A <code>Profile</code> is fully transparent to concrete implementation for controlling specific\nsecurity functions, which in openc2lib terminology is named <code>Actuator</code>.</p>\n\n<p>Each Profile defined for openc2lib must inherit from this class.</p>\n"}, {"fullname": "openc2lib.core.profile.Profile.__init__", "modulename": "openc2lib.core.profile", "qualname": "Profile.__init__", "kind": "function", "doc": "<p>Creates the Profile</p>\n\n<p>A Profile is identified by its namespace identifier and unique name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nsid</strong>:  the Profile NameSpace IDentifier</li>\n<li><strong>name</strong>:  the Profile Unique Name (typically a URL)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nsid</span>, </span><span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "openc2lib.core.profile.Profile.nsid", "modulename": "openc2lib.core.profile", "qualname": "Profile.nsid", "kind": "variable", "doc": "<p>Namespace Identifier</p>\n"}, {"fullname": "openc2lib.core.profile.Profile.name", "modulename": "openc2lib.core.profile", "qualname": "Profile.name", "kind": "variable", "doc": "<p>Unique Name</p>\n"}, {"fullname": "openc2lib.core.profile.Profiles", "modulename": "openc2lib.core.profile", "qualname": "Profiles", "kind": "variable", "doc": "<p>List of registered <code>Profile</code>s</p>\n\n<p>This is a dictionary of available <code>Profile</code>s within the system. When a new <code>Profile</code> is defined,\nit must be registered in openc2lib before being used.</p>\n\n<p>Multiple registration of the same Profile will raise a <code>ValueError</code> Excepction.</p>\n\n<p>Usage: see the <code>Register</code> class interface.</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.profile.slpf&#x27;&gt;}"}, {"fullname": "openc2lib.core.register", "modulename": "openc2lib.core.register", "kind": "module", "doc": "<p>Object registration</p>\n\n<p>This module provides a registration mechanism to extend the elements provided by the \nLanguage Specification with additional definitions from the Profiles.</p>\n"}, {"fullname": "openc2lib.core.register.Register", "modulename": "openc2lib.core.register", "qualname": "Register", "kind": "class", "doc": "<p>List of registered elements</p>\n\n<p>This class registers all available elements, both provided by the openc2lib and by Profiles.\nThe class is meant to be instantiated internally and filled in with the elements provided by \nthe Language Specification. Profiles may fill in with additional definitions, to make their \nclasses and names available to the core system for encoding/deconding purposes.</p>\n", "bases": "builtins.dict"}, {"fullname": "openc2lib.core.register.Register.add", "modulename": "openc2lib.core.register", "qualname": "Register.add", "kind": "function", "doc": "<p>Add a new element</p>\n\n<p>Register a new element and make it available within the system. </p>\n\n<p>This method throw an Exception if the element is already registered.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name used for the element.</li>\n<li><strong>register</strong>:  The class that defines the element.</li>\n<li><strong>identifier</strong>:  A numeric value associated to the standard by the Specification (unused).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">register</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.register.Register.get", "modulename": "openc2lib.core.register", "qualname": "Register.get", "kind": "function", "doc": "<p>Get element by name</p>\n\n<p>Throws an exception if the given name does not correspond to any registered element.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the element to return.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The class  corresponding to the given name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.register.Register.getName", "modulename": "openc2lib.core.register", "qualname": "Register.getName", "kind": "function", "doc": "<p>Get the name of a element</p>\n\n<p>Given a class element, this method returns its name (the name it was registered with. \nNote that the returned name include the namespace prefix.</p>\n\n<p>Throws an exception if the given element is not registered.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>register</strong>:  The class element to look for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string with the name of the element.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">register</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.response", "modulename": "openc2lib.core.response", "kind": "module", "doc": "<p>OpenC2 Response elements</p>\n\n<p>This module defines the elements beard by a <code>Response</code>.</p>\n"}, {"fullname": "openc2lib.core.response.StatusCode", "modulename": "openc2lib.core.response", "qualname": "StatusCode", "kind": "class", "doc": "<p>Status codes</p>\n\n<p>Status codes provide indication about the processing of the OpenC2 Command.\nThey follow the same logic and values of HTTP status code, since they are copied\nin HTTP headers.</p>\n", "bases": "openc2lib.types.basetypes.EnumeratedID"}, {"fullname": "openc2lib.core.response.StatusCode.PROCESSING", "modulename": "openc2lib.core.response", "qualname": "StatusCode.PROCESSING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.PROCESSING: 102&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.OK", "modulename": "openc2lib.core.response", "qualname": "StatusCode.OK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.OK: 200&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.BADREQUEST", "modulename": "openc2lib.core.response", "qualname": "StatusCode.BADREQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.BADREQUEST: 400&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.UNAUTHORIZED", "modulename": "openc2lib.core.response", "qualname": "StatusCode.UNAUTHORIZED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.UNAUTHORIZED: 401&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.FORBIDDEN", "modulename": "openc2lib.core.response", "qualname": "StatusCode.FORBIDDEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.FORBIDDEN: 403&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.NOTFOUND", "modulename": "openc2lib.core.response", "qualname": "StatusCode.NOTFOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.NOTFOUND: 404&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.INTERNALERROR", "modulename": "openc2lib.core.response", "qualname": "StatusCode.INTERNALERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.INTERNALERROR: 500&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.NOTIMPLEMENTED", "modulename": "openc2lib.core.response", "qualname": "StatusCode.NOTIMPLEMENTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.NOTIMPLEMENTED: 501&gt;"}, {"fullname": "openc2lib.core.response.StatusCode.SERVICEUNAVAILABLE", "modulename": "openc2lib.core.response", "qualname": "StatusCode.SERVICEUNAVAILABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StatusCode.SERVICEUNAVAILABLE: 503&gt;"}, {"fullname": "openc2lib.core.response.StatusCodeDescription", "modulename": "openc2lib.core.response", "qualname": "StatusCodeDescription", "kind": "variable", "doc": "<p>Status code description</p>\n\n<p>Human-readable description of <code>StatusCode</code>s. The values are only provided as base values, since any <code>Actuator</code>\ncan freely use different descriptions.</p>\n", "default_value": "{&lt;StatusCode.PROCESSING: 102&gt;: &#x27;Processing&#x27;, &lt;StatusCode.OK: 200&gt;: &#x27;OK&#x27;, &lt;StatusCode.BADREQUEST: 400&gt;: &#x27;Bad Request&#x27;, &lt;StatusCode.UNAUTHORIZED: 401&gt;: &#x27;Unauthorized&#x27;, &lt;StatusCode.FORBIDDEN: 403&gt;: &#x27;Forbidden&#x27;, &lt;StatusCode.NOTFOUND: 404&gt;: &#x27;Not Found&#x27;, &lt;StatusCode.INTERNALERROR: 500&gt;: &#x27;Internal Error&#x27;, &lt;StatusCode.NOTIMPLEMENTED: 501&gt;: &#x27;Not Implemented&#x27;, &lt;StatusCode.SERVICEUNAVAILABLE: 503&gt;: &#x27;Service Unavailable&#x27;}"}, {"fullname": "openc2lib.core.response.ExtResultsDict", "modulename": "openc2lib.core.response", "qualname": "ExtResultsDict", "kind": "class", "doc": "<p>Extended Results</p>\n\n<p>This class is used to extend the basic <code>Results</code> definition. If follows the same logic as \nother extended class in the openc2lib.</p>\n", "bases": "builtins.dict"}, {"fullname": "openc2lib.core.response.ExtResultsDict.add", "modulename": "openc2lib.core.response", "qualname": "ExtResultsDict.add", "kind": "function", "doc": "<p>Add extension</p>\n\n<p>Add a new extension for a given <code>Profile</code>. The extension must be registered only once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>profile</strong>:  The name of the profile for which the extension is registered.</li>\n<li><strong>extresults</strong>:  The Extension to be registered.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">extresults</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.response.ExtendedResults", "modulename": "openc2lib.core.response", "qualname": "ExtendedResults", "kind": "variable", "doc": "<p>List of Extended Results</p>\n\n<p>List of registered extensions to <code>Results</code>. It is only used internally the openc2lib to correctly\nparse incoming Rensponses.</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.response.Results&#x27;&gt;}"}, {"fullname": "openc2lib.core.response.Results", "modulename": "openc2lib.core.response", "qualname": "Results", "kind": "class", "doc": "<p>OpenC2 Response Results</p>\n\n<p>This class implements the definition in Sec. 3.3.2.2 of the Language Specification. The <code>Results</code> carry\nthe output of an OpenC2 Command. This definition only includes basic fields and it is expected to\nbe extended for each <code>Profile</code>.</p>\n\n<p>Extensions must be derived class that define the following member:\n        - <code>fieldtypes</code>\n        - <code>extend</code>\n        - <code>nsid</code>\n<code>nsid</code> must be set to the profile name.</p>\n", "bases": "openc2lib.types.basetypes.Map"}, {"fullname": "openc2lib.core.response.Results.fieldtypes", "modulename": "openc2lib.core.response", "qualname": "Results.fieldtypes", "kind": "variable", "doc": "<p>Field types</p>\n\n<p>This is the definition of the fields beard by the <code>Results</code>. This definition is for internal use only,\nto parse OpenC2 messages. Extensions must include these fields and add additional definitions.</p>\n", "default_value": "{&#x27;versions&#x27;: &lt;class &#x27;openc2lib.types.basetypes.ArrayOf.__new__.&lt;locals&gt;.ArrayOf&#x27;&gt;, &#x27;profiles&#x27;: &lt;class &#x27;openc2lib.types.basetypes.ArrayOf.__new__.&lt;locals&gt;.ArrayOf&#x27;&gt;, &#x27;pairs&#x27;: &lt;class &#x27;openc2lib.types.datatypes.ActionTargets&#x27;&gt;, &#x27;rate_limit&#x27;: &lt;class &#x27;int&#x27;&gt;}"}, {"fullname": "openc2lib.core.response.Results.extend", "modulename": "openc2lib.core.response", "qualname": "Results.extend", "kind": "variable", "doc": "<p>Extension</p>\n\n<p>This field must be set to None in the base class, and to <code>Results</code> in the derived class that defines an extension.</p>\n", "default_value": "None"}, {"fullname": "openc2lib.core.response.Results.regext", "modulename": "openc2lib.core.response", "qualname": "Results.regext", "kind": "variable", "doc": "<p>Extended NameSpace</p>\n\n<p>This field is for internal use only and must not be set by any derived class.</p>\n", "default_value": "{&#x27;slpf&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.response.Results&#x27;&gt;}"}, {"fullname": "openc2lib.core.response.Results.set", "modulename": "openc2lib.core.response", "qualname": "Results.set", "kind": "function", "doc": "<p>Set values</p>\n\n<p>This function may be used to set specific values of the <code>Results</code>, with a key=value syntax.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>version</strong>:  List of OpenC2 Versions supported by the Actuator.</li>\n<li><strong>profiles</strong>:  List of OpenC2 Profiles supported by the Actuator.</li>\n<li><strong>pairs</strong>:  List of <code>Targets</code> applicable to each supported <code>Action</code>.</li>\n<li><strong>rate_limit</strong>:  Maximum number of requests per minute supported by design or policy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">profiles</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pairs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rate_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.target", "modulename": "openc2lib.core.target", "kind": "module", "doc": "<p>OpenC2 Target</p>\n\n<p>This module implements the Target types defined in Sec. 3.4.1 [OpenC2 Languate specification].</p>\n"}, {"fullname": "openc2lib.core.target.TargetRegister", "modulename": "openc2lib.core.target", "qualname": "TargetRegister", "kind": "class", "doc": "<p>Target registration</p>\n\n<p>This class registers all available <code>Target</code>s, both provided by the openc2lib and by Profiles.\nThe extension of the base class <code>Register</code> is necessary to add the nsid prefix in front of the\n<code>Target</code> name.</p>\n", "bases": "openc2lib.core.register.Register"}, {"fullname": "openc2lib.core.target.TargetRegister.add", "modulename": "openc2lib.core.target", "qualname": "TargetRegister.add", "kind": "function", "doc": "<p>Add a new <code>Target</code></p>\n\n<p>Register a new <code>Target</code> and make it available within the system. This method is expected to\nbe called by any <code>Profile</code> that defines additional <code>Target</code>s. Additionally, the name is added \nto the Target enumeration <code>TargetEnum</code>.</p>\n\n<p>This method throw an Exception if the <code>Target</code> is already registered.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name used for the <code>Target</code>.</li>\n<li><strong>target</strong>:  The class that defines the <code>Target</code>.</li>\n<li><strong>identifier</strong>:  A numeric value associated to the standard by the Specification.</li>\n<li><strong>nsid</strong>:  The Namespace Identifier where the <code>Target</code> is defined. It is prepended to the target <code>name</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nsid</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.target.Targets", "modulename": "openc2lib.core.target", "qualname": "Targets", "kind": "variable", "doc": "<p>List of available <code>Target</code>s</p>\n\n<p>Include base Targets defined by the Language Specification and additional Targets defined by Profiles.</p>\n", "default_value": "{&#x27;features&#x27;: &lt;class &#x27;openc2lib.types.targettypes.Features&#x27;&gt;, &#x27;ipv4_net&#x27;: &lt;class &#x27;openc2lib.types.targettypes.IPv4Net&#x27;&gt;, &#x27;ipv4_connection&#x27;: &lt;class &#x27;openc2lib.types.targettypes.IPv4Connection&#x27;&gt;, &#x27;slpf:rule_number&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.targettypes.RuleID&#x27;&gt;}"}, {"fullname": "openc2lib.core.target.Target", "modulename": "openc2lib.core.target", "qualname": "Target", "kind": "class", "doc": "<p>OpenC2 Target in <code>Command</code></p>\n\n<p>This is the definition of the <code>target</code> carried in OpenC2 <code>Command</code>.</p>\n", "bases": "openc2lib.types.basetypes.Choice"}, {"fullname": "openc2lib.core.target.Target.register", "modulename": "openc2lib.core.target", "qualname": "Target.register", "kind": "variable", "doc": "<p>Keeps the list of registered <code>Target</code>s</p>\n", "default_value": "{&#x27;features&#x27;: &lt;class &#x27;openc2lib.types.targettypes.Features&#x27;&gt;, &#x27;ipv4_net&#x27;: &lt;class &#x27;openc2lib.types.targettypes.IPv4Net&#x27;&gt;, &#x27;ipv4_connection&#x27;: &lt;class &#x27;openc2lib.types.targettypes.IPv4Connection&#x27;&gt;, &#x27;slpf:rule_number&#x27;: &lt;class &#x27;openc2lib.profiles.slpf.targettypes.RuleID&#x27;&gt;}"}, {"fullname": "openc2lib.core.target.Target.getName", "modulename": "openc2lib.core.target", "qualname": "Target.getName", "kind": "function", "doc": "<p>Returns the identifier associated to the Target type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.transfer", "modulename": "openc2lib.core.transfer", "kind": "module", "doc": "<p>Transfer protocol</p>\n\n<p>Interface that defines the basic behavior of the Transfer Protocols.</p>\n"}, {"fullname": "openc2lib.core.transfer.Transfer", "modulename": "openc2lib.core.transfer", "qualname": "Transfer", "kind": "class", "doc": "<p>Transfer protocol</p>\n\n<p>This is the base class for all implementation of Transfer protocols.</p>\n"}, {"fullname": "openc2lib.core.transfer.Transfer.send", "modulename": "openc2lib.core.transfer", "qualname": "Transfer.send", "kind": "function", "doc": "<p>Sends a Message</p>\n\n<p>Encodes, sends a message, and returns the response.</p>\n\n<p>:arg msg: an openc2lib <code>Message</code> to send\n:arg encoder: the <code>Encoder</code> to be used </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An openc2lib <code>Message</code> that contains the <code>Response</code> to the sent Message.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">encoder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.core.transfer.Transfer.receive", "modulename": "openc2lib.core.transfer", "qualname": "Transfer.receive", "kind": "function", "doc": "<p>Receives a Message</p>\n\n<p>Listen for incoming <code>Message</code>s and dispatches them to the <code>Actuator</code>. This method may\nbe blocking or non-blocking. </p>\n\n<p>:arg callback: the <code>Consumer.dispatch</code> function that contains the logic to dispatch a <code>Message</code>\n        to one or more <code>Actuator</code>\n:arg encode: the default <code>Encoder</code> instance to encode/decode Messages. Implementations might\n        use the information carried within OpenC2 Messages to derive the <code>Encoder</code> instance \n        (retrieved from the <code>Encoders</code> variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span>, </span><span class=\"param\"><span class=\"n\">encoder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types", "modulename": "openc2lib.types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.basetypes", "modulename": "openc2lib.types.basetypes", "kind": "module", "doc": "<p>OpenC2 structures</p>\n\n<p>Definition of the base types (structures) in the OpenC2 DataModels (Sec. 3.1.1)\nEach OpenC2 object must derive from these classes, which\naffects serialization operations</p>\n"}, {"fullname": "openc2lib.types.basetypes.logger", "modulename": "openc2lib.types.basetypes", "qualname": "logger", "kind": "variable", "doc": "<p>openc2lib logger</p>\n", "default_value": "&lt;Logger openc2lib (WARNING)&gt;"}, {"fullname": "openc2lib.types.basetypes.Openc2Type", "modulename": "openc2lib.types.basetypes", "qualname": "Openc2Type", "kind": "class", "doc": "<p>OpenC2 Language Element</p>\n\n<p>This class is currently unused and is only provided to have a common ancestor for all\nOpenC2 basic types. It may be used in the future to implement common methods or arguments.</p>\n"}, {"fullname": "openc2lib.types.basetypes.Record", "modulename": "openc2lib.types.basetypes", "qualname": "Record", "kind": "class", "doc": "<p>OpenC2 Record</p>\n\n<p>Implements OpenC2 Record: </p>\n\n<blockquote>\n  <p>An ordered map from a list of keys with positions to values with \n          positionally-defined semantics. Each key has a position and name, \n          and is mapped to a type.</p>\n</blockquote>\n\n<p>It expect keys to be public class attributes. All internal attributes \nmust be kept private by prefixing it with an '_'.</p>\n", "bases": "Openc2Type"}, {"fullname": "openc2lib.types.basetypes.Record.todict", "modulename": "openc2lib.types.basetypes", "qualname": "Record.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Record.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "Record.fromdict", "kind": "function", "doc": "<p>Builds instance from dictionary </p>\n\n<p>It is used during deserialization to create an openc2lib instance from the text message.\nIt takes an <code>Encoder</code> instance that is used to recursively build instances of the inner\nobjects (the <code>Encoder</code> provides standard methods to create instances of base objects like\nstrings, integers, boolean).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  The intermediary dictionary representation from which the object is built.</li>\n<li><strong>e</strong>:  The `Encoder that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of this class initialized from the dictionary values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clstype</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Choice", "modulename": "openc2lib.types.basetypes", "qualname": "Choice", "kind": "class", "doc": "<p>OpenC2 Choice\nImplements the OpenC2 Choice:</p>\n\n<blockquote>\n  <p>One field selected from a set of named fields. The API value has a name and a type.</p>\n</blockquote>\n\n<p>It expect all allowed values to be provided in a <code>Register</code> class, which must be defined\nas class attribute <code>register</code> in all derived classes (see <code>Target</code> and <code>Actuator</code> as examples).</p>\n", "bases": "Openc2Type"}, {"fullname": "openc2lib.types.basetypes.Choice.__init__", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.__init__", "kind": "function", "doc": "<p>Initialize the <code>Choice</code> object</p>\n\n<p>Objects used as <code>Choice</code> must be registered in advance in the <code>register</code> dictionary.</p>\n\n<p>:arg obj: An object among those defined in the <code>register</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span>)</span>"}, {"fullname": "openc2lib.types.basetypes.Choice.register", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.register", "kind": "variable", "doc": "<p>List of registered name/class options available</p>\n", "default_value": "None"}, {"fullname": "openc2lib.types.basetypes.Choice.choice", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.choice", "kind": "variable", "doc": "<p>Selected name for the <code>Choice</code></p>\n", "annotation": ": str"}, {"fullname": "openc2lib.types.basetypes.Choice.obj", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.obj", "kind": "variable", "doc": "<p>Class corresponding to the <code>choice</code></p>\n"}, {"fullname": "openc2lib.types.basetypes.Choice.getObj", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.getObj", "kind": "function", "doc": "<p>Returns the objet instance embedded in the <code>register</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Choice.getName", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.getName", "kind": "function", "doc": "<p>Returns the name of the choice</p>\n\n<p>Returns the name of object, which is the selector carried by the <code>Choice</code> element. \nThis does not include the object itself.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Choice.getClass", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.getClass", "kind": "function", "doc": "<p>Get the class corresponding to the current <code>choice</code> </p>\n\n<p>It may be implemented by any derived class, if a different logic than the <code>Register</code> class \nis followed to store the name/class bindings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>choice</strong>:  The name of the alternative that is being looked for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The class corresponding to the provided <code>choice</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">choice</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Choice.todict", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Choice.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "Choice.fromdict", "kind": "function", "doc": "<p>Builds instance from dictionary </p>\n\n<p>It is used during deserialization to create an openc2lib instance from the text message.\nIt takes an <code>Encoder</code> instance that is used to recursively build instances of the inner\nobjects (the <code>Encoder</code> provides standard methods to create instances of base objects like\nstrings, integers, boolean).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  The intermediary dictionary representation from which the object is built.</li>\n<li><strong>e</strong>:  The `Encoder that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of this class initialized from the dictionary values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Enumerated", "modulename": "openc2lib.types.basetypes", "qualname": "Enumerated", "kind": "class", "doc": "<p>OpenC2 Enumerated</p>\n\n<p>Implements OpenC2 Enumerated:</p>\n\n<blockquote>\n  <p>A set of named integral constants. The API value is a name.</p>\n</blockquote>\n\n<p>The constants may be anything, including strings, integers, classes.</p>\n", "bases": "Openc2Type, aenum._enum.Enum"}, {"fullname": "openc2lib.types.basetypes.Enumerated.todict", "modulename": "openc2lib.types.basetypes", "qualname": "Enumerated.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Enumerated.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "Enumerated.fromdict", "kind": "function", "doc": "<p>Builds instance from dictionary </p>\n\n<p>It is used during deserialization to create an openc2lib instance from the text message.\nIt takes an <code>Encoder</code> instance that is used to recursively build instances of the inner\nobjects (the <code>Encoder</code> provides standard methods to create instances of base objects like\nstrings, integers, boolean).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  The intermediary dictionary representation from which the object is built.</li>\n<li><strong>e</strong>:  The `Encoder that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of this class initialized from the dictionary values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.EnumeratedID", "modulename": "openc2lib.types.basetypes", "qualname": "EnumeratedID", "kind": "class", "doc": "<p>OpenC2 EnumeratedID</p>\n\n<p>Implements OpenC2 EnumeratedID: </p>\n\n<blockquote>\n  <p>A set of unnamed integral constants. The API value is an id.</p>\n</blockquote>\n\n<p>The current implementation does not check the values to be integer.\nHowever, coversion to/from integer is explicitly done during the\nintermediary dictionary serialization, hence throwing an Exception if\nthe IDs are not integers.</p>\n", "bases": "Enumerated"}, {"fullname": "openc2lib.types.basetypes.EnumeratedID.todict", "modulename": "openc2lib.types.basetypes", "qualname": "EnumeratedID.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.EnumeratedID.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "EnumeratedID.fromdict", "kind": "function", "doc": "<p>Builds instance from dictionary </p>\n\n<p>It is used during deserialization to create an openc2lib instance from the text message.\nIt takes an <code>Encoder</code> instance that is used to recursively build instances of the inner\nobjects (the <code>Encoder</code> provides standard methods to create instances of base objects like\nstrings, integers, boolean).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  The intermediary dictionary representation from which the object is built.</li>\n<li><strong>e</strong>:  The `Encoder that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of this class initialized from the dictionary values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Array", "modulename": "openc2lib.types.basetypes", "qualname": "Array", "kind": "class", "doc": "<p>OpenC2 Array</p>\n\n<p>Implements OpenC2 Array:</p>\n\n<blockquote>\n  <p>An ordered list of unnamed fields with positionally-defined semantics. \n  Each field has a position, label, and type.</p>\n</blockquote>\n\n<p>However, position does not matter in this implementation.</p>\n\n<p>Derived classes must provide a <code>fieldtypes</code> dictionary that associate each field name\nto its class. This is strictly required in order to instantiate the object at\ndeserialization time. However, no check is performed when new items are inserted.</p>\n", "bases": "Openc2Type, builtins.list"}, {"fullname": "openc2lib.types.basetypes.Array.fieldtypes", "modulename": "openc2lib.types.basetypes", "qualname": "Array.fieldtypes", "kind": "variable", "doc": "<p>Field types</p>\n\n<p>A <code>dictionary</code> which keys are field names and which values are the corresponding classes.\nMust be provided by any derived class.</p>\n", "default_value": "None"}, {"fullname": "openc2lib.types.basetypes.Array.todict", "modulename": "openc2lib.types.basetypes", "qualname": "Array.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Array.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "Array.fromdict", "kind": "function", "doc": "<p>!!! WARNING !!!\nCurrently not implemented because there are no examples of usage of this\ntype (only Array/net, which is not clear)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.ArrayOf", "modulename": "openc2lib.types.basetypes", "qualname": "ArrayOf", "kind": "class", "doc": "<p>OpenC2 ArrayOf</p>\n\n<p>Implements OpenC2 ArrayOf(<em>vtype</em>):</p>\n\n<blockquote>\n  <p>An ordered list of fields with the same semantics. \n  Each field has a position and type <em>vtype</em>.</p>\n</blockquote>\n\n<p>It extends the <code>Array</code> type. However, to make its usage simpler and compliant \nto the description given in the\nLanguage Specification, the implementation is quite different.\nNote that in many cases <code>ArrayOf</code> is only used to create arrays without the need\nto derive an additional data type.</p>\n"}, {"fullname": "openc2lib.types.basetypes.ArrayOf.__init__", "modulename": "openc2lib.types.basetypes", "qualname": "ArrayOf.__init__", "kind": "function", "doc": "<p><code>ArrayOf</code> builder</p>\n\n<p>Creates a unnamed derived class from <code>Array</code>, which <code>fieldtypes</code> is set to <code>fldtype</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fldtype</strong>:  The type of the fields stored in the array (indicated as <em>vtype</em> in \nthe Language Specification.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new unnamed class definition.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fldtype</span></span>)</span>"}, {"fullname": "openc2lib.types.basetypes.Map", "modulename": "openc2lib.types.basetypes", "qualname": "Map", "kind": "class", "doc": "<p>OpenC2 Map</p>\n\n<p>Implements OpenC2 Map:</p>\n\n<blockquote>\n  <p>An unordered map from a set of specified keys to values with semantics \n          bound to each key. Each field has an id, name and type.</p>\n</blockquote>\n\n<p>However, the id is not considered in this implementation.</p>\n\n<p>The implementation follows a similar logic than <code>Array</code>. Each derived class\nis expected to provide a <code>fieldtypes</code> class attribute that associate field names \nwith their class definition. </p>\n\n<p>Additionally, according to the Language Specification, <code>Map</code>s may be extended by\nProfiles. Such extensions must use the <code>extend</code> and <code>regext</code> class attributes to \nbind to the base element they extend and the <code>Profile</code> in which they are defined.</p>\n", "bases": "Openc2Type, builtins.dict"}, {"fullname": "openc2lib.types.basetypes.Map.fieldtypes", "modulename": "openc2lib.types.basetypes", "qualname": "Map.fieldtypes", "kind": "variable", "doc": "<p>Field types</p>\n\n<p>A <code>dictionary</code> which keys are field names and which values are the corresponding classes.\nMust be provided by any derived class.</p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "openc2lib.types.basetypes.Map.extend", "modulename": "openc2lib.types.basetypes", "qualname": "Map.extend", "kind": "variable", "doc": "<p>Base class</p>\n\n<p>Data types defined in the Language Specification shall not set this field. Data types defined in\nProfiles that extends a Data Type defined in the Language Specification, must set this field to\nthe corresponding class of the base Data Type.</p>\n\n<p>Note: Extensions defined in the openc2lib context are recommended to use the same name of the base\nData Type, and to distinguish them through appropriate usage of the namespacing mechanism.</p>\n", "default_value": "None"}, {"fullname": "openc2lib.types.basetypes.Map.regext", "modulename": "openc2lib.types.basetypes", "qualname": "Map.regext", "kind": "variable", "doc": "<p>Registered extensions</p>\n\n<p>Classes that implement a Data Type defined in the Language Specification will use this field to\nregister extensions defined by external Profiles. Classes that define extensions within Profiles\nshall register themselves according to the specific documentation of the base type class, but \nshall not modify this field.</p>\n", "default_value": "{}"}, {"fullname": "openc2lib.types.basetypes.Map.todict", "modulename": "openc2lib.types.basetypes", "qualname": "Map.todict", "kind": "function", "doc": "<p>Converts to dictionary </p>\n\n<p>It is used to convert this object to an intermediary representation during \nserialization. It takes an <code>Encoder</code> argument that is used to recursively\nserialize inner data and structures (the <code>Encoder</code> provides standard methods\nfor converting base types to dictionaries).. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>e</strong>:  The <code>Encoder</code> that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary compliants to the Language Specification's serialization\n  rules.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.Map.fromdict", "modulename": "openc2lib.types.basetypes", "qualname": "Map.fromdict", "kind": "function", "doc": "<p>Builds instance from dictionary </p>\n\n<p>It is used during deserialization to create an openc2lib instance from the text message.\nIt takes an <code>Encoder</code> instance that is used to recursively build instances of the inner\nobjects (the <code>Encoder</code> provides standard methods to create instances of base objects like\nstrings, integers, boolean).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dic</strong>:  The intermediary dictionary representation from which the object is built.</li>\n<li><strong>e</strong>:  The `Encoder that is being used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of this class initialized from the dictionary values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dic</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.basetypes.MapOf", "modulename": "openc2lib.types.basetypes", "qualname": "MapOf", "kind": "class", "doc": "<p>OpenC2 MapOf</p>\n\n<p>Implements OpenC2 MapOf(<em>ktype, vtype</em>):</p>\n\n<blockquote>\n  <p>An unordered set of keys to values with the same semantics. \n          Each key has key type <em>ktype</em> and is mapped to value type <em>vtype</em>.</p>\n</blockquote>\n\n<p>It extends <code>Map</code> with the same approach already used for <code>ArrayOf</code>.\n<code>MapOf</code> for specific types are created as anonymous classes by passing\n<code>ktype</code> and <code>vtype</code> as arguments.</p>\n\n<p>Note: <code>MapOf</code> implementation currently does not support extensins!.</p>\n"}, {"fullname": "openc2lib.types.basetypes.MapOf.__init__", "modulename": "openc2lib.types.basetypes", "qualname": "MapOf.__init__", "kind": "function", "doc": "<p><code>MapOf</code> builder</p>\n\n<p>Creates a unnamed derived class from <code>Map</code>, which <code>fieldtypes</code> is set to a single value\n<code>ktype: vtype</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ktype</strong>:  The key type of the items stored in the map.</li>\n<li><strong>vtype</strong>:  The value type of the items stored in the map.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new unnamed class definition.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ktype</span>, </span><span class=\"param\"><span class=\"n\">vtype</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes", "modulename": "openc2lib.types.datatypes", "kind": "module", "doc": "<p>OpenC2 data types</p>\n\n<p>Definition of the data types in the OpenC2 DataModels (Sec. 3.4.2).\nThe naming strictly follows the definition of the Language Specification\nas close as possible. The relevant exception is represented by hyphens\nthat are always dropped.</p>\n"}, {"fullname": "openc2lib.types.datatypes.IPv4Addr", "modulename": "openc2lib.types.datatypes", "qualname": "IPv4Addr", "kind": "class", "doc": "<p>OpenC2 IPv4 Address\"</p>\n\n<p>This class implements an IPv4 Address as described in Sec. 3.4.2.8.</p>\n\n<p>The usage of the ipaddress module is compliant to what required in the\nlanguage specification for IPv4 addresses, especially the following points:\na) The IPv4 address should be available both in string and binary form\nb) The network representation is an array according to RFC 4632 Sec. 3.1\n   (host/prefix, host/mask, host/hostmask, etc.)</p>\n"}, {"fullname": "openc2lib.types.datatypes.IPv4Addr.__init__", "modulename": "openc2lib.types.datatypes", "qualname": "IPv4Addr.__init__", "kind": "function", "doc": "<p>Initialize IPv4 Address </p>\n\n<p>An IPv4 address is built from a string that uses the common dotted notation.\nIf no IPv4 address is provided, the null address is used (\"0.0.0.0\").</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ipaddr</strong>:  Quad-dotted representation of the IPv4 address.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ipaddr</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes.L4Protocol", "modulename": "openc2lib.types.datatypes", "qualname": "L4Protocol", "kind": "class", "doc": "<p>OpenC2 L4 Protocol</p>\n\n<p>This is an enumeration for all known transport protocols. The numeric identifier\nis set to the protocol number defined for IP.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.types.datatypes.L4Protocol.icmp", "modulename": "openc2lib.types.datatypes", "qualname": "L4Protocol.icmp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;L4Protocol.icmp: 1&gt;"}, {"fullname": "openc2lib.types.datatypes.L4Protocol.tcp", "modulename": "openc2lib.types.datatypes", "qualname": "L4Protocol.tcp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;L4Protocol.tcp: 6&gt;"}, {"fullname": "openc2lib.types.datatypes.L4Protocol.udp", "modulename": "openc2lib.types.datatypes", "qualname": "L4Protocol.udp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;L4Protocol.udp: 17&gt;"}, {"fullname": "openc2lib.types.datatypes.L4Protocol.sctp", "modulename": "openc2lib.types.datatypes", "qualname": "L4Protocol.sctp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;L4Protocol.sctp: 132&gt;"}, {"fullname": "openc2lib.types.datatypes.DateTime", "modulename": "openc2lib.types.datatypes", "qualname": "DateTime", "kind": "class", "doc": "<p>OpenC2 Date-Time</p>\n\n<p>This is used to represents dates and times according to Sec. 3.4.2.2.\n According to OpenC2 specification, this is the time in milliseconds from the epoch.\nBe careful that the <code>timedate</code> functions work with float timestamps expressed \nin seconds from the epoch, hence conversion is needed.</p>\n"}, {"fullname": "openc2lib.types.datatypes.DateTime.__init__", "modulename": "openc2lib.types.datatypes", "qualname": "DateTime.__init__", "kind": "function", "doc": "<p>Initialize Date-Time</p>\n\n<p>The instance is initialized with the provided timestamp, or to the current time if no \nargument is given. The timestamp is expressed in milliseconds\n        from the epoch, according to the Language Specification.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timestamp</strong>:  The timestamp to initialize the instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes.DateTime.update", "modulename": "openc2lib.types.datatypes", "qualname": "DateTime.update", "kind": "function", "doc": "<p>Change Date-Time</p>\n\n<p>Change the timestamp beard by the instance. The timestamp is expressed in milliseconds\nfrom the epoch. If no <code>timestamp</code> is given, sets to the current time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timestamp</strong>:  The timestamp to initialize the instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.datatypes.DateTime.httpdate", "modulename": "openc2lib.types.datatypes", "qualname": "DateTime.httpdate", "kind": "function", "doc": "<p>Format  to HTTP headers</p>\n\n<p>Formats the timestamp according to the requirements of HTTP headers (RFC 7231).\nUse either the <code>timestamp</code>, if provided,  or the current time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timestamp</strong>:  The timestamp to format, expressed in milliseconds from the epoch.\n:return RFC 7231 representation of the <code>timestamp</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.datatypes.Duration", "modulename": "openc2lib.types.datatypes", "qualname": "Duration", "kind": "class", "doc": "<p>OpenC2 Duration</p>\n\n<p>A time (positive number) expressed in milliseconds (Sec. 3.4.2.3).</p>\n", "bases": "builtins.int"}, {"fullname": "openc2lib.types.datatypes.Duration.__init__", "modulename": "openc2lib.types.datatypes", "qualname": "Duration.__init__", "kind": "function", "doc": "<p>Initialization</p>\n\n<p>Initialize to <code>dur</code> if greater or equal to zero, raise an exception if negative.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dur</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes.Version", "modulename": "openc2lib.types.datatypes", "qualname": "Version", "kind": "class", "doc": "<p>OpenC2 Version</p>\n\n<p>Version of the OpenC2 protocol (Sec. 3.4.2.16). Currently a <em><major>.<minor></em> format is used.</p>\n", "bases": "builtins.str"}, {"fullname": "openc2lib.types.datatypes.Version.__init__", "modulename": "openc2lib.types.datatypes", "qualname": "Version.__init__", "kind": "function", "doc": "<p>Initialize <code>Version</code> instance</p>\n\n<p>Initialize with major and minor numbers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>major</strong>:  Major number of OpenC2 version.</li>\n<li><strong>minor</strong>:  Minor number of OpenC2 version.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>Version</code> instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">major</span>, </span><span class=\"param\"><span class=\"n\">minor</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes.Version.major", "modulename": "openc2lib.types.datatypes", "qualname": "Version.major", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.Version.minor", "modulename": "openc2lib.types.datatypes", "qualname": "Version.minor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.Version.fromstr", "modulename": "openc2lib.types.datatypes", "qualname": "Version.fromstr", "kind": "function", "doc": "<p>Create <code>Version</code> instance</p>\n\n<p>Create <code>Version</code> instance from string (in the <em><major>.<minor></em> notation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v</strong>:  Text string with the Version.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>Version</code> instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.datatypes.Version.fromdict", "modulename": "openc2lib.types.datatypes", "qualname": "Version.fromdict", "kind": "function", "doc": "<p>Create <code>Version</code> instance</p>\n\n<p>Create <code>Version</code> instance from string (in the <em><major>.<minor></em> notation.\nThis method is provided to deserialize an OpenC2 message according to the openc2lib approach.\nThis method should only be used internally the openc2lib.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vers</strong>:  Text string with the Version.</li>\n<li><strong>e</strong>:  <code>Encoder</code> instance to be used (only included to be compliance with the function footprint.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>Version</code> instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">vers</span>, </span><span class=\"param\"><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.datatypes.Feature", "modulename": "openc2lib.types.datatypes", "qualname": "Feature", "kind": "class", "doc": "<p>OpenC2 Feature</p>\n\n<p>An enumeration for the fields that can be included in the <code>Results</code> (see Sec. 3.4.2.4).</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.types.datatypes.Feature.versions", "modulename": "openc2lib.types.datatypes", "qualname": "Feature.versions", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Feature.versions: 1&gt;"}, {"fullname": "openc2lib.types.datatypes.Feature.profiles", "modulename": "openc2lib.types.datatypes", "qualname": "Feature.profiles", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Feature.profiles: 2&gt;"}, {"fullname": "openc2lib.types.datatypes.Feature.pairs", "modulename": "openc2lib.types.datatypes", "qualname": "Feature.pairs", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Feature.pairs: 3&gt;"}, {"fullname": "openc2lib.types.datatypes.Feature.rate_limit", "modulename": "openc2lib.types.datatypes", "qualname": "Feature.rate_limit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Feature.rate_limit: 4&gt;"}, {"fullname": "openc2lib.types.datatypes.Nsid", "modulename": "openc2lib.types.datatypes", "qualname": "Nsid", "kind": "class", "doc": "<p>OpenC2 Namespace Identifier</p>\n\n<p>Namespace identifiers are described in Sec. 3.1.4. This class implements the required\n        controls on the string length.</p>\n", "bases": "builtins.str"}, {"fullname": "openc2lib.types.datatypes.Nsid.__init__", "modulename": "openc2lib.types.datatypes", "qualname": "Nsid.__init__", "kind": "function", "doc": "<p>Initialize <code>Nsid</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nsid</strong>:  Text string (must be more than 1 and less than 16 characters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nsid</span></span>)</span>"}, {"fullname": "openc2lib.types.datatypes.Nsid.fromdict", "modulename": "openc2lib.types.datatypes", "qualname": "Nsid.fromdict", "kind": "function", "doc": "<p>Create <code>Nsid</code> instance</p>\n\n<p>Create <code>Nsid</code> instance from string.\nThis method is provided to deserialize an OpenC2 message according to the openc2lib approach.\nThis method should only be used internally the openc2lib.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Text string with the namespace identifier..</li>\n<li><strong>e</strong>:  <code>Encoder</code> instance to be used (only included to be compliance with the function footprint.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>Version</code> instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.datatypes.ResponseType", "modulename": "openc2lib.types.datatypes", "qualname": "ResponseType", "kind": "class", "doc": "<p>OpenC2 Response-Type</p>\n\n<p>Enumerates the Response-Types according to Sec. 3.4.2.15.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.types.datatypes.ResponseType.none", "modulename": "openc2lib.types.datatypes", "qualname": "ResponseType.none", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ResponseType.none: 0&gt;"}, {"fullname": "openc2lib.types.datatypes.ResponseType.ack", "modulename": "openc2lib.types.datatypes", "qualname": "ResponseType.ack", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ResponseType.ack: 1&gt;"}, {"fullname": "openc2lib.types.datatypes.ResponseType.status", "modulename": "openc2lib.types.datatypes", "qualname": "ResponseType.status", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ResponseType.status: 2&gt;"}, {"fullname": "openc2lib.types.datatypes.ResponseType.complete", "modulename": "openc2lib.types.datatypes", "qualname": "ResponseType.complete", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ResponseType.complete: 3&gt;"}, {"fullname": "openc2lib.types.datatypes.TargetEnum", "modulename": "openc2lib.types.datatypes", "qualname": "TargetEnum", "kind": "class", "doc": "<p>OpenC2 Targets names</p>\n\n<p>The Language Specification defines a <em>Targets</em> subtypes only used in Sec. 3.4.2.1.\nThe openc2lib uses this class to keep a record of all registered Target names, while\nthe <em>Targets</em> type is never defined (it is build in an unnamed way to create the \n<code>ActionTargets</code>.</p>\n\n<p>This class is only expected to be used internally by the openc2lib.</p>\n", "bases": "openc2lib.types.basetypes.Enumerated"}, {"fullname": "openc2lib.types.datatypes.TargetEnum.features", "modulename": "openc2lib.types.datatypes", "qualname": "TargetEnum.features", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.TargetEnum.ipv4_net", "modulename": "openc2lib.types.datatypes", "qualname": "TargetEnum.ipv4_net", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.TargetEnum.ipv4_connection", "modulename": "openc2lib.types.datatypes", "qualname": "TargetEnum.ipv4_connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.TargetEnum.slpf:rule_number", "modulename": "openc2lib.types.datatypes", "qualname": "TargetEnum.slpf:rule_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.datatypes.ActionTargets", "modulename": "openc2lib.types.datatypes", "qualname": "ActionTargets", "kind": "class", "doc": "<p>OpenC2 Action-Targets</p>\n\n<p>Map of each action supported by an actuator to the list of targets applicable to \nthat action (Sec. 3.4.2.1).\nThey must be defined by each Profile.</p>\n", "bases": "openc2lib.types.basetypes.MapOf.__new__.<locals>.MapOf"}, {"fullname": "openc2lib.types.datatypes.ActionArguments", "modulename": "openc2lib.types.datatypes", "qualname": "ActionArguments", "kind": "class", "doc": "<p>OpenC2 Action-Arguments mapping</p>\n\n<p>Map of each action supported by an actuator to the list of arguments applicable to\nthat action. \nThis is not defined in the Language Specification, but used e.g., by the SLPF Profile.</p>\n", "bases": "openc2lib.types.basetypes.MapOf.__new__.<locals>.MapOf"}, {"fullname": "openc2lib.types.targettypes", "modulename": "openc2lib.types.targettypes", "kind": "module", "doc": "<p>OpenC2 target types</p>\n\n<p>Definition of the target types in the OpenC2 (Sec. 3.4.1).\nThe naming strictly follows the definition of the Language Specification\nas close as possible. The relevant exception is represented by hyphens\nthat are always dropped.</p>\n"}, {"fullname": "openc2lib.types.targettypes.IPv4Net", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Net", "kind": "class", "doc": "<p>OpenC2 IPv4 Address Range</p>\n\n<p>IPv4 Address Range as defined in Sec. 3.4.1.9.</p>\n\n<p>The Standard is not clear on this part. The \nIPv4Net Target is defined as \"Array /ipv4-net\"\n(where ipv4-net --lowercase!-- is never defined!)\nHowever, the json serialization requirements explicitely\ndefine:\nArray /ipv4-net: JSON string containing the text representation \n                                                of an IPv4 address range as specified in \n                                                [RFC4632], Section 3.1.\nAccording to this definition, I assume a single network address\nshould be managed. Extension to an array of IP network addresses\nis rather straightforward by using a list for ipv4_net attribute.\nNote that I have to keep both the string representation of the\nnetwork address as well as the IPv4Network object to easily \nmanage the code and to automate the creation of the dictionary.</p>\n"}, {"fullname": "openc2lib.types.targettypes.IPv4Net.__init__", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Net.__init__", "kind": "function", "doc": "<p>Initialize IPv4 Address Range</p>\n\n<p>Initialize `IPv4Net with IPv4 address and prefix.\nIf no IPv4 address is given, initialize to null address.\nIf no prefix is given, assume /32 (iPv4 address only).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ipv4_net</strong>:  IPv4 Network Address.</li>\n<li><strong>prefix</strong>:  IPv4 Network Adress Prefix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ipv4_net</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.types.targettypes.IPv4Net.ipv4_net", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Net.ipv4_net", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "openc2lib.types.targettypes.IPv4Net.addr", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Net.addr", "kind": "function", "doc": "<p>Returns address part only (no prefix)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.targettypes.IPv4Net.prefix", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Net.prefix", "kind": "function", "doc": "<p>Returns prefix only</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection", "kind": "class", "doc": "<p>OpenC2 IPv4 Connection</p>\n\n<p>IPv4 Connection including IPv4 addressed, protocol, and port numbers, as defined in Sec. 3.4.1.10.</p>\n", "bases": "openc2lib.types.basetypes.Record"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.__init__", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src_addr</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">targettypes</span><span class=\"o\">.</span><span class=\"n\">IPv4Net</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">src_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_addr</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">targettypes</span><span class=\"o\">.</span><span class=\"n\">IPv4Net</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"n\">openc2lib</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">datatypes</span><span class=\"o\">.</span><span class=\"n\">L4Protocol</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.src_addr", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.src_addr", "kind": "variable", "doc": "<p>Source address</p>\n", "annotation": ": openc2lib.types.targettypes.IPv4Net", "default_value": "None"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.src_port", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.src_port", "kind": "variable", "doc": "<p>Source port</p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.dst_addr", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.dst_addr", "kind": "variable", "doc": "<p>Destination address</p>\n", "annotation": ": openc2lib.types.targettypes.IPv4Net", "default_value": "None"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.dst_port", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.dst_port", "kind": "variable", "doc": "<p>Destination port</p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "openc2lib.types.targettypes.IPv4Connection.protocol", "modulename": "openc2lib.types.targettypes", "qualname": "IPv4Connection.protocol", "kind": "variable", "doc": "<p>L4 protocol</p>\n", "annotation": ": openc2lib.types.datatypes.L4Protocol", "default_value": "None"}, {"fullname": "openc2lib.types.targettypes.Features", "modulename": "openc2lib.types.targettypes", "qualname": "Features", "kind": "class", "doc": "<p>OpenC2 Features</p>\n\n<p>Implements the Features target (Section 3.4.1.5).\nJust defines an <code>ArrayOf</code> <code>Feature</code>.</p>\n", "bases": "openc2lib.types.basetypes.ArrayOf.__new__.<locals>.ArrayOf"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();