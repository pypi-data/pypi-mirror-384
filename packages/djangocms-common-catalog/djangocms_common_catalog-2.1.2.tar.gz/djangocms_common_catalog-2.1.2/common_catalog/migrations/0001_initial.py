# Generated by Django 4.2.6 on 2024-10-04 11:53

import common_catalog.models.mixins
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djangocms_text.fields
import parler.fields
import parler.models


def noop(apps, schema_editor):
    pass


def create_default_config(apps, schema_editor):
    Config = apps.get_model('common_catalog', 'Config')
    Config.objects.get_or_create(pk=1, defaults={"namespace": "Common Catalog"})


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='HTML attributes as JSON data. E.g. {"data-name": "value", "id": 42}',
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribute",
                "verbose_name_plural": "Attributes",
            },
            bases=(
                common_catalog.models.mixins.AttrsMixin,
                parler.models.TranslatableModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="AttributeType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='HTML attributes as JSON data. E.g. {"data-name": "value", "id": 42}',
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribute type",
                "verbose_name_plural": "Attribute types",
            },
            bases=(
                common_catalog.models.mixins.AttrsMixin,
                parler.models.TranslatableModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "namespace",
                    models.CharField(
                        default=None,
                        max_length=50,
                        unique=True,
                        verbose_name="Instance namespace",
                    ),
                ),
                (
                    "paginate_by",
                    models.PositiveIntegerField(
                        default=50, verbose_name="Paginate size"
                    ),
                ),
                (
                    "template_prefix",
                    models.SlugField(
                        blank=True,
                        help_text="Used in settings.COMMON_CATALOG_DETAIL_PARENT_TEMPLATE = 'site_common_catalog/{}detail.html'.format(template_prefix)",
                        null=True,
                        verbose_name="Template prefix",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuration",
                "verbose_name_plural": "Configurations",
            },
        ),
        migrations.RunPython(create_default_config, noop),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("above_title", "Above the title"),
                            ("under_title", "Under the title"),
                        ],
                        help_text="Code for position. Can be redefined in Django settings.",
                        max_length=30,
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.config",
                        verbose_name="Configuration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Location",
                "verbose_name_plural": "Locations",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="CatalogItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_from",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Display from"
                    ),
                ),
                (
                    "display_until",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Display until"
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='HTML attributes as JSON data. E.g. {"data-name": "value", "id": 42}',
                        null=True,
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.config",
                        verbose_name="Configuration",
                    ),
                ),
                (
                    "attrs",
                    models.ManyToManyField(
                        blank=True,
                        to="common_catalog.attribute",
                        verbose_name="Attributes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catalog Item",
                "verbose_name_plural": "Catalog Items",
                "ordering": ["-display_from"],
            },
            bases=(
                common_catalog.models.mixins.AttrsMixin,
                parler.models.TranslatableModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CatalogFilterType",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "attribute_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.attributetype",
                        verbose_name="Attribute type",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.CreateModel(
            name="CatalogFilteredItemsNumber",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.config",
                        verbose_name="Configuration",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.CreateModel(
            name="CatalogFilteredItemsList",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "paginate_by",
                    models.PositiveIntegerField(
                        default=10, verbose_name="Paginate size"
                    ),
                ),
                (
                    "app_config",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.config",
                        verbose_name="Configuration",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.CreateModel(
            name="CatalogFilter",
            fields=[
                (
                    "cmsplugin_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="%(app_label)s_%(class)s",
                        serialize=False,
                        to="cms.cmsplugin",
                    ),
                ),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common_catalog.attribute",
                        verbose_name="Attribute",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cms.cmsplugin",),
        ),
        migrations.AddField(
            model_name="attributetype",
            name="display_in_location",
            field=models.ManyToManyField(
                help_text="Display this filters type in the location.",
                to="common_catalog.location",
                verbose_name="Display in location",
            ),
        ),
        migrations.AddField(
            model_name="attribute",
            name="attr_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="common_catalog.attributetype",
                verbose_name="Attribute type",
            ),
        ),
        migrations.CreateModel(
            name="CatalogItemTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "ident",
                    models.SlugField(
                        blank=True,
                        help_text="The part of the title that is used in the URL",
                        max_length=255,
                        null=True,
                        verbose_name="Slug"
                    ),
                ),
                (
                    "perex",
                    djangocms_text.fields.HTMLField(
                        default="", verbose_name="Perex"
                    ),
                ),
                (
                    "description",
                    djangocms_text.fields.HTMLField(
                        default="", verbose_name="Description"
                    ),
                ),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="common_catalog.catalogitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Catalog Item Translation",
                "db_table": "common_catalog_catalogitem_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
                "unique_together": {("language_code", "master")},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AttributeTypeTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="Name"),
                ),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="common_catalog.attributetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribute type Translation",
                "db_table": "common_catalog_attributetype_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
                "unique_together": {("language_code", "master")},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AttributeTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "master",
                    parler.fields.TranslationsForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="common_catalog.attribute",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribute Translation",
                "db_table": "common_catalog_attribute_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
                "unique_together": {("language_code", "master")},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
