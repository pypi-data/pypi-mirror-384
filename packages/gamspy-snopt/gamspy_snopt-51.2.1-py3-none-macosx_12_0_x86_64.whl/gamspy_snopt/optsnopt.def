*
* optsnopt.def
*
minos lookup
begin string.nv 0 "" 0 12 For compatibility with old SNOPT spec files
end string.nv 0 "" 0 12 For compatibility with old SNOPT spec files
debug_level integer 0 0 0 maxint 0 1 Controls amount of debug information written (private flag)
print_frequency integer 0 100 1 maxint 1 1 Number of iterations between each log line (listing file)
major_print_level integer 0 1 0 maxint 1 1 Amount of information printed during optimization (listing file)
minor_print_level integer 0 1 0 maxint 1 1 Amount of information printed during optimization (listing file)
solution enumstr 0 "NO" 1 1 Prints SNOPT solution (listing file)
 "NO" 1 Turn off printing of solution
 "YES" 1 Turn on printing of solution
summary_frequency integer 0 100 1 maxint 1 1 Number of iterations between each log line (log file)
suppress_parameters string.nv 0 "" 1 1 Suppress printing of parameters (listing file)
system_information enumstr 0 "NO" 1 1 Provides additional information on the progress of the iterations (listing file)
 "NO" 1 Turn off additional printing of information on progress of algorithm
 "YES" 1 Turn on additional printing of information on progress of algorithm
timing_level integer 0 3 0 3 1 1 Amount of timing information (listing file)
feasible_point string.nv 0 "" 1 2 Ignore objective function and find a feasible point
infinite_bound double 0 1.0e20 0 maxdouble 1 2 Bounds larger than this number are considered Infinity
major_feasibility_tolerance double 0 1.0e-6 0 maxdouble 1 3 Feasibility tolerance for nonlinear constraints
major_optimality_tolerance double 0 1.0e-6 0 maxdouble 1 3 Specifies the final accuracy of the dual variables
minor_feasibility_tolerance double 0 1.0e-6 0 maxdouble 1 3 Feasibility tolerance for all variables and linear constraints
verify_level enumint 0 -1 1 4 Finite-difference checks on the derivatives
 0 1 Cheap test
 1 1 Check individual gradients
 2 1 Check individual columns of the Jacobian
 3 1 Combines verify level 1 and 2
 -1 1 Derivative checking is disabled
scale_option enumint 0 1 1 5 Controls problem scaling
 0 1 No scaling
 1 1 Scale linear variables
 2 1 Scale linear + nonlinear variables
scale_print string.nv 0 "" 1 5 Print scaling factors (listing file)
scale_tolerance double 0 0.9 0 1 1 5 Scale tolerance
crash_tolerance double 0 0.1 0 1 1 6 Allow crash procedure to ignore small elements in eligible columns
linesearch_tolerance double 0 0.9 0 1 1 6 Controls accuracy of steplength selected
pivot_tolerance double 0 3.67e-11 0 maxdouble 1 6 Used to keep the basis non-singular
qpsolver enumstr 0 "Cholesky" 1 7 Controls method used for QP subproblems
 "Cholesky" 1 full Cholesky factor
 "QN" 1 quasi-Newton method
 "CG" 1 conjugate-gradient method
crash_option enumint 0 3 1 7 Controls the basis crash algorithm
 0 1 Initial basis will be a slack basis.
 1 1 One phase CRASH.
 2 1 Two phase CRASH.
 3 1 Three phase CRASH.
elastic_weight double 0 1.0e4 0 maxdouble 1 7 Control for elastic mode
iterations_limit integer 0 1000 0 maxint 1 7 Minor iteration limit
partial_price integer 0 10 1 maxint 1 7 Number of segments in partial pricing strategy
cold_start string.nv 0 "" 1 8 Ignore advanced basis and use CRASH procedure
warm_start string.nv 0 "" 1 8 Use advanced basis provided by GAMS
major_iterations_limit integer 0 1000 0 maxint 1 8 Max number of major iterations
minor_iterations_limit integer 0 500 0 maxint 1 8 Max number of minor iterations between linearizations of nonlinear constraints
major_step_limit double 0 2.0 0 maxdouble 1 8 Limits the change in x during a linesearch
superbasics_limit integer 0 1 1 maxint 1 8 Maximum number of superbasics
derivative_linesearch string.nv 0 "" 1 8 Linesearch method (safeguarded cubic interpolation) with use of derivatives
nonderivative_linesearch string.nv 0 "" 1 8 Linesearch method (safeguarded quadratic interpolation) without use of derivatives
function_precision double 0 3.00e-13 0 maxdouble 1 8 Relative accuracy with which the nonlinear functions are evaluated
difference_interval double 0 1.5e-8 0 maxdouble 1 8 Not applicable: GAMS provides analytic derivatives
central_difference_interval double 0 6.0e-6 0 maxdouble 1 8 Not applicable: GAMS provides analytic derivatives
new_superbasics_limit integer 0 99 0 maxint 1 8 Limit on new superbasics when a QP subproblem is solved
penalty_parameter double 0 0 0 maxdouble 1 8 Initial penalty parameter
proximal_point_method enumint 0 1 1 8 Controls promimal point method used for solving linear constraints
 0 1 disable PPM
 1 1 one-norm
 2 1 two-norm
reduced_hessian_dimension integer 0 1 1 maxint 1 8 Size of Hessian matrix
violation_limit integer 0 10 0 maxint 1 8 Limit on maximum constraint violation after the linesearch
unbounded_objective_value double 0 1.0e15 0 maxdouble 1 8 Determines when a problem is called unbounded
unbounded_step_size double 0 1.0e18 0 maxdouble 1 8 Determines when a problem is called unbounded
hessian_full_memory string.nv 0 "" 1 9 Approximate Hessian is treated as a dense matrix
hessian_limited_memory string.nv 0 "" 1 9 Limited-memory procedure is used to update a diagonal Hessian approximation
hessian_frequency integer 0 999999 0 maxint 1 9 How often the full Hessian is reset to the identity matrix
hessian_updates integer 0 10 0 maxint 1 9 How often the limited memory Hessian is reset
check_frequency integer 0 60 1 maxint 1 10 Controls frequency of linear constraint satisfaction test
expand_frequency integer 0 10000 1 maxint 1 10 Setting for anti-cycling mechanism
factorization_frequency integer 0 100 1 maxint 1 10 Number of iterations between basis factorizations
LU_partial_pivoting string.nv 0 "" 1 11 LUSOL pivoting strategy
LU_rook_pivoting string.nv 0 "" 1 11 LUSOL pivoting strategy
LU_complete_pivoting string.nv 0 "" 1 11 LUSOL pivoting strategy
LU_factor_tolerance double 0 3.99 1 maxdouble 1 11 Trade-off between stability and sparsity in basis factorization
LU_update_tolerance double 0 3.99 1 maxdouble 1 11 Trade-off between stability and sparsity in basis factorization
LU_singularity_tolerance double 0 3.2e-11 0 maxdouble 1 11 Protection against ill-conditioned basis matrices
LU_density_tolerance double 0 0.6 0 1 1 11 Controls when to move to a dense factorization
*
* synonym section
*
log_frequency synonym print_frequency
hessian_dimension synonym reduced_hessian_dimension
myeolchar EOLCOMM *
*
* Groups
* <group-ident> group <group-number <help-context> <help-text>
*
printing group 1 1 Printing
problem group 2 1 Problem specification
convergence_tolerances group 3 1 Convergence tolerances
derivative_checking group 4 1 Derivative checking
scaling group 5 1 Scaling
other_tolerances group 6 1 Other tolerances
qp_subproblems group 7 1 QP subproblems
sqp_method group 8 1 SQP method
hessian_approximation group 9 1 Hessian approximation
frequencies group 10 1 Frequencies
lusol_options group 11 1 LUSOL options
compatibility group 12 0 For compatibility with older option files
*** End of file
