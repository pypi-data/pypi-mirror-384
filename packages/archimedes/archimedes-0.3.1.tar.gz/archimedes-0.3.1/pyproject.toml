[project]
name = "archimedes"
version = "0.3.1"
description = "Python framework for modeling, simulation, and controls development"
readme = "README.md"
authors = [
    { name = "Jared Callaham", email = "jared.callaham@gmail.com" }
]
requires-python = ">=3.11"
dependencies = [
    "casadi>=3.6.7",
    "jinja2>=3.1.6",
    "numpy>=2.2.4",
    "osqp>=1.0.4",
    "pydantic>=2.11.9",
    "scipy>=1.15.2",
    "typing-extensions>=4.12.2",
]
license = "GPL-3.0-or-later"
license-files = ["LICEN[CS]E*"]

[project.urls]
Source = "https://github.com/pinetreelabs/archimedes/"
Documentation = "https://pinetreelabs.github.io/archimedes/"
Issues = "https://github.com/pinetreelabs/archimedes/issues"

[project.optional-dependencies]
all = [
    "control>=0.10.1",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "matplotlib>=3.10.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.3",
    "furo>=2024.8.6",
    "mypy>=1.15.0",
    "myst-nb>=1.3.0",
    "myst-parser[linkify]>=4.0.1",
    "nbconvert>=7.16.6",
    "nbmake>=1.5.5",
    "pip-audit>=2.9.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "reuse>=5.0.2",
    "ruff>=0.11.2",
    "sphinx>=8.2.3",
    "sphinx-design>=0.6.1",
    "sphinxcontrib-googleanalytics>=0.5",
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
]
exclude = [
    "src/archimedes/experimental/*",
    "examples/*",
    "docs/source/conf.py"
]

[tool.ruff.lint.isort]
known-first-party = ["archimedes"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
disallow_untyped_defs = false
ignore_missing_imports = true
check_untyped_defs = true
exclude = [
    "archimedes/docs/*",
    "archimedes/experimental/*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"

[tool.coverage.run]
source = ["archimedes"]
omit = [
    "*/archimedes/docs/*",
    "*/archimedes/experimental/*",
    "*/archimedes/typing.py",
    "*/archimedes/theme.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
]
fail_under = 100
