#!/usr/bin/env python3
"""
Debug Role Chain - –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–æ–ª–µ–π
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –æ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
Author: Vasiliy Zdanovskiy
email: vasilyvz@gmail.com
"""
import asyncio
import json
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
from mcp_security_framework import SecurityManager, AuthManager, PermissionManager
from mcp_security_framework.schemas.config import (
    SecurityConfig,
    AuthConfig,
    PermissionConfig,
)


async def debug_role_chain():
    """Debug the complete role chain from authentication to blocking."""
    print("üîç –ê–ù–ê–õ–ò–ó –¶–ï–ü–û–ß–ö–ò –ë–õ–û–ö–ò–†–û–í–ö–ò –†–û–õ–ï–ô")
    print("=" * 60)
    # Load configuration
    config_path = (
        project_root
        / "mcp_proxy_adapter"
        / "examples"
        / "server_configs"
        / "config_http_token.json"
    )
    with open(config_path) as f:
        config = json.load(f)
    security_config = config.get("security", {})
    print("üìã 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô")
    print("-" * 30)
    api_keys = security_config.get("auth", {}).get("api_keys", {})
    for key, value in api_keys.items():
        print(f"  {key}: {value}")
    print("\nüìã 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –†–û–õ–ï–ô")
    print("-" * 30)
    roles_config = security_config.get("permissions", {}).get("roles", {})
    for role, permissions in roles_config.items():
        print(f"  {role}: {permissions}")
    print("\nüìã 3. –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("-" * 30)
    # Create permission config
    perm_config = PermissionConfig(
        roles_file=str(
            project_root
            / "mcp_proxy_adapter"
            / "examples"
            / "server_configs"
            / "roles.json"
        ),
        default_role="guest",
        admin_role="admin",
        role_hierarchy=security_config.get("permissions", {}).get("role_hierarchy", {}),
        permission_cache_enabled=True,
        permission_cache_ttl=300,
        wildcard_permissions=False,
        strict_mode=True,
        roles=roles_config,
    )
    # Create auth config
    auth_config = AuthConfig(
        enabled=security_config.get("auth", {}).get("enabled", True),
        methods=security_config.get("auth", {}).get("methods", ["api_key"]),
        api_keys=api_keys,
        user_roles=security_config.get("auth", {}).get("user_roles", {}),
        jwt_secret=security_config.get("auth", {}).get("jwt_secret"),
        jwt_algorithm=security_config.get("auth", {}).get("jwt_algorithm", "HS256"),
        jwt_expiry_hours=security_config.get("auth", {}).get("jwt_expiry_hours", 24),
        certificate_auth=security_config.get("auth", {}).get("certificate_auth", False),
        certificate_roles_oid=security_config.get("auth", {}).get(
            "certificate_roles_oid"
        ),
        certificate_permissions_oid=security_config.get("auth", {}).get(
            "certificate_permissions_oid"
        ),
        basic_auth=security_config.get("auth", {}).get("basic_auth", False),
        oauth2_config=security_config.get("auth", {}).get("oauth2_config"),
        public_paths=security_config.get("auth", {}).get("public_paths", []),
    )
    # Create security config
    security_config_obj = SecurityConfig(auth=auth_config, permissions=perm_config)
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    print("\nüìã 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í")
    print("-" * 30)
    # Initialize managers
    permission_manager = PermissionManager(perm_config)
    auth_manager = AuthManager(auth_config, permission_manager)
    security_manager = SecurityManager(security_config_obj)
    print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print("\nüìã 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("-" * 30)
    # Test authentication with different tokens
    test_tokens = {
        "admin": "test-token-123",
        "user": "user-token-456",
        "readonly": "readonly-token-123",
        "invalid": "invalid-token-999",
    }
    auth_results = {}
    for role, token in test_tokens.items():
        print(f"\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏ '{role}': {token}")
        try:
            result = auth_manager.authenticate_api_key(token)
            auth_results[role] = result
            print(
                f"  ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–ê' if result.is_valid else '–ù–ï–£–î–ê–ß–ù–ê'}"
            )
            if result.is_valid:
                print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.username}")
                print(f"  üè∑Ô∏è –†–æ–ª–∏: {result.roles}")
                print(f"  üîë –ú–µ—Ç–æ–¥: {result.auth_method}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
        except Exception as e:
            print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            auth_results[role] = None
    print("\nüìã 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í –î–û–°–¢–£–ü–ê")
    print("-" * 30)
    # Test permissions for different actions
    test_actions = ["read", "write", "manage", "delete"]
    for role, auth_result in auth_results.items():
        if auth_result and auth_result.is_valid:
            print(
                f"\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª–∏ '{role}' (—Ä–æ–ª–∏: {auth_result.roles})"
            )
            for action in test_actions:
                try:
                    # Check permissions using permission manager
                    validation_result = permission_manager.validate_access(
                        auth_result.roles, [action]
                    )
                    status = (
                        "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û"
                        if validation_result.is_valid
                        else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
                    )
                    print(f"  {action}: {status}")
                    if not validation_result.is_valid:
                        print(f"    üìù –ü—Ä–∏—á–∏–Ω–∞: {validation_result.error_message}")
                        print(
                            f"    üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞: {validation_result.effective_permissions}"
                        )
                        print(
                            f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞: {validation_result.missing_permissions}"
                        )
                except Exception as e:
                    print(f"  {action}: ‚ùå –û–®–ò–ë–ö–ê - {e}")
    print("\nüìã 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –¶–ï–ü–û–ß–ö–ò")
    print("-" * 30)
    # Test complete request validation
    for role, token in test_tokens.items():
        print(f"\nüîÑ –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Ä–æ–ª–∏ '{role}'")
        request_data = {
            "api_key": token,
            "required_permissions": ["write"],
            "client_ip": "127.0.0.1",
        }
        try:
            result = security_manager.validate_request(request_data)
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result.is_valid else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            if not result.is_valid:
                print(f"  üìù –ü—Ä–∏—á–∏–Ω–∞: {result.error_message}")
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
    print("\nüìã 8. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
    print("-" * 30)
    print("üîç –ü–†–û–ë–õ–ï–ú–ê: Readonly —Ä–æ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ write –æ–ø–µ—Ä–∞—Ü–∏—è–º")
    print("\nüìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
    print("1. Middleware –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ request.state")
    print("2. Framework middleware –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ —É—Ä–æ–≤–Ω–µ middleware")
    print("3. –ö–æ–º–∞–Ω–¥–∞ role_test –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É middleware –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ framework middleware —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç user info")
    print("2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ middleware")
    print("3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ request.state —Å–æ–¥–µ—Ä–∂–∏—Ç user info")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É middleware –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")


if __name__ == "__main__":
    asyncio.run(debug_role_chain())
