#!/usr/bin/env python3
"""
Debug Request State - –ü—Ä–æ–≤–µ—Ä–∫–∞ request.state
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ middleware —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ request.state.
Author: Vasiliy Zdanovskiy
email: vasilyvz@gmail.com
"""
import asyncio
import json
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
from fastapi import FastAPI, Request
from fastapi.testclient import TestClient
from mcp_proxy_adapter.api.app import create_app


async def debug_request_state():
    """Debug request state handling."""
    print("üîç –û–¢–õ–ê–î–ö–ê REQUEST.STATE")
    print("=" * 50)
    # Create test app with proper configuration
    config_path = (
        project_root
        / "mcp_proxy_adapter"
        / "examples"
        / "server_configs"
        / "config_http_token.json"
    )
    with open(config_path) as f:
        config = json.load(f)
    # Override global config for testing
    import mcp_proxy_adapter.config

    mcp_proxy_adapter.config.config = config
    app = create_app(config)
    client = TestClient(app)
    print("üìã 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("-" * 30)
    # Test without authentication
    response = client.post(
        "/cmd",
        json={
            "jsonrpc": "2.0",
            "method": "echo",
            "params": {"message": "test"},
            "id": 1,
        },
    )
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print("\nüìã 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° ADMIN –¢–û–ö–ï–ù–û–ú")
    print("-" * 30)
    # Test with admin token
    response = client.post(
        "/cmd",
        json={
            "jsonrpc": "2.0",
            "method": "echo",
            "params": {"message": "test"},
            "id": 1,
        },
        headers={"X-API-Key": "test-token-123"},
    )
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print("\nüìã 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° USER –¢–û–ö–ï–ù–û–ú")
    print("-" * 30)
    # Test with user token
    response = client.post(
        "/cmd",
        json={
            "jsonrpc": "2.0",
            "method": "echo",
            "params": {"message": "test"},
            "id": 1,
        },
        headers={"X-API-Key": "user-token-456"},
    )
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print("\nüìã 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° READONLY –¢–û–ö–ï–ù–û–ú")
    print("-" * 30)
    # Test with readonly token
    response = client.post(
        "/cmd",
        json={
            "jsonrpc": "2.0",
            "method": "echo",
            "params": {"message": "test"},
            "id": 1,
        },
        headers={"X-API-Key": "readonly-token-123"},
    )
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print("\nüìã 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ROLE_TEST –ö–û–ú–ê–ù–î–´")
    print("-" * 30)
    # Test role_test command with readonly token
    response = client.post(
        "/cmd",
        json={
            "jsonrpc": "2.0",
            "method": "role_test",
            "params": {"action": "write"},
            "id": 1,
        },
        headers={"X-API-Key": "readonly-token-123"},
    )
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print("\nüìã 6. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
    print("-" * 30)
    print("üîç –ü–†–û–ë–õ–ï–ú–ê: Readonly —Ä–æ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º")
    print("\nüìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
    print("1. Framework middleware –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç user info –≤ request.state")
    print("2. –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ middleware")
    print("3. –ö–æ–º–∞–Ω–¥—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É middleware –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å CommandPermissionMiddleware")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ framework middleware —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç user info")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –≤ –∫–æ–º–∞–Ω–¥—ã")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é middleware")


if __name__ == "__main__":
    asyncio.run(debug_request_state())
