include:
  - https://gitlab.com/Linaro/tuxpkg/-/raw/v0.16.0/gitlab-ci-pipeline.yml
  - template: Security/SAST.gitlab-ci.yml

variables:
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp, public
  TUXPKG_PROJECT: tuxrun

#############
# templates #
#############
.job:
  image: registry.gitlab.com/linaro/tuxpkg:ci-debian
  before_script:
    - apt update && apt install -y python3-pip virtualenv python3-virtualenv python3-venv python3-ruamel.yaml
    - python3 -m venv $HOME/.foo-venv
    - source $HOME/.foo-venv/bin/activate
    - python3 -m pip install tuxlava mkdocs-material tuxpkg ruamel.yaml # FIXME not in Debian
  script:
  - make $CI_JOB_NAME

######
# CI #
######
ci-image-integration:
  stage: .pre
  image: docker:20.10-dind
  services:
  - name: docker:20.10-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
  - 'docker build --network host -t $CI_REGISTRY_IMAGE/ci-integration -f Dockerfile.ci-integration .'
  - 'docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY'
  - 'docker push $CI_REGISTRY_IMAGE/ci-integration'
  only:
    refs:
    - master
    changes:
    - Dockerfile.ci-integration

###############################
# tuxrun-dispatcher container #
###############################

.docker:
  image: docker:20.10-dind
  services:
  - name: docker:20.10-dind
  variables:
  before_script:
    # FIXME: We are using hack to build aarch64 container since lava-distcher from gitlab pipelin
    # for LAVA project is not multiarch
    - if [ $TAG_APPEND == "-arm64" ]; then sed -i "s|amd64/lava-dispatcher|aarch64/lava-dispatcher|g" Dockerfile.tuxrun-dispatcher; fi
    - docker info
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - export tag="linaro/tuxrun-dispatcher:${CI_COMMIT_TAG}${TAG_APPEND}"
    - export latest="linaro/tuxrun-dispatcher:latest${TAG_APPEND}"
  script:
    - docker build --network host --pull --tag "${tag}" --tag "${latest}" -f Dockerfile.tuxrun-dispatcher .
    - docker push "${tag}"
    - docker push "${latest}"
  variables:
    DOCKER_DRIVER: overlay2

docker-amd64:
  extends: .docker
  stage: build
  variables:
    TAG_APPEND: -amd64
  only:
    - tags

docker-arm64:
  extends: .docker
  stage: build
  tags:
     - saas-linux-medium-arm64
  variables:
    TAG_APPEND: -arm64
  only:
    - tags

.docker-master:
  extends: .docker
  stage: build
  variables:
    IMAGE_NAME: "linaro/tuxrun-dispatcher:master"
  script:
    - docker build --network host --pull --tag "${IMAGE_NAME}${TAG_APPEND}" -f Dockerfile.tuxrun-dispatcher .
    - docker push "${IMAGE_NAME}${TAG_APPEND}"
  only:
    - master

docker-master-amd64:
  extends: .docker-master
  stage: build
  variables:
    TAG_APPEND: -amd64

docker-master-arm64:
  extends: .docker-master
  stage: build
  tags:
     - saas-linux-medium-arm64
  variables:
    TAG_APPEND: -arm64

publish-dockerhub:
  extends: .docker
  stage: deploy
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  script:
    - docker manifest create "${tag}" "${tag}-amd64" "${tag}-arm64"
    - docker manifest create "${latest}" "${latest}-amd64" "${latest}-arm64"
    - docker manifest push "${tag}"
    - docker manifest push "${latest}"
  only:
    - tags

publish-master-dockerhub:
  extends: .docker
  stage: deploy
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    IMAGE_NAME: "linaro/tuxrun-dispatcher:master"
  script:
    - docker manifest create "${IMAGE_NAME}" "${IMAGE_NAME}-amd64" "${IMAGE_NAME}-arm64"
    - docker manifest push "${IMAGE_NAME}"
  only:
    - master

########
# test #
########
stylecheck:
  extends: .job
  stage: test

typecheck:
  extends: .job
  stage: test

spellcheck:
  extends: .job
  stage: test

###############
# integration #
###############
integration:
  extends: .job
  image: $CI_REGISTRY_IMAGE/ci-integration
  stage: test
  cache:
    paths: [/root/.cache/tuxrun]
  script:
  - PYTHONPATH=. python3 test/integration.py --device $DEVICE --tests $TEST
  parallel:
    matrix:
    #- DEVICE:
    #  - qemu-arm64
    #  - qemu-arm64be
    #  - qemu-mips64
    #  - qemu-mips64el
    #  - qemu-ppc32
    #  - qemu-ppc64
    #  - qemu-ppc64le
    #  - qemu-s390
    #  - qemu-sparc64
    #  - qemu-x86_64
    #  TEST:
    #  - ltp-fcntl-locktests ltp-fsx ltp-fs_perms_simple ltp-smoke
    #  - ltp-fs_bind
    #  - ltp-nptl
    ## FIXME ltp-nptl takes forever on some qemus; ignore that jobs for now
    - DEVICE:
      - qemu-armv5
    #  - qemu-armv7
    #  - qemu-armv7be
    #  - qemu-i386
    #  - qemu-mips32
    #  - qemu-mips32el
    #  - qemu-riscv64
      TEST:
    #  - ltp-fcntl-locktests ltp-fsx ltp-fs_perms_simple ltp-smoke
    #  - ltp-fs_bind
      - ltp-smoke

#########
# Build #
#########
doc:
  extends: .job
  stage: build
  artifacts:
    paths:
      - public

###########
# deploy  #
###########
pages:
  extends: .job
  stage: deploy
  needs:
    - doc
    - repository
  artifacts:
    paths:
      - public
  only:
    - tags
  script:
    - cp -r dist/repo public/packages/

# trigger packages.tuxsuite.com on release
trigger_tuxsuite:
  stage: .post
  image: $CI_REGISTRY_IMAGE/ci-integration
  before_script:
    - apt update
    - apt install -y curl
  script:
    - "curl -X POST -F token=$TUXSUITE_PACKAGES_TRIGGER_TOKEN -F ref=master https://gitlab.com/api/v4/projects/13070238/trigger/pipeline"
  only:
    - tags
  needs:
    - pages

trigger_bot_pipeline:
  stage: test
  image: curlimages/curl:latest
  script:
    - echo "Triggering pipeline for pre-commit hook."
    - |
      curl -X POST \
           -F token=$GITLABBOT_TRIGGER_TOKEN \
           -F ref=main \
           https://gitlab.com/api/v4/projects/$GITLABBOT_PROJECT_ID/trigger/pipeline
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
