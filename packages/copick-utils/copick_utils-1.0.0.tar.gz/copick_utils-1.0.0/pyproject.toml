[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "copick-utils"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version"]
dependencies = [
    "copick>=1.16.0",
    "click",
    "click-option-group",
    "numpy",
    "scipy",
    "scikit-image",
    "zarr",
    "trimesh",
    "manifold3d",
    "mapbox-earcut",
    "tqdm",
    "scikit-learn",
    "shapely",
    "rtree"
]
authors = [
    { name = "Kyle Harrington", email = "czi@kyleharrington.com" },
    { name = "Jonathan Schwartz", email = "jonathan.schwartz@czii.org" },
]
description = "Utilities for copick"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["copick", "cryoet", "cryo-et", "tomography", "annotation", "utilities"]

[project.urls]
Repository = "https://github.com/KyleHarrington/copick-utils.git"
Issues = "https://github.com/KyleHarrington/copick-utils/issues"
Documentation = "https://github.com/KyleHarrington/copick-utils#readme"

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "hatchling>=1.25.0",
    "hatch-vcs>=0.4.0",
    "pre-commit>=4.2.0",
    "ruff>=0.12.0",
]

[project.entry-points."copick.convert.commands"]
picks2seg = "copick_utils.cli.conversion_commands:picks2seg"
seg2picks = "copick_utils.cli.conversion_commands:seg2picks"
mesh2seg = "copick_utils.cli.conversion_commands:mesh2seg"
seg2mesh = "copick_utils.cli.conversion_commands:seg2mesh"
mesh2picks = "copick_utils.cli.conversion_commands:mesh2picks"
picks2mesh = "copick_utils.cli.conversion_commands:picks2mesh"
picks2sphere = "copick_utils.cli.conversion_commands:picks2sphere"
picks2ellipsoid = "copick_utils.cli.conversion_commands:picks2ellipsoid"
picks2plane = "copick_utils.cli.conversion_commands:picks2plane"
picks2surface = "copick_utils.cli.conversion_commands:picks2surface"

[project.entry-points."copick.process.commands"]
separate_components = "copick_utils.cli.processing_commands:separate_components"
filter_components = "copick_utils.cli.processing_commands:filter_components"
skeletonize = "copick_utils.cli.processing_commands:skeletonize"
fit_spline = "copick_utils.cli.processing_commands:fit_spline"
validbox = "copick_utils.cli.processing_commands:validbox"
hull = "copick_utils.cli.processing_commands:hull"

[project.entry-points."copick.logical.commands"]
meshop = "copick_utils.cli.logical_commands:meshop"
segop = "copick_utils.cli.logical_commands:segop"
enclosed = "copick_utils.cli.logical_commands:enclosed"
clipmesh = "copick_utils.cli.logical_commands:clipmesh"
clipseg = "copick_utils.cli.logical_commands:clipseg"
clippicks = "copick_utils.cli.logical_commands:clippicks"
picksin = "copick_utils.cli.logical_commands:picksin"
picksout = "copick_utils.cli.logical_commands:picksout"

[tool.hatch.version]
path = "src/copick_utils/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 120
target_version = ['py311']

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "B",       # bugbear
    "I",       # isort
    "N",       # pep8-naming
    "ASYNC",   # async
    "COM",     # commas
    "C4",      # comprehensions
    "DTZ",     # datetimez
    "ISC",     # implicit-str-concat
    "G",       # logging-format
    "T20",     # print
    "SIM",     # simplify
]
ignore = [
    "G004",   # logging format
    "W293",   # blank line contains whitespace
    "B008",   # Do not perform calls in argument defaults
    "B905",   # `zip()` without an explicit `strict=` parameter
    "N802",   # Function name should be lowercase
    "N805",   # First argument of a method should be named `self`
    "N806",   # Variable in function should be lowercase
    "N999",   # Invalid module name
    "E501",   # line too long
    "C408",   # rewrite empty built-ins as literals
    "T201",   # print statements.
    "DTZ007", # Datetime objects without timezones.
    "DTZ005", # More datetimes without timezones.
]

[tool.ruff.lint.isort]
known-first-party =["common"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.coverage.run]
source_pkgs = ["copick_utils", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
copick_utils = ["src/copick_utils", "*/copick-utils/src/copick_utils"]
tests = ["tests", "*/copick-utils/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
