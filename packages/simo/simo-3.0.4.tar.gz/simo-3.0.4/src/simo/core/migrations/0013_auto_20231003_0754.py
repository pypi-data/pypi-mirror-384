# Generated by Django 3.2.9 on 2023-10-03 07:54
from django.db import migrations


def forwards_func(apps, schema_editor):
    pass
    # legacy
    # Instance = apps.get_model("core", "Instance")
    # Component = apps.get_model("core", "Component")
    # GlobalPreferenceModel = apps.get_model(
    #     'dynamic_preferences', "GlobalPreferenceModel"
    # )
    #
    # Instance.objects.create(
    #     uid=GlobalPreferenceModel.objects.get(
    #         section='core', name='hub_uid'
    #     ).raw_value,
    #     name=GlobalPreferenceModel.objects.get(
    #         section='core', name='hub_name'
    #     ).raw_value,
    #     cover_image=GlobalPreferenceModel.objects.get(
    #         section='core', name='cover_image'
    #     ).raw_value,
    #     cover_image_synced=True,
    #     secret_key=GlobalPreferenceModel.objects.get(
    #         section='core', name='hub_secret'
    #     ).raw_value,
    #     location=GlobalPreferenceModel.objects.get(
    #         section='core', name='location_coordinates'
    #     ).raw_value,
    #     timezone=GlobalPreferenceModel.objects.get(
    #         section='core', name='time_zone'
    #     ).raw_value,
    #     units_of_measure=GlobalPreferenceModel.objects.get(
    #         section='core', name='units_of_measure'
    #     ).raw_value,
    #     share_location=True,
    #     remote_http=GlobalPreferenceModel.objects.get(
    #         section='core', name='remote_http'
    #     ).raw_value,
    #     remote_connection_version=int(GlobalPreferenceModel.objects.get(
    #         section='core', name='remote_conn_version'
    #     ).raw_value),
    #     indoor_climate_sensor=Component(id=int(GlobalPreferenceModel.objects.get(
    #         section='core', name='indoor_climate_sensor'
    #     ).raw_value)),
    #     history_days=int(GlobalPreferenceModel.objects.get(
    #         section='core', name='history_days'
    #     ).raw_value)
    # )


def reverse_func(apps, schema_editor):
    Instance = apps.get_model("core", "Instance")
    Instance.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0012_instance'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func, elidable=True),
    ]
