[build-system]
requires = ["setuptools", "wheel", "cython"]
build-backend = "setuptools.build_meta"

[project]
name = "flask_inputfilter"
version = "0.7.5"
description = "A library to easily filter and validate input data in Flask applications"
readme = "README.md"
keywords = [
    "flask", "input", "validation", "filter", "condition", "sanitization", "api", "data",
    "schema", "security", "middleware", "request", "serialization", "json-validation", "form"
]
requires-python = ">=3.7"
license = {text = "MIT"}
authors = [
    {name = "Leander Cain Slotosch", email = "slotosch.leander@outlook.de"}
]
dependencies = [
    "flask>=2.1"
]
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.7",
]

[project.optional-dependencies]
dev = [
    "build",
    "coverage",
    "coveralls",
    "cython",
    "docformatter",
    "pillow>=8.0.0",
    "pytest",
    "requests>=2.22.0",
    "sphinx",
    "sphinx-autobuild",
    "sphinx_design",
    "sphinx_rtd_theme",
    "ruff"
]
optional = [
    "pillow>=8.0.0",
    "requests>=2.22.0",
    "cython>=3.0; python_version <= '3.12'",
    "cython>=3.0.12; python_version >= '3.13'",
]
compile = [
    "cython>=3.0; python_version <= '3.12'",
    "cython>=3.0.12; python_version >= '3.13'",
]

[project.urls]
Homepage = "https://github.com/LeanderCS/flask-inputfilter"
Documentation = "https://leandercs.github.io/flask-inputfilter"
Source = "https://github.com/LeanderCS/flask-inputfilter"
Issues = "https://github.com/LeanderCS/flask-inputfilter/issues"

[tool.setuptools]
package-data = {flask_inputfilter = ["*.pyx", "*.py"]}
include-package-data = true

[tool.setuptools.packages.find]
include = ["flask_inputfilter"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning"
]
addopts = "--tb=short -q"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37, py38, py39, py310, py311, py312, py313, py314

[testenv]
deps =
    -renv_configs/requirements-{envname}.txt
install_command = {envbindir}/python -I -m pip install {opts} {packages}
commands =
    pytest
"""

[tool.coverage.run]
source = ["flask_inputfilter"]

[tool.coverage.report]
omit = ["__init__.py", "*/tests/*"]

[tool.ruff]
line-length = 79
#extend-include = ["*.pyx", "*.pxd"]
target-version = "py37"
fix = true
exclude = [
    "tests",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "YTT",    # flake8-2020
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "PIE",    # flake8-pie
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
    "S",      # flake8-bandit (Security)
    "BLE",    # flake8-blind-except
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "ERA",    # eradicate
    "PERF",   # Perflint
    "FURB",   # refurb
    "TRY",    # tryceratops
    "SLF",    # flake8-self
    "A",      # flake8-builtins
]
fixable = ["ALL"]
unfixable = []
ignore = [
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use a f-string literal, assign to variable first
    "UP045",  # X | None syntax (Python 3.10+)
    "UP006",  # Use `list` instead of `List` (Python 3.9+)
    "UP007",  # Use `X | Y` for unions (Python 3.10+)
    "UP035",  # Import from collections.abc (Python 3.9+)
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any) - OK for flexible library
    "TRY003", # Long exception messages (ok for Libraries)
    "TRY300", # Consider moving to else block - not always applicable
    "TRY301", # Abstract raise to inner function - not needed for simple cases
    "PERF203", # try-except in loop - acceptable for validation patterns
    "A001", # Variable shadowing builtin - OK in specific contexts (e.g. copyright)
    "A002", # Variable shadowing builtin
]
pyupgrade = [
    true
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Assert usage ist OK in Tests
    "ANN",     # Type annotations optional in Tests
    "ARG",     # Unused arguments OK in Test fixtures
]
"examples/*" = [
    "ANN201",  # Missing return type annotation in examples
    "ANN204",  # Missing return type annotation for __init__ in examples
    "S201",    # debug=True is OK in examples
]
"docs/*" = [
    "A001",    # Variable shadowing builtin (copyright) is OK in docs
]

[tool.ruff.lint.isort]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.docformatter]
wrap-summaries = 79
wrap-descriptions = 79
recursive = true
in_place = true
pre_summary_newline = true
