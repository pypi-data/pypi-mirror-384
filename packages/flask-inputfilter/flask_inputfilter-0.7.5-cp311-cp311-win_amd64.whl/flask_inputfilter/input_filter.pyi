from __future__ import annotations

from collections.abc import Callable
from typing import Any, Optional, Type, TypeVar, Union

from flask import Response

from flask_inputfilter.models import (
    BaseCondition,
    BaseFilter,
    BaseValidator,
    ExternalApiConfig,
    FieldModel,
)

T = TypeVar("T")

class InputFilter:
    methods: list[str]
    fields: dict[str, FieldModel]
    conditions: list[BaseCondition]
    global_filters: list[BaseFilter]
    global_validators: list[BaseValidator]
    data: dict[str, Any]
    validated_data: dict[str, Any]
    errors: dict[str, str]
    model_class: Optional[Type[T]]

    def __init__(self, methods: Optional[list[str]] = ...) -> None: ...
    def is_valid(self) -> bool: ...
    @classmethod
    def validate(
        cls,
    ) -> Callable[
        [Any],
        Callable[
            [tuple[Any, ...], dict[str, Any]],
            Union[Response, tuple[Any, dict[str, Any]]],
        ],
    ]: ...
    def validate_data(
        self, data: Optional[dict[str, Any]] = ...
    ) -> Union[dict[str, Any], Type[T]]: ...
    def add_condition(self, condition: BaseCondition) -> None: ...
    def get_conditions(self) -> list[BaseCondition]: ...
    def set_data(self, data: dict[str, Any]) -> None: ...
    def get_value(self, name: str) -> Any: ...
    def get_values(self) -> dict[str, Any]: ...
    def get_raw_value(self, name: str) -> Any: ...
    def get_raw_values(self) -> dict[str, Any]: ...
    def get_unfiltered_data(self) -> dict[str, Any]: ...
    def set_unfiltered_data(self, data: dict[str, Any]) -> None: ...
    def has_unknown(self) -> bool: ...
    def get_error_message(self, field_name: str) -> Optional[str]: ...
    def get_error_messages(self) -> dict[str, str]: ...
    def add(
        self,
        name: str,
        required: bool = ...,
        default: Any = ...,
        fallback: Any = ...,
        filters: Optional[list[BaseFilter]] = ...,
        validators: Optional[list[BaseValidator]] = ...,
        steps: Optional[list[Union[BaseFilter, BaseValidator]]] = ...,
        external_api: Optional[ExternalApiConfig] = ...,
        copy: Optional[str] = ...,
    ) -> None: ...
    def has(self, field_name: str) -> bool: ...
    def get_input(self, field_name: str) -> Optional[FieldModel]: ...
    def get_inputs(self) -> dict[str, FieldModel]: ...
    def remove(self, field_name: str) -> Optional[FieldModel]: ...
    def count(self) -> int: ...
    def replace(
        self,
        name: str,
        required: bool = ...,
        default: Any = ...,
        fallback: Any = ...,
        filters: Optional[list[BaseFilter]] = ...,
        validators: Optional[list[BaseValidator]] = ...,
        steps: Optional[list[Union[BaseFilter, BaseValidator]]] = ...,
        external_api: Optional[ExternalApiConfig] = ...,
        copy: Optional[str] = ...,
    ) -> None: ...
    def add_global_filter(self, filter: BaseFilter) -> None: ...
    def get_global_filters(self) -> list[BaseFilter]: ...
    def clear(self) -> None: ...
    def merge(self, other: InputFilter) -> None: ...
    def set_model(self, model_class: Type[T]) -> None: ...
    def add_global_validator(self, validator: BaseValidator) -> None: ...
    def get_global_validators(self) -> list[BaseValidator]: ...
