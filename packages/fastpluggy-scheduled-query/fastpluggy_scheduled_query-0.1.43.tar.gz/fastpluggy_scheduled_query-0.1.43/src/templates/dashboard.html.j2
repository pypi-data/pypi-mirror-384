
    <!-- Tabler Core -->
    <link href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/tabler-icons.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: var(--tblr-primary);
        }
        .metric-card {
            background: var(--tblr-primary-lt);
        }
    </style>

<div class="page">
    <div class="page-wrapper">
        <div class="container-xl">
            <!-- Header -->
            <div class="page-header d-print-none mb-3">
                <div class="row align-items-center">
                    <div class="col">
                        <h1 class="page-title">Query Results Dashboard</h1>
                        <p class="text-muted">Monitor and analyze scheduled query execution results</p>
                    </div>
                    <div class="col-auto">
                        <button onclick="refreshData()" class="btn btn-primary d-inline-flex align-items-center">
                            <i class="ti ti-refresh icon me-1"></i>
                            Refresh
                        </button>
                    </div>
                </div>
            </div>

            <div class="row g-3">
                <!-- Scheduled Queries List -->
                <div class="col-lg-4">
                    <div class="card">
                        <div class="card-header gradient-bg text-white">
                            <h3 class="card-title d-flex align-items-center">
                                <i class="ti ti-database icon me-2"></i>
                                Scheduled Queries
                            </h3>
                        </div>

                        <div class="card-body">
                            <div class="mb-3">
                                <div class="input-icon">
                                    <span class="input-icon-addon">
                                        <i class="ti ti-search"></i>
                                    </span>
                                    <input
                                        type="text"
                                        class="form-control"
                                        placeholder="Search queries..."
                                        id="searchInput"
                                        onkeyup="filterQueries()"
                                    />
                                </div>
                            </div>

                            <div class="d-flex flex-column gap-2" id="queriesList">
                                {% for query in widget.scheduled_queries %}
                                <div class="query-item card card-sm cursor-pointer"
                                     onclick="selectQuery({{ query.id }})"
                                     data-query-name="{{ query.name|lower }}"
                                     data-query-id="{{ query.id }}">
                                    <div class="card-body">
                                        <div class="d-flex align-items-center justify-content-between mb-2">
                                            <h4 class="card-title m-0 text-truncate">{{ query.name }}</h4>
                                            <span class="status-dot {{ 'status-green' if query.enabled else 'status-gray' }}"></span>
                                        </div>
                                        <div class="text-muted mb-1">Schedule: {{ query.cron_schedule }}</div>
                                        <div class="text-muted text-xs">Last: {{ query.last_executed.strftime('%Y-%m-%d %H:%M:%S') if query.last_executed else 'Never' }}</div>
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Query Details and Results -->
                <div class="col-lg-8">
                    <div id="queryDetails" class="d-none">
                        <!-- Query Details Card -->
                        <div class="card mb-3">
                            <div class="card-header gradient-bg text-white">
                                <h3 class="card-title d-flex align-items-center">
                                    <i class="ti ti-player-play icon me-2"></i>
                                    <span id="selectedQueryName"></span>
                                </h3>
                            </div>

                            <div class="card-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <h4 class="mb-3">Query Configuration</h4>
                                        <div class="mb-2">
                                            <div class="mb-1"><span class="fw-bold">Schedule:</span> <span id="selectedQuerySchedule"></span></div>
                                            <div class="mb-1"><span class="fw-bold">Status:</span> 
                                                <span id="selectedQueryStatus" class="ms-2 badge"></span>
                                            </div>
                                            <div class="mb-1"><span class="fw-bold">Last Executed:</span> <span id="selectedQueryLastExecuted"></span></div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <h4 class="mb-3">Grafana Configuration</h4>
                                        <div id="grafanaConfig" class="text-muted"></div>
                                    </div>
                                </div>

                                <div class="mt-4">
                                    <h4 class="mb-3">SQL Query</h4>
                                    <div class="bg-dark text-white p-3 rounded">
                                        <pre id="selectedQuerySQL" class="m-0"></pre>
                                    </div>
                                </div>



                            </div>
                        </div>

                        <!-- Execution History -->
                        <div class="card">
                            <div class="card-header gradient-bg text-white">
                                <div class="d-flex align-items-center justify-content-between">
                                    <h3 class="card-title d-flex align-items-center">
                                        <i class="ti ti-chart-bar icon me-2"></i>
                                        Execution History
                                    </h3>
                                    <div>
                                        <select id="statusFilter" onchange="filterHistory()" class="">
                                            <option value="all">All Status</option>
                                            <option value="success">Success</option>
                                            <option value="failed">Failed</option>
                                            <option value="timeout">Timeout</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-vcenter card-table">
                                    <thead>
                                        <tr>
                                            <th>Status</th>
                                            <th>Executed At</th>
                                            <th>Duration</th>
                                            <th>Result</th>
                                            <th class="w-1">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTableBody">
                                        <!-- History rows will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Default state when no query is selected -->
                    <div id="noQuerySelected" class="card card-md">
                        <div class="card-body text-center py-4">
                            <i class="ti ti-database icon icon-lg text-muted mb-3"></i>
                            <h3 class="mb-2">Select a Query</h3>
                            <p class="text-muted">Choose a scheduled query from the list to view its execution history and results.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Macros for rendering components -->
    {% macro render_status_icon(status) %}
        {% if status == 'success' %}
            <i data-lucide="check-circle" class="w-5 h-5 text-green-500"></i>
        {% elif status == 'failed' %}
            <i data-lucide="x-circle" class="w-5 h-5 text-red-500"></i>
        {% elif status == 'timeout' %}
            <i data-lucide="clock" class="w-5 h-5 text-yellow-500"></i>
        {% else %}
            <i data-lucide="alert-circle" class="w-5 h-5 text-gray-500"></i>
        {% endif %}
    {% endmacro %}

    {% macro render_status_badge(status) %}
        {% if status == 'success' %}
            <span class="px-2 py-1 text-xs font-medium rounded-full border bg-green-100 text-green-800 border-green-200">{{ status }}</span>
        {% elif status == 'failed' %}
            <span class="px-2 py-1 text-xs font-medium rounded-full border bg-red-100 text-red-800 border-red-200">{{ status }}</span>
        {% elif status == 'timeout' %}
            <span class="px-2 py-1 text-xs font-medium rounded-full border bg-yellow-100 text-yellow-800 border-yellow-200">{{ status }}</span>
        {% else %}
            <span class="px-2 py-1 text-xs font-medium rounded-full border bg-gray-100 text-gray-800 border-gray-200">{{ status }}</span>
        {% endif %}
    {% endmacro %}

    {% macro render_query_result(result, status) %}
        {% if status == 'success' and result %}
            {% set parsed_result = result | from_json %}
            {% if parsed_result is iterable and parsed_result|length == 1 %}
                {% set first_result = parsed_result[0] %}
                {% set keys = first_result.keys() | list %}
                {% if keys|length == 1 %}
                    {% set key = keys[0] %}
                    {% set value = first_result[key] %}
                    {% if value is number %}
                        <div class="metric-card rounded-xl p-6 text-white shadow-lg">
                            <div class="flex items-center justify-between mb-2">
                                <h4 class="text-sm font-medium opacity-90 capitalize">{{ key.replace('_', ' ') }}</h4>
                                <i data-lucide="trending-up" class="w-5 h-5 opacity-75"></i>
                            </div>
                            <div class="text-3xl font-bold mb-1">{{ value | int | format_number if value > 1000 else value }}</div>
                        </div>
                    {% endif %}
                {% endif %}
            {% elif parsed_result is iterable and parsed_result|length > 0 %}
                <div class="bg-white rounded-lg border border-gray-200 overflow-hidden shadow-sm">
                    <div class="bg-gray-50 px-4 py-2 border-b border-gray-200">
                        <h4 class="text-sm font-semibold text-gray-700">Query Results ({{ parsed_result|length }} rows)</h4>
                    </div>
                    <div class="overflow-x-auto max-h-64">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    {% for column in parsed_result[0].keys() %}
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        {{ column.replace('_', ' ') }}
                                    </th>
                                    {% endfor %}
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                {% for row in parsed_result[:10] %}
                                <tr class="hover:bg-gray-50">
                                    {% for column, value in row.items() %}
                                    <td class="px-4 py-2 text-sm text-gray-900 whitespace-nowrap">
                                        {{ value | int | format_number if value is number else value }}
                                    </td>
                                    {% endfor %}
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                        {% if parsed_result|length > 10 %}
                        <div class="bg-gray-50 px-4 py-2 text-center text-sm text-gray-500">
                            Showing first 10 of {{ parsed_result|length }} rows
                        </div>
                        {% endif %}
                    </div>
                </div>
            {% else %}
                <pre class="text-xs bg-gray-100 p-3 rounded overflow-x-auto max-w-xs">{{ result }}</pre>
            {% endif %}
        {% else %}
            <div class="text-sm text-gray-500 italic">No result available</div>
        {% endif %}
    {% endmacro %}

    <script>
        // Client-side cache for fetched query details (without execution history)
        const queryInfoCache = {}; 

        async function fetchQueryInfo(queryId) {
            if (queryInfoCache[queryId]) {
                return queryInfoCache[queryId];
            }
            const apiUrl = "{{ widget.url_get_scheduled_query_info }}".replace("QUERY_ID_PLACEHOLDER", queryId);

            const response = await fetch(`${apiUrl}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch query info (status ${response.status})`);
            }
            const data = await response.json();
            queryInfoCache[queryId] = data;
            return data;
        }

        // Store execution history data separately (loaded on demand)
        const executionHistoryCache = {};

        let selectedQueryId = null;
        let currentStatusFilter = 'all';

        async function selectQuery(queryId) {
            selectedQueryId = queryId;

            // Update UI to show selected state
            document.querySelectorAll('.query-item').forEach(item => {
                item.classList.remove('active');
            });
            const selectedItem = document.querySelector(`[data-query-id="${queryId}"]`);
            if (selectedItem) {
                selectedItem.classList.add('active');
            }

            // Show query details container
            document.getElementById('noQuerySelected').classList.add('d-none');
            document.getElementById('queryDetails').classList.remove('d-none');

            // Temporary loading state for details section
            const nameEl = document.getElementById('selectedQueryName');
            const scheduleEl = document.getElementById('selectedQuerySchedule');
            const lastExecEl = document.getElementById('selectedQueryLastExecuted');
            const sqlEl = document.getElementById('selectedQuerySQL');
            const statusEl = document.getElementById('selectedQueryStatus');
            const grafanaEl = document.getElementById('grafanaConfig');

            nameEl.textContent = 'Loading...';
            scheduleEl.textContent = '';
            lastExecEl.textContent = '';
            sqlEl.textContent = '';
            statusEl.textContent = '';
            statusEl.className = 'ms-2 badge bg-secondary';
            grafanaEl.innerHTML = '';

            try {
                const query = await fetchQueryInfo(queryId);

                // Populate query details
                nameEl.textContent = query.name || '';
                scheduleEl.textContent = query.cron_schedule || '';
                lastExecEl.textContent = query.last_executed || '';
                sqlEl.textContent = query.query || '';

                // Update status badge
                statusEl.textContent = query.enabled ? 'Enabled' : 'Disabled';
                statusEl.className = `ms-2 badge ${query.enabled ? 'bg-success' : 'bg-secondary'}`;

                // Update Grafana config
                if (query.grafana_metric_config) {
                    const metric = query.grafana_metric_config.metric_name || 'N/A';
                    const service = (query.grafana_metric_config.labels && query.grafana_metric_config.labels.service) ? query.grafana_metric_config.labels.service : 'N/A';
                    grafanaEl.innerHTML = `
                        <div><span class="font-medium">Metric:</span> ${metric}</div>
                        <div><span class="font-medium">Service:</span> ${service}</div>
                    `;
                } else {
                    grafanaEl.innerHTML = '<p class="text-sm text-gray-500">No Grafana configuration</p>';
                }

                // Load execution history dynamically
                loadExecutionHistory();
            } catch (error) {
                console.error('Error fetching query info:', error);
                nameEl.textContent = 'Error loading query details';
                grafanaEl.innerHTML = `<div class="alert alert-danger p-2">${error.message}</div>`;
            }
        }

        async function loadExecutionHistory(page = 1) {
            if (!selectedQueryId) return;

            const tbody = document.getElementById('historyTableBody');

            // Show loading state
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        Loading execution history...
                    </td>
                </tr>
            `;

            try {
                // Use the backend-generated URL and replace the placeholder with the actual query ID
                const apiUrl = "{{ widget.api_execution_history_url }}".replace("QUERY_ID_PLACEHOLDER", selectedQueryId);
                const response = await fetch(
                    `${apiUrl}?page=${page}&limit=50&status_filter=${currentStatusFilter}`
                );

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                // Cache the data
                const cacheKey = `${selectedQueryId}_${page}_${currentStatusFilter}`;
                executionHistoryCache[cacheKey] = data;

                // Update the table
                updateHistoryTable(data.data, data.pagination);

            } catch (error) {
                console.error('Error loading execution history:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4 text-danger">
                            <i class="ti ti-alert-circle me-2"></i>
                            Error loading execution history: ${error.message}
                        </td>
                    </tr>
                `;
            }
        }

        function updateHistoryTable(historyData, pagination) {
            const tbody = document.getElementById('historyTableBody');

            if (!historyData || historyData.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4 text-muted">
                            <i class="ti ti-database-off me-2"></i>
                            No execution history found
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = historyData.map(execution => {
                const statusIcon = getStatusIcon(execution.status);
                const statusBadge = getStatusBadge(execution.status);
                const duration = formatDuration(execution.duration_ms);
                const resultDisplay = renderResultDisplay(execution);

                return `
                    <tr>
                        <td>
                            <div class="d-flex align-items-center gap-2">
                                ${statusIcon}
                                ${statusBadge}
                            </div>
                        </td>
                        <td>${execution.executed_at}</td>
                        <td>${duration}</td>
                        <td>${resultDisplay}</td>
                        <td>
                            <button class="btn btn-icon btn-sm" onclick="downloadResult(${execution.id})">
                                <i class="ti ti-download"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');

            // Add pagination info if needed
            if (pagination && pagination.total_pages > 1) {
                updatePaginationControls(pagination);
            }
        }

        function getStatusIcon(status) {
            const icons = {
                'success': '<i class="ti ti-circle-check text-success"></i>',
                'failed': '<i class="ti ti-circle-x text-danger"></i>',
                'timeout': '<i class="ti ti-clock text-warning"></i>'
            };
            return icons[status] || '<i class="ti ti-alert-circle text-muted"></i>';
        }

        function getStatusBadge(status) {
            const badges = {
                'success': '<span class="badge bg-success-lt">success</span>',
                'failed': '<span class="badge bg-danger-lt">failed</span>',
                'timeout': '<span class="badge bg-warning-lt">timeout</span>'
            };
            return badges[status] || '<span class="badge bg-secondary-lt">' + status + '</span>';
        }

        function formatDuration(ms) {
            if (!ms) return 'N/A';
            if (ms < 1000) return `${ms}ms`;
            return `${(ms / 1000).toFixed(2)}s`;
        }

        function renderResultDisplay(execution) {
            if (execution.status !== 'success' || !execution.result) {
                if (execution.error_message) {
                    return `
                        <div>
                            <details class="cursor-pointer">
                                <summary class="text-danger">View Error</summary>
                                <div class="mt-2 alert alert-danger p-2">
                                    ${execution.error_message}
                                </div>
                            </details>
                        </div>
                    `;
                }
                return '<div class="text-muted fst-italic">No result</div>';
            }

            // Handle different result formats
            const resultStr = execution.result.trim();

            // Check for simple status messages (like "Rows affected: X")
            if (resultStr.match(/^(Rows affected|Query rejected|Error):/i)) {
                return `
                    <div class="alert alert-info p-2 mb-0">
                        <i class="ti ti-info-circle me-2"></i>
                        ${resultStr}
                    </div>
                `;
            }

            // Try to parse as JSON first
            try {
                const parsed = JSON.parse(resultStr);

                // Single metric display
                if (Array.isArray(parsed) && parsed.length === 1) {
                    const result = parsed[0];
                    const keys = Object.keys(result);

                    if (keys.length === 1) {
                        const key = keys[0];
                        const value = result[key];

                        if (typeof value === 'number') {
                            return `
                                <div class="card metric-card">
                                    <div class="card-body p-3 text-white">
                                        <div class="d-flex align-items-center justify-content-between mb-2">
                                            <h4 class="m-0 text-capitalize">${key.replace(/_/g, ' ')}</h4>
                                            <i class="ti ti-trending-up"></i>
                                        </div>
                                        <div class="h2 m-0">${value > 1000 ? value.toLocaleString() : value}</div>
                                        <div class="text-muted-light mt-1">${execution.executed_at}</div>
                                    </div>
                                </div>
                            `;
                        }
                    }
                }

                // Table display for multiple rows
                if (Array.isArray(parsed) && parsed.length > 0) {
                    const columns = Object.keys(parsed[0]);
                    const rows = parsed.slice(0, 10).map(row => {
                        const cells = columns.map(col => {
                            const value = row[col];
                            return `<td>${typeof value === 'number' ? value.toLocaleString() : String(value)}</td>`;
                        }).join('');
                        return `<tr>${cells}</tr>`;
                    }).join('');

                    const headers = columns.map(col => 
                        `<th>${col.replace(/_/g, ' ')}</th>`
                    ).join('');

                    return `
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title">Query Results (${parsed.length} rows)</h4>
                            </div>
                            <div class="table-responsive" style="max-height: 250px;">
                                <table class="table table-vcenter card-table">
                                    <thead><tr>${headers}</tr></thead>
                                    <tbody>${rows}</tbody>
                                </table>
                                ${parsed.length > 10 ? `<div class="card-footer text-center text-muted">Showing first 10 of ${parsed.length} rows</div>` : ''}
                            </div>
                        </div>
                    `;
                }

                // Fallback JSON display
                return `<pre class="bg-light p-2 rounded">${JSON.stringify(parsed, null, 2)}</pre>`;

            } catch {
                // If JSON parsing fails, try to parse as Python tuple/list representation
                try {
                    // Handle Python tuple/list string representations like "[('value1', 'value2')]"
                    if (resultStr.startsWith('[') && resultStr.endsWith(']')) {
                        // Try to convert Python-style tuples to a more readable format
                        const cleanResult = resultStr
                            .replace(/^\[|\]$/g, '') // Remove outer brackets
                            .replace(/\(/g, '') // Remove opening parentheses
                            .replace(/\)/g, '') // Remove closing parentheses
                            .split('), (') // Split by tuple separators
                            .map(row => row.split(', ').map(val => val.replace(/'/g, ''))) // Split values and remove quotes
                            .filter(row => row.length > 0 && row[0] !== ''); // Filter empty rows

                        if (cleanResult.length > 0) {
                            // Create a simple table for the results
                            const rows = cleanResult.slice(0, 10).map((row, index) => {
                                const cells = row.map(val => `<td>${val}</td>`).join('');
                                return `<tr>${cells}</tr>`;
                            }).join('');

                            const headers = cleanResult[0].map((_, index) => `<th>Column ${index + 1}</th>`).join('');

                            return `
                                <div class="card">
                                    <div class="card-header">
                                        <h4 class="card-title">Query Results (${cleanResult.length} rows)</h4>
                                    </div>
                                    <div class="table-responsive" style="max-height: 250px;">
                                        <table class="table table-vcenter card-table">
                                            <thead><tr>${headers}</tr></thead>
                                            <tbody>${rows}</tbody>
                                        </table>
                                        ${cleanResult.length > 10 ? `<div class="card-footer text-center text-muted">Showing first 10 of ${cleanResult.length} rows</div>` : ''}
                                    </div>
                                </div>
                            `;
                        }
                    }
                } catch (parseError) {
                    // If all parsing attempts fail, display as plain text
                }

                // Final fallback: display as plain text with proper formatting
                return `
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Raw Query Result</h4>
                        </div>
                        <div class="card-body">
                            <pre class="bg-light p-2 rounded text-wrap" style="white-space: pre-wrap; word-break: break-word;">${resultStr}</pre>
                        </div>
                    </div>
                `;
            }
        }

        function filterQueries() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const queryItems = document.querySelectorAll('.query-item');

            queryItems.forEach(item => {
                const queryName = item.getAttribute('data-query-name');
                if (queryName.includes(searchTerm)) {
                    item.classList.remove('d-none');
                } else {
                    item.classList.add('d-none');
                }
            });
        }

        function filterHistory() {
            currentStatusFilter = document.getElementById('statusFilter').value;
            // Reload execution history with new filter
            loadExecutionHistory(1);
        }

        function updatePaginationControls(pagination) {
            // Add pagination controls if needed
            // For now, we'll just show the current page info
            const tbody = document.getElementById('historyTableBody');
            if (pagination.total_pages > 1) {
                const paginationRow = `
                    <tr>
                        <td colspan="5" class="text-center py-2 bg-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <button class="btn btn-sm btn-outline-primary" 
                                        onclick="loadExecutionHistory(${pagination.page - 1})"
                                        ${!pagination.has_prev ? 'disabled' : ''}>
                                    <i class="ti ti-chevron-left"></i> Previous
                                </button>
                                <span class="text-muted">
                                    Page ${pagination.page} of ${pagination.total_pages} 
                                    (${pagination.total_count} total records)
                                </span>
                                <button class="btn btn-sm btn-outline-primary" 
                                        onclick="loadExecutionHistory(${pagination.page + 1})"
                                        ${!pagination.has_next ? 'disabled' : ''}>
                                    Next <i class="ti ti-chevron-right"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', paginationRow);
            }
        }

        function downloadResult(executionId) {
            // Placeholder for download functionality
            console.log('Download result for execution ID:', executionId);
            alert('Download functionality would be implemented here');
        }

        function refreshData() {
            // Clear cache and reload current view
            Object.keys(executionHistoryCache).forEach(key => delete executionHistoryCache[key]);
            if (selectedQueryId) {
                loadExecutionHistory(1);
            } else {
                location.reload();
            }
        }

    </script>
</div>
