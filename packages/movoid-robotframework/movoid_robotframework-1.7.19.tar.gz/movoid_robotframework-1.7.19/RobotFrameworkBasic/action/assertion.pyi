##################################################
# This is auto generated by code.
##################################################

import math
import RobotFrameworkBasic.basic

class ActionAssertion(RobotFrameworkBasic.basic.Basic):
	assert_logic_arg: tuple
	assert_operate_arg: tuple
	def __init__(self):
		super().__init__()
	def _assert_text(self, error_text, *args, error_format = None):	...
	def assert_equal(self, var1, var2, var_type = None, error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断两个变量是否相等
		:param var1: 第一个参数
		:param var2: 第二个参数
		:param var_type: 强制转换变量类型，默认不变类型
		:param error_text: 错误时的error文字，否则直接打印公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_not_equal(self, var1, var2, var_type = None, error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断两个变量是否不相等
		:param var1: 第一个参数
		:param var2: 第二个参数
		:param var_type: 强制转换变量类型，默认不变类型
		:param error_text: 错误时的error文字，否则直接打印公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_equal_float(self, var1, var2, digit = 3, error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断两个浮点数是否相等
		:param var1: 第一个参数
		:param var2: 第二个参数
		:param digit: 最高小数点位数
		:param error_text: 错误时的error文字，否则直接打印公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_not_equal_float(self, var1, var2, digit = 3, error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断两个浮点数是否不相等
		:param var1: 第一个参数
		:param var2: 第二个参数
		:param digit: 最高小数点位数
		:param error_text: 错误时的error文字，否则直接打印公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_calculate(self, *args, check_logic = 'all', error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		检查计算结果是否满足计算条件
		:param args: 一个变量、一个符号的模式进行输入
		:param check_logic: all就是所有判定条件都要满足；其他就是只要一个判定条件满足即可
		:param error_text: 错误时的error文字，否则直接打印公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:raise AssertionError: 判定失败后raise
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_true(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		转bool后，是否为True
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_false(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		转bool后，是否为False
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_none(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否是None
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_not_none(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否不是None
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_true(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否是True
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_not_true(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否不是True
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_false(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否是False
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_not_false(self, var1, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否不是False
		:param var1: 目标变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_in(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否in
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_not_in(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否not in
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否is
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_is_not(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否is not
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_isinstance(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否isinstance
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_not_isinstance(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否not isinstance
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_issubclass(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否issubclass
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_not_issubclass(self, var1, var2, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		判断是否not issubclass
		:param var1: 目标前变量
		:param var2: 目标后变量
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def _analyse_logic(self, *args, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		解析logic的逻辑
		:param args: 输入参数
		:return:
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	def assert_logic(self, *args, error_text = None, error_format = None, _return_when_error = None, _log_keyword_structure = True, _return_name = None, _show_return_info = None, _simple_doc = False, _debug_default = None, _debug_debug = None, _force_raise = None):
		"""
		使用逻辑not、and、or和判断符号，进行bool值的判断
		:param args: 所有的变量、计算符号、逻辑符号
		:param error_text: 错误文本，如果不填，判断失败时，会显示原始公式
		:param error_format: 错误时的error文字，可以使用{0}来代替输入的参数
		:param _return_when_error: 输入任意非None值后，当error发生时，不再raise error，而是返回这个值
		:param _log_keyword_structure: bool : 默认True，生成一组robotframework格式的可展开的日志。如果False时，就不会把这个函数做成折叠状，而是只打印一些内容
		:param _return_name: str : 你可以把代码中这个函数赋值的变量str写在这儿，来让日志更加贴近python代码内容
		:param _show_return_info: bool :默认True，是否把return的信息打印出来。
		:param _simple_doc: bool :默认False，是否仅打印第一行doc信息
		:param _debug_default:在不唤醒UI时，遇上error的处理逻辑，0/1为上报错误；2为跳过错误；默认1,
		:param _debug_debug：在会唤醒UI时，遇上error的处理逻辑，0为弹出UI进行处理；1为不弹出UI并向上报错；2为不弹出UI，也不向上报错；默认为0
		:param _force_raise：设置为True后，可以让它的所有的子函数全部都主动raise error，而不是弹出窗口或跳过错误；默认为False
		"""
		...
	...

