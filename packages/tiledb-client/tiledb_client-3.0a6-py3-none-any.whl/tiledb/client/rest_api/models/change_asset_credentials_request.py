# coding: utf-8

"""
TileDB Storage Platform API

TileDB Storage Platform REST API  # noqa: E501

The version of the OpenAPI document: 2.17.51
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client.rest_api.configuration import Configuration


class ChangeAssetCredentialsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"access_credentials": "str", "asset_uuids": "list[str]"}

    attribute_map = {
        "access_credentials": "access_credentials",
        "asset_uuids": "asset_uuids",
    }

    def __init__(
        self, access_credentials=None, asset_uuids=None, local_vars_configuration=None
    ):  # noqa: E501
        """ChangeAssetCredentialsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_credentials = None
        self._asset_uuids = None
        self.discriminator = None

        self.access_credentials = access_credentials
        self.asset_uuids = asset_uuids

    @property
    def access_credentials(self):
        """Gets the access_credentials of this ChangeAssetCredentialsRequest.  # noqa: E501

        The name or uuid of the access credentials  # noqa: E501

        :return: The access_credentials of this ChangeAssetCredentialsRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_credentials

    @access_credentials.setter
    def access_credentials(self, access_credentials):
        """Sets the access_credentials of this ChangeAssetCredentialsRequest.

        The name or uuid of the access credentials  # noqa: E501

        :param access_credentials: The access_credentials of this ChangeAssetCredentialsRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and access_credentials is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `access_credentials`, must not be `None`"
            )  # noqa: E501

        self._access_credentials = access_credentials

    @property
    def asset_uuids(self):
        """Gets the asset_uuids of this ChangeAssetCredentialsRequest.  # noqa: E501

        The list of asset uuids to have their credentials changed  # noqa: E501

        :return: The asset_uuids of this ChangeAssetCredentialsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_uuids

    @asset_uuids.setter
    def asset_uuids(self, asset_uuids):
        """Sets the asset_uuids of this ChangeAssetCredentialsRequest.

        The list of asset uuids to have their credentials changed  # noqa: E501

        :param asset_uuids: The asset_uuids of this ChangeAssetCredentialsRequest.  # noqa: E501
        :type: list[str]
        """
        if (
            self.local_vars_configuration.client_side_validation and asset_uuids is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `asset_uuids`, must not be `None`"
            )  # noqa: E501

        self._asset_uuids = asset_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeAssetCredentialsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeAssetCredentialsRequest):
            return True

        return self.to_dict() != other.to_dict()
