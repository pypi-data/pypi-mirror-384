# coding: utf-8

"""
Specification file for tiledb-server v4 API

This spec is exposed to the public under /v4 route group  # noqa: E501

The version of the OpenAPI document: 0.0.1
Contact: info@tiledb.com
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v4.configuration import Configuration


class SchemaFieldMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "type": "str",
        "key_type": "str",
        "value_type": "str",
        "value_contains_null": "bool",
    }

    attribute_map = {
        "type": "type",
        "key_type": "keyType",
        "value_type": "valueType",
        "value_contains_null": "valueContainsNull",
    }

    def __init__(
        self,
        type=None,
        key_type=None,
        value_type=None,
        value_contains_null=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SchemaFieldMap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._key_type = None
        self._value_type = None
        self._value_contains_null = None
        self.discriminator = None

        self.type = type
        self.key_type = key_type
        self.value_type = value_type
        self.value_contains_null = value_contains_null

    @property
    def type(self):
        """Gets the type of this SchemaFieldMap.  # noqa: E501

        Always the string map  # noqa: E501

        :return: The type of this SchemaFieldMap.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaFieldMap.

        Always the string map  # noqa: E501

        :param type: The type of this SchemaFieldMap.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501

        self._type = type

    @property
    def key_type(self):
        """Gets the key_type of this SchemaFieldMap.  # noqa: E501

        The type of element used for the key of this map, represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :return: The key_type of this SchemaFieldMap.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this SchemaFieldMap.

        The type of element used for the key of this map, represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :param key_type: The key_type of this SchemaFieldMap.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and key_type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `key_type`, must not be `None`"
            )  # noqa: E501

        self._key_type = key_type

    @property
    def value_type(self):
        """Gets the value_type of this SchemaFieldMap.  # noqa: E501

        The type of element used for the key of this map, represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :return: The value_type of this SchemaFieldMap.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this SchemaFieldMap.

        The type of element used for the key of this map, represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :param value_type: The value_type of this SchemaFieldMap.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and value_type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `value_type`, must not be `None`"
            )  # noqa: E501

        self._value_type = value_type

    @property
    def value_contains_null(self):
        """Gets the value_contains_null of this SchemaFieldMap.  # noqa: E501

        Indicates if map values have null values.  # noqa: E501

        :return: The value_contains_null of this SchemaFieldMap.  # noqa: E501
        :rtype: bool
        """
        return self._value_contains_null

    @value_contains_null.setter
    def value_contains_null(self, value_contains_null):
        """Sets the value_contains_null of this SchemaFieldMap.

        Indicates if map values have null values.  # noqa: E501

        :param value_contains_null: The value_contains_null of this SchemaFieldMap.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and value_contains_null is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `value_contains_null`, must not be `None`"
            )  # noqa: E501

        self._value_contains_null = value_contains_null

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaFieldMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaFieldMap):
            return True

        return self.to_dict() != other.to_dict()
