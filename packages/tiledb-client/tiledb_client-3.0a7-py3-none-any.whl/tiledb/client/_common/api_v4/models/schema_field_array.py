# coding: utf-8

"""
Specification file for tiledb-server v4 API

This spec is exposed to the public under /v4 route group  # noqa: E501

The version of the OpenAPI document: 0.0.1
Contact: info@tiledb.com
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v4.configuration import Configuration


class SchemaFieldArray(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "type": "str",
        "element_type": "OneOfSchemaFieldDataTypeSchemaFieldArraySchemaFieldMap",
        "contains_null": "bool",
    }

    attribute_map = {
        "type": "type",
        "element_type": "elementType",
        "contains_null": "containsNull",
    }

    def __init__(
        self,
        type=None,
        element_type=None,
        contains_null=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SchemaFieldArray - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._element_type = None
        self._contains_null = None
        self.discriminator = None

        self.type = type
        self.element_type = element_type
        self.contains_null = contains_null

    @property
    def type(self):
        """Gets the type of this SchemaFieldArray.  # noqa: E501

        Always the string array  # noqa: E501

        :return: The type of this SchemaFieldArray.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaFieldArray.

        Always the string array  # noqa: E501

        :param type: The type of this SchemaFieldArray.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501

        self._type = type

    @property
    def element_type(self):
        """Gets the element_type of this SchemaFieldArray.  # noqa: E501

        The type of element stored in this array represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :return: The element_type of this SchemaFieldArray.  # noqa: E501
        :rtype: OneOfSchemaFieldDataTypeSchemaFieldArraySchemaFieldMap
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this SchemaFieldArray.

        The type of element stored in this array represented as a string containing the name of a primitive type, a struct definition, an array definition or a map definition  # noqa: E501

        :param element_type: The element_type of this SchemaFieldArray.  # noqa: E501
        :type: OneOfSchemaFieldDataTypeSchemaFieldArraySchemaFieldMap
        """
        if (
            self.local_vars_configuration.client_side_validation
            and element_type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `element_type`, must not be `None`"
            )  # noqa: E501

        self._element_type = element_type

    @property
    def contains_null(self):
        """Gets the contains_null of this SchemaFieldArray.  # noqa: E501

        Boolean denoting whether this array can contain one or more null values  # noqa: E501

        :return: The contains_null of this SchemaFieldArray.  # noqa: E501
        :rtype: bool
        """
        return self._contains_null

    @contains_null.setter
    def contains_null(self, contains_null):
        """Sets the contains_null of this SchemaFieldArray.

        Boolean denoting whether this array can contain one or more null values  # noqa: E501

        :param contains_null: The contains_null of this SchemaFieldArray.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and contains_null is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `contains_null`, must not be `None`"
            )  # noqa: E501

        self._contains_null = contains_null

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaFieldArray):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SchemaFieldArray):
            return True

        return self.to_dict() != other.to_dict()
