# coding: utf-8

"""
Specification file for tiledb-server v4 API

This spec is exposed to the public under /v4 route group  # noqa: E501

The version of the OpenAPI document: 0.0.1
Contact: info@tiledb.com
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v4.configuration import Configuration


class AssetIndexerResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "status": "str",
        "done": "bool",
        "metrics": "object",
        "errors": "list[str]",
    }

    attribute_map = {
        "status": "status",
        "done": "done",
        "metrics": "metrics",
        "errors": "errors",
    }

    def __init__(
        self,
        status=None,
        done=None,
        metrics=None,
        errors=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """AssetIndexerResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._done = None
        self._metrics = None
        self._errors = None
        self.discriminator = None

        self.status = status
        if done is not None:
            self.done = done
        if metrics is not None:
            self.metrics = metrics
        if errors is not None:
            self.errors = errors

    @property
    def status(self):
        """Gets the status of this AssetIndexerResponse.  # noqa: E501

        short status  # noqa: E501

        :return: The status of this AssetIndexerResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetIndexerResponse.

        short status  # noqa: E501

        :param status: The status of this AssetIndexerResponse.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and status is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `status`, must not be `None`"
            )  # noqa: E501

        self._status = status

    @property
    def done(self):
        """Gets the done of this AssetIndexerResponse.  # noqa: E501

        was indexing completed  # noqa: E501

        :return: The done of this AssetIndexerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this AssetIndexerResponse.

        was indexing completed  # noqa: E501

        :param done: The done of this AssetIndexerResponse.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def metrics(self):
        """Gets the metrics of this AssetIndexerResponse.  # noqa: E501

        how many things were indexed, etc. map[string]float64  # noqa: E501

        :return: The metrics of this AssetIndexerResponse.  # noqa: E501
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AssetIndexerResponse.

        how many things were indexed, etc. map[string]float64  # noqa: E501

        :param metrics: The metrics of this AssetIndexerResponse.  # noqa: E501
        :type: object
        """

        self._metrics = metrics

    @property
    def errors(self):
        """Gets the errors of this AssetIndexerResponse.  # noqa: E501

        error messages  # noqa: E501

        :return: The errors of this AssetIndexerResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AssetIndexerResponse.

        error messages  # noqa: E501

        :param errors: The errors of this AssetIndexerResponse.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetIndexerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetIndexerResponse):
            return True

        return self.to_dict() != other.to_dict()
