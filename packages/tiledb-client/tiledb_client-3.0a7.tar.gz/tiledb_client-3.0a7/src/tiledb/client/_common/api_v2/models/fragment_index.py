# coding: utf-8

"""
Tiledb Storage Platform API

TileDB Storage Platform REST API  # noqa: E501

The version of the OpenAPI document: 1.4.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v2.configuration import Configuration


class FragmentIndex(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"tile_idx": "int", "cell_idx": "int"}

    attribute_map = {"tile_idx": "tileIdx", "cell_idx": "cellIdx"}

    def __init__(
        self, tile_idx=None, cell_idx=None, local_vars_configuration=None
    ):  # noqa: E501
        """FragmentIndex - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tile_idx = None
        self._cell_idx = None
        self.discriminator = None

        if tile_idx is not None:
            self.tile_idx = tile_idx
        if cell_idx is not None:
            self.cell_idx = cell_idx

    @property
    def tile_idx(self):
        """Gets the tile_idx of this FragmentIndex.  # noqa: E501

        Tile index  # noqa: E501

        :return: The tile_idx of this FragmentIndex.  # noqa: E501
        :rtype: int
        """
        return self._tile_idx

    @tile_idx.setter
    def tile_idx(self, tile_idx):
        """Sets the tile_idx of this FragmentIndex.

        Tile index  # noqa: E501

        :param tile_idx: The tile_idx of this FragmentIndex.  # noqa: E501
        :type: int
        """

        self._tile_idx = tile_idx

    @property
    def cell_idx(self):
        """Gets the cell_idx of this FragmentIndex.  # noqa: E501

        Cell index  # noqa: E501

        :return: The cell_idx of this FragmentIndex.  # noqa: E501
        :rtype: int
        """
        return self._cell_idx

    @cell_idx.setter
    def cell_idx(self, cell_idx):
        """Sets the cell_idx of this FragmentIndex.

        Cell index  # noqa: E501

        :param cell_idx: The cell_idx of this FragmentIndex.  # noqa: E501
        :type: int
        """

        self._cell_idx = cell_idx

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FragmentIndex):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FragmentIndex):
            return True

        return self.to_dict() != other.to_dict()
