# coding: utf-8

"""
Specification file for tiledb-server v4 API

This spec is exposed to the public under /v4 route group  # noqa: E501

The version of the OpenAPI document: 0.0.1
Contact: info@tiledb.com
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v4.configuration import Configuration


class AssetPropertySaveRequestInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"key": "str", "value": "str", "id": "str"}

    attribute_map = {"key": "key", "value": "value", "id": "id"}

    def __init__(
        self, key=None, value=None, id=None, local_vars_configuration=None
    ):  # noqa: E501
        """AssetPropertySaveRequestInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._value = None
        self._id = None
        self.discriminator = None

        self.key = key
        self.value = value
        self.id = id

    @property
    def key(self):
        """Gets the key of this AssetPropertySaveRequestInner.  # noqa: E501

        The key property of property pair: * `image` - Image name to launch the notebook * `image_size` - Image size to launch the notebook * `default_region` - Default region to start the notebook server * `default_view` - Default view to open the asset in the UI * `version_pruning_limit` - The maximum number of versions to keep for a notebook * `version_pruning_enabled` - Flag indicating whether automatic version pruning is enabled for a notebook   # noqa: E501

        :return: The key of this AssetPropertySaveRequestInner.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AssetPropertySaveRequestInner.

        The key property of property pair: * `image` - Image name to launch the notebook * `image_size` - Image size to launch the notebook * `default_region` - Default region to start the notebook server * `default_view` - Default view to open the asset in the UI * `version_pruning_limit` - The maximum number of versions to keep for a notebook * `version_pruning_enabled` - Flag indicating whether automatic version pruning is enabled for a notebook   # noqa: E501

        :param key: The key of this AssetPropertySaveRequestInner.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and key is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `key`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "image",
            "size",
            "default_region",
            "default_view",
            "version_pruning_limit",
            "version_pruning_enabled",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and key not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `key` ({0}), must be one of {1}".format(  # noqa: E501
                    key, allowed_values
                )
            )

        self._key = key

    @property
    def value(self):
        """Gets the value of this AssetPropertySaveRequestInner.  # noqa: E501

        The value property of property pair.  # noqa: E501

        :return: The value of this AssetPropertySaveRequestInner.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AssetPropertySaveRequestInner.

        The value property of property pair.  # noqa: E501

        :param value: The value of this AssetPropertySaveRequestInner.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and value is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `value`, must not be `None`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and value is not None
            and len(value) > 2048
        ):
            raise ValueError(
                "Invalid value for `value`, length must be less than or equal to `2048`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and value is not None
            and len(value) < 1
        ):
            raise ValueError(
                "Invalid value for `value`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._value = value

    @property
    def id(self):
        """Gets the id of this AssetPropertySaveRequestInner.  # noqa: E501

        The id of the asset property if it has been set already  # noqa: E501

        :return: The id of this AssetPropertySaveRequestInner.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetPropertySaveRequestInner.

        The id of the asset property if it has been set already  # noqa: E501

        :param id: The id of this AssetPropertySaveRequestInner.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetPropertySaveRequestInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetPropertySaveRequestInner):
            return True

        return self.to_dict() != other.to_dict()
