# coding: utf-8

"""
Specification file for tiledb-server v4 API

This spec is exposed to the public under /v4 route group  # noqa: E501

The version of the OpenAPI document: 0.0.1
Contact: info@tiledb.com
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v4.configuration import Configuration


class AssetRegisterRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"uri": "str", "access_credentials_name": "str"}

    attribute_map = {"uri": "uri", "access_credentials_name": "access_credentials_name"}

    def __init__(
        self, uri=None, access_credentials_name=None, local_vars_configuration=None
    ):  # noqa: E501
        """AssetRegisterRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._access_credentials_name = None
        self.discriminator = None

        self.uri = uri
        self.access_credentials_name = access_credentials_name

    @property
    def uri(self):
        """Gets the uri of this AssetRegisterRequest.  # noqa: E501

        URI of the asset (e.g., S3 location)  # noqa: E501

        :return: The uri of this AssetRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AssetRegisterRequest.

        URI of the asset (e.g., S3 location)  # noqa: E501

        :param uri: The uri of this AssetRegisterRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and uri is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `uri`, must not be `None`"
            )  # noqa: E501

        self._uri = uri

    @property
    def access_credentials_name(self):
        """Gets the access_credentials_name of this AssetRegisterRequest.  # noqa: E501

        Named reference to access credentials  # noqa: E501

        :return: The access_credentials_name of this AssetRegisterRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_credentials_name

    @access_credentials_name.setter
    def access_credentials_name(self, access_credentials_name):
        """Sets the access_credentials_name of this AssetRegisterRequest.

        Named reference to access credentials  # noqa: E501

        :param access_credentials_name: The access_credentials_name of this AssetRegisterRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and access_credentials_name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `access_credentials_name`, must not be `None`"
            )  # noqa: E501

        self._access_credentials_name = access_credentials_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetRegisterRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetRegisterRequest):
            return True

        return self.to_dict() != other.to_dict()
