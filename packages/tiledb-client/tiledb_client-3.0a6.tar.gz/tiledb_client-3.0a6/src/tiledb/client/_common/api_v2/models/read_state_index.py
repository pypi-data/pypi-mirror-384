# coding: utf-8

"""
Tiledb Storage Platform API

TileDB Storage Platform REST API  # noqa: E501

The version of the OpenAPI document: 1.4.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.client._common.api_v2.configuration import Configuration


class ReadStateIndex(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "done_adding_result_tiles": "bool",
        "frag_tile_idx": "list[FragmentIndex]",
        "result_cell_slab": "list[ResultCellSlab]",
    }

    attribute_map = {
        "done_adding_result_tiles": "doneAddingResultTiles",
        "frag_tile_idx": "fragTileIdx",
        "result_cell_slab": "resultCellSlab",
    }

    def __init__(
        self,
        done_adding_result_tiles=None,
        frag_tile_idx=None,
        result_cell_slab=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ReadStateIndex - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._done_adding_result_tiles = None
        self._frag_tile_idx = None
        self._result_cell_slab = None
        self.discriminator = None

        if done_adding_result_tiles is not None:
            self.done_adding_result_tiles = done_adding_result_tiles
        if frag_tile_idx is not None:
            self.frag_tile_idx = frag_tile_idx
        if result_cell_slab is not None:
            self.result_cell_slab = result_cell_slab

    @property
    def done_adding_result_tiles(self):
        """Gets the done_adding_result_tiles of this ReadStateIndex.  # noqa: E501

        Is the reader done adding result tiles.  # noqa: E501

        :return: The done_adding_result_tiles of this ReadStateIndex.  # noqa: E501
        :rtype: bool
        """
        return self._done_adding_result_tiles

    @done_adding_result_tiles.setter
    def done_adding_result_tiles(self, done_adding_result_tiles):
        """Sets the done_adding_result_tiles of this ReadStateIndex.

        Is the reader done adding result tiles.  # noqa: E501

        :param done_adding_result_tiles: The done_adding_result_tiles of this ReadStateIndex.  # noqa: E501
        :type: bool
        """

        self._done_adding_result_tiles = done_adding_result_tiles

    @property
    def frag_tile_idx(self):
        """Gets the frag_tile_idx of this ReadStateIndex.  # noqa: E501

        Tile/cell index for each fragments.  # noqa: E501

        :return: The frag_tile_idx of this ReadStateIndex.  # noqa: E501
        :rtype: list[FragmentIndex]
        """
        return self._frag_tile_idx

    @frag_tile_idx.setter
    def frag_tile_idx(self, frag_tile_idx):
        """Sets the frag_tile_idx of this ReadStateIndex.

        Tile/cell index for each fragments.  # noqa: E501

        :param frag_tile_idx: The frag_tile_idx of this ReadStateIndex.  # noqa: E501
        :type: list[FragmentIndex]
        """

        self._frag_tile_idx = frag_tile_idx

    @property
    def result_cell_slab(self):
        """Gets the result_cell_slab of this ReadStateIndex.  # noqa: E501

        Result cell slab.  # noqa: E501

        :return: The result_cell_slab of this ReadStateIndex.  # noqa: E501
        :rtype: list[ResultCellSlab]
        """
        return self._result_cell_slab

    @result_cell_slab.setter
    def result_cell_slab(self, result_cell_slab):
        """Sets the result_cell_slab of this ReadStateIndex.

        Result cell slab.  # noqa: E501

        :param result_cell_slab: The result_cell_slab of this ReadStateIndex.  # noqa: E501
        :type: list[ResultCellSlab]
        """

        self._result_cell_slab = result_cell_slab

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadStateIndex):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReadStateIndex):
            return True

        return self.to_dict() != other.to_dict()
