Metadata-Version: 2.1
Name: neops_workflow_engine_client
Version: 0.41.12b25
Summary: Neops Workflow Engine
Home-page: https://github.com/GIT_USER_ID/GIT_REPO_ID
License: NoLicense
Keywords: OpenAPI,OpenAPI-Generator,Neops Workflow Engine
Author: OpenAPI Generator Community
Author-email: team@openapitools.org
Requires-Python: >=3.8,<4.0
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: pydantic (>=2)
Requires-Dist: python-dateutil (>=2.8.2)
Requires-Dist: typing-extensions (>=4.7.1)
Requires-Dist: urllib3 (>=1.25.3,<3.0.0)
Project-URL: Repository, https://github.com/GIT_USER_ID/GIT_REPO_ID
Description-Content-Type: text/markdown

# Neops Task Engine Client
Neops workflow engine API documentation

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: develop
- Package version: 0.41.12-beta.25
- Generator version: 7.9.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python 3.7+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import neops_workflow_engine_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import neops_workflow_engine_client
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import neops_workflow_engine_client
from neops_workflow_engine_client.rest import ApiException
from pprint import pprint

# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = neops_workflow_engine_client.Configuration(
    host = "http://localhost"
)



# Enter a context with an instance of the API client
with neops_workflow_engine_client.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = neops_workflow_engine_client.BlackboardApi(api_client)
    job_log_dto = neops_workflow_engine_client.JobLogDto() # JobLogDto | 

    try:
        # 
        api_instance.blackboard_controller_add_job_log(job_log_dto)
    except ApiException as e:
        print("Exception when calling BlackboardApi->blackboard_controller_add_job_log: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*BlackboardApi* | [**blackboard_controller_add_job_log**](docs/BlackboardApi.md#blackboard_controller_add_job_log) | **POST** /blackboard/job/log | 
*BlackboardApi* | [**blackboard_controller_poll_job**](docs/BlackboardApi.md#blackboard_controller_poll_job) | **POST** /blackboard/job | 
*BlackboardApi* | [**blackboard_controller_push_job_result**](docs/BlackboardApi.md#blackboard_controller_push_job_result) | **POST** /blackboard/job/result | 
*DefaultApi* | [**app_controller_get_hello**](docs/DefaultApi.md#app_controller_get_hello) | **GET** / | 
*FunctionBlockApi* | [**function_blocks_controller_find_all**](docs/FunctionBlockApi.md#function_blocks_controller_find_all) | **GET** /function-blocks/registrations/list | List all registered function blocks
*FunctionBlockApi* | [**function_blocks_controller_find_one_fb**](docs/FunctionBlockApi.md#function_blocks_controller_find_one_fb) | **GET** /function-blocks/{pkg}/{name}/{version} | Get a function block by ID
*FunctionBlockApi* | [**function_blocks_controller_find_one_fb_registration**](docs/FunctionBlockApi.md#function_blocks_controller_find_one_fb_registration) | **GET** /function-blocks/registrations/{pkg}/{name}/{version} | Get a function block registration by ID
*FunctionBlockApi* | [**function_blocks_controller_register**](docs/FunctionBlockApi.md#function_blocks_controller_register) | **POST** /function-blocks/register | Register a function block
*FunctionBlockApi* | [**function_blocks_controller_soft_delete**](docs/FunctionBlockApi.md#function_blocks_controller_soft_delete) | **DELETE** /function-blocks/{pkg}/{name}/{version} | Soft-delete a function block by ID
*HealthApi* | [**health_controller_healthy**](docs/HealthApi.md#health_controller_healthy) | **GET** /health | Check service health status
*SchemaApi* | [**schema_controller_get_schema**](docs/SchemaApi.md#schema_controller_get_schema) | **GET** /schema | Get the RootWorkflow JSON Schema of the workflow engine
*VersionApi* | [**version_controller_check_compatibility**](docs/VersionApi.md#version_controller_check_compatibility) | **POST** /version/compatibility | Check version compatibility
*VersionApi* | [**version_controller_get_version**](docs/VersionApi.md#version_controller_get_version) | **GET** /version | Get version of the service
*WorkflowsApi* | [**workflow_definition_controller_create**](docs/WorkflowsApi.md#workflow_definition_controller_create) | **POST** /workflow-definition | Create a Workflow definition
*WorkflowsApi* | [**workflow_definition_controller_find_all**](docs/WorkflowsApi.md#workflow_definition_controller_find_all) | **GET** /workflow-definition | Retrieve all workflow definitions
*WorkflowsApi* | [**workflow_definition_controller_find_by_sem_ver_string**](docs/WorkflowsApi.md#workflow_definition_controller_find_by_sem_ver_string) | **GET** /workflow-definition/find-by-semver/{semver} | Retrieve the closest matching workflow definition for a semantic version string
*WorkflowsApi* | [**workflow_definition_controller_find_one**](docs/WorkflowsApi.md#workflow_definition_controller_find_one) | **GET** /workflow-definition/{id} | Retrieve a workflow definitions by ID
*WorkflowsApi* | [**workflow_definition_controller_soft_delete**](docs/WorkflowsApi.md#workflow_definition_controller_soft_delete) | **DELETE** /workflow-definition/{id} | Soft-delete a workflow definition by ID
*WorkflowsApi* | [**workflow_definition_controller_update_workflow**](docs/WorkflowsApi.md#workflow_definition_controller_update_workflow) | **POST** /workflow-definition/update | Update a Workflow definition
*WorkflowsApi* | [**workflow_execution_controller_abort**](docs/WorkflowsApi.md#workflow_execution_controller_abort) | **DELETE** /workflow-execution/{id} | Abort a running workflow execution
*WorkflowsApi* | [**workflow_execution_controller_execute**](docs/WorkflowsApi.md#workflow_execution_controller_execute) | **POST** /workflow-execution | Add a workflow execution to the table
*WorkflowsApi* | [**workflow_execution_controller_find_all**](docs/WorkflowsApi.md#workflow_execution_controller_find_all) | **GET** /workflow-execution/state/{state} | Retrieve all workflow executions by state
*WorkflowsApi* | [**workflow_execution_controller_find_one**](docs/WorkflowsApi.md#workflow_execution_controller_find_one) | **GET** /workflow-execution/id/{id} | Retrieve a specific workflow execution by ID


## Documentation For Models

 - [CreateWorkflowDefinitionDto](docs/CreateWorkflowDefinitionDto.md)
 - [CronConfiguration](docs/CronConfiguration.md)
 - [CrontabConfiguration](docs/CrontabConfiguration.md)
 - [DeviceCheckTypeDto](docs/DeviceCheckTypeDto.md)
 - [DeviceConfigTypeDto](docs/DeviceConfigTypeDto.md)
 - [DeviceExecutionResultTypeDto](docs/DeviceExecutionResultTypeDto.md)
 - [DeviceExecutionTypeDto](docs/DeviceExecutionTypeDto.md)
 - [DeviceFactTypeDto](docs/DeviceFactTypeDto.md)
 - [DeviceGroupCheckTypeDto](docs/DeviceGroupCheckTypeDto.md)
 - [DeviceGroupFactTypeDto](docs/DeviceGroupFactTypeDto.md)
 - [DeviceGroupTypeDto](docs/DeviceGroupTypeDto.md)
 - [DeviceTypeDto](docs/DeviceTypeDto.md)
 - [EntityUpdateDto](docs/EntityUpdateDto.md)
 - [ExecuteWorkflowDto](docs/ExecuteWorkflowDto.md)
 - [HealthResponse](docs/HealthResponse.md)
 - [InterfaceTypeDto](docs/InterfaceTypeDto.md)
 - [JobDefinitionDto](docs/JobDefinitionDto.md)
 - [JobExecutionContextDto](docs/JobExecutionContextDto.md)
 - [JobExecutionResultDbUpdatesDto](docs/JobExecutionResultDbUpdatesDto.md)
 - [JobExecutionResultDto](docs/JobExecutionResultDto.md)
 - [JobLogDto](docs/JobLogDto.md)
 - [JobPollDto](docs/JobPollDto.md)
 - [JobResultDto](docs/JobResultDto.md)
 - [ParametrizedFunctionBlock](docs/ParametrizedFunctionBlock.md)
 - [PlatformTypeDto](docs/PlatformTypeDto.md)
 - [RegisterFunctionBlockDto](docs/RegisterFunctionBlockDto.md)
 - [RepeatConfiguration](docs/RepeatConfiguration.md)
 - [RetryConfiguration](docs/RetryConfiguration.md)
 - [RoleDeviceGroupTypeDto](docs/RoleDeviceGroupTypeDto.md)
 - [RootWorkflow](docs/RootWorkflow.md)
 - [RootWorkflowStepsInner](docs/RootWorkflowStepsInner.md)
 - [UpdateWorkflowDefinitionDto](docs/UpdateWorkflowDefinitionDto.md)
 - [VersionCompatibilityRequestDto](docs/VersionCompatibilityRequestDto.md)
 - [VersionCompatibilityResponseDto](docs/VersionCompatibilityResponseDto.md)
 - [VersionResponseDto](docs/VersionResponseDto.md)
 - [VersionableDto](docs/VersionableDto.md)
 - [WorkflowConfig](docs/WorkflowConfig.md)
 - [WorkflowExecutionParameters](docs/WorkflowExecutionParameters.md)
 - [WorkflowExecutionStrategy](docs/WorkflowExecutionStrategy.md)
 - [WorkflowReference](docs/WorkflowReference.md)


<a id="documentation-for-authorization"></a>
## Documentation For Authorization


Authentication schemes defined for the API:
<a id="JWT"></a>
### JWT

- **Type**: Bearer authentication (JWT)


## Author





