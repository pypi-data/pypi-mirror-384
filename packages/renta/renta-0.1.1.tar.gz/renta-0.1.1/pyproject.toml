[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "renta"
version = "0.1.1"
description = "Real Estate Network and Trend Analyzer - A Python library for real estate investment analysis in Buenos Aires"
readme = "README.md"
license = "MIT"
authors = [
    {name = "RENTA Development Team", email = "contact@renta.dev"}
]
maintainers = [
    {name = "RENTA Development Team", email = "contact@renta.dev"}
]
keywords = [
    "real-estate", 
    "airbnb", 
    "investment-analysis", 
    "buenos-aires", 
    "property-analysis",
    "rental-market",
    "ai-analysis"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    # Core data processing
    "pandas==2.2.3",
    "numpy==1.26.4",

    # Web scraping and HTTP
    "requests==2.31.0",
    "beautifulsoup4==4.12.3",
    "lxml==5.3.0",

    # Geospatial analysis
    "scikit-learn==1.5.2",  # For BallTree spatial indexing

    # Configuration and validation
    "pyyaml==6.0.2",
    "jsonschema==4.23.0",

    # AWS integration
    "boto3==1.35.70",
    "botocore==1.35.70",

    # Template rendering
    "jinja2==3.1.4",

    # Logging and monitoring
    "structlog==24.4.0",

    # Progress bars
    "tqdm==4.67.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",

    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",

    # Documentation
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",

    # Build tools
    "build>=0.10.0",
    "twine>=4.0.0",
]

scraping = [
    # Web scraping tools (for examples/main.py)
    "playwright>=1.40.0",
    "cloudscraper>=1.2.71",
    "python-dotenv>=1.0.0",
]

security = [
    # Security audit tools
    "pip-audit>=2.0.0",
    "safety>=3.0.0",
    "bandit>=1.7.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/machinelearnear/RENTA"
Documentation = "https://github.com/machinelearnear/RENTA#readme"
Repository = "https://github.com/machinelearnear/RENTA"
"Bug Tracker" = "https://github.com/machinelearnear/RENTA/issues"
Changelog = "https://github.com/machinelearnear/RENTA/blob/main/CHANGELOG.md"

[project.entry-points."renta.exporters"]
# Plugin entry points for data exporters
csv = "renta.export:CSVExporter"
json = "renta.export:JSONExporter"
parquet = "renta.export:ParquetExporter"

[project.scripts]
# Console script entry points
renta = "renta.cli:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["renta*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
renta = [
    "prompts/*.yaml",
    "schemas/*.json", 
    "data/*.yaml",
    "data/*.md",
    "data/*.csv",
]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "geopy.*",
    "boto3.*",
    "botocore.*",
    "forex_python.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "slow: Slow tests that take more than 5 seconds",
    "aws: Tests requiring AWS credentials",
    "network: Tests requiring network access",
]

[tool.coverage.run]
source = ["renta"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]