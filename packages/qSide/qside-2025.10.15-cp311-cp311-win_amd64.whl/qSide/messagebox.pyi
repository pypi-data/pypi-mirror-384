from .layout import MARGIN_MEDIUM as MARGIN_MEDIUM, QVBox as QVBox
from .qt import QApplication as QApplication, QDialogButtonBox as QDialogButtonBox, QIcon as QIcon, QLabel as QLabel, QPainter as QPainter, QPoint as QPoint, QRectF as QRectF, QSize as QSize, QSvgRenderer as QSvgRenderer, QWidget as QWidget, Qt as Qt
from .theme import QIconProvider as QIconProvider, QTheme as QTheme
from .window import QDialogEx as QDialogEx
from _typeshed import Incomplete

class MessageBox(QDialogEx):
    buttonBox: Incomplete
    clicked: Incomplete
    messageLabel: Incomplete
    icon: Incomplete
    iconSize: Incomplete
    def __init__(self, parent=None) -> None: ...
    def paintEvent(self, e) -> None: ...
    def onClicked(self, button) -> None: ...
    def exec(self): ...
    def exec_(self) -> QDialogButtonBox.StandardButton: ...

class QMessageBox:
    @classmethod
    def question(cls, parent: QWidget | None, message: str | None, buttons=..., defaultButton=...) -> QDialogButtonBox.StandardButton: ...
    @classmethod
    def information(cls, parent: QWidget | None, message: str | None, buttons=..., defaultButton=...) -> QDialogButtonBox.StandardButton: ...
    @classmethod
    def warning(cls, parent: QWidget | None, message: str | None, buttons=..., defaultButton=...) -> QDialogButtonBox.StandardButton: ...
    @classmethod
    def critical(cls, parent: QWidget | None, message: str | None, buttons=..., defaultButton=...) -> QDialogButtonBox.StandardButton: ...
