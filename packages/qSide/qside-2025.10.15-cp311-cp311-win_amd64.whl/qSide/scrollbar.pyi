from .qt import Property as Property, QAbstractItemView as QAbstractItemView, QAbstractScrollArea as QAbstractScrollArea, QApplication as QApplication, QColor as QColor, QEvent as QEvent, QListView as QListView, QMouseEvent as QMouseEvent, QObject as QObject, QPaintEvent as QPaintEvent, QPainter as QPainter, QPoint as QPoint, QPropertyAnimation as QPropertyAnimation, QTimer as QTimer, QWheelEvent as QWheelEvent, QWidget as QWidget, Qt as Qt, Signal as Signal
from _typeshed import Incomplete

class QScrollBarGroove(QWidget):
    opacityAni: Incomplete
    def __init__(self, orient: Qt.Orientation, parent) -> None: ...
    def grooveWidth(self) -> int: ...
    def fadeIn(self) -> None: ...
    def fadeOut(self) -> None: ...
    def paintEvent(self, e: QPaintEvent): ...
    def setOpacity(self, opacity: float): ...
    def getOpacity(self) -> float: ...
    def getGrooveColor(self): ...
    def setGrooveColor(self, color) -> None: ...
    opacity: Incomplete
    grooveColor: Incomplete

class QScrollBarHandle(QWidget):
    orient: Incomplete
    def __init__(self, orient: Qt.Orientation, parent=None) -> None: ...
    def paintEvent(self, e) -> None: ...
    def getHandleColor(self) -> QColor: ...
    def setHandleColor(self, color) -> None: ...
    def setOpacity(self, opacity: float): ...
    def getOpacity(self) -> float: ...
    handleColor: Incomplete
    opacity: Incomplete

class QScrollBar(QWidget):
    LeftPosition: int
    RightPosition: int
    TopPosition: int
    BottomPosition: int
    rangeChanged: Incomplete
    valueChanged: Incomplete
    sliderPressed: Incomplete
    sliderReleased: Incomplete
    sliderMoved: Incomplete
    position: Incomplete
    groove: Incomplete
    handle: Incomplete
    animationTimer: Incomplete
    autoHide: bool
    autoHideTimer: Incomplete
    partnerBar: Incomplete
    def __init__(self, orient: Qt.Orientation, parent: QAbstractScrollArea, position: int = 0, autoHide: bool = True) -> None: ...
    def value(self): ...
    def setValue(self, value: int): ...
    def minimum(self): ...
    def maximum(self): ...
    def orientation(self): ...
    def setMinimum(self, min: int): ...
    def setMaximum(self, max: int): ...
    def setRange(self, min: int, max: int): ...
    def expand(self) -> None: ...
    def collapse(self) -> None: ...
    def enterEvent(self, e) -> None: ...
    def leaveEvent(self, e) -> None: ...
    def eventFilter(self, obj, e: QEvent): ...
    def resizeEvent(self, e) -> None: ...
    def mousePressEvent(self, e: QMouseEvent): ...
    def mouseReleaseEvent(self, e) -> None: ...
    def mouseMoveEvent(self, e: QMouseEvent): ...
    def isForceHidden(self) -> bool: ...
    def setForceHidden(self, isHidden: bool): ...
    def wheelEvent(self, e) -> None: ...

class QScrollDelegate(QObject):
    LeftPosition: int
    RightPosition: int
    TopPosition: int
    BottomPosition: int
    vScrollBar: Incomplete
    hScrollBar: Incomplete
    def __init__(self, parent: QAbstractScrollArea, position=..., autoHide: bool = True) -> None: ...
    def setVerticalScrollBarPolicy(self, policy) -> None: ...
    def setHorizontalScrollBarPolicy(self, policy) -> None: ...
