from ..qt import QColor as QColor
from _typeshed import Incomplete
from dataclasses import dataclass, field

@dataclass(frozen=True)
class QCodeScheme:
    name: str = ...
    backgroundColor: QColor = field(default_factory=QColor)
    caretLineColor: QColor = field(default_factory=QColor)
    occurrenceColor: QColor = field(default_factory=QColor)
    ctrlClickColor: QColor = field(default_factory=QColor)
    sideAreaForegroundColor: QColor = field(default_factory=QColor)
    sideAreaBackgroundColor: QColor = field(default_factory=QColor)
    borderColor: QColor = field(default_factory=QColor)
    matchedColor: QColor = field(default_factory=QColor)
    normalColor: QColor = field(default_factory=QColor)
    normalBold: bool = ...
    normalItalic: bool = ...
    keywordColor: QColor = field(default_factory=QColor)
    keywordBold: bool = ...
    keywordItalic: bool = ...
    builtinColor: QColor = field(default_factory=QColor)
    builtinBold: bool = ...
    builtinItalic: bool = ...
    definitionColor: QColor = field(default_factory=QColor)
    definitionBold: bool = ...
    definitionItalic: bool = ...
    commentColor: QColor = field(default_factory=QColor)
    commentBold: bool = ...
    commentItalic: bool = ...
    stringColor: QColor = field(default_factory=QColor)
    stringBold: bool = ...
    stringItalic: bool = ...
    numberColor: QColor = field(default_factory=QColor)
    numberBold: bool = ...
    numberItalic: bool = ...
    instanceColor: QColor = field(default_factory=QColor)
    instanceBold: bool = ...
    instanceItalic: bool = ...

DARK: Incomplete
LIGHT: Incomplete
