from .layout import MARGIN_LARGE as MARGIN_LARGE, PADDING_LARGE as PADDING_LARGE, SPACING_MEDIUM as SPACING_MEDIUM, SPACING_SMALL as SPACING_SMALL
from .qt import QEvent as QEvent, QGraphicsOpacityEffect as QGraphicsOpacityEffect, QIcon as QIcon, QLabel as QLabel, QObject as QObject, QPainter as QPainter, QPoint as QPoint, QPropertyAnimation as QPropertyAnimation, QRectF as QRectF, QSize as QSize, QSvgRenderer as QSvgRenderer, QTimer as QTimer, QWidget as QWidget, Qt as Qt, Signal as Signal
from .theme import QIconProvider as QIconProvider, QTheme as QTheme
from .toolbutton import QToolButton as QToolButton
from _typeshed import Incomplete
from enum import Enum

class CloseButton(QToolButton):
    def __init__(self, parent=None) -> None: ...
    def enterEvent(self, e) -> None: ...
    def leaveEvent(self, e) -> None: ...

class QStateToolTip(QWidget):
    closed: Incomplete
    class Position(Enum):
        TopRight = 0
        BottomRight = 1
    def __init__(self, title: str, content: str, parent: QWidget, position: Position = ...) -> None: ...
    def setTitle(self, title: str): ...
    def setContent(self, content: str): ...
    def finish(self) -> None: ...
    def setParent(self, parent: QWidget): ...
    def deleteLater(self) -> None: ...
    def paintEvent(self, e) -> None: ...
    def adjustSize(self) -> None: ...
    def adjustPos(self) -> None: ...
    def eventFilter(self, target: QObject, event: QEvent) -> bool: ...
