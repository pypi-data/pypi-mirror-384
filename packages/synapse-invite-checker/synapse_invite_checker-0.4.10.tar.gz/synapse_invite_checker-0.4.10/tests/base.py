# Copyright (C) 2020, 2024 Famedly
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
import base64
import json
import logging
from collections.abc import Iterable
from http import HTTPStatus
from typing import TYPE_CHECKING, Any, ClassVar
from unittest.mock import AsyncMock, Mock, patch

import pytest
from synapse.api.constants import Membership, RoomCreationPreset
from synapse.api.errors import SynapseError
from synapse.api.room_versions import KNOWN_ROOM_VERSIONS
from synapse.crypto.event_signing import add_hashes_and_signatures
from synapse.events import make_event_from_dict
from synapse.rest import admin
from synapse.rest.client import (
    account_data,
    login,
    notifications,
    presence,
    profile,
    room,
    room_upgrade_rest_servlet,
)
from synapse.server import HomeServer
from synapse.types import UserID, create_requester
from synapse.util.clock import Clock
from twisted.internet.testing import MemoryReactor
from typing_extensions import override

import tests.unittest as synapsetest
from synapse_invite_checker.types import PermissionConfig
from tests.server import CustomHeaderType, FakeChannel
from tests.test_utils import INSURANCE_DOMAIN_IN_LIST, SERVER_NAME_FROM_LIST
from tests.test_utils.fake_room_creation import FakeRoom

logger = logging.getLogger(__name__)
# ruff: noqa: E501
# We don't care about long lines in our testdata

if TYPE_CHECKING:
    from synapse.storage.databases.main import DataStore
    from synapse.storage.databases.main.room import RoomWorkerStore

    from synapse_invite_checker import InviteChecker

rawjwt = "eyJhbGciOiJCUDI1NlIxIiwieDVjIjpbIk1JSUMrVENDQXFDZ0F3SUJBZ0lDYkFZd0NnWUlLb1pJemowRUF3SXdnWVF4Q3pBSkJnTlZCQVlUQWtSRk1SOHdIUVlEVlFRS0RCWm5aVzFoZEdscklFZHRZa2dnVGs5VUxWWkJURWxFTVRJd01BWURWUVFMRENsTGIyMXdiMjVsYm5SbGJpMURRU0JrWlhJZ1ZHVnNaVzFoZEdscmFXNW1jbUZ6ZEhKMWEzUjFjakVnTUI0R0ExVUVBd3dYUjBWTkxrdFBUVkF0UTBFMU1DQlVSVk5VTFU5T1RGa3dIaGNOTWpNd01USTFNVEEwTXpVMldoY05Namd3TVRJME1UQTBNelUxV2pCek1Rc3dDUVlEVlFRR0V3SkVSVEV5TURBR0ExVUVDZ3dwWVhKMllYUnZJRk41YzNSbGJYTWdSMjFpU0NCVVJWTlVMVTlPVEZrZ0xTQk9UMVF0VmtGTVNVUXhFREFPQmdOVkJBVVRCekF3TURBeExVRXhIakFjQmdOVkJBTU1GVlphUkMxR1NFbFNMVVpNYVhOMExWTnBaMjVsY2pCYU1CUUdCeXFHU000OUFnRUdDU3NrQXdNQ0NBRUJCd05DQUFRWXRpc3hVUEpTdUMwdG85bE9zMXpkblJwZWJaMGljaGNnaTFzTnQ4YnVDMm5IVFBIQm5DVHJ3ZklNS1k5TEFSYU9zM05RQUlsM0xSM1podVRHcWM4bW80SUJEekNDQVFzd0hRWURWUjBPQkJZRUZKK20wTnh3RHc2L1BxRmw5NzlxdWMwYlA0YWJNQjhHQTFVZEl3UVlNQmFBRkRyaXFpV1NUcXlwbEgzUEdXbnFFd2E1cUREVE1FOEdDQ3NHQVFVRkJ3RUJCRU13UVRBL0JnZ3JCZ0VGQlFjd0FZWXphSFIwY0RvdkwyOWpjM0F5TFhSbGMzUnlaV1l1YTI5dGNDMWpZUzUwWld4bGJXRjBhV3N0ZEdWemRDOXZZM053TDJWak1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBaEJnTlZIU0FFR2pBWU1Bb0dDQ3FDRkFCTUJJRWpNQW9HQ0NxQ0ZBQk1CSUZMTUF3R0ExVWRFd0VCL3dRQ01BQXdOd1lGS3lRSUF3TUVMakFzTUNvd0tEQW1NQ1F3Rmd3VVZtVnllbVZwWTJodWFYTmthV1Z1YzNRdFZFa3dDZ1lJS29JVUFFd0VnU3N3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnVDJCUmJDSUltT3BTVUgvNTB5U1EvQ1ppOEV6bEF4Qkg0RXJMdGxvWURHY0NJR1hjUjJZZzRocG9VS2U3cHFIamJQSGU5Y2liUjNHZGVtNG5uQ25NVHJ1ZSJdLCJ0eXAiOiJKV1QifQ..Xk3_0btGY2DwY4uCRK_D9Pf3YZaMKVCbf-wjeLgXX5JoiG-Aq4D7Xu154ndI1lJCVO530nQg9Aay-OxilrJwbA"

raw_ca_list = """
[
    {
        "cert": "MIIEJjCCAw6gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTEbMBkGA1UEAwwSR0VNLlJDQTEgVEVTVC1PTkxZMTQwMgYDVQQLDCtaZW50cmFsZSBSb290LUNBIGRlciBUZWxlbWF0aWtpbmZyYXN0cnVrdHVyMR8wHQYDVQQKDBZnZW1hdGlrIEdtYkggTk9ULVZBTElEMQswCQYDVQQGEwJERTAeFw0xNDAyMjAxMzU0MzFaFw0yNDAyMTgxMzU0MzFaMIGBMRswGQYDVQQDDBJHRU0uUkNBMSBURVNULU9OTFkxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxCzAJBgNVBAYTAkRFMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAza/q0ST/mpAk768bwZGvur0bhA7mI07M+ACmK2jhrbdr2JaN9pX9k8zVrVHPJA6DQNWrSUPTRwuOXcE2K9akSwVtvJ316WW1C0JU4C1gYd5SaolUhUj8o0Z4VjHbI7bSffX+K2xsbnqM5u51maA0k79zHoixuI9fOHp44oPby7WjWqLk8vXfVi7GiS6JIwjOxwYO5pHKkykMmmvINzFkrYfzF+RmwUILp2hEkjorWSaPbc3NqxZXIAC9NQpB4CKNal1LLQwi+/VEnF9Sj8KHMFkPpaIaQwl6qHAh+QiZVNf/6dmqdmGHIIZNMnfkxRh2IPd+TYx7+Bb0yE6l07qyKQIDAQABo4GmMIGjMB0GA1UdDgQWBBSlsScdgCYTCMJqOD+r5Rd5uxe4lzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAB5gbLFq1cyXLvpUOefCfR2uINqzCpv3nZAwVEgWSXNEWBdzPUNriOKnBlyFssoGROT/scncAG+x8sSvctxzhkL+fJQfrsPow7KqQdi1RaJcJ32W6v0E8YejAgtLx51u3q93klSupS29axqmbups6j9qDu3eF0rddZduQqd55Hxjhjg5YDkg9NyA7E/W4tgh/RYZfWi+r6TQX6dp1yfYZNZEmi4IU0+H4b2pZUaNKq6u2Wxuf9STac+TAB7tHGxvOSLyEK8wNcHfPjD9mfhzoWe2hgf1G8iagggAyVygHXcBwy9mHPWJ3BKzopLhwY45nPRYOYrLrF9gFgEYB7aUyKQ==",
        "cn": "GEM.RCA1 TEST-ONLY",
        "name": "RCA1 TEST-ONLY",
        "next": "",
        "nva": "2024-02-18T13:54:31",
        "nvb": "2014-02-20T13:54:31",
        "prev": "",
        "ski": "A5B1271D80261308C26A383FABE51779BB17B897"
    },
    {
        "cert": "MIIEJjCCAw6gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EyIFRFU1QtT05MWTAeFw0xNjExMTcxNTUwNTdaFw0yNjExMTUxNTUwNTdaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTIgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAymBHUufkzEqjXvCxEPCWUp80vuk8pyXVv/IMngAu87GFjQW62xYtcQDWICaeLEoWIybEF/JKm6vbSCnqIFYP5BsrOPXPY6B56Xb6PatxqS2AXbYxr0Jkl5K1HPWCK7jZlYep/tfhw+Xo/IoYMSkDb0CfNb5GCYJauIN8lOGLbHiMg6oMLfxvTniQA3g4cfdzsbo4f9kAkDZxqmoZLduhcXv31g/JDdds1BIgiiu1iUbr2KOYRw2Ya0gvJ8ec2RMioC87uvyzbofuvSBK5T49pjSsgIne7OKPnBz1mfVD1g37IYVNFOgWyOFKKoZU7ryYdizWNcs/tzVACd5VRqMPYwIDAQABo4GmMIGjMB0GA1UdDgQWBBQtaQC7ofTMjgOiJYOSydJj4dlEuDBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAYKSf2amC76MNsioVHPn/s6m+5nsDwrPwJ5+GiC/Q3wCnb1RPxGqwToJ6vfkNEB5zC2ZImDXuLKXXiLhOef/C2+bBNk8GqWkEN/l7FBk9FvjzaS++y3Rebt5lEmxYyajls/vN++v+FLuz1c7t1r9XVoTBc0kEpuUwt+cm+oFAh0raaP/hEIKf6+ThsSMiKc2KLzN4Qx7JudYu7VFtPj41ETkX/ccSBh8rlnECtiBbvhDh9Bxo9M3yZRox7XnmZy3slYC2V2yS3w+NQzq8iBwsGKKXpIxUQ9+A7/IzCPn5BlzSKAI8ygnD5MqiRzCmjyvxdsrZlwvklBdVL0E5pfS8Fg==",
        "cn": "GEM.RCA2 TEST-ONLY",
        "name": "RCA2 TEST-ONLY",
        "next": "",
        "nva": "2026-11-15T15:50:57",
        "nvb": "2016-11-17T15:50:57",
        "prev": "MIIERzCCAy+gAwIBAgIBPTANBgkqhkiG9w0BAQsFADCBgTEbMBkGA1UEAwwSR0VNLlJDQTEgVEVTVC1PTkxZMTQwMgYDVQQLDCtaZW50cmFsZSBSb290LUNBIGRlciBUZWxlbWF0aWtpbmZyYXN0cnVrdHVyMR8wHQYDVQQKDBZnZW1hdGlrIEdtYkggTk9ULVZBTElEMQswCQYDVQQGEwJERTAeFw0xNjExMTcxNjAwNDZaFw0yNDAyMTgxMzU0MzFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTIgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAymBHUufkzEqjXvCxEPCWUp80vuk8pyXVv/IMngAu87GFjQW62xYtcQDWICaeLEoWIybEF/JKm6vbSCnqIFYP5BsrOPXPY6B56Xb6PatxqS2AXbYxr0Jkl5K1HPWCK7jZlYep/tfhw+Xo/IoYMSkDb0CfNb5GCYJauIN8lOGLbHiMg6oMLfxvTniQA3g4cfdzsbo4f9kAkDZxqmoZLduhcXv31g/JDdds1BIgiiu1iUbr2KOYRw2Ya0gvJ8ec2RMioC87uvyzbofuvSBK5T49pjSsgIne7OKPnBz1mfVD1g37IYVNFOgWyOFKKoZU7ryYdizWNcs/tzVACd5VRqMPYwIDAQABo4HHMIHEMB0GA1UdDgQWBBQtaQC7ofTMjgOiJYOSydJj4dlEuDAfBgNVHSMEGDAWgBSlsScdgCYTCMJqOD+r5Rd5uxe4lzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAr6I6k00OKrOJAuzpFpknjWrUbfhvk1MdKoCeGAjEDEXUhQaHUFO0A+WrJwO18A+qoL8kei9M3zyFey9wahh/EETQm5X2dptxYpjlqDk2w3gp4TyZG2W1B/RH7FEOTRcZ+aSY5XxIvZY1/+LWK8w6I36M5JG//mT+59qOZkF7QaRhDgmgfh6MoSF4ZTisjh9ghBpHEqyqVnAA3MyhAyWdIh1uYBWfoPyeMFhDoW5biBk/TZjeNY1N4Hr8y5NKmaqH19sOOrDTSqtThIg2r7dbKj54bvGq8W+3HIRDe/UW4/m+wMeWylgG13FQDYMgz6vjBqLT++dsNeHefKSj4MjzcQ==",
        "ski": "2D6900BBA1F4CC8E03A2258392C9D263E1D944B8"
    },
    {
        "cert": "MIICkzCCAjmgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EzIFRFU1QtT05MWTAeFw0xNzA4MTEwODM4NDVaFw0yNzA4MDkwODM4NDVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgZ4wgZswHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMEIGCCsGAQUFBwEBBDYwNDAyBggrBgEFBQcwAYYmaHR0cDovL29jc3Aucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzAKBggqhkjOPQQDAgNIADBFAiEAo4kNteSBVR4ovNeTBhkiSXsWzdRC0tQeMfItsE0s7/8CIDZ3EQxclVBV3huM8Bzl9ePbNsV+Lvnjv+Fo1om5+xJ2",
        "cn": "GEM.RCA3 TEST-ONLY",
        "name": "RCA3 TEST-ONLY",
        "next": "MIICuzCCAmKgAwIBAgIBAjAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0xOTA4MDcxMDI0MTlaFw0yNzA4MTAxMDI0MThaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgccwgcQwHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMB8GA1UdIwQYMBaAFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMAoGCCqGSM49BAMCA0cAMEQCIGW3DHpdy0ztC5Fl7CR2tUb08EiGNNsuuP11X7A0I8JjAiB9GP7z4gShBAEoPH23Z/7nH13xtGhAUA5d2v7t16MWkw==",
        "nva": "2027-08-09T08:38:45",
        "nvb": "2017-08-11T08:38:45",
        "prev": "MIIDfTCCAmWgAwIBAgIBGzANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EyIFRFU1QtT05MWTAeFw0xNzA4MTEwODQ0MzFaFw0yNTA4MDkwODQ0MzBaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgccwgcQwHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMB8GA1UdIwQYMBaAFC1pALuh9MyOA6Ilg5LJ0mPh2US4MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMA0GCSqGSIb3DQEBCwUAA4IBAQCc2H/83JiPD4js6pwU9QHAH693oON6fJg8LTbWTsQXARqFnNzJfa4z/IVPLnYQLZz5x6DQOx/muqFenG0BO15m4+UuqmxVkNiBViD2HBOaZT4r1LMS5ZWTfTnP2vGBI7ceMWWc2wTNgBxpIal13R2O4KheIgQD9gvxZulngy12tg0xc8lLsLxRs+NHZoUqJazsmu3NcNvR5tP3Ys82W9vI5qO3S8x5/jZ+/z/bmeh4XrLYoEAaIaZV3Swo4KrzLJ1dpRBLuj7oN4IxNIND37zXevNmihtN9wYcNuiaLZc7kVqmhogIzLU0YGVJjBMekh4ozq0k71EmrAsZbSJ3UGn3",
        "ski": "0790332D75535E7FF8C837BF7EC9265768DF38D2"
    },
    {
        "cert": "MIICmzCCAkGgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0xOTA4MDcxMDE0NDZaFw0yOTA4MDQxMDE0NDZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5SjgaYwgaMwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMAoGCCqGSM49BAMCA0gAMEUCIQCfj1wZoRGcuQRbUO3GdaPU+ZYDbfogGQ1HfHn/ZRxHvwIgTDRCdNBPyo2vKq7OjcVmeU4+OmHJh7LYQsrRZkqDnQk=",
        "cn": "GEM.RCA4 TEST-ONLY",
        "name": "RCA4 TEST-ONLY",
        "next": "MIIC7DCCApOgAwIBAgIBAjAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTA3MjMxMTI5MDlaFw0yOTA4MDQxMTI5MDhaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5SjgfgwgfUwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MB8GA1UdIwQYMBaAFOGt4Af80iB5JPTcl70yZM1rFIUJMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiB7vjuISB0u5Qh2F9bjnLCj1HhOwZjNN/xg1w4+QCPMBQIgPvnaw1wzvMwaXiq21mzTOqHctLXW2NvrI2m+V8u8ygk=",
        "nva": "2029-08-04T10:14:46",
        "nvb": "2019-08-07T10:14:46",
        "prev": "MIICtDCCAlqgAwIBAgIBKzAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EzIFRFU1QtT05MWTAeFw0xOTA4MDcxMDE3MjdaFw0yNzA4MDkwODM4NDVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5Sjgb8wgbwwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MB8GA1UdIwQYMBaAFAeQMy11U15/+Mg3v37JJldo3zjSMEIGCCsGAQUFBwEBBDYwNDAyBggrBgEFBQcwAYYmaHR0cDovL29jc3Aucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzAKBggqhkjOPQQDAgNIADBFAiEAi3HsZud766MjjCBamvjY0PJ9nSNhWEgO3dv+3CRZbvwCIF/Ftch7+izD9L7Q/BhqlxS9Pr5Zv6nBDjbUze6qzuNv",
        "ski": "51DBD96642B34A2B3F572C548D85731DE757CF7F"
    },
    {
        "cert": "MIICyzCCAnKgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTA3MjIxMjU0MTFaFw0zMTA3MjAxMjU0MTFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgdcwgdQwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAGnycg02dlaa1JGjN2g2NGc28jj4yuHQZrOb0yDWrgVQIgBRqGkgNF8R2HTjHZpW/ImKbvHoO6iV1AwzfFl1uzdG0=",
        "cn": "GEM.RCA5 TEST-ONLY",
        "name": "RCA5 TEST-ONLY",
        "next": "MIIDrjCCApagAwIBAgIBAjANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMTEwMjgwNzI5MjdaFw0zMTA3MjAwNzI5MjZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgfgwgfUwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMB8GA1UdIwQYMBaAFEz34GVYVZjmOYvIB3U9TKZwLM8pMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEANE4Sisi+c12IxO7nZZDiMh5YiWM0W/qouw5FkzBjUICVrXIAZlrXCMbGmsu2Abl1q7kzVXh3fUvzSiqswiKaSDHH6aOHLtik+oAgoOp5g6VR+Saf03dzCj85p8wbAWrTmQ6Djgz5iAAU9RMSD8zVn6DoCbyeeVEWOOYeWM+5uh12H1M+xGOl9Nb5RG4CmUIYPAVH7WaU1cLJX3gsQx0vTKahF1Q2ruyzpaLvB2BtK3E7GBH1JOwsLjyuqrQjYmtmZf29Bue6QY3MUT/ottu9UN3xWc4jKl+1M4pUUdOAu4pD+ci1wjUV4IOJEUE1f/9CJm9s4d+Vqrna3kdMvmMlFw==",
        "nva": "2031-07-20T12:54:11",
        "nvb": "2021-07-22T12:54:11",
        "prev": "MIIC7DCCApOgAwIBAgIBKTAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0yMTA3MjMxMTMyNDlaFw0yOTA4MDQxMDE0NDZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgfgwgfUwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMB8GA1UdIwQYMBaAFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAryU2k1dZAABPmVWBJtxjNooi1421TIilqn1vqztaG6wIgajX6VL8Kek6S3L6B55WX5wxv9a20NtzbI4/nSF4LlPE=",
        "ski": "E1ADE007FCD2207924F4DC97BD3264CD6B148509"
    },
    {
        "cert": "MIIEVzCCAz+gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMTEwMjgwNzI0MTRaFw0zMTEwMjYwNzI0MTRaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4HXMIHUMB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBABrZ8L5dWphMF2qWTVUGt77Ecpx1N2dSjpdcWjTP8q6FS2KruTBnZhsxN5ScnRLtQL6yovOblkpuyXDhBjp3ciY0e+WzNJrqNLGjMXkCKL+tk4cO3dQyIdexDL7nQ9cJg2dAYn5jIy068K2e5hHA9SgBbXyyxo/KreVrVi7n8wHG9wNmCxJahnLDut+ec/sMHowiAsmHg09WZ5UVkqTU0tgVrYyKWzHCpHsyrTaPZSMfJevX9vwIgD7CCdxl2sZgFod55EATIraGwbAXmtzyhIYtIBPrRmyNKU5uIuwD3/JENKLN4ngFsoeqUy/iXRkBmldakh3gSARd9usyaMaQ4cQ=",
        "cn": "GEM.RCA6 TEST-ONLY",
        "name": "RCA6 TEST-ONLY",
        "next": "MIIDtjCCA12gAwIBAgIBAzAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E4IFRFU1QtT05MWTAeFw0yMzEyMDcxMDM2MzJaFw0zMTEwMjYxMDM2MzFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4H4MIH1MB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTAfBgNVHSMEGDAWgBShuRQ6JzB7XGce9TLEsdUaify8UzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgUyPfuzsCPWpoxzB6PT0NzTSWssU3pHtwGlMYm8aUNuQCIHAce0F2AV3bfeH6pXWq4LzlEzo5adVxGxLULBxFaXtq",
        "nva": "2031-10-26T07:24:14",
        "nvb": "2021-10-28T07:24:14",
        "prev": "MIIDtjCCA12gAwIBAgIBDDAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTEwMjgwNzM0MjZaFw0zMTA3MjAwNzM0MjVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4H4MIH1MB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTAfBgNVHSMEGDAWgBThreAH/NIgeST03Je9MmTNaxSFCTBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgFL1kx8WwpvE6Z1Qgxp3hVuuFmtJboMFphPnqrSnI0bECICDH1I7wiv/0M9F+OtOryHifOrGUXc13uj0vjULnPMMo",
        "ski": "4CF7E065585598E6398BC807753D4CA6702CCF29"
    },
    {
        "cert": "MIICyjCCAnKgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E4IFRFU1QtT05MWTAeFw0yMzEyMDcxMDE3NTJaFw0zMzEyMDQxMDE3NTJaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTggVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDLncr51uoi5aGXoctM3aIm/tjMRXGu+57M1TUjwsy2HhyjEBaMWqlGMBcmcGZhbcKt/lepwcDk3EvGRmDJWGQ2jgdcwgdQwHQYDVR0OBBYEFKG5FDonMHtcZx71MsSx1RqJ/LxTMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNGADBDAh9GANMYXG7LtOY83ffXG0MB/Hb1cGPV5umiJgyOlkpVAiAL+e32oEH1N625yww+4lgFd0LBg9gcFLQ87rEdlyCq1Q==",
        "cn": "GEM.RCA8 TEST-ONLY",
        "name": "RCA8 TEST-ONLY",
        "next": "",
        "nva": "2033-12-04T10:17:52",
        "nvb": "2023-12-07T10:17:52",
        "prev": "MIIDrjCCApagAwIBAgIBLjANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMzEyMDcxMDM2NTdaFw0zMTEwMjYwNzI0MTRaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTggVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDLncr51uoi5aGXoctM3aIm/tjMRXGu+57M1TUjwsy2HhyjEBaMWqlGMBcmcGZhbcKt/lepwcDk3EvGRmDJWGQ2jgfgwgfUwHQYDVR0OBBYEFKG5FDonMHtcZx71MsSx1RqJ/LxTMB8GA1UdIwQYMBaAFEz34GVYVZjmOYvIB3U9TKZwLM8pMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAg8in6H3CT8mNC//2ux1U7xIplOUJaFy8hJCtjOvmFp+QRvdpuKjp2pjHf+QVUXfbDj1hQcqewEi41yUZWq3wNijd3PD/o0vqUqyuxYyNc4dtem3zdneixiMohpD//vYcwLBf4aXKZM3dZXjA9D6RRHhEasDxmvGLbVbvabxQSNEzyULUgyN3ZM8blvvVC7QQjSRvUJzEnnuxcsbVa5iqkAU1Dh/IzhGHBTqoCMMEoh8UuxeHx8SHK5QGzRkXvvDLu3ba7sph52i/HXuuXCj+jsTVivnD+SYaXfGEkXEnOzdcmosOe/F/Lr6eRU6Y3ZKf6DgrkYsn8Xi1i5ye/U+j0w==",
        "ski": "A1B9143A27307B5C671EF532C4B1D51A89FCBC53"
    }
]
            """

gem_komp_ca50_cert = "MIIDUjCCAvigAwIBAgIBJTAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0yMTA2MTAxMDQ1MjJaFw0yOTA2MDgxMDQ1MjFaMIGEMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDEyMDAGA1UECwwpS29tcG9uZW50ZW4tQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxIDAeBgNVBAMMF0dFTS5LT01QLUNBNTAgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABGDIQ/rR6jYzxjGyPmesnz5SbWNShsVyV4xDAkTYCqYrDCcsT8hYY7f/i9SvsePMTT4FiISKsE1i6TgnZmxW3OejggFZMIIBVTAdBgNVHQ4EFgQUOuKqJZJOrKmUfc8ZaeoTBrmoMNMwHwYDVR0jBBgwFoAUUdvZZkKzSis/VyxUjYVzHedXz38wSgYIKwYBBQUHAQEEPjA8MDoGCCsGAQUFBzABhi5odHRwOi8vb2NzcC10ZXN0cmVmLnJvb3QtY2EudGktZGllbnN0ZS5kZS9vY3NwMA4GA1UdDwEB/wQEAwIBBjBGBgNVHSAEPzA9MDsGCCqCFABMBIEjMC8wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cuZ2VtYXRpay5kZS9nby9wb2xpY2llczBbBgNVHREEVDBSoFAGA1UECqBJDEdnZW1hdGlrIEdlc2VsbHNjaGFmdCBmw7xyIFRlbGVtYXRpa2Fud2VuZHVuZ2VuIGRlciBHZXN1bmRoZWl0c2thcnRlIG1iSDASBgNVHRMBAf8ECDAGAQH/AgEAMAoGCCqGSM49BAMCA0gAMEUCIFon6V178kFN5t6+CyZG+QxZ2uM4J31/lVe7LZyG2edMAiEAgNKUdc2aq8Sl32sDt46OAid4UWRGDwnkdij5dR1s5xA="


def return_gem_cert(cn: str) -> bytes:
    if cn == "GEM.KOMP-CA50 TEST-ONLY":
        return base64.b64decode(gem_komp_ca50_cert)
    raise Exception("Could not find cert" + cn)


# Namespaced various room related strings for state events as defined by gematik in:
# https://gemspec.gematik.de/docs/gemSpec/gemSpec_TI-M_Basis/gemSpec_TI-M_Basis_V1.1.1/#5.5
#
# These are passed to the 'creation_content' part of createRoom and are to define the
# 'type' of the room being created
GEMATIK_DEFAULT_ROOM_CREATE_TYPE = "de.gematik.tim.roomtype.default.v1"
GEMATIK_CASE_ROOM_CREATE_TYPE = "de.gematik.tim.roomtype.casereference.v1"
# These define 'State Event' types to use for 'initial_state' in createRoom
GEMATIK_DEFAULT_ROOM_TYPE = "de.gematik.tim.room.default.v1"
GEMATIK_CASE_STATE_EVENT_TYPE = "de.gematik.tim.room.casereference.v1"
# These are included, but are listed as 'soon-to-be-deprecated' as they were implemented
# too soon. See:
# https://gemspec.gematik.de/docs/gemSpec/gemSpec_TI-M_Basis/gemSpec_TI-M_Basis_V1.1.1/#5.5.1.1
GEMATIK_ROOM_NAME = "de.gematik.tim.room.name"
GEMATIK_ROOM_TOPIC = "de.gematik.tim.room.topic"


def construct_initial_state_events_for_room_creation(
    sender_id: str,
    room_type: str = GEMATIK_DEFAULT_ROOM_TYPE,
    room_name: str = "Room Name",
    room_topic: str = "Room Topic",
) -> list[dict[str, Any]]:
    """
    A simple dict construction helper that ensures the required 'initial_state' is
    passed when calling the 'createRoom' endpoint during testing
    """

    room_event = {
        "type": room_type,
        "state_key": sender_id,
        "content": {},
    }
    name_event = {
        "type": GEMATIK_ROOM_NAME,
        "state_key": "",
        "content": {"name": room_name},
    }
    topic_event = {
        "type": GEMATIK_ROOM_TOPIC,
        "state_key": "",
        "content": {"topic": room_topic},
    }
    return [room_event, name_event, topic_event]


def construct_extra_content(
    inviter: str, invitee_list: list[str], is_direct: bool = False
) -> dict[str, Any]:
    """
    Helper to include all the boilerplate expected by the gematik spec during the
    process of room creation.
    """
    return {
        "invite": invitee_list,
        "type": GEMATIK_DEFAULT_ROOM_CREATE_TYPE,
        "initial_state": construct_initial_state_events_for_room_creation(inviter),
        "name": "Room Name",
        "topic": "Room Topic",
        "is_direct": is_direct,
    }


class FakeInviteResponse:
    signatures: ClassVar[dict[str, dict[str, str]]] = {
        "example.com": {"test_key": "whateversomethingstupidlongsoitlooksgood"}
    }


class FederatingModuleApiTestCase(synapsetest.FederatingHomeserverTestCase):
    server_name_for_this_server = SERVER_NAME_FROM_LIST
    OTHER_SERVER_NAME = INSURANCE_DOMAIN_IN_LIST
    ROOM_VERSION = "10"

    @classmethod
    def setUpClass(cls):
        cls._patcher1 = patch(
            "synapse_invite_checker.InviteChecker._raw_federation_list_fetch",
            new=AsyncMock(return_value=rawjwt),
        )
        cls._patcher2 = patch(
            "synapse_invite_checker.InviteChecker._raw_gematik_root_ca_fetch",
            new=AsyncMock(return_value=json.loads(raw_ca_list)),
        )
        cls._patcher3 = patch(
            "synapse_invite_checker.InviteChecker._raw_gematik_intermediate_cert_fetch",
            new=AsyncMock(side_effect=return_gem_cert),
        )
        cls._patcher1.start()
        cls._patcher2.start()
        cls._patcher3.start()

    @classmethod
    def tearDownClass(cls):
        cls._patcher1.stop()
        cls._patcher2.stop()
        cls._patcher3.stop()

    servlets: ClassVar[list] = [
        admin.register_servlets,
        account_data.register_servlets,
        login.register_servlets,
        room.register_servlets,
        room_upgrade_rest_servlet.register_servlets,
        presence.register_servlets,
        profile.register_servlets,
        notifications.register_servlets,
    ]

    def prepare(
        self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer
    ) -> None:
        super().prepare(reactor, clock, homeserver)
        self.store: DataStore | RoomWorkerStore = homeserver.get_datastores().main
        self.storage_controllers = homeserver.get_storage_controllers()
        self.module_api = homeserver.get_module_api()
        self.event_creation_handler = homeserver.get_event_creation_handler()
        # self.sync_handler = homeserver.get_sync_handler()
        self.auth_handler = homeserver.get_auth_handler()
        self.inv_checker: InviteChecker = self.hs.mockmod  # type: ignore[attr-defined]

        # Map room_id to FakeRoom
        self.remote_rooms: dict[str, FakeRoom] = {}
        self.map_user_id_to_token: dict[str, str] = {}

    @override
    def make_homeserver(self, reactor: MemoryReactor, clock: Clock) -> HomeServer:
        # Mock out the calls over federation.
        self.fed_transport_client = Mock(spec=["send_transaction"])
        self.fed_transport_client.send_transaction = AsyncMock(return_value={})
        # Hijack the federation invitation infrastructure in the handler so do not have
        # to do things like check signature validation and event structure
        # self.fed_handler = Mock(spec=["send_invite"])
        # self.fed_handler.send_invite = AsyncMock(return_value=FakeInviteResponse())

        hs = self.setup_test_homeserver(
            # Masquerade as a domain found on the federation list, then we can pass
            # tests that verify that fact
            self.server_name_for_this_server,
            federation_transport_client=self.fed_transport_client,
            # federation_handler=self.fed_handler,
        )
        patcher_send_invite = patch.object(
            hs.get_federation_handler(),
            "send_invite",
            AsyncMock(return_value=FakeInviteResponse()),
        )
        patcher_send_invite.start()
        self.addCleanup(patcher_send_invite.stop)
        return hs

    def default_config(self) -> dict[str, Any]:
        conf = super().default_config()
        if "modules" not in conf:
            conf["modules"] = [
                {
                    "module": "synapse_invite_checker.InviteChecker",
                    "config": {
                        "tim-type": "pro",
                        "federation_list_url": "http://dummy.test/FederationList/federationList.jws",
                        "federation_localization_url": "http://dummy.test/localization",
                        "federation_list_client_cert": "tests/certs/client.pem",
                        "gematik_ca_baseurl": "https://download-ref.tsl.ti-dienste.de/",
                    },
                }
            ]
        return conf

    def set_permissions_for_user(
        self, user: str, permissions: PermissionConfig
    ) -> None:
        self.get_success_or_raise(
            self.inv_checker.permissions_handler.update_permissions(user, permissions)
        )

    def add_permission_to_a_user(self, user_to_permit: str, owning_user: str) -> None:
        perms = self.get_success_or_raise(
            self.inv_checker.permissions_handler.get_permissions(owning_user)
        )
        perms.userExceptions.setdefault(user_to_permit, {})
        self.get_success_or_raise(
            self.inv_checker.permissions_handler.update_permissions(owning_user, perms)
        )

    def _make_join(self, user_id: str, room_id: str) -> FakeChannel:
        """Generate the make_join template"""
        users_domain = UserID.from_string(user_id).domain
        return self.make_signed_federation_request(
            "GET",
            f"/_matrix/federation/v1/make_join/{room_id}/{user_id}"
            f"?ver={self.ROOM_VERSION}",
            from_server=users_domain,
        )

    def send_join(
        self,
        joining_user: str,
        room_id: str,
        make_join_expected_code: int = HTTPStatus.OK,
        send_join_expected_code: int = HTTPStatus.OK,
    ) -> None:
        """
        Join a remote user to a local server. Should be a complete make_join/send_join
        handshake
        """
        # First create the make_join that will need to be signed by the 'remote server'
        join_result_channel = self._make_join(joining_user, room_id)
        assert (
            join_result_channel.code == make_join_expected_code
        ), f"make_join: {join_result_channel.json_body}"

        # The make_join can fail if a user was not invited to a room, or was otherwise
        # denied. Since there is nothing to give to the rest of the handshake below, may
        # as well just return(since the function doesn't return anything anyway
        if join_result_channel.code != HTTPStatus.OK:
            return

        # Pull out the template, sign it then give it to our server to process
        join_event_dict = join_result_channel.json_body["event"]
        joining_users_domain = UserID.from_string(joining_user).domain
        self.add_hashes_and_signatures_from_other_server(
            join_event_dict,
            KNOWN_ROOM_VERSIONS[self.ROOM_VERSION],
            joining_users_domain,
        )
        channel = self.make_signed_federation_request(
            "PUT",
            f"/_matrix/federation/v2/send_join/{room_id}/x",
            content=join_event_dict,
            from_server=joining_users_domain,
        )
        assert (
            channel.code == send_join_expected_code
        ), f"send_join: {channel.json_body}"

        # the room should show that the new user is a member
        r = self.get_success(self.storage_controllers.state.get_current_state(room_id))
        assert r[("m.room.member", joining_user)].membership == "join"

    def _make_leave(self, user_id: str, room_id: str) -> dict[str, Any]:
        users_domain = UserID.from_string(user_id).domain
        channel = self.make_signed_federation_request(
            "GET",
            f"/_matrix/federation/v1/make_leave/{room_id}/{user_id}",
            from_server=users_domain,
        )
        assert channel.code == HTTPStatus.OK, channel.json_body
        return channel.json_body

    def send_leave(self, leaving_user: str, room_id: str) -> None:
        leaving_users_domain = UserID.from_string(leaving_user).domain
        leave_result = self._make_leave(leaving_user, room_id)
        room_version = KNOWN_ROOM_VERSIONS[leave_result["room_version"]]
        event_content = leave_result["event"]
        self.add_hashes_and_signatures_from_other_server(
            event_content, room_version, leaving_users_domain
        )
        leave_event_base = make_event_from_dict(event_content, room_version)
        channel = self.make_signed_federation_request(
            "PUT",
            f"/_matrix/federation/v2/send_leave/{room_id}/{leave_event_base.event_id}",
            event_content,
            from_server=leaving_users_domain,
        )
        assert channel.code == HTTPStatus.OK, channel.json_body

    def create_remote_room(
        self, creator_id: str, room_version: str, is_public: bool
    ) -> str:
        domain = UserID.from_string(creator_id).domain
        assert (
            domain in self.map_server_name_to_signing_key
        ), f"Signing key for {domain} not found in map"
        remote_room = FakeRoom(
            self.hs.config,
            self.clock,
            creator_id,
            domain,
            self.map_server_name_to_signing_key[domain],
            room_ver=room_version,
            room_preset=(
                RoomCreationPreset.PUBLIC_CHAT
                if is_public
                else RoomCreationPreset.PRIVATE_CHAT
            ),
        )
        room_id = remote_room.room_id.to_string()
        self.remote_rooms[room_id] = remote_room
        return room_id

    def do_remote_join(
        self, room_id: str, joining_user: str, expected_code: int | None = None
    ) -> None:
        """
        Join a remote room. This does not include an invite which must be separate. Use
        self.helper.invite() to simulate that

        Args:
            room_id:
            joining_user: the local user that is joining the room
            expected_code: Either None to represent no error expected, or an HTTPStatus
                related code to watch for and extract from any SynapseError's raised

        Raises: AssertionError if remote room was not created/found

        """
        assert (
            room_id in self.remote_rooms
        ), "Remote room should have been found(was it created?)"

        remote_room = self.remote_rooms[room_id]

        # This is the join event signed by the remote server
        # It is a tuple of [origin server, Join EventBase, RoomVersion]
        join_event = remote_room.create_make_join_response(joining_user)

        # In normal operation, a local server will sign that join event and send it
        # back. Here we sign the event and will inject it back into the room during
        # mock_send_join below
        edited_join_event = join_event[1].get_pdu_json(self.hs.get_clock().time_msec())

        # According to the Matrix spec:
        # > The joining server is expected to add or replace the origin, origin_server_ts,
        # > and event_id on the templated event received by the resident server. This
        # > event is then signed by the joining server.
        # 'origin' and 'event_id' are no longer/looked at by Synapse it seems.
        # 'event_id' should have been used since room version 2, and
        # 'origin' has been superseded by observing the domain of the 'sender'. For our
        # tests, time isn't advancing like the real world and it is likely that
        # 'origin_server_ts' will have not changed anyway

        add_hashes_and_signatures(
            remote_room.room_version,
            edited_join_event,
            self.server_name_for_this_server,
            self.hs.signing_key,
        )

        # This will be the return value for the 'make_join'
        mock_make_membership_event = AsyncMock(return_value=join_event)

        # And the return value for the 'send_join'. The FakeRoom has all the bits to
        # sign the event
        mock_send_join = AsyncMock(
            return_value=remote_room.create_send_join_response(
                joining_user, edited_join_event
            )
        )

        # Patch these methods in place, allowing a given test some isolation and
        # automatically undoing them after the function runs.
        # 'make_membership_event' is the function that calls a remote server's
        #   'make_join' endpoint, this will substitute its response
        # 'send_join' is the function that calls a remote server's 'send_join' endpoint
        #   and would normally receive a SendJoinResult
        with (
            patch.object(
                self.hs.get_room_member_handler().federation_handler.federation_client,
                "make_membership_event",
                mock_make_membership_event,
            ),
            patch.object(
                self.hs.get_room_member_handler().federation_handler.federation_client,
                "send_join",
                mock_send_join,
            ),
        ):
            if expected_code:
                # In theory, this can raise an AuthError as well, but that is a subclass
                # of SynapseError so this should be good enough
                with pytest.raises(SynapseError) as excinfo:
                    self.get_success_or_raise(
                        self.hs.get_room_member_handler().update_membership(
                            requester=create_requester(joining_user),
                            target=UserID.from_string(joining_user),
                            room_id=room_id,
                            action=Membership.JOIN,
                            remote_room_hosts=[remote_room.server_name],
                        )
                    )
                assert excinfo.value.code == expected_code
            else:
                self.get_success_or_raise(
                    self.hs.get_room_member_handler().update_membership(
                        requester=create_requester(joining_user),
                        target=UserID.from_string(joining_user),
                        room_id=room_id,
                        action=Membership.JOIN,
                        remote_room_hosts=[remote_room.server_name],
                    )
                )

    def do_remote_invite(
        self,
        target_user_id: str,
        source_user_id: str,
        room_id: str,
        expect_code: int = HTTPStatus.OK,
    ) -> dict[str, Any] | None:
        """Make a fake inbound federation invite request from our fake room"""
        assert (
            room_id in self.remote_rooms
        ), "Remote room should have been found(was it created?)"

        remote_room = self.remote_rooms[room_id]
        # We use the fake room to generate the invite event, which signs it with the
        # remote server signing key
        invite_pdu, room_initial_state, invite_event_id = (
            remote_room.create_send_invite_request(source_user_id, target_user_id)
        )
        remote_server_domain = UserID.from_string(source_user_id).domain

        # Sending it to our local server signs the event with its signature and saves
        # it locally
        channel = self.make_signed_federation_request(
            "PUT",
            f"/_matrix/federation/v2/invite/{room_id}/{invite_event_id}",
            content={
                "event": invite_pdu,
                "invite_room_state": room_initial_state,
                "room_version": remote_room.room_version.identifier,
            },
            from_server=remote_server_domain,
        )
        # Since above can hit the spam checker's `user_may_invite()`,
        assert channel.code == expect_code, channel.json_body
        if channel.code == HTTPStatus.OK:
            # Update the fake room with the newly signed version
            remote_room.promote_member_invite(channel.json_body["event"])

        return channel.json_body

    def login(
        self,
        username: str,
        password: str,
        device_id: str | None = None,
        additional_request_fields: dict[str, str] | None = None,
        custom_headers: Iterable[CustomHeaderType] | None = None,
    ) -> str:
        """
        Supplement the base class login() call to handle access tokens mapping for future requests
        Args:
            username:
            password:
            device_id:
            additional_request_fields:
            custom_headers:

        Returns: the access token, for backwards compatibilty

        """
        access_token = super().login(
            username,
            password,
            device_id=device_id,
            additional_request_fields=additional_request_fields,
            custom_headers=custom_headers,
        )
        # When requests are placed, it will be the full mxid that is provided
        self.map_user_id_to_token[f"@{username}:{self.server_name_for_this_server}"] = (
            access_token
        )
        return access_token

    def create_local_room(
        self,
        creating_user: str,
        invitee_list: list[str],
        is_public: bool,
        override_content: dict[str, Any] | None = None,
    ) -> str | None:
        """
        Custom helper to send an api request with a full set of required additional room
        state to the room creation matrix endpoint. This allows for a fuller simulation
        of required gematik bits.

        'override_content' will override every key in the 'content' field except for
        'initial_state' which is merged instead.

        Returns a room_id if successful or None if not, allowing tests to give the
            assertion errors they want instead of the http response which is not useful
        """

        # First create the extra content, then let override_content replace/merge items.
        # extra_content will be passed to the room creation helper function
        extra_content = construct_extra_content(creating_user, invitee_list)
        if override_content:
            for key, value in override_content.items():
                # initial_state is special, it's a list so we don't override it as much
                # as merge it.
                if key == "initial_state":
                    assert isinstance(
                        value, list
                    ), "initial_state in 'override_content' should be a List"
                    initial_state = extra_content.get("initial_state", [])

                    initial_state.extend(value)
                    extra_content.update({key: initial_state})
                else:
                    extra_content.update({key: value})

        # Hide the assertion from create_room_as() when the error code is unexpected. It
        # makes errors for the tests less clear when all we get is the http response,
        # because then we are not sure which exact test used is the failure(especially
        # when creating many rooms). Instead, use a simple binary condition; either we
        # get a room_id or None. This allows the test itself to let us know which test
        # failed.
        try:
            return self.helper.create_room_as(
                creating_user,
                is_public=is_public,
                tok=self.map_user_id_to_token[creating_user],
                extra_content=extra_content,
            )
        except AssertionError as e:
            logger.warning(
                "create_room_as failed to create room, this may have been expected: %r",
                e,
            )
            return None
