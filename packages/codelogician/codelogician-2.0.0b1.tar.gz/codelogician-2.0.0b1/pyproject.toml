[project]
name = "codelogician"
version = "2.0.0b1"
description = """CodeLogician applies neurosymbolic AI to translate source code into precise mathematical logic, striving to
create a formal model of the program's behavior that's functionally equivalent to the original source code."""
readme = "src/codelogician/README.md"
authors = [
    { name = "hongyu", email = "hongyu@imandra.ai" },
    { name = "samer", email = "samer@imandra.ai" },
    { name = "denis", email = "denis@imandra.ai" }
]
requires-python = ">=3.12"
dependencies = [
  "chromadb>=1.0.12",
  "fastapi>=0.116.1",
  "fastapi-mcp>=0.4.0",
  "imandra[universe]>=2.1.1",
  "iml-query==0.3.4",
  "joblib>=1.5.1",
  "matplotlib>=3.10.3",
  "networkx>=3.5",
  "networkx-mermaid>=0.1.7",
  "pydantic>=2.11.5",
  "pydantic-yaml>=1.6.0",
  "rich>=14.0.0",
  "termcolor>=3.1.0",
  "textual-dev>=1.7.0",
  "textual-image>=0.8.3",
  "watchdog>=6.0.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/codelogician"]

[tool.hatch.build.targets.wheel.force-include]
"main.py" = "main.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "README.md",  # Root README is for developers only
]

[tool.uv.sources]

[dependency-groups]
dev = [
  "dowhen>=0.1.0",
  "inline-snapshot[dirty-equals]>=0.24.0",
  "ipykernel>=6.29.5",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
]

[tool.ruff]
line-length = 88
fix = true
show-fixes = true
src = ["src"]
exclude = ["*.ipynb", "data/"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "RUF", # ruff-specific rules
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
]
ignore = [
  "SIM108", # if-else-block-instead-of-if-exp
  "N801",   # Class name should use CapWords
  "PTH123", # `open()` should be replaced by `Path.open()`
  "C417",   # Unnecessary `map()` usage (rewrite using a generator expression)
]
task-tags = ["HACK"]
pycodestyle.ignore-overlong-task-comments = true
isort.combine-as-imports = true

[tool.ty]
environment.python = ".venv"

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
enable_assertion_pass_hook = true

[tool.inline-snapshot]
format-command = "uv run ruff format --stdin-filename {filename}"

[project.scripts]
codelogician = "main:run_codelogician"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"
explicit = true

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true
