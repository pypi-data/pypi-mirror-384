Metadata-Version: 2.4
Name: em_fares_to_xml
Version: 2.2.0
Author: Raydel Miranda <raydel.gomez@everymundo.com>, Anahi Martinez <anahi@everymundo.com>
Author-email: Raydel Miranda <raydel.gomez@everymundo.com>, Anahi Martinez <anahi@everymundo.com>
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

em_fares_to_xml
==========

Rust powered Python module for converting fare objects coming from the
batch fare service into xml Facebook feed items objects.

Testing and benchmarking.
===========

In order to run tests type in the project root:

> $ cargo test --no-default-features

For run benchmarking:

> $ cargo bench --no-default-features



Dependencies:
===========

`python3-dev` package is required to bi installed to be able to compile.



Building the python module.
============

Use [maturin](https://github.com/PyO3/maturin) for create/publish python module.

Compile
> cargo build

Publish
> docker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin publish -i python3.12 -u <USERNAME> -p <PASSWORD>

### New Way to publish

> docker run --rm --platform linux/amd64 -v $(pwd):/io ghcr.io/pyo3/maturin build -i python3.12

> twine upload target\wheels\em_fares_to_xml-<version>-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

this will ask the token from pypi

[Find the Python module here](https://pypi.org/project/em-fares-to-xml/)

###  How to test with cargo on docker

1. first time
> docker build -t farelib .

2. when running tests, examples: 

> docker run --rm -v $(pwd):/app farelib sh -c "cargo test --no-default-features"

> docker run --rm -v $(pwd):/app farelib sh -c "cargo test --test test_parse_json"

