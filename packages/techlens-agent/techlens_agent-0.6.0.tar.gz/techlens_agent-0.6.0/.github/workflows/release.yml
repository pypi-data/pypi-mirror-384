name: "Python Release"
on:
  pull_request:
    branches:
      - main
  release:
    types: [created]
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - id: black
      uses: psf/black@stable
      continue-on-error: true
    - id: black2
      if: steps.black.outcome == 'failure'
      uses: psf/black@stable
      with:
        options: ''
    - name: Annotate diff changes using reviewdog
      if: steps.black.outcome == 'failure'
      uses: reviewdog/action-suggester@v1
      with:
        tool_name: blackfmt
    - name: Fail on Linting Issue
      if: steps.black.outcome == 'failure'
      run: exit 1

  unit-tests:
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
        matrix:
            os: [ubuntu-latest, macos-latest]
            python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    #env:
    #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #    AWS_DEFAULT_REGION: 'us-east-1'
    steps:
      - uses: actions/checkout@v4
      # Google Setup
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/501851565537/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'sos-two@startupos-328814.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup PHP with tools
        uses: shivammathur/setup-php@v2
        with:
            php-version: '8.3'
            tools: composer:v2
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build hatchling setuptools
          --user
      - name: Make VERSION
        run: python make_version.py
      - name: install self
        run: pip install -e .
    #  - name: Configure AWS
    #    run: |
    #        aws --profile default configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
    #        aws --profile default configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #        aws --profile default configure set region "us-east-1"
    #        aws sts get-caller-identity
      - name: Unit Tests
        run: pytest
    #  - name: Upload coverage to Codecov
    #    uses: codecov/codecov-action@v4
    #    with:
    #      token: ${{ secrets.CODECOV_TOKEN }}

  build-and-publish:
    name: Build and publish Python 🐍 distributions 📦 to PyPI and TestPyPI
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
            echo "$GITHUB_CONTEXT"
            echo "${{github.ref}}"
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Make VERSION
        run: python make_version.py
      - name: Build a binary wheel and a source tarball
        run: >-
          python3 -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
#      - name: Publish distribution 📦 to Test PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          repository-url: https://test.pypi.org/legacy/
      - name: Publish distribution 📦 to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
