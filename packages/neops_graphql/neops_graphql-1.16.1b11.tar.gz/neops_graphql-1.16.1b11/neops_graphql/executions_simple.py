# Generated by ariadne-codegen
# Source: ../graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ExecutionStateEnum, ExecutionTypeEnum, ProviderTypeEnum


class ExecutionsSimple(BaseModel):
    executions: Optional["ExecutionsSimpleExecutions"]


class ExecutionsSimpleExecutions(BaseModel):
    total_count: Optional[int] = Field(alias="totalCount")
    results: Optional[List[Optional["ExecutionsSimpleExecutionsResults"]]]


class ExecutionsSimpleExecutionsResults(BaseModel):
    id: str
    task_id: Optional[str] = Field(alias="taskId")
    name: Optional[str]
    execution_type: Optional[ExecutionTypeEnum] = Field(alias="executionType")
    created_at: Optional[Any] = Field(alias="createdAt")
    updated_at: Optional[Any] = Field(alias="updatedAt")
    state: Optional[ExecutionStateEnum]
    user: Optional["ExecutionsSimpleExecutionsResultsUser"]
    process: Optional["ExecutionsSimpleExecutionsResultsProcess"]
    neops_task: Optional["ExecutionsSimpleExecutionsResultsNeopsTask"] = Field(
        alias="neopsTask"
    )


class ExecutionsSimpleExecutionsResultsUser(BaseModel):
    username: Optional[str]
    last_name: Optional[str] = Field(alias="lastName")
    first_name: Optional[str] = Field(alias="firstName")
    email: Optional[str]
    id: str


class ExecutionsSimpleExecutionsResultsProcess(BaseModel):
    name: Optional[str]
    id: str


class ExecutionsSimpleExecutionsResultsNeopsTask(BaseModel):
    id: str
    name: Optional[str]
    description: Optional[str]
    provider: Optional["ExecutionsSimpleExecutionsResultsNeopsTaskProvider"]


class ExecutionsSimpleExecutionsResultsNeopsTaskProvider(BaseModel):
    provider_type: Optional[ProviderTypeEnum] = Field(alias="providerType")


ExecutionsSimple.model_rebuild()
ExecutionsSimpleExecutions.model_rebuild()
ExecutionsSimpleExecutionsResults.model_rebuild()
ExecutionsSimpleExecutionsResultsNeopsTask.model_rebuild()
