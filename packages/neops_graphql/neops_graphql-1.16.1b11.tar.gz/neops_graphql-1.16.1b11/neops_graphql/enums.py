# Generated by ariadne-codegen
# Source: ../schema.graphql

from enum import Enum


class NeopsTask_ValidityStateEnum(str, Enum):
    VALID = "VALID"
    NOT_VALID = "NOT_VALID"
    UNKNOWN = "UNKNOWN"
    PROCESSING = "PROCESSING"


class NeopsTask_RunOnEnum(str, Enum):
    CLIENT = "CLIENT"
    DEVICE = "DEVICE"
    INTERFACE = "INTERFACE"
    GROUP = "GROUP"
    GLOBAL = "GLOBAL"
    GENERIC = "GENERIC"


class NeopsTask_ProviderTypeEnum(str, Enum):
    CONFIGURE = "CONFIGURE"
    FACTS = "FACTS"
    CHECK = "CHECK"
    EXECUTE = "EXECUTE"
    NONE = "NONE"


class NeopsTask_RunOnStrictEnum(str, Enum):
    TRUE = "TRUE"
    FALSE = "FALSE"
    UNKNOWN = "UNKNOWN"


class ExecutionStateEnum(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    FAILED = "FAILED"
    PARTIAL_FAILED = "PARTIAL_FAILED"
    ABORTED = "ABORTED"
    SUCCESSFUL = "SUCCESSFUL"


class ExecutionTypeEnum(str, Enum):
    DRYRUN = "DRYRUN"
    APPLY = "APPLY"
    CHECK = "CHECK"
    FACTS = "FACTS"
    EXECUTE = "EXECUTE"
    OTHER = "OTHER"


class ConnectionStateEnum(str, Enum):
    NEW = "NEW"
    UNREACHABLE = "UNREACHABLE"
    NOSSH = "NOSSH"
    AUTHFAILURE = "AUTHFAILURE"
    OK = "OK"


class InterfaceStateEnum(str, Enum):
    UP = "UP"
    DOWN = "DOWN"
    ADMINISTRATIVE_SHUTDOWN = "ADMINISTRATIVE_SHUTDOWN"
    ERROR_DISABLED = "ERROR_DISABLED"


class CheckResultEnum(str, Enum):
    OK = "OK"
    NOK = "NOK"
    FAILED = "FAILED"


class ExecutionResultStateEnum(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    FAILED = "FAILED"
    PARTIAL_FAILED = "PARTIAL_FAILED"
    PRECHECK_FAILED = "PRECHECK_FAILED"
    POSTCHECK_FAILED = "POSTCHECK_FAILED"
    FILTERED = "FILTERED"
    ABORTED = "ABORTED"
    SUCCESSFUL = "SUCCESSFUL"


class DeviceExecutionStateEnum(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    FAILED = "FAILED"
    PARTIAL_FAILED = "PARTIAL_FAILED"
    FILTERED = "FILTERED"
    ABORTED = "ABORTED"
    SUCCESSFUL = "SUCCESSFUL"


class RunOnEnum(str, Enum):
    CLIENT = "CLIENT"
    DEVICE = "DEVICE"
    INTERFACE = "INTERFACE"
    GROUP = "GROUP"
    GLOBAL = "GLOBAL"
    GENERIC = "GENERIC"


class CronJobExecuteTypeEnum(str, Enum):
    CRON = "CRON"
    PERIODIC = "PERIODIC"


class NeopsTaskCronJobExecuteTypeEnum(str, Enum):
    CRON = "CRON"
    PERIODIC = "PERIODIC"


class EntityType(str, Enum):
    GROUP = "GROUP"
    DEVICE = "DEVICE"
    INTERFACE = "INTERFACE"
    CLIENT = "CLIENT"
    ANY = "ANY"


class AggregationsType(str, Enum):
    GROUP = "GROUP"
    DEVICE = "DEVICE"
    INTERFACE = "INTERFACE"
    CLIENT = "CLIENT"


class ChartType(str, Enum):
    BAR = "BAR"
    DOUGHNUT = "DOUGHNUT"
    PIE = "PIE"
    POLAR = "POLAR"
    RADAR = "RADAR"


class ProviderTypeEnum(str, Enum):
    CONFIGURE = "CONFIGURE"
    FACTS = "FACTS"
    CHECK = "CHECK"
    EXECUTE = "EXECUTE"
    NONE = "NONE"


class CronExecuteTypeEnum(str, Enum):
    CRON = "CRON"
    PERIODIC = "PERIODIC"


class IndexesEnum(str, Enum):
    INTERFACES = "INTERFACES"
    DEVICES = "DEVICES"
    GROUPS = "GROUPS"
    GLOBAL = "GLOBAL"
    CLIENTS = "CLIENTS"
    EXECUTIONS = "EXECUTIONS"
    GLOBALEXECUTIONS = "GLOBALEXECUTIONS"


class RegexTypeEnum(str, Enum):
    SEARCH = "SEARCH"
    MATCH = "MATCH"
    FIND = "FIND"


class OutputSchemaTypeEnum(str, Enum):
    NEOPS_SCHEMAS_V1 = "NEOPS_SCHEMAS_V1"
    NEOPS_SCHEMAS_V2 = "NEOPS_SCHEMAS_V2"


class ProviderSchemaEnum(str, Enum):
    RUN_INPUT = "RUN_INPUT"
    PROVIDER = "PROVIDER"
