"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid components definitions.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT

protolint:disable MAX_LINE_LENGTH
"""

import builtins
import collections.abc
import frequenz.api.common.v1alpha7.metrics.bounds_pb2
import frequenz.api.common.v1alpha7.metrics.metrics_pb2
import frequenz.api.common.v1alpha7.microgrid.lifetime_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ElectricalComponentCategory:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ElectricalComponentCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElectricalComponentCategory.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELECTRICAL_COMPONENT_CATEGORY_UNSPECIFIED: _ElectricalComponentCategory.ValueType  # 0
    """The component category is unspecified. This should not be used."""
    ELECTRICAL_COMPONENT_CATEGORY_GRID_CONNECTION_POINT: _ElectricalComponentCategory.ValueType  # 1
    """The point where the local microgrid is connected to the grid.

    Represents the interface between a local microgrid and the public
    electricity grid, typically used for metering, protection, and isolation.
    This category itself is not remotely controllable, but can be associated
    with other devices (inverters, relays, etc.) that can be controlled to
    affect the grid connection point.
    """
    ELECTRICAL_COMPONENT_CATEGORY_METER: _ElectricalComponentCategory.ValueType  # 2
    """A meter for measuring electrical parameters.

    Measures electrical parameters such as voltage, current, power, energy,
    and frequency.
    Meters typically cannot be controlled remotely, but they can provide
    telemetry data.
    Examples: Janitza UMG 604, Janitza B24, ABB B24, etc.
    """
    ELECTRICAL_COMPONENT_CATEGORY_INVERTER: _ElectricalComponentCategory.ValueType  # 3
    """An inverter.

    Converts DC to AC power and vice-versa, enabling integration of batteries,
    PV arrays, or other renewables.
    Remotely controllable via digital protocols for power setpoints, modes,
    and status.
    Examples: SMA Sunny Tripower, Kaco Blueplanet, Refu RefuStore88k, etc.
    """
    ELECTRICAL_COMPONENT_CATEGORY_CONVERTER: _ElectricalComponentCategory.ValueType  # 4
    """A DC-DC converter.

    Converts electrical energy between different DC voltage levels.
    Typically remotely controllable for voltage, current, or mode adjustment.
    Examples: Victron Orion, Delta Electronics DC-DC converters, TDK Lambda.
    """
    ELECTRICAL_COMPONENT_CATEGORY_BATTERY: _ElectricalComponentCategory.ValueType  # 5
    """A battery energy storage system.

    Stores electrical energy and can be dispatched for load balancing, backup,
    or arbitrage.
    Remotely controllable for charging, discharging, and operational mode.
    Examples: Tesla Megapack, LG Chem RESU, etc.
    """
    ELECTRICAL_COMPONENT_CATEGORY_EV_CHARGER: _ElectricalComponentCategory.ValueType  # 6
    """An EV charger.

    Provides controlled charging for electric vehicles.
    Remotely controllable for starting/stopping charging and setting power
    limits.
    Examples: Alfen NG 9xx, KEBA KeContact P30, Siemens VersiCharge, etc.
    """
    ELECTRICAL_COMPONENT_CATEGORY_BREAKER: _ElectricalComponentCategory.ValueType  # 7
    """A circuit breaker.

    Provides protection and switching by disconnecting circuits as needed.
    Remotely controllable for opening/closing and status monitoring.
    Examples: Finder Series 62, Phoenix Contact PLC-Interface, Siemens Sirius,
    Schneider Electric Zelio, etc.
    """
    ELECTRICAL_COMPONENT_CATEGORY_PRECHARGER: _ElectricalComponentCategory.ValueType  # 8
    """A pre-charge module.

    Ramps up DC voltage gradually to protect components during power-up.
    Remotely controllable to initiate or manage the pre-charge sequence.
    Examples: Precharge modules from Bender, Precharge controllers by Elcon,
    custom PLC-controlled circuits.
    """
    ELECTRICAL_COMPONENT_CATEGORY_CHP: _ElectricalComponentCategory.ValueType  # 9
    """A combined heat and power (CHP) plant.

    Generates electricity and useful heat from a single energy source.
    Remotely controllable for start/stop commands and setpoint adjustments.
    Examples: 2G Agenitor, Viessmann Vitobloc, TEDOM Micro series, Bosch CHP.
    """
    ELECTRICAL_COMPONENT_CATEGORY_ELECTROLYZER: _ElectricalComponentCategory.ValueType  # 10
    """An electrolyzer.

    Converts electrical energy into hydrogen and oxygen by electrolyzing water.
    Remotely controllable for operating mode and production rate.
    Examples: Siemens Silyzer, Nel Hydrogen PEM, ITM Power electrolyzers.
    """
    ELECTRICAL_COMPONENT_CATEGORY_VOLTAGE_TRANSFORMER: _ElectricalComponentCategory.ValueType  # 11
    """A voltage transformer.

    Voltage transformers are used to step up or step down the voltage, keeping
    the power somewhat constant by increasing or decreasing the current.
    If voltage is stepped up, current is stepped down, and vice versa.
    Note that voltage transformers have efficiency losses, so the output power
    is always less than the input power.
    """
    ELECTRICAL_COMPONENT_CATEGORY_HVAC: _ElectricalComponentCategory.ValueType  # 12
    """An HVAC system (Heating, Ventilation, and Air Conditioning).

    Manages indoor climate by controlling heating, cooling, and ventilation.
    Remotely controllable for setpoint and operational scheduling.
    Examples: Siemens Desigo, Trane Voyager, Daikin VRV, Schneider Electric
    SmartStruxure.
    """
    ELECTRICAL_COMPONENT_CATEGORY_PLC: _ElectricalComponentCategory.ValueType  # 13
    """An industrial controller or PLC (Programmable Logic Controller).

    Automates industrial processes, load shedding, and custom logic.
    Remotely controllable for process execution and telemetry via digital
    protocols.
    Examples: Siemens SIMATIC S7-1200/1500, Beckhoff CX-series IPC, Schneider
    M340, Wago PFC 200.
    """
    ELECTRICAL_COMPONENT_CATEGORY_CRYPTO_MINER: _ElectricalComponentCategory.ValueType  # 14
    """A crypto miner.

    Consumes power for blockchain computations and can be remotely curtailed or
    powered down.
    Examples: Bitmain Antminer, MicroBT WhatsMiner, Canaan AvalonMiner.
    """
    ELECTRICAL_COMPONENT_CATEGORY_STATIC_TRANSFER_SWITCH: _ElectricalComponentCategory.ValueType  # 15
    """A static transfer switch (STS).

    Switches between multiple power sources with minimal transfer time to
    maintain continuity.
    Remotely controllable for source selection and transfer commands.
    Examples: Socomec ATyS, ABB TruONE, Eaton Automatic Transfer Switch, ASCO
    Series 7000.
    """
    ELECTRICAL_COMPONENT_CATEGORY_UNINTERRUPTIBLE_POWER_SUPPLY: _ElectricalComponentCategory.ValueType  # 16
    """An uninterruptible power supply (UPS).

    Provides immediate backup power with battery and inverter integration.
    Remotely controllable for status, diagnostics, and sometimes operational
    commands.
    Examples: APC Symmetra PX, Eaton 93PM, Schneider Electric Galaxy, Vertiv
    Liebert EXL.
    """
    ELECTRICAL_COMPONENT_CATEGORY_CAPACITOR_BANK: _ElectricalComponentCategory.ValueType  # 17
    """A capacitor bank for power factor correction.

    Improves power quality by compensating reactive power.
    Remotely controllable for switching capacitors in or out.
    Examples: Siemens 3FK, ABB Capacitor Banks, Schneider Electric VarSet,
    Eaton PowerXL.
    """
    ELECTRICAL_COMPONENT_CATEGORY_WIND_TURBINE: _ElectricalComponentCategory.ValueType  # 18
    """A wind turbine.

    Converts wind energy into electricity.
    Remotely controllable (in most commercial systems) for start/stop, output
    regulation, and status.
    Examples: Siemens Gamesa SG, Vestas V series, GE Cypress, Nordex Delta.
    """

class ElectricalComponentCategory(_ElectricalComponentCategory, metaclass=_ElectricalComponentCategoryEnumTypeWrapper):
    """Enumerated electrical component categories.

    This enum lists key microgrid components, most of which are typically capable
    of being remotely controlled via digital interfaces (e.g., Modbus, MQTT,
    OPC-UA).
    """

ELECTRICAL_COMPONENT_CATEGORY_UNSPECIFIED: ElectricalComponentCategory.ValueType  # 0
"""The component category is unspecified. This should not be used."""
ELECTRICAL_COMPONENT_CATEGORY_GRID_CONNECTION_POINT: ElectricalComponentCategory.ValueType  # 1
"""The point where the local microgrid is connected to the grid.

Represents the interface between a local microgrid and the public
electricity grid, typically used for metering, protection, and isolation.
This category itself is not remotely controllable, but can be associated
with other devices (inverters, relays, etc.) that can be controlled to
affect the grid connection point.
"""
ELECTRICAL_COMPONENT_CATEGORY_METER: ElectricalComponentCategory.ValueType  # 2
"""A meter for measuring electrical parameters.

Measures electrical parameters such as voltage, current, power, energy,
and frequency.
Meters typically cannot be controlled remotely, but they can provide
telemetry data.
Examples: Janitza UMG 604, Janitza B24, ABB B24, etc.
"""
ELECTRICAL_COMPONENT_CATEGORY_INVERTER: ElectricalComponentCategory.ValueType  # 3
"""An inverter.

Converts DC to AC power and vice-versa, enabling integration of batteries,
PV arrays, or other renewables.
Remotely controllable via digital protocols for power setpoints, modes,
and status.
Examples: SMA Sunny Tripower, Kaco Blueplanet, Refu RefuStore88k, etc.
"""
ELECTRICAL_COMPONENT_CATEGORY_CONVERTER: ElectricalComponentCategory.ValueType  # 4
"""A DC-DC converter.

Converts electrical energy between different DC voltage levels.
Typically remotely controllable for voltage, current, or mode adjustment.
Examples: Victron Orion, Delta Electronics DC-DC converters, TDK Lambda.
"""
ELECTRICAL_COMPONENT_CATEGORY_BATTERY: ElectricalComponentCategory.ValueType  # 5
"""A battery energy storage system.

Stores electrical energy and can be dispatched for load balancing, backup,
or arbitrage.
Remotely controllable for charging, discharging, and operational mode.
Examples: Tesla Megapack, LG Chem RESU, etc.
"""
ELECTRICAL_COMPONENT_CATEGORY_EV_CHARGER: ElectricalComponentCategory.ValueType  # 6
"""An EV charger.

Provides controlled charging for electric vehicles.
Remotely controllable for starting/stopping charging and setting power
limits.
Examples: Alfen NG 9xx, KEBA KeContact P30, Siemens VersiCharge, etc.
"""
ELECTRICAL_COMPONENT_CATEGORY_BREAKER: ElectricalComponentCategory.ValueType  # 7
"""A circuit breaker.

Provides protection and switching by disconnecting circuits as needed.
Remotely controllable for opening/closing and status monitoring.
Examples: Finder Series 62, Phoenix Contact PLC-Interface, Siemens Sirius,
Schneider Electric Zelio, etc.
"""
ELECTRICAL_COMPONENT_CATEGORY_PRECHARGER: ElectricalComponentCategory.ValueType  # 8
"""A pre-charge module.

Ramps up DC voltage gradually to protect components during power-up.
Remotely controllable to initiate or manage the pre-charge sequence.
Examples: Precharge modules from Bender, Precharge controllers by Elcon,
custom PLC-controlled circuits.
"""
ELECTRICAL_COMPONENT_CATEGORY_CHP: ElectricalComponentCategory.ValueType  # 9
"""A combined heat and power (CHP) plant.

Generates electricity and useful heat from a single energy source.
Remotely controllable for start/stop commands and setpoint adjustments.
Examples: 2G Agenitor, Viessmann Vitobloc, TEDOM Micro series, Bosch CHP.
"""
ELECTRICAL_COMPONENT_CATEGORY_ELECTROLYZER: ElectricalComponentCategory.ValueType  # 10
"""An electrolyzer.

Converts electrical energy into hydrogen and oxygen by electrolyzing water.
Remotely controllable for operating mode and production rate.
Examples: Siemens Silyzer, Nel Hydrogen PEM, ITM Power electrolyzers.
"""
ELECTRICAL_COMPONENT_CATEGORY_VOLTAGE_TRANSFORMER: ElectricalComponentCategory.ValueType  # 11
"""A voltage transformer.

Voltage transformers are used to step up or step down the voltage, keeping
the power somewhat constant by increasing or decreasing the current.
If voltage is stepped up, current is stepped down, and vice versa.
Note that voltage transformers have efficiency losses, so the output power
is always less than the input power.
"""
ELECTRICAL_COMPONENT_CATEGORY_HVAC: ElectricalComponentCategory.ValueType  # 12
"""An HVAC system (Heating, Ventilation, and Air Conditioning).

Manages indoor climate by controlling heating, cooling, and ventilation.
Remotely controllable for setpoint and operational scheduling.
Examples: Siemens Desigo, Trane Voyager, Daikin VRV, Schneider Electric
SmartStruxure.
"""
ELECTRICAL_COMPONENT_CATEGORY_PLC: ElectricalComponentCategory.ValueType  # 13
"""An industrial controller or PLC (Programmable Logic Controller).

Automates industrial processes, load shedding, and custom logic.
Remotely controllable for process execution and telemetry via digital
protocols.
Examples: Siemens SIMATIC S7-1200/1500, Beckhoff CX-series IPC, Schneider
M340, Wago PFC 200.
"""
ELECTRICAL_COMPONENT_CATEGORY_CRYPTO_MINER: ElectricalComponentCategory.ValueType  # 14
"""A crypto miner.

Consumes power for blockchain computations and can be remotely curtailed or
powered down.
Examples: Bitmain Antminer, MicroBT WhatsMiner, Canaan AvalonMiner.
"""
ELECTRICAL_COMPONENT_CATEGORY_STATIC_TRANSFER_SWITCH: ElectricalComponentCategory.ValueType  # 15
"""A static transfer switch (STS).

Switches between multiple power sources with minimal transfer time to
maintain continuity.
Remotely controllable for source selection and transfer commands.
Examples: Socomec ATyS, ABB TruONE, Eaton Automatic Transfer Switch, ASCO
Series 7000.
"""
ELECTRICAL_COMPONENT_CATEGORY_UNINTERRUPTIBLE_POWER_SUPPLY: ElectricalComponentCategory.ValueType  # 16
"""An uninterruptible power supply (UPS).

Provides immediate backup power with battery and inverter integration.
Remotely controllable for status, diagnostics, and sometimes operational
commands.
Examples: APC Symmetra PX, Eaton 93PM, Schneider Electric Galaxy, Vertiv
Liebert EXL.
"""
ELECTRICAL_COMPONENT_CATEGORY_CAPACITOR_BANK: ElectricalComponentCategory.ValueType  # 17
"""A capacitor bank for power factor correction.

Improves power quality by compensating reactive power.
Remotely controllable for switching capacitors in or out.
Examples: Siemens 3FK, ABB Capacitor Banks, Schneider Electric VarSet,
Eaton PowerXL.
"""
ELECTRICAL_COMPONENT_CATEGORY_WIND_TURBINE: ElectricalComponentCategory.ValueType  # 18
"""A wind turbine.

Converts wind energy into electricity.
Remotely controllable (in most commercial systems) for start/stop, output
regulation, and status.
Examples: Siemens Gamesa SG, Vestas V series, GE Cypress, Nordex Delta.
"""
global___ElectricalComponentCategory = ElectricalComponentCategory

class _ElectricalComponentStateCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ElectricalComponentStateCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElectricalComponentStateCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELECTRICAL_COMPONENT_STATE_CODE_UNSPECIFIED: _ElectricalComponentStateCode.ValueType  # 0
    """Default value when the component state is not explicitly set.
    This is the zero value of the enum.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_UNKNOWN: _ElectricalComponentStateCode.ValueType  # 1
    """State when the component is in an unknown or undefined condition.
    This is used when the sender is unable to classify the component into any
    other state.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_UNAVAILABLE: _ElectricalComponentStateCode.ValueType  # 2
    """State when the component is temporarily unavailable for operation."""
    ELECTRICAL_COMPONENT_STATE_CODE_SWITCHING_OFF: _ElectricalComponentStateCode.ValueType  # 3
    """State when the component is in the process of switching off."""
    ELECTRICAL_COMPONENT_STATE_CODE_OFF: _ElectricalComponentStateCode.ValueType  # 4
    """State when the component has successfully switched off."""
    ELECTRICAL_COMPONENT_STATE_CODE_SWITCHING_ON: _ElectricalComponentStateCode.ValueType  # 5
    """State when the component is in the process of switching on from an off
    state.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_STANDBY: _ElectricalComponentStateCode.ValueType  # 6
    """State when the component is in standby mode, and not immediately ready for
    immediate operations.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_READY: _ElectricalComponentStateCode.ValueType  # 7
    """State when the component is fully operational and ready for use."""
    ELECTRICAL_COMPONENT_STATE_CODE_CHARGING: _ElectricalComponentStateCode.ValueType  # 8
    """State when the component is actively consuming energy."""
    ELECTRICAL_COMPONENT_STATE_CODE_DISCHARGING: _ElectricalComponentStateCode.ValueType  # 9
    """State when the component is actively producing or releasing energy."""
    ELECTRICAL_COMPONENT_STATE_CODE_ERROR: _ElectricalComponentStateCode.ValueType  # 10
    """State when the component is in an error state and may need attention."""
    ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_UNPLUGGED: _ElectricalComponentStateCode.ValueType  # 20
    """The Electric Vehicle (EV) charging cable is unplugged from the charging
    station.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_STATION: _ElectricalComponentStateCode.ValueType  # 21
    """The EV charging cable is plugged into the charging station."""
    ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_EV: _ElectricalComponentStateCode.ValueType  # 22
    """The EV charging cable is plugged into the vehicle."""
    ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_STATION: _ElectricalComponentStateCode.ValueType  # 23
    """The EV charging cable is locked at the charging station end, indicating
    readiness for charging.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_EV: _ElectricalComponentStateCode.ValueType  # 24
    """The EV charging cable is locked at the vehicle end, indicating that
    charging is active.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_RELAY_OPEN: _ElectricalComponentStateCode.ValueType  # 30
    """The relay is in an open state, meaning no current can flow through."""
    ELECTRICAL_COMPONENT_STATE_CODE_RELAY_CLOSED: _ElectricalComponentStateCode.ValueType  # 31
    """The relay is in a closed state, allowing current to flow."""
    ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_OPEN: _ElectricalComponentStateCode.ValueType  # 40
    """The precharger circuit is open, meaning it's not currently active."""
    ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_PRECHARGING: _ElectricalComponentStateCode.ValueType  # 41
    """The precharger is in a precharging state, preparing the main circuit for
    activation.
    """
    ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_CLOSED: _ElectricalComponentStateCode.ValueType  # 42
    """The precharger circuit is closed, allowing full current to flow to the main
    circuit.
    """

class ElectricalComponentStateCode(_ElectricalComponentStateCode, metaclass=_ElectricalComponentStateCodeEnumTypeWrapper):
    """Enum to represent the various states that a component can be in.
    This enum is unified across all component categories for consistency.
    """

ELECTRICAL_COMPONENT_STATE_CODE_UNSPECIFIED: ElectricalComponentStateCode.ValueType  # 0
"""Default value when the component state is not explicitly set.
This is the zero value of the enum.
"""
ELECTRICAL_COMPONENT_STATE_CODE_UNKNOWN: ElectricalComponentStateCode.ValueType  # 1
"""State when the component is in an unknown or undefined condition.
This is used when the sender is unable to classify the component into any
other state.
"""
ELECTRICAL_COMPONENT_STATE_CODE_UNAVAILABLE: ElectricalComponentStateCode.ValueType  # 2
"""State when the component is temporarily unavailable for operation."""
ELECTRICAL_COMPONENT_STATE_CODE_SWITCHING_OFF: ElectricalComponentStateCode.ValueType  # 3
"""State when the component is in the process of switching off."""
ELECTRICAL_COMPONENT_STATE_CODE_OFF: ElectricalComponentStateCode.ValueType  # 4
"""State when the component has successfully switched off."""
ELECTRICAL_COMPONENT_STATE_CODE_SWITCHING_ON: ElectricalComponentStateCode.ValueType  # 5
"""State when the component is in the process of switching on from an off
state.
"""
ELECTRICAL_COMPONENT_STATE_CODE_STANDBY: ElectricalComponentStateCode.ValueType  # 6
"""State when the component is in standby mode, and not immediately ready for
immediate operations.
"""
ELECTRICAL_COMPONENT_STATE_CODE_READY: ElectricalComponentStateCode.ValueType  # 7
"""State when the component is fully operational and ready for use."""
ELECTRICAL_COMPONENT_STATE_CODE_CHARGING: ElectricalComponentStateCode.ValueType  # 8
"""State when the component is actively consuming energy."""
ELECTRICAL_COMPONENT_STATE_CODE_DISCHARGING: ElectricalComponentStateCode.ValueType  # 9
"""State when the component is actively producing or releasing energy."""
ELECTRICAL_COMPONENT_STATE_CODE_ERROR: ElectricalComponentStateCode.ValueType  # 10
"""State when the component is in an error state and may need attention."""
ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_UNPLUGGED: ElectricalComponentStateCode.ValueType  # 20
"""The Electric Vehicle (EV) charging cable is unplugged from the charging
station.
"""
ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_STATION: ElectricalComponentStateCode.ValueType  # 21
"""The EV charging cable is plugged into the charging station."""
ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_EV: ElectricalComponentStateCode.ValueType  # 22
"""The EV charging cable is plugged into the vehicle."""
ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_STATION: ElectricalComponentStateCode.ValueType  # 23
"""The EV charging cable is locked at the charging station end, indicating
readiness for charging.
"""
ELECTRICAL_COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_EV: ElectricalComponentStateCode.ValueType  # 24
"""The EV charging cable is locked at the vehicle end, indicating that
charging is active.
"""
ELECTRICAL_COMPONENT_STATE_CODE_RELAY_OPEN: ElectricalComponentStateCode.ValueType  # 30
"""The relay is in an open state, meaning no current can flow through."""
ELECTRICAL_COMPONENT_STATE_CODE_RELAY_CLOSED: ElectricalComponentStateCode.ValueType  # 31
"""The relay is in a closed state, allowing current to flow."""
ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_OPEN: ElectricalComponentStateCode.ValueType  # 40
"""The precharger circuit is open, meaning it's not currently active."""
ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_PRECHARGING: ElectricalComponentStateCode.ValueType  # 41
"""The precharger is in a precharging state, preparing the main circuit for
activation.
"""
ELECTRICAL_COMPONENT_STATE_CODE_PRECHARGER_CLOSED: ElectricalComponentStateCode.ValueType  # 42
"""The precharger circuit is closed, allowing full current to flow to the main
circuit.
"""
global___ElectricalComponentStateCode = ElectricalComponentStateCode

class _ElectricalComponentDiagnosticCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ElectricalComponentDiagnosticCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ElectricalComponentDiagnosticCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNSPECIFIED: _ElectricalComponentDiagnosticCode.ValueType  # 0
    """Default value. No specific error is specified."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNKNOWN: _ElectricalComponentDiagnosticCode.ValueType  # 1
    """The component is reporting an unknown or an undefined error, and the sender
    cannot parse the component error to any of the variants below.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_SWITCH_ON_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 2
    """The component could not be switched on."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNDERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 3
    """The component is operating under the minimum rated voltage."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 4
    """The component is operating over the maximum rated voltage."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT: _ElectricalComponentDiagnosticCode.ValueType  # 5
    """The component is drawing more current than the maximum rated value."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT_CHARGING: _ElectricalComponentDiagnosticCode.ValueType  # 6
    """The component's consumption current is over the maximum rated value during
    charging.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT_DISCHARGING: _ElectricalComponentDiagnosticCode.ValueType  # 7
    """The component's production current is over the maximum rated value during
    discharging.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERTEMPERATURE: _ElectricalComponentDiagnosticCode.ValueType  # 8
    """The component is operating over the maximum rated temperature."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNDERTEMPERATURE: _ElectricalComponentDiagnosticCode.ValueType  # 9
    """The component is operating under the minimum rated temperature."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HIGH_HUMIDITY: _ElectricalComponentDiagnosticCode.ValueType  # 10
    """The component is exposed to high humidity levels over the maximum rated
    value.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FUSE_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 11
    """The component's fuse has blown."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PRECHARGE_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 12
    """The component's precharge unit has failed."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PLAUSIBILITY_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 13
    """There are plausibility issues within the component, causing its internal
    sanity checks to fail.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FAULT_CURRENT: _ElectricalComponentDiagnosticCode.ValueType  # 14
    """A fault current has been detected in the component."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_SHORT_CIRCUIT: _ElectricalComponentDiagnosticCode.ValueType  # 15
    """A short circuit has been detected in the component."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_CONFIG_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 16
    """The component has been configured incorrectly."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_ILLEGAL_COMPONENT_STATE_CODE_REQUESTED: _ElectricalComponentDiagnosticCode.ValueType  # 17
    """A illegal state has been requested for the component."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HARDWARE_INACCESSIBLE: _ElectricalComponentDiagnosticCode.ValueType  # 18
    """The hardware of the component is inaccessible."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INTERNAL: _ElectricalComponentDiagnosticCode.ValueType  # 19
    """There is an internal error within the component."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNAUTHORIZED: _ElectricalComponentDiagnosticCode.ValueType  # 20
    """The component is unauthorized to perform the last requested action."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EXCESS_LEAKAGE_CURRENT: _ElectricalComponentDiagnosticCode.ValueType  # 21
    """There is excessive leakage current in the component.
    The threshold for excessive leakage current is defined by the component
    manufacturer.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_LOW_SYSTEM_INSULATION_RESISTANCE: _ElectricalComponentDiagnosticCode.ValueType  # 22
    """The component is inoperable due to the insulation resistance being too low.
    The threshold for low insulation resistance is defined by the component
    manufacturer, or can be configured by the user in the component.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GROUND_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 23
    """The component is inoperable due to the faulty grounding."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_ARC_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 24
    """The component is inoperable due to arcing."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FAN_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 25
    """The component is inoperable due to its fan being faulty."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HARDWARE_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 26
    """The component is inoperable due to the component's hardware being faulty."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PROTECTIVE_SHUTDOWN: _ElectricalComponentDiagnosticCode.ValueType  # 27
    """The component is inoperable due to its hardware being faulty."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_OVERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 30
    """The component is inoperable due to the grid voltage being too high."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_UNDERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 31
    """The component is inoperable due to the grid voltage being too low."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_OVERFREQUENCY: _ElectricalComponentDiagnosticCode.ValueType  # 32
    """The component is inoperable due to the grid frequency being too high."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_UNDERFREQUENCY: _ElectricalComponentDiagnosticCode.ValueType  # 33
    """The component is inoperable due to the grid frequency being too low."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_DISCONNECTED: _ElectricalComponentDiagnosticCode.ValueType  # 34
    """The component is inoperable due to the grid being disconnected, despite
    the AC relay being closed.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_VOLTAGE_IMBALANCE: _ElectricalComponentDiagnosticCode.ValueType  # 35
    """The component is inoperable due to the grid voltage being imbalanced.
    This happens when the voltage of one or more phases is outside the
    acceptable range.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_ABNORMAL: _ElectricalComponentDiagnosticCode.ValueType  # 36
    """The component is inoperable due to the grid being in a non-standard
    configuration.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_UNEXPECTED_PILOT_FAILURE: _ElectricalComponentDiagnosticCode.ValueType  # 40
    """There is an unexpected pilot failure in an electric vehicle (EV) component."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_STATION: _ElectricalComponentDiagnosticCode.ValueType  # 41
    """The electric vehicle (EV) cable was abruptly unplugged from the charging
    station.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_EV: _ElectricalComponentDiagnosticCode.ValueType  # 42
    """The electric vehicle (EV) cable was abruptly unplugged from the vehicle."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_LOCK_FAILED: _ElectricalComponentDiagnosticCode.ValueType  # 43
    """There is a cable lock failure with the electric vehicle (EV)."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_INVALID: _ElectricalComponentDiagnosticCode.ValueType  # 44
    """The electric vehicle (EV) charging cable is invalid."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CONSUMER_INCOMPATIBLE: _ElectricalComponentDiagnosticCode.ValueType  # 45
    """The incompatible electric vehicle (EV) charging plug is invalid."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_IMBALANCE: _ElectricalComponentDiagnosticCode.ValueType  # 50
    """There is a battery system imbalance."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_LOW_SOH: _ElectricalComponentDiagnosticCode.ValueType  # 51
    """The battery has a low state of health (SOH)."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_BLOCK_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 52
    """At least one of the battery blocks is in an error state."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_CONTROLLER_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 53
    """The battery controller is in an error state."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_RELAY_ERROR: _ElectricalComponentDiagnosticCode.ValueType  # 54
    """The battery's DC contactor or relay is in an error state."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_CALIBRATION_NEEDED: _ElectricalComponentDiagnosticCode.ValueType  # 56
    """The battery needs calibration."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_RELAY_CYCLE_LIMIT_REACHED: _ElectricalComponentDiagnosticCode.ValueType  # 60
    """The battery's DC contactor or relays have reached end of life."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_REVERSAL_POLARITY: _ElectricalComponentDiagnosticCode.ValueType  # 70
    """The PV panels have been connected with reversed polarity."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_UNDERPERFORMANCE: _ElectricalComponentDiagnosticCode.ValueType  # 71
    """The PV panels are underperforming."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 72
    """The PV panels have a fault.
    The component is not able to determine or specify the fault.
    """
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_REVERSE_CURRENT: _ElectricalComponentDiagnosticCode.ValueType  # 73
    """The PV panels are receiving a reverse current."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_GROUND_FAULT: _ElectricalComponentDiagnosticCode.ValueType  # 74
    """The PV panels are not grounded properly."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INVERTER_DC_UNDERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 80
    """The inverter is inoperable due to the DC voltage being too low."""
    ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INVERTER_DC_OVERVOLTAGE: _ElectricalComponentDiagnosticCode.ValueType  # 81
    """The inverter is inoperable due to the DC voltage being too high."""

class ElectricalComponentDiagnosticCode(_ElectricalComponentDiagnosticCode, metaclass=_ElectricalComponentDiagnosticCodeEnumTypeWrapper):
    """A representation of all possible diagnostic codes that can occur for
    electrical component, across all their categories. These diagnostic codes
    can be used to refer to warnings or errors that are reported by the
    component.
    """

ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNSPECIFIED: ElectricalComponentDiagnosticCode.ValueType  # 0
"""Default value. No specific error is specified."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNKNOWN: ElectricalComponentDiagnosticCode.ValueType  # 1
"""The component is reporting an unknown or an undefined error, and the sender
cannot parse the component error to any of the variants below.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_SWITCH_ON_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 2
"""The component could not be switched on."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNDERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 3
"""The component is operating under the minimum rated voltage."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 4
"""The component is operating over the maximum rated voltage."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT: ElectricalComponentDiagnosticCode.ValueType  # 5
"""The component is drawing more current than the maximum rated value."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT_CHARGING: ElectricalComponentDiagnosticCode.ValueType  # 6
"""The component's consumption current is over the maximum rated value during
charging.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERCURRENT_DISCHARGING: ElectricalComponentDiagnosticCode.ValueType  # 7
"""The component's production current is over the maximum rated value during
discharging.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERTEMPERATURE: ElectricalComponentDiagnosticCode.ValueType  # 8
"""The component is operating over the maximum rated temperature."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNDERTEMPERATURE: ElectricalComponentDiagnosticCode.ValueType  # 9
"""The component is operating under the minimum rated temperature."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HIGH_HUMIDITY: ElectricalComponentDiagnosticCode.ValueType  # 10
"""The component is exposed to high humidity levels over the maximum rated
value.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FUSE_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 11
"""The component's fuse has blown."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PRECHARGE_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 12
"""The component's precharge unit has failed."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PLAUSIBILITY_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 13
"""There are plausibility issues within the component, causing its internal
sanity checks to fail.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FAULT_CURRENT: ElectricalComponentDiagnosticCode.ValueType  # 14
"""A fault current has been detected in the component."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_SHORT_CIRCUIT: ElectricalComponentDiagnosticCode.ValueType  # 15
"""A short circuit has been detected in the component."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_CONFIG_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 16
"""The component has been configured incorrectly."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_ILLEGAL_COMPONENT_STATE_CODE_REQUESTED: ElectricalComponentDiagnosticCode.ValueType  # 17
"""A illegal state has been requested for the component."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HARDWARE_INACCESSIBLE: ElectricalComponentDiagnosticCode.ValueType  # 18
"""The hardware of the component is inaccessible."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INTERNAL: ElectricalComponentDiagnosticCode.ValueType  # 19
"""There is an internal error within the component."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_UNAUTHORIZED: ElectricalComponentDiagnosticCode.ValueType  # 20
"""The component is unauthorized to perform the last requested action."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EXCESS_LEAKAGE_CURRENT: ElectricalComponentDiagnosticCode.ValueType  # 21
"""There is excessive leakage current in the component.
The threshold for excessive leakage current is defined by the component
manufacturer.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_LOW_SYSTEM_INSULATION_RESISTANCE: ElectricalComponentDiagnosticCode.ValueType  # 22
"""The component is inoperable due to the insulation resistance being too low.
The threshold for low insulation resistance is defined by the component
manufacturer, or can be configured by the user in the component.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GROUND_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 23
"""The component is inoperable due to the faulty grounding."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_ARC_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 24
"""The component is inoperable due to arcing."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_FAN_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 25
"""The component is inoperable due to its fan being faulty."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_HARDWARE_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 26
"""The component is inoperable due to the component's hardware being faulty."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PROTECTIVE_SHUTDOWN: ElectricalComponentDiagnosticCode.ValueType  # 27
"""The component is inoperable due to its hardware being faulty."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_OVERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 30
"""The component is inoperable due to the grid voltage being too high."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_UNDERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 31
"""The component is inoperable due to the grid voltage being too low."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_OVERFREQUENCY: ElectricalComponentDiagnosticCode.ValueType  # 32
"""The component is inoperable due to the grid frequency being too high."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_UNDERFREQUENCY: ElectricalComponentDiagnosticCode.ValueType  # 33
"""The component is inoperable due to the grid frequency being too low."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_DISCONNECTED: ElectricalComponentDiagnosticCode.ValueType  # 34
"""The component is inoperable due to the grid being disconnected, despite
the AC relay being closed.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_VOLTAGE_IMBALANCE: ElectricalComponentDiagnosticCode.ValueType  # 35
"""The component is inoperable due to the grid voltage being imbalanced.
This happens when the voltage of one or more phases is outside the
acceptable range.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_GRID_ABNORMAL: ElectricalComponentDiagnosticCode.ValueType  # 36
"""The component is inoperable due to the grid being in a non-standard
configuration.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_UNEXPECTED_PILOT_FAILURE: ElectricalComponentDiagnosticCode.ValueType  # 40
"""There is an unexpected pilot failure in an electric vehicle (EV) component."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_STATION: ElectricalComponentDiagnosticCode.ValueType  # 41
"""The electric vehicle (EV) cable was abruptly unplugged from the charging
station.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_EV: ElectricalComponentDiagnosticCode.ValueType  # 42
"""The electric vehicle (EV) cable was abruptly unplugged from the vehicle."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_LOCK_FAILED: ElectricalComponentDiagnosticCode.ValueType  # 43
"""There is a cable lock failure with the electric vehicle (EV)."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CHARGING_CABLE_INVALID: ElectricalComponentDiagnosticCode.ValueType  # 44
"""The electric vehicle (EV) charging cable is invalid."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_EV_CONSUMER_INCOMPATIBLE: ElectricalComponentDiagnosticCode.ValueType  # 45
"""The incompatible electric vehicle (EV) charging plug is invalid."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_IMBALANCE: ElectricalComponentDiagnosticCode.ValueType  # 50
"""There is a battery system imbalance."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_LOW_SOH: ElectricalComponentDiagnosticCode.ValueType  # 51
"""The battery has a low state of health (SOH)."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_BLOCK_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 52
"""At least one of the battery blocks is in an error state."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_CONTROLLER_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 53
"""The battery controller is in an error state."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_RELAY_ERROR: ElectricalComponentDiagnosticCode.ValueType  # 54
"""The battery's DC contactor or relay is in an error state."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_BATTERY_CALIBRATION_NEEDED: ElectricalComponentDiagnosticCode.ValueType  # 56
"""The battery needs calibration."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_RELAY_CYCLE_LIMIT_REACHED: ElectricalComponentDiagnosticCode.ValueType  # 60
"""The battery's DC contactor or relays have reached end of life."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_REVERSAL_POLARITY: ElectricalComponentDiagnosticCode.ValueType  # 70
"""The PV panels have been connected with reversed polarity."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_UNDERPERFORMANCE: ElectricalComponentDiagnosticCode.ValueType  # 71
"""The PV panels are underperforming."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 72
"""The PV panels have a fault.
The component is not able to determine or specify the fault.
"""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_REVERSE_CURRENT: ElectricalComponentDiagnosticCode.ValueType  # 73
"""The PV panels are receiving a reverse current."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_PV_GROUND_FAULT: ElectricalComponentDiagnosticCode.ValueType  # 74
"""The PV panels are not grounded properly."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INVERTER_DC_UNDERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 80
"""The inverter is inoperable due to the DC voltage being too low."""
ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_INVERTER_DC_OVERVOLTAGE: ElectricalComponentDiagnosticCode.ValueType  # 81
"""The inverter is inoperable due to the DC voltage being too high."""
global___ElectricalComponentDiagnosticCode = ElectricalComponentDiagnosticCode

class _BatteryType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BatteryTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BatteryType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BATTERY_TYPE_UNSPECIFIED: _BatteryType.ValueType  # 0
    """Unspecified."""
    BATTERY_TYPE_LI_ION: _BatteryType.ValueType  # 1
    """Li-ion batteries."""
    BATTERY_TYPE_NA_ION: _BatteryType.ValueType  # 2
    """Sodium-ion batteries"""

class BatteryType(_BatteryType, metaclass=_BatteryTypeEnumTypeWrapper):
    """Enumerated battery types."""

BATTERY_TYPE_UNSPECIFIED: BatteryType.ValueType  # 0
"""Unspecified."""
BATTERY_TYPE_LI_ION: BatteryType.ValueType  # 1
"""Li-ion batteries."""
BATTERY_TYPE_NA_ION: BatteryType.ValueType  # 2
"""Sodium-ion batteries"""
global___BatteryType = BatteryType

class _EvChargerType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _EvChargerTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EvChargerType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EV_CHARGER_TYPE_UNSPECIFIED: _EvChargerType.ValueType  # 0
    """Default type."""
    EV_CHARGER_TYPE_AC: _EvChargerType.ValueType  # 1
    """The EV charging station supports AC charging only."""
    EV_CHARGER_TYPE_DC: _EvChargerType.ValueType  # 2
    """The EV charging station supports DC charging only."""
    EV_CHARGER_TYPE_HYBRID: _EvChargerType.ValueType  # 3
    """The EV charging station supports both AC and DC."""

class EvChargerType(_EvChargerType, metaclass=_EvChargerTypeEnumTypeWrapper):
    """Enumerated EV charger types."""

EV_CHARGER_TYPE_UNSPECIFIED: EvChargerType.ValueType  # 0
"""Default type."""
EV_CHARGER_TYPE_AC: EvChargerType.ValueType  # 1
"""The EV charging station supports AC charging only."""
EV_CHARGER_TYPE_DC: EvChargerType.ValueType  # 2
"""The EV charging station supports DC charging only."""
EV_CHARGER_TYPE_HYBRID: EvChargerType.ValueType  # 3
"""The EV charging station supports both AC and DC."""
global___EvChargerType = EvChargerType

class _InverterType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _InverterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InverterType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INVERTER_TYPE_UNSPECIFIED: _InverterType.ValueType  # 0
    """Unspecified."""
    INVERTER_TYPE_BATTERY: _InverterType.ValueType  # 1
    """Battery inverter."""
    INVERTER_TYPE_PV: _InverterType.ValueType  # 2
    """PV (photovoltaic) inverter."""
    INVERTER_TYPE_HYBRID: _InverterType.ValueType  # 3
    """Hybrid inverter."""
    INVERTER_TYPE_WIND_TURBINE: _InverterType.ValueType  # 4
    """Wind turbine inverter."""

class InverterType(_InverterType, metaclass=_InverterTypeEnumTypeWrapper):
    """Enumerated inverter types."""

INVERTER_TYPE_UNSPECIFIED: InverterType.ValueType  # 0
"""Unspecified."""
INVERTER_TYPE_BATTERY: InverterType.ValueType  # 1
"""Battery inverter."""
INVERTER_TYPE_PV: InverterType.ValueType  # 2
"""PV (photovoltaic) inverter."""
INVERTER_TYPE_HYBRID: InverterType.ValueType  # 3
"""Hybrid inverter."""
INVERTER_TYPE_WIND_TURBINE: InverterType.ValueType  # 4
"""Wind turbine inverter."""
global___InverterType = InverterType

@typing.final
class Battery(google.protobuf.message.Message):
    """A representation of a battery."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: global___BatteryType.ValueType
    """The battery type."""
    def __init__(
        self,
        *,
        type: global___BatteryType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Battery = Battery

@typing.final
class EvCharger(google.protobuf.message.Message):
    """A representation of an EV charging station."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: global___EvChargerType.ValueType
    """The EV charger type."""
    def __init__(
        self,
        *,
        type: global___EvChargerType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___EvCharger = EvCharger

@typing.final
class Fuse(google.protobuf.message.Message):
    """A representation of a fuse.
    The fuse component represents a fuse in the microgrid. It is used to protect
    components from overcurrents.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RATED_CURRENT_FIELD_NUMBER: builtins.int
    rated_current: builtins.int
    """The rated current of the fuse in amperes.
    This is the maximum current that the fuse can withstand for a long time.
    This limit applies to currents both flowing in or out of each of the 3
    phases individually.

    In other words, a current _i_ A at one of the phases of the node must
    comply with the following constraint:
    `-rated_fuse_current <= i <= rated_fuse_current`
    """
    def __init__(
        self,
        *,
        rated_current: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["rated_current", b"rated_current"]) -> None: ...

global___Fuse = Fuse

@typing.final
class GridConnectionPoint(google.protobuf.message.Message):
    """A representation of a grid connection point. This is the point where a
    microgrid connects to the grid.

    The terms "Grid Connection Point" and "Point of Common Coupling" (PCC) are
    commonly used in the context.

    While both terms describe a connection point to the grid, the
    `GridConnectionPoint` is specifically the physical connection point of the
    generation facility to the grid, often concerned with the technical and
    ownership aspects of the connection.

    In contrast, the PCC is is more specific in terms of electrical engineering.
    It refers to the point where a customer's local electrical system (such as a
    microgrid) connects to the utility distribution grid in such a way that it
    can affect other customers’ systems connected to the same network. It is the
    point where the grid and customer's electrical systems interface and where
    issues like power quality and supply regulations are assessed.

    The term `GridConnectionPoint` is used to make it clear that what is referred
    to here is the physical connection point of the local facility to the grid.
    Note that this may also be the PCC in some cases.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RATED_FUSE_CURRENT_FIELD_NUMBER: builtins.int
    rated_fuse_current: builtins.int
    """This refers to the maximum amount of electrical current, in amperes, that a
    fuse at the grid connection point is designed to safely carry under normal
    operating conditions.

    This limit applies to currents both flowing in or out of each of the 3
    phases individually.

    In other words, a current _i_ A at one of the phases of the grid connection
    point must comply with the following constraint:
    `-rated_fuse_current <= i <= rated_fuse_current`
    """
    def __init__(
        self,
        *,
        rated_fuse_current: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["rated_fuse_current", b"rated_fuse_current"]) -> None: ...

global___GridConnectionPoint = GridConnectionPoint

@typing.final
class Inverter(google.protobuf.message.Message):
    """A representation of an inverter.
    The inverter metadata.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: global___InverterType.ValueType
    """The inverter type."""
    def __init__(
        self,
        *,
        type: global___InverterType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Inverter = Inverter

@typing.final
class VoltageTransformer(google.protobuf.message.Message):
    """A representation of a voltage transformer.
    Voltage transformers are used to step up or step down the voltage, keeping
    the power somewhat constant by increasing or decreasing the current.
    If voltage is stepped up, current is stepped down, and vice versa.
    Note that voltage transformers have efficiency losses, so the output power
    is always less than the input power.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRIMARY_FIELD_NUMBER: builtins.int
    SECONDARY_FIELD_NUMBER: builtins.int
    primary: builtins.float
    """The primary voltage of the transformer.
    This is the input voltage that is stepped up or down.
    """
    secondary: builtins.float
    """The secondary voltage of the transformer.
    This is the output voltage that is the result of stepping the primary
    voltage up or down.
    """
    def __init__(
        self,
        *,
        primary: builtins.float = ...,
        secondary: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["primary", b"primary", "secondary", b"secondary"]) -> None: ...

global___VoltageTransformer = VoltageTransformer

@typing.final
class MetricConfigBounds(google.protobuf.message.Message):
    """MetricConfigBounds describes a set of limits for a specific metric consisting
    of a lower and upper bound for said metric.

    This can be used for example to specify an allowed range of power output
    for a component.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METRIC_FIELD_NUMBER: builtins.int
    CONFIG_BOUNDS_FIELD_NUMBER: builtins.int
    metric: frequenz.api.common.v1alpha7.metrics.metrics_pb2.Metric.ValueType
    """Metric type the config bounds are for"""
    @property
    def config_bounds(self) -> frequenz.api.common.v1alpha7.metrics.bounds_pb2.Bounds:
        """The set of bounds for the specified metric.

        This contains the lower and upper bounds for said metric.
        Sources these may be derived from include the component configuration,
        manufacturers limits, and limits of other devices.
        """

    def __init__(
        self,
        *,
        metric: frequenz.api.common.v1alpha7.metrics.metrics_pb2.Metric.ValueType = ...,
        config_bounds: frequenz.api.common.v1alpha7.metrics.bounds_pb2.Bounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_bounds", b"config_bounds"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_bounds", b"config_bounds", "metric", b"metric"]) -> None: ...

global___MetricConfigBounds = MetricConfigBounds

@typing.final
class ElectricalComponentCategorySpecificInfo(google.protobuf.message.Message):
    """Information specific to a microgrid electrical component, based upon its
    category.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATTERY_FIELD_NUMBER: builtins.int
    EV_CHARGER_FIELD_NUMBER: builtins.int
    FUSE_FIELD_NUMBER: builtins.int
    GRID_CONNECTION_POINT_FIELD_NUMBER: builtins.int
    INVERTER_FIELD_NUMBER: builtins.int
    VOLTAGE_TRANSFORMER_FIELD_NUMBER: builtins.int
    @property
    def battery(self) -> global___Battery: ...
    @property
    def ev_charger(self) -> global___EvCharger: ...
    @property
    def fuse(self) -> global___Fuse: ...
    @property
    def grid_connection_point(self) -> global___GridConnectionPoint: ...
    @property
    def inverter(self) -> global___Inverter: ...
    @property
    def voltage_transformer(self) -> global___VoltageTransformer: ...
    def __init__(
        self,
        *,
        battery: global___Battery | None = ...,
        ev_charger: global___EvCharger | None = ...,
        fuse: global___Fuse | None = ...,
        grid_connection_point: global___GridConnectionPoint | None = ...,
        inverter: global___Inverter | None = ...,
        voltage_transformer: global___VoltageTransformer | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["battery", b"battery", "ev_charger", b"ev_charger", "fuse", b"fuse", "grid_connection_point", b"grid_connection_point", "inverter", b"inverter", "kind", b"kind", "voltage_transformer", b"voltage_transformer"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["battery", b"battery", "ev_charger", b"ev_charger", "fuse", b"fuse", "grid_connection_point", b"grid_connection_point", "inverter", b"inverter", "kind", b"kind", "voltage_transformer", b"voltage_transformer"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["kind", b"kind"]) -> typing.Literal["battery", "ev_charger", "fuse", "grid_connection_point", "inverter", "voltage_transformer"] | None: ...

global___ElectricalComponentCategorySpecificInfo = ElectricalComponentCategorySpecificInfo

@typing.final
class ElectricalComponent(google.protobuf.message.Message):
    """Microgrid electrical component details."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    CATEGORY_SPECIFIC_INFO_FIELD_NUMBER: builtins.int
    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_NAME_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    METRIC_CONFIG_BOUNDS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The component ID."""
    microgrid_id: builtins.int
    """Unique identifier of the parent microgrid_id."""
    name: builtins.str
    """The component name."""
    category: global___ElectricalComponentCategory.ValueType
    """The component category. E.g., Inverter, Battery, etc."""
    manufacturer: builtins.str
    """The component manufacturer."""
    model_name: builtins.str
    """The model name of the component."""
    @property
    def category_specific_info(self) -> global___ElectricalComponentCategorySpecificInfo:
        """The metadata specific to the component category type."""

    @property
    def operational_lifetime(self) -> frequenz.api.common.v1alpha7.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the component."""

    @property
    def metric_config_bounds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MetricConfigBounds]:
        """List of rated bounds present for the component identified by Metric."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        name: builtins.str = ...,
        category: global___ElectricalComponentCategory.ValueType = ...,
        category_specific_info: global___ElectricalComponentCategorySpecificInfo | None = ...,
        manufacturer: builtins.str = ...,
        model_name: builtins.str = ...,
        operational_lifetime: frequenz.api.common.v1alpha7.microgrid.lifetime_pb2.Lifetime | None = ...,
        metric_config_bounds: collections.abc.Iterable[global___MetricConfigBounds] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["category_specific_info", b"category_specific_info", "operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["category", b"category", "category_specific_info", b"category_specific_info", "id", b"id", "manufacturer", b"manufacturer", "metric_config_bounds", b"metric_config_bounds", "microgrid_id", b"microgrid_id", "model_name", b"model_name", "name", b"name", "operational_lifetime", b"operational_lifetime"]) -> None: ...

global___ElectricalComponent = ElectricalComponent

@typing.final
class ElectricalComponentConnection(google.protobuf.message.Message):
    """ElectricalComponentConnection describes a single electrical link between two
    components within a microgrid, effectively representing the physical wiring
    as viewed from the grid connection point, if one exists, or from the
    islanding point, in case of an islanded microgrids.

    !!! note "Physical Representation"
        This message is not about data flow but rather about the physical
        electrical connections between components. Therefore, the IDs for the
        source and destination components correspond to the actual setup within
        the microgrid.

    !!! note "Direction"
        The direction of the connection follows the flow of current away from the
        grid connection point, or in case of islands, away from the islanding
        point. This direction is aligned with positive current according to the
        [Passive Sign Convention]
        (https://en.wikipedia.org/wiki/Passive_sign_convention).

    !!! info "Historical Data"
        The timestamps of when a connection was created and terminated allows for
        tracking the changes over time to a microgrid, providing insights into
        when and how the microgrid infrastructure has been modified.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_COMPONENT_ID_FIELD_NUMBER: builtins.int
    DESTINATION_COMPONENT_ID_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    source_component_id: builtins.int
    """Unique identifier of the component where the connection originates. This is
    aligned with the direction of current flow away from the grid connection
    point, or in case of islands, away from the islanding point.
    """
    destination_component_id: builtins.int
    """Unique ID of the component where the connection terminates. This is the
    component towards which the current flows.
    """
    @property
    def operational_lifetime(self) -> frequenz.api.common.v1alpha7.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the connection."""

    def __init__(
        self,
        *,
        source_component_id: builtins.int = ...,
        destination_component_id: builtins.int = ...,
        operational_lifetime: frequenz.api.common.v1alpha7.microgrid.lifetime_pb2.Lifetime | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["destination_component_id", b"destination_component_id", "operational_lifetime", b"operational_lifetime", "source_component_id", b"source_component_id"]) -> None: ...

global___ElectricalComponentConnection = ElectricalComponentConnection

@typing.final
class ElectricalComponentDiagnostic(google.protobuf.message.Message):
    """Represents an error or warning condition reported by a microgrid electrical
    component.

    This message extends a standardized error code with contextual information
    useful for diagnostics, such as subsystem names, measured values, or
    vendor-specific insights.

    !!! example "Typical Component Error"
        ```json
        {
          "diagnosticCode":
              "ELECTRICAL_COMPONENT_DIAGNOSTIC_CODE_OVERTEMPERATURE",
          "vendorDiagnosticCode": "2003",
          "message": "Temperature sensor 3 reported 61.5°C (limit: 60°C)"
        }
        ```

    !!! note "Component-Originated Diagnostics"
        This message is intended to reflect diagnostics originating from
        electrical components (e.g., inverters, batteries), either from internal
        firmware or via gateway logic.

    !!! note "Vendor-Specific Codes"
        When available, `vendor_error_code` will reflect manufacturer-defined
        error identifiers, typically exposed via Modbus or similar interfaces.
        These codes are vendor- and firmware-specific and must be interpreted
        using the vendor's official documentation.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIAGNOSTIC_CODE_FIELD_NUMBER: builtins.int
    VENDOR_DIAGNOSTIC_CODE_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    diagnostic_code: global___ElectricalComponentDiagnosticCode.ValueType
    """A standardized error code representing the category of the issue."""
    vendor_diagnostic_code: builtins.str
    """Optional vendor-provided error code for the error, for vendor-specific
    insights or more granular diagnostics.
    """
    message: builtins.str
    """Optional human-readable message providing additional context."""
    def __init__(
        self,
        *,
        diagnostic_code: global___ElectricalComponentDiagnosticCode.ValueType = ...,
        vendor_diagnostic_code: builtins.str | None = ...,
        message: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code", "vendor_diagnostic_code", b"vendor_diagnostic_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code", "diagnostic_code", b"diagnostic_code", "message", b"message", "vendor_diagnostic_code", b"vendor_diagnostic_code"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code"]) -> typing.Literal["vendor_diagnostic_code"] | None: ...

global___ElectricalComponentDiagnostic = ElectricalComponentDiagnostic

@typing.final
class ElectricalComponentStateSnapshot(google.protobuf.message.Message):
    """Representation of a component state, warnings, and errors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ORIGIN_TIME_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    WARNINGS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def origin_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The UTC time when the state was originally captured."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___ElectricalComponentStateCode.ValueType]:
        """List of operational states currently active for the component.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
           If the state is `ELECTRICAL_COMPONENT_STATE_CODE_ERROR`, then the
           electrical component is in an error state. In such cases, the `errors`
           field will be populated with the list of errors.
        """

    @property
    def warnings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ElectricalComponentDiagnostic]:
        """List of non-critical warnings detected for the component.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
            Warnings may be reported even when the component is operational.
        """

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ElectricalComponentDiagnostic]:
        """List of critical errors currently affecting the component.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
           This list is expected to have errors if and only if the electrical
           component is in an error state.
        """

    def __init__(
        self,
        *,
        origin_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        states: collections.abc.Iterable[global___ElectricalComponentStateCode.ValueType] | None = ...,
        warnings: collections.abc.Iterable[global___ElectricalComponentDiagnostic] | None = ...,
        errors: collections.abc.Iterable[global___ElectricalComponentDiagnostic] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["origin_time", b"origin_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors", "origin_time", b"origin_time", "states", b"states", "warnings", b"warnings"]) -> None: ...

global___ElectricalComponentStateSnapshot = ElectricalComponentStateSnapshot

@typing.final
class ElectricalComponentTelemetry(google.protobuf.message.Message):
    """ElectricalComponentTelemetry message aggregates multiple metrics, operational
    states, and errors, related to a specific microgrid component.

    !!! example
      Example output of a component data message:
      ```
       {
         ELECTRICAL_component_id: 13,
         metric_samples: [
           /* list of metrics for multiple timestamps */
           {
             sample_time: "2023-10-01T00:00:00Z",
             metric: "DC_VOLTAGE_V",
             value: {},
             bounds: {},
             connection: "battery_0"
           },
           {
             sample_time: "2023-10-01T00:00:00Z",
             metric: "DC_VOLTAGE_V",
             value: {},
             bounds: {},
             connection: "pv_0"
           }
         ],
         states: [
           /* list of states for multiple timestamps */
           {
             sample_time: "2023-10-01T00:00:00Z",
             states: [],
             warnings: [],
             errors: [],
           },
           {
             sample_time: "2023-10-01T00:00:00Z",
             states: [],
             warnings: [],
             errors: [],
           },
         ]
       }
     ```
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    METRIC_SAMPLES_FIELD_NUMBER: builtins.int
    STATE_SNAPSHOTS_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The ID of the microgrid component."""
    @property
    def metric_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1alpha7.metrics.metrics_pb2.MetricSample]:
        """List of measurements for a metric of the specific microgrid component."""

    @property
    def state_snapshots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ElectricalComponentStateSnapshot]:
        """List of state snapshots of a specific microgrid component."""

    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        metric_samples: collections.abc.Iterable[frequenz.api.common.v1alpha7.metrics.metrics_pb2.MetricSample] | None = ...,
        state_snapshots: collections.abc.Iterable[global___ElectricalComponentStateSnapshot] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id", "metric_samples", b"metric_samples", "state_snapshots", b"state_snapshots"]) -> None: ...

global___ElectricalComponentTelemetry = ElectricalComponentTelemetry
