# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: frequenz/api/common/v1alpha7/metrics/metrics.proto
# Protobuf Python Version: 6.30.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    30,
    0,
    '',
    'frequenz/api/common/v1alpha7/metrics/metrics.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.common.v1alpha7.metrics import bounds_pb2 as frequenz_dot_api_dot_common_dot_v1alpha7_dot_metrics_dot_bounds__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n2frequenz/api/common/v1alpha7/metrics/metrics.proto\x12$frequenz.api.common.v1alpha7.metrics\x1a\x31\x66requenz/api/common/v1alpha7/metrics/bounds.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\"\n\x11SimpleMetricValue\x12\r\n\x05value\x18\x02 \x01(\x02\"\x8a\x01\n\x15\x41ggregatedMetricValue\x12\x11\n\tavg_value\x18\x02 \x01(\x02\x12\x16\n\tmin_value\x18\x03 \x01(\x02H\x00\x88\x01\x01\x12\x16\n\tmax_value\x18\x04 \x01(\x02H\x01\x88\x01\x01\x12\x12\n\nraw_values\x18\x05 \x03(\x02\x42\x0c\n\n_min_valueB\x0c\n\n_max_value\"\xd8\x01\n\x12MetricValueVariant\x12P\n\rsimple_metric\x18\x01 \x01(\x0b\x32\x37.frequenz.api.common.v1alpha7.metrics.SimpleMetricValueH\x00\x12X\n\x11\x61ggregated_metric\x18\x02 \x01(\x0b\x32;.frequenz.api.common.v1alpha7.metrics.AggregatedMetricValueH\x00\x42\x16\n\x14metric_value_variant\"r\n\x10MetricConnection\x12P\n\x08\x63\x61tegory\x18\x01 \x01(\x0e\x32>.frequenz.api.common.v1alpha7.metrics.MetricConnectionCategory\x12\x0c\n\x04name\x18\x02 \x01(\t\"\xe4\x02\n\x0cMetricSample\x12/\n\x0bsample_time\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12<\n\x06metric\x18\x02 \x01(\x0e\x32,.frequenz.api.common.v1alpha7.metrics.Metric\x12G\n\x05value\x18\x03 \x01(\x0b\x32\x38.frequenz.api.common.v1alpha7.metrics.MetricValueVariant\x12<\n\x06\x62ounds\x18\x04 \x03(\x0b\x32,.frequenz.api.common.v1alpha7.metrics.Bounds\x12O\n\nconnection\x18\x05 \x01(\x0b\x32\x36.frequenz.api.common.v1alpha7.metrics.MetricConnectionH\x00\x88\x01\x01\x42\r\n\x0b_connection*\x87\x14\n\x06Metric\x12\x16\n\x12METRIC_UNSPECIFIED\x10\x00\x12\x15\n\x11METRIC_DC_VOLTAGE\x10\x01\x12\x15\n\x11METRIC_DC_CURRENT\x10\x02\x12\x13\n\x0fMETRIC_DC_POWER\x10\x03\x12\x17\n\x13METRIC_AC_FREQUENCY\x10\n\x12\x15\n\x11METRIC_AC_VOLTAGE\x10\x0b\x12\x1f\n\x1bMETRIC_AC_VOLTAGE_PHASE_1_N\x10\x0c\x12\x1f\n\x1bMETRIC_AC_VOLTAGE_PHASE_2_N\x10\r\x12\x1f\n\x1bMETRIC_AC_VOLTAGE_PHASE_3_N\x10\x0e\x12%\n!METRIC_AC_VOLTAGE_PHASE_1_PHASE_2\x10\x0f\x12%\n!METRIC_AC_VOLTAGE_PHASE_2_PHASE_3\x10\x10\x12%\n!METRIC_AC_VOLTAGE_PHASE_3_PHASE_1\x10\x11\x12\x15\n\x11METRIC_AC_CURRENT\x10\x12\x12\x1d\n\x19METRIC_AC_CURRENT_PHASE_1\x10\x13\x12\x1d\n\x19METRIC_AC_CURRENT_PHASE_2\x10\x14\x12\x1d\n\x19METRIC_AC_CURRENT_PHASE_3\x10\x15\x12\x1c\n\x18METRIC_AC_POWER_APPARENT\x10\x16\x12$\n METRIC_AC_POWER_APPARENT_PHASE_1\x10\x17\x12$\n METRIC_AC_POWER_APPARENT_PHASE_2\x10\x18\x12$\n METRIC_AC_POWER_APPARENT_PHASE_3\x10\x19\x12\x1a\n\x16METRIC_AC_POWER_ACTIVE\x10\x1a\x12\"\n\x1eMETRIC_AC_POWER_ACTIVE_PHASE_1\x10\x1b\x12\"\n\x1eMETRIC_AC_POWER_ACTIVE_PHASE_2\x10\x1c\x12\"\n\x1eMETRIC_AC_POWER_ACTIVE_PHASE_3\x10\x1d\x12\x1c\n\x18METRIC_AC_POWER_REACTIVE\x10\x1e\x12$\n METRIC_AC_POWER_REACTIVE_PHASE_1\x10\x1f\x12$\n METRIC_AC_POWER_REACTIVE_PHASE_2\x10 \x12$\n METRIC_AC_POWER_REACTIVE_PHASE_3\x10!\x12\x1a\n\x16METRIC_AC_POWER_FACTOR\x10(\x12\"\n\x1eMETRIC_AC_POWER_FACTOR_PHASE_1\x10)\x12\"\n\x1eMETRIC_AC_POWER_FACTOR_PHASE_2\x10*\x12\"\n\x1eMETRIC_AC_POWER_FACTOR_PHASE_3\x10+\x12\x1d\n\x19METRIC_AC_ENERGY_APPARENT\x10\x32\x12%\n!METRIC_AC_ENERGY_APPARENT_PHASE_1\x10\x33\x12%\n!METRIC_AC_ENERGY_APPARENT_PHASE_2\x10\x34\x12%\n!METRIC_AC_ENERGY_APPARENT_PHASE_3\x10\x35\x12\x1b\n\x17METRIC_AC_ENERGY_ACTIVE\x10\x36\x12#\n\x1fMETRIC_AC_ENERGY_ACTIVE_PHASE_1\x10\x37\x12#\n\x1fMETRIC_AC_ENERGY_ACTIVE_PHASE_2\x10\x38\x12#\n\x1fMETRIC_AC_ENERGY_ACTIVE_PHASE_3\x10\x39\x12$\n METRIC_AC_ENERGY_ACTIVE_CONSUMED\x10:\x12,\n(METRIC_AC_ENERGY_ACTIVE_CONSUMED_PHASE_1\x10;\x12,\n(METRIC_AC_ENERGY_ACTIVE_CONSUMED_PHASE_2\x10<\x12,\n(METRIC_AC_ENERGY_ACTIVE_CONSUMED_PHASE_3\x10=\x12%\n!METRIC_AC_ENERGY_ACTIVE_DELIVERED\x10>\x12-\n)METRIC_AC_ENERGY_ACTIVE_DELIVERED_PHASE_1\x10?\x12-\n)METRIC_AC_ENERGY_ACTIVE_DELIVERED_PHASE_2\x10@\x12-\n)METRIC_AC_ENERGY_ACTIVE_DELIVERED_PHASE_3\x10\x41\x12\x1d\n\x19METRIC_AC_ENERGY_REACTIVE\x10\x42\x12%\n!METRIC_AC_ENERGY_REACTIVE_PHASE_1\x10\x43\x12%\n!METRIC_AC_ENERGY_REACTIVE_PHASE_2\x10\x44\x12%\n!METRIC_AC_ENERGY_REACTIVE_PHASE_3\x10\x45\x12/\n+METRIC_AC_TOTAL_HARMONIC_DISTORTION_CURRENT\x10P\x12\x37\n3METRIC_AC_TOTAL_HARMONIC_DISTORTION_CURRENT_PHASE_1\x10Q\x12\x37\n3METRIC_AC_TOTAL_HARMONIC_DISTORTION_CURRENT_PHASE_2\x10R\x12\x37\n3METRIC_AC_TOTAL_HARMONIC_DISTORTION_CURRENT_PHASE_3\x10S\x12\x1b\n\x17METRIC_BATTERY_CAPACITY\x10\x64\x12\x1a\n\x16METRIC_BATTERY_SOC_PCT\x10\x65\x12\x1e\n\x1aMETRIC_BATTERY_TEMPERATURE\x10\x66\x12\x1f\n\x1bMETRIC_INVERTER_TEMPERATURE\x10x\x12\'\n#METRIC_INVERTER_TEMPERATURE_CABINET\x10y\x12(\n$METRIC_INVERTER_TEMPERATURE_HEATSINK\x10z\x12+\n\'METRIC_INVERTER_TEMPERATURE_TRANSFORMER\x10{\x12\"\n\x1dMETRIC_EV_CHARGER_TEMPERATURE\x10\x8c\x01\x12\x1d\n\x18METRIC_SENSOR_WIND_SPEED\x10\xa0\x01\x12!\n\x1cMETRIC_SENSOR_WIND_DIRECTION\x10\xa1\x01\x12\x1e\n\x19METRIC_SENSOR_TEMPERATURE\x10\xa2\x01\x12$\n\x1fMETRIC_SENSOR_RELATIVE_HUMIDITY\x10\xa3\x01\x12\x1c\n\x17METRIC_SENSOR_DEW_POINT\x10\xa4\x01\x12\x1f\n\x1aMETRIC_SENSOR_AIR_PRESSURE\x10\xa5\x01\x12\x1d\n\x18METRIC_SENSOR_IRRADIANCE\x10\xa6\x01*\xdc\x02\n\x18MetricConnectionCategory\x12*\n&METRIC_CONNECTION_CATEGORY_UNSPECIFIED\x10\x00\x12$\n METRIC_CONNECTION_CATEGORY_OTHER\x10\x01\x12&\n\"METRIC_CONNECTION_CATEGORY_BATTERY\x10\x02\x12!\n\x1dMETRIC_CONNECTION_CATEGORY_PV\x10\x03\x12&\n\"METRIC_CONNECTION_CATEGORY_AMBIENT\x10\n\x12&\n\"METRIC_CONNECTION_CATEGORY_CABINET\x10\x0b\x12\'\n#METRIC_CONNECTION_CATEGORY_HEATSINK\x10\x0c\x12*\n&METRIC_CONNECTION_CATEGORY_TRANSFORMER\x10\rb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'frequenz.api.common.v1alpha7.metrics.metrics_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_METRIC']._serialized_start=1048
  _globals['_METRIC']._serialized_end=3615
  _globals['_METRICCONNECTIONCATEGORY']._serialized_start=3618
  _globals['_METRICCONNECTIONCATEGORY']._serialized_end=3966
  _globals['_SIMPLEMETRICVALUE']._serialized_start=176
  _globals['_SIMPLEMETRICVALUE']._serialized_end=210
  _globals['_AGGREGATEDMETRICVALUE']._serialized_start=213
  _globals['_AGGREGATEDMETRICVALUE']._serialized_end=351
  _globals['_METRICVALUEVARIANT']._serialized_start=354
  _globals['_METRICVALUEVARIANT']._serialized_end=570
  _globals['_METRICCONNECTION']._serialized_start=572
  _globals['_METRICCONNECTION']._serialized_end=686
  _globals['_METRICSAMPLE']._serialized_start=689
  _globals['_METRICSAMPLE']._serialized_end=1045
# @@protoc_insertion_point(module_scope)
