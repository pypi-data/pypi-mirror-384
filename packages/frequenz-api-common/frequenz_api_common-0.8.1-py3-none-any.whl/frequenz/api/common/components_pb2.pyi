"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid components definitions.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ComponentCategory:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentCategory.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_CATEGORY_UNSPECIFIED: _ComponentCategory.ValueType  # 0
    """An unknown component categories, useful for error handling, and marking
    unknown components in a list of components with otherwise known categories.
    """
    COMPONENT_CATEGORY_GRID: _ComponentCategory.ValueType  # 1
    """The point where the local microgrid is connected to the grid."""
    COMPONENT_CATEGORY_METER: _ComponentCategory.ValueType  # 2
    """A meter, for measuring electrical metrics, e.g., current, voltage, etc."""
    COMPONENT_CATEGORY_INVERTER: _ComponentCategory.ValueType  # 3
    """An electricity generator, with batteries or solar energy."""
    COMPONENT_CATEGORY_CONVERTER: _ComponentCategory.ValueType  # 4
    """A DC-DC converter."""
    COMPONENT_CATEGORY_BATTERY: _ComponentCategory.ValueType  # 5
    """A storage system for electrical energy, used by inverters."""
    COMPONENT_CATEGORY_EV_CHARGER: _ComponentCategory.ValueType  # 6
    """A station for charging electrical vehicles."""
    COMPONENT_CATEGORY_SENSOR: _ComponentCategory.ValueType  # 7
    """A sensor for measuring ambient metrics, e.g., temperature, humidity, etc."""
    COMPONENT_CATEGORY_CRYPTO_MINER: _ComponentCategory.ValueType  # 8
    """A crypto miner."""
    COMPONENT_CATEGORY_ELECTROLYZER: _ComponentCategory.ValueType  # 9
    """An electrolyzer for converting water into hydrogen and oxygen."""
    COMPONENT_CATEGORY_CHP: _ComponentCategory.ValueType  # 10
    """A heat and power combustion plant (CHP stands for combined heat and power)."""
    COMPONENT_CATEGORY_RELAY: _ComponentCategory.ValueType  # 11
    """A relay.
    Relays generally have two states: open (connected) and closed
    (disconnected).
    They are generally placed in front of a component, e.g., an inverter, to
    control whether the component is connected to the grid or not.
    """
    COMPONENT_CATEGORY_PRECHARGE_MODULE: _ComponentCategory.ValueType  # 12
    """A precharge module.
    Precharging involves gradually ramping up the DC voltage to prevent any
    potential damage to sensitive electrical components like capacitors.
    While many inverters and batteries come equipped with in-built precharging
    mechanisms, some may lack this feature. In such cases, we need to use
    external precharging modules.
    """

class ComponentCategory(_ComponentCategory, metaclass=_ComponentCategoryEnumTypeWrapper):
    """Enumrated component categories."""

COMPONENT_CATEGORY_UNSPECIFIED: ComponentCategory.ValueType  # 0
"""An unknown component categories, useful for error handling, and marking
unknown components in a list of components with otherwise known categories.
"""
COMPONENT_CATEGORY_GRID: ComponentCategory.ValueType  # 1
"""The point where the local microgrid is connected to the grid."""
COMPONENT_CATEGORY_METER: ComponentCategory.ValueType  # 2
"""A meter, for measuring electrical metrics, e.g., current, voltage, etc."""
COMPONENT_CATEGORY_INVERTER: ComponentCategory.ValueType  # 3
"""An electricity generator, with batteries or solar energy."""
COMPONENT_CATEGORY_CONVERTER: ComponentCategory.ValueType  # 4
"""A DC-DC converter."""
COMPONENT_CATEGORY_BATTERY: ComponentCategory.ValueType  # 5
"""A storage system for electrical energy, used by inverters."""
COMPONENT_CATEGORY_EV_CHARGER: ComponentCategory.ValueType  # 6
"""A station for charging electrical vehicles."""
COMPONENT_CATEGORY_SENSOR: ComponentCategory.ValueType  # 7
"""A sensor for measuring ambient metrics, e.g., temperature, humidity, etc."""
COMPONENT_CATEGORY_CRYPTO_MINER: ComponentCategory.ValueType  # 8
"""A crypto miner."""
COMPONENT_CATEGORY_ELECTROLYZER: ComponentCategory.ValueType  # 9
"""An electrolyzer for converting water into hydrogen and oxygen."""
COMPONENT_CATEGORY_CHP: ComponentCategory.ValueType  # 10
"""A heat and power combustion plant (CHP stands for combined heat and power)."""
COMPONENT_CATEGORY_RELAY: ComponentCategory.ValueType  # 11
"""A relay.
Relays generally have two states: open (connected) and closed
(disconnected).
They are generally placed in front of a component, e.g., an inverter, to
control whether the component is connected to the grid or not.
"""
COMPONENT_CATEGORY_PRECHARGE_MODULE: ComponentCategory.ValueType  # 12
"""A precharge module.
Precharging involves gradually ramping up the DC voltage to prevent any
potential damage to sensitive electrical components like capacitors.
While many inverters and batteries come equipped with in-built precharging
mechanisms, some may lack this feature. In such cases, we need to use
external precharging modules.
"""
global___ComponentCategory = ComponentCategory

class _BatteryType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BatteryTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BatteryType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BATTERY_TYPE_UNSPECIFIED: _BatteryType.ValueType  # 0
    """Unspecified."""
    BATTERY_TYPE_LI_ION: _BatteryType.ValueType  # 1
    """Li-ion batteries."""
    BATTERY_TYPE_NA_ION: _BatteryType.ValueType  # 2
    """Sodium-ion batteries"""

class BatteryType(_BatteryType, metaclass=_BatteryTypeEnumTypeWrapper):
    """Enumerated battery types."""

BATTERY_TYPE_UNSPECIFIED: BatteryType.ValueType  # 0
"""Unspecified."""
BATTERY_TYPE_LI_ION: BatteryType.ValueType  # 1
"""Li-ion batteries."""
BATTERY_TYPE_NA_ION: BatteryType.ValueType  # 2
"""Sodium-ion batteries"""
global___BatteryType = BatteryType

class _InverterType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _InverterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InverterType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INVERTER_TYPE_UNSPECIFIED: _InverterType.ValueType  # 0
    """Unspecified."""
    INVERTER_TYPE_BATTERY: _InverterType.ValueType  # 1
    """Battery inverter."""
    INVERTER_TYPE_SOLAR: _InverterType.ValueType  # 2
    """Solar inverter."""
    INVERTER_TYPE_HYBRID: _InverterType.ValueType  # 3
    """Hybrid inverter."""

class InverterType(_InverterType, metaclass=_InverterTypeEnumTypeWrapper):
    """Enumerated inverter types."""

INVERTER_TYPE_UNSPECIFIED: InverterType.ValueType  # 0
"""Unspecified."""
INVERTER_TYPE_BATTERY: InverterType.ValueType  # 1
"""Battery inverter."""
INVERTER_TYPE_SOLAR: InverterType.ValueType  # 2
"""Solar inverter."""
INVERTER_TYPE_HYBRID: InverterType.ValueType  # 3
"""Hybrid inverter."""
global___InverterType = InverterType

class _EvChargerType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _EvChargerTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EvChargerType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EV_CHARGER_TYPE_UNSPECIFIED: _EvChargerType.ValueType  # 0
    """Default type."""
    EV_CHARGER_TYPE_AC: _EvChargerType.ValueType  # 1
    """The EV charging station supports AC charging only."""
    EV_CHARGER_TYPE_DC: _EvChargerType.ValueType  # 2
    """The EV charging station supports DC charging only."""
    EV_CHARGER_TYPE_HYBRID: _EvChargerType.ValueType  # 3
    """The EV charging station supports both AC and DC."""

class EvChargerType(_EvChargerType, metaclass=_EvChargerTypeEnumTypeWrapper):
    """Enumerated EV charger types."""

EV_CHARGER_TYPE_UNSPECIFIED: EvChargerType.ValueType  # 0
"""Default type."""
EV_CHARGER_TYPE_AC: EvChargerType.ValueType  # 1
"""The EV charging station supports AC charging only."""
EV_CHARGER_TYPE_DC: EvChargerType.ValueType  # 2
"""The EV charging station supports DC charging only."""
EV_CHARGER_TYPE_HYBRID: EvChargerType.ValueType  # 3
"""The EV charging station supports both AC and DC."""
global___EvChargerType = EvChargerType

class _SensorType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_TYPE_UNSPECIFIED: _SensorType.ValueType  # 0
    """Unspecified"""
    SENSOR_TYPE_THERMOMETER: _SensorType.ValueType  # 1
    """Thermometer (temperature sensor)"""
    SENSOR_TYPE_HYGROMETER: _SensorType.ValueType  # 2
    """Hygrometer (humidity sensor)"""
    SENSOR_TYPE_BAROMETER: _SensorType.ValueType  # 3
    """Barometer (pressure sensor)."""
    SENSOR_TYPE_PYRANOMETER: _SensorType.ValueType  # 4
    """Pyranometer (solar irradiance sensor)."""
    SENSOR_TYPE_ANEMOMETER: _SensorType.ValueType  # 5
    """Anemometer (wind velocity and direction sensor)."""
    SENSOR_TYPE_ACCELEROMETER: _SensorType.ValueType  # 6
    """Accelerometers (acceleration sensor)."""
    SENSOR_TYPE_GENERAL: _SensorType.ValueType  # 7
    """General sensors, which do not fall in any of the above categories"""

class SensorType(_SensorType, metaclass=_SensorTypeEnumTypeWrapper):
    """Enumerated sensor types."""

SENSOR_TYPE_UNSPECIFIED: SensorType.ValueType  # 0
"""Unspecified"""
SENSOR_TYPE_THERMOMETER: SensorType.ValueType  # 1
"""Thermometer (temperature sensor)"""
SENSOR_TYPE_HYGROMETER: SensorType.ValueType  # 2
"""Hygrometer (humidity sensor)"""
SENSOR_TYPE_BAROMETER: SensorType.ValueType  # 3
"""Barometer (pressure sensor)."""
SENSOR_TYPE_PYRANOMETER: SensorType.ValueType  # 4
"""Pyranometer (solar irradiance sensor)."""
SENSOR_TYPE_ANEMOMETER: SensorType.ValueType  # 5
"""Anemometer (wind velocity and direction sensor)."""
SENSOR_TYPE_ACCELEROMETER: SensorType.ValueType  # 6
"""Accelerometers (acceleration sensor)."""
SENSOR_TYPE_GENERAL: SensorType.ValueType  # 7
"""General sensors, which do not fall in any of the above categories"""
global___SensorType = SensorType
