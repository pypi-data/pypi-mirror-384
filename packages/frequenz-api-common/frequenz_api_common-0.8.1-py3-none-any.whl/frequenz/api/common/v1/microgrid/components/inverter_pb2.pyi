"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz definitions for inverters.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _InverterType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _InverterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InverterType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INVERTER_TYPE_UNSPECIFIED: _InverterType.ValueType  # 0
    """Unspecified."""
    INVERTER_TYPE_BATTERY: _InverterType.ValueType  # 1
    """Battery inverter."""
    INVERTER_TYPE_SOLAR: _InverterType.ValueType  # 2
    """Solar inverter."""
    INVERTER_TYPE_HYBRID: _InverterType.ValueType  # 3
    """Hybrid inverter."""

class InverterType(_InverterType, metaclass=_InverterTypeEnumTypeWrapper):
    """Enumerated inverter types."""

INVERTER_TYPE_UNSPECIFIED: InverterType.ValueType  # 0
"""Unspecified."""
INVERTER_TYPE_BATTERY: InverterType.ValueType  # 1
"""Battery inverter."""
INVERTER_TYPE_SOLAR: InverterType.ValueType  # 2
"""Solar inverter."""
INVERTER_TYPE_HYBRID: InverterType.ValueType  # 3
"""Hybrid inverter."""
global___InverterType = InverterType

@typing.final
class Inverter(google.protobuf.message.Message):
    """A representation of an inverter.
    The inverter metadata.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: global___InverterType.ValueType
    """The inverter type."""
    def __init__(
        self,
        *,
        type: global___InverterType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Inverter = Inverter
