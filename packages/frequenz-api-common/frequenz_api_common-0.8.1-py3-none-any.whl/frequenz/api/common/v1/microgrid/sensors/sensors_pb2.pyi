"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid sensor definitions.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.v1.metrics.metric_sample_pb2
import frequenz.api.common.v1.microgrid.lifetime_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SensorCategory:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorCategory.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_CATEGORY_UNSPECIFIED: _SensorCategory.ValueType  # 0
    """Unspecified"""
    SENSOR_CATEGORY_THERMOMETER: _SensorCategory.ValueType  # 1
    """Thermometer (temperature sensor)"""
    SENSOR_CATEGORY_HYGROMETER: _SensorCategory.ValueType  # 2
    """Hygrometer (humidity sensor)"""
    SENSOR_CATEGORY_BAROMETER: _SensorCategory.ValueType  # 3
    """Barometer (pressure sensor)."""
    SENSOR_CATEGORY_PYRANOMETER: _SensorCategory.ValueType  # 4
    """Pyranometer (solar irradiance sensor)."""
    SENSOR_CATEGORY_ANEMOMETER: _SensorCategory.ValueType  # 5
    """Anemometer (wind velocity and direction sensor)."""
    SENSOR_CATEGORY_ACCELEROMETER: _SensorCategory.ValueType  # 6
    """Accelerometers (acceleration sensor)."""
    SENSOR_CATEGORY_GENERAL: _SensorCategory.ValueType  # 7
    """General sensors, which do not fall in any of the above categories"""

class SensorCategory(_SensorCategory, metaclass=_SensorCategoryEnumTypeWrapper):
    """Enumerated sensor categories."""

SENSOR_CATEGORY_UNSPECIFIED: SensorCategory.ValueType  # 0
"""Unspecified"""
SENSOR_CATEGORY_THERMOMETER: SensorCategory.ValueType  # 1
"""Thermometer (temperature sensor)"""
SENSOR_CATEGORY_HYGROMETER: SensorCategory.ValueType  # 2
"""Hygrometer (humidity sensor)"""
SENSOR_CATEGORY_BAROMETER: SensorCategory.ValueType  # 3
"""Barometer (pressure sensor)."""
SENSOR_CATEGORY_PYRANOMETER: SensorCategory.ValueType  # 4
"""Pyranometer (solar irradiance sensor)."""
SENSOR_CATEGORY_ANEMOMETER: SensorCategory.ValueType  # 5
"""Anemometer (wind velocity and direction sensor)."""
SENSOR_CATEGORY_ACCELEROMETER: SensorCategory.ValueType  # 6
"""Accelerometers (acceleration sensor)."""
SENSOR_CATEGORY_GENERAL: SensorCategory.ValueType  # 7
"""General sensors, which do not fall in any of the above categories"""
global___SensorCategory = SensorCategory

class _SensorMetric:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorMetricEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorMetric.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_METRIC_UNSPECIFIED: _SensorMetric.ValueType  # 0
    """Unspecified."""
    SENSOR_METRIC_TEMPERATURE: _SensorMetric.ValueType  # 1
    """Temperature.
    In Celsius (°C).
    """
    SENSOR_METRIC_HUMIDITY: _SensorMetric.ValueType  # 2
    """Humidity
    In percentage (%).
    """
    SENSOR_METRIC_PRESSURE: _SensorMetric.ValueType  # 3
    """Pressure
    In Pascal (Pa).
    """
    SENSOR_METRIC_IRRADIANCE: _SensorMetric.ValueType  # 4
    """Irradiance / Radiation flux
    In watts per square meter (W / m^2).
    """
    SENSOR_METRIC_VELOCITY: _SensorMetric.ValueType  # 5
    """Velocity
    In meters per second (m / s).
    """
    SENSOR_METRIC_ACCELERATION: _SensorMetric.ValueType  # 6
    """Acceleration.
    In meters per second per second (m / s^2)
    """
    SENSOR_METRIC_ANGLE: _SensorMetric.ValueType  # 7
    """Metric to represent angles, for metrics like direction.
    In angles with respect to the (magnetic) North (°).
    """
    SENSOR_METRIC_DEW_POINT: _SensorMetric.ValueType  # 8
    """Dew point.
    The temperature at which the air becomes saturated with water vapor.

    In Celsius (°C).
    """

class SensorMetric(_SensorMetric, metaclass=_SensorMetricEnumTypeWrapper):
    """Enumrated sensor metrics."""

SENSOR_METRIC_UNSPECIFIED: SensorMetric.ValueType  # 0
"""Unspecified."""
SENSOR_METRIC_TEMPERATURE: SensorMetric.ValueType  # 1
"""Temperature.
In Celsius (°C).
"""
SENSOR_METRIC_HUMIDITY: SensorMetric.ValueType  # 2
"""Humidity
In percentage (%).
"""
SENSOR_METRIC_PRESSURE: SensorMetric.ValueType  # 3
"""Pressure
In Pascal (Pa).
"""
SENSOR_METRIC_IRRADIANCE: SensorMetric.ValueType  # 4
"""Irradiance / Radiation flux
In watts per square meter (W / m^2).
"""
SENSOR_METRIC_VELOCITY: SensorMetric.ValueType  # 5
"""Velocity
In meters per second (m / s).
"""
SENSOR_METRIC_ACCELERATION: SensorMetric.ValueType  # 6
"""Acceleration.
In meters per second per second (m / s^2)
"""
SENSOR_METRIC_ANGLE: SensorMetric.ValueType  # 7
"""Metric to represent angles, for metrics like direction.
In angles with respect to the (magnetic) North (°).
"""
SENSOR_METRIC_DEW_POINT: SensorMetric.ValueType  # 8
"""Dew point.
The temperature at which the air becomes saturated with water vapor.

In Celsius (°C).
"""
global___SensorMetric = SensorMetric

class _SensorStateCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorStateCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorStateCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_STATE_CODE_UNSPECIFIED: _SensorStateCode.ValueType  # 0
    """Default value when the sensor state is not explicitly set.
    This is the zero value of the enum.
    """
    SENSOR_STATE_CODE_ON: _SensorStateCode.ValueType  # 1
    """The sensor is up and running."""
    SENSOR_STATE_CODE_ERROR: _SensorStateCode.ValueType  # 2
    """The sensor is in an error state."""

class SensorStateCode(_SensorStateCode, metaclass=_SensorStateCodeEnumTypeWrapper):
    """Enum to represent the various states that a sensor can be in.
    This enum is unified across all sensor categories for consistency.
    """

SENSOR_STATE_CODE_UNSPECIFIED: SensorStateCode.ValueType  # 0
"""Default value when the sensor state is not explicitly set.
This is the zero value of the enum.
"""
SENSOR_STATE_CODE_ON: SensorStateCode.ValueType  # 1
"""The sensor is up and running."""
SENSOR_STATE_CODE_ERROR: SensorStateCode.ValueType  # 2
"""The sensor is in an error state."""
global___SensorStateCode = SensorStateCode

class _SensorErrorCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorErrorCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_ERROR_CODE_UNSPECIFIED: _SensorErrorCode.ValueType  # 0
    """Default value. No specific error is specified."""
    SENSOR_ERROR_CODE_UNKNOWN: _SensorErrorCode.ValueType  # 1
    """The sensor is reporting an unknown or an undefined error, and the sender
    cannot parse the sensor error to any of the variants below.
    """
    SENSOR_ERROR_CODE_INTERNAL: _SensorErrorCode.ValueType  # 2
    """Error indicating an internal error within the sensor."""

class SensorErrorCode(_SensorErrorCode, metaclass=_SensorErrorCodeEnumTypeWrapper):
    """A representation of all possible errors that can occur in sensors."""

SENSOR_ERROR_CODE_UNSPECIFIED: SensorErrorCode.ValueType  # 0
"""Default value. No specific error is specified."""
SENSOR_ERROR_CODE_UNKNOWN: SensorErrorCode.ValueType  # 1
"""The sensor is reporting an unknown or an undefined error, and the sender
cannot parse the sensor error to any of the variants below.
"""
SENSOR_ERROR_CODE_INTERNAL: SensorErrorCode.ValueType  # 2
"""Error indicating an internal error within the sensor."""
global___SensorErrorCode = SensorErrorCode

@typing.final
class Sensor(google.protobuf.message.Message):
    """A sensor that measures a physical metric in the microgrid's surrounding
    environment.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_NAME_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    id: builtins.int
    """A unique identifier for the sensor."""
    microgrid_id: builtins.int
    """Unique identifier of the parent microgrid_id."""
    name: builtins.str
    """An optional name for the sensor."""
    category: global___SensorCategory.ValueType
    """The category of the sensor."""
    manufacturer: builtins.str
    """The sensor manufacturer."""
    model_name: builtins.str
    """The model name of the sensor."""
    @property
    def operational_lifetime(self) -> frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the sensor."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        name: builtins.str = ...,
        category: global___SensorCategory.ValueType = ...,
        manufacturer: builtins.str = ...,
        model_name: builtins.str = ...,
        operational_lifetime: frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["category", b"category", "id", b"id", "manufacturer", b"manufacturer", "microgrid_id", b"microgrid_id", "model_name", b"model_name", "name", b"name", "operational_lifetime", b"operational_lifetime"]) -> None: ...

global___Sensor = Sensor

@typing.final
class SensorData(google.protobuf.message.Message):
    """SensorData message aggregates multiple metrics, operational states, and
    errors, related to a specific microgrid sensor.

    !!! example
      Example output of a component data message:
      ```
       {
         sensor_id: 13,
         metric_samples: [
           /* list of metrics for multiple timestamps */
           {
             sampled_at: "2023-10-01T00:00:00Z",
             metric: "METRIC_SENSOR_TEMPERATURE",
             value: metric_value_variant: {simple_metric: {value: 23.5},
           },
           {
             sampled_at: "2023-10-01T00:00:00Z",
             metric: "METRIC_SENSOR_RELATIVE_HUMIDITY",
             value: metric_value_variant: {simple_metric: {value: 23.5},
           }
         ],
         states: [
           {
             sampled_at: "2023-10-01T00:00:00Z",
             states: [],
             errors: [],
           },
         ]

       }
     ```
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SENSOR_ID_FIELD_NUMBER: builtins.int
    METRIC_SAMPLES_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    sensor_id: builtins.int
    """The ID of the microgrid sensors."""
    @property
    def metric_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SensorMetricSample]:
        """List of measurements for a metric of the specific microgrid sensor."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SensorState]:
        """List of states of a specific microgrid sensor."""

    def __init__(
        self,
        *,
        sensor_id: builtins.int = ...,
        metric_samples: collections.abc.Iterable[global___SensorMetricSample] | None = ...,
        states: collections.abc.Iterable[global___SensorState] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["metric_samples", b"metric_samples", "sensor_id", b"sensor_id", "states", b"states"]) -> None: ...

global___SensorData = SensorData

@typing.final
class SensorState(google.protobuf.message.Message):
    """Representation of a sensor state and errors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLED_AT_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def sampled_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the state was sampled."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___SensorStateCode.ValueType]:
        """List of states of the microgrid sensor.

        !!! note
           The list will contain unique members. No state will exist twice in
           this list.
        """

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___SensorErrorCode.ValueType]:
        """List of errors for the microgrid sensor.

        !!! note
           This list is expected to have errors if and only if the sensor is in
           an error state.

        !!! note
           The list will contain unique members. No error will exist twice in
           this list.
        """

    def __init__(
        self,
        *,
        sampled_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        states: collections.abc.Iterable[global___SensorStateCode.ValueType] | None = ...,
        errors: collections.abc.Iterable[global___SensorErrorCode.ValueType] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sampled_at", b"sampled_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors", "sampled_at", b"sampled_at", "states", b"states"]) -> None: ...

global___SensorState = SensorState

@typing.final
class SensorMetricSample(google.protobuf.message.Message):
    """Representation of a sampled sensor metric along with its value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLED_AT_FIELD_NUMBER: builtins.int
    METRIC_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType
    """The metric that was sampled."""
    @property
    def sampled_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The UTC timestamp of when the metric was sampled."""

    @property
    def value(self) -> frequenz.api.common.v1.metrics.metric_sample_pb2.MetricValueVariant:
        """The value of the sampled metric."""

    def __init__(
        self,
        *,
        sampled_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType = ...,
        value: frequenz.api.common.v1.metrics.metric_sample_pb2.MetricValueVariant | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sampled_at", b"sampled_at", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metric", b"metric", "sampled_at", b"sampled_at", "value", b"value"]) -> None: ...

global___SensorMetricSample = SensorMetricSample
