"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid definition.

Copyright 2023 Frequenz Energy-as-a-Service GmbH

Licensed under the MIT License (the "License");
you may not use this file except in compliance with the License.
"""

import builtins
import collections.abc
import frequenz.api.common.v1.grid.delivery_area_pb2
import frequenz.api.common.v1.location_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _MicrogridStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _MicrogridStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MicrogridStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MICROGRID_STATUS_UNSPECIFIED: _MicrogridStatus.ValueType  # 0
    """The status is unspecified. This should not be used."""
    MICROGRID_STATUS_ACTIVE: _MicrogridStatus.ValueType  # 1
    """The microgrid is active."""
    MICROGRID_STATUS_INACTIVE: _MicrogridStatus.ValueType  # 2
    """The microgrid is inactive."""

class MicrogridStatus(_MicrogridStatus, metaclass=_MicrogridStatusEnumTypeWrapper):
    """MicrogridStatus defines the possible statuses for a microgrid."""

MICROGRID_STATUS_UNSPECIFIED: MicrogridStatus.ValueType  # 0
"""The status is unspecified. This should not be used."""
MICROGRID_STATUS_ACTIVE: MicrogridStatus.ValueType  # 1
"""The microgrid is active."""
MICROGRID_STATUS_INACTIVE: MicrogridStatus.ValueType  # 2
"""The microgrid is inactive."""
global___MicrogridStatus = MicrogridStatus

@typing.final
class Microgrid(google.protobuf.message.Message):
    """Microgrid contains details of a specific microgrid. A microgrid is a
    localized grouping of electricity generation, energy storage, and loads that
    normally operates connected to a traditional centralized grid. Each microgrid
    has a unique identifier and is associated with an enterprise account. A key
    feature is that it has a physical location and is situated in a delivery
    area.

    !!! info "Key Concepts"
         - `Physical Location`: Geographical coordinates specify the exact
           physical location of the microgrid.
         - `Delivery Area`: Each microgrid is part of a broader delivery area,
           which is crucial for energy trading and compliance.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    ENTERPRISE_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    CREATE_TIMESTAMP_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Unique identifier of the microgrid."""
    enterprise_id: builtins.int
    """Unique identifier linking this microgrid to its parent enterprise account."""
    name: builtins.str
    """Name of the microgrid."""
    status: global___MicrogridStatus.ValueType
    """The current status of the microgrid."""
    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """The delivery area where the microgrid is located, as identified by a
        specific code.

        If a microgrid is not connected to the grid (it is an island) it does not
        belong to any delivery area and this field will be missing, but it could
        be missing for other reasons as well.
        """

    @property
    def location(self) -> frequenz.api.common.v1.location_pb2.Location:
        """Physical location of the microgrid, in geographical co-ordinates.

        If the location is not known, this field will be missing.
        """

    @property
    def create_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The UTC timestamp indicating when the microgrid was initially created."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        enterprise_id: builtins.int = ...,
        name: builtins.str = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        location: frequenz.api.common.v1.location_pb2.Location | None = ...,
        status: global___MicrogridStatus.ValueType = ...,
        create_timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["create_timestamp", b"create_timestamp", "delivery_area", b"delivery_area", "location", b"location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["create_timestamp", b"create_timestamp", "delivery_area", b"delivery_area", "enterprise_id", b"enterprise_id", "id", b"id", "location", b"location", "name", b"name", "status", b"status"]) -> None: ...

global___Microgrid = Microgrid

@typing.final
class MicrogridComponentIDs(google.protobuf.message.Message):
    """A message to link component IDs with their respective microgrid ID."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MICROGRID_ID_FIELD_NUMBER: builtins.int
    COMPONENT_IDS_FIELD_NUMBER: builtins.int
    microgrid_id: builtins.int
    """The ID of the microgrid."""
    @property
    def component_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """List of component IDs belonging to this microgrid."""

    def __init__(
        self,
        *,
        microgrid_id: builtins.int = ...,
        component_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_ids", b"component_ids", "microgrid_id", b"microgrid_id"]) -> None: ...

global___MicrogridComponentIDs = MicrogridComponentIDs

@typing.final
class MicrogridSensorIDs(google.protobuf.message.Message):
    """/ A message to link sensor IDs with their respective microgrid ID."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MICROGRID_ID_FIELD_NUMBER: builtins.int
    SENSOR_IDS_FIELD_NUMBER: builtins.int
    microgrid_id: builtins.int
    """The ID of the microgrid."""
    @property
    def sensor_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """List of sensor IDs belonging to this microgrid."""

    def __init__(
        self,
        *,
        microgrid_id: builtins.int = ...,
        sensor_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["microgrid_id", b"microgrid_id", "sensor_ids", b"sensor_ids"]) -> None: ...

global___MicrogridSensorIDs = MicrogridSensorIDs
