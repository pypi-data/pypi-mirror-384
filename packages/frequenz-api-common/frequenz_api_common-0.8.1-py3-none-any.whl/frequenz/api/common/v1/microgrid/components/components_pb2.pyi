"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid components definitions.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.v1.metrics.bounds_pb2
import frequenz.api.common.v1.metrics.metric_sample_pb2
import frequenz.api.common.v1.microgrid.components.battery_pb2
import frequenz.api.common.v1.microgrid.components.ev_charger_pb2
import frequenz.api.common.v1.microgrid.components.fuse_pb2
import frequenz.api.common.v1.microgrid.components.grid_pb2
import frequenz.api.common.v1.microgrid.components.inverter_pb2
import frequenz.api.common.v1.microgrid.components.transformer_pb2
import frequenz.api.common.v1.microgrid.lifetime_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ComponentCategory:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentCategory.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_CATEGORY_UNSPECIFIED: _ComponentCategory.ValueType  # 0
    """The component category is unspecified. This should not be used."""
    COMPONENT_CATEGORY_GRID: _ComponentCategory.ValueType  # 1
    """The point where the local microgrid is connected to the grid."""
    COMPONENT_CATEGORY_METER: _ComponentCategory.ValueType  # 2
    """A meter, for measuring electrical metrics, e.g., current, voltage, etc."""
    COMPONENT_CATEGORY_INVERTER: _ComponentCategory.ValueType  # 3
    """An electricity generator, with batteries or solar energy."""
    COMPONENT_CATEGORY_CONVERTER: _ComponentCategory.ValueType  # 4
    """A DC-DC converter."""
    COMPONENT_CATEGORY_BATTERY: _ComponentCategory.ValueType  # 5
    """A storage system for electrical energy, used by inverters."""
    COMPONENT_CATEGORY_EV_CHARGER: _ComponentCategory.ValueType  # 6
    """A station for charging electrical vehicles."""
    COMPONENT_CATEGORY_CRYPTO_MINER: _ComponentCategory.ValueType  # 8
    """A crypto miner."""
    COMPONENT_CATEGORY_ELECTROLYZER: _ComponentCategory.ValueType  # 9
    """An electrolyzer for converting water into hydrogen and oxygen."""
    COMPONENT_CATEGORY_CHP: _ComponentCategory.ValueType  # 10
    """A heat and power combustion plant (CHP stands for combined heat and power)."""
    COMPONENT_CATEGORY_RELAY: _ComponentCategory.ValueType  # 11
    """A relay.
    Relays generally have two states: open (connected) and closed
    (disconnected).
    They are generally placed in front of a component, e.g., an inverter, to
    control whether the component is connected to the grid or not.
    """
    COMPONENT_CATEGORY_PRECHARGER: _ComponentCategory.ValueType  # 12
    """A precharge module.
    Precharging involves gradually ramping up the DC voltage to prevent any
    potential damage to sensitive electrical components like capacitors.
    While many inverters and batteries come equipped with in-built precharging
    mechanisms, some may lack this feature. In such cases, we need to use
    external precharging modules.
    """
    COMPONENT_CATEGORY_FUSE: _ComponentCategory.ValueType  # 13
    """A fuse.
    Fuses are used to protect electrical components from overcurrents.
    """
    COMPONENT_CATEGORY_VOLTAGE_TRANSFORMER: _ComponentCategory.ValueType  # 14
    """A voltage transformer.
    Voltage transformers are used to step up or step down the voltage, keeping
    the power somewhat constant by increasing or decreasing the current.
    If voltage is stepped up, current is stepped down, and vice versa.
    Note that voltage transformers have efficiency losses, so the output power
    is always less than the input power.
    """
    COMPONENT_CATEGORY_HVAC: _ComponentCategory.ValueType  # 15
    """An HVAC (Heating, Ventilation, and Air Conditioning) system."""

class ComponentCategory(_ComponentCategory, metaclass=_ComponentCategoryEnumTypeWrapper):
    """Enumrated component categories."""

COMPONENT_CATEGORY_UNSPECIFIED: ComponentCategory.ValueType  # 0
"""The component category is unspecified. This should not be used."""
COMPONENT_CATEGORY_GRID: ComponentCategory.ValueType  # 1
"""The point where the local microgrid is connected to the grid."""
COMPONENT_CATEGORY_METER: ComponentCategory.ValueType  # 2
"""A meter, for measuring electrical metrics, e.g., current, voltage, etc."""
COMPONENT_CATEGORY_INVERTER: ComponentCategory.ValueType  # 3
"""An electricity generator, with batteries or solar energy."""
COMPONENT_CATEGORY_CONVERTER: ComponentCategory.ValueType  # 4
"""A DC-DC converter."""
COMPONENT_CATEGORY_BATTERY: ComponentCategory.ValueType  # 5
"""A storage system for electrical energy, used by inverters."""
COMPONENT_CATEGORY_EV_CHARGER: ComponentCategory.ValueType  # 6
"""A station for charging electrical vehicles."""
COMPONENT_CATEGORY_CRYPTO_MINER: ComponentCategory.ValueType  # 8
"""A crypto miner."""
COMPONENT_CATEGORY_ELECTROLYZER: ComponentCategory.ValueType  # 9
"""An electrolyzer for converting water into hydrogen and oxygen."""
COMPONENT_CATEGORY_CHP: ComponentCategory.ValueType  # 10
"""A heat and power combustion plant (CHP stands for combined heat and power)."""
COMPONENT_CATEGORY_RELAY: ComponentCategory.ValueType  # 11
"""A relay.
Relays generally have two states: open (connected) and closed
(disconnected).
They are generally placed in front of a component, e.g., an inverter, to
control whether the component is connected to the grid or not.
"""
COMPONENT_CATEGORY_PRECHARGER: ComponentCategory.ValueType  # 12
"""A precharge module.
Precharging involves gradually ramping up the DC voltage to prevent any
potential damage to sensitive electrical components like capacitors.
While many inverters and batteries come equipped with in-built precharging
mechanisms, some may lack this feature. In such cases, we need to use
external precharging modules.
"""
COMPONENT_CATEGORY_FUSE: ComponentCategory.ValueType  # 13
"""A fuse.
Fuses are used to protect electrical components from overcurrents.
"""
COMPONENT_CATEGORY_VOLTAGE_TRANSFORMER: ComponentCategory.ValueType  # 14
"""A voltage transformer.
Voltage transformers are used to step up or step down the voltage, keeping
the power somewhat constant by increasing or decreasing the current.
If voltage is stepped up, current is stepped down, and vice versa.
Note that voltage transformers have efficiency losses, so the output power
is always less than the input power.
"""
COMPONENT_CATEGORY_HVAC: ComponentCategory.ValueType  # 15
"""An HVAC (Heating, Ventilation, and Air Conditioning) system."""
global___ComponentCategory = ComponentCategory

class _ComponentStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_STATUS_UNSPECIFIED: _ComponentStatus.ValueType  # 0
    """The status is unspecified. This should not be used."""
    COMPONENT_STATUS_ACTIVE: _ComponentStatus.ValueType  # 1
    """The component is active."""
    COMPONENT_STATUS_INACTIVE: _ComponentStatus.ValueType  # 2
    """The component is inactive."""

class ComponentStatus(_ComponentStatus, metaclass=_ComponentStatusEnumTypeWrapper):
    """ComponentStatus defines the possible statuses for a component.

    !!! note
        The status indicates the status set by the user via the user interface.
        The status is not yet included in the Component messages and should be
        added.
    """

COMPONENT_STATUS_UNSPECIFIED: ComponentStatus.ValueType  # 0
"""The status is unspecified. This should not be used."""
COMPONENT_STATUS_ACTIVE: ComponentStatus.ValueType  # 1
"""The component is active."""
COMPONENT_STATUS_INACTIVE: ComponentStatus.ValueType  # 2
"""The component is inactive."""
global___ComponentStatus = ComponentStatus

class _ComponentStateCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentStateCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentStateCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_STATE_CODE_UNSPECIFIED: _ComponentStateCode.ValueType  # 0
    """Default value when the component state is not explicitly set.
    This is the zero value of the enum.
    """
    COMPONENT_STATE_CODE_UNKNOWN: _ComponentStateCode.ValueType  # 1
    """State when the component is in an unknown or undefined condition.
    This is used when the sender is unable to classify the component into any
    other state.
    """
    COMPONENT_STATE_CODE_UNAVAILABLE: _ComponentStateCode.ValueType  # 2
    """State when the component is temporarily unavailable for operation."""
    COMPONENT_STATE_CODE_SWITCHING_OFF: _ComponentStateCode.ValueType  # 3
    """State when the component is in the process of switching off."""
    COMPONENT_STATE_CODE_OFF: _ComponentStateCode.ValueType  # 4
    """State when the component has successfully switched off."""
    COMPONENT_STATE_CODE_SWITCHING_ON: _ComponentStateCode.ValueType  # 5
    """State when the component is in the process of switching on from an off
    state.
    """
    COMPONENT_STATE_CODE_STANDBY: _ComponentStateCode.ValueType  # 6
    """State when the component is in standby mode, and not immediately ready for
    immediate operations.
    """
    COMPONENT_STATE_CODE_READY: _ComponentStateCode.ValueType  # 7
    """State when the component is fully operational and ready for use."""
    COMPONENT_STATE_CODE_CHARGING: _ComponentStateCode.ValueType  # 8
    """State when the component is actively consuming energy."""
    COMPONENT_STATE_CODE_DISCHARGING: _ComponentStateCode.ValueType  # 9
    """State when the component is actively producing or releasing energy."""
    COMPONENT_STATE_CODE_ERROR: _ComponentStateCode.ValueType  # 10
    """State when the component is in an error state and may need attention."""
    COMPONENT_STATE_CODE_EV_CHARGING_CABLE_UNPLUGGED: _ComponentStateCode.ValueType  # 20
    """The Electric Vehicle (EV) charging cable is unplugged from the charging
    station.
    """
    COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_STATION: _ComponentStateCode.ValueType  # 21
    """The EV charging cable is plugged into the charging station."""
    COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_EV: _ComponentStateCode.ValueType  # 22
    """The EV charging cable is plugged into the vehicle."""
    COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_STATION: _ComponentStateCode.ValueType  # 23
    """The EV charging cable is locked at the charging station end, indicating
    readiness for charging.
    """
    COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_EV: _ComponentStateCode.ValueType  # 24
    """The EV charging cable is locked at the vehicle end, indicating that
    charging is active.
    """
    COMPONENT_STATE_CODE_RELAY_OPEN: _ComponentStateCode.ValueType  # 30
    """The relay is in an open state, meaning no current can flow through."""
    COMPONENT_STATE_CODE_RELAY_CLOSED: _ComponentStateCode.ValueType  # 31
    """The relay is in a closed state, allowing current to flow."""
    COMPONENT_STATE_CODE_PRECHARGER_OPEN: _ComponentStateCode.ValueType  # 40
    """The precharger circuit is open, meaning it's not currently active."""
    COMPONENT_STATE_CODE_PRECHARGER_PRECHARGING: _ComponentStateCode.ValueType  # 41
    """The precharger is in a precharging state, preparing the main circuit for
    activation.
    """
    COMPONENT_STATE_CODE_PRECHARGER_CLOSED: _ComponentStateCode.ValueType  # 42
    """The precharger circuit is closed, allowing full current to flow to the main
    circuit.
    """

class ComponentStateCode(_ComponentStateCode, metaclass=_ComponentStateCodeEnumTypeWrapper):
    """Enum to represent the various states that a component can be in.
    This enum is unified across all component categories for consistency.
    """

COMPONENT_STATE_CODE_UNSPECIFIED: ComponentStateCode.ValueType  # 0
"""Default value when the component state is not explicitly set.
This is the zero value of the enum.
"""
COMPONENT_STATE_CODE_UNKNOWN: ComponentStateCode.ValueType  # 1
"""State when the component is in an unknown or undefined condition.
This is used when the sender is unable to classify the component into any
other state.
"""
COMPONENT_STATE_CODE_UNAVAILABLE: ComponentStateCode.ValueType  # 2
"""State when the component is temporarily unavailable for operation."""
COMPONENT_STATE_CODE_SWITCHING_OFF: ComponentStateCode.ValueType  # 3
"""State when the component is in the process of switching off."""
COMPONENT_STATE_CODE_OFF: ComponentStateCode.ValueType  # 4
"""State when the component has successfully switched off."""
COMPONENT_STATE_CODE_SWITCHING_ON: ComponentStateCode.ValueType  # 5
"""State when the component is in the process of switching on from an off
state.
"""
COMPONENT_STATE_CODE_STANDBY: ComponentStateCode.ValueType  # 6
"""State when the component is in standby mode, and not immediately ready for
immediate operations.
"""
COMPONENT_STATE_CODE_READY: ComponentStateCode.ValueType  # 7
"""State when the component is fully operational and ready for use."""
COMPONENT_STATE_CODE_CHARGING: ComponentStateCode.ValueType  # 8
"""State when the component is actively consuming energy."""
COMPONENT_STATE_CODE_DISCHARGING: ComponentStateCode.ValueType  # 9
"""State when the component is actively producing or releasing energy."""
COMPONENT_STATE_CODE_ERROR: ComponentStateCode.ValueType  # 10
"""State when the component is in an error state and may need attention."""
COMPONENT_STATE_CODE_EV_CHARGING_CABLE_UNPLUGGED: ComponentStateCode.ValueType  # 20
"""The Electric Vehicle (EV) charging cable is unplugged from the charging
station.
"""
COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_STATION: ComponentStateCode.ValueType  # 21
"""The EV charging cable is plugged into the charging station."""
COMPONENT_STATE_CODE_EV_CHARGING_CABLE_PLUGGED_AT_EV: ComponentStateCode.ValueType  # 22
"""The EV charging cable is plugged into the vehicle."""
COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_STATION: ComponentStateCode.ValueType  # 23
"""The EV charging cable is locked at the charging station end, indicating
readiness for charging.
"""
COMPONENT_STATE_CODE_EV_CHARGING_CABLE_LOCKED_AT_EV: ComponentStateCode.ValueType  # 24
"""The EV charging cable is locked at the vehicle end, indicating that
charging is active.
"""
COMPONENT_STATE_CODE_RELAY_OPEN: ComponentStateCode.ValueType  # 30
"""The relay is in an open state, meaning no current can flow through."""
COMPONENT_STATE_CODE_RELAY_CLOSED: ComponentStateCode.ValueType  # 31
"""The relay is in a closed state, allowing current to flow."""
COMPONENT_STATE_CODE_PRECHARGER_OPEN: ComponentStateCode.ValueType  # 40
"""The precharger circuit is open, meaning it's not currently active."""
COMPONENT_STATE_CODE_PRECHARGER_PRECHARGING: ComponentStateCode.ValueType  # 41
"""The precharger is in a precharging state, preparing the main circuit for
activation.
"""
COMPONENT_STATE_CODE_PRECHARGER_CLOSED: ComponentStateCode.ValueType  # 42
"""The precharger circuit is closed, allowing full current to flow to the main
circuit.
"""
global___ComponentStateCode = ComponentStateCode

class _ComponentErrorCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentErrorCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_ERROR_CODE_UNSPECIFIED: _ComponentErrorCode.ValueType  # 0
    """Default value. No specific error is specified."""
    COMPONENT_ERROR_CODE_UNKNOWN: _ComponentErrorCode.ValueType  # 1
    """The component is reporting an unknown or an undefined error, and the sender
    cannot parse the component error to any of the variants below.
    """
    COMPONENT_ERROR_CODE_SWITCH_ON_FAULT: _ComponentErrorCode.ValueType  # 2
    """Error indicating that the component could not be switched on."""
    COMPONENT_ERROR_CODE_UNDERVOLTAGE: _ComponentErrorCode.ValueType  # 3
    """Error indicating that the component is operating under the minimum rated
    voltage.
    """
    COMPONENT_ERROR_CODE_OVERVOLTAGE: _ComponentErrorCode.ValueType  # 4
    """Error indicating that the component is operating over the maximum rated
     voltage.
    """
    COMPONENT_ERROR_CODE_OVERCURRENT: _ComponentErrorCode.ValueType  # 5
    """Error indicating that the component is drawing more current than the
    maximum rated value.
    """
    COMPONENT_ERROR_CODE_OVERCURRENT_CHARGING: _ComponentErrorCode.ValueType  # 6
    """Error indicating that the component's consumption current is over the
    maximum rated value during charging.
    """
    COMPONENT_ERROR_CODE_OVERCURRENT_DISCHARGING: _ComponentErrorCode.ValueType  # 7
    """Error indicating that the component's production current is over the
    maximum rated value during discharging.
    """
    COMPONENT_ERROR_CODE_OVERTEMPERATURE: _ComponentErrorCode.ValueType  # 8
    """Error indicating that the component is operating over the maximum rated
    temperature.
    """
    COMPONENT_ERROR_CODE_UNDERTEMPERATURE: _ComponentErrorCode.ValueType  # 9
    """Error indicating that the component is operating under the minimum rated
    temperature.
    """
    COMPONENT_ERROR_CODE_HIGH_HUMIDITY: _ComponentErrorCode.ValueType  # 10
    """Error indicating that the component is exposed to high humidity levels over
    the maximum rated value.
    """
    COMPONENT_ERROR_CODE_FUSE_ERROR: _ComponentErrorCode.ValueType  # 11
    """Error indicating that the component's fuse has blown."""
    COMPONENT_ERROR_CODE_PRECHARGE_ERROR: _ComponentErrorCode.ValueType  # 12
    """Error indicating that the component's precharge unit has failed."""
    COMPONENT_ERROR_CODE_PLAUSIBILITY_ERROR: _ComponentErrorCode.ValueType  # 13
    """Error indicating plausibility issues within the system involving this
    component.
    """
    COMPONENT_ERROR_CODE_UNDERVOLTAGE_SHUTDOWN: _ComponentErrorCode.ValueType  # 14
    """Error indicating system shutdown due to undervoltage involving this
    component.
    """
    COMPONENT_ERROR_CODE_EV_UNEXPECTED_PILOT_FAILURE: _ComponentErrorCode.ValueType  # 15
    """Error indicating unexpected pilot failure in an electric vehicle (EV)
    component.
    """
    COMPONENT_ERROR_CODE_FAULT_CURRENT: _ComponentErrorCode.ValueType  # 16
    """Error indicating fault current detected in the component."""
    COMPONENT_ERROR_CODE_SHORT_CIRCUIT: _ComponentErrorCode.ValueType  # 17
    """Error indicating a short circuit detected in the component."""
    COMPONENT_ERROR_CODE_CONFIG_ERROR: _ComponentErrorCode.ValueType  # 18
    """Error indicating a configuration error related to the component."""
    COMPONENT_ERROR_CODE_ILLEGAL_COMPONENT_STATE_CODE_REQUESTED: _ComponentErrorCode.ValueType  # 19
    """Error indicating an illegal state requested for the component."""
    COMPONENT_ERROR_CODE_HARDWARE_INACCESSIBLE: _ComponentErrorCode.ValueType  # 20
    """Error indicating that the hardware of the component is inaccessible."""
    COMPONENT_ERROR_CODE_INTERNAL: _ComponentErrorCode.ValueType  # 21
    """Error indicating an internal error within the component."""
    COMPONENT_ERROR_CODE_UNAUTHORIZED: _ComponentErrorCode.ValueType  # 22
    """Error indicating that the component is unauthorized to perform the
    last requested action.
    """
    COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_STATION: _ComponentErrorCode.ValueType  # 40
    """Error indicating electric vehicle (EV) cable was abruptly unplugged from
    the charging station.
    """
    COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_EV: _ComponentErrorCode.ValueType  # 41
    """Error indicating electric vehicle (EV) cable was abruptly unplugged from
    the vehicle.
    """
    COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_LOCK_FAILED: _ComponentErrorCode.ValueType  # 42
    """Error indicating electric vehicle (EV) cable lock failure."""
    COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_INVALID: _ComponentErrorCode.ValueType  # 43
    """Error indicating an invalid electric vehicle (EV) cable."""
    COMPONENT_ERROR_CODE_EV_CONSUMER_INCOMPATIBLE: _ComponentErrorCode.ValueType  # 44
    """Error indicating an incompatible electric vehicle (EV) plug."""
    COMPONENT_ERROR_CODE_BATTERY_IMBALANCE: _ComponentErrorCode.ValueType  # 50
    """Error indicating a battery system imbalance."""
    COMPONENT_ERROR_CODE_BATTERY_LOW_SOH: _ComponentErrorCode.ValueType  # 51
    """Error indicating a low state of health (SOH) detected in the battery."""
    COMPONENT_ERROR_CODE_BATTERY_BLOCK_ERROR: _ComponentErrorCode.ValueType  # 52
    """Error indicating a battery block error."""
    COMPONENT_ERROR_CODE_BATTERY_CONTROLLER_ERROR: _ComponentErrorCode.ValueType  # 53
    """Error indicating a battery controller error."""
    COMPONENT_ERROR_CODE_BATTERY_RELAY_ERROR: _ComponentErrorCode.ValueType  # 54
    """Error indicating a battery relay error."""
    COMPONENT_ERROR_CODE_BATTERY_CALIBRATION_NEEDED: _ComponentErrorCode.ValueType  # 56
    """Error indicating that battery calibration is needed."""
    COMPONENT_ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED: _ComponentErrorCode.ValueType  # 60
    """Error indicating that the relays have been cycled for the maximum number of
    times.
    """

class ComponentErrorCode(_ComponentErrorCode, metaclass=_ComponentErrorCodeEnumTypeWrapper):
    """A representation of all possible errors that can occur across all component
    categories.
    """

COMPONENT_ERROR_CODE_UNSPECIFIED: ComponentErrorCode.ValueType  # 0
"""Default value. No specific error is specified."""
COMPONENT_ERROR_CODE_UNKNOWN: ComponentErrorCode.ValueType  # 1
"""The component is reporting an unknown or an undefined error, and the sender
cannot parse the component error to any of the variants below.
"""
COMPONENT_ERROR_CODE_SWITCH_ON_FAULT: ComponentErrorCode.ValueType  # 2
"""Error indicating that the component could not be switched on."""
COMPONENT_ERROR_CODE_UNDERVOLTAGE: ComponentErrorCode.ValueType  # 3
"""Error indicating that the component is operating under the minimum rated
voltage.
"""
COMPONENT_ERROR_CODE_OVERVOLTAGE: ComponentErrorCode.ValueType  # 4
"""Error indicating that the component is operating over the maximum rated
 voltage.
"""
COMPONENT_ERROR_CODE_OVERCURRENT: ComponentErrorCode.ValueType  # 5
"""Error indicating that the component is drawing more current than the
maximum rated value.
"""
COMPONENT_ERROR_CODE_OVERCURRENT_CHARGING: ComponentErrorCode.ValueType  # 6
"""Error indicating that the component's consumption current is over the
maximum rated value during charging.
"""
COMPONENT_ERROR_CODE_OVERCURRENT_DISCHARGING: ComponentErrorCode.ValueType  # 7
"""Error indicating that the component's production current is over the
maximum rated value during discharging.
"""
COMPONENT_ERROR_CODE_OVERTEMPERATURE: ComponentErrorCode.ValueType  # 8
"""Error indicating that the component is operating over the maximum rated
temperature.
"""
COMPONENT_ERROR_CODE_UNDERTEMPERATURE: ComponentErrorCode.ValueType  # 9
"""Error indicating that the component is operating under the minimum rated
temperature.
"""
COMPONENT_ERROR_CODE_HIGH_HUMIDITY: ComponentErrorCode.ValueType  # 10
"""Error indicating that the component is exposed to high humidity levels over
the maximum rated value.
"""
COMPONENT_ERROR_CODE_FUSE_ERROR: ComponentErrorCode.ValueType  # 11
"""Error indicating that the component's fuse has blown."""
COMPONENT_ERROR_CODE_PRECHARGE_ERROR: ComponentErrorCode.ValueType  # 12
"""Error indicating that the component's precharge unit has failed."""
COMPONENT_ERROR_CODE_PLAUSIBILITY_ERROR: ComponentErrorCode.ValueType  # 13
"""Error indicating plausibility issues within the system involving this
component.
"""
COMPONENT_ERROR_CODE_UNDERVOLTAGE_SHUTDOWN: ComponentErrorCode.ValueType  # 14
"""Error indicating system shutdown due to undervoltage involving this
component.
"""
COMPONENT_ERROR_CODE_EV_UNEXPECTED_PILOT_FAILURE: ComponentErrorCode.ValueType  # 15
"""Error indicating unexpected pilot failure in an electric vehicle (EV)
component.
"""
COMPONENT_ERROR_CODE_FAULT_CURRENT: ComponentErrorCode.ValueType  # 16
"""Error indicating fault current detected in the component."""
COMPONENT_ERROR_CODE_SHORT_CIRCUIT: ComponentErrorCode.ValueType  # 17
"""Error indicating a short circuit detected in the component."""
COMPONENT_ERROR_CODE_CONFIG_ERROR: ComponentErrorCode.ValueType  # 18
"""Error indicating a configuration error related to the component."""
COMPONENT_ERROR_CODE_ILLEGAL_COMPONENT_STATE_CODE_REQUESTED: ComponentErrorCode.ValueType  # 19
"""Error indicating an illegal state requested for the component."""
COMPONENT_ERROR_CODE_HARDWARE_INACCESSIBLE: ComponentErrorCode.ValueType  # 20
"""Error indicating that the hardware of the component is inaccessible."""
COMPONENT_ERROR_CODE_INTERNAL: ComponentErrorCode.ValueType  # 21
"""Error indicating an internal error within the component."""
COMPONENT_ERROR_CODE_UNAUTHORIZED: ComponentErrorCode.ValueType  # 22
"""Error indicating that the component is unauthorized to perform the
last requested action.
"""
COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_STATION: ComponentErrorCode.ValueType  # 40
"""Error indicating electric vehicle (EV) cable was abruptly unplugged from
the charging station.
"""
COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_UNPLUGGED_FROM_EV: ComponentErrorCode.ValueType  # 41
"""Error indicating electric vehicle (EV) cable was abruptly unplugged from
the vehicle.
"""
COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_LOCK_FAILED: ComponentErrorCode.ValueType  # 42
"""Error indicating electric vehicle (EV) cable lock failure."""
COMPONENT_ERROR_CODE_EV_CHARGING_CABLE_INVALID: ComponentErrorCode.ValueType  # 43
"""Error indicating an invalid electric vehicle (EV) cable."""
COMPONENT_ERROR_CODE_EV_CONSUMER_INCOMPATIBLE: ComponentErrorCode.ValueType  # 44
"""Error indicating an incompatible electric vehicle (EV) plug."""
COMPONENT_ERROR_CODE_BATTERY_IMBALANCE: ComponentErrorCode.ValueType  # 50
"""Error indicating a battery system imbalance."""
COMPONENT_ERROR_CODE_BATTERY_LOW_SOH: ComponentErrorCode.ValueType  # 51
"""Error indicating a low state of health (SOH) detected in the battery."""
COMPONENT_ERROR_CODE_BATTERY_BLOCK_ERROR: ComponentErrorCode.ValueType  # 52
"""Error indicating a battery block error."""
COMPONENT_ERROR_CODE_BATTERY_CONTROLLER_ERROR: ComponentErrorCode.ValueType  # 53
"""Error indicating a battery controller error."""
COMPONENT_ERROR_CODE_BATTERY_RELAY_ERROR: ComponentErrorCode.ValueType  # 54
"""Error indicating a battery relay error."""
COMPONENT_ERROR_CODE_BATTERY_CALIBRATION_NEEDED: ComponentErrorCode.ValueType  # 56
"""Error indicating that battery calibration is needed."""
COMPONENT_ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED: ComponentErrorCode.ValueType  # 60
"""Error indicating that the relays have been cycled for the maximum number of
times.
"""
global___ComponentErrorCode = ComponentErrorCode

@typing.final
class ComponentCategoryMetadataVariant(google.protobuf.message.Message):
    """Metadata specific to a microgrid component."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BATTERY_FIELD_NUMBER: builtins.int
    EV_CHARGER_FIELD_NUMBER: builtins.int
    FUSE_FIELD_NUMBER: builtins.int
    GRID_FIELD_NUMBER: builtins.int
    INVERTER_FIELD_NUMBER: builtins.int
    VOLTAGE_TRANSFORMER_FIELD_NUMBER: builtins.int
    @property
    def battery(self) -> frequenz.api.common.v1.microgrid.components.battery_pb2.Battery: ...
    @property
    def ev_charger(self) -> frequenz.api.common.v1.microgrid.components.ev_charger_pb2.EvCharger: ...
    @property
    def fuse(self) -> frequenz.api.common.v1.microgrid.components.fuse_pb2.Fuse: ...
    @property
    def grid(self) -> frequenz.api.common.v1.microgrid.components.grid_pb2.GridConnectionPoint: ...
    @property
    def inverter(self) -> frequenz.api.common.v1.microgrid.components.inverter_pb2.Inverter: ...
    @property
    def voltage_transformer(self) -> frequenz.api.common.v1.microgrid.components.transformer_pb2.VoltageTransformer: ...
    def __init__(
        self,
        *,
        battery: frequenz.api.common.v1.microgrid.components.battery_pb2.Battery | None = ...,
        ev_charger: frequenz.api.common.v1.microgrid.components.ev_charger_pb2.EvCharger | None = ...,
        fuse: frequenz.api.common.v1.microgrid.components.fuse_pb2.Fuse | None = ...,
        grid: frequenz.api.common.v1.microgrid.components.grid_pb2.GridConnectionPoint | None = ...,
        inverter: frequenz.api.common.v1.microgrid.components.inverter_pb2.Inverter | None = ...,
        voltage_transformer: frequenz.api.common.v1.microgrid.components.transformer_pb2.VoltageTransformer | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["battery", b"battery", "ev_charger", b"ev_charger", "fuse", b"fuse", "grid", b"grid", "inverter", b"inverter", "metadata", b"metadata", "voltage_transformer", b"voltage_transformer"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["battery", b"battery", "ev_charger", b"ev_charger", "fuse", b"fuse", "grid", b"grid", "inverter", b"inverter", "metadata", b"metadata", "voltage_transformer", b"voltage_transformer"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["metadata", b"metadata"]) -> typing.Literal["battery", "ev_charger", "fuse", "grid", "inverter", "voltage_transformer"] | None: ...

global___ComponentCategoryMetadataVariant = ComponentCategoryMetadataVariant

@typing.final
class Component(google.protobuf.message.Message):
    """Microgrid electrical component details."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    CATEGORY_TYPE_FIELD_NUMBER: builtins.int
    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_NAME_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    METRIC_CONFIG_BOUNDS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The component ID."""
    microgrid_id: builtins.int
    """Unique identifier of the parent microgrid_id."""
    name: builtins.str
    """The component name."""
    category: global___ComponentCategory.ValueType
    """The component category. E.g., Inverter, Battery, etc."""
    manufacturer: builtins.str
    """The component manufacturer."""
    model_name: builtins.str
    """The model name of the component."""
    status: global___ComponentStatus.ValueType
    """The status of the component."""
    @property
    def category_type(self) -> global___ComponentCategoryMetadataVariant:
        """The metadata specific to the component category type."""

    @property
    def operational_lifetime(self) -> frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the component."""

    @property
    def metric_config_bounds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MetricConfigBounds]:
        """List of rated bounds present for the component identified by Metric."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        name: builtins.str = ...,
        category: global___ComponentCategory.ValueType = ...,
        category_type: global___ComponentCategoryMetadataVariant | None = ...,
        manufacturer: builtins.str = ...,
        model_name: builtins.str = ...,
        status: global___ComponentStatus.ValueType = ...,
        operational_lifetime: frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime | None = ...,
        metric_config_bounds: collections.abc.Iterable[global___MetricConfigBounds] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["category_type", b"category_type", "operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["category", b"category", "category_type", b"category_type", "id", b"id", "manufacturer", b"manufacturer", "metric_config_bounds", b"metric_config_bounds", "microgrid_id", b"microgrid_id", "model_name", b"model_name", "name", b"name", "operational_lifetime", b"operational_lifetime", "status", b"status"]) -> None: ...

global___Component = Component

@typing.final
class MetricConfigBounds(google.protobuf.message.Message):
    """MetricConfigBounds describes a set of limits for a specific metric consisting
    of a lower and upper bound for said metric.

    This can be used for example to specify an allowed range of power output
    for a component.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METRIC_FIELD_NUMBER: builtins.int
    CONFIG_BOUNDS_FIELD_NUMBER: builtins.int
    metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType
    """Metric type the config bounds are for"""
    @property
    def config_bounds(self) -> frequenz.api.common.v1.metrics.bounds_pb2.Bounds:
        """The set of bounds for the specified metric.

        This contains the lower and upper bounds for said metric.
        Sources these may be derived from include the component configuration,
        manufacturers limits, and limits of other devices.
        """

    def __init__(
        self,
        *,
        metric: frequenz.api.common.v1.metrics.metric_sample_pb2.Metric.ValueType = ...,
        config_bounds: frequenz.api.common.v1.metrics.bounds_pb2.Bounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_bounds", b"config_bounds"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_bounds", b"config_bounds", "metric", b"metric"]) -> None: ...

global___MetricConfigBounds = MetricConfigBounds

@typing.final
class ComponentConnection(google.protobuf.message.Message):
    """ComponentConnection describes a single electrical link between two components
    within a microgrid, effectively representing the physical wiring as viewed
    from the grid connection point, if one exists, or from the islanding point,
    in case of an islanded microgrids.

    !!! note "Physical Representation"
        This message is not about data flow but rather about the physical
        electrical connections between components. Therefore, the IDs for the
        source and destination components correspond to the actual setup within
        the microgrid.

    !!! note "Direction"
        The direction of the connection follows the flow of current away from the
        grid connection point, or in case of islands, away from the islanding
        point. This direction is aligned with positive current according to the
        [Passive Sign Convention]
        (https://en.wikipedia.org/wiki/Passive_sign_convention).

    !!! info "Historical Data"
        The timestamps of when a connection was created and terminated allows for
        tracking the changes over time to a microgrid, providing insights into
        when and how the microgrid infrastructure has been modified.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_COMPONENT_ID_FIELD_NUMBER: builtins.int
    DESTINATION_COMPONENT_ID_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    source_component_id: builtins.int
    """Unique identifier of the component where the connection originates. This is
    aligned with the direction of current flow away from the grid connection
    point, or in case of islands, away from the islanding point.
    """
    destination_component_id: builtins.int
    """Unique ID of the component where the connection terminates. This is the
    component towards which the current flows.
    """
    @property
    def operational_lifetime(self) -> frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the connection."""

    def __init__(
        self,
        *,
        source_component_id: builtins.int = ...,
        destination_component_id: builtins.int = ...,
        operational_lifetime: frequenz.api.common.v1.microgrid.lifetime_pb2.Lifetime | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["destination_component_id", b"destination_component_id", "operational_lifetime", b"operational_lifetime", "source_component_id", b"source_component_id"]) -> None: ...

global___ComponentConnection = ComponentConnection

@typing.final
class ComponentData(google.protobuf.message.Message):
    """ComponentData message aggregates multiple metrics, operational states, and
    errors, related to a specific microgrid component.

    !!! example
      Example output of a component data message:
      ```
       {
         component_id: 13,
         metric_samples: [
           /* list of metrics for multiple timestamps */
           {
             sampled_at: "2023-10-01T00:00:00Z",
             metric: "DC_VOLTAGE_V",
             value: {},
             bounds: {},
           },
           {
             sampled_at: "2023-10-01T00:00:00Z",
             metric: "DC_VOLTAGE_V",
             value: {},
             bounds: {},
           }
         ],
         states: [
           /* list of states for multiple timestamps */
           {
             sampled_at: "2023-10-01T00:00:00Z",
             states: [],
             warnings: [],
             errors: [],
           },
           {
             sampled_at: "2023-10-01T00:00:00Z",
             states: [],
             warnings: [],
             errors: [],
           },
         ]
       }
     ```
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_ID_FIELD_NUMBER: builtins.int
    METRIC_SAMPLES_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    component_id: builtins.int
    """The ID of the microgrid component."""
    @property
    def metric_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1.metrics.metric_sample_pb2.MetricSample]:
        """List of measurements for a metric of the specific microgrid component."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ComponentState]:
        """List of states of a specific microgrid component."""

    def __init__(
        self,
        *,
        component_id: builtins.int = ...,
        metric_samples: collections.abc.Iterable[frequenz.api.common.v1.metrics.metric_sample_pb2.MetricSample] | None = ...,
        states: collections.abc.Iterable[global___ComponentState] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_id", b"component_id", "metric_samples", b"metric_samples", "states", b"states"]) -> None: ...

global___ComponentData = ComponentData

@typing.final
class ComponentState(google.protobuf.message.Message):
    """Representation of a component state and errors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLED_AT_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    WARNINGS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def sampled_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The time at which the state was sampled."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___ComponentStateCode.ValueType]:
        """List of states of the microgrid component.

        !!! note
           The list will contain unique members. No state will exist twice in
           this list.
        """

    @property
    def warnings(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___ComponentErrorCode.ValueType]:
        """List of warnings for the microgrid component.

        !!! note
           This list may have warnings even if the component state is not in an
           error state.

        !!! note
           The list will contain unique members. No warning will exist twice in
           this list.
        """

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___ComponentErrorCode.ValueType]:
        """List of errors for the microgrid component.

        !!! note
           This list is expected to have errors if and only if the component is in
           an error state.

        !!! note
           The list will contain unique members. No error will exist twice in
           this list.
        """

    def __init__(
        self,
        *,
        sampled_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        states: collections.abc.Iterable[global___ComponentStateCode.ValueType] | None = ...,
        warnings: collections.abc.Iterable[global___ComponentErrorCode.ValueType] | None = ...,
        errors: collections.abc.Iterable[global___ComponentErrorCode.ValueType] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sampled_at", b"sampled_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors", "sampled_at", b"sampled_at", "states", b"states", "warnings", b"warnings"]) -> None: ...

global___ComponentState = ComponentState
