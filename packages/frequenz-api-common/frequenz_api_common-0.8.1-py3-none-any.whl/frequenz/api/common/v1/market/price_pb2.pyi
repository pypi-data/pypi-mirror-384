"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz definitions of price for electricity trading.

Copyright 2023 Frequenz Energy-as-a-Service GmbH

Licensed under the MIT License (the "License");
you may not use this file except in compliance with the License.
"""

import builtins
import frequenz.api.common.v1.types.decimal_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Price(google.protobuf.message.Message):
    """Represents a monetary price for electricity trading, including
    the amount and currency. The currency used should align with the
    delivery area's standard currency.

    !!! caution "Validation Required"
        It's essential to ensure that the currency aligns with the
        standard currency of the associated delivery area. Failure to
        do so may result in the API service rejecting the request due to currency
        mismatches.

    !!! info "Relation to Delivery Area"
        The currency specified is intrinsically related to the delivery area
        for the contract. Make sure the chosen currency is compatible with
        the delivery area's currency standards.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Currency:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _CurrencyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Price._Currency.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        CURRENCY_UNSPECIFIED: Price._Currency.ValueType  # 0
        CURRENCY_USD: Price._Currency.ValueType  # 1
        CURRENCY_CAD: Price._Currency.ValueType  # 2
        CURRENCY_EUR: Price._Currency.ValueType  # 3
        CURRENCY_GBP: Price._Currency.ValueType  # 4
        CURRENCY_CHF: Price._Currency.ValueType  # 5
        CURRENCY_CNY: Price._Currency.ValueType  # 6
        CURRENCY_JPY: Price._Currency.ValueType  # 7
        CURRENCY_AUD: Price._Currency.ValueType  # 8
        CURRENCY_NZD: Price._Currency.ValueType  # 9
        CURRENCY_SGD: Price._Currency.ValueType  # 10

    class Currency(_Currency, metaclass=_CurrencyEnumTypeWrapper):
        """List of supported currencies.

        !!! info "Extensibility"
            New currencies can be added to this enum to support additional markets.
        """

    CURRENCY_UNSPECIFIED: Price.Currency.ValueType  # 0
    CURRENCY_USD: Price.Currency.ValueType  # 1
    CURRENCY_CAD: Price.Currency.ValueType  # 2
    CURRENCY_EUR: Price.Currency.ValueType  # 3
    CURRENCY_GBP: Price.Currency.ValueType  # 4
    CURRENCY_CHF: Price.Currency.ValueType  # 5
    CURRENCY_CNY: Price.Currency.ValueType  # 6
    CURRENCY_JPY: Price.Currency.ValueType  # 7
    CURRENCY_AUD: Price.Currency.ValueType  # 8
    CURRENCY_NZD: Price.Currency.ValueType  # 9
    CURRENCY_SGD: Price.Currency.ValueType  # 10

    AMOUNT_FIELD_NUMBER: builtins.int
    CURRENCY_FIELD_NUMBER: builtins.int
    currency: global___Price.Currency.ValueType
    """The currency in which the price is denominated."""
    @property
    def amount(self) -> frequenz.api.common.v1.types.decimal_pb2.Decimal:
        """The amount of the price."""

    def __init__(
        self,
        *,
        amount: frequenz.api.common.v1.types.decimal_pb2.Decimal | None = ...,
        currency: global___Price.Currency.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["amount", b"amount"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["amount", b"amount", "currency", b"currency"]) -> None: ...

global___Price = Price
