"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz definitions of grids as entities participating in trading.

Copyright 2023 Frequenz Energy-as-a-Service GmbH

Licensed under the MIT License (the "License");
you may not use this file except in compliance with the License.
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _EnergyMarketCodeType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _EnergyMarketCodeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnergyMarketCodeType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ENERGY_MARKET_CODE_TYPE_UNSPECIFIED: _EnergyMarketCodeType.ValueType  # 0
    """Unspecified type. This value is a placeholder and should not be used."""
    ENERGY_MARKET_CODE_TYPE_EUROPE_EIC: _EnergyMarketCodeType.ValueType  # 1
    """European Energy Identification Code Standard."""
    ENERGY_MARKET_CODE_TYPE_US_NERC: _EnergyMarketCodeType.ValueType  # 2
    """North American Electric Reliability Corporation identifiers."""

class EnergyMarketCodeType(_EnergyMarketCodeType, metaclass=_EnergyMarketCodeTypeEnumTypeWrapper):
    """CodeType specifies the type of identification code used for uniquely
    identifying various entities such as delivery areas, market participants, and
    grid components within the energy market. This enumeration aims to offer
    compatibility across different jurisdictional standards.

    !!! note "Understanding Code Types"
        Different regions or countries may have their own standards for uniquely
        identifying various entities within the energy market. For example, in
        Europe, the Energy Identification Code (EIC) is commonly used for this
        purpose.

    !!! info "Extensibility"
        New code types can be added to this enum to accommodate additional
        regional standards, enhancing the API's adaptability.

    !!! caution "Validation Required"
        The chosen code type should correspond correctly with the `code` field in
        the relevant message objects, such as `DeliveryArea` or `Counterparty`.
        Failure to match the code type with the correct code could lead to
        processing errors.
    """

ENERGY_MARKET_CODE_TYPE_UNSPECIFIED: EnergyMarketCodeType.ValueType  # 0
"""Unspecified type. This value is a placeholder and should not be used."""
ENERGY_MARKET_CODE_TYPE_EUROPE_EIC: EnergyMarketCodeType.ValueType  # 1
"""European Energy Identification Code Standard."""
ENERGY_MARKET_CODE_TYPE_US_NERC: EnergyMarketCodeType.ValueType  # 2
"""North American Electric Reliability Corporation identifiers."""
global___EnergyMarketCodeType = EnergyMarketCodeType

@typing.final
class DeliveryArea(google.protobuf.message.Message):
    """DeliveryArea represents the geographical or administrative region, usually
    defined and maintained by a Transmission System Operator (TSO), where
    electricity deliveries for a contract occur.

    The concept is important to energy trading as it delineates the agreed-upon
    delivery location. Delivery areas can have different codes based on the//
    jurisdiction in which they operate.

    !!! note "Jurisdictional Differences"
        This is typically represented by specific codes according to local
        jurisdiction. In Europe, this is represented by an EIC
        (Energy Identification Code).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    CODE_TYPE_FIELD_NUMBER: builtins.int
    code: builtins.str
    """Code representing the unique identifier for the delivery area."""
    code_type: global___EnergyMarketCodeType.ValueType
    """Type of code used for identifying the delivery area itself."""
    def __init__(
        self,
        *,
        code: builtins.str = ...,
        code_type: global___EnergyMarketCodeType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "code_type", b"code_type"]) -> None: ...

global___DeliveryArea = DeliveryArea
