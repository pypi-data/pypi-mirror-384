"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains definitions for electrical metrics (AC and DC).

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import frequenz.api.common.metrics_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class DC(google.protobuf.message.Message):
    """Metrics of a DC electrical connection."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VOLTAGE_FIELD_NUMBER: builtins.int
    CURRENT_FIELD_NUMBER: builtins.int
    POWER_FIELD_NUMBER: builtins.int
    @property
    def voltage(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The DC voltage across the component.
        In Volt (V).
        """

    @property
    def current(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The DC current flowing away from the grid connection.
        In passive sign convention:
        +ve current means consumption, away from the grid.
        -ve current means supply into the grid.
        In Ampere (A).
        """

    @property
    def power(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The DC power flowing away from the grid connection.
        In passive sign convention:
        +ve power means consumption, away from the grid.
        -ve power means supply into the grid.
        In Watt (W).
        """

    def __init__(
        self,
        *,
        voltage: frequenz.api.common.metrics_pb2.Metric | None = ...,
        current: frequenz.api.common.metrics_pb2.Metric | None = ...,
        power: frequenz.api.common.metrics_pb2.Metric | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["current", b"current", "power", b"power", "voltage", b"voltage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["current", b"current", "power", b"power", "voltage", b"voltage"]) -> None: ...

global___DC = DC

@typing.final
class AC(google.protobuf.message.Message):
    """The current state and metrics of the electrical connections to the
    inverter.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ActiveEnergy(google.protobuf.message.Message):
        """The active energy the inverter is consuming or generating."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ENERGY_FIELD_NUMBER: builtins.int
        ENERGY_CONSUMED_FIELD_NUMBER: builtins.int
        ENERGY_DELIVERED_FIELD_NUMBER: builtins.int
        @property
        def energy(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The sum of the consumed and delivered energy.
            This is a signed value in passive sign convention: if more energy is
            consumed than delivered, this is a -ve number, otherwise +ve.
            In Watt-hour (Wh).
            """

        @property
        def energy_consumed(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The consumed energy.
            In Watt-hour (Wh).
            """

        @property
        def energy_delivered(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The delivered energy.
            In Watt-hour (Wh).
            """

        def __init__(
            self,
            *,
            energy: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_consumed: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_delivered: frequenz.api.common.metrics_pb2.Metric | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["energy", b"energy", "energy_consumed", b"energy_consumed", "energy_delivered", b"energy_delivered"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["energy", b"energy", "energy_consumed", b"energy_consumed", "energy_delivered", b"energy_delivered"]) -> None: ...

    @typing.final
    class ReactiveEnergy(google.protobuf.message.Message):
        """The reactive energy the inverter is consuming or generating."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ENERGY_FIELD_NUMBER: builtins.int
        ENERGY_CAPACITIVE_FIELD_NUMBER: builtins.int
        ENERGY_INDUCTIVE_FIELD_NUMBER: builtins.int
        @property
        def energy(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The sum of the capacitive and inductive energy.
            This is a signed value. If more energy is capacitive than inductive,
            this is a -ve number, otherwise +ve.
            In Volt-Ampere-hour (VArh).
            """

        @property
        def energy_capacitive(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The capacitive energy.
            In Volt-Ampere-hour (VArh).
            """

        @property
        def energy_inductive(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The inductive energy.
            In Volt-Ampere-hour (VArh).
            """

        def __init__(
            self,
            *,
            energy: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_capacitive: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_inductive: frequenz.api.common.metrics_pb2.Metric | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["energy", b"energy", "energy_capacitive", b"energy_capacitive", "energy_inductive", b"energy_inductive"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["energy", b"energy", "energy_capacitive", b"energy_capacitive", "energy_inductive", b"energy_inductive"]) -> None: ...

    @typing.final
    class Harmonics(google.protobuf.message.Message):
        """The harmonics of the fast Fourier transform of the instantaneous values
        and its total harmonic distortion.
        In percent (%).
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HARMONIC_1_FIELD_NUMBER: builtins.int
        HARMONIC_2_FIELD_NUMBER: builtins.int
        HARMONIC_3_FIELD_NUMBER: builtins.int
        HARMONIC_4_FIELD_NUMBER: builtins.int
        HARMONIC_5_FIELD_NUMBER: builtins.int
        HARMONIC_6_FIELD_NUMBER: builtins.int
        HARMONIC_7_FIELD_NUMBER: builtins.int
        HARMONIC_8_FIELD_NUMBER: builtins.int
        HARMONIC_9_FIELD_NUMBER: builtins.int
        HARMONIC_10_FIELD_NUMBER: builtins.int
        HARMONIC_11_FIELD_NUMBER: builtins.int
        harmonic_1: builtins.float
        harmonic_2: builtins.float
        harmonic_3: builtins.float
        harmonic_4: builtins.float
        harmonic_5: builtins.float
        harmonic_6: builtins.float
        harmonic_7: builtins.float
        harmonic_8: builtins.float
        harmonic_9: builtins.float
        harmonic_10: builtins.float
        harmonic_11: builtins.float
        def __init__(
            self,
            *,
            harmonic_1: builtins.float = ...,
            harmonic_2: builtins.float = ...,
            harmonic_3: builtins.float = ...,
            harmonic_4: builtins.float = ...,
            harmonic_5: builtins.float = ...,
            harmonic_6: builtins.float = ...,
            harmonic_7: builtins.float = ...,
            harmonic_8: builtins.float = ...,
            harmonic_9: builtins.float = ...,
            harmonic_10: builtins.float = ...,
            harmonic_11: builtins.float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["harmonic_1", b"harmonic_1", "harmonic_10", b"harmonic_10", "harmonic_11", b"harmonic_11", "harmonic_2", b"harmonic_2", "harmonic_3", b"harmonic_3", "harmonic_4", b"harmonic_4", "harmonic_5", b"harmonic_5", "harmonic_6", b"harmonic_6", "harmonic_7", b"harmonic_7", "harmonic_8", b"harmonic_8", "harmonic_9", b"harmonic_9"]) -> None: ...

    @typing.final
    class ACPhase(google.protobuf.message.Message):
        """AC metrics of a single phase."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VOLTAGE_FIELD_NUMBER: builtins.int
        CURRENT_FIELD_NUMBER: builtins.int
        POWER_ACTIVE_FIELD_NUMBER: builtins.int
        POWER_REACTIVE_FIELD_NUMBER: builtins.int
        ENERGY_APPARENT_FIELD_NUMBER: builtins.int
        ENERGY_ACTIVE_FIELD_NUMBER: builtins.int
        ENERGY_REACTIVE_FIELD_NUMBER: builtins.int
        HARMONICS_POWER_ACTIVE_FIELD_NUMBER: builtins.int
        THD_POWER_ACTIVE_FIELD_NUMBER: builtins.int
        thd_power_active: builtins.float
        """Total harmonic distortion
        of the instantaneous active power at the component.
        In percent (%).
        """
        @property
        def voltage(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The AC voltage between the line and the neutral wire.
            In Volt (V).
            """

        @property
        def current(self) -> frequenz.api.common.metrics_pb2.Metric:
            """AC current.
            +ve current means consumption, away from the grid.
            -ve current means supply into the grid.
            In Ampere (A).
            """

        @property
        def power_active(self) -> frequenz.api.common.metrics_pb2.Metric:
            """AC active power.
            +ve power means consumption, away from the grid.
            -ve power means supply into the grid.
            In Watt (W).
            """

        @property
        def power_reactive(self) -> frequenz.api.common.metrics_pb2.Metric:
            """AC reactive power.
            +ve power means inductive (leading).
            -ve power means capacitive (lagging).
            In Volt-Ampere reactive (VAr).
            """

        @property
        def energy_apparent(self) -> frequenz.api.common.metrics_pb2.Metric:
            """The total apparent energy. A Positive value represents the net apparent
            energy supplied to the grid connection, and vice versa.
            In Volt-Ampere-hour (VAh).
            """

        @property
        def energy_active(self) -> global___AC.ActiveEnergy:
            """The total active energy counters for the underlying component's
            consumption and supply.
            In Watt-hour (Wh).
            """

        @property
        def energy_reactive(self) -> global___AC.ReactiveEnergy:
            """The total reactive energy counters for the underlying component's
            capacitive and inductive energy values.
            In Volt-Ampere reactive hour (VArh).
            """

        @property
        def harmonics_power_active(self) -> global___AC.Harmonics:
            """Harmonics of the instantaneous active power at the component.
            In percent (%).
            """

        def __init__(
            self,
            *,
            voltage: frequenz.api.common.metrics_pb2.Metric | None = ...,
            current: frequenz.api.common.metrics_pb2.Metric | None = ...,
            power_active: frequenz.api.common.metrics_pb2.Metric | None = ...,
            power_reactive: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_apparent: frequenz.api.common.metrics_pb2.Metric | None = ...,
            energy_active: global___AC.ActiveEnergy | None = ...,
            energy_reactive: global___AC.ReactiveEnergy | None = ...,
            harmonics_power_active: global___AC.Harmonics | None = ...,
            thd_power_active: builtins.float = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["current", b"current", "energy_active", b"energy_active", "energy_apparent", b"energy_apparent", "energy_reactive", b"energy_reactive", "harmonics_power_active", b"harmonics_power_active", "power_active", b"power_active", "power_reactive", b"power_reactive", "voltage", b"voltage"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["current", b"current", "energy_active", b"energy_active", "energy_apparent", b"energy_apparent", "energy_reactive", b"energy_reactive", "harmonics_power_active", b"harmonics_power_active", "power_active", b"power_active", "power_reactive", b"power_reactive", "thd_power_active", b"thd_power_active", "voltage", b"voltage"]) -> None: ...

    FREQUENCY_FIELD_NUMBER: builtins.int
    CURRENT_FIELD_NUMBER: builtins.int
    POWER_APPARENT_FIELD_NUMBER: builtins.int
    POWER_ACTIVE_FIELD_NUMBER: builtins.int
    POWER_REACTIVE_FIELD_NUMBER: builtins.int
    ENERGY_APPARENT_FIELD_NUMBER: builtins.int
    ENERGY_ACTIVE_FIELD_NUMBER: builtins.int
    ENERGY_REACTIVE_FIELD_NUMBER: builtins.int
    HARMONICS_POWER_ACTIVE_FIELD_NUMBER: builtins.int
    THD_POWER_ACTIVE_FIELD_NUMBER: builtins.int
    PHASE_1_FIELD_NUMBER: builtins.int
    PHASE_2_FIELD_NUMBER: builtins.int
    PHASE_3_FIELD_NUMBER: builtins.int
    thd_power_active: builtins.float
    """The sums of the total harmonic distortion
    of the instantaneous active power at the component across all 3 phases.
    """
    @property
    def frequency(self) -> frequenz.api.common.metrics_pb2.Metric:
        """Overall AC metrics.

        The AC frequency.
        In Hertz (Hz).
        """

    @property
    def current(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The apparent 3-phase AC current. Positive values represent apparent energy
        flowing towards the grid connection, and vice versa.
        In Ampere (A).
        """

    @property
    def power_apparent(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The apparent 3-phase AC power. Positive values represent apparent energy
        flowing towards the grid connection, and vice versa.
        In Volt-Ampere (VA).
        """

    @property
    def power_active(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The total active 3-phase AC active power.
        +ve power means consumption, away from the grid.
        -ve power means supply into the grid.
        In Watt (W).
        """

    @property
    def power_reactive(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The reactive 3-phase AC power.
        +ve power means capacitive (current leading w.r.t. voltage).
        -ve power means inductive (current lagging w.r.t. voltage).
        In Volt-Ampere reactive (VAr).
        """

    @property
    def energy_apparent(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The total 3-phase apparent energy. A positive value represents the net
        apparent energy supplied to the grid connection, and vice versa.
        In Volt-Ampere-hour (VAh).
        """

    @property
    def energy_active(self) -> global___AC.ActiveEnergy:
        """The total 3-phase active energy counters for the underlying component's
        consumption and supply.
        In Watt-hour (Wh).
        """

    @property
    def energy_reactive(self) -> global___AC.ReactiveEnergy:
        """The total 3-phase reactive energy counters for the underlying component's
        capacitive and inductive energy values.
        In Volt-Ampere reactive hour (VArh).
        FIXME: ReactiveEnergy says Volt-Ampere-hour (VAh).
        """

    @property
    def harmonics_power_active(self) -> global___AC.Harmonics:
        """The sums of the harmonics
        of the instantaneous active power at the component across all 3 phases.
        """

    @property
    def phase_1(self) -> global___AC.ACPhase:
        """AC metrics for phase/line 1."""

    @property
    def phase_2(self) -> global___AC.ACPhase:
        """AC metrics for phase/line 2."""

    @property
    def phase_3(self) -> global___AC.ACPhase:
        """AC metrics for phase/line 3."""

    def __init__(
        self,
        *,
        frequency: frequenz.api.common.metrics_pb2.Metric | None = ...,
        current: frequenz.api.common.metrics_pb2.Metric | None = ...,
        power_apparent: frequenz.api.common.metrics_pb2.Metric | None = ...,
        power_active: frequenz.api.common.metrics_pb2.Metric | None = ...,
        power_reactive: frequenz.api.common.metrics_pb2.Metric | None = ...,
        energy_apparent: frequenz.api.common.metrics_pb2.Metric | None = ...,
        energy_active: global___AC.ActiveEnergy | None = ...,
        energy_reactive: global___AC.ReactiveEnergy | None = ...,
        harmonics_power_active: global___AC.Harmonics | None = ...,
        thd_power_active: builtins.float = ...,
        phase_1: global___AC.ACPhase | None = ...,
        phase_2: global___AC.ACPhase | None = ...,
        phase_3: global___AC.ACPhase | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["current", b"current", "energy_active", b"energy_active", "energy_apparent", b"energy_apparent", "energy_reactive", b"energy_reactive", "frequency", b"frequency", "harmonics_power_active", b"harmonics_power_active", "phase_1", b"phase_1", "phase_2", b"phase_2", "phase_3", b"phase_3", "power_active", b"power_active", "power_apparent", b"power_apparent", "power_reactive", b"power_reactive"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["current", b"current", "energy_active", b"energy_active", "energy_apparent", b"energy_apparent", "energy_reactive", b"energy_reactive", "frequency", b"frequency", "harmonics_power_active", b"harmonics_power_active", "phase_1", b"phase_1", "phase_2", b"phase_2", "phase_3", b"phase_3", "power_active", b"power_active", "power_apparent", b"power_apparent", "power_reactive", b"power_reactive", "thd_power_active", b"thd_power_active"]) -> None: ...

global___AC = AC
