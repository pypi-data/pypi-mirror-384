"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz microgrid sensor definitions.

Copyright:
Copyright 2025 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.v1alpha8.metrics.metrics_pb2
import frequenz.api.common.v1alpha8.microgrid.lifetime_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SensorStateCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorStateCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorStateCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_STATE_CODE_UNSPECIFIED: _SensorStateCode.ValueType  # 0
    """Default value when the sensor state is not explicitly set.
    This is the zero value of the enum.
    """
    SENSOR_STATE_CODE_OK: _SensorStateCode.ValueType  # 1
    """The sensor is up and running."""
    SENSOR_STATE_CODE_ERROR: _SensorStateCode.ValueType  # 2
    """The sensor is in an error state."""

class SensorStateCode(_SensorStateCode, metaclass=_SensorStateCodeEnumTypeWrapper):
    """Enum to represent the various states that a sensor can be in.
    This enum is unified across all sensor categories for consistency.
    """

SENSOR_STATE_CODE_UNSPECIFIED: SensorStateCode.ValueType  # 0
"""Default value when the sensor state is not explicitly set.
This is the zero value of the enum.
"""
SENSOR_STATE_CODE_OK: SensorStateCode.ValueType  # 1
"""The sensor is up and running."""
SENSOR_STATE_CODE_ERROR: SensorStateCode.ValueType  # 2
"""The sensor is in an error state."""
global___SensorStateCode = SensorStateCode

class _SensorDiagnosticCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SensorDiagnosticCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SensorDiagnosticCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SENSOR_DIAGNOSTIC_CODE_UNSPECIFIED: _SensorDiagnosticCode.ValueType  # 0
    """Default value. No specific error is specified."""
    SENSOR_DIAGNOSTIC_CODE_UNKNOWN: _SensorDiagnosticCode.ValueType  # 1
    """The sensor is reporting an unknown or an undefined error, and the sender
    cannot parse the sensor error to any of the variants below.
    """
    SENSOR_DIAGNOSTIC_CODE_INTERNAL: _SensorDiagnosticCode.ValueType  # 2
    """Error indicating an internal error within the sensor."""

class SensorDiagnosticCode(_SensorDiagnosticCode, metaclass=_SensorDiagnosticCodeEnumTypeWrapper):
    """A representation of all possible warnings and errors that can occur in
    sensors.
    """

SENSOR_DIAGNOSTIC_CODE_UNSPECIFIED: SensorDiagnosticCode.ValueType  # 0
"""Default value. No specific error is specified."""
SENSOR_DIAGNOSTIC_CODE_UNKNOWN: SensorDiagnosticCode.ValueType  # 1
"""The sensor is reporting an unknown or an undefined error, and the sender
cannot parse the sensor error to any of the variants below.
"""
SENSOR_DIAGNOSTIC_CODE_INTERNAL: SensorDiagnosticCode.ValueType  # 2
"""Error indicating an internal error within the sensor."""
global___SensorDiagnosticCode = SensorDiagnosticCode

@typing.final
class Sensor(google.protobuf.message.Message):
    """A sensor that measures a physical metric in the microgrid's surrounding
    environment.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_NAME_FIELD_NUMBER: builtins.int
    OPERATIONAL_LIFETIME_FIELD_NUMBER: builtins.int
    id: builtins.int
    """A unique identifier for the sensor."""
    microgrid_id: builtins.int
    """Unique identifier of the parent microgrid_id."""
    name: builtins.str
    """An optional name for the sensor."""
    manufacturer: builtins.str
    """The sensor manufacturer."""
    model_name: builtins.str
    """The model name of the sensor."""
    @property
    def operational_lifetime(self) -> frequenz.api.common.v1alpha8.microgrid.lifetime_pb2.Lifetime:
        """The operational lifetime of the sensor."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        name: builtins.str = ...,
        manufacturer: builtins.str = ...,
        model_name: builtins.str = ...,
        operational_lifetime: frequenz.api.common.v1alpha8.microgrid.lifetime_pb2.Lifetime | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operational_lifetime", b"operational_lifetime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "manufacturer", b"manufacturer", "microgrid_id", b"microgrid_id", "model_name", b"model_name", "name", b"name", "operational_lifetime", b"operational_lifetime"]) -> None: ...

global___Sensor = Sensor

@typing.final
class SensorDiagnostic(google.protobuf.message.Message):
    """Represents an error or warning condition reported by a microgrid sensor.

    This message extends a standardized error code with contextual information
    useful for diagnostics, such as subsystem names, measured values, or
    vendor-specific insights.

    !!! example "Typical Sensor Error"
        ```json
        {
          "diagnosticCode":
              "SENSOR_DIAGNOSTIC_CODE_INTERNAL",
          "vendorErrorCode": "2003",
          "message": "Temperature sensor 3 reported 61.5°C (limit: 60°C)"
        }
        ```
    !!! note "Vendor-Specific Codes"
        When available, `vendor_error_code` will reflect manufacturer-defined
        error identifiers, typically exposed via Modbus or similar interfaces.
        These codes are vendor- and firmware-specific and must be interpreted
        using the vendor's official documentation.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIAGNOSTIC_CODE_FIELD_NUMBER: builtins.int
    VENDOR_DIAGNOSTIC_CODE_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    diagnostic_code: global___SensorDiagnosticCode.ValueType
    """A standardized error code representing the category of the issue."""
    vendor_diagnostic_code: builtins.str
    """Optional vendor-provided diagnostic code for the error, for vendor-specific
    insights or more granular diagnostics.
    """
    message: builtins.str
    """Optional human-readable message providing additional context."""
    def __init__(
        self,
        *,
        diagnostic_code: global___SensorDiagnosticCode.ValueType = ...,
        vendor_diagnostic_code: builtins.str | None = ...,
        message: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code", "vendor_diagnostic_code", b"vendor_diagnostic_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code", "diagnostic_code", b"diagnostic_code", "message", b"message", "vendor_diagnostic_code", b"vendor_diagnostic_code"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_vendor_diagnostic_code", b"_vendor_diagnostic_code"]) -> typing.Literal["vendor_diagnostic_code"] | None: ...

global___SensorDiagnostic = SensorDiagnostic

@typing.final
class SensorStateSnapshot(google.protobuf.message.Message):
    """Representation of a sensor state and errors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ORIGIN_TIME_FIELD_NUMBER: builtins.int
    STATES_FIELD_NUMBER: builtins.int
    WARNINGS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def origin_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The UTC time when the state was originally captured."""

    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___SensorStateCode.ValueType]:
        """List of states of the microgrid sensor.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
           If the state is `SENSOR_STATE_CODE_ERROR`, the sensor is in an error
           state. In such cases, the `errors` field will be populated with the
           list of errors.
        """

    @property
    def warnings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SensorDiagnostic]:
        """List of warnings for the microgrid sensor.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
           This list is expected to have warnings if and only if the sensor is
           reporting warnings.
        """

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SensorDiagnostic]:
        """List of errors for the microgrid sensor.

        !!! note
           This list is treated as a set, and therefore its members will be unique,
           i.e., no state will exist twice in this list.

        !!! note
           This list is expected to have errors if and only if the sensor is in
           an error state.
        """

    def __init__(
        self,
        *,
        origin_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        states: collections.abc.Iterable[global___SensorStateCode.ValueType] | None = ...,
        warnings: collections.abc.Iterable[global___SensorDiagnostic] | None = ...,
        errors: collections.abc.Iterable[global___SensorDiagnostic] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["origin_time", b"origin_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors", "origin_time", b"origin_time", "states", b"states", "warnings", b"warnings"]) -> None: ...

global___SensorStateSnapshot = SensorStateSnapshot

@typing.final
class SensorTelemetry(google.protobuf.message.Message):
    """SensorTelemetry message aggregates multiple metrics, operational states, and
    errors, related to a specific microgrid sensor.

    !!! example
      Example output of a component data message:
      ```
      {
         sensor_id: 13,
         metric_samples: [
           /* list of metrics for multiple timestamps */
           {
             sample_time: "2023-10-01T00:00:00Z",
             metric: "METRIC_SENSOR_TEMPERATURE",
             value: metric_value_variant: {simple_metric: {value: 23.5},
             bounds: {}
             connection: {}
           },
           {
             sample_time: "2023-10-01T00:00:00Z",
             metric: "METRIC_SENSOR_RELATIVE_HUMIDITY",
             value: metric_value_variant: {simple_metric: {value: 23.5},
             bounds: {}
             connection: "humidity_sensor_1"
           }
         ],
         state_snapshots: [
           {
             sample_time: "2023-10-01T00:00:00Z",
             states: [],
             errors: [],
           },
         ]
      }
      ```
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SENSOR_ID_FIELD_NUMBER: builtins.int
    METRIC_SAMPLES_FIELD_NUMBER: builtins.int
    STATE_SNAPSHOTS_FIELD_NUMBER: builtins.int
    sensor_id: builtins.int
    """The ID of the microgrid sensors."""
    @property
    def metric_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[frequenz.api.common.v1alpha8.metrics.metrics_pb2.MetricSample]:
        """List of measurements for a metric of the specific microgrid sensor.

        Note that these metric samples will not necessarily contain bounds, since
        bounds are required for control operations, which are not applicable to
        sensors.
        """

    @property
    def state_snapshots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SensorStateSnapshot]:
        """List of state snapshots of a specific microgrid sensor."""

    def __init__(
        self,
        *,
        sensor_id: builtins.int = ...,
        metric_samples: collections.abc.Iterable[frequenz.api.common.v1alpha8.metrics.metrics_pb2.MetricSample] | None = ...,
        state_snapshots: collections.abc.Iterable[global___SensorStateSnapshot] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["metric_samples", b"metric_samples", "sensor_id", b"sensor_id", "state_snapshots", b"state_snapshots"]) -> None: ...

global___SensorTelemetry = SensorTelemetry
