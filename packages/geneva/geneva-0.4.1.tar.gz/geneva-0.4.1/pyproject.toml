[project]
name = "geneva"
version = "0.4.1"
description = "Geneva - Multimodal Data Lake for AI"
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
    "pyarrow>=16",
    "attrs",
    "cattrs",
    "pylance>=0.37.0",
    "lancedb>=0.24.3",
    "cloudpickle",
    "typing-extensions>=4.12",
    "overrides>=7.7.0",
    "pip>=24.3.1",
    "numpy",
    "docker==7.*",
    "jinja2==3.*",
    "tenacity",
    # remote client
    "requests",
    "urllib3>=2,<3",
    # TUI
    "textual==1.*",
    "textual-serve",
    "more-itertools",
    "toml>=0.10.2",
    "pyyaml>=6.0.2",
    "tqdm",
    "bidict",
    "emoji",
    # use multiprocess for better support complex pickle objects
    "multiprocess",
    # force updates to yanked packages
    "aiohttp>=3.12.12",
    "fsspec",
    # import ray by default
    "ray[client]>=2.44",
    "ray[default]>=2.44",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.optional-dependencies]
k8s = ["kubernetes", "pandas"]
flightsql = ["flightsql-dbapi"]
torch = ["torch>=2,<3", "torchvision"]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings[python]"]
jupyter = ["jupyterlab", "ipywidgets"]
ipy = ["ipython"]
gcp = ["google-cloud-storage"]
aws = ["boto3", "boto3-stubs[essential]", "awscli"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "multibackfill: Marks test that perform multiple backfill operations.  These tend to be flakier than other tests",
    "gcp_only: Marks test that only run on gcp",
    "limit: Mark test that verifies scaling limit",
    ]

[tool.ruff]
lint.select = [
    "F", # pyflakes
    "E",
    "W", # pycodestyle
    "I", # isort
    "G", # logging-format
    "TCH",
    "PERF", # perflint
    "N", # PEP8 naming
    # "D", # DOC lint TODO: Enable this so we enforce having reasonable docstrings
    "UP", # use more modern python
    # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ANN2", # enforce annotations
    # collection of that forces some good practices
    # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "S108",
    "S110",
    "S112",
    "S113",
    "S307",
    "S608",
    "S701",
    "B", # python's findbugs
    "A", # flake8 defaults
    "COM818", # COMMA!
    "C4", # comprehensions
    "T10", # don't debug in prod
    "PIE", # more nice readability nits
    "T20", # don't use print, use logging
    "PT",
    "NPY",
    "Q",
    "TID252",
    "SIM",
    "ERA",
]
lint.unfixable = ["UP045"]
lint.ignore = ["UP045"]
line-length = 88
indent-width = 4
target-version = "py310"
exclude = ["*.ipynb", "*_pb2.py", "src/geneva/cloudpickle/*.py"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party"]

[tool.uv]
dev-dependencies = [
    "pytest-asyncio>=0.25.0",
    "pytest>=8.3.4",
    "pytest-timeout",
    "ruff>=0.8",
    "mypy>=1.14",
    "pyright[nodejs]",
    "pyarrow-stubs",
    "bump-my-version",
    "coverage",
    "pytest-cov",
    "pytest-sugar",
    "pandas",
    "polars",
    "pytest-benchmark",
    "py-spy",
]
index-strategy = "unsafe-best-match"
prerelease = "allow"

[[tool.uv.index]]
name = "fury"
url = "https://pypi.fury.io/lancedb/"

[tool.uv.sources]
# pylance = { index = "fury" } # uncomment if using beta

[tool.pyright]
include = ["src/geneva"]
exclude = [
  "src/geneva/cloudpickle/**",  # vendored/shimmy
  "src/geneva/**/__pycache__",
  "src/**/build/**",
  "src/**/dist/**",
  "src/**/.venv/**",
  "src/**/tests/**",
]
typeCheckingMode = "basic"
pythonVersion = "3.12"
strict = [] # add to here as they get stricter

[tool.coverage.run]
omit = [
    "src/geneva/cloudpickle/*",  # this has been interned to avoid conflict
]

[project.scripts]
geneva = "geneva.main:main"

[geneva.test.nested_config]
config.value = "42"

[pytest]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
