name: emhealth

services:
  timescaledb:
    image: ghcr.io/azazellochg/timescaledb:dev
    container_name: timescaledb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_INITDB_ARGS: --locale=C --encoding=UTF8
    ports:
      - "5432:5432" # FIXME: do not expose for production
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../em_health/sql:/sql:ro
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf:ro
      - ./backups:/backups
    command: >
      postgres
      -c timescaledb.enable_chunk_skipping=on
      -c shared_preload_libraries=timescaledb,pg_stat_statements,auto_explain
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c pg_stat_statements.track_planning=on
      -c track_io_timing=on
      -c logging_collector=on
      -c log_destination='csvlog'
      -c log_rotation_size=0
      -c log_rotation_age=24
      -c log_truncate_on_rotation=on
      -c log_filename='postgresql-%Y-%m-%d.log'
      -c log_line_prefix=''
      -c log_autovacuum_min_duration=0
      -c auto_explain.log_format='json'
      -c auto_explain.log_min_duration=${MIN_QUERY_EXPLAIN}
      -c auto_explain.log_analyze=on
      -c auto_explain.log_buffers=on
      -c auto_explain.log_timing=off
      -c auto_explain.log_triggers=on
      -c auto_explain.log_verbose=on
      -c auto_explain.log_nested_statements=on
      -c archive_command='pgbackrest --stanza=main archive-push %p'
      -c archive_mode=on
      -c max_wal_senders=3
      -c wal_level=replica
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  renderer:
    image: grafana/grafana-image-renderer:v4.0.17
    container_name: renderer
    restart: unless-stopped
    ports:
      - "8081"
    volumes:
      - ./image-renderer-config.json:/home/nonroot/config.json

  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      POSTGRES_GRAFANA_PASSWORD: ${POSTGRES_GRAFANA_PASSWORD}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD} # for datasource provisioning
      GF_PLUGINS_PREINSTALL: aceiot-svg-panel
      GF_SERVER_ENABLE_GZIP: true
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED} # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${GRAFANA_EMAIL_FROM}
      GF_SMTP_FROM_NAME: EMHealth
      GRAFANA_EMAIL_TO: ${GRAFANA_EMAIL_TO}
      GF_SMTP_SKIP_VERIFY: ${GRAFANA_SMTP_SKIP_VERIFY}
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_RENDERING_RENDERER_TOKEN: "-"
      GF_LOG_FILTERS: rendering:debug
      GF_UNIFIED_ALERTING_SCREENSHOTS_CAPTURE: true # https://grafana.com/docs/grafana/latest/alerting/configure-notifications/template-notifications/images-in-notifications/#configuration
      EMHEALTH_DEBUG: ${EMHEALTH_DEBUG}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./backups:/backups
    tmpfs:
      - /var/lib/grafana/plugins   # keeps plugins in container only

volumes:
  pgdata:
  grafana-storage:
