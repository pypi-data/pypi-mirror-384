-- Creating public.schema_info
CREATE TABLE IF NOT EXISTS public.schema_info (
                                                  version int PRIMARY KEY,
                                                  updated TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.schema_info IS 'Store the schema version here';

-- instruments table ------------------------------------------------------------------------------
-- Creating public.instruments
CREATE TABLE IF NOT EXISTS public.instruments (
                                                  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  instrument TEXT NOT NULL UNIQUE,
                                                  serial INTEGER NOT NULL UNIQUE,
                                                  model TEXT NOT NULL,
                                                  name TEXT NOT NULL,
                                                  template TEXT NOT NULL,
                                                  server inet,
                                                  ds_version TEXT
);
COMMENT ON TABLE public.instruments IS 'Main instruments table';


-- enumeration tables --
-- Creating public.enum_types
CREATE TABLE IF NOT EXISTS public.enum_types (
                                                 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                 instrument_id INTEGER NOT NULL REFERENCES public.instruments(id) ON DELETE CASCADE,
                                                 name TEXT NOT NULL,
                                                 UNIQUE (id, instrument_id),
                                                 UNIQUE (instrument_id, name)
);
COMMENT ON TABLE public.enum_types IS 'HM IntEnum names. Each instrument has its own set of enum types';

-- Creating public.enum_values
CREATE TABLE IF NOT EXISTS public.enum_values (
                                    enum_id INTEGER NOT NULL REFERENCES public.enum_types(id) ON DELETE CASCADE,
                                    member_name TEXT NOT NULL,
                                    value INTEGER NOT NULL,
                                    UNIQUE (enum_id, member_name, value)
);
COMMENT ON TABLE public.enum_values IS 'HM IntEnum values for each enumeration';

CREATE INDEX ON public.enum_values (member_name, enum_id);

-- Creating public.enum_values_history
CREATE TABLE IF NOT EXISTS public.enum_values_history (
                                            enum_id INTEGER NOT NULL REFERENCES public.enum_types(id) ON DELETE CASCADE,
                                            inserted TIMESTAMPTZ NOT NULL DEFAULT now(),
                                            member_name TEXT NOT NULL,
                                            value INTEGER NOT NULL
);
COMMENT ON TABLE public.enum_values_history IS 'Historical HM IntEnum values for each enumeration';


-- parameter tables -------------------------------------------------------------------------------
-- Creating public.parameters
CREATE TABLE IF NOT EXISTS public.parameters (
                                                 instrument_id INTEGER NOT NULL REFERENCES public.instruments(id) ON DELETE CASCADE,
                                                 param_id INTEGER NOT NULL,
                                                 subsystem TEXT NOT NULL,
                                                 component TEXT NOT NULL,
                                                 param_name TEXT NOT NULL,
                                                 display_name TEXT NOT NULL,
                                                 display_unit TEXT,
                                                 storage_unit TEXT,
                                                 enum_id INTEGER,
                                                 FOREIGN KEY (enum_id, instrument_id)
                                                     REFERENCES public.enum_types (id, instrument_id)
                                                     ON DELETE SET NULL,
                                                 value_type TEXT NOT NULL,
                                                 event_id INTEGER NOT NULL,
                                                 event_name TEXT NOT NULL,
                                                 abs_min DOUBLE PRECISION,
                                                 abs_max DOUBLE PRECISION,
                                                 UNIQUE (instrument_id, param_id)
);
COMMENT ON TABLE public.parameters IS 'HM parameters metadata. param_id is unique per instrument. Multiple parameters can refer to the same enum type';

CREATE INDEX ON public.parameters (enum_id, instrument_id, param_id, param_name, subsystem);

-- Creating public.parameters_history
CREATE TABLE IF NOT EXISTS public.parameters_history (
                                                         instrument_id INTEGER NOT NULL REFERENCES public.instruments(id) ON DELETE CASCADE,
                                                         inserted TIMESTAMPTZ NOT NULL DEFAULT now(),
                                                         param_id INTEGER NOT NULL,
                                                         subsystem TEXT NOT NULL,
                                                         component TEXT NOT NULL,
                                                         param_name TEXT NOT NULL,
                                                         display_name TEXT NOT NULL,
                                                         display_unit TEXT,
                                                         storage_unit TEXT,
                                                         enum_id INTEGER,
                                                         FOREIGN KEY (enum_id, instrument_id)
                                                             REFERENCES public.enum_types (id, instrument_id)
                                                             ON DELETE SET NULL,
                                                         value_type TEXT NOT NULL,
                                                         event_id INTEGER NOT NULL,
                                                         event_name TEXT NOT NULL,
                                                         abs_min DOUBLE PRECISION,
                                                         abs_max DOUBLE PRECISION,
                                                         UNIQUE (instrument_id, param_id, inserted)
);
COMMENT ON TABLE public.parameters_history IS 'Historical HM metadata for each parameter';


-- data table -------------------------------------------------------------------------------------
-- Creating public.data
CREATE TABLE IF NOT EXISTS public.data_staging (
                                           time TIMESTAMPTZ NOT NULL,
                                           instrument_id INTEGER NOT NULL,
                                           param_id INTEGER NOT NULL,
                                           value_num DOUBLE PRECISION,
                                           value_text TEXT
);
COMMENT ON TABLE public.data_staging IS 'Staging table for bulk COPY inserts';

CREATE TABLE IF NOT EXISTS public.data (
                                           time TIMESTAMPTZ NOT NULL,
                                           instrument_id INTEGER NOT NULL REFERENCES public.instruments(id) ON DELETE CASCADE,
                                           param_id INTEGER NOT NULL,
                                           value_num DOUBLE PRECISION,
                                           value_text TEXT,
                                           UNIQUE (param_id, instrument_id, time)
                                           -- To define an index as a UNIQUE or PRIMARY KEY index, the index must include the time column and the partitioning column
) WITH (
                                             tsdb.hypertable,
                                             tsdb.chunk_interval=:var_data_chunk_size,
                                             tsdb.partition_column='time',
                                             tsdb.segmentby='instrument_id,param_id',
                                             tsdb.orderby='time',
                                             tsdb.create_default_indexes=false
                                             );
COMMENT ON TABLE public.data IS 'Main time series table with HM events';

SELECT enable_chunk_skipping('public.data', 'param_id');
CALL add_columnstore_policy('public.data', after => INTERVAL :var_data_compression);

GRANT USAGE ON SCHEMA public TO grafana, emhealth;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO grafana;

GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO emhealth;
GRANT TRUNCATE ON TABLE public.data_staging TO emhealth;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO emhealth;
