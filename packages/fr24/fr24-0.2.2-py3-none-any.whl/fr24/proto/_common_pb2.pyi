"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    float,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _RestrictionVisibility:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _RestrictionVisibilityEnumTypeWrapper(_EnumTypeWrapper[_RestrictionVisibility.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NOT_VISIBLE: _RestrictionVisibility.ValueType  # 0
    PARTIALLY_VISIBLE: _RestrictionVisibility.ValueType  # 1
    FULLY_VISIBLE: _RestrictionVisibility.ValueType  # 2

class RestrictionVisibility(_RestrictionVisibility, metaclass=_RestrictionVisibilityEnumTypeWrapper):
    """Information about high-profile, military or government aircraft like
    Air Force One are not displayed. Other restricted aircraft may be anonymised,
    appearing as `BLOCKED` or `NA`.
    See [FAA's Limited Data Displayed](https://www.faa.gov/pilots/ladd) and
    [PIA program](https://www.faa.gov/air_traffic/technology/equipadsb/privacy)
    for more details.
    """

NOT_VISIBLE: RestrictionVisibility.ValueType  # 0
PARTIALLY_VISIBLE: RestrictionVisibility.ValueType  # 1
FULLY_VISIBLE: RestrictionVisibility.ValueType  # 2

class _Service:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _ServiceEnumTypeWrapper(_EnumTypeWrapper[_Service.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    PASSENGER: _Service.ValueType  # 0
    CARGO: _Service.ValueType  # 1
    MILITARY_AND_GOVERNMENT: _Service.ValueType  # 2
    BUSINESS_JETS: _Service.ValueType  # 3
    GENERAL_AVIATION: _Service.ValueType  # 4
    HELICOPTERS: _Service.ValueType  # 5
    LIGHTER_THAN_AIR: _Service.ValueType  # 6
    GLIDERS: _Service.ValueType  # 7
    DRONES: _Service.ValueType  # 8
    GROUND_VEHICLES: _Service.ValueType  # 9
    OTHER_SERVICE: _Service.ValueType  # 10
    NON_CATEGORIZED: _Service.ValueType  # 11

class Service(_Service, metaclass=_ServiceEnumTypeWrapper): ...

PASSENGER: Service.ValueType  # 0
CARGO: Service.ValueType  # 1
MILITARY_AND_GOVERNMENT: Service.ValueType  # 2
BUSINESS_JETS: Service.ValueType  # 3
GENERAL_AVIATION: Service.ValueType  # 4
HELICOPTERS: Service.ValueType  # 5
LIGHTER_THAN_AIR: Service.ValueType  # 6
GLIDERS: Service.ValueType  # 7
DRONES: Service.ValueType  # 8
GROUND_VEHICLES: Service.ValueType  # 9
OTHER_SERVICE: Service.ValueType  # 10
NON_CATEGORIZED: Service.ValueType  # 11

class _TrafficType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _TrafficTypeEnumTypeWrapper(_EnumTypeWrapper[_TrafficType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NONE: _TrafficType.ValueType  # 0
    GROUND_ONLY: _TrafficType.ValueType  # 1
    AIRBORNE_ONLY: _TrafficType.ValueType  # 2
    ALL: _TrafficType.ValueType  # 3

class TrafficType(_TrafficType, metaclass=_TrafficTypeEnumTypeWrapper): ...

NONE: TrafficType.ValueType  # 0
GROUND_ONLY: TrafficType.ValueType  # 1
AIRBORNE_ONLY: TrafficType.ValueType  # 2
ALL: TrafficType.ValueType  # 3

class _DataSource:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _DataSourceEnumTypeWrapper(_EnumTypeWrapper[_DataSource.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    ADSB: _DataSource.ValueType  # 0
    MLAT: _DataSource.ValueType  # 1
    FLARM: _DataSource.ValueType  # 2
    FAA: _DataSource.ValueType  # 3
    ESTIMATED: _DataSource.ValueType  # 4
    SATELLITE: _DataSource.ValueType  # 5
    OTHER_DATA_SOURCE: _DataSource.ValueType  # 6
    UAT: _DataSource.ValueType  # 7
    SPIDERTRACKS: _DataSource.ValueType  # 8
    AUS: _DataSource.ValueType  # 9

class DataSource(_DataSource, metaclass=_DataSourceEnumTypeWrapper): ...

ADSB: DataSource.ValueType  # 0
MLAT: DataSource.ValueType  # 1
FLARM: DataSource.ValueType  # 2
FAA: DataSource.ValueType  # 3
ESTIMATED: DataSource.ValueType  # 4
SATELLITE: DataSource.ValueType  # 5
OTHER_DATA_SOURCE: DataSource.ValueType  # 6
UAT: DataSource.ValueType  # 7
SPIDERTRACKS: DataSource.ValueType  # 8
AUS: DataSource.ValueType  # 9

class _Icon:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _IconEnumTypeWrapper(_EnumTypeWrapper[_Icon.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    B738: _Icon.ValueType  # 0
    """Boeing 737-800"""
    FGTR: _Icon.ValueType  # 1
    """Fighter jet"""
    ASW20: _Icon.ValueType  # 2
    """Glider ASW 20"""
    C206: _Icon.ValueType  # 3
    """Cessna 206"""
    C303: _Icon.ValueType  # 4
    """Cessna 303"""
    LJ60: _Icon.ValueType  # 5
    """Learjet 60"""
    Q300: _Icon.ValueType  # 6
    """Bombardier Dash 8 Q300"""
    B736: _Icon.ValueType  # 7
    """Boeing 737-600"""
    FOKKER100: _Icon.ValueType  # 8
    """Fokker 100"""
    RJ85: _Icon.ValueType  # 9
    """Avro RJ85"""
    A320: _Icon.ValueType  # 10
    """Airbus A320"""
    B757: _Icon.ValueType  # 11
    """Boeing 757"""
    B767: _Icon.ValueType  # 12
    """Boeing 767"""
    A3ST: _Icon.ValueType  # 13
    """Airbus A300-600ST Beluga"""
    MD11: _Icon.ValueType  # 14
    """McDonnell Douglas MD-11"""
    A330: _Icon.ValueType  # 15
    """Airbus A330"""
    A343: _Icon.ValueType  # 16
    """Airbus A340-300"""
    A346: _Icon.ValueType  # 17
    """Airbus A340-600"""
    B777: _Icon.ValueType  # 18
    """Boeing 777"""
    B747: _Icon.ValueType  # 19
    """Boeing 747"""
    A380: _Icon.ValueType  # 20
    """Airbus A380"""
    A225: _Icon.ValueType  # 21
    """Antonov An-225"""
    SI2: _Icon.ValueType  # 22
    """Solar Impulse 2"""
    EC: _Icon.ValueType  # 23
    """Eurocopter"""
    BALL: _Icon.ValueType  # 24
    """Balloon"""
    GRND: _Icon.ValueType  # 25
    """Ground vehicle"""
    SLEI: _Icon.ValueType  # 26
    """Santa Sleigh"""
    DRON: _Icon.ValueType  # 27
    """Drone"""
    SAT: _Icon.ValueType  # 28
    """Satellite"""
    ISS: _Icon.ValueType  # 29
    """International Space Station"""
    CONC: _Icon.ValueType  # 30
    """Concorde"""

class Icon(_Icon, metaclass=_IconEnumTypeWrapper): ...

B738: Icon.ValueType  # 0
"""Boeing 737-800"""
FGTR: Icon.ValueType  # 1
"""Fighter jet"""
ASW20: Icon.ValueType  # 2
"""Glider ASW 20"""
C206: Icon.ValueType  # 3
"""Cessna 206"""
C303: Icon.ValueType  # 4
"""Cessna 303"""
LJ60: Icon.ValueType  # 5
"""Learjet 60"""
Q300: Icon.ValueType  # 6
"""Bombardier Dash 8 Q300"""
B736: Icon.ValueType  # 7
"""Boeing 737-600"""
FOKKER100: Icon.ValueType  # 8
"""Fokker 100"""
RJ85: Icon.ValueType  # 9
"""Avro RJ85"""
A320: Icon.ValueType  # 10
"""Airbus A320"""
B757: Icon.ValueType  # 11
"""Boeing 757"""
B767: Icon.ValueType  # 12
"""Boeing 767"""
A3ST: Icon.ValueType  # 13
"""Airbus A300-600ST Beluga"""
MD11: Icon.ValueType  # 14
"""McDonnell Douglas MD-11"""
A330: Icon.ValueType  # 15
"""Airbus A330"""
A343: Icon.ValueType  # 16
"""Airbus A340-300"""
A346: Icon.ValueType  # 17
"""Airbus A340-600"""
B777: Icon.ValueType  # 18
"""Boeing 777"""
B747: Icon.ValueType  # 19
"""Boeing 747"""
A380: Icon.ValueType  # 20
"""Airbus A380"""
A225: Icon.ValueType  # 21
"""Antonov An-225"""
SI2: Icon.ValueType  # 22
"""Solar Impulse 2"""
EC: Icon.ValueType  # 23
"""Eurocopter"""
BALL: Icon.ValueType  # 24
"""Balloon"""
GRND: Icon.ValueType  # 25
"""Ground vehicle"""
SLEI: Icon.ValueType  # 26
"""Santa Sleigh"""
DRON: Icon.ValueType  # 27
"""Drone"""
SAT: Icon.ValueType  # 28
"""Satellite"""
ISS: Icon.ValueType  # 29
"""International Space Station"""
CONC: Icon.ValueType  # 30
"""Concorde"""

class _Status:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _StatusEnumTypeWrapper(_EnumTypeWrapper[_Status.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NORMAL: _Status.ValueType  # 0
    BACKGROUND: _Status.ValueType  # 1
    EMERGENCY: _Status.ValueType  # 2
    NOT_AVAILABLE: _Status.ValueType  # 3
    LIVE: _Status.ValueType  # 4

class Status(_Status, metaclass=_StatusEnumTypeWrapper): ...

NORMAL: Status.ValueType  # 0
BACKGROUND: Status.ValueType  # 1
EMERGENCY: Status.ValueType  # 2
NOT_AVAILABLE: Status.ValueType  # 3
LIVE: Status.ValueType  # 4

class _FlightStage:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _FlightStageEnumTypeWrapper(_EnumTypeWrapper[_FlightStage.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN: _FlightStage.ValueType  # 0
    ON_GROUND: _FlightStage.ValueType  # 1
    ASCENDING: _FlightStage.ValueType  # 2
    AIRBORNE: _FlightStage.ValueType  # 3
    DESCENDING: _FlightStage.ValueType  # 4
    DIVERSION: _FlightStage.ValueType  # 5

class FlightStage(_FlightStage, metaclass=_FlightStageEnumTypeWrapper):
    """used in FollowFlight, FlightDetails, PlaybackFlight"""

UNKNOWN: FlightStage.ValueType  # 0
ON_GROUND: FlightStage.ValueType  # 1
ASCENDING: FlightStage.ValueType  # 2
AIRBORNE: FlightStage.ValueType  # 3
DESCENDING: FlightStage.ValueType  # 4
DIVERSION: FlightStage.ValueType  # 5

class _DelayStatus:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _DelayStatusEnumTypeWrapper(_EnumTypeWrapper[_DelayStatus.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    GRAY: _DelayStatus.ValueType  # 0
    GREEN: _DelayStatus.ValueType  # 1
    YELLOW: _DelayStatus.ValueType  # 2
    RED: _DelayStatus.ValueType  # 3

class DelayStatus(_DelayStatus, metaclass=_DelayStatusEnumTypeWrapper): ...

GRAY: DelayStatus.ValueType  # 0
GREEN: DelayStatus.ValueType  # 1
YELLOW: DelayStatus.ValueType  # 2
RED: DelayStatus.ValueType  # 3

class _EmergencyStatus:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _EmergencyStatusEnumTypeWrapper(_EnumTypeWrapper[_EmergencyStatus.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NO_EMERGENCY: _EmergencyStatus.ValueType  # 0
    GENERAL_EMERGENCY: _EmergencyStatus.ValueType  # 1
    LIFEGUARD_MEDICAL_EMERGENCY: _EmergencyStatus.ValueType  # 2
    MINIMUM_FUEL: _EmergencyStatus.ValueType  # 3
    NO_COMMUNICATIONS: _EmergencyStatus.ValueType  # 4
    UNLAWFUL_INTERFERENCE: _EmergencyStatus.ValueType  # 5
    DOWNED_AIRCRAFT: _EmergencyStatus.ValueType  # 6
    RESERVED: _EmergencyStatus.ValueType  # 7

class EmergencyStatus(_EmergencyStatus, metaclass=_EmergencyStatusEnumTypeWrapper):
    """NOTE: unused anywhere"""

NO_EMERGENCY: EmergencyStatus.ValueType  # 0
GENERAL_EMERGENCY: EmergencyStatus.ValueType  # 1
LIFEGUARD_MEDICAL_EMERGENCY: EmergencyStatus.ValueType  # 2
MINIMUM_FUEL: EmergencyStatus.ValueType  # 3
NO_COMMUNICATIONS: EmergencyStatus.ValueType  # 4
UNLAWFUL_INTERFERENCE: EmergencyStatus.ValueType  # 5
DOWNED_AIRCRAFT: EmergencyStatus.ValueType  # 6
RESERVED: EmergencyStatus.ValueType  # 7

@final
class EMSInfo(Message):
    """Enhanced Mode-S data (EMS)"""

    DESCRIPTOR: Descriptor

    QNH_FIELD_NUMBER: int
    AMCP_FIELD_NUMBER: int
    AFMS_FIELD_NUMBER: int
    OAT_FIELD_NUMBER: int
    IAS_FIELD_NUMBER: int
    TAS_FIELD_NUMBER: int
    MACH_FIELD_NUMBER: int
    AGPS_FIELD_NUMBER: int
    AGPSDIFF_FIELD_NUMBER: int
    APFLAGS_FIELD_NUMBER: int
    WIND_DIR_FIELD_NUMBER: int
    WIND_SPEED_FIELD_NUMBER: int
    RS_FIELD_NUMBER: int
    qnh: int
    """Altimeter setting (QFE or QNH/QNE)"""
    amcp: int
    """MCP/FCU selected altitude (BDS4,0)"""
    afms: int
    """FMS selected altitude (BDS4,0)"""
    oat: int
    """Outside air temperature, [TODO: update units]"""
    ias: int
    """Indicated airspeed (BDS6,0), knots"""
    tas: int
    """True airspeed (BDS0,5), knots"""
    mach: int
    """Mach number (BDS6,0), 1e3, e.g., `704` = M0.704"""
    agps: int
    """GPS altitude"""
    agpsdiff: int
    """Difference between amcp and agps"""
    apflags: int
    """Autopilot flags, often null"""
    wind_dir: int
    """Wind direction, [TODO: update units]"""
    wind_speed: int
    """Wind speed, [TODO: update units]"""
    rs: int
    def __init__(
        self,
        *,
        qnh: int = ...,
        amcp: int = ...,
        afms: int = ...,
        oat: int = ...,
        ias: int = ...,
        tas: int = ...,
        mach: int = ...,
        agps: int = ...,
        agpsdiff: int = ...,
        apflags: int = ...,
        wind_dir: int = ...,
        wind_speed: int = ...,
        rs: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["afms", b"afms", "agps", b"agps", "agpsdiff", b"agpsdiff", "amcp", b"amcp", "apflags", b"apflags", "ias", b"ias", "mach", b"mach", "oat", b"oat", "qnh", b"qnh", "rs", b"rs", "tas", b"tas", "wind_dir", b"wind_dir", "wind_speed", b"wind_speed"]) -> None: ...

@final
class EMSAvailability(Message):
    DESCRIPTOR: Descriptor

    QNH_AVAILABILITY_FIELD_NUMBER: int
    AMCP_AVAILABILITY_FIELD_NUMBER: int
    AFMS_AVAILABILITY_FIELD_NUMBER: int
    OAT_AVAILABILITY_FIELD_NUMBER: int
    IAS_AVAILABILITY_FIELD_NUMBER: int
    TAS_AVAILABILITY_FIELD_NUMBER: int
    MACH_AVAILABILITY_FIELD_NUMBER: int
    AGPS_AVAILABILITY_FIELD_NUMBER: int
    AGPSDIFF_AVAILABILITY_FIELD_NUMBER: int
    APFLAGS_AVAILABILITY_FIELD_NUMBER: int
    WIND_DIR_AVAILABILITY_FIELD_NUMBER: int
    WIND_SPEED_AVAILABILITY_FIELD_NUMBER: int
    RS_AVAILABILITY_FIELD_NUMBER: int
    qnh_availability: bool
    amcp_availability: bool
    afms_availability: bool
    oat_availability: bool
    ias_availability: bool
    tas_availability: bool
    mach_availability: bool
    agps_availability: bool
    agpsdiff_availability: bool
    apflags_availability: bool
    wind_dir_availability: bool
    wind_speed_availability: bool
    rs_availability: bool
    def __init__(
        self,
        *,
        qnh_availability: bool = ...,
        amcp_availability: bool = ...,
        afms_availability: bool = ...,
        oat_availability: bool = ...,
        ias_availability: bool = ...,
        tas_availability: bool = ...,
        mach_availability: bool = ...,
        agps_availability: bool = ...,
        agpsdiff_availability: bool = ...,
        apflags_availability: bool = ...,
        wind_dir_availability: bool = ...,
        wind_speed_availability: bool = ...,
        rs_availability: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["afms_availability", b"afms_availability", "agps_availability", b"agps_availability", "agpsdiff_availability", b"agpsdiff_availability", "amcp_availability", b"amcp_availability", "apflags_availability", b"apflags_availability", "ias_availability", b"ias_availability", "mach_availability", b"mach_availability", "oat_availability", b"oat_availability", "qnh_availability", b"qnh_availability", "rs_availability", b"rs_availability", "tas_availability", b"tas_availability", "wind_dir_availability", b"wind_dir_availability", "wind_speed_availability", b"wind_speed_availability"]) -> None: ...

@final
class Schedule(Message):
    DESCRIPTOR: Descriptor

    STD_FIELD_NUMBER: int
    ETD_FIELD_NUMBER: int
    ATD_FIELD_NUMBER: int
    STA_FIELD_NUMBER: int
    ETA_FIELD_NUMBER: int
    ATA_FIELD_NUMBER: int
    PROGRESS_PCT_FIELD_NUMBER: int
    std: int
    """Scheduled Time of Departure, Unix timestamp in seconds"""
    etd: int
    """Estimated Time of Departure, Unix timestamp in seconds"""
    atd: int
    """Actual Time of Departure, Unix timestamp in seconds"""
    sta: int
    """Scheduled Time of Arrival, Unix timestamp in seconds"""
    eta: int
    """Estimated Time of Arrival, Unix timestamp in seconds"""
    ata: int
    """Actual Time of Arrival, Unix timestamp in seconds"""
    progress_pct: int
    """Progress percentage of the flight"""
    def __init__(
        self,
        *,
        std: int = ...,
        etd: int = ...,
        atd: int = ...,
        sta: int = ...,
        eta: int = ...,
        ata: int = ...,
        progress_pct: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["ata", b"ata", "atd", b"atd", "eta", b"eta", "etd", b"etd", "progress_pct", b"progress_pct", "sta", b"sta", "std", b"std"]) -> None: ...

@final
class Route(Message):
    DESCRIPTOR: Descriptor

    FROM_FIELD_NUMBER: int
    TO_FIELD_NUMBER: int
    DIVERTED_TO_FIELD_NUMBER: int
    to: str
    diverted_to: str
    def __init__(
        self,
        *,
        to: str = ...,
        diverted_to: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["diverted_to", b"diverted_to", "from", b"from", "to", b"to"]) -> None: ...

@final
class ExtraFlightInfo(Message):
    """NOTE: Attributes `operated_by_id` (15), `squawk_availability` (16),
    `vspeed_availability` (17), `airspace_availability` (18),
    `airspace_id` (19), `server_time_ms` (21)
    only available when the flight is selected.
    """

    DESCRIPTOR: Descriptor

    FLIGHT_FIELD_NUMBER: int
    REG_FIELD_NUMBER: int
    ROUTE_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    SQUAWK_FIELD_NUMBER: int
    VSPEED_FIELD_NUMBER: int
    AGE_FIELD_NUMBER: int
    COUNTRY_OF_REG_FIELD_NUMBER: int
    SCHEDULE_FIELD_NUMBER: int
    LOGO_ID_FIELD_NUMBER: int
    AIRSPACE_FIELD_NUMBER: int
    EMS_INFO_FIELD_NUMBER: int
    EMS_AVAILABILITY_FIELD_NUMBER: int
    ICAO_ADDRESS_FIELD_NUMBER: int
    OPERATED_BY_ID_FIELD_NUMBER: int
    SQUAWK_AVAILABILITY_FIELD_NUMBER: int
    VSPEED_AVAILABILITY_FIELD_NUMBER: int
    AIRSPACE_AVAILABILITY_FIELD_NUMBER: int
    AIRSPACE_ID_FIELD_NUMBER: int
    flight: str
    """IATA Flight number, e.g. `CX8747`"""
    reg: str
    """Aircraft registration, e.g. `B-HUJ`"""
    type: str
    """Aircraft type code, e.g. `B744`"""
    squawk: int
    """Squawk code, in base-10. e.g., `20852` (converted from octal)"""
    vspeed: int
    """Vertical speed, feet per minute"""
    age: str
    """Aircraft age, years in string format, e.g., `"17 years"`"""
    country_of_reg: int
    """Country code of registration"""
    logo_id: int
    """Airline logo ID"""
    airspace: int
    """FIR airspace ID"""
    icao_address: int
    """ICAO 24-bit address of the aircraft (hex)"""
    operated_by_id: int
    """Airline ID of the operator"""
    squawk_availability: bool
    vspeed_availability: bool
    airspace_availability: bool
    airspace_id: str
    """Airspace ID"""
    @property
    def route(self) -> Route: ...
    @property
    def schedule(self) -> Schedule: ...
    @property
    def ems_info(self) -> EMSInfo: ...
    @property
    def ems_availability(self) -> EMSAvailability: ...
    def __init__(
        self,
        *,
        flight: str = ...,
        reg: str = ...,
        route: Route | None = ...,
        type: str = ...,
        squawk: int = ...,
        vspeed: int = ...,
        age: str = ...,
        country_of_reg: int = ...,
        schedule: Schedule | None = ...,
        logo_id: int = ...,
        airspace: int = ...,
        ems_info: EMSInfo | None = ...,
        ems_availability: EMSAvailability | None = ...,
        icao_address: int = ...,
        operated_by_id: int = ...,
        squawk_availability: bool = ...,
        vspeed_availability: bool = ...,
        airspace_availability: bool = ...,
        airspace_id: str = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ems_availability", b"ems_availability", "ems_info", b"ems_info", "route", b"route", "schedule", b"schedule"]) -> bool: ...
    def ClearField(self, field_name: Literal["age", b"age", "airspace", b"airspace", "airspace_availability", b"airspace_availability", "airspace_id", b"airspace_id", "country_of_reg", b"country_of_reg", "ems_availability", b"ems_availability", "ems_info", b"ems_info", "flight", b"flight", "icao_address", b"icao_address", "logo_id", b"logo_id", "operated_by_id", b"operated_by_id", "reg", b"reg", "route", b"route", "schedule", b"schedule", "squawk", b"squawk", "squawk_availability", b"squawk_availability", "type", b"type", "vspeed", b"vspeed", "vspeed_availability", b"vspeed_availability"]) -> None: ...

@final
class SourceStats(Message):
    DESCRIPTOR: Descriptor

    SOURCE_FIELD_NUMBER: int
    COUNT_FIELD_NUMBER: int
    source: DataSource.ValueType
    count: int
    """Number of flights recorded with this source"""
    def __init__(
        self,
        *,
        source: DataSource.ValueType = ...,
        count: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["count", b"count", "source", b"source"]) -> None: ...

@final
class Stats(Message):
    DESCRIPTOR: Descriptor

    TOTAL_LIST_FIELD_NUMBER: int
    @property
    def total_list(self) -> RepeatedCompositeFieldContainer[SourceStats]: ...
    def __init__(
        self,
        *,
        total_list: Iterable[SourceStats] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["total_list", b"total_list"]) -> None: ...

@final
class RecentPosition(Message):
    DESCRIPTOR: Descriptor

    DELTA_LAT_FIELD_NUMBER: int
    DELTA_LON_FIELD_NUMBER: int
    DELTA_MS_FIELD_NUMBER: int
    delta_lat: int
    """Offset from the current latitude, 1e5 degrees"""
    delta_lon: int
    """Offset from the current longitude, 1e5 degrees"""
    delta_ms: int
    """Delta time, milliseconds"""
    def __init__(
        self,
        *,
        delta_lat: int = ...,
        delta_lon: int = ...,
        delta_ms: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["delta_lat", b"delta_lat", "delta_lon", b"delta_lon", "delta_ms", b"delta_ms"]) -> None: ...

@final
class PositionBuffer(Message):
    DESCRIPTOR: Descriptor

    RECENT_POSITIONS_LIST_FIELD_NUMBER: int
    @property
    def recent_positions_list(self) -> RepeatedCompositeFieldContainer[RecentPosition]:
        """List of recent positions"""

    def __init__(
        self,
        *,
        recent_positions_list: Iterable[RecentPosition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["recent_positions_list", b"recent_positions_list"]) -> None: ...

@final
class Flight(Message):
    DESCRIPTOR: Descriptor

    FLIGHTID_FIELD_NUMBER: int
    LAT_FIELD_NUMBER: int
    LON_FIELD_NUMBER: int
    TRACK_FIELD_NUMBER: int
    ALT_FIELD_NUMBER: int
    SPEED_FIELD_NUMBER: int
    ICON_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    ON_GROUND_FIELD_NUMBER: int
    CALLSIGN_FIELD_NUMBER: int
    SOURCE_FIELD_NUMBER: int
    EXTRA_INFO_FIELD_NUMBER: int
    POSITION_BUFFER_FIELD_NUMBER: int
    TIMESTAMP_MS_FIELD_NUMBER: int
    flightid: int
    """FR24 flight id, in base-10 integer. Convert to hex for use in URLs."""
    lat: float
    """Latitude, degrees, -90 to 90"""
    lon: float
    """Longitude, degrees, -180 to 180"""
    track: int
    """True track angle, degrees clockwise from North"""
    alt: int
    """Barometric altitude, feet"""
    speed: int
    """Ground speed, knots"""
    icon: Icon.ValueType
    status: Status.ValueType
    timestamp: int
    """Last update timestamp, Unix timestamp in seconds"""
    on_ground: bool
    callsign: str
    """Callsign, e.g. `CPA8747`"""
    source: DataSource.ValueType
    timestamp_ms: int
    """Last update timestamp, milliseconds"""
    @property
    def extra_info(self) -> ExtraFlightInfo: ...
    @property
    def position_buffer(self) -> PositionBuffer: ...
    def __init__(
        self,
        *,
        flightid: int = ...,
        lat: float = ...,
        lon: float = ...,
        track: int = ...,
        alt: int = ...,
        speed: int = ...,
        icon: Icon.ValueType = ...,
        status: Status.ValueType = ...,
        timestamp: int = ...,
        on_ground: bool = ...,
        callsign: str = ...,
        source: DataSource.ValueType = ...,
        extra_info: ExtraFlightInfo | None = ...,
        position_buffer: PositionBuffer | None = ...,
        timestamp_ms: int = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["extra_info", b"extra_info", "position_buffer", b"position_buffer"]) -> bool: ...
    def ClearField(self, field_name: Literal["alt", b"alt", "callsign", b"callsign", "extra_info", b"extra_info", "flightid", b"flightid", "icon", b"icon", "lat", b"lat", "lon", b"lon", "on_ground", b"on_ground", "position_buffer", b"position_buffer", "source", b"source", "speed", b"speed", "status", b"status", "timestamp", b"timestamp", "timestamp_ms", b"timestamp_ms", "track", b"track"]) -> None: ...

@final
class FlightProgress(Message):
    DESCRIPTOR: Descriptor

    TRAVERSED_DISTANCE_FIELD_NUMBER: int
    REMAINING_DISTANCE_FIELD_NUMBER: int
    ELAPSED_TIME_FIELD_NUMBER: int
    REMAINING_TIME_FIELD_NUMBER: int
    ETA_FIELD_NUMBER: int
    GREAT_CIRCLE_DISTANCE_FIELD_NUMBER: int
    MEAN_FLIGHT_TIME_FIELD_NUMBER: int
    FLIGHT_STAGE_FIELD_NUMBER: int
    DELAY_STATUS_FIELD_NUMBER: int
    PROGRESS_PCT_FIELD_NUMBER: int
    traversed_distance: int
    """Distance traversed in the flight, meters"""
    remaining_distance: int
    """Remaining distance to destination, meters"""
    elapsed_time: int
    """Elapsed flight time, seconds"""
    remaining_time: int
    """Remaining flight time, seconds"""
    eta: int
    """Estimated Time of Arrival, Unix timestamp in seconds"""
    great_circle_distance: int
    """Great circle distance of the first, meters"""
    mean_flight_time: int
    """Mean flight time for this route, seconds"""
    flight_stage: FlightStage.ValueType
    delay_status: DelayStatus.ValueType
    progress_pct: int
    """Flight progress percentage (e.g. `82`)"""
    def __init__(
        self,
        *,
        traversed_distance: int = ...,
        remaining_distance: int = ...,
        elapsed_time: int = ...,
        remaining_time: int = ...,
        eta: int = ...,
        great_circle_distance: int = ...,
        mean_flight_time: int = ...,
        flight_stage: FlightStage.ValueType = ...,
        delay_status: DelayStatus.ValueType = ...,
        progress_pct: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["delay_status", b"delay_status", "elapsed_time", b"elapsed_time", "eta", b"eta", "flight_stage", b"flight_stage", "great_circle_distance", b"great_circle_distance", "mean_flight_time", b"mean_flight_time", "progress_pct", b"progress_pct", "remaining_distance", b"remaining_distance", "remaining_time", b"remaining_time", "traversed_distance", b"traversed_distance"]) -> None: ...

@final
class ImageInfo(Message):
    DESCRIPTOR: Descriptor

    URL_FIELD_NUMBER: int
    COPYRIGHT_FIELD_NUMBER: int
    THUMBNAIL_FIELD_NUMBER: int
    MEDIUM_FIELD_NUMBER: int
    LARGE_FIELD_NUMBER: int
    SIDEVIEW_FIELD_NUMBER: int
    url: str
    """Image URL"""
    copyright: str
    """Copyright information (e.g. `"R Skywalker"`)"""
    thumbnail: str
    """URL for thumbnail image (e.g. `"https://cdn.jetphotos.com/200/5/459674_1738674373_tb.jpg"`)"""
    medium: str
    """URL for medium-sized image (e.g. `"https://cdn.jetphotos.com/400/5/459674_1738674373.jpg"`)"""
    large: str
    """URL for large-sized image (e.g. `"https://cdn.jetphotos.com/640/5/459674_1738674373.jpg"`)"""
    sideview: str
    def __init__(
        self,
        *,
        url: str = ...,
        copyright: str = ...,
        thumbnail: str = ...,
        medium: str = ...,
        large: str = ...,
        sideview: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["copyright", b"copyright", "large", b"large", "medium", b"medium", "sideview", b"sideview", "thumbnail", b"thumbnail", "url", b"url"]) -> None: ...

@final
class AircraftInfo(Message):
    DESCRIPTOR: Descriptor

    ICAO_ADDRESS_FIELD_NUMBER: int
    REG_FIELD_NUMBER: int
    COUNTRY_OF_REG_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    ICON_FIELD_NUMBER: int
    FULL_DESCRIPTION_FIELD_NUMBER: int
    MSN_FIELD_NUMBER: int
    SERVICE_FIELD_NUMBER: int
    AC_BIRTH_DATE_FIELD_NUMBER: int
    AC_AGE_FIELD_NUMBER: int
    IMAGES_LIST_FIELD_NUMBER: int
    IS_TEST_FLIGHT_FIELD_NUMBER: int
    MSN_AVAILABLE_FIELD_NUMBER: int
    AGE_AVAILABLE_FIELD_NUMBER: int
    REGISTERED_OWNERS_FIELD_NUMBER: int
    IS_COUNTRY_OF_REG_AVAILABLE_FIELD_NUMBER: int
    icao_address: int
    """ICAO 24-bit address of the aircraft"""
    reg: str
    """Registration number"""
    country_of_reg: int
    """Country of registration code (e.g. `3`)"""
    type: str
    """Aircraft type code (e.g. `"A359"`)"""
    icon: Icon.ValueType
    full_description: str
    """Full aircraft description (e.g. `"Airbus A350-941"`)"""
    msn: str
    service: Service.ValueType
    ac_birth_date: str
    """Aircraft birth date string (e.g. `"2017-06-28"`)"""
    ac_age: int
    """Aircraft age"""
    is_test_flight: bool
    msn_available: bool
    age_available: bool
    registered_owners: str
    """Aircraft owner name (e.g. `"Air France"`)"""
    is_country_of_reg_available: bool
    @property
    def images_list(self) -> RepeatedCompositeFieldContainer[ImageInfo]: ...
    def __init__(
        self,
        *,
        icao_address: int = ...,
        reg: str = ...,
        country_of_reg: int = ...,
        type: str = ...,
        icon: Icon.ValueType = ...,
        full_description: str = ...,
        msn: str = ...,
        service: Service.ValueType = ...,
        ac_birth_date: str = ...,
        ac_age: int = ...,
        images_list: Iterable[ImageInfo] | None = ...,
        is_test_flight: bool = ...,
        msn_available: bool = ...,
        age_available: bool = ...,
        registered_owners: str = ...,
        is_country_of_reg_available: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["ac_age", b"ac_age", "ac_birth_date", b"ac_birth_date", "age_available", b"age_available", "country_of_reg", b"country_of_reg", "full_description", b"full_description", "icao_address", b"icao_address", "icon", b"icon", "images_list", b"images_list", "is_country_of_reg_available", b"is_country_of_reg_available", "is_test_flight", b"is_test_flight", "msn", b"msn", "msn_available", b"msn_available", "reg", b"reg", "registered_owners", b"registered_owners", "service", b"service", "type", b"type"]) -> None: ...

@final
class Point(Message):
    DESCRIPTOR: Descriptor

    LATITUDE_FIELD_NUMBER: int
    LONGITUDE_FIELD_NUMBER: int
    latitude: int
    """Latitude, degrees, -90 to 90"""
    longitude: int
    """Longitude, degrees, -180 to 180"""
    def __init__(
        self,
        *,
        latitude: int = ...,
        longitude: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["latitude", b"latitude", "longitude", b"longitude"]) -> None: ...

@final
class Coordinate(Message):
    DESCRIPTOR: Descriptor

    CODE_FIELD_NUMBER: int
    POINT_FIELD_NUMBER: int
    code: str
    @property
    def point(self) -> Point: ...
    def __init__(
        self,
        *,
        code: str = ...,
        point: Point | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["point", b"point"]) -> bool: ...
    def ClearField(self, field_name: Literal["code", b"code", "point", b"point"]) -> None: ...

@final
class Fix(Message):
    DESCRIPTOR: Descriptor

    AIRPORT_FIELD_NUMBER: int
    AREA_FIELD_NUMBER: int
    COORDINATE_FIELD_NUMBER: int
    airport: str
    area: str
    @property
    def coordinate(self) -> Coordinate: ...
    def __init__(
        self,
        *,
        airport: str = ...,
        area: str = ...,
        coordinate: Coordinate | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["coordinate", b"coordinate"]) -> bool: ...
    def ClearField(self, field_name: Literal["airport", b"airport", "area", b"area", "coordinate", b"coordinate"]) -> None: ...

@final
class AltArrival(Message):
    DESCRIPTOR: Descriptor

    ARRIVAL_FIELD_NUMBER: int
    LENGTH_FIELD_NUMBER: int
    length: float
    @property
    def arrival(self) -> Fix: ...
    def __init__(
        self,
        *,
        arrival: Fix | None = ...,
        length: float = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["arrival", b"arrival"]) -> bool: ...
    def ClearField(self, field_name: Literal["arrival", b"arrival", "length", b"length"]) -> None: ...

@final
class FlightPlan(Message):
    DESCRIPTOR: Descriptor

    DEPARTURE_FIELD_NUMBER: int
    DESTINATION_FIELD_NUMBER: int
    FLIGHT_PLAN_ICAO_FIELD_NUMBER: int
    LENGTH_FIELD_NUMBER: int
    ALT_ARRIVAL_1_FIELD_NUMBER: int
    ALT_ARRIVAL_2_FIELD_NUMBER: int
    WAYPOINTS_LIST_FIELD_NUMBER: int
    departure: str
    destination: str
    flight_plan_icao: str
    length: float
    @property
    def alt_arrival_1(self) -> AltArrival: ...
    @property
    def alt_arrival_2(self) -> AltArrival: ...
    @property
    def waypoints_list(self) -> RepeatedCompositeFieldContainer[Point]: ...
    def __init__(
        self,
        *,
        departure: str = ...,
        destination: str = ...,
        flight_plan_icao: str = ...,
        length: float = ...,
        alt_arrival_1: AltArrival | None = ...,
        alt_arrival_2: AltArrival | None = ...,
        waypoints_list: Iterable[Point] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["alt_arrival_1", b"alt_arrival_1", "alt_arrival_2", b"alt_arrival_2"]) -> bool: ...
    def ClearField(self, field_name: Literal["alt_arrival_1", b"alt_arrival_1", "alt_arrival_2", b"alt_arrival_2", "departure", b"departure", "destination", b"destination", "flight_plan_icao", b"flight_plan_icao", "length", b"length", "waypoints_list", b"waypoints_list"]) -> None: ...

@final
class ScheduleInfo(Message):
    DESCRIPTOR: Descriptor

    FLIGHT_NUMBER_FIELD_NUMBER: int
    OPERATED_BY_ID_FIELD_NUMBER: int
    PAINTED_AS_ID_FIELD_NUMBER: int
    ORIGIN_ID_FIELD_NUMBER: int
    DESTINATION_ID_FIELD_NUMBER: int
    DIVERTED_TO_ID_FIELD_NUMBER: int
    SCHEDULED_DEPARTURE_FIELD_NUMBER: int
    SCHEDULED_ARRIVAL_FIELD_NUMBER: int
    ACTUAL_DEPARTURE_FIELD_NUMBER: int
    ACTUAL_ARRIVAL_FIELD_NUMBER: int
    ARR_TERMINAL_FIELD_NUMBER: int
    ARR_GATE_FIELD_NUMBER: int
    BAGGAGE_BELT_FIELD_NUMBER: int
    flight_number: str
    """Flight number with airline prefix (e.g. `"AF334"`)"""
    operated_by_id: int
    """ID of the operating airline (e.g. `15`)"""
    painted_as_id: int
    """ID of the airline the aircraft is painted as (e.g. `15`)"""
    origin_id: int
    """Origin airport ID (e.g. `598`)"""
    destination_id: int
    """Destination airport ID (e.g. `451`)"""
    diverted_to_id: int
    """Diverted to airport ID"""
    scheduled_departure: int
    """Scheduled Time of Departure, Unix timestamp in seconds"""
    scheduled_arrival: int
    """Scheduled Time of Arrival, Unix timestamp in seconds"""
    actual_departure: int
    """Actual Time of Departure, Unix timestamp in seconds"""
    actual_arrival: int
    """Actual Time of Arrival, Unix timestamp in seconds"""
    arr_terminal: str
    """Arrival terminal (e.g. `"E"`)"""
    arr_gate: str
    """Arrival gate (e.g. `"E6"`)"""
    baggage_belt: str
    """Baggage belt (e.g. `"4"`)"""
    def __init__(
        self,
        *,
        flight_number: str = ...,
        operated_by_id: int = ...,
        painted_as_id: int = ...,
        origin_id: int = ...,
        destination_id: int = ...,
        diverted_to_id: int = ...,
        scheduled_departure: int = ...,
        scheduled_arrival: int = ...,
        actual_departure: int = ...,
        actual_arrival: int = ...,
        arr_terminal: str = ...,
        arr_gate: str = ...,
        baggage_belt: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["actual_arrival", b"actual_arrival", "actual_departure", b"actual_departure", "arr_gate", b"arr_gate", "arr_terminal", b"arr_terminal", "baggage_belt", b"baggage_belt", "destination_id", b"destination_id", "diverted_to_id", b"diverted_to_id", "flight_number", b"flight_number", "operated_by_id", b"operated_by_id", "origin_id", b"origin_id", "painted_as_id", b"painted_as_id", "scheduled_arrival", b"scheduled_arrival", "scheduled_departure", b"scheduled_departure"]) -> None: ...

@final
class ExtendedFlightInfo(Message):
    DESCRIPTOR: Descriptor

    FLIGHTID_FIELD_NUMBER: int
    LAT_FIELD_NUMBER: int
    LON_FIELD_NUMBER: int
    TRACK_FIELD_NUMBER: int
    ALT_FIELD_NUMBER: int
    SPEED_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    TIMESTAMP_MS_FIELD_NUMBER: int
    ON_GROUND_FIELD_NUMBER: int
    CALLSIGN_FIELD_NUMBER: int
    SOURCE_FIELD_NUMBER: int
    EMS_AVAILABILITY_FIELD_NUMBER: int
    EMS_INFO_FIELD_NUMBER: int
    SQUAWK_AVAILABILITY_FIELD_NUMBER: int
    SQUAWK_FIELD_NUMBER: int
    VSPEED_AVAILABILITY_FIELD_NUMBER: int
    VSPEED_FIELD_NUMBER: int
    AIRSPACE_AVAILABILITY_FIELD_NUMBER: int
    AIRSPACE_FIELD_NUMBER: int
    AIRSPACE_ID_FIELD_NUMBER: int
    SERVER_TIME_MS_FIELD_NUMBER: int
    flightid: int
    """Flight ID (e.g. `962788562` = `0x3962fcd2`)"""
    lat: float
    """Latitude, degrees, -90 to 90"""
    lon: float
    """Longitude, degrees, -180 to 180"""
    track: int
    """True track angle, degrees clockwise from North"""
    alt: int
    """Altitude, feet"""
    speed: int
    """Ground Speed, knots"""
    status: Status.ValueType
    timestamp_ms: int
    """Unix timestamp of message, milliseconds (e.g. `1741377144019`)"""
    on_ground: bool
    callsign: str
    """Callsign (e.g. `"AFR334"`)"""
    source: DataSource.ValueType
    squawk_availability: bool
    squawk: int
    """Squawk code, in base-10 (e.g. `3041` = 0o5741)"""
    vspeed_availability: bool
    vspeed: int
    """Vertical speed (e.g. `3328`)"""
    airspace_availability: bool
    airspace: str
    """Airspace, free-form text (e.g. `"Shannon UIR"`)"""
    airspace_id: str
    """Airspace ID (e.g. `"FIR_EINN_U"`)"""
    server_time_ms: int
    """Server timestamp, Unix timestamp in milliseconds (e.g. `1741377145974`)"""
    @property
    def ems_availability(self) -> EMSAvailability: ...
    @property
    def ems_info(self) -> EMSInfo: ...
    def __init__(
        self,
        *,
        flightid: int = ...,
        lat: float = ...,
        lon: float = ...,
        track: int = ...,
        alt: int = ...,
        speed: int = ...,
        status: Status.ValueType = ...,
        timestamp_ms: int = ...,
        on_ground: bool = ...,
        callsign: str = ...,
        source: DataSource.ValueType = ...,
        ems_availability: EMSAvailability | None = ...,
        ems_info: EMSInfo | None = ...,
        squawk_availability: bool = ...,
        squawk: int = ...,
        vspeed_availability: bool = ...,
        vspeed: int = ...,
        airspace_availability: bool = ...,
        airspace: str = ...,
        airspace_id: str = ...,
        server_time_ms: int = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ems_availability", b"ems_availability", "ems_info", b"ems_info"]) -> bool: ...
    def ClearField(self, field_name: Literal["airspace", b"airspace", "airspace_availability", b"airspace_availability", "airspace_id", b"airspace_id", "alt", b"alt", "callsign", b"callsign", "ems_availability", b"ems_availability", "ems_info", b"ems_info", "flightid", b"flightid", "lat", b"lat", "lon", b"lon", "on_ground", b"on_ground", "server_time_ms", b"server_time_ms", "source", b"source", "speed", b"speed", "squawk", b"squawk", "squawk_availability", b"squawk_availability", "status", b"status", "timestamp_ms", b"timestamp_ms", "track", b"track", "vspeed", b"vspeed", "vspeed_availability", b"vspeed_availability"]) -> None: ...

@final
class TrailPoint(Message):
    DESCRIPTOR: Descriptor

    SNAPSHOT_ID_FIELD_NUMBER: int
    LAT_FIELD_NUMBER: int
    LON_FIELD_NUMBER: int
    ALTITUDE_FIELD_NUMBER: int
    SPD_FIELD_NUMBER: int
    HEADING_FIELD_NUMBER: int
    VSPD_FIELD_NUMBER: int
    SOURCE_FIELD_NUMBER: int
    snapshot_id: int
    """Snapshot ID, likely Unix timestamp in seconds (e.g. `1741356300`)"""
    lat: float
    """Latitude, degrees, -90 to 90"""
    lon: float
    """Longitude, degrees, -180 to 180"""
    altitude: int
    """Altitude, feet"""
    spd: int
    """Ground speed, knots"""
    heading: int
    """True track angle, degrees clockwise from North.
    Note: despite the name, heading is not transmitted in ADS-B.
    """
    vspd: int
    """Vertical Speed, feet per minute"""
    source: DataSource.ValueType
    def __init__(
        self,
        *,
        snapshot_id: int = ...,
        lat: float = ...,
        lon: float = ...,
        altitude: int = ...,
        spd: int = ...,
        heading: int = ...,
        vspd: int = ...,
        source: DataSource.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["altitude", b"altitude", "heading", b"heading", "lat", b"lat", "lon", b"lon", "snapshot_id", b"snapshot_id", "source", b"source", "spd", b"spd", "vspd", b"vspd"]) -> None: ...

@final
class Duration(Message):
    """used in CountDown service"""

    DESCRIPTOR: Descriptor

    COUNT_FIELD_NUMBER: int
    count: int
    def __init__(
        self,
        *,
        count: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["count", b"count"]) -> None: ...

@final
class Tick(Message):
    DESCRIPTOR: Descriptor

    COUNT_FIELD_NUMBER: int
    count: int
    def __init__(
        self,
        *,
        count: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["count", b"count"]) -> None: ...

@final
class RadarHistoryRecord(Message):
    """used in *trail services"""

    DESCRIPTOR: Descriptor

    TIMESTAMP_FIELD_NUMBER: int
    LAT_FIELD_NUMBER: int
    LON_FIELD_NUMBER: int
    ALTITUDE_FIELD_NUMBER: int
    SPD_FIELD_NUMBER: int
    HEADING_FIELD_NUMBER: int
    VSPD_FIELD_NUMBER: int
    SQUAWK_FIELD_NUMBER: int
    SOURCE_FIELD_NUMBER: int
    CALLSIGN_FIELD_NUMBER: int
    timestamp: int
    """Observation timestamp, Unix timestamp in seconds"""
    lat: float
    """Latitude, degrees, -90 to 90"""
    lon: float
    """Longitude, degrees, -180 to 180"""
    altitude: int
    """Altitude, feet"""
    spd: int
    """Ground Speed, knots"""
    heading: int
    """True track angle, degrees clockwise from North.
    Note: despite the name, heading is not transmitted in ADS-B.
    """
    vspd: int
    """Vertical speed, feet per minute"""
    squawk: int
    source: DataSource.ValueType
    callsign: str
    """Callsign, e.g. `CPA959`"""
    def __init__(
        self,
        *,
        timestamp: int = ...,
        lat: float = ...,
        lon: float = ...,
        altitude: int = ...,
        spd: int = ...,
        heading: int = ...,
        vspd: int = ...,
        squawk: int = ...,
        source: DataSource.ValueType = ...,
        callsign: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["altitude", b"altitude", "callsign", b"callsign", "heading", b"heading", "lat", b"lat", "lon", b"lon", "source", b"source", "spd", b"spd", "squawk", b"squawk", "timestamp", b"timestamp", "vspd", b"vspd"]) -> None: ...
