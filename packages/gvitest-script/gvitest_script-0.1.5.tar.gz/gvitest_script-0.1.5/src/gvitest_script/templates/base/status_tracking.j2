# 实时状态追踪模板 - 基于文档完整功能

# 实时状态追踪系统初始化
import json
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from pathlib import Path
import psutil
import requests
from queue import Queue
import gzip


# 全局状态追踪器
_status_tracker = None

class RealTimeStatusTracker:
    """实时状态追踪器 - 基于文档设计"""

    def __init__(self, config, script_id: str, workspace_root: Path):
        self.config = config
        self.script_id = script_id
        self.workspace_root = workspace_root
        self.start_time = datetime.now()
        self.current_status = {}
        self.status_history = []
        self.update_queue = Queue()
        self.update_thread = None
        self.status_file_path = None
        self.total_steps = 0
        self.current_step = 0
        self.step_start_times = {}

        self._initialize()

    def _initialize(self):
        """初始化追踪器"""
        if not self.config.enable_tracking:
            return

        # 设置状态文件路径
        status_dir = self.workspace_root / self.script_id / "status"
        status_dir.mkdir(parents=True, exist_ok=True)
        self.status_file_path = status_dir / self.config.status_file_name

        # 启动更新线程
        self.update_thread = threading.Thread(target=self._update_worker, daemon=True)
        self.update_thread.start()

        # 初始化状态
        self._update_status("task_start", {
            "task_id": self.script_id,
            "status": "started",
            "start_time": self.start_time.isoformat(),
            "progress_percent": 0.0
        })

    def _update_worker(self):
        """状态更新工作线程"""
        while True:
            try:
                status_data = self.update_queue.get(timeout=1.0)
                if status_data is None:  # 停止信号
                    break

                # 写入状态文件
                if self.status_file_path:
                    with open(self.status_file_path, 'w', encoding='utf-8') as f:
                        if self.config.pretty_format:
                            json.dump(status_data, f, ensure_ascii=False, indent=2, default=str)
                        else:
                            json.dump(status_data, f, ensure_ascii=False, default=str)

                # 发送HTTP更新（如果配置了）
                if self.config.enable_http_api:
                    self._send_http_update(status_data)

            except Exception as e:
                logging.error(f"状态更新失败: {e}")

    def _send_http_update(self, status_data: Dict[str, Any]):
        """发送HTTP状态更新"""
        try:
            url = f"http://localhost:{self.config.api_port}{self.config.api_endpoint}/{self.script_id}/update"
            requests.post(url, json={"status_data": status_data}, timeout=5.0)
        except Exception as e:
            logging.debug(f"HTTP状态更新失败: {e}")

    def set_total_steps(self, total_steps: int):
        """设置总步骤数"""
        self.total_steps = total_steps
        self._update_status("total_steps_set", {"total_steps": total_steps})

    def start_step(self, step_number: int, step_name: str, step_data: Dict[str, Any] = None):
        """开始执行步骤"""
        self.current_step = step_number
        self.step_start_times[step_number] = time.time()

        update_data = {
            "current_step": step_number,
            "step_name": step_name,
            "step_status": "executing",
            "progress_percent": (step_number / self.total_steps * 100) if self.total_steps > 0 else 0
        }

        if step_data:
            update_data["step_data"] = step_data

        self._update_status("step_start", update_data)

    def complete_step(self, step_number: int, result: Dict[str, Any] = None):
        """完成步骤"""
        step_duration = time.time() - self.step_start_times.get(step_number, time.time())

        update_data = {
            "current_step": step_number,
            "step_status": "completed",
            "step_duration": step_duration,
            "progress_percent": ((step_number + 1) / self.total_steps * 100) if self.total_steps > 0 else 0
        }

        if result:
            update_data["step_result"] = result

        # 计算ETA
        if self.config.calculate_eta and self.total_steps > 0:
            completed_steps = step_number + 1
            remaining_steps = self.total_steps - completed_steps
            avg_step_time = (time.time() - self.start_time.timestamp()) / completed_steps
            eta_seconds = remaining_steps * avg_step_time
            update_data["eta_seconds"] = eta_seconds
            update_data["estimated_completion"] = (datetime.now() + timedelta(seconds=eta_seconds)).isoformat()

        self._update_status("step_complete", update_data)

    def error_step(self, step_number: int, error_info: Dict[str, Any]):
        """步骤执行错误"""
        update_data = {
            "current_step": step_number,
            "step_status": "error",
            "error_info": error_info
        }

        self._update_status("step_error", update_data)

    def update_checkpoint(self, step_number: int, checkpoint_result: Dict[str, Any]):
        """更新检查点状态"""
        if not self.config.track_checkpoint_status:
            return

        update_data = {
            "current_step": step_number,
            "checkpoint_result": checkpoint_result
        }

        self._update_status("checkpoint_update", update_data)

    def update_screenshot(self, step_number: int, screenshot_info: Dict[str, Any]):
        """更新截图信息"""
        if not self.config.track_screenshot_info:
            return

        update_data = {
            "current_step": step_number,
            "screenshot_info": screenshot_info
        }



        self._update_status("screenshot_update", update_data)

    def complete_task(self, final_result: Dict[str, Any] = None):
        """完成任务"""
        total_duration = time.time() - self.start_time.timestamp()

        update_data = {
            "status": "completed",
            "total_duration": total_duration,
            "end_time": datetime.now().isoformat(),
            "progress_percent": 100.0
        }

        if final_result:
            update_data["final_result"] = final_result

        self._update_status("task_complete", update_data)

        # 停止更新线程
        self.update_queue.put(None)

    def error_task(self, error_info: Dict[str, Any]):
        """任务执行错误"""
        update_data = {
            "status": "error",
            "error_info": error_info,
            "end_time": datetime.now().isoformat()
        }

        self._update_status("task_error", update_data)

        # 停止更新线程
        self.update_queue.put(None)

    def _update_status(self, update_type: str, data: Dict[str, Any]):
        """更新状态"""
        if not self.config.enable_tracking:
            return

        # 构建完整状态数据
        full_status = {
            "timestamp": datetime.now().isoformat(),
            "task_id": self.script_id,
            "update_type": update_type,
            **data
        }

        # 添加性能指标
        if self.config.track_performance_metrics:
            try:
                process = psutil.Process()
                full_status["performance"] = {
                    "memory_usage": process.memory_info().rss / 1024 / 1024,  # MB
                    "cpu_percent": process.cpu_percent(),
                    "memory_percent": process.memory_percent()
                }
            except Exception:
                pass

        # 更新当前状态
        self.current_status = full_status

        # 添加到历史记录
        self.status_history.append(full_status.copy())
        if len(self.status_history) > 100:  # 限制历史记录数量
            self.status_history.pop(0)

        # 发送更新
        self.update_queue.put(full_status)

def init_status_tracker(config, script_id: str, workspace_root: Path) -> Optional[RealTimeStatusTracker]:
    """初始化状态追踪器"""
    global _status_tracker

    if not config or not config.enable_tracking:
        return None

    _status_tracker = RealTimeStatusTracker(config, script_id, workspace_root)
    return _status_tracker

def get_status_tracker() -> Optional[RealTimeStatusTracker]:
    """获取当前状态追踪器"""
    return _status_tracker

# 状态追踪宏定义

{% macro track_task_start(task_id, description) %}
# 开始任务追踪
logging.info(f"任务开始: {{ task_id }} - {{ description }}")
start_time = time.time()
{% endmacro %}

{% macro track_task_complete(success) %}
# 完成任务追踪
end_time = time.time()
total_duration = end_time - start_time
success_status = {{ success }}
logging.info(f"任务完成，总耗时: {total_duration:.2f}秒，成功: {success_status}")
{% endmacro %}

{% macro init_tracking(config, task_id, workspace_root, total_steps) %}
# 初始化实时状态追踪
tracker = init_status_tracker({{ config }}, "{{ task_id }}", Path("{{ workspace_root | escape_path_for_python }}"))
if tracker:
    tracker.set_total_steps({{ total_steps }})
    logging.info(f"实时状态追踪已启用: 任务ID={{ task_id }}, 总步骤数={{ total_steps }}")
{% endmacro %}

{% macro start_step_tracking(step_number, step_name, step_data=None) %}
# 开始步骤追踪
tracker = get_status_tracker()
if tracker:
    tracker.start_step({{ step_number }}, "{{ step_name }}"{% if step_data %}, {{ step_data }}{% endif %})
{% endmacro %}

{% macro complete_step_tracking(step_number, result=None) %}
# 完成步骤追踪
tracker = get_status_tracker()
if tracker:
    tracker.complete_step({{ step_number }}{% if result %}, {{ result }}{% endif %})
{% endmacro %}

{% macro error_step_tracking(step_number, error_info) %}
# 步骤错误追踪
tracker = get_status_tracker()
if tracker:
    tracker.error_step({{ step_number }}, {{ error_info }})
{% endmacro %}

{% macro update_checkpoint_tracking(step_number, checkpoint_result) %}
# 更新检查点追踪
tracker = get_status_tracker()
if tracker:
    tracker.update_checkpoint({{ step_number }}, {{ checkpoint_result }})
{% endmacro %}

{% macro update_screenshot_tracking(step_number, screenshot_info) %}
# 更新截图追踪
tracker = get_status_tracker()
if tracker:
    tracker.update_screenshot({{ step_number }}, {{ screenshot_info }})
{% endmacro %}

{% macro finalize_tracking(final_result=None) %}
# 完成任务追踪
tracker = get_status_tracker()
if tracker:
    tracker.complete_task({% if final_result %}{{ final_result }}{% endif %})
    logging.info("实时状态追踪已完成")
{% endmacro %}

{% macro handle_tracking_error(error_info) %}
# 任务错误追踪
tracker = get_status_tracker()
if tracker:
    tracker.error_task({{ error_info }})
    logging.error("任务执行出错，状态追踪已记录")
{% endmacro %}

{# 为兼容性添加的简化宏定义 - 修复版本 #}
{% macro track_step_start(step_data, device, runner_dir) %}
logging.info("开始执行步骤 %s: %s" % ({{ step_data }}.get('step_number', 0), {{ step_data }}.get('step_name', '未知步骤')))
{% endmacro %}

{% macro track_step_complete(step_data, success) %}
logging.info("步骤 %s 完成: %s, 成功: %s" % ({{ step_data }}.get('step_number', 0), {{ step_data }}.get('step_name', '未知步骤'), {{ success }}))
{% endmacro %}

{% macro track_step_error(step_data, error_message) %}
logging.error("步骤 %s 执行错误: %s, 错误: %s" % ({{ step_data }}.get('step_number', 0), {{ step_data }}.get('step_name', '未知步骤'), {{ error_message }}))
{% endmacro %}
