{# 错误处理器模板 - 统一错误处理和日志记录 #}
{# 适用于：操作失败、异常情况处理 #}

# ==================== 错误处理器 ====================
def handle_error_action(step_data, device, runner_dir, screenshot_count, previous_after_screenshot=None):
    """
    处理错误动作 - 统一错误处理和日志记录
    
    Args:
        step_data: 步骤上下文对象
        device: uiautomator2设备对象
        runner_dir: 运行目录路径
        screenshot_count: 截图计数
        previous_after_screenshot: 前一步的执行后截图路径（错误处理通常需要新截图）
    
    Returns:
        Dict: 执行结果
    """
    
    step_number = step_data.get('step_number', 0)
    step_name = step_data.get('step_name', '未知步骤')
    operation_type = step_data.get('operation_type', 'unknown')
    
    logging.error(f"步骤 {step_number}: 进入错误处理器")

    # 获取错误信息
    element_info = step_data.get('element_info', {})
    error_message = element_info.get('error_message', '未知错误')
    
    # 记录错误详情
    logging.error(f"❌ 错误步骤详情:")
    logging.error(f"   步骤编号: {step_number}")
    logging.error(f"   步骤名称: {step_name}")
    logging.error(f"   操作类型: {operation_type}")
    logging.error(f"   错误信息: {error_message}")
    
    # 尝试保存错误时的截图
    try:
        error_screenshot_path = take_screenshot_and_save(
            device, runner_dir, f"error_step_{step_number}", "错误截图 - 记录步骤执行失败时的界面状态"
        )
        step_data['before_execution_screenshot_path'] = error_screenshot_path
        logging.info(f"错误截图已保存并上传: {error_screenshot_path}")
        
    except Exception as screenshot_err:
        logging.warning(f"保存错误截图失败: {screenshot_err}")
        step_data['before_execution_screenshot_path'] = ""
    
    # 错误状态更新
    is_pass = False
    detail = f"步骤执行失败: {error_message}"
    

    
    # 保存错误日志到文件
    try:
        error_log_file = os.path.join(runner_dir, "error_log.txt")
        with open(error_log_file, 'a', encoding='utf-8') as f:
            f.write(f"[{datetime.now().isoformat()}] 步骤 {step_number}: {detail}\n")
            f.write(f"    操作类型: {operation_type}\n")
            f.write(f"    步骤名称: {step_name}\n")
            f.write(f"    错误信息: {error_message}\n")
            f.write(f"    错误截图: {error_screenshot_path if 'error_screenshot_path' in locals() else 'N/A'}\n")
            f.write("-" * 80 + "\n")
    except Exception as log_err:
        logging.warning(f"写入错误日志文件失败: {log_err}")
    
    logging.error(f"❌ 错误处理器完成: {detail}")
    
    return {
        "status": "failed",
        "message": detail,

    } 