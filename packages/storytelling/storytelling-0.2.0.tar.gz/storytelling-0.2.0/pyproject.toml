[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "storytelling"
version = "0.2.0"
description = "AI-powered narrative generation system implementing Software 3.0 methodology - The Soul of Your Story's Blueprint"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "JGWill", email = "jgwill@example.com"}
]
maintainers = [
    {name = "JGWill"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Games/Entertainment",
    "License :: OSI Approved :: MIT License",
]
keywords = [
    "narrative-generation",
    "ai-writing",
    "software-3.0",
    "creative-writing", 
    "story-generation",
    "langchain",
    "langgraph",
    "rag",
    "llm",
    "ollama",
    "interactive-storytelling",
    "worldbuilding"
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0",
    "langchain>=0.1.0",
    "langgraph>=0.0.40",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.8",
    "langchain-ollama>=0.0.1",
    "faiss-cpu>=1.7.4",
    "termcolor>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
# Heavy ML dependencies for local embedding models
local-ml = [
    "sentence-transformers>=2.2.2",
    "langchain-huggingface>=0.0.1",
]

# Provider-specific extensions
google = [
    "langchain-google-genai>=0.0.6",
]
openrouter = [
    "langchain-openrouter>=0.0.1",
]

# Performance and deployment options
gpu = [
    "faiss-gpu>=1.7.4",
]
cloud = [
    "langfuse>=2.0.0",
    "openai>=1.0.0",
]

# Enhanced RAG and multi-source features
enhanced = [
    "storytelling[cloud]",
    "beautifulsoup4>=4.12.0",
    "html2text>=2020.1.16",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0", 
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0", 
    "myst-parser>=1.0.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
]

# Convenience bundles
all = [
    "storytelling[local-ml,google,openrouter,gpu,cloud,enhanced]",
]

[project.urls]
Homepage = "https://github.com/jgwill/storytelling"
Repository = "https://github.com/jgwill/storytelling"
Documentation = "https://github.com/jgwill/storytelling/blob/main/README.md"
Issues = "https://github.com/jgwill/storytelling/issues"

[project.scripts]
storytelling = "storytelling.cli:main"

# Legacy compatibility aliases
willwrite = "storytelling.cli:main"
specforge = "storytelling.cli:main"

[tool.setuptools.packages.find]
include = ["storytelling*"]

[tool.setuptools.package-data]
storytelling = [
    "templates/*.txt",
    "templates/*.md",
    "configs/*.json", 
    "configs/*.yaml",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "rag: marks tests that require RAG functionality",
    "ollama: marks tests that require local Ollama models",
]

[tool.coverage.run]
source = ["storytelling"]
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false