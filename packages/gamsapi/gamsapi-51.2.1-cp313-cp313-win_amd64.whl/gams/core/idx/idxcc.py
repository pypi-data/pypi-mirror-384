# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from gams.core.idx import _idxcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _idxcc.intArray_swiginit(self, _idxcc.new_intArray(nelements))
    __swig_destroy__ = _idxcc.delete_intArray

    def __getitem__(self, index):
        return _idxcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _idxcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _idxcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _idxcc.intArray_frompointer(t)

# Register intArray in _idxcc:
_idxcc.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _idxcc.doubleArray_swiginit(self, _idxcc.new_doubleArray(nelements))
    __swig_destroy__ = _idxcc.delete_doubleArray

    def __getitem__(self, index):
        return _idxcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _idxcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _idxcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _idxcc.doubleArray_frompointer(t)

# Register doubleArray in _idxcc:
_idxcc.doubleArray_swigregister(doubleArray)

def new_intp():
    return _idxcc.new_intp()

def copy_intp(value):
    return _idxcc.copy_intp(value)

def delete_intp(obj):
    return _idxcc.delete_intp(obj)

def intp_assign(obj, value):
    return _idxcc.intp_assign(obj, value)

def intp_value(obj):
    return _idxcc.intp_value(obj)

def new_doublep():
    return _idxcc.new_doublep()

def copy_doublep(value):
    return _idxcc.copy_doublep(value)

def delete_doublep(obj):
    return _idxcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _idxcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _idxcc.doublep_value(obj)

def new_idxHandle_tp():
    return _idxcc.new_idxHandle_tp()

def copy_idxHandle_tp(value):
    return _idxcc.copy_idxHandle_tp(value)

def delete_idxHandle_tp(obj):
    return _idxcc.delete_idxHandle_tp(obj)

def idxHandle_tp_assign(obj, value):
    return _idxcc.idxHandle_tp_assign(obj, value)

def idxHandle_tp_value(obj):
    return _idxcc.idxHandle_tp_value(obj)

def idxHandleToPtr(pidx):
    r"""idxHandleToPtr(pidx) -> void *"""
    return _idxcc.idxHandleToPtr(pidx)

def ptrToidxHandle(vptr):
    r"""ptrToidxHandle(vptr) -> idxHandle_t"""
    return _idxcc.ptrToidxHandle(vptr)

def idxGetReady(msgBufSize):
    r"""idxGetReady(msgBufSize) -> int"""
    return _idxcc.idxGetReady(msgBufSize)

def idxGetReadyD(dirName, msgBufSize):
    r"""idxGetReadyD(dirName, msgBufSize) -> int"""
    return _idxcc.idxGetReadyD(dirName, msgBufSize)

def idxGetReadyL(libName, msgBufSize):
    r"""idxGetReadyL(libName, msgBufSize) -> int"""
    return _idxcc.idxGetReadyL(libName, msgBufSize)

def idxCreate(pidx, msgBufSize):
    r"""idxCreate(pidx, msgBufSize) -> int"""
    return _idxcc.idxCreate(pidx, msgBufSize)

def idxCreateD(pidx, dirName, msgBufSize):
    r"""idxCreateD(pidx, dirName, msgBufSize) -> int"""
    return _idxcc.idxCreateD(pidx, dirName, msgBufSize)

def idxCreateL(pidx, libName, msgBufSize):
    r"""idxCreateL(pidx, libName, msgBufSize) -> int"""
    return _idxcc.idxCreateL(pidx, libName, msgBufSize)

def idxFree(pidx):
    r"""idxFree(pidx) -> int"""
    return _idxcc.idxFree(pidx)

def idxLibraryLoaded():
    r"""idxLibraryLoaded() -> int"""
    return _idxcc.idxLibraryLoaded()

def idxLibraryUnload():
    r"""idxLibraryUnload() -> int"""
    return _idxcc.idxLibraryUnload()

def idxGetScreenIndicator():
    r"""idxGetScreenIndicator() -> int"""
    return _idxcc.idxGetScreenIndicator()

def idxSetScreenIndicator(scrind):
    r"""idxSetScreenIndicator(scrind)"""
    return _idxcc.idxSetScreenIndicator(scrind)

def idxGetExceptionIndicator():
    r"""idxGetExceptionIndicator() -> int"""
    return _idxcc.idxGetExceptionIndicator()

def idxSetExceptionIndicator(excind):
    r"""idxSetExceptionIndicator(excind)"""
    return _idxcc.idxSetExceptionIndicator(excind)

def idxGetExitIndicator():
    r"""idxGetExitIndicator() -> int"""
    return _idxcc.idxGetExitIndicator()

def idxSetExitIndicator(extind):
    r"""idxSetExitIndicator(extind)"""
    return _idxcc.idxSetExitIndicator(extind)

def idxGetErrorCallback():
    r"""idxGetErrorCallback() -> idxErrorCallback_t"""
    return _idxcc.idxGetErrorCallback()

def idxSetErrorCallback(func):
    r"""idxSetErrorCallback(func)"""
    return _idxcc.idxSetErrorCallback(func)

def idxGetAPIErrorCount():
    r"""idxGetAPIErrorCount() -> int"""
    return _idxcc.idxGetAPIErrorCount()

def idxSetAPIErrorCount(ecnt):
    r"""idxSetAPIErrorCount(ecnt)"""
    return _idxcc.idxSetAPIErrorCount(ecnt)

def idxErrorHandling(msg):
    r"""idxErrorHandling(msg)"""
    return _idxcc.idxErrorHandling(msg)

def idxGetLastError(pidx):
    r"""idxGetLastError(pidx) -> int"""
    return _idxcc.idxGetLastError(pidx)

def idxErrorStr(pidx, ErrNr, ErrMsg_i):
    r"""idxErrorStr(pidx, ErrNr, ErrMsg_i)"""
    return _idxcc.idxErrorStr(pidx, ErrNr, ErrMsg_i)

def idxOpenRead(pidx, FileName):
    r"""idxOpenRead(pidx, FileName) -> int"""
    return _idxcc.idxOpenRead(pidx, FileName)

def idxOpenWrite(pidx, FileName, Producer):
    r"""idxOpenWrite(pidx, FileName, Producer) -> int"""
    return _idxcc.idxOpenWrite(pidx, FileName, Producer)

def idxClose(pidx):
    r"""idxClose(pidx) -> int"""
    return _idxcc.idxClose(pidx)

def idxGetSymCount(pidx):
    r"""idxGetSymCount(pidx) -> int"""
    return _idxcc.idxGetSymCount(pidx)

def idxGetSymbolInfo(pidx, iSym, symName_i, explText_i):
    r"""idxGetSymbolInfo(pidx, iSym, symName_i, explText_i) -> int"""
    return _idxcc.idxGetSymbolInfo(pidx, iSym, symName_i, explText_i)

def idxGetSymbolInfoByName(pidx, symName, explText_i):
    r"""idxGetSymbolInfoByName(pidx, symName, explText_i) -> int"""
    return _idxcc.idxGetSymbolInfoByName(pidx, symName, explText_i)

def idxGetIndexBase(pidx):
    r"""idxGetIndexBase(pidx) -> int"""
    return _idxcc.idxGetIndexBase(pidx)

def idxSetIndexBase(pidx, idxBase):
    r"""idxSetIndexBase(pidx, idxBase) -> int"""
    return _idxcc.idxSetIndexBase(pidx, idxBase)

def idxDataReadStart(pidx, symName, ErrMsg_i):
    r"""idxDataReadStart(pidx, symName, ErrMsg_i) -> int"""
    return _idxcc.idxDataReadStart(pidx, symName, ErrMsg_i)

def idxDataRead(pidx):
    r"""idxDataRead(pidx) -> int"""
    return _idxcc.idxDataRead(pidx)

def idxDataReadDone(pidx):
    r"""idxDataReadDone(pidx) -> int"""
    return _idxcc.idxDataReadDone(pidx)

def idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals):
    r"""idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals) -> int"""
    return _idxcc.idxDataReadSparseColMajor(pidx, idxBase, colPtr, rowIdx, vals)

def idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals):
    r"""idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals) -> int"""
    return _idxcc.idxDataReadSparseRowMajor(pidx, idxBase, rowPtr, colIdx, vals)

def idxDataReadDenseColMajor(pidx, vals):
    r"""idxDataReadDenseColMajor(pidx, vals) -> int"""
    return _idxcc.idxDataReadDenseColMajor(pidx, vals)

def idxDataReadDenseRowMajor(pidx, vals):
    r"""idxDataReadDenseRowMajor(pidx, vals) -> int"""
    return _idxcc.idxDataReadDenseRowMajor(pidx, vals)

def idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i):
    r"""idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i) -> int"""
    return _idxcc.idxDataWriteStart(pidx, symName, explTxt, symDim, dims, ErrMsg_i)

def idxDataWrite(pidx, keys, val):
    r"""idxDataWrite(pidx, keys, val) -> int"""
    return _idxcc.idxDataWrite(pidx, keys, val)

def idxDataWriteDone(pidx):
    r"""idxDataWriteDone(pidx) -> int"""
    return _idxcc.idxDataWriteDone(pidx)

def idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals):
    r"""idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals) -> int"""
    return _idxcc.idxDataWriteSparseColMajor(pidx, colPtr, rowIdx, vals)

def idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals):
    r"""idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals) -> int"""
    return _idxcc.idxDataWriteSparseRowMajor(pidx, rowPtr, colIdx, vals)

def idxDataWriteDenseColMajor(pidx, dataDim, vals):
    r"""idxDataWriteDenseColMajor(pidx, dataDim, vals) -> int"""
    return _idxcc.idxDataWriteDenseColMajor(pidx, dataDim, vals)

def idxDataWriteDenseRowMajor(pidx, dataDim, vals):
    r"""idxDataWriteDenseRowMajor(pidx, dataDim, vals) -> int"""
    return _idxcc.idxDataWriteDenseRowMajor(pidx, dataDim, vals)
GLOBAL_MAX_INDEX_DIM = _idxcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _idxcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _idxcc.ITERLIM_INFINITY

RESLIM_INFINITY = _idxcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _idxcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _idxcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _idxcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _idxcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _idxcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _idxcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _idxcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _idxcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _idxcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _idxcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _idxcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _idxcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _idxcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _idxcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _idxcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _idxcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _idxcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _idxcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _idxcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _idxcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _idxcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _idxcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _idxcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _idxcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _idxcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _idxcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _idxcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _idxcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _idxcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _idxcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _idxcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _idxcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _idxcc.GMS_VAL_SCALE

GMS_VAL_MAX = _idxcc.GMS_VAL_MAX

sv_valund = _idxcc.sv_valund

sv_valna = _idxcc.sv_valna

sv_valpin = _idxcc.sv_valpin

sv_valmin = _idxcc.sv_valmin

sv_valeps = _idxcc.sv_valeps

sv_normal = _idxcc.sv_normal

sv_acronym = _idxcc.sv_acronym

GMS_SVIDX_UNDEF = _idxcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _idxcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _idxcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _idxcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _idxcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _idxcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _idxcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _idxcc.GMS_SVIDX_MAX

dt_set = _idxcc.dt_set

dt_par = _idxcc.dt_par

dt_var = _idxcc.dt_var

dt_equ = _idxcc.dt_equ

dt_alias = _idxcc.dt_alias

GMS_DT_SET = _idxcc.GMS_DT_SET

GMS_DT_PAR = _idxcc.GMS_DT_PAR

GMS_DT_VAR = _idxcc.GMS_DT_VAR

GMS_DT_EQU = _idxcc.GMS_DT_EQU

GMS_DT_ALIAS = _idxcc.GMS_DT_ALIAS

GMS_DT_MAX = _idxcc.GMS_DT_MAX

GMS_SV_UNDEF = _idxcc.GMS_SV_UNDEF

GMS_SV_NA = _idxcc.GMS_SV_NA

GMS_SV_PINF = _idxcc.GMS_SV_PINF

GMS_SV_MINF = _idxcc.GMS_SV_MINF

GMS_SV_EPS = _idxcc.GMS_SV_EPS

GMS_SV_ACR = _idxcc.GMS_SV_ACR

GMS_SV_NAINT = _idxcc.GMS_SV_NAINT

STAT_OK = _idxcc.STAT_OK

STAT_NOPT = _idxcc.STAT_NOPT

STAT_INFES = _idxcc.STAT_INFES

STAT_UNBND = _idxcc.STAT_UNBND

STAT_EVAL = _idxcc.STAT_EVAL

STAT_UNKNW = _idxcc.STAT_UNKNW

STAT_REDEF = _idxcc.STAT_REDEF

STAT_DEPND = _idxcc.STAT_DEPND

STAT_REDIR = _idxcc.STAT_REDIR

STAT_MAX = _idxcc.STAT_MAX

SS_MAX = _idxcc.SS_MAX

MS_MAX = _idxcc.MS_MAX


cvar = _idxcc.cvar
gmsGdxTypeText = cvar.gmsGdxTypeText
gmsVarTypeText = cvar.gmsVarTypeText
gmsValTypeText = cvar.gmsValTypeText
gmsSVText = cvar.gmsSVText
gmsSpecialValues = cvar.gmsSpecialValues
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

