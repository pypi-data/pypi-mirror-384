# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from gams.core.dct import _dctmcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


dctunknownSymType = _dctmcc.dctunknownSymType
dctfuncSymType = _dctmcc.dctfuncSymType
dctsetSymType = _dctmcc.dctsetSymType
dctacrSymType = _dctmcc.dctacrSymType
dctparmSymType = _dctmcc.dctparmSymType
dctvarSymType = _dctmcc.dctvarSymType
dcteqnSymType = _dctmcc.dcteqnSymType
dctaliasSymType = _dctmcc.dctaliasSymType
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dctmcc.intArray_swiginit(self, _dctmcc.new_intArray(nelements))
    __swig_destroy__ = _dctmcc.delete_intArray

    def __getitem__(self, index):
        return _dctmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _dctmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _dctmcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _dctmcc.intArray_frompointer(t)

# Register intArray in _dctmcc:
_dctmcc.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dctmcc.doubleArray_swiginit(self, _dctmcc.new_doubleArray(nelements))
    __swig_destroy__ = _dctmcc.delete_doubleArray

    def __getitem__(self, index):
        return _dctmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _dctmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _dctmcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _dctmcc.doubleArray_frompointer(t)

# Register doubleArray in _dctmcc:
_dctmcc.doubleArray_swigregister(doubleArray)

def new_intp():
    return _dctmcc.new_intp()

def copy_intp(value):
    return _dctmcc.copy_intp(value)

def delete_intp(obj):
    return _dctmcc.delete_intp(obj)

def intp_assign(obj, value):
    return _dctmcc.intp_assign(obj, value)

def intp_value(obj):
    return _dctmcc.intp_value(obj)

def new_doublep():
    return _dctmcc.new_doublep()

def copy_doublep(value):
    return _dctmcc.copy_doublep(value)

def delete_doublep(obj):
    return _dctmcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _dctmcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _dctmcc.doublep_value(obj)

def new_dctHandle_tp():
    return _dctmcc.new_dctHandle_tp()

def copy_dctHandle_tp(value):
    return _dctmcc.copy_dctHandle_tp(value)

def delete_dctHandle_tp(obj):
    return _dctmcc.delete_dctHandle_tp(obj)

def dctHandle_tp_assign(obj, value):
    return _dctmcc.dctHandle_tp_assign(obj, value)

def dctHandle_tp_value(obj):
    return _dctmcc.dctHandle_tp_value(obj)

def dctHandleToPtr(pdct):
    r"""dctHandleToPtr(pdct) -> void *"""
    return _dctmcc.dctHandleToPtr(pdct)

def ptrTodctHandle(vptr):
    r"""ptrTodctHandle(vptr) -> dctHandle_t"""
    return _dctmcc.ptrTodctHandle(vptr)

def dctGetReady(msgBufSize):
    r"""dctGetReady(msgBufSize) -> int"""
    return _dctmcc.dctGetReady(msgBufSize)

def dctGetReadyD(dirName, msgBufSize):
    r"""dctGetReadyD(dirName, msgBufSize) -> int"""
    return _dctmcc.dctGetReadyD(dirName, msgBufSize)

def dctGetReadyL(libName, msgBufSize):
    r"""dctGetReadyL(libName, msgBufSize) -> int"""
    return _dctmcc.dctGetReadyL(libName, msgBufSize)

def dctCreate(pdct, msgBufSize):
    r"""dctCreate(pdct, msgBufSize) -> int"""
    return _dctmcc.dctCreate(pdct, msgBufSize)

def dctCreateD(pdct, dirName, msgBufSize):
    r"""dctCreateD(pdct, dirName, msgBufSize) -> int"""
    return _dctmcc.dctCreateD(pdct, dirName, msgBufSize)

def dctCreateDD(pdct, dirName, msgBufSize):
    r"""dctCreateDD(pdct, dirName, msgBufSize) -> int"""
    return _dctmcc.dctCreateDD(pdct, dirName, msgBufSize)

def dctCreateL(pdct, libName, msgBufSize):
    r"""dctCreateL(pdct, libName, msgBufSize) -> int"""
    return _dctmcc.dctCreateL(pdct, libName, msgBufSize)

def dctFree(pdct):
    r"""dctFree(pdct) -> int"""
    return _dctmcc.dctFree(pdct)

def dctLibraryLoaded():
    r"""dctLibraryLoaded() -> int"""
    return _dctmcc.dctLibraryLoaded()

def dctLibraryUnload():
    r"""dctLibraryUnload() -> int"""
    return _dctmcc.dctLibraryUnload()

def dctGetScreenIndicator():
    r"""dctGetScreenIndicator() -> int"""
    return _dctmcc.dctGetScreenIndicator()

def dctSetScreenIndicator(scrind):
    r"""dctSetScreenIndicator(scrind)"""
    return _dctmcc.dctSetScreenIndicator(scrind)

def dctGetExceptionIndicator():
    r"""dctGetExceptionIndicator() -> int"""
    return _dctmcc.dctGetExceptionIndicator()

def dctSetExceptionIndicator(excind):
    r"""dctSetExceptionIndicator(excind)"""
    return _dctmcc.dctSetExceptionIndicator(excind)

def dctGetExitIndicator():
    r"""dctGetExitIndicator() -> int"""
    return _dctmcc.dctGetExitIndicator()

def dctSetExitIndicator(extind):
    r"""dctSetExitIndicator(extind)"""
    return _dctmcc.dctSetExitIndicator(extind)

def dctGetErrorCallback():
    r"""dctGetErrorCallback() -> dctErrorCallback_t"""
    return _dctmcc.dctGetErrorCallback()

def dctSetErrorCallback(func):
    r"""dctSetErrorCallback(func)"""
    return _dctmcc.dctSetErrorCallback(func)

def dctGetAPIErrorCount():
    r"""dctGetAPIErrorCount() -> int"""
    return _dctmcc.dctGetAPIErrorCount()

def dctSetAPIErrorCount(ecnt):
    r"""dctSetAPIErrorCount(ecnt)"""
    return _dctmcc.dctSetAPIErrorCount(ecnt)

def dctErrorHandling(msg):
    r"""dctErrorHandling(msg)"""
    return _dctmcc.dctErrorHandling(msg)

def dctLoadEx(pdct, fName, Msg_i):
    r"""dctLoadEx(pdct, fName, Msg_i) -> int"""
    return _dctmcc.dctLoadEx(pdct, fName, Msg_i)

def dctLoadWithHandle(pdct, gdxptr, Msg_i):
    r"""dctLoadWithHandle(pdct, gdxptr, Msg_i) -> int"""
    return _dctmcc.dctLoadWithHandle(pdct, gdxptr, Msg_i)

def dctNUels(pdct):
    r"""dctNUels(pdct) -> int"""
    return _dctmcc.dctNUels(pdct)

def dctUelIndex(pdct, uelLabel):
    r"""dctUelIndex(pdct, uelLabel) -> int"""
    return _dctmcc.dctUelIndex(pdct, uelLabel)

def dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i):
    r"""dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i) -> int"""
    return _dctmcc.dctUelLabel(pdct, uelIndex, q_mut, uelLabel_i)

def dctNLSyms(pdct):
    r"""dctNLSyms(pdct) -> int"""
    return _dctmcc.dctNLSyms(pdct)

def dctSymDim(pdct, symIndex):
    r"""dctSymDim(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDim(pdct, symIndex)

def dctSymIndex(pdct, symName):
    r"""dctSymIndex(pdct, symName) -> int"""
    return _dctmcc.dctSymIndex(pdct, symName)

def dctSymName(pdct, symIndex, symName_i):
    r"""dctSymName(pdct, symIndex, symName_i) -> int"""
    return _dctmcc.dctSymName(pdct, symIndex, symName_i)

def dctSymText(pdct, symIndex, q_mut, symTxt_i):
    r"""dctSymText(pdct, symIndex, q_mut, symTxt_i) -> int"""
    return _dctmcc.dctSymText(pdct, symIndex, q_mut, symTxt_i)

def dctSymType(pdct, symIndex):
    r"""dctSymType(pdct, symIndex) -> int"""
    return _dctmcc.dctSymType(pdct, symIndex)

def dctSymUserInfo(pdct, symIndex):
    r"""dctSymUserInfo(pdct, symIndex) -> int"""
    return _dctmcc.dctSymUserInfo(pdct, symIndex)

def dctSymEntries(pdct, symIndex):
    r"""dctSymEntries(pdct, symIndex) -> int"""
    return _dctmcc.dctSymEntries(pdct, symIndex)

def dctSymOffset(pdct, symIndex):
    r"""dctSymOffset(pdct, symIndex) -> int"""
    return _dctmcc.dctSymOffset(pdct, symIndex)

def dctSymDomNames(pdct, symIndex):
    r"""dctSymDomNames(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDomNames(pdct, symIndex)

def dctSymDomIdx(pdct, symIndex):
    r"""dctSymDomIdx(pdct, symIndex) -> int"""
    return _dctmcc.dctSymDomIdx(pdct, symIndex)

def dctDomNameCount(pdct):
    r"""dctDomNameCount(pdct) -> int"""
    return _dctmcc.dctDomNameCount(pdct)

def dctDomName(pdct, domIndex, domName_i):
    r"""dctDomName(pdct, domIndex, domName_i) -> int"""
    return _dctmcc.dctDomName(pdct, domIndex, domName_i)

def dctColIndex(pdct, symIndex, uelIndices):
    r"""dctColIndex(pdct, symIndex, uelIndices) -> int"""
    return _dctmcc.dctColIndex(pdct, symIndex, uelIndices)

def dctRowIndex(pdct, symIndex, uelIndices):
    r"""dctRowIndex(pdct, symIndex, uelIndices) -> int"""
    return _dctmcc.dctRowIndex(pdct, symIndex, uelIndices)

def dctColUels(pdct, j):
    r"""dctColUels(pdct, j) -> int"""
    return _dctmcc.dctColUels(pdct, j)

def dctRowUels(pdct, i):
    r"""dctRowUels(pdct, i) -> int"""
    return _dctmcc.dctRowUels(pdct, i)

def dctFindFirstRowCol(pdct, symIndex, uelIndices):
    r"""dctFindFirstRowCol(pdct, symIndex, uelIndices) -> void *"""
    return _dctmcc.dctFindFirstRowCol(pdct, symIndex, uelIndices)

def dctFindNextRowCol(pdct, findHandle):
    r"""dctFindNextRowCol(pdct, findHandle) -> int"""
    return _dctmcc.dctFindNextRowCol(pdct, findHandle)

def dctFindClose(pdct, findHandle):
    r"""dctFindClose(pdct, findHandle)"""
    return _dctmcc.dctFindClose(pdct, findHandle)

def dctMemUsed(pdct):
    r"""dctMemUsed(pdct) -> double"""
    return _dctmcc.dctMemUsed(pdct)

def dctSetBasicCounts(pdct, NRows, NCols, NBlocks):
    r"""dctSetBasicCounts(pdct, NRows, NCols, NBlocks)"""
    return _dctmcc.dctSetBasicCounts(pdct, NRows, NCols, NBlocks)

def dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i):
    r"""dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i) -> int"""
    return _dctmcc.dctSetBasicCountsEx(pdct, NRows, NCols, NBlocks, Msg_i)

def dctAddUel(pdct, uelLabel, q):
    r"""dctAddUel(pdct, uelLabel, q)"""
    return _dctmcc.dctAddUel(pdct, uelLabel, q)

def dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt):
    r"""dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt)"""
    return _dctmcc.dctAddSymbol(pdct, symName, symTyp, symDim, userInfo, symTxt)

def dctAddSymbolData(pdct, uelIndices):
    r"""dctAddSymbolData(pdct, uelIndices)"""
    return _dctmcc.dctAddSymbolData(pdct, uelIndices)

def dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i):
    r"""dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i) -> int"""
    return _dctmcc.dctAddSymbolDoms(pdct, symName, symDoms_in, symDim, Msg_i)

def dctWriteGDX(pdct, fName):
    r"""dctWriteGDX(pdct, fName)"""
    return _dctmcc.dctWriteGDX(pdct, fName)

def dctWriteGDXWithHandle(pdct, gdxptr):
    r"""dctWriteGDXWithHandle(pdct, gdxptr)"""
    return _dctmcc.dctWriteGDXWithHandle(pdct, gdxptr)

def dctNRows(pdct):
    r"""dctNRows(pdct) -> int"""
    return _dctmcc.dctNRows(pdct)

def dctNCols(pdct):
    r"""dctNCols(pdct) -> int"""
    return _dctmcc.dctNCols(pdct)

def dctLrgDim(pdct):
    r"""dctLrgDim(pdct) -> int"""
    return _dctmcc.dctLrgDim(pdct)
GLOBAL_MAX_INDEX_DIM = _dctmcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _dctmcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _dctmcc.ITERLIM_INFINITY

RESLIM_INFINITY = _dctmcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _dctmcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _dctmcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _dctmcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _dctmcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _dctmcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _dctmcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _dctmcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _dctmcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _dctmcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _dctmcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _dctmcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _dctmcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _dctmcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _dctmcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _dctmcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _dctmcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _dctmcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _dctmcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _dctmcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _dctmcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _dctmcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _dctmcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _dctmcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _dctmcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _dctmcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _dctmcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _dctmcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _dctmcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _dctmcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _dctmcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _dctmcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _dctmcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _dctmcc.GMS_VAL_SCALE

GMS_VAL_MAX = _dctmcc.GMS_VAL_MAX

sv_valund = _dctmcc.sv_valund

sv_valna = _dctmcc.sv_valna

sv_valpin = _dctmcc.sv_valpin

sv_valmin = _dctmcc.sv_valmin

sv_valeps = _dctmcc.sv_valeps

sv_normal = _dctmcc.sv_normal

sv_acronym = _dctmcc.sv_acronym

GMS_SVIDX_UNDEF = _dctmcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _dctmcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _dctmcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _dctmcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _dctmcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _dctmcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _dctmcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _dctmcc.GMS_SVIDX_MAX

dt_set = _dctmcc.dt_set

dt_par = _dctmcc.dt_par

dt_var = _dctmcc.dt_var

dt_equ = _dctmcc.dt_equ

dt_alias = _dctmcc.dt_alias

GMS_DT_SET = _dctmcc.GMS_DT_SET

GMS_DT_PAR = _dctmcc.GMS_DT_PAR

GMS_DT_VAR = _dctmcc.GMS_DT_VAR

GMS_DT_EQU = _dctmcc.GMS_DT_EQU

GMS_DT_ALIAS = _dctmcc.GMS_DT_ALIAS

GMS_DT_MAX = _dctmcc.GMS_DT_MAX

GMS_SV_UNDEF = _dctmcc.GMS_SV_UNDEF

GMS_SV_NA = _dctmcc.GMS_SV_NA

GMS_SV_PINF = _dctmcc.GMS_SV_PINF

GMS_SV_MINF = _dctmcc.GMS_SV_MINF

GMS_SV_EPS = _dctmcc.GMS_SV_EPS

GMS_SV_ACR = _dctmcc.GMS_SV_ACR

GMS_SV_NAINT = _dctmcc.GMS_SV_NAINT

STAT_OK = _dctmcc.STAT_OK

STAT_NOPT = _dctmcc.STAT_NOPT

STAT_INFES = _dctmcc.STAT_INFES

STAT_UNBND = _dctmcc.STAT_UNBND

STAT_EVAL = _dctmcc.STAT_EVAL

STAT_UNKNW = _dctmcc.STAT_UNKNW

STAT_REDEF = _dctmcc.STAT_REDEF

STAT_DEPND = _dctmcc.STAT_DEPND

STAT_REDIR = _dctmcc.STAT_REDIR

STAT_MAX = _dctmcc.STAT_MAX

SS_MAX = _dctmcc.SS_MAX

MS_MAX = _dctmcc.MS_MAX


cvar = _dctmcc.cvar
gmsGdxTypeText = cvar.gmsGdxTypeText
gmsVarTypeText = cvar.gmsVarTypeText
gmsValTypeText = cvar.gmsValTypeText
gmsSVText = cvar.gmsSVText
gmsSpecialValues = cvar.gmsSpecialValues
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

