# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from gams.core.cfg import _cfgmcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


cfgProc_none = _cfgmcc.cfgProc_none
cfgProc_lp = _cfgmcc.cfgProc_lp
cfgProc_mip = _cfgmcc.cfgProc_mip
cfgProc_rmip = _cfgmcc.cfgProc_rmip
cfgProc_nlp = _cfgmcc.cfgProc_nlp
cfgProc_mcp = _cfgmcc.cfgProc_mcp
cfgProc_mpec = _cfgmcc.cfgProc_mpec
cfgProc_rmpec = _cfgmcc.cfgProc_rmpec
cfgProc_cns = _cfgmcc.cfgProc_cns
cfgProc_dnlp = _cfgmcc.cfgProc_dnlp
cfgProc_rminlp = _cfgmcc.cfgProc_rminlp
cfgProc_minlp = _cfgmcc.cfgProc_minlp
cfgProc_qcp = _cfgmcc.cfgProc_qcp
cfgProc_miqcp = _cfgmcc.cfgProc_miqcp
cfgProc_rmiqcp = _cfgmcc.cfgProc_rmiqcp
cfgProc_emp = _cfgmcc.cfgProc_emp
cfgProc_nrofmodeltypes = _cfgmcc.cfgProc_nrofmodeltypes
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _cfgmcc.intArray_swiginit(self, _cfgmcc.new_intArray(nelements))
    __swig_destroy__ = _cfgmcc.delete_intArray

    def __getitem__(self, index):
        return _cfgmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _cfgmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _cfgmcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _cfgmcc.intArray_frompointer(t)

# Register intArray in _cfgmcc:
_cfgmcc.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _cfgmcc.doubleArray_swiginit(self, _cfgmcc.new_doubleArray(nelements))
    __swig_destroy__ = _cfgmcc.delete_doubleArray

    def __getitem__(self, index):
        return _cfgmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _cfgmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _cfgmcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _cfgmcc.doubleArray_frompointer(t)

# Register doubleArray in _cfgmcc:
_cfgmcc.doubleArray_swigregister(doubleArray)

def new_intp():
    return _cfgmcc.new_intp()

def copy_intp(value):
    return _cfgmcc.copy_intp(value)

def delete_intp(obj):
    return _cfgmcc.delete_intp(obj)

def intp_assign(obj, value):
    return _cfgmcc.intp_assign(obj, value)

def intp_value(obj):
    return _cfgmcc.intp_value(obj)

def new_doublep():
    return _cfgmcc.new_doublep()

def copy_doublep(value):
    return _cfgmcc.copy_doublep(value)

def delete_doublep(obj):
    return _cfgmcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _cfgmcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _cfgmcc.doublep_value(obj)

def new_cfgHandle_tp():
    return _cfgmcc.new_cfgHandle_tp()

def copy_cfgHandle_tp(value):
    return _cfgmcc.copy_cfgHandle_tp(value)

def delete_cfgHandle_tp(obj):
    return _cfgmcc.delete_cfgHandle_tp(obj)

def cfgHandle_tp_assign(obj, value):
    return _cfgmcc.cfgHandle_tp_assign(obj, value)

def cfgHandle_tp_value(obj):
    return _cfgmcc.cfgHandle_tp_value(obj)

def cfgHandleToPtr(pcfg):
    r"""cfgHandleToPtr(pcfg) -> void *"""
    return _cfgmcc.cfgHandleToPtr(pcfg)

def ptrTocfgHandle(vptr):
    r"""ptrTocfgHandle(vptr) -> cfgHandle_t"""
    return _cfgmcc.ptrTocfgHandle(vptr)

def cfgGetReady(msgBufSize):
    r"""cfgGetReady(msgBufSize) -> int"""
    return _cfgmcc.cfgGetReady(msgBufSize)

def cfgGetReadyD(dirName, msgBufSize):
    r"""cfgGetReadyD(dirName, msgBufSize) -> int"""
    return _cfgmcc.cfgGetReadyD(dirName, msgBufSize)

def cfgGetReadyL(libName, msgBufSize):
    r"""cfgGetReadyL(libName, msgBufSize) -> int"""
    return _cfgmcc.cfgGetReadyL(libName, msgBufSize)

def cfgCreate(pcfg, msgBufSize):
    r"""cfgCreate(pcfg, msgBufSize) -> int"""
    return _cfgmcc.cfgCreate(pcfg, msgBufSize)

def cfgCreateD(pcfg, dirName, msgBufSize):
    r"""cfgCreateD(pcfg, dirName, msgBufSize) -> int"""
    return _cfgmcc.cfgCreateD(pcfg, dirName, msgBufSize)

def cfgCreateL(pcfg, libName, msgBufSize):
    r"""cfgCreateL(pcfg, libName, msgBufSize) -> int"""
    return _cfgmcc.cfgCreateL(pcfg, libName, msgBufSize)

def cfgFree(pcfg):
    r"""cfgFree(pcfg) -> int"""
    return _cfgmcc.cfgFree(pcfg)

def cfgLibraryLoaded():
    r"""cfgLibraryLoaded() -> int"""
    return _cfgmcc.cfgLibraryLoaded()

def cfgLibraryUnload():
    r"""cfgLibraryUnload() -> int"""
    return _cfgmcc.cfgLibraryUnload()

def cfgGetScreenIndicator():
    r"""cfgGetScreenIndicator() -> int"""
    return _cfgmcc.cfgGetScreenIndicator()

def cfgSetScreenIndicator(scrind):
    r"""cfgSetScreenIndicator(scrind)"""
    return _cfgmcc.cfgSetScreenIndicator(scrind)

def cfgGetExceptionIndicator():
    r"""cfgGetExceptionIndicator() -> int"""
    return _cfgmcc.cfgGetExceptionIndicator()

def cfgSetExceptionIndicator(excind):
    r"""cfgSetExceptionIndicator(excind)"""
    return _cfgmcc.cfgSetExceptionIndicator(excind)

def cfgGetExitIndicator():
    r"""cfgGetExitIndicator() -> int"""
    return _cfgmcc.cfgGetExitIndicator()

def cfgSetExitIndicator(extind):
    r"""cfgSetExitIndicator(extind)"""
    return _cfgmcc.cfgSetExitIndicator(extind)

def cfgGetErrorCallback():
    r"""cfgGetErrorCallback() -> cfgErrorCallback_t"""
    return _cfgmcc.cfgGetErrorCallback()

def cfgSetErrorCallback(func):
    r"""cfgSetErrorCallback(func)"""
    return _cfgmcc.cfgSetErrorCallback(func)

def cfgGetAPIErrorCount():
    r"""cfgGetAPIErrorCount() -> int"""
    return _cfgmcc.cfgGetAPIErrorCount()

def cfgSetAPIErrorCount(ecnt):
    r"""cfgSetAPIErrorCount(ecnt)"""
    return _cfgmcc.cfgSetAPIErrorCount(ecnt)

def cfgErrorHandling(msg):
    r"""cfgErrorHandling(msg)"""
    return _cfgmcc.cfgErrorHandling(msg)

def cfgReadConfig(pcfg, filename):
    r"""cfgReadConfig(pcfg, filename) -> int"""
    return _cfgmcc.cfgReadConfig(pcfg, filename)

def cfgReadConfigGUC(pcfg, filename, sysDir):
    r"""cfgReadConfigGUC(pcfg, filename, sysDir) -> int"""
    return _cfgmcc.cfgReadConfigGUC(pcfg, filename, sysDir)

def cfgNumAlgs(pcfg):
    r"""cfgNumAlgs(pcfg) -> int"""
    return _cfgmcc.cfgNumAlgs(pcfg)

def cfgDefaultAlg(pcfg, proc):
    r"""cfgDefaultAlg(pcfg, proc) -> int"""
    return _cfgmcc.cfgDefaultAlg(pcfg, proc)

def cfgAlgName(pcfg, alg):
    r"""cfgAlgName(pcfg, alg) -> char *"""
    return _cfgmcc.cfgAlgName(pcfg, alg)

def cfgAlgCode(pcfg, alg):
    r"""cfgAlgCode(pcfg, alg) -> char *"""
    return _cfgmcc.cfgAlgCode(pcfg, alg)

def cfgAlgHidden(pcfg, alg):
    r"""cfgAlgHidden(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgHidden(pcfg, alg)

def cfgAlgAllowsModifyProblem(pcfg, alg):
    r"""cfgAlgAllowsModifyProblem(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgAllowsModifyProblem(pcfg, alg)

def cfgAlgLibInfo(pcfg, alg):
    r"""cfgAlgLibInfo(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgLibInfo(pcfg, alg)

def cfgAlgThreadSafeIndic(pcfg, alg):
    r"""cfgAlgThreadSafeIndic(pcfg, alg) -> int"""
    return _cfgmcc.cfgAlgThreadSafeIndic(pcfg, alg)

def cfgAlgNumber(pcfg, id):
    r"""cfgAlgNumber(pcfg, id) -> int"""
    return _cfgmcc.cfgAlgNumber(pcfg, id)

def cfgAlgCapability(pcfg, alg, proc):
    r"""cfgAlgCapability(pcfg, alg, proc) -> int"""
    return _cfgmcc.cfgAlgCapability(pcfg, alg, proc)

def cfgAlgCreate(pcfg, alg, psl, sysDir):
    r"""cfgAlgCreate(pcfg, alg, psl, sysDir) -> int"""
    return _cfgmcc.cfgAlgCreate(pcfg, alg, psl, sysDir)

def cfgAlgReadyAPI(pcfg, alg, psl, gmo):
    r"""cfgAlgReadyAPI(pcfg, alg, psl, gmo) -> int"""
    return _cfgmcc.cfgAlgReadyAPI(pcfg, alg, psl, gmo)

def cfgAlgModifyProblem(pcfg, alg, psl):
    r"""cfgAlgModifyProblem(pcfg, alg, psl) -> int"""
    return _cfgmcc.cfgAlgModifyProblem(pcfg, alg, psl)

def cfgAlgCallSolver(pcfg, alg, psl, gmo):
    r"""cfgAlgCallSolver(pcfg, alg, psl, gmo) -> int"""
    return _cfgmcc.cfgAlgCallSolver(pcfg, alg, psl, gmo)

def cfgAlgFree(pcfg, alg, vpsl):
    r"""cfgAlgFree(pcfg, alg, vpsl)"""
    return _cfgmcc.cfgAlgFree(pcfg, alg, vpsl)

def cfgDefFileName(pcfg, id):
    r"""cfgDefFileName(pcfg, id) -> int"""
    return _cfgmcc.cfgDefFileName(pcfg, id)

def cfgModelTypeName(pcfg, proc):
    r"""cfgModelTypeName(pcfg, proc) -> char *"""
    return _cfgmcc.cfgModelTypeName(pcfg, proc)

def cfgModelTypeNumber(pcfg, id):
    r"""cfgModelTypeNumber(pcfg, id) -> int"""
    return _cfgmcc.cfgModelTypeNumber(pcfg, id)

def cfgNumMsg(pcfg):
    r"""cfgNumMsg(pcfg) -> int"""
    return _cfgmcc.cfgNumMsg(pcfg)

def cfgGetMsg(pcfg):
    r"""cfgGetMsg(pcfg) -> char *"""
    return _cfgmcc.cfgGetMsg(pcfg)
GLOBAL_MAX_INDEX_DIM = _cfgmcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _cfgmcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _cfgmcc.ITERLIM_INFINITY

RESLIM_INFINITY = _cfgmcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _cfgmcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _cfgmcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _cfgmcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _cfgmcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _cfgmcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _cfgmcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _cfgmcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _cfgmcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _cfgmcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _cfgmcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _cfgmcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _cfgmcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _cfgmcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _cfgmcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _cfgmcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _cfgmcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _cfgmcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _cfgmcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _cfgmcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _cfgmcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _cfgmcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _cfgmcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _cfgmcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _cfgmcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _cfgmcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _cfgmcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _cfgmcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _cfgmcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _cfgmcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _cfgmcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _cfgmcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _cfgmcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _cfgmcc.GMS_VAL_SCALE

GMS_VAL_MAX = _cfgmcc.GMS_VAL_MAX

sv_valund = _cfgmcc.sv_valund

sv_valna = _cfgmcc.sv_valna

sv_valpin = _cfgmcc.sv_valpin

sv_valmin = _cfgmcc.sv_valmin

sv_valeps = _cfgmcc.sv_valeps

sv_normal = _cfgmcc.sv_normal

sv_acronym = _cfgmcc.sv_acronym

GMS_SVIDX_UNDEF = _cfgmcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _cfgmcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _cfgmcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _cfgmcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _cfgmcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _cfgmcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _cfgmcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _cfgmcc.GMS_SVIDX_MAX

dt_set = _cfgmcc.dt_set

dt_par = _cfgmcc.dt_par

dt_var = _cfgmcc.dt_var

dt_equ = _cfgmcc.dt_equ

dt_alias = _cfgmcc.dt_alias

GMS_DT_SET = _cfgmcc.GMS_DT_SET

GMS_DT_PAR = _cfgmcc.GMS_DT_PAR

GMS_DT_VAR = _cfgmcc.GMS_DT_VAR

GMS_DT_EQU = _cfgmcc.GMS_DT_EQU

GMS_DT_ALIAS = _cfgmcc.GMS_DT_ALIAS

GMS_DT_MAX = _cfgmcc.GMS_DT_MAX

GMS_SV_UNDEF = _cfgmcc.GMS_SV_UNDEF

GMS_SV_NA = _cfgmcc.GMS_SV_NA

GMS_SV_PINF = _cfgmcc.GMS_SV_PINF

GMS_SV_MINF = _cfgmcc.GMS_SV_MINF

GMS_SV_EPS = _cfgmcc.GMS_SV_EPS

GMS_SV_ACR = _cfgmcc.GMS_SV_ACR

GMS_SV_NAINT = _cfgmcc.GMS_SV_NAINT

STAT_OK = _cfgmcc.STAT_OK

STAT_NOPT = _cfgmcc.STAT_NOPT

STAT_INFES = _cfgmcc.STAT_INFES

STAT_UNBND = _cfgmcc.STAT_UNBND

STAT_EVAL = _cfgmcc.STAT_EVAL

STAT_UNKNW = _cfgmcc.STAT_UNKNW

STAT_REDEF = _cfgmcc.STAT_REDEF

STAT_DEPND = _cfgmcc.STAT_DEPND

STAT_REDIR = _cfgmcc.STAT_REDIR

STAT_MAX = _cfgmcc.STAT_MAX

SS_MAX = _cfgmcc.SS_MAX

MS_MAX = _cfgmcc.MS_MAX


cvar = _cfgmcc.cvar
gmsGdxTypeText = cvar.gmsGdxTypeText
gmsVarTypeText = cvar.gmsVarTypeText
gmsValTypeText = cvar.gmsValTypeText
gmsSVText = cvar.gmsSVText
gmsSpecialValues = cvar.gmsSpecialValues
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

