# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from gams.core.gmd import _gmdcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


GMD_PARAM = _gmdcc.GMD_PARAM
GMD_UPPER = _gmdcc.GMD_UPPER
GMD_LOWER = _gmdcc.GMD_LOWER
GMD_FIXED = _gmdcc.GMD_FIXED
GMD_PRIMAL = _gmdcc.GMD_PRIMAL
GMD_DUAL = _gmdcc.GMD_DUAL
GMD_DEFAULT = _gmdcc.GMD_DEFAULT
GMD_BASECASE = _gmdcc.GMD_BASECASE
GMD_ACCUMULATE = _gmdcc.GMD_ACCUMULATE
GMD_NRSYMBOLS = _gmdcc.GMD_NRSYMBOLS
GMD_NRUELS = _gmdcc.GMD_NRUELS
GMD_NRSYMBOLSWITHALIAS = _gmdcc.GMD_NRSYMBOLSWITHALIAS
GMD_DEFAULT_STORAGE_TYPE = _gmdcc.GMD_DEFAULT_STORAGE_TYPE
GMD_INITEXTERN = _gmdcc.GMD_INITEXTERN
GMD_NAME = _gmdcc.GMD_NAME
GMD_DIM = _gmdcc.GMD_DIM
GMD_TYPE = _gmdcc.GMD_TYPE
GMD_NRRECORDS = _gmdcc.GMD_NRRECORDS
GMD_USERINFO = _gmdcc.GMD_USERINFO
GMD_EXPLTEXT = _gmdcc.GMD_EXPLTEXT
GMD_NUMBER = _gmdcc.GMD_NUMBER
GMD_WRITTENTO = _gmdcc.GMD_WRITTENTO
GMD_RB_TREE = _gmdcc.GMD_RB_TREE
GMD_VECTOR = _gmdcc.GMD_VECTOR
GMD_GMS_TREE = _gmdcc.GMD_GMS_TREE
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gmdcc.intArray_swiginit(self, _gmdcc.new_intArray(nelements))
    __swig_destroy__ = _gmdcc.delete_intArray

    def __getitem__(self, index):
        return _gmdcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gmdcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gmdcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmdcc.intArray_frompointer(t)

# Register intArray in _gmdcc:
_gmdcc.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gmdcc.doubleArray_swiginit(self, _gmdcc.new_doubleArray(nelements))
    __swig_destroy__ = _gmdcc.delete_doubleArray

    def __getitem__(self, index):
        return _gmdcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gmdcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gmdcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmdcc.doubleArray_frompointer(t)

# Register doubleArray in _gmdcc:
_gmdcc.doubleArray_swigregister(doubleArray)

def new_intp():
    return _gmdcc.new_intp()

def copy_intp(value):
    return _gmdcc.copy_intp(value)

def delete_intp(obj):
    return _gmdcc.delete_intp(obj)

def intp_assign(obj, value):
    return _gmdcc.intp_assign(obj, value)

def intp_value(obj):
    return _gmdcc.intp_value(obj)

def new_doublep():
    return _gmdcc.new_doublep()

def copy_doublep(value):
    return _gmdcc.copy_doublep(value)

def delete_doublep(obj):
    return _gmdcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _gmdcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _gmdcc.doublep_value(obj)

def new_gmdHandle_tp():
    return _gmdcc.new_gmdHandle_tp()

def copy_gmdHandle_tp(value):
    return _gmdcc.copy_gmdHandle_tp(value)

def delete_gmdHandle_tp(obj):
    return _gmdcc.delete_gmdHandle_tp(obj)

def gmdHandle_tp_assign(obj, value):
    return _gmdcc.gmdHandle_tp_assign(obj, value)

def gmdHandle_tp_value(obj):
    return _gmdcc.gmdHandle_tp_value(obj)

def new_TFindSymbol_tp():
    return _gmdcc.new_TFindSymbol_tp()

def copy_TFindSymbol_tp(value):
    return _gmdcc.copy_TFindSymbol_tp(value)

def delete_TFindSymbol_tp(obj):
    return _gmdcc.delete_TFindSymbol_tp(obj)

def TFindSymbol_tp_assign(obj, value):
    return _gmdcc.TFindSymbol_tp_assign(obj, value)

def TFindSymbol_tp_value(obj):
    return _gmdcc.TFindSymbol_tp_value(obj)

def new_TDataReadRawStart_tp():
    return _gmdcc.new_TDataReadRawStart_tp()

def copy_TDataReadRawStart_tp(value):
    return _gmdcc.copy_TDataReadRawStart_tp(value)

def delete_TDataReadRawStart_tp(obj):
    return _gmdcc.delete_TDataReadRawStart_tp(obj)

def TDataReadRawStart_tp_assign(obj, value):
    return _gmdcc.TDataReadRawStart_tp_assign(obj, value)

def TDataReadRawStart_tp_value(obj):
    return _gmdcc.TDataReadRawStart_tp_value(obj)

def new_TDataReadRaw_tp():
    return _gmdcc.new_TDataReadRaw_tp()

def copy_TDataReadRaw_tp(value):
    return _gmdcc.copy_TDataReadRaw_tp(value)

def delete_TDataReadRaw_tp(obj):
    return _gmdcc.delete_TDataReadRaw_tp(obj)

def TDataReadRaw_tp_assign(obj, value):
    return _gmdcc.TDataReadRaw_tp_assign(obj, value)

def TDataReadRaw_tp_value(obj):
    return _gmdcc.TDataReadRaw_tp_value(obj)

def new_TDataReadDone_tp():
    return _gmdcc.new_TDataReadDone_tp()

def copy_TDataReadDone_tp(value):
    return _gmdcc.copy_TDataReadDone_tp(value)

def delete_TDataReadDone_tp(obj):
    return _gmdcc.delete_TDataReadDone_tp(obj)

def TDataReadDone_tp_assign(obj, value):
    return _gmdcc.TDataReadDone_tp_assign(obj, value)

def TDataReadDone_tp_value(obj):
    return _gmdcc.TDataReadDone_tp_value(obj)

def new_TGetElemText_tp():
    return _gmdcc.new_TGetElemText_tp()

def copy_TGetElemText_tp(value):
    return _gmdcc.copy_TGetElemText_tp(value)

def delete_TGetElemText_tp(obj):
    return _gmdcc.delete_TGetElemText_tp(obj)

def TGetElemText_tp_assign(obj, value):
    return _gmdcc.TGetElemText_tp_assign(obj, value)

def TGetElemText_tp_value(obj):
    return _gmdcc.TGetElemText_tp_value(obj)

def new_TPrintLog_tp():
    return _gmdcc.new_TPrintLog_tp()

def copy_TPrintLog_tp(value):
    return _gmdcc.copy_TPrintLog_tp(value)

def delete_TPrintLog_tp(obj):
    return _gmdcc.delete_TPrintLog_tp(obj)

def TPrintLog_tp_assign(obj, value):
    return _gmdcc.TPrintLog_tp_assign(obj, value)

def TPrintLog_tp_value(obj):
    return _gmdcc.TPrintLog_tp_value(obj)

def gmdHandleToPtr(pgmd):
    r"""gmdHandleToPtr(pgmd) -> void *"""
    return _gmdcc.gmdHandleToPtr(pgmd)

def ptrTogmdHandle(vptr):
    r"""ptrTogmdHandle(vptr) -> gmdHandle_t"""
    return _gmdcc.ptrTogmdHandle(vptr)

def gmdGetReady(msgBufSize):
    r"""gmdGetReady(msgBufSize) -> int"""
    return _gmdcc.gmdGetReady(msgBufSize)

def gmdGetReadyD(dirName, msgBufSize):
    r"""gmdGetReadyD(dirName, msgBufSize) -> int"""
    return _gmdcc.gmdGetReadyD(dirName, msgBufSize)

def gmdGetReadyL(libName, msgBufSize):
    r"""gmdGetReadyL(libName, msgBufSize) -> int"""
    return _gmdcc.gmdGetReadyL(libName, msgBufSize)

def gmdCreate(pgmd, msgBufSize):
    r"""gmdCreate(pgmd, msgBufSize) -> int"""
    return _gmdcc.gmdCreate(pgmd, msgBufSize)

def gmdCreateD(pgmd, dirName, msgBufSize):
    r"""gmdCreateD(pgmd, dirName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateD(pgmd, dirName, msgBufSize)

def gmdCreateDD(pgmd, dirName, msgBufSize):
    r"""gmdCreateDD(pgmd, dirName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateDD(pgmd, dirName, msgBufSize)

def gmdCreateL(pgmd, libName, msgBufSize):
    r"""gmdCreateL(pgmd, libName, msgBufSize) -> int"""
    return _gmdcc.gmdCreateL(pgmd, libName, msgBufSize)

def gmdFree(pgmd):
    r"""gmdFree(pgmd) -> int"""
    return _gmdcc.gmdFree(pgmd)

def gmdLibraryLoaded():
    r"""gmdLibraryLoaded() -> int"""
    return _gmdcc.gmdLibraryLoaded()

def gmdLibraryUnload():
    r"""gmdLibraryUnload() -> int"""
    return _gmdcc.gmdLibraryUnload()

def gmdGetScreenIndicator():
    r"""gmdGetScreenIndicator() -> int"""
    return _gmdcc.gmdGetScreenIndicator()

def gmdSetScreenIndicator(scrind):
    r"""gmdSetScreenIndicator(scrind)"""
    return _gmdcc.gmdSetScreenIndicator(scrind)

def gmdGetExceptionIndicator():
    r"""gmdGetExceptionIndicator() -> int"""
    return _gmdcc.gmdGetExceptionIndicator()

def gmdSetExceptionIndicator(excind):
    r"""gmdSetExceptionIndicator(excind)"""
    return _gmdcc.gmdSetExceptionIndicator(excind)

def gmdGetExitIndicator():
    r"""gmdGetExitIndicator() -> int"""
    return _gmdcc.gmdGetExitIndicator()

def gmdSetExitIndicator(extind):
    r"""gmdSetExitIndicator(extind)"""
    return _gmdcc.gmdSetExitIndicator(extind)

def gmdGetErrorCallback():
    r"""gmdGetErrorCallback() -> gmdErrorCallback_t"""
    return _gmdcc.gmdGetErrorCallback()

def gmdSetErrorCallback(func):
    r"""gmdSetErrorCallback(func)"""
    return _gmdcc.gmdSetErrorCallback(func)

def gmdGetAPIErrorCount():
    r"""gmdGetAPIErrorCount() -> int"""
    return _gmdcc.gmdGetAPIErrorCount()

def gmdSetAPIErrorCount(ecnt):
    r"""gmdSetAPIErrorCount(ecnt)"""
    return _gmdcc.gmdSetAPIErrorCount(ecnt)

def gmdErrorHandling(msg):
    r"""gmdErrorHandling(msg)"""
    return _gmdcc.gmdErrorHandling(msg)

def gmdInitFromGDX(pgmd, fileName):
    r"""gmdInitFromGDX(pgmd, fileName) -> int"""
    return _gmdcc.gmdInitFromGDX(pgmd, fileName)

def gmdInitFromDict(pgmd, gmoPtr):
    r"""gmdInitFromDict(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdInitFromDict(pgmd, gmoPtr)

def gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem):
    r"""gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem) -> int"""
    return _gmdcc.gmdInitFromCMEX(pgmd, findSymbol, dataReadRawStart, dataReadRaw, dataReadDone, getElemText, printLog, usrmem)

def gmdInitFromDB(pgmd, gmdSrcPtr):
    r"""gmdInitFromDB(pgmd, gmdSrcPtr) -> int"""
    return _gmdcc.gmdInitFromDB(pgmd, gmdSrcPtr)

def gmdRegisterGMO(pgmd, gmoPtr):
    r"""gmdRegisterGMO(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdRegisterGMO(pgmd, gmoPtr)

def gmdCloseGDX(pgmd, loadRemain):
    r"""gmdCloseGDX(pgmd, loadRemain) -> int"""
    return _gmdcc.gmdCloseGDX(pgmd, loadRemain)

def gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status):
    r"""gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status) -> void *"""
    return _gmdcc.gmdAddSymbolXPy(pgmd, symName, aDim, stype, userInfo, explText, vDomPtrIn, keyStr_in, status)

def gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status):
    r"""gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status) -> void *"""
    return _gmdcc.gmdAddSymbolPy(pgmd, symName, aDim, stype, userInfo, explText, status)

def gmdFindSymbolPy(pgmd, symName, status):
    r"""gmdFindSymbolPy(pgmd, symName, status) -> void *"""
    return _gmdcc.gmdFindSymbolPy(pgmd, symName, status)

def gmdFindSymbolWithAlias(pgmd, symName, symPtr):
    r"""gmdFindSymbolWithAlias(pgmd, symName, symPtr) -> int"""
    return _gmdcc.gmdFindSymbolWithAlias(pgmd, symName, symPtr)

def gmdFindSymbolWithAliasPy(pgmd, symName, status):
    r"""gmdFindSymbolWithAliasPy(pgmd, symName, status) -> void *"""
    return _gmdcc.gmdFindSymbolWithAliasPy(pgmd, symName, status)

def gmdGetSymbolByIndexPy(pgmd, idx, status):
    r"""gmdGetSymbolByIndexPy(pgmd, idx, status) -> void *"""
    return _gmdcc.gmdGetSymbolByIndexPy(pgmd, idx, status)

def gmdGetSymbolByNumber(pgmd, idx, symPtr):
    r"""gmdGetSymbolByNumber(pgmd, idx, symPtr) -> int"""
    return _gmdcc.gmdGetSymbolByNumber(pgmd, idx, symPtr)

def gmdGetSymbolByNumberPy(pgmd, idx, status):
    r"""gmdGetSymbolByNumberPy(pgmd, idx, status) -> void *"""
    return _gmdcc.gmdGetSymbolByNumberPy(pgmd, idx, status)

def gmdClearSymbol(pgmd, symPtr):
    r"""gmdClearSymbol(pgmd, symPtr) -> int"""
    return _gmdcc.gmdClearSymbol(pgmd, symPtr)

def gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr):
    r"""gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr) -> int"""
    return _gmdcc.gmdCopySymbol(pgmd, tarSymPtr, srcSymPtr)

def gmdFindRecordPy(pgmd, symPtr, keyStr_in, status):
    r"""gmdFindRecordPy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindRecordPy(pgmd, symPtr, keyStr_in, status)

def gmdFindFirstRecordPy(pgmd, symPtr, status):
    r"""gmdFindFirstRecordPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdFindFirstRecordPy(pgmd, symPtr, status)

def gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status):
    r"""gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindFirstRecordSlicePy(pgmd, symPtr, keyStr_in, status)

def gmdFindLastRecordPy(pgmd, symPtr, status):
    r"""gmdFindLastRecordPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdFindLastRecordPy(pgmd, symPtr, status)

def gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status):
    r"""gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdFindLastRecordSlicePy(pgmd, symPtr, keyStr_in, status)

def gmdRecordMoveNext(pgmd, symIterPtr):
    r"""gmdRecordMoveNext(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordMoveNext(pgmd, symIterPtr)

def gmdRecordHasNext(pgmd, symIterPtr):
    r"""gmdRecordHasNext(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordHasNext(pgmd, symIterPtr)

def gmdRecordMovePrev(pgmd, symIterPtr):
    r"""gmdRecordMovePrev(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordMovePrev(pgmd, symIterPtr)

def gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar):
    r"""gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar) -> int"""
    return _gmdcc.gmdSameRecord(pgmd, symIterPtrSrc, symIterPtrtar)

def gmdRecordHasPrev(pgmd, symIterPtr):
    r"""gmdRecordHasPrev(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdRecordHasPrev(pgmd, symIterPtr)

def gmdGetElemText(pgmd, symIterPtr):
    r"""gmdGetElemText(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetElemText(pgmd, symIterPtr)

def gmdGetLevel(pgmd, symIterPtr):
    r"""gmdGetLevel(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetLevel(pgmd, symIterPtr)

def gmdGetLower(pgmd, symIterPtr):
    r"""gmdGetLower(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetLower(pgmd, symIterPtr)

def gmdGetUpper(pgmd, symIterPtr):
    r"""gmdGetUpper(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetUpper(pgmd, symIterPtr)

def gmdGetMarginal(pgmd, symIterPtr):
    r"""gmdGetMarginal(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetMarginal(pgmd, symIterPtr)

def gmdGetScale(pgmd, symIterPtr):
    r"""gmdGetScale(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdGetScale(pgmd, symIterPtr)

def gmdSetElemText(pgmd, symIterPtr, txt):
    r"""gmdSetElemText(pgmd, symIterPtr, txt) -> int"""
    return _gmdcc.gmdSetElemText(pgmd, symIterPtr, txt)

def gmdSetLevel(pgmd, symIterPtr, value):
    r"""gmdSetLevel(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetLevel(pgmd, symIterPtr, value)

def gmdSetLower(pgmd, symIterPtr, value):
    r"""gmdSetLower(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetLower(pgmd, symIterPtr, value)

def gmdSetUpper(pgmd, symIterPtr, value):
    r"""gmdSetUpper(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetUpper(pgmd, symIterPtr, value)

def gmdSetMarginal(pgmd, symIterPtr, value):
    r"""gmdSetMarginal(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetMarginal(pgmd, symIterPtr, value)

def gmdSetScale(pgmd, symIterPtr, value):
    r"""gmdSetScale(pgmd, symIterPtr, value) -> int"""
    return _gmdcc.gmdSetScale(pgmd, symIterPtr, value)

def gmdSetUserInfo(pgmd, symPtr, value):
    r"""gmdSetUserInfo(pgmd, symPtr, value) -> int"""
    return _gmdcc.gmdSetUserInfo(pgmd, symPtr, value)

def gmdAddRecordPy(pgmd, symPtr, keyStr_in, status):
    r"""gmdAddRecordPy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdAddRecordPy(pgmd, symPtr, keyStr_in, status)

def gmdMergeRecord(pgmd, symPtr, keyStr_in, symIterPtr):
    r"""gmdMergeRecord(pgmd, symPtr, keyStr_in, symIterPtr) -> int"""
    return _gmdcc.gmdMergeRecord(pgmd, symPtr, keyStr_in, symIterPtr)

def gmdMergeRecordPy(pgmd, symPtr, keyStr_in, status):
    r"""gmdMergeRecordPy(pgmd, symPtr, keyStr_in, status) -> void *"""
    return _gmdcc.gmdMergeRecordPy(pgmd, symPtr, keyStr_in, status)

def gmdMergeRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, haveValues, values):
    r"""gmdMergeRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, haveValues, values) -> int"""
    return _gmdcc.gmdMergeRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, haveValues, values)

def gmdMergeRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, haveValues, values, status):
    r"""gmdMergeRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, haveValues, values, status) -> void *"""
    return _gmdcc.gmdMergeRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, haveValues, values, status)

def gmdMergeSetRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, eText):
    r"""gmdMergeSetRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, eText) -> int"""
    return _gmdcc.gmdMergeSetRecordInt(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, symIterPtr, eText)

def gmdMergeSetRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, eText, status):
    r"""gmdMergeSetRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, eText, status) -> void *"""
    return _gmdcc.gmdMergeSetRecordIntPy(pgmd, symPtr, keyInt, checkUEL, wantSymIterPtr, eText, status)

def gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText):
    r"""gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText) -> int"""
    return _gmdcc.gmdAddRecordRaw(pgmd, symPtr, keyInt, values, eText)

def gmdDeleteRecord(pgmd, symIterPtr):
    r"""gmdDeleteRecord(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdDeleteRecord(pgmd, symIterPtr)

def gmdGetRecordRaw(pgmd, symIterPtr, aDim):
    r"""gmdGetRecordRaw(pgmd, symIterPtr, aDim) -> int"""
    return _gmdcc.gmdGetRecordRaw(pgmd, symIterPtr, aDim)

def gmdGetKeys(pgmd, symIterPtr, aDim):
    r"""gmdGetKeys(pgmd, symIterPtr, aDim) -> int"""
    return _gmdcc.gmdGetKeys(pgmd, symIterPtr, aDim)

def gmdGetKey(pgmd, symIterPtr, idx):
    r"""gmdGetKey(pgmd, symIterPtr, idx) -> int"""
    return _gmdcc.gmdGetKey(pgmd, symIterPtr, idx)

def gmdGetDomain(pgmd, symPtr, aDim):
    r"""gmdGetDomain(pgmd, symPtr, aDim) -> int"""
    return _gmdcc.gmdGetDomain(pgmd, symPtr, aDim)

def gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status):
    r"""gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status) -> void *"""
    return _gmdcc.gmdCopySymbolIteratorPy(pgmd, symIterPtrSrc, status)

def gmdFreeSymbolIterator(pgmd, symIterPtr):
    r"""gmdFreeSymbolIterator(pgmd, symIterPtr) -> int"""
    return _gmdcc.gmdFreeSymbolIterator(pgmd, symIterPtr)

def gmdMergeUel(pgmd, uelLabel):
    r"""gmdMergeUel(pgmd, uelLabel) -> int"""
    return _gmdcc.gmdMergeUel(pgmd, uelLabel)

def gmdGetUelByIndex(pgmd, uelNr):
    r"""gmdGetUelByIndex(pgmd, uelNr) -> int"""
    return _gmdcc.gmdGetUelByIndex(pgmd, uelNr)

def gmdFindUel(pgmd, uelLabel):
    r"""gmdFindUel(pgmd, uelLabel) -> int"""
    return _gmdcc.gmdFindUel(pgmd, uelLabel)

def gmdGetSymbolsUels(pgmd, vDomPtrIn, lenvDomPtrIn, uelList, sizeUelList):
    r"""gmdGetSymbolsUels(pgmd, vDomPtrIn, lenvDomPtrIn, uelList, sizeUelList) -> int"""
    return _gmdcc.gmdGetSymbolsUels(pgmd, vDomPtrIn, lenvDomPtrIn, uelList, sizeUelList)

def gmdInfo(pgmd, infoKey):
    r"""gmdInfo(pgmd, infoKey) -> int"""
    return _gmdcc.gmdInfo(pgmd, infoKey)

def gmdSymbolInfo(pgmd, symPtr, infoKey):
    r"""gmdSymbolInfo(pgmd, symPtr, infoKey) -> int"""
    return _gmdcc.gmdSymbolInfo(pgmd, symPtr, infoKey)

def gmdSymbolDim(pgmd, symPtr):
    r"""gmdSymbolDim(pgmd, symPtr) -> int"""
    return _gmdcc.gmdSymbolDim(pgmd, symPtr)

def gmdSymbolType(pgmd, symPtr):
    r"""gmdSymbolType(pgmd, symPtr) -> int"""
    return _gmdcc.gmdSymbolType(pgmd, symPtr)

def gmdWriteGDX(pgmd, fileName, noDomChk):
    r"""gmdWriteGDX(pgmd, fileName, noDomChk) -> int"""
    return _gmdcc.gmdWriteGDX(pgmd, fileName, noDomChk)

def gmdSetSpecialValuesX(pgmd, specVal, INOUT):
    r"""gmdSetSpecialValuesX(pgmd, specVal, INOUT) -> int"""
    return _gmdcc.gmdSetSpecialValuesX(pgmd, specVal, INOUT)

def gmdSetSpecialValues(pgmd, specVal):
    r"""gmdSetSpecialValues(pgmd, specVal) -> int"""
    return _gmdcc.gmdSetSpecialValues(pgmd, specVal)

def gmdGetSpecialValues(pgmd, specVal):
    r"""gmdGetSpecialValues(pgmd, specVal) -> int"""
    return _gmdcc.gmdGetSpecialValues(pgmd, specVal)

def gmdGetUserSpecialValues(pgmd, specVal):
    r"""gmdGetUserSpecialValues(pgmd, specVal) -> int"""
    return _gmdcc.gmdGetUserSpecialValues(pgmd, specVal)

def gmdSetDebug(pgmd, debugLevel):
    r"""gmdSetDebug(pgmd, debugLevel) -> int"""
    return _gmdcc.gmdSetDebug(pgmd, debugLevel)

def gmdGetLastError(pgmd):
    r"""gmdGetLastError(pgmd) -> int"""
    return _gmdcc.gmdGetLastError(pgmd)

def gmdPrintLog(pgmd, msg):
    r"""gmdPrintLog(pgmd, msg) -> int"""
    return _gmdcc.gmdPrintLog(pgmd, msg)

def gmdStartWriteRecording(pgmd):
    r"""gmdStartWriteRecording(pgmd) -> int"""
    return _gmdcc.gmdStartWriteRecording(pgmd)

def gmdStopWriteRecording(pgmd):
    r"""gmdStopWriteRecording(pgmd) -> int"""
    return _gmdcc.gmdStopWriteRecording(pgmd)

def gmdCheckDBDV(pgmd, dv):
    r"""gmdCheckDBDV(pgmd, dv) -> int"""
    return _gmdcc.gmdCheckDBDV(pgmd, dv)

def gmdCheckSymbolDV(pgmd, symPtr, dv):
    r"""gmdCheckSymbolDV(pgmd, symPtr, dv) -> int"""
    return _gmdcc.gmdCheckSymbolDV(pgmd, symPtr, dv)

def gmdGetFirstDBDVPy(pgmd, status):
    r"""gmdGetFirstDBDVPy(pgmd, status) -> void *"""
    return _gmdcc.gmdGetFirstDBDVPy(pgmd, status)

def gmdGetFirstDVInSymbolPy(pgmd, symPtr, status):
    r"""gmdGetFirstDVInSymbolPy(pgmd, symPtr, status) -> void *"""
    return _gmdcc.gmdGetFirstDVInSymbolPy(pgmd, symPtr, status)

def gmdDomainCheckDone(pgmd):
    r"""gmdDomainCheckDone(pgmd) -> int"""
    return _gmdcc.gmdDomainCheckDone(pgmd)

def gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail):
    r"""gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail) -> int"""
    return _gmdcc.gmdGetFirstDVInNextSymbol(pgmd, dvHandle, nextavail)

def gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail):
    r"""gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail) -> int"""
    return _gmdcc.gmdMoveNextDVInSymbol(pgmd, dvHandle, nextavail)

def gmdFreeDVHandle(pgmd, dvHandle):
    r"""gmdFreeDVHandle(pgmd, dvHandle) -> int"""
    return _gmdcc.gmdFreeDVHandle(pgmd, dvHandle)

def gmdGetDVSymbolPy(pgmd, dvHandle, status):
    r"""gmdGetDVSymbolPy(pgmd, dvHandle, status) -> void *"""
    return _gmdcc.gmdGetDVSymbolPy(pgmd, dvHandle, status)

def gmdGetDVSymbolRecordPy(pgmd, dvHandle, status):
    r"""gmdGetDVSymbolRecordPy(pgmd, dvHandle, status) -> void *"""
    return _gmdcc.gmdGetDVSymbolRecordPy(pgmd, dvHandle, status)

def gmdGetDVIndicator(pgmd, dvHandle, viol):
    r"""gmdGetDVIndicator(pgmd, dvHandle, viol) -> int"""
    return _gmdcc.gmdGetDVIndicator(pgmd, dvHandle, viol)

def gmdInitUpdate(pgmd, gmoPtr):
    r"""gmdInitUpdate(pgmd, gmoPtr) -> int"""
    return _gmdcc.gmdInitUpdate(pgmd, gmoPtr)

def gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT):
    r"""gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT) -> int"""
    return _gmdcc.gmdUpdateModelSymbol(pgmd, gamsSymPtr, actionType, dataSymPtr, updateType, INOUT)

def gmdCallSolver(pgmd, solvername):
    r"""gmdCallSolver(pgmd, solvername) -> int"""
    return _gmdcc.gmdCallSolver(pgmd, solvername)

def gmdCallSolverTimed(pgmd, solvername):
    r"""gmdCallSolverTimed(pgmd, solvername) -> int"""
    return _gmdcc.gmdCallSolverTimed(pgmd, solvername)

def gmdCloseLicenseSession(pgmd):
    r"""gmdCloseLicenseSession(pgmd) -> int"""
    return _gmdcc.gmdCloseLicenseSession(pgmd)

def gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field):
    r"""gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field) -> int"""
    return _gmdcc.gmdDenseSymbolToDenseArray(pgmd, cube, vDim, symPtr, field)

def gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field):
    r"""gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field) -> int"""
    return _gmdcc.gmdSparseSymbolToDenseArray(pgmd, cube, vDim, symPtr, vDomPtr, field)

def gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field):
    r"""gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field) -> int"""
    return _gmdcc.gmdSparseSymbolToSqzdArray(pgmd, cube, vDim, symPtr, vDomSqueezePtr, vDomPtr, field)

def gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim):
    r"""gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim) -> int"""
    return _gmdcc.gmdDenseArrayToSymbol(pgmd, symPtr, vDomPtr, cube, vDim)

def gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim):
    r"""gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim) -> int"""
    return _gmdcc.gmdDenseArraySlicesToSymbol(pgmd, symPtr, vDomSlicePtr, vDomPtr, cube, vDim)

def gmdSelectRecordStorage(pgmd, symPtr, storageType):
    r"""gmdSelectRecordStorage(pgmd, symPtr, storageType) -> int"""
    return _gmdcc.gmdSelectRecordStorage(pgmd, symPtr, storageType)

def gmdSelectRecordStoragePy(pgmd, symPtr, storageType, status):
    r"""gmdSelectRecordStoragePy(pgmd, symPtr, storageType, status) -> void *"""
    return _gmdcc.gmdSelectRecordStoragePy(pgmd, symPtr, storageType, status)
GLOBAL_MAX_INDEX_DIM = _gmdcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _gmdcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _gmdcc.ITERLIM_INFINITY

RESLIM_INFINITY = _gmdcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _gmdcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _gmdcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _gmdcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _gmdcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _gmdcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _gmdcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _gmdcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _gmdcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _gmdcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _gmdcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _gmdcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _gmdcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _gmdcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _gmdcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _gmdcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _gmdcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _gmdcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _gmdcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _gmdcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _gmdcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _gmdcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _gmdcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _gmdcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _gmdcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _gmdcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _gmdcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _gmdcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _gmdcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _gmdcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _gmdcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _gmdcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _gmdcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _gmdcc.GMS_VAL_SCALE

GMS_VAL_MAX = _gmdcc.GMS_VAL_MAX

sv_valund = _gmdcc.sv_valund

sv_valna = _gmdcc.sv_valna

sv_valpin = _gmdcc.sv_valpin

sv_valmin = _gmdcc.sv_valmin

sv_valeps = _gmdcc.sv_valeps

sv_normal = _gmdcc.sv_normal

sv_acronym = _gmdcc.sv_acronym

GMS_SVIDX_UNDEF = _gmdcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _gmdcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _gmdcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _gmdcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _gmdcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _gmdcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _gmdcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _gmdcc.GMS_SVIDX_MAX

dt_set = _gmdcc.dt_set

dt_par = _gmdcc.dt_par

dt_var = _gmdcc.dt_var

dt_equ = _gmdcc.dt_equ

dt_alias = _gmdcc.dt_alias

GMS_DT_SET = _gmdcc.GMS_DT_SET

GMS_DT_PAR = _gmdcc.GMS_DT_PAR

GMS_DT_VAR = _gmdcc.GMS_DT_VAR

GMS_DT_EQU = _gmdcc.GMS_DT_EQU

GMS_DT_ALIAS = _gmdcc.GMS_DT_ALIAS

GMS_DT_MAX = _gmdcc.GMS_DT_MAX

GMS_SV_UNDEF = _gmdcc.GMS_SV_UNDEF

GMS_SV_NA = _gmdcc.GMS_SV_NA

GMS_SV_PINF = _gmdcc.GMS_SV_PINF

GMS_SV_MINF = _gmdcc.GMS_SV_MINF

GMS_SV_EPS = _gmdcc.GMS_SV_EPS

GMS_SV_ACR = _gmdcc.GMS_SV_ACR

GMS_SV_NAINT = _gmdcc.GMS_SV_NAINT

STAT_OK = _gmdcc.STAT_OK

STAT_NOPT = _gmdcc.STAT_NOPT

STAT_INFES = _gmdcc.STAT_INFES

STAT_UNBND = _gmdcc.STAT_UNBND

STAT_EVAL = _gmdcc.STAT_EVAL

STAT_UNKNW = _gmdcc.STAT_UNKNW

STAT_REDEF = _gmdcc.STAT_REDEF

STAT_DEPND = _gmdcc.STAT_DEPND

STAT_REDIR = _gmdcc.STAT_REDIR

STAT_MAX = _gmdcc.STAT_MAX

SS_MAX = _gmdcc.SS_MAX

MS_MAX = _gmdcc.MS_MAX


cvar = _gmdcc.cvar
gmsGdxTypeText = cvar.gmsGdxTypeText
gmsVarTypeText = cvar.gmsVarTypeText
gmsValTypeText = cvar.gmsValTypeText
gmsSVText = cvar.gmsSVText
gmsSpecialValues = cvar.gmsSpecialValues
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

