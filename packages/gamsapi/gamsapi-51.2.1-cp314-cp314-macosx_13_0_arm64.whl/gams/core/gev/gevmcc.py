# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from gams.core.gev import _gevmcc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


gevdoErr = _gevmcc.gevdoErr
gevdoStat = _gevmcc.gevdoStat
gevdoLog = _gevmcc.gevdoLog
gevSolverSameStreams = _gevmcc.gevSolverSameStreams
gevSolverQuiet = _gevmcc.gevSolverQuiet
gevSolverOwnFile = _gevmcc.gevSolverOwnFile
gevSolveLinkCallScript = _gevmcc.gevSolveLinkCallScript
gevSolveLinkCallModule = _gevmcc.gevSolveLinkCallModule
gevSolveLinkAsyncGrid = _gevmcc.gevSolveLinkAsyncGrid
gevSolveLinkAsyncSimulate = _gevmcc.gevSolveLinkAsyncSimulate
gevSolveLinkLoadLibrary = _gevmcc.gevSolveLinkLoadLibrary
gevPageWidth = _gevmcc.gevPageWidth
gevPageSize = _gevmcc.gevPageSize
gevsubsysFile = _gevmcc.gevsubsysFile
gevNameScrDir = _gevmcc.gevNameScrDir
gevNameSysDir = _gevmcc.gevNameSysDir
gevNameCurDir = _gevmcc.gevNameCurDir
gevNameWrkDir = _gevmcc.gevNameWrkDir
gevLogOption = _gevmcc.gevLogOption
gevNameLogFile = _gevmcc.gevNameLogFile
gevNameCtrFile = _gevmcc.gevNameCtrFile
gevNameMatrix = _gevmcc.gevNameMatrix
gevNameInstr = _gevmcc.gevNameInstr
gevNameStaFile = _gevmcc.gevNameStaFile
gevlicenseFile = _gevmcc.gevlicenseFile
gevKeep = _gevmcc.gevKeep
gevIDEFlag = _gevmcc.gevIDEFlag
gevIterLim = _gevmcc.gevIterLim
gevDomLim = _gevmcc.gevDomLim
gevResLim = _gevmcc.gevResLim
gevOptCR = _gevmcc.gevOptCR
gevOptCA = _gevmcc.gevOptCA
gevSysOut = _gevmcc.gevSysOut
gevNodeLim = _gevmcc.gevNodeLim
gevWorkFactor = _gevmcc.gevWorkFactor
gevWorkSpace = _gevmcc.gevWorkSpace
gevSavePoint = _gevmcc.gevSavePoint
gevHeapLimit = _gevmcc.gevHeapLimit
gevNameScrExt = _gevmcc.gevNameScrExt
gevInteger1 = _gevmcc.gevInteger1
gevInteger2 = _gevmcc.gevInteger2
gevInteger3 = _gevmcc.gevInteger3
gevInteger4 = _gevmcc.gevInteger4
gevInteger5 = _gevmcc.gevInteger5
gevFDDelta = _gevmcc.gevFDDelta
gevFDOpt = _gevmcc.gevFDOpt
gevAlgFileType = _gevmcc.gevAlgFileType
gevGamsVersion = _gevmcc.gevGamsVersion
gevGenSolver = _gevmcc.gevGenSolver
gevCurSolver = _gevmcc.gevCurSolver
gevThreadsRaw = _gevmcc.gevThreadsRaw
gevUseCutOff = _gevmcc.gevUseCutOff
gevUseCheat = _gevmcc.gevUseCheat
gevNameGamsDate = _gevmcc.gevNameGamsDate
gevNameGamsTime = _gevmcc.gevNameGamsTime
gevLicense1 = _gevmcc.gevLicense1
gevLicense2 = _gevmcc.gevLicense2
gevLicense3 = _gevmcc.gevLicense3
gevLicense4 = _gevmcc.gevLicense4
gevLicense5 = _gevmcc.gevLicense5
gevLicense6 = _gevmcc.gevLicense6
gevLicense7 = _gevmcc.gevLicense7
gevLicense8 = _gevmcc.gevLicense8
gevNameParams = _gevmcc.gevNameParams
gevNameScenFile = _gevmcc.gevNameScenFile
gevNameExtFFile = _gevmcc.gevNameExtFFile
gevisDefaultLicense = _gevmcc.gevisDefaultLicense
gevisDefaultSubsys = _gevmcc.gevisDefaultSubsys
gevCheat = _gevmcc.gevCheat
gevCutOff = _gevmcc.gevCutOff
gevReal1 = _gevmcc.gevReal1
gevReal2 = _gevmcc.gevReal2
gevReal3 = _gevmcc.gevReal3
gevReal4 = _gevmcc.gevReal4
gevReal5 = _gevmcc.gevReal5
gevReform = _gevmcc.gevReform
gevTryInt = _gevmcc.gevTryInt
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gevmcc.intArray_swiginit(self, _gevmcc.new_intArray(nelements))
    __swig_destroy__ = _gevmcc.delete_intArray

    def __getitem__(self, index):
        return _gevmcc.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gevmcc.intArray___setitem__(self, index, value)

    def cast(self):
        return _gevmcc.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gevmcc.intArray_frompointer(t)

# Register intArray in _gevmcc:
_gevmcc.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gevmcc.doubleArray_swiginit(self, _gevmcc.new_doubleArray(nelements))
    __swig_destroy__ = _gevmcc.delete_doubleArray

    def __getitem__(self, index):
        return _gevmcc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gevmcc.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _gevmcc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _gevmcc.doubleArray_frompointer(t)

# Register doubleArray in _gevmcc:
_gevmcc.doubleArray_swigregister(doubleArray)

def new_intp():
    return _gevmcc.new_intp()

def copy_intp(value):
    return _gevmcc.copy_intp(value)

def delete_intp(obj):
    return _gevmcc.delete_intp(obj)

def intp_assign(obj, value):
    return _gevmcc.intp_assign(obj, value)

def intp_value(obj):
    return _gevmcc.intp_value(obj)

def new_doublep():
    return _gevmcc.new_doublep()

def copy_doublep(value):
    return _gevmcc.copy_doublep(value)

def delete_doublep(obj):
    return _gevmcc.delete_doublep(obj)

def doublep_assign(obj, value):
    return _gevmcc.doublep_assign(obj, value)

def doublep_value(obj):
    return _gevmcc.doublep_value(obj)

def new_gevHandle_tp():
    return _gevmcc.new_gevHandle_tp()

def copy_gevHandle_tp(value):
    return _gevmcc.copy_gevHandle_tp(value)

def delete_gevHandle_tp(obj):
    return _gevmcc.delete_gevHandle_tp(obj)

def gevHandle_tp_assign(obj, value):
    return _gevmcc.gevHandle_tp_assign(obj, value)

def gevHandle_tp_value(obj):
    return _gevmcc.gevHandle_tp_value(obj)

def new_Tgevlswrite_tp():
    return _gevmcc.new_Tgevlswrite_tp()

def copy_Tgevlswrite_tp(value):
    return _gevmcc.copy_Tgevlswrite_tp(value)

def delete_Tgevlswrite_tp(obj):
    return _gevmcc.delete_Tgevlswrite_tp(obj)

def Tgevlswrite_tp_assign(obj, value):
    return _gevmcc.Tgevlswrite_tp_assign(obj, value)

def Tgevlswrite_tp_value(obj):
    return _gevmcc.Tgevlswrite_tp_value(obj)

def gevHandleToPtr(pgev):
    r"""gevHandleToPtr(pgev) -> void *"""
    return _gevmcc.gevHandleToPtr(pgev)

def ptrTogevHandle(vptr):
    r"""ptrTogevHandle(vptr) -> gevHandle_t"""
    return _gevmcc.ptrTogevHandle(vptr)

def gevGetReady(msgBufSize):
    r"""gevGetReady(msgBufSize) -> int"""
    return _gevmcc.gevGetReady(msgBufSize)

def gevGetReadyD(dirName, msgBufSize):
    r"""gevGetReadyD(dirName, msgBufSize) -> int"""
    return _gevmcc.gevGetReadyD(dirName, msgBufSize)

def gevGetReadyL(libName, msgBufSize):
    r"""gevGetReadyL(libName, msgBufSize) -> int"""
    return _gevmcc.gevGetReadyL(libName, msgBufSize)

def gevCreate(pgev, msgBufSize):
    r"""gevCreate(pgev, msgBufSize) -> int"""
    return _gevmcc.gevCreate(pgev, msgBufSize)

def gevCreateD(pgev, dirName, msgBufSize):
    r"""gevCreateD(pgev, dirName, msgBufSize) -> int"""
    return _gevmcc.gevCreateD(pgev, dirName, msgBufSize)

def gevCreateDD(pgev, dirName, msgBufSize):
    r"""gevCreateDD(pgev, dirName, msgBufSize) -> int"""
    return _gevmcc.gevCreateDD(pgev, dirName, msgBufSize)

def gevCreateL(pgev, libName, msgBufSize):
    r"""gevCreateL(pgev, libName, msgBufSize) -> int"""
    return _gevmcc.gevCreateL(pgev, libName, msgBufSize)

def gevFree(pgev):
    r"""gevFree(pgev) -> int"""
    return _gevmcc.gevFree(pgev)

def gevLibraryLoaded():
    r"""gevLibraryLoaded() -> int"""
    return _gevmcc.gevLibraryLoaded()

def gevLibraryUnload():
    r"""gevLibraryUnload() -> int"""
    return _gevmcc.gevLibraryUnload()

def gevGetScreenIndicator():
    r"""gevGetScreenIndicator() -> int"""
    return _gevmcc.gevGetScreenIndicator()

def gevSetScreenIndicator(scrind):
    r"""gevSetScreenIndicator(scrind)"""
    return _gevmcc.gevSetScreenIndicator(scrind)

def gevGetExceptionIndicator():
    r"""gevGetExceptionIndicator() -> int"""
    return _gevmcc.gevGetExceptionIndicator()

def gevSetExceptionIndicator(excind):
    r"""gevSetExceptionIndicator(excind)"""
    return _gevmcc.gevSetExceptionIndicator(excind)

def gevGetExitIndicator():
    r"""gevGetExitIndicator() -> int"""
    return _gevmcc.gevGetExitIndicator()

def gevSetExitIndicator(extind):
    r"""gevSetExitIndicator(extind)"""
    return _gevmcc.gevSetExitIndicator(extind)

def gevGetErrorCallback():
    r"""gevGetErrorCallback() -> gevErrorCallback_t"""
    return _gevmcc.gevGetErrorCallback()

def gevSetErrorCallback(func):
    r"""gevSetErrorCallback(func)"""
    return _gevmcc.gevSetErrorCallback(func)

def gevGetAPIErrorCount():
    r"""gevGetAPIErrorCount() -> int"""
    return _gevmcc.gevGetAPIErrorCount()

def gevSetAPIErrorCount(ecnt):
    r"""gevSetAPIErrorCount(ecnt)"""
    return _gevmcc.gevSetAPIErrorCount(ecnt)

def gevErrorHandling(msg):
    r"""gevErrorHandling(msg)"""
    return _gevmcc.gevErrorHandling(msg)

def gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem):
    r"""gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem)"""
    return _gevmcc.gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem)

def gevCompleteEnvironment(pgev, palg, ivec, rvec, svec):
    r"""gevCompleteEnvironment(pgev, palg, ivec, rvec, svec)"""
    return _gevmcc.gevCompleteEnvironment(pgev, palg, ivec, rvec, svec)

def gevInitEnvironmentLegacy(pgev, cntrfn):
    r"""gevInitEnvironmentLegacy(pgev, cntrfn) -> int"""
    return _gevmcc.gevInitEnvironmentLegacy(pgev, cntrfn)

def gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle):
    r"""gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle) -> int"""
    return _gevmcc.gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle)

def gevSwitchLogStatEx(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle, doStack):
    r"""gevSwitchLogStatEx(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle, doStack) -> int"""
    return _gevmcc.gevSwitchLogStatEx(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle, doStack)

def gevGetLShandle(pgev):
    r"""gevGetLShandle(pgev) -> void *"""
    return _gevmcc.gevGetLShandle(pgev)

def gevGetLSCBInfo(pgev, lshandle, lsw, usrmem):
    r"""gevGetLSCBInfo(pgev, lshandle, lsw, usrmem) -> int"""
    return _gevmcc.gevGetLSCBInfo(pgev, lshandle, lsw, usrmem)

def gevRestoreLogStat(pgev, lshandle):
    r"""gevRestoreLogStat(pgev, lshandle) -> int"""
    return _gevmcc.gevRestoreLogStat(pgev, lshandle)

def gevRestoreLogStatRewrite(pgev, lshandle):
    r"""gevRestoreLogStatRewrite(pgev, lshandle) -> int"""
    return _gevmcc.gevRestoreLogStatRewrite(pgev, lshandle)

def gevLog(pgev, s):
    r"""gevLog(pgev, s)"""
    return _gevmcc.gevLog(pgev, s)

def gevLogPChar(pgev, p):
    r"""gevLogPChar(pgev, p)"""
    return _gevmcc.gevLogPChar(pgev, p)

def gevStat(pgev, s):
    r"""gevStat(pgev, s)"""
    return _gevmcc.gevStat(pgev, s)

def gevStatC(pgev, s):
    r"""gevStatC(pgev, s)"""
    return _gevmcc.gevStatC(pgev, s)

def gevStatPChar(pgev, p):
    r"""gevStatPChar(pgev, p)"""
    return _gevmcc.gevStatPChar(pgev, p)

def gevStatAudit(pgev, s):
    r"""gevStatAudit(pgev, s)"""
    return _gevmcc.gevStatAudit(pgev, s)

def gevStatCon(pgev):
    r"""gevStatCon(pgev)"""
    return _gevmcc.gevStatCon(pgev)

def gevStatCoff(pgev):
    r"""gevStatCoff(pgev)"""
    return _gevmcc.gevStatCoff(pgev)

def gevStatEOF(pgev):
    r"""gevStatEOF(pgev)"""
    return _gevmcc.gevStatEOF(pgev)

def gevStatSysout(pgev):
    r"""gevStatSysout(pgev)"""
    return _gevmcc.gevStatSysout(pgev)

def gevStatAddE(pgev, mi, s):
    r"""gevStatAddE(pgev, mi, s)"""
    return _gevmcc.gevStatAddE(pgev, mi, s)

def gevStatAddV(pgev, mj, s):
    r"""gevStatAddV(pgev, mj, s)"""
    return _gevmcc.gevStatAddV(pgev, mj, s)

def gevStatAddJ(pgev, mi, mj, s):
    r"""gevStatAddJ(pgev, mi, mj, s)"""
    return _gevmcc.gevStatAddJ(pgev, mi, mj, s)

def gevStatEject(pgev):
    r"""gevStatEject(pgev)"""
    return _gevmcc.gevStatEject(pgev)

def gevStatEdit(pgev, c):
    r"""gevStatEdit(pgev, c)"""
    return _gevmcc.gevStatEdit(pgev, c)

def gevStatE(pgev, s, mi, s2):
    r"""gevStatE(pgev, s, mi, s2)"""
    return _gevmcc.gevStatE(pgev, s, mi, s2)

def gevStatV(pgev, s, mj, s2):
    r"""gevStatV(pgev, s, mj, s2)"""
    return _gevmcc.gevStatV(pgev, s, mj, s2)

def gevStatT(pgev):
    r"""gevStatT(pgev)"""
    return _gevmcc.gevStatT(pgev)

def gevStatA(pgev, s):
    r"""gevStatA(pgev, s)"""
    return _gevmcc.gevStatA(pgev, s)

def gevStatB(pgev, s):
    r"""gevStatB(pgev, s)"""
    return _gevmcc.gevStatB(pgev, s)

def gevLogStat(pgev, s):
    r"""gevLogStat(pgev, s)"""
    return _gevmcc.gevLogStat(pgev, s)

def gevLogStatNoC(pgev, s):
    r"""gevLogStatNoC(pgev, s)"""
    return _gevmcc.gevLogStatNoC(pgev, s)

def gevLogStatPChar(pgev, p):
    r"""gevLogStatPChar(pgev, p)"""
    return _gevmcc.gevLogStatPChar(pgev, p)

def gevLogStatFlush(pgev):
    r"""gevLogStatFlush(pgev)"""
    return _gevmcc.gevLogStatFlush(pgev)

def gevGetAnchor(pgev, s):
    r"""gevGetAnchor(pgev, s) -> char *"""
    return _gevmcc.gevGetAnchor(pgev, s)

def gevLSTAnchor(pgev, s):
    r"""gevLSTAnchor(pgev, s)"""
    return _gevmcc.gevLSTAnchor(pgev, s)

def gevStatAppend(pgev, statfn):
    r"""gevStatAppend(pgev, statfn) -> int"""
    return _gevmcc.gevStatAppend(pgev, statfn)

def gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap):
    r"""gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap)"""
    return _gevmcc.gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap)

def gevGetSlvExeInfo(pgev, solvername):
    r"""gevGetSlvExeInfo(pgev, solvername) -> int"""
    return _gevmcc.gevGetSlvExeInfo(pgev, solvername)

def gevGetSlvLibInfo(pgev, solvername):
    r"""gevGetSlvLibInfo(pgev, solvername) -> int"""
    return _gevmcc.gevGetSlvLibInfo(pgev, solvername)

def gevCapabilityCheck(pgev, modeltype, solvername, capable):
    r"""gevCapabilityCheck(pgev, modeltype, solvername, capable) -> int"""
    return _gevmcc.gevCapabilityCheck(pgev, modeltype, solvername, capable)

def gevSolverVisibility(pgev, solvername, hidden, defaultok):
    r"""gevSolverVisibility(pgev, solvername, hidden, defaultok) -> int"""
    return _gevmcc.gevSolverVisibility(pgev, solvername, hidden, defaultok)

def gevNumSolvers(pgev):
    r"""gevNumSolvers(pgev) -> int"""
    return _gevmcc.gevNumSolvers(pgev)

def gevGetSolver(pgev, modeltype):
    r"""gevGetSolver(pgev, modeltype) -> char *"""
    return _gevmcc.gevGetSolver(pgev, modeltype)

def gevGetCurrentSolver(pgev, gmoptr):
    r"""gevGetCurrentSolver(pgev, gmoptr) -> char *"""
    return _gevmcc.gevGetCurrentSolver(pgev, gmoptr)

def gevGetSolverDefault(pgev, modeltype):
    r"""gevGetSolverDefault(pgev, modeltype) -> char *"""
    return _gevmcc.gevGetSolverDefault(pgev, modeltype)

def gevSolver2Id(pgev, solvername):
    r"""gevSolver2Id(pgev, solvername) -> int"""
    return _gevmcc.gevSolver2Id(pgev, solvername)

def gevId2Solver(pgev, solverid):
    r"""gevId2Solver(pgev, solverid) -> char *"""
    return _gevmcc.gevId2Solver(pgev, solverid)

def gevCallSolverNextGridDir(pgev):
    r"""gevCallSolverNextGridDir(pgev) -> char *"""
    return _gevmcc.gevCallSolverNextGridDir(pgev)

def gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle):
    r"""gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle) -> int"""
    return _gevmcc.gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, domlim, optcr, optca, jobhandle)

def gevCallSolverHandleStatus(pgev, jobhandle):
    r"""gevCallSolverHandleStatus(pgev, jobhandle) -> int"""
    return _gevmcc.gevCallSolverHandleStatus(pgev, jobhandle)

def gevCallSolverHandleDelete(pgev, jobhandle):
    r"""gevCallSolverHandleDelete(pgev, jobhandle) -> int"""
    return _gevmcc.gevCallSolverHandleDelete(pgev, jobhandle)

def gevCallSolverHandleCollect(pgev, jobhandle, gmoptr):
    r"""gevCallSolverHandleCollect(pgev, jobhandle, gmoptr) -> int"""
    return _gevmcc.gevCallSolverHandleCollect(pgev, jobhandle, gmoptr)

def gevGetIntOpt(pgev, optname):
    r"""gevGetIntOpt(pgev, optname) -> int"""
    return _gevmcc.gevGetIntOpt(pgev, optname)

def gevGetDblOpt(pgev, optname):
    r"""gevGetDblOpt(pgev, optname) -> double"""
    return _gevmcc.gevGetDblOpt(pgev, optname)

def gevGetStrOpt(pgev, optname):
    r"""gevGetStrOpt(pgev, optname) -> char *"""
    return _gevmcc.gevGetStrOpt(pgev, optname)

def gevSetIntOpt(pgev, optname, ival):
    r"""gevSetIntOpt(pgev, optname, ival)"""
    return _gevmcc.gevSetIntOpt(pgev, optname, ival)

def gevSetDblOpt(pgev, optname, rval):
    r"""gevSetDblOpt(pgev, optname, rval)"""
    return _gevmcc.gevSetDblOpt(pgev, optname, rval)

def gevSetStrOpt(pgev, optname, sval):
    r"""gevSetStrOpt(pgev, optname, sval)"""
    return _gevmcc.gevSetStrOpt(pgev, optname, sval)

def gevSynchronizeOpt(pgev, optptr):
    r"""gevSynchronizeOpt(pgev, optptr)"""
    return _gevmcc.gevSynchronizeOpt(pgev, optptr)

def gevTimeJNow(pgev):
    r"""gevTimeJNow(pgev) -> double"""
    return _gevmcc.gevTimeJNow(pgev)

def gevTimeDiff(pgev):
    r"""gevTimeDiff(pgev) -> double"""
    return _gevmcc.gevTimeDiff(pgev)

def gevTimeDiffStart(pgev):
    r"""gevTimeDiffStart(pgev) -> double"""
    return _gevmcc.gevTimeDiffStart(pgev)

def gevTimeSetStart(pgev):
    r"""gevTimeSetStart(pgev)"""
    return _gevmcc.gevTimeSetStart(pgev)

def gevTerminateUninstall(pgev):
    r"""gevTerminateUninstall(pgev)"""
    return _gevmcc.gevTerminateUninstall(pgev)

def gevTerminateInstall(pgev):
    r"""gevTerminateInstall(pgev)"""
    return _gevmcc.gevTerminateInstall(pgev)

def gevTerminateSet(pgev, intr, ehdler):
    r"""gevTerminateSet(pgev, intr, ehdler)"""
    return _gevmcc.gevTerminateSet(pgev, intr, ehdler)

def gevTerminateGet(pgev):
    r"""gevTerminateGet(pgev) -> int"""
    return _gevmcc.gevTerminateGet(pgev)

def gevTerminateClear(pgev):
    r"""gevTerminateClear(pgev)"""
    return _gevmcc.gevTerminateClear(pgev)

def gevTerminateRaise(pgev):
    r"""gevTerminateRaise(pgev)"""
    return _gevmcc.gevTerminateRaise(pgev)

def gevTerminateGetHandler(pgev, intr, ehdler):
    r"""gevTerminateGetHandler(pgev, intr, ehdler)"""
    return _gevmcc.gevTerminateGetHandler(pgev, intr, ehdler)

def gevGetScratchName(pgev, s):
    r"""gevGetScratchName(pgev, s) -> char *"""
    return _gevmcc.gevGetScratchName(pgev, s)

def gevWriteModelInstance(pgev, mifn, gmoptr, INOUT):
    r"""gevWriteModelInstance(pgev, mifn, gmoptr, INOUT) -> int"""
    return _gevmcc.gevWriteModelInstance(pgev, mifn, gmoptr, INOUT)

def gevDuplicateScratchDir(pgev, scrdir, logfn):
    r"""gevDuplicateScratchDir(pgev, scrdir, logfn) -> int"""
    return _gevmcc.gevDuplicateScratchDir(pgev, scrdir, logfn)

def gevInitJacLegacy(pgev, evalptr, gmoptr):
    r"""gevInitJacLegacy(pgev, evalptr, gmoptr) -> int"""
    return _gevmcc.gevInitJacLegacy(pgev, evalptr, gmoptr)

def gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv):
    r"""gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv)"""
    return _gevmcc.gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv)

def gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv):
    r"""gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv)"""
    return _gevmcc.gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv)

def gevEvalNewPointLegacy(pgev, evalptr, x):
    r"""gevEvalNewPointLegacy(pgev, evalptr, x) -> int"""
    return _gevmcc.gevEvalNewPointLegacy(pgev, evalptr, x)

def gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8):
    r"""gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8) -> int"""
    return _gevmcc.gevEvalJacLegacy(pgev, evalptr, si, x, arg5, jac, arg7, arg8)

def gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9):
    r"""gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9) -> int"""
    return _gevmcc.gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, arg8, arg9)

def gevNextNLLegacy(pgev, evalptr, si):
    r"""gevNextNLLegacy(pgev, evalptr, si) -> int"""
    return _gevmcc.gevNextNLLegacy(pgev, evalptr, si)

def gevRowGms2SlvLegacy(pgev, evalptr, si):
    r"""gevRowGms2SlvLegacy(pgev, evalptr, si) -> int"""
    return _gevmcc.gevRowGms2SlvLegacy(pgev, evalptr, si)

def gevFreeJacLegacy(pgev, evalptr):
    r"""gevFreeJacLegacy(pgev, evalptr)"""
    return _gevmcc.gevFreeJacLegacy(pgev, evalptr)

def gevGetALGX(pgev):
    r"""gevGetALGX(pgev) -> void *"""
    return _gevmcc.gevGetALGX(pgev)

def gevSkipIOLegacySet(pgev, x):
    r"""gevSkipIOLegacySet(pgev, x)"""
    return _gevmcc.gevSkipIOLegacySet(pgev, x)

def gevThreads(pgev):
    r"""gevThreads(pgev) -> int"""
    return _gevmcc.gevThreads(pgev)

def gevNSolves(pgev):
    r"""gevNSolves(pgev) -> double"""
    return _gevmcc.gevNSolves(pgev)
GLOBAL_MAX_INDEX_DIM = _gevmcc.GLOBAL_MAX_INDEX_DIM

GLOBAL_UEL_IDENT_SIZE = _gevmcc.GLOBAL_UEL_IDENT_SIZE

ITERLIM_INFINITY = _gevmcc.ITERLIM_INFINITY

RESLIM_INFINITY = _gevmcc.RESLIM_INFINITY

GMS_MAX_SOLVERS = _gevmcc.GMS_MAX_SOLVERS

GMS_MAX_INDEX_DIM = _gevmcc.GMS_MAX_INDEX_DIM

GMS_UEL_IDENT_SIZE = _gevmcc.GMS_UEL_IDENT_SIZE

GMS_SSSIZE = _gevmcc.GMS_SSSIZE

GMS_VARTYPE_UNKNOWN = _gevmcc.GMS_VARTYPE_UNKNOWN

GMS_VARTYPE_BINARY = _gevmcc.GMS_VARTYPE_BINARY

GMS_VARTYPE_INTEGER = _gevmcc.GMS_VARTYPE_INTEGER

GMS_VARTYPE_POSITIVE = _gevmcc.GMS_VARTYPE_POSITIVE

GMS_VARTYPE_NEGATIVE = _gevmcc.GMS_VARTYPE_NEGATIVE

GMS_VARTYPE_FREE = _gevmcc.GMS_VARTYPE_FREE

GMS_VARTYPE_SOS1 = _gevmcc.GMS_VARTYPE_SOS1

GMS_VARTYPE_SOS2 = _gevmcc.GMS_VARTYPE_SOS2

GMS_VARTYPE_SEMICONT = _gevmcc.GMS_VARTYPE_SEMICONT

GMS_VARTYPE_SEMIINT = _gevmcc.GMS_VARTYPE_SEMIINT

GMS_VARTYPE_MAX = _gevmcc.GMS_VARTYPE_MAX

GMS_EQU_USERINFO_BASE = _gevmcc.GMS_EQU_USERINFO_BASE

GMS_EQUTYPE_E = _gevmcc.GMS_EQUTYPE_E

GMS_EQUTYPE_G = _gevmcc.GMS_EQUTYPE_G

GMS_EQUTYPE_L = _gevmcc.GMS_EQUTYPE_L

GMS_EQUTYPE_N = _gevmcc.GMS_EQUTYPE_N

GMS_EQUTYPE_X = _gevmcc.GMS_EQUTYPE_X

GMS_EQUTYPE_C = _gevmcc.GMS_EQUTYPE_C

GMS_EQUTYPE_B = _gevmcc.GMS_EQUTYPE_B

GMS_EQUTYPE_MAX = _gevmcc.GMS_EQUTYPE_MAX

GMS_EQUEOFFSET = _gevmcc.GMS_EQUEOFFSET

GMS_SETTYPE_DEFAULT = _gevmcc.GMS_SETTYPE_DEFAULT

GMS_SETTYPE_SINGLETON = _gevmcc.GMS_SETTYPE_SINGLETON

GMS_SETTYPE_MAX = _gevmcc.GMS_SETTYPE_MAX

GMS_VAL_LEVEL = _gevmcc.GMS_VAL_LEVEL

GMS_VAL_MARGINAL = _gevmcc.GMS_VAL_MARGINAL

GMS_VAL_LOWER = _gevmcc.GMS_VAL_LOWER

GMS_VAL_UPPER = _gevmcc.GMS_VAL_UPPER

GMS_VAL_SCALE = _gevmcc.GMS_VAL_SCALE

GMS_VAL_MAX = _gevmcc.GMS_VAL_MAX

sv_valund = _gevmcc.sv_valund

sv_valna = _gevmcc.sv_valna

sv_valpin = _gevmcc.sv_valpin

sv_valmin = _gevmcc.sv_valmin

sv_valeps = _gevmcc.sv_valeps

sv_normal = _gevmcc.sv_normal

sv_acronym = _gevmcc.sv_acronym

GMS_SVIDX_UNDEF = _gevmcc.GMS_SVIDX_UNDEF

GMS_SVIDX_NA = _gevmcc.GMS_SVIDX_NA

GMS_SVIDX_PINF = _gevmcc.GMS_SVIDX_PINF

GMS_SVIDX_MINF = _gevmcc.GMS_SVIDX_MINF

GMS_SVIDX_EPS = _gevmcc.GMS_SVIDX_EPS

GMS_SVIDX_NORMAL = _gevmcc.GMS_SVIDX_NORMAL

GMS_SVIDX_ACR = _gevmcc.GMS_SVIDX_ACR

GMS_SVIDX_MAX = _gevmcc.GMS_SVIDX_MAX

dt_set = _gevmcc.dt_set

dt_par = _gevmcc.dt_par

dt_var = _gevmcc.dt_var

dt_equ = _gevmcc.dt_equ

dt_alias = _gevmcc.dt_alias

GMS_DT_SET = _gevmcc.GMS_DT_SET

GMS_DT_PAR = _gevmcc.GMS_DT_PAR

GMS_DT_VAR = _gevmcc.GMS_DT_VAR

GMS_DT_EQU = _gevmcc.GMS_DT_EQU

GMS_DT_ALIAS = _gevmcc.GMS_DT_ALIAS

GMS_DT_MAX = _gevmcc.GMS_DT_MAX

GMS_SV_UNDEF = _gevmcc.GMS_SV_UNDEF

GMS_SV_NA = _gevmcc.GMS_SV_NA

GMS_SV_PINF = _gevmcc.GMS_SV_PINF

GMS_SV_MINF = _gevmcc.GMS_SV_MINF

GMS_SV_EPS = _gevmcc.GMS_SV_EPS

GMS_SV_ACR = _gevmcc.GMS_SV_ACR

GMS_SV_NAINT = _gevmcc.GMS_SV_NAINT

STAT_OK = _gevmcc.STAT_OK

STAT_NOPT = _gevmcc.STAT_NOPT

STAT_INFES = _gevmcc.STAT_INFES

STAT_UNBND = _gevmcc.STAT_UNBND

STAT_EVAL = _gevmcc.STAT_EVAL

STAT_UNKNW = _gevmcc.STAT_UNKNW

STAT_REDEF = _gevmcc.STAT_REDEF

STAT_DEPND = _gevmcc.STAT_DEPND

STAT_REDIR = _gevmcc.STAT_REDIR

STAT_MAX = _gevmcc.STAT_MAX

SS_MAX = _gevmcc.SS_MAX

MS_MAX = _gevmcc.MS_MAX


cvar = _gevmcc.cvar
gmsGdxTypeText = cvar.gmsGdxTypeText
gmsVarTypeText = cvar.gmsVarTypeText
gmsValTypeText = cvar.gmsValTypeText
gmsSVText = cvar.gmsSVText
gmsSpecialValues = cvar.gmsSpecialValues
gmsDefRecVar = cvar.gmsDefRecVar
gmsDefRecEqu = cvar.gmsDefRecEqu
rcStat = cvar.rcStat
solveStatusTxt = cvar.solveStatusTxt
modelStatusTxt = cvar.modelStatusTxt

