# -*- coding: utf-8 -*-
#
# Copyright (C) 2025 KTH Royal Institute of Technology.
# Copyright (C) 2025 CERN.
#
# Invenio-openapi is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

openapi: 3.1.1
info:
  title: Invenio REST API
  description: "## **Summary**\nThe following document is a reference guide for all the REST APIs that InvenioRDM exposes.\n## **Resources**\n- \U0001F4DA [Product documentation](https://inveniordm.docs.cern.ch)\n- \U0001F517 [OpenAPI GitHub repository](https://github.com/inveniosoftware/invenio-openapi)\n- \U0001F310 [Invenio project](https://inveniosoftware.org)\n- \U0001F4AC [Community support](https://inveniordm-dev.docs.cern.ch/install/troubleshoot/)"
  version: 12.0.0
  contact:
    name: InvenioRDM Documentation
    url: https://inveniordm.docs.cern.ch
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  x-copyright: KTH Royal Institute of Technology 2025
  x-repo: https://github.com/Samk13/invenio-api-toolkit
servers:
  - url: '{baseURL}'
    description: InvenioRDM instance
    variables:
      baseURL:
        default: https://inveniordm.web.cern.ch
        description: Base URL of your InvenioRDM instance
paths:
  /api/communities/{communityId}/logo:
    put:
      summary: Update Community Logo
      tags:
        - Communities logo
      operationId: updateCommunityLogo
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      security:
        - BearerAuth: []
    get:
      summary: Get Community Logo
      tags:
        - Communities logo
      operationId: getCommunityLogo
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    delete:
      summary: Delete Community Logo
      tags:
        - Communities logo
      operationId: deleteCommunityLogo
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/featured:
    get:
      summary: Get Featured Community Entry
      tags:
        - Featured Communities
      operationId: getFeaturedCommunityEntry
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    post:
      summary: Create a Featured Community Entry
      tags:
        - Featured Communities
      operationId: createAFeaturedCommunityEntry
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              start_date: "2024-06-12T23:24:15.373Z"
      security:
        - BearerAuth: []
  /api/communities/featured:
    get:
      summary: Search Featured Communities
      tags:
        - Featured Communities
      operationId: searchFeaturedCommunities
      parameters:
        - name: prettyprint
          in: query
          required: false
          schema:
            type: string
          example: "1"
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results based on ElasticSearch's query string syntax.
          example: test
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10)'
          example: "2"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Specify community type as one of organization, event, topic or project.
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/featured/{featured-entry-id}:
    put:
      summary: Update a Featured Community Entry
      tags:
        - Featured Communities
      operationId: updateAFeaturedCommunityEntry
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: featured-entry-id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              start_date: "2024-06-11T10:13:13.945Z"
      security:
        - BearerAuth: []
    delete:
      summary: Delete a Featured Community Entry
      tags:
        - Featured Communities
      operationId: deleteAFeaturedCommunityEntry
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: featured-entry-id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/members:
    get:
      summary: Search members
      tags:
        - Communities Members
      operationId: searchMembers
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Customizable. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: |
            Specify number of items in the results page (default: 10).
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
        - name: role
          in: query
          required: false
          schema:
            type: string
          description: Filter by role (one of reader, curator, manager, owner).
        - name: visibility
          in: query
          required: false
          schema:
            type: string
          description: Filter by visibility (one of true, false)
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    post:
      summary: Add group members
      tags:
        - Communities Members
      operationId: addGroupMembers
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              members:
                - id: admin
                  type: group
              role: curator
      security:
        - BearerAuth: []
    put:
      summary: Update members
      tags:
        - Communities Members
      operationId: updateMembers
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              members:
                - id: admin
                  type: group
                - id: "3"
                  type: user
              visible: false
              role: reader
      security:
        - BearerAuth: []
    delete:
      summary: Remove members / leave community
      tags:
        - Communities Members
      operationId: removeMembersLeaveCommunity
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/members/public:
    get:
      summary: Search public members
      tags:
        - Communities Members
      operationId: searchPublicMembers
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/invitations:
    get:
      summary: Search invitations
      tags:
        - Communities Invitations
      operationId: searchInvitations
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
          example: test
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Customizable. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
          example: bestmatch
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
          example: "1"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
        - name: role
          in: query
          required: false
          schema:
            type: string
          description: Filter by role (one of reader, curator, manager, owner).
          example: owner
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Filter by status (one of submitted, accepted, declined, expired, cancelled)
          example: accepted
        - name: is_open
          in: query
          required: false
          schema:
            type: string
          description: Filter by open/closed (one of true, false)
          example: "false"
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    post:
      summary: Invite user members
      tags:
        - Communities Invitations
      operationId: inviteUserMembers
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              members:
                - id: "1"
                  type: user
              role: curator
              message: <p>Hi</p>
      security:
        - BearerAuth: []
    put:
      summary: Update invitations
      tags:
        - Communities Invitations
      operationId: updateInvitations
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              members:
                - id: admin
                  type: group
                - id: "3"
                  type: user
              visible: false
              role: reader
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/review:
    get:
      summary: Get a review request
      tags:
        - Drafts
      operationId: getAReviewRequest
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    put:
      summary: Create/update a review request
      tags:
        - Drafts
      operationId: createupdateAReviewRequest
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              receiver:
                community: '{{community-id}}'
              type: community-submission
      security:
        - BearerAuth: []
    delete:
      summary: Delete a review request
      tags:
        - Drafts
      operationId: deleteAReviewRequest
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/actions/submit-review:
    post:
      summary: Submit a record for review
      tags:
        - Drafts
      operationId: submitARecordForReview
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: Thank you in advance for the review.
                format: html
      security:
        - BearerAuth: []
  /api/users:
    get:
      summary: Get a user by ID
      tags:
        - Users
      operationId: getAUserById
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities:
    post:
      summary: Create a Community
      tags:
        - Communities
      operationId: createACommunity
      parameters: []
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              access:
                visibility: public
                member_policy: open
                record_policy: open
                review_policy: closed
                members_visibility: restricted
              slug: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
              metadata:
                title: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
                description: '{{$randomCatchPhraseDescriptor}}'
                type:
                  id: event
                curation_policy: This is the kind of records we accept.
                page: '{{$randomJobDescriptor}}'
                website: https://example-university.edu/
                organizations:
                  - name: Example University
      security:
        - BearerAuth: []
    get:
      summary: Search Communities
      tags:
        - Communities
      operationId: searchCommunities
      parameters:
        - name: prettyprint
          in: query
          required: false
          schema:
            type: string
          example: "1"
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: |
            Search query used to filter results based on ElasticSearch's query string syntax.
          example: test
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Customizable. Built-in options are "bestmatch", "newest", "oldest", "updated-desc", "updated-asc", "version" (default: "bestmatch" or "newest").'
          example: updated-asc
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10)'
          example: "2"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Specify community type as one of organization, event, topic or project.
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}:
    put:
      summary: Update a Community
      tags:
        - Communities
      operationId: updateACommunity
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              access:
                visibility: restricted
                member_policy: closed
                record_policy: closed
              slug: '{{community-slug}}'
              metadata:
                title: example-community-{{$randomProductAdjective}}-{{$randomVerb}}
                description: '{{$randomCatchPhraseDescriptor}}'
                type:
                  id: event
                curation_policy: This is the kind of records we accept.
                page: Information for my community.
                website: https://inveniosoftware.org/
                organizations:
                  - name: Example Organization
      security:
        - BearerAuth: []
    delete:
      summary: Delete Community
      tags:
        - Communities
      operationId: deleteCommunity
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    get:
      summary: Get a Community
      tags:
        - Communities
      operationId: getACommunity
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/records:
    get:
      summary: Get Community Records
      tags:
        - Communities
      operationId: getCommunityRecords
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: metadata.publication_date:[YYYY-MM-DD TO *] - Search for records published after a specific date
          example: metadata.publication_date%3A%5B2020-01-01%20TO%20%2A%5D
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/user/communities:
    get:
      summary: Search User Communities
      tags:
        - Users
      operationId: searchUserCommunities
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
          example: "1"
        - name: type
          in: query
          required: false
          schema:
            type: string
          example: project
        - name: size
          in: query
          required: false
          schema:
            type: string
          example: "1"
        - name: sort
          in: query
          required: false
          schema:
            type: string
          example: oldest
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/communities/{communityId}/rename:
    post:
      summary: Rename a Community
      tags:
        - Communities
      operationId: renameACommunity
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the community
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              access:
                visibility: public
                member_policy: open
                record_policy: open
              slug: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
              metadata:
                title: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
                description: '{{$randomCatchPhraseDescriptor}}'
                type:
                  id: event
                curation_policy: This is the kind of records we accept.
                page: '{{$randomJobDescriptor}}'
                website: https://example-university.edu/
                organizations:
                  - name: Example University
      security:
        - BearerAuth: []
  /api/records:
    post:
      summary: Create a draft record
      tags:
        - Records
      operationId: createADraftRecord
      parameters: []
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateADraftRecordBody'
            example:
              access:
                record: public
                files: public
              files:
                enabled: true
              metadata:
                creators:
                  - person_or_org:
                      family_name: Doe
                      given_name: John
                      identifiers:
                        - identifier: 0000-0000-0000-0000
                          scheme: orcid
                      name: Doe, John
                      type: personal
                    affiliations:
                      - id: example-org-id
                        name: Example Organization
                    role:
                      id: other
                publication_date: "2020-06-01"
                resource_type:
                  id: image-photo
                title: Example API draft request {{$randomWord}}
              type: community-submission
      security:
        - BearerAuth: []
    get:
      summary: Search records
      tags:
        - Records
      operationId: searchRecords
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results based on ElasticSearch's query string syntax.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Customizable. Built-in options are "bestmatch", "newest", "oldest", "updated-desc", "updated-asc", "version", "mostviewed", "mostdownloaded" (default: "bestmatch" or "newest").'
          example: newest
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: |
            Specify number of items in the results page (default: 10).
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
        - name: allversions
          in: query
          required: false
          schema:
            type: string
          description: 'Specify if all versions should be included (default: False, displays just latest version).'
          example: "True"
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/files:
    post:
      summary: step[1] Start draft file upload(s)
      tags:
        - Drafts Files upload
      operationId: step1StartDraftFileUploads
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FileTransferItem'
            example:
              - key: '{{file-name}}'
      security:
        - BearerAuth: []
    get:
      summary: List a draft's files
      tags:
        - Drafts
      operationId: listADraftsFiles
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/files/{file-name}/content:
    put:
      summary: step[2] Upload a draft file's content
      tags:
        - Drafts Files upload
      operationId: step2UploadADraftFilesContent
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      security:
        - BearerAuth: []
    get:
      summary: Download a draft file
      tags:
        - Drafts
      operationId: downloadADraftFile
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/files/{file-name}/commit:
    post:
      summary: step[3] Complete a draft file upload
      tags:
        - Drafts Files upload
      operationId: step3CompleteADraftFileUpload
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/actions/publish:
    post:
      summary: Publish a draft record
      tags:
        - Drafts
      operationId: publishADraftRecord
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/actions/files-import:
    post:
      summary: Link files from previous version
      tags:
        - Drafts
      operationId: linkFilesFromPreviousVersion
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft:
    post:
      summary: Edit a published record (Create a draft record from a published record)
      tags:
        - Drafts
      operationId: editAPublishedRecordCreateADraftRecordFromAPublishedRecord
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      security:
        - BearerAuth: []
    delete:
      summary: Delete/discard a draft record
      tags:
        - Drafts
      operationId: deletediscardADraftRecord
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    put:
      summary: Update a draft record
      tags:
        - Drafts
      operationId: updateADraftRecord
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDraftRecord'
            example:
              access:
                record: public
                files: public
              files:
                enabled: "false"
              metadata:
                creators:
                  - person_or_org:
                      family_name: Doe
                      given_name: John
                      identifiers:
                        - identifier: 0000-0000-0000-0001
                          scheme: orcid
                      name: Doe, John
                      type: personal
                    role:
                      id: other
                  - person_or_org:
                      family_name: Smith
                      given_name: Jane
                      identifiers:
                        - scheme: orcid
                          identifier: 0000-0000-0000-0002
                      name: Smith, Jane
                      type: personal
                    affiliations:
                      - name: Example University
                publication_date: "2020-06-01"
                resource_type:
                  id: image-photo
                title: Update title using API draft request
      security:
        - BearerAuth: []
    get:
      summary: Get a draft records
      tags:
        - Drafts
      operationId: getADraftRecords
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/files/{file-name}:
    get:
      summary: Get a draft file's metadata
      tags:
        - Drafts
      operationId: getADraftFilesMetadata
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a draft file
      tags:
        - Drafts
      operationId: deleteADraftFile
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/user/records:
    get:
      summary: Get all draft records
      tags:
        - Users
      operationId: getAllDraftRecords
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          example: is_published:false
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter user records, typically by persistent identifier or other record fields.
          example: pids.doi.identifier:example-doi-123
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/export/json:
    get:
      summary: Export record as JSON
      tags:
        - Export
      operationId: exportRecordAsJson
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/export/dublincore:
    get:
      summary: Export record as dublincore XML
      tags:
        - Export
      operationId: exportRecordAsDublincoreXml
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/export/datacite-xml:
    get:
      summary: Export record as datacite-xml
      tags:
        - Export
      operationId: exportRecordAsDatacitexml
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/export/datacite-json:
    get:
      summary: Export record as datacite-json
      tags:
        - Export
      operationId: exportRecordAsDatacitejson
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/export/csl:
    get:
      summary: Export record as csl
      tags:
        - Export
      operationId: exportRecordAsCsl
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/communities:
    delete:
      summary: Delete Record community
      tags:
        - Records
      operationId: deleteRecordCommunity
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}:
    get:
      summary: Get a record by ID
      tags:
        - Records
      operationId: getARecordById
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/files:
    get:
      summary: List a record's files
      tags:
        - Records Files
      operationId: listARecordsFiles
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/files/{file-name}:
    get:
      summary: Get a record file's metadata
      tags:
        - Records Files
      operationId: getARecordFilesMetadata
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/files/{file-name}/content:
    get:
      summary: Download a record file
      tags:
        - Records Files
      operationId: downloadARecordFile
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
        - name: file-name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/versions:
    post:
      summary: Create a new version
      tags:
        - Records Versions
      operationId: createANewVersion
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      security:
        - BearerAuth: []
    get:
      summary: Get all versions
      tags:
        - Records Versions
      operationId: getAllVersions
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/versions/latest:
    get:
      summary: Get latest version
      tags:
        - Records Versions
      operationId: getLatestVersion
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/access/links:
    post:
      summary: Create an access link
      tags:
        - Records
        - Access
      operationId: createAnAccessLink
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              permission: view
              expires_at: "2024-11-06"
      security:
        - BearerAuth: []
    get:
      summary: List access links
      tags:
        - Records
        - Access
      operationId: listAccessLinks
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{recordId}/access/links/{linkId}:
    get:
      summary: Get an access link by ID
      tags:
        - Records
        - Access
      operationId: getAnAccessLinkById
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
        - name: linkId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the access link
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    patch:
      summary: Update an access link
      tags:
        - Records
        - Access
      operationId: updateAnAccessLink
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
        - name: linkId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the access link
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              permission: edit
              expires_at: "2024-11-06"
      security:
        - BearerAuth: []
    delete:
      summary: Delete an access link
      tags:
        - Records
        - Access
      operationId: deleteAnAccessLink
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the record
        - name: linkId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the access link
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/records/{draftId}/draft/pids/doi:
    post:
      summary: Reserve a DOI
      tags:
        - Drafts
      operationId: reserveADoi
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
    delete:
      summary: Delete a DOI
      tags:
        - Drafts
      operationId: deleteADoi
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the draft record
        - name: expand
          in: query
          required: false
          schema:
            type: string
          example: "1"
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/requests/{requestId}/actions/accept:
    post:
      summary: Accept a request
      tags:
        - Request Actions
      operationId: acceptARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: Your request has been accepted!
                format: html
      security:
        - BearerAuth: []
  /api/requests/{requestId}/actions/cancel:
    post:
      summary: Cancel a request
      tags:
        - Request Actions
      operationId: cancelARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: Your request has been cancelled!
                format: html
      security:
        - BearerAuth: []
  /api/requests/{requestId}/actions/decline:
    post:
      summary: Decline a request
      tags:
        - Request Actions
      operationId: declineARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: Your request has been declined!
                format: html
      security:
        - BearerAuth: []
  /api/requests/{requestId}/comments:
    post:
      summary: Submit a comment on a request
      tags:
        - Requests
        - Comments
      operationId: submitACommentOnARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: I would use these subject terms to align the record with others in the community.
                format: html
      security:
        - BearerAuth: []
  /api/requests/{requestId}/comments/{comment_id}:
    get:
      summary: Get a comment
      tags:
        - Requests
        - Comments
      operationId: getAComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
        - name: comment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    put:
      summary: Update a comment
      tags:
        - Requests
        - Comments
      operationId: updateAComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
        - name: comment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              payload:
                content: I would use these subject terms to align this record and the other one with others in the community.
                format: html
      security:
        - BearerAuth: []
    delete:
      summary: Delete a comment
      tags:
        - Requests
        - Comments
      operationId: deleteAComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
        - name: comment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/requests/{requestId}/timeline:
    get:
      summary: Get a request's timeline
      tags:
        - Requests
        - Timeline
      operationId: getARequestsTimeline
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/requests:
    get:
      summary: Search requests
      tags:
        - Requests
      operationId: searchRequests
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results based on ElasticSearch's query string syntax.
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "newest").'
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/requests/{requestId}:
    get:
      summary: Get a request
      tags:
        - Requests
      operationId: getARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    put:
      summary: Update a request
      tags:
        - Requests
      operationId: updateARequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the request
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              expires_at: "2024-06-11"
              id: '{{record-id}}'
              number: "1"
              revision_id: 1
              status: draft
              title: A new title
              type: default-request
      security:
        - BearerAuth: []
  /api/users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      operationId: getUserByIdDetailed
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the user
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/users/{userId}/avatar.svg:
    get:
      summary: Get avatar for user
      tags:
        - Users
        - Avatars
      operationId: getAvatarForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the user
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/groups:
    get:
      summary: Search groups
      tags:
        - Groups
      operationId: searchGroups
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query used to filter results.
          example: admin
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/groups/{groupId}:
    get:
      summary: Get group by ID
      tags:
        - Groups
      operationId: getGroupById
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the group
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/groups/{groupId}/avatar.svg:
    get:
      summary: Get avatar for group
      tags:
        - Groups
        - Avatars
      operationId: getAvatarForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the group
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/names:
    get:
      summary: Get names
      tags:
        - Vocabularies
      operationId: getNames
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
          example: lastname
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
        - name: suggest
          in: query
          required: false
          schema:
            type: string
          description: '"Search as you type" query.'
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/names/{vocNamesId}:
    get:
      summary: Get names by ID
      tags:
        - Vocabularies
      operationId: getNamesById
      parameters:
        - name: vocNamesId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the name vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/funders:
    get:
      summary: Specific vocabularies funders
      tags:
        - Vocabularies
      operationId: specificVocabulariesFunders
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
        - name: suggest
          in: query
          required: false
          schema:
            type: string
          description: '"Search as you type" query.'
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
          example: bestmatch
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
          example: "1"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/funders/{vocFundersId}:
    get:
      summary: Specific vocabularies funders by ID
      tags:
        - Vocabularies
      operationId: specificVocabulariesFundersById
      parameters:
        - name: vocFundersId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the funder vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/awards:
    get:
      summary: Specific vocabularies awards
      tags:
        - Vocabularies
      operationId: specificVocabulariesAwards
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results.
        - name: suggest
          in: query
          required: false
          schema:
            type: string
          description: '"Search as you type" query.'
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
          example: bestmatch
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
          example: "1"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/awards/{vocAwardsId}:
    get:
      summary: Specific vocabularies awards by ID
      tags:
        - Vocabularies
      operationId: specificVocabulariesAwardsById
      parameters:
        - name: vocAwardsId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the award vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/{vocabularies-type}:
    get:
      summary: Search vocabularies
      tags:
        - Vocabularies
      operationId: searchVocabularies
      parameters:
        - name: vocabularies-type
          in: path
          required: true
          schema:
            type: string
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter results based on ElasticSearch's query string syntax.
          example: arabic
        - name: suggest
          in: query
          required: false
          schema:
            type: string
          description: One or more words used to suggest records as the user types (i.e. auto-complete).
        - name: tags
          in: query
          required: false
          schema:
            type: string
          description: Filter results to the tag string
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Unless overridden by a specific vocabulary, the built-in options are "bestmatch", "title", "newest", "oldest" (default: "bestmatch" or "title").'
          example: bestmatch
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10).'
          example: "1"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results.
          example: "1"
        - name: ln
          in: query
          required: false
          schema:
            type: string
          description: Locale used to localize the title and description (e.g. en or en_US)
          example: en_US
        - name: accept-language
          in: query
          required: false
          schema:
            type: string
          description: Locale used to localize the title and description (e.g. en or en_US)
          example: en_US
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/{vocabularies-type}/{vocabulariesId}:
    get:
      summary: Get a vocabulary record by ID
      tags:
        - Vocabularies
      operationId: getAVocabularyRecordById
      parameters:
        - name: vocabularies-type
          in: path
          required: true
          schema:
            type: string
        - name: vocabulariesId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/resourcetypes:
    get:
      summary: Search vocabularies resourcetypes
      tags:
        - Vocabularies
      operationId: searchVocabulariesResourcetypes
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/languages:
    get:
      summary: Search vocabularies languages
      tags:
        - Vocabularies
      operationId: searchVocabulariesLanguages
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/licenses:
    get:
      summary: Search vocabularies licenses
      tags:
        - Vocabularies
      operationId: searchVocabulariesLicenses
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/relationtypes:
    get:
      summary: Search vocabularies relationtypes
      tags:
        - Vocabularies
      operationId: searchVocabulariesRelationtypes
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/contributorsroles:
    get:
      summary: vocabularies contributorsroles
      tags:
        - Vocabularies
      operationId: vocabulariesContributorsroles
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/descriptiontypes:
    get:
      summary: vocabularies descriptiontypes
      tags:
        - Vocabularies
      operationId: vocabulariesDescriptiontypes
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/datetypes:
    get:
      summary: vocabularies datetypes
      tags:
        - Vocabularies
      operationId: vocabulariesDatetypes
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/vocabularies/creatorsroles:
    get:
      summary: vocabularies creatorsroles
      tags:
        - Vocabularies
      operationId: vocabulariesCreatorsroles
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/affiliations:
    get:
      summary: Specific vocabularies affiliations
      tags:
        - Vocabularies
      operationId: specificVocabulariesAffiliations
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/affiliations/{vocAffiliationId}:
    get:
      summary: Specific vocabularies affiliations by ID
      tags:
        - Vocabularies
      operationId: specificVocabulariesAffiliationsById
      parameters:
        - name: vocAffiliationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the affiliation vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/subjects:
    get:
      summary: Specific vocabularies subjects
      tags:
        - Vocabularies
      operationId: specificVocabulariesSubjects
      parameters:
        - name: suggest
          in: query
          required: true
          schema:
            type: string
          example: '{{subject-query}}'
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/subjects/{vocSubjectsId}:
    get:
      summary: Specific vocabularies subjects by ID
      tags:
        - Vocabularies
      operationId: specificVocabulariesSubjectsById
      parameters:
        - name: vocSubjectsId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the subject vocabulary
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/oaipmh/sets:
    post:
      summary: Create a set
      tags:
        - OAI-PMH Sets
      operationId: createASet
      parameters: []
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              name: '{{$randomWord}}'
              spec: '{{$randomWord}}'
              description: '{{$randomLoremParagraph}}'
              search_pattern: '{{$randomWord}}'
      security:
        - BearerAuth: []
    get:
      summary: Search sets
      tags:
        - OAI-PMH Sets
      operationId: searchSets
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/oaipmh/sets/{setId}:
    get:
      summary: Get a set by ID
      tags:
        - OAI-PMH Sets
      operationId: getASetById
      parameters:
        - name: setId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the OAI-PMH set
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
    put:
      summary: Update a set
      tags:
        - OAI-PMH Sets
      operationId: updateASet
      parameters:
        - name: setId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the OAI-PMH set
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              name: '{{$randomWord}}'
              spec: '{{$randomWord}}'
              description: '{{$randomLoremParagraph}}'
              search_pattern: '{{$randomWord}}'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a set
      tags:
        - OAI-PMH Sets
      operationId: deleteASet
      parameters:
        - name: setId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the OAI-PMH set
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/oaipmh/formats:
    get:
      summary: Get metadata formats
      tags:
        - OAI-PMH
      operationId: getMetadataFormats
      parameters: []
      responses:
        "200":
          $ref: '#/components/responses/Success'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/stats:
    post:
      summary: Get statistics
      tags:
        - Statistics
      operationId: getStatistics
      parameters: []
      responses:
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "201":
          $ref: '#/components/responses/Created'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              views:
                stat: record-view
                params:
                  recid: '{{record-id}}'
              views-all-versions:
                stat: record-view-all-versions
                params:
                  parent_recid: '{{parent-id}}'
              views-with-date-range:
                stat: record-view
                params:
                  start_date: '{{$randomDateRecent}}'
                  end_date: '{{$randomDateFuture}}'
                  recid: '{{record-id}}'
  /api/audit-logs:
    get:
      summary: Search Logs (Admins only)
      description: Search and filter audit log entries based on various parameters.
      tags:
        - Audit Logs
      operationId: searchLogs
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Search query used to filter audit log entries
          example: abcd-1234
        - name: size
          in: query
          required: false
          schema:
            type: string
          description: 'Specify number of items in the results page (default: 10)'
          example: "10"
        - name: page
          in: query
          required: false
          schema:
            type: string
          description: Specify the page of results
          example: "1"
        - name: sort
          in: query
          required: false
          schema:
            type: string
          description: 'Sort search results. Built-in options are "newest", "oldest" (default: "newest")'
          example: newest
      responses:
        "200":
          description: Successful response with audit log entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogList'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
  /api/audit-logs/{logId}:
    get:
      summary: Retrieve Log Entry (Admins only)
      description: Retrieve a specific audit log entry by its unique identifier.
      tags:
        - Audit Logs
      operationId: retrieveLogEntry
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the audit log entry
      responses:
        "200":
          description: Successful response with audit log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntry'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication
  responses:
    Success:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
    BadRequest:
      description: Bad request - Invalid input parameters
    Unauthorized:
      description: Unauthorized - Authentication required
    Forbidden:
      description: Forbidden - Insufficient permissions
    NotFound:
      description: Not found - Resource does not exist
    InternalServerError:
      description: Internal server error - Unexpected server error
    Created:
      description: Resource created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Created'
    NoContent:
      description: No content - Operation completed successfully
  schemas:
    CreateADraftRecordBody:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Access'
        files:
          $ref: '#/components/schemas/Files'
        metadata:
          $ref: '#/components/schemas/Metadata'
        custom_fields:
          type: object
          additionalProperties: true
        pids:
          $ref: '#/components/schemas/PIDs'

    Version:
      type: object
      properties:
        index: 
          type: integer
          format: int32
        is_latest: 
          type: boolean
        is_latest_draft: 
          type: boolean

    PIDs:
      type: object
      uniqueItems: true
      additionalProperties:
        $ref: '#/components/schemas/PID'

    PID:
      type: object
      description: An external persistent identifier object.
      additionalProperties: false
      properties:
        identifier:
          description: An identifier.
          type": string
        provider:
          description: The provider of the persistent identifier.
          type: string
        client:
          description: Client identifier for the specific PID.
          type: string

    Created:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Access'
        created:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        files:
          $ref: '#/components/schemas/Files'
        id:
          type: string
        is_published:
          type: boolean
        links:
          type: object
          additionalProperties:
            type: string
            format: uri
        metadata:
          type: object
          additionalProperties: true
        parent:
          type: object
          additionalProperties: true
        pids:
          $ref: '#/components/schemas/PIDs'
        revision_id:
          type: integer
          format: int32
        updated:
          type: string
          format: date-time
        versions:
          $ref: '#/components/schemas/Version'

    FileTransfer:
      type: object
      properties:
        type:
          description: The actual technology that is used to store a file
          type: string
          enum:
          # Local
          - L
          # Fetch
          - F
          # Multipart
          - M
          # Remote
          - R
        url:
          description: URL to fetch the file from
          type: string
          format: uri

    FileTransferItem:
      description: A file object.
      type: object
      required:
      - key
      properties:
        key:
          description: Key (filename) of the file
          type: string
        size:
          description: Size of the file in bytes.
          type: integer
          format: int64
        checksum:
          description: Checksum of the file.
          type: string
        transfer:
          $ref: '#/components/schemas/FileTransfer'

    Embargo:
      description: |
        Only in the cases of `"record": "restricted"`` or `"files": "restricted"`` can an embargo be provided as input.
        However, once an embargo is lifted, the embargo section is kept for transparency.

        Denotes when an embargo must be lifted, at which point the record is made publicly accessible.
      type: object
      properties:
        active:
          description: Is the record under embargo or not.
          type: boolean
        until:
          description: |
            Required if `"active": "true"`.
          type: string
          format: date
        reason:
          description: Explanation for the embargo.
          type: string

    Access:
      description: |
        Denotes record-specific read (visibility) options.

        More informations can be found on InvenioRDM Official page: https://inveniordm.docs.cern.ch/reference/metadata/#access
      type: object
      required:
      - record
      - files
      properties:
        record:
          description: |
            Read access to the record.

            `public` means anyone can see the record/files, `restricted` means only the owner(s) or specific users can see the record/files.
          type: string
          enum:
          - public
          - restricted
        files:
          description: |
            Read access to the record's files.

            `public` means anyone can see the record/files, `restricted` means only the owner(s) or specific users can see the record/files.
          type: string
          enum:
          - public
          - restricted
        embargo:
          $ref: '#/components/schemas/Embargo'

    Files:
      description: |
        Files options for the record.

        More informations can be found on InvenioRDM Official page: https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/#files-options
      type: object
      properties:
        enabled:
          description: Should (and can) files be attached to this record or not.
          type: boolean
        default_preview:
          description: Filename of file to be previewed by default.
          type: string
        order:
          description: Array of filename strings in display order.
          type: array
          items:
            type: string

    ResourceType:
      description: The type of the resource described by the record.
      type: object
      required:
      - id
      properties:
        id:
          description: The resource type id from the controlled vocabulary.
          type: string
          enum:
          - publication
          - publication-annotationcollection
          - publication-book
          - publication-section
          - publication-conferencepaper
          - publication-conferenceproceeding
          - publication-datamanagementplan
          - publication-journal
          - publication-article
          - publication-patent
          - publication-peerreview
          - publication-preprint
          - publication-deliverable
          - publication-milestone
          - publication-proposal
          - publication-report
          - publication-softwaredocumentation
          - publication-taxonomictreatment
          - publication-technicalnote
          - publication-thesis
          - publication-workingpaper
          - publication-datapaper
          - publication-dissertation
          - publication-standard
          - publication-other
          - poster
          - presentation
          - event
          - dataset
          - image
          - image-figure
          - image-plot
          - image-drawing
          - image-diagram
          - image-photo
          - image-other
          - model
          - video
          - audio
          - software
          - lesson
          - software-computationalnotebook
          - other
          - physicalobject
          - workflow

    PersonOrOrgIdentifierScheme:
      description: |
        The identifier scheme.

        Note that the identifiers' schemes are passed lowercased e.g. ORCID is `orcid`.
      type: string
      enum:
      # Supported creator identifier schemes
      - orcid
      - gnd
      - isni
      - ror
      # Supported affiliation identifier schemes:
      # - ISNI
      # - ROR

    Identifier:
      description: Person or organisation identifier.
      type: object
      required:
      - scheme
      - identifier
      properties:
        scheme:
          $ref: '#/components/schemas/PersonOrOrgIdentifierScheme'
        identifier:
          description: Actual value of the identifier.
          type: string

    PersonOrOrg:
      description: The person or organization.
      type: object
      required:
      - type
      properties:
        type:
          description: The type of name.
          type: string
          enum:
          - personal
          - organizational
        given_name:
          description: Given name(s).
          type: string
        family_name:
          description: Family name.
          type: string
        name:
          description: |
            The full name of the organisation.
            
            For a person, this field is generated from `given_name` and `family_name`.
          type: string
        identifiers:
          description: Person or organisation identifiers.
          type: array
          items:
            $ref: '#/components/schemas/Identifier'

    Role:
      description: The role of the person or organisation selected from a customizable controlled vocabulary.
      type: object
      required:
      - id
      properties:
        id:
          description: The role's controlled vocabulary identifier.
          type: string
          enum:
          - contactperson
          - datacollector
          - datacurator
          - datamanager
          - distributor
          - editor
          - hostinginstitution
          - producer
          - projectleader
          - projectmanager
          - projectmember
          - registrationagency
          - registrationauthority
          - relatedperson
          - researcher
          - researchgroup
          - rightsholder
          - sponsor
          - supervisor
          - workpackageleader
          - other

    Affiliation:
      description: |
        Affilations if `person_or_org.type` is `personal`.
      type: object
      properties:
        id:
          description: The organizational or institutional id from the controlled vocabulary.
          type: string
        name:
          description: The name of the organisation or institution.
          type: string

    Creator:
      type: object
      required:
      - person_or_org
      properties:
        person_or_org:
          $ref: '#/components/schemas/PersonOrOrg'
        role:
          $ref: '#/components/schemas/Role'
        affiliations:
          description: |
            Affilations if `person_or_org.type` is personal.
          type: array
          items:
            $ref: '#/components/schemas/Affiliation'

    AdditionalTitleType:
      description: The type of the title.
      type: object
      required:
      - id
      - title
      properties:
        id:
          description: Title type id from the controlled vocabulary.
          type: string
          enum:
          - alternative-title
          - subtitle
          - translated-title
          - other
        title:
          description: The corresponding localized human readable label
          type: object
          additionalProperties: true

    Lang:
      description: The language of the associated item.
      type: object
      required:
      - id
      properties:
        id:
          description: The ISO-639-3 language code.
          type: string

    AdditionalTitle:
      description: Additional name or title by which a resource is known.
      type: object
      required:
      - title
      - type
      properties:
        title:
          description: The additional title.
          type: string
        type:
          $ref: '#/components/schemas/AdditionalTitleType'
        lang:
          $ref: '#/components/schemas/Lang'

    AdditionalDescriptionType:
      description: The type of the description.
      type: object
      required:
      - id
      - title
      properties:
        id:
          description: Description type id from the controlled vocabulary
          type: string
          enum:
          - abstract
          - methods
          - series-information
          - table-of-contents
          - technical-info
          - other
        title:
          description: The corresponding localized human readable label.
          type: object
          additionalProperties: true

    AdditionalDescription:
      description: Additional description in addition to the primary description (e.g. abstracts in other languages), methods or further notes.
      type: object
      required:
      - description
      - type
      properties:
        description:
          description: Free text.
          type: string
        type:
          $ref: '#/components/schemas/AdditionalDescriptionType'
        lang:
          $ref: '#/components/schemas/Lang'

    Right:
      description: Right management statement for the resource.
      type: object
      properties:
        id:
          description: Identifier value.
          type: string
        title:
          description: Localized human readable title.
          type: object
          additionalProperties: true
        description:
          description: Localized license description text
          type: object
          additionalProperties: true
        links:
          description: Link to full license.
          type: string
          format: uri

    Subject:
      description: Subject, keyword, classification code, or key phrase describing the resource.
      type: object
      properties:
        id:
          description: The identifier of the subject from the controlled vocabulary.
          type: string
        subject:
          description: A custom keyword.
          type: string

    DateType:
      description: The type of date.
      type: object
      required:
      - id
      - title
      properties:
        id:
          description: Date type id from the controlled vocabulary
          type: string
          enum:
          - accepted
          - available
          - collected
          - copyrighted
          - created
          - issued
          - other
          - submitted
          - updated
          - valid
          - withdrawn
        title:
          description: The corresponding localized human readable label
          type: object
          additionalProperties: true

    Date:
      description: Date relevant to the resource.
      type: object
      required:
      - date
      - type
      properties:
        date:
          description: A date or time interval according to Extended Date Time Format Level 0.
          type: string
          format: date
        type:
          $ref: '#/components/schemas/DateType'
        description:
          type: string

    IdentifierScheme:
      description: The scheme of the identifier
      type: string
      enum:
      - ark
      - arxiv
      - ads
      - crossreffunderid
      - doi
      - ean13
      - eissn
      - grid
      - handle
      - igsn
      - isbn
      - isni
      - issn
      - istc
      - lissn
      - lsid
      - pmid
      - purl
      - upc
      - url
      - urn
      - w3id
      - other

    AlternateIdentifier:
      description: Persistent identifier for the resource other than the ones registered as system-managed internal or external persistent identifiers.
      type: object
      required:
      - identifier
      - scheme
      properties:
        identifier:
          description: identifier value
          type: string
        scheme:
          $ref: '#/components/schemas/IdentifierScheme'

    RelationType:
      description: The relation of the record to this related resource.
      type: object
      required:
      - id
      - title
      properties:
        id:
          description: Relation type id from the controlled vocabulary
          type: string
          enum:
          - iscitedby
          - cites
          - issupplementto
          - issupplementedby
          - iscontinuedby
          - continues
          - isdescribedby
          - describes
          - hasmetadata
          - ismetadatafor
          - hasversion
          - isversionof
          - isnewversionof
          - ispreviousversionof
          - ispartof
          - haspart
          - ispublishedin
          - isreferencedby
          - references
          - isdocumentedby
          - documents
          - iscompiledby
          - compiles
          - isvariantformof
          - isoriginalformof
          - isidenticalto
          - isreviewedby
          - reviews
          - isderivedfrom
          - issourceof
          - isrequiredby
          - requires
          - isobsoletedby
          - obsoletes
        title:
          description: The corresponding localized human readable label
          type: object
          additionalProperties: true

    RelatedIdentifierResourceType:
      description: The resource type of the related resource
      type: object
      required:
      - id
      - title
      properties:
        id:
          description: Date type id from the controlled vocabulary.
          type: string
          enum:
          - publication
          - publication-annotationcollection
          - publication-book
          - publication-section
          - publication-conferencepaper
          - publication-conferenceproceeding
          - publication-datamanagementplan
          - publication-journal
          - publication-article
          - publication-patent
          - publication-peerreview
          - publication-preprint
          - publication-deliverable
          - publication-milestone
          - publication-proposal
          - publication-report
          - publication-softwaredocumentation
          - publication-taxonomictreatment
          - publication-technicalnote
          - publication-thesis
          - publication-workingpaper
          - publication-datapaper
          - publication-dissertation
          - publication-standard
          - publication-other
          - poster
          - presentation
          - event
          - dataset
          - image
          - image-figure
          - image-plot
          - image-drawing
          - image-diagram
          - image-photo
          - image-other
          - model
          - video
          - audio
          - software
          - lesson
          - software-computationalnotebook
          - other
          - physicalobject
          - workflow
        title:
          description: The corresponding localized human readable label
          type: object
          additionalProperties: true

    RelatedIdentifier:
      description: Identifier of related resources.
      type: object
      required:
      - identifier
      - scheme
      - relation_type
      properties:
        identifier:
          description: A global unique persistent identifier for a related resource.
          type: string
        scheme:
          $ref: '#/components/schemas/IdentifierScheme'
        relation_type:
          $ref: '#/components/schemas/RelationType'
        resource_type:
          $ref: '#/components/schemas/RelatedIdentifierResourceType'

    FeatureIdentifier:
      description: A geographic location identifier.
      type: object
      required:
      - id
      properties:
        id:
          description: A globally unique identifier for the location.
          type: string
        scheme:
          description: The scheme of the identifier.
          type: string

    Feature:
      description: A GeoJSON feature object.
      type: object
      properties:
        geometry:
          description: A GeoJSON Geometry Object according to RFC 7946
          $ref: 'https://geojson.org/schema/Geometry.json'
        identifiers:
          description: A list of geographic location identifiers.
          type: array
          items:
            $ref: '#/components/schemas/FeatureIdentifier'
        place:
          description: Free text, used to describe a geographical location.
          type: string
        description:
          description: Free text, used for any extra information related to the location.
          type: string

    Location:
      description: Spatial region or named place where the data was gathered or about which the data is focused.
      type: object
      required:
      - features
      properties:
        features:
          description: A list of GeoJSON feature objects.
          type: array
          items:
            $ref: '#/components/schemas/Feature'

    Funder:
      description: The organisation of the funding provider.
      type: object
      properties:
        id:
          description: The funder id from the controlled vocabulary.
          type: string
        name:
          description: The name of the funder.
          type: string

    AwardIdentifier:
      description: Identifier for the award.
      type: object
      required:
      - scheme
      - identifier
      properties:
        scheme:
          description: The identifier scheme.
          type: string
        identifier:
          description: Actual value of the identifier.
          type: string

    Award:
      description: The award (grant) sponsored by the funder.
      type: object
      properties:
        id:
          description: The award id from the controlled vocabulary.
          type: string
        title:
          description: The localized title of the award.
          type: object
          additionalProperties: true
        number:
          description: The code assigned by the funder to a sponsored award (grant).       
          type: string
        identifiers:
          description: Identifiers for the award.
          type: array
          items:
            $ref: '#/components/schemas/AwardIdentifier' 

    Funding:
      description: Information about financial support (funding) for the resource being registered.
      type: object
      required:
      - funder
      properties:
        funder:
          $ref: '#/components/schemas/Funder'
        award:
          $ref: '#/components/schemas/Award'

    Reference:
      description: Reference string.
      type: object
      required:
      - reference
      properties:
        reference:
          description: The full reference string.
          type: string
        scheme:
          $ref: '#/components/schemas/IdentifierScheme'
        identifier:
          description: The identifier if known.     
          type: string

    Metadata:
      description: |
        Metadata schema of bibliographic records in InvenioRDM.

        More informations can be found on InvenioRDM Official page: https://inveniordm.docs.cern.ch/reference/metadata/#metadata
      type: object
      required:
      - resource_type
      - title
      - publication_date
      - creators
      - publisher
      properties:
        resource_type:
          $ref: '#/components/schemas/ResourceType'
        title:
          description: A primary name or primary title by which a resource is known.
          type: string
        publication_date:
          description: The date when the resource was or will be made publicly available.
          type: string
          format: date
        creators:
          description: The creators field registers those persons or organisations that should be credited for the resource described by the record.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Creator'
        additional_titles:
          description: Additional names or titles by which a resource is known
          type: array
          items:
            $ref: '#/components/schemas/AdditionalTitle'
        description:
          description: The description of a record.
          type: string
        additional_descriptions:
          description: Additional descriptions in addition to the primary description (e.g. abstracts in other languages), methods or further notes.
          type: array
          items:
            $ref: '#/components/schemas/AdditionalDescription'
        rights:
          description: Rights management statement for the resource.
          type: array
          items:
            $ref: '#/components/schemas/Right'
        copyright:
          description: The copyright field allows authors or depositors to specify a copyright statement for the record.
          type: string
        contributors:
          description: The organisations or persons responsible for collecting, managing, distributing, or otherwise contributing to the development of the resource.
          items:
            $ref: '#/components/schemas/Creator'
        subjects:
          description: Subject, keyword, classification code, or key phrase describing the resource.
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        languages:
          description: The languages of the resource.
          type: array
          items:
            $ref: '#/components/schemas/Lang'
        dates:
          description: Different dates relevant to the resource.
          type: array
          items:
            $ref: '#/components/schemas/Date'
        version:
          description: The version number of the resource.
          type: string
        publisher:
          description: The name of the entity that holds, archives, publishes, prints, distributes, releases, issues, or produces the resource.
          type: string
        identifiers:
          description: Persistent identifiers for the resource other than the ones registered as system-managed internal or external persistent identifiers.
          type: array
          items:
            $ref: '#/components/schemas/AlternateIdentifier'
        related_identifiers:
          description: Identifiers of related resources.
          type: array
          items:
            $ref: '#/components/schemas/RelatedIdentifier'
        sizes:
          description: Size (e.g. bytes, pages, inches, etc.) or duration (extent), e.g. hours, minutes, days, etc., of a resource.
          type: array
          items:
            type: string
        formats:
          description: Technical format of the resource.
          type: array
          items:
            type: string
        locations:
          description: Spatial region or named place where the data was gathered or about which the data is focused.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        funding:
          description: Information about financial support (funding) for the resource being registered.
          type: array
          items:
            $ref: '#/components/schemas/Funding'
        references:
          description: A list of reference strings.
          type: array
          items:
            $ref: '#/components/schemas/Reference'

    CustomFields:
      description: |
        Custom fields metadata for the record. (v10 and newer).

        More informations can be found on InvenioRDM Official page: https://inveniordm.docs.cern.ch/operate/customize/metadata/custom_fields/records/#declaring-custom-fields
      type: object
      additionalProperties: true

    UpdateDraftRecord:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Access'
        files:
          $ref: '#/components/schemas/Files'
        metadata:
          $ref: '#/components/schemas/Metadata'
        custom_fields:
          $ref: '#/components/schemas/CustomFields'

    AuditLogList:
      type: object
      properties:
        hits:
          type: object
          properties:
            total:
              type: integer
              description: Total number of log entries
            hits:
              type: array
              items:
                $ref: '#/components/schemas/AuditLogEntry'
        aggregations:
          type: object
          description: Aggregation results (if any)

    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the log entry
          example: 9913abd2-1a7c-42cb-a73e-e48a9e1bf4f2
        created:
          type: string
          format: date-time
          description: Timestamp when the log entry was created
          example: "2025-06-20T08:05:27.730677+00:00"
        action:
          type: string
          description: Action performed
          example: record.publish
        resource:
          type: object
          description: Resource affected by the action
          properties:
            type:
              type: string
              description: Type of the resource
              example: record
            id:
              type: string
              description: ID of the resource
              example: 5anb0-85626
        metadata:
          type: object
          description: Additional metadata about the log entry
          properties:
            ip_address:
              type: string
              description: IP address from which the action was performed
            session:
              type: string
              description: Session identifier
            parent_pid:
              type: string
              description: Parent persistent identifier
              example: 1av3p-t2p41
            revision_id:
              type: integer
              description: Revision ID of the resource
              example: 110
        user:
          type: object
          description: User who performed the action
          properties:
            id:
              type: string
              description: User ID
              example: "2"
            username:
              type: string
              description: Username
              example: user
            email:
              type: string
              description: User email address
              example: user@demo.org
        links:
          type: object
          description: Links related to the log entry
          properties:
            self:
              type: string
              description: Self link to the log entry
              example: https://example.com/api/audit-logs/9913abd2-1a7c-42cb-a73e-e48a9e1bf4f2
      description: Conflict - Resource already exists or operation conflicts
security:
  - BearerAuth: []
tags:
  - name: Access
    description: Access control and sharing
  - name: Request Actions
    description: Request actions and lifecycle management
  - name: Avatars
    description: User and group avatars
  - name: Comments
    description: Request comments and discussions
  - name: Communities
    description: Community management endpoints
  - name: Featured Communities
    description: Featured communities management
  - name: Drafts
    description: Draft record management
  - name: Drafts Files upload
    description: Draft record management
  - name: Export
    description: Record export functionality
  - name: Records Files
    description: File management operations
  - name: Groups
    description: Group management endpoints
  - name: Communities Invitations
    description: Communities invitations
  - name: Communities logo
    description: Communities logo management
  - name: Communities Members
    description: Communities membership management
  - name: OAI-PMH
    description: OAI-PMH protocol endpoints
  - name: Records
    description: Record and draft management endpoints
  - name: Requests
    description: Request management endpoints
  - name: Statistics
    description: Statistics and analytics endpoints
  - name: Timeline
    description: Request timeline and history
  - name: Users
    description: User management endpoints
  - name: Records Versions
    description: Record Version management
  - name: Vocabularies
    description: Vocabulary and controlled terms endpoints
  - name: Audit Logs
    description: Audit log entries and search
