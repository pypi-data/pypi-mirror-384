# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.tool_v1alpha1_spec_agent import ToolV1alpha1SpecAgent
from ark_sdk.models.tool_v1alpha1_spec_annotations import ToolV1alpha1SpecAnnotations
from ark_sdk.models.tool_v1alpha1_spec_builtin import ToolV1alpha1SpecBuiltin
from ark_sdk.models.tool_v1alpha1_spec_http import ToolV1alpha1SpecHttp
from ark_sdk.models.tool_v1alpha1_spec_mcp import ToolV1alpha1SpecMcp
from typing import Optional, Set
from typing_extensions import Self

class ToolV1alpha1Spec(BaseModel):
    """
    ToolV1alpha1Spec
    """ # noqa: E501
    builtin: Optional[ToolV1alpha1SpecBuiltin] = None
    agent: Optional[ToolV1alpha1SpecAgent] = None
    annotations: Optional[ToolV1alpha1SpecAnnotations] = None
    description: Optional[StrictStr] = Field(default=None, description="Tool description")
    http: Optional[ToolV1alpha1SpecHttp] = None
    input_schema: Optional[Dict[str, Any]] = Field(default=None, description="Input schema for the tool", alias="inputSchema")
    mcp: Optional[ToolV1alpha1SpecMcp] = None
    type: StrictStr
    __properties: ClassVar[List[str]] = ["builtin", "agent", "annotations", "description", "http", "inputSchema", "mcp", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http', 'mcp', 'agent', 'builtin']):
            raise ValueError("must be one of enum values ('http', 'mcp', 'agent', 'builtin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolV1alpha1Spec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of builtin
        if self.builtin:
            _dict['builtin'] = self.builtin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agent
        if self.agent:
            _dict['agent'] = self.agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotations
        if self.annotations:
            _dict['annotations'] = self.annotations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http:
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mcp
        if self.mcp:
            _dict['mcp'] = self.mcp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolV1alpha1Spec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "builtin": ToolV1alpha1SpecBuiltin.from_dict(obj["builtin"]) if obj.get("builtin") is not None else None,
            "agent": ToolV1alpha1SpecAgent.from_dict(obj["agent"]) if obj.get("agent") is not None else None,
            "annotations": ToolV1alpha1SpecAnnotations.from_dict(obj["annotations"]) if obj.get("annotations") is not None else None,
            "description": obj.get("description"),
            "http": ToolV1alpha1SpecHttp.from_dict(obj["http"]) if obj.get("http") is not None else None,
            "inputSchema": obj.get("inputSchema"),
            "mcp": ToolV1alpha1SpecMcp.from_dict(obj["mcp"]) if obj.get("mcp") is not None else None,
            "type": obj.get("type")
        })
        return _obj


