# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ark_sdk.models.mcp_server_v1alpha1_spec_address import MCPServerV1alpha1SpecAddress
from typing import Optional, Set
from typing_extensions import Self

class ModelV1alpha1SpecConfigBedrock(BaseModel):
    """
    BedrockModelConfig contains AWS Bedrock specific parameters
    """ # noqa: E501
    access_key_id: Optional[MCPServerV1alpha1SpecAddress] = Field(default=None, alias="accessKeyId")
    base_url: Optional[MCPServerV1alpha1SpecAddress] = Field(default=None, alias="baseUrl")
    max_tokens: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = Field(default=None, alias="maxTokens")
    model_arn: Optional[MCPServerV1alpha1SpecAddress] = Field(default=None, alias="modelArn")
    properties: Optional[Dict[str, Any]] = None
    region: Optional[MCPServerV1alpha1SpecAddress] = None
    secret_access_key: Optional[MCPServerV1alpha1SpecAddress] = Field(default=None, alias="secretAccessKey")
    session_token: Optional[MCPServerV1alpha1SpecAddress] = Field(default=None, alias="sessionToken")
    temperature: Optional[Annotated[str, Field(strict=True)]] = None
    __properties: ClassVar[List[str]] = ["accessKeyId", "baseUrl", "maxTokens", "modelArn", "properties", "region", "secretAccessKey", "sessionToken", "temperature"]

    @field_validator('temperature')
    def temperature_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0(\.\d+)?|1(\.0+)?)$", value):
            raise ValueError(r"must validate the regular expression /^(0(\.\d+)?|1(\.0+)?)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelV1alpha1SpecConfigBedrock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_key_id
        if self.access_key_id:
            _dict['accessKeyId'] = self.access_key_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_url
        if self.base_url:
            _dict['baseUrl'] = self.base_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_arn
        if self.model_arn:
            _dict['modelArn'] = self.model_arn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_access_key
        if self.secret_access_key:
            _dict['secretAccessKey'] = self.secret_access_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_token
        if self.session_token:
            _dict['sessionToken'] = self.session_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelV1alpha1SpecConfigBedrock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessKeyId": MCPServerV1alpha1SpecAddress.from_dict(obj["accessKeyId"]) if obj.get("accessKeyId") is not None else None,
            "baseUrl": MCPServerV1alpha1SpecAddress.from_dict(obj["baseUrl"]) if obj.get("baseUrl") is not None else None,
            "maxTokens": obj.get("maxTokens"),
            "modelArn": MCPServerV1alpha1SpecAddress.from_dict(obj["modelArn"]) if obj.get("modelArn") is not None else None,
            "properties": obj.get("properties"),
            "region": MCPServerV1alpha1SpecAddress.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "secretAccessKey": MCPServerV1alpha1SpecAddress.from_dict(obj["secretAccessKey"]) if obj.get("secretAccessKey") is not None else None,
            "sessionToken": MCPServerV1alpha1SpecAddress.from_dict(obj["sessionToken"]) if obj.get("sessionToken") is not None else None,
            "temperature": obj.get("temperature")
        })
        return _obj


