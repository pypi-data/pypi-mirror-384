# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ToolV1alpha1SpecAnnotations(BaseModel):
    """
    Optional additional tool information
    """ # noqa: E501
    destructive_hint: Optional[StrictBool] = Field(default=None, description="If true, the tool may perform destructive updates to its environment. If false, the tool performs only additive updates.  (This property is meaningful only when `readOnlyHint == false`)  Default: true", alias="destructiveHint")
    idempotent_hint: Optional[StrictBool] = Field(default=None, description="If true, calling the tool repeatedly with the same arguments will have no additional effect on the its environment.  (This property is meaningful only when `readOnlyHint == false`)  Default: false", alias="idempotentHint")
    open_world_hint: Optional[StrictBool] = Field(default=None, description="If true, this tool may interact with an \"open world\" of external entities. If false, the tool's domain of interaction is closed.  Default: true", alias="openWorldHint")
    read_only_hint: Optional[StrictBool] = Field(default=None, description="If true, the tool does not modify its environment.  Default: false", alias="readOnlyHint")
    title: Optional[StrictStr] = Field(default=None, description="A human-readable title for the tool.")
    __properties: ClassVar[List[str]] = ["destructiveHint", "idempotentHint", "openWorldHint", "readOnlyHint", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolV1alpha1SpecAnnotations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolV1alpha1SpecAnnotations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destructiveHint": obj.get("destructiveHint"),
            "idempotentHint": obj.get("idempotentHint"),
            "openWorldHint": obj.get("openWorldHint"),
            "readOnlyHint": obj.get("readOnlyHint"),
            "title": obj.get("title")
        })
        return _obj


