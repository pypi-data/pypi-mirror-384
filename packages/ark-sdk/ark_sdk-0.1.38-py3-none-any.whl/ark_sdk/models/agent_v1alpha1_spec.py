# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.agent_v1alpha1_spec_execution_engine import AgentV1alpha1SpecExecutionEngine
from ark_sdk.models.agent_v1alpha1_spec_model_ref import AgentV1alpha1SpecModelRef
from ark_sdk.models.agent_v1alpha1_spec_parameters_inner import AgentV1alpha1SpecParametersInner
from ark_sdk.models.agent_v1alpha1_spec_tools_inner import AgentV1alpha1SpecToolsInner
from typing import Optional, Set
from typing_extensions import Self

class AgentV1alpha1Spec(BaseModel):
    """
    AgentV1alpha1Spec
    """ # noqa: E501
    description: Optional[StrictStr] = None
    execution_engine: Optional[AgentV1alpha1SpecExecutionEngine] = Field(default=None, alias="executionEngine")
    model_ref: Optional[AgentV1alpha1SpecModelRef] = Field(default=None, alias="modelRef")
    output_schema: Optional[Dict[str, Any]] = Field(default=None, description="JSON schema for structured output format", alias="outputSchema")
    parameters: Optional[List[AgentV1alpha1SpecParametersInner]] = Field(default=None, description="Parameters for template processing in the prompt field")
    prompt: Optional[StrictStr] = None
    tools: Optional[List[AgentV1alpha1SpecToolsInner]] = None
    __properties: ClassVar[List[str]] = ["description", "executionEngine", "modelRef", "outputSchema", "parameters", "prompt", "tools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentV1alpha1Spec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_engine
        if self.execution_engine:
            _dict['executionEngine'] = self.execution_engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_ref
        if self.model_ref:
            _dict['modelRef'] = self.model_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentV1alpha1Spec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "executionEngine": AgentV1alpha1SpecExecutionEngine.from_dict(obj["executionEngine"]) if obj.get("executionEngine") is not None else None,
            "modelRef": AgentV1alpha1SpecModelRef.from_dict(obj["modelRef"]) if obj.get("modelRef") is not None else None,
            "outputSchema": obj.get("outputSchema"),
            "parameters": [AgentV1alpha1SpecParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "prompt": obj.get("prompt"),
            "tools": [AgentV1alpha1SpecToolsInner.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None
        })
        return _obj


