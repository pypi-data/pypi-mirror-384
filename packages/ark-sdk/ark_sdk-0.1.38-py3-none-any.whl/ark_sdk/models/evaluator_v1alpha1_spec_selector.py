# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.evaluation_v1alpha1_spec_config_query_selector_match_expressions_inner import EvaluationV1alpha1SpecConfigQuerySelectorMatchExpressionsInner
from ark_sdk.models.evaluator_v1alpha1_spec_selector_namespace_selector import EvaluatorV1alpha1SpecSelectorNamespaceSelector
from typing import Optional, Set
from typing_extensions import Self

class EvaluatorV1alpha1SpecSelector(BaseModel):
    """
    Selector configuration for automatic query evaluation
    """ # noqa: E501
    api_group: Optional[StrictStr] = Field(default='ark.mckinsey.com', description="APIGroup specifies the API group (e.g., \"ark.mckinsey.com\")", alias="apiGroup")
    match_expressions: Optional[List[EvaluationV1alpha1SpecConfigQuerySelectorMatchExpressionsInner]] = Field(default=None, description="matchExpressions is a list of label selector requirements. The requirements are ANDed.", alias="matchExpressions")
    match_labels: Optional[Dict[str, Any]] = Field(default=None, description="matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.", alias="matchLabels")
    namespace_selector: Optional[EvaluatorV1alpha1SpecSelectorNamespaceSelector] = Field(default=None, alias="namespaceSelector")
    namespaces: Optional[List[StrictStr]] = Field(default=None, description="Namespaces to include (empty means all namespaces)")
    resource_type: StrictStr = Field(description="ResourceType specifies the type of resource to select", alias="resourceType")
    __properties: ClassVar[List[str]] = ["apiGroup", "matchExpressions", "matchLabels", "namespaceSelector", "namespaces", "resourceType"]

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Query']):
            raise ValueError("must be one of enum values ('Query')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluatorV1alpha1SpecSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in match_expressions (list)
        _items = []
        if self.match_expressions:
            for _item_match_expressions in self.match_expressions:
                if _item_match_expressions:
                    _items.append(_item_match_expressions.to_dict())
            _dict['matchExpressions'] = _items
        # override the default output from pydantic by calling `to_dict()` of namespace_selector
        if self.namespace_selector:
            _dict['namespaceSelector'] = self.namespace_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluatorV1alpha1SpecSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiGroup": obj.get("apiGroup") if obj.get("apiGroup") is not None else 'ark.mckinsey.com',
            "matchExpressions": [EvaluationV1alpha1SpecConfigQuerySelectorMatchExpressionsInner.from_dict(_item) for _item in obj["matchExpressions"]] if obj.get("matchExpressions") is not None else None,
            "matchLabels": obj.get("matchLabels"),
            "namespaceSelector": EvaluatorV1alpha1SpecSelectorNamespaceSelector.from_dict(obj["namespaceSelector"]) if obj.get("namespaceSelector") is not None else None,
            "namespaces": obj.get("namespaces"),
            "resourceType": obj.get("resourceType")
        })
        return _obj


