# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ark_sdk.models.a2_a_server_v1prealpha1_spec_headers_inner import A2AServerV1prealpha1SpecHeadersInner
from ark_sdk.models.agent_v1alpha1_spec_parameters_inner import AgentV1alpha1SpecParametersInner
from typing import Optional, Set
from typing_extensions import Self

class ToolV1alpha1SpecHttp(BaseModel):
    """
    HTTP-specific configuration for HTTP-based tools
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="Body template for POST/PUT/PATCH requests with golang template syntax")
    body_parameters: Optional[List[AgentV1alpha1SpecParametersInner]] = Field(default=None, description="Parameters for body template processing", alias="bodyParameters")
    headers: Optional[List[A2AServerV1prealpha1SpecHeadersInner]] = None
    method: Optional[StrictStr] = 'GET'
    timeout: Optional[Annotated[str, Field(strict=True)]] = None
    url: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = ["body", "bodyParameters", "headers", "method", "timeout", "url"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']):
            raise ValueError("must be one of enum values ('GET', 'POST', 'PUT', 'DELETE', 'PATCH')")
        return value

    @field_validator('timeout')
    def timeout_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+[smh]?$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+[smh]?$/")
        return value

    @field_validator('url')
    def url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^https?:\/\/.*", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/.*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolV1alpha1SpecHttp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in body_parameters (list)
        _items = []
        if self.body_parameters:
            for _item_body_parameters in self.body_parameters:
                if _item_body_parameters:
                    _items.append(_item_body_parameters.to_dict())
            _dict['bodyParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolV1alpha1SpecHttp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "bodyParameters": [AgentV1alpha1SpecParametersInner.from_dict(_item) for _item in obj["bodyParameters"]] if obj.get("bodyParameters") is not None else None,
            "headers": [A2AServerV1prealpha1SpecHeadersInner.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "method": obj.get("method") if obj.get("method") is not None else 'GET',
            "timeout": obj.get("timeout"),
            "url": obj.get("url")
        })
        return _obj


