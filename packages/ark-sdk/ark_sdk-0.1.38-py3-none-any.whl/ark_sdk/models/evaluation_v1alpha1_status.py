# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ark_sdk.models.evaluation_v1alpha1_status_batch_progress import EvaluationV1alpha1StatusBatchProgress
from ark_sdk.models.evaluation_v1alpha1_status_token_usage import EvaluationV1alpha1StatusTokenUsage
from typing import Optional, Set
from typing_extensions import Self

class EvaluationV1alpha1Status(BaseModel):
    """
    EvaluationStatus defines the observed state of Evaluation
    """ # noqa: E501
    batch_progress: Optional[EvaluationV1alpha1StatusBatchProgress] = Field(default=None, alias="batchProgress")
    duration: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    passed: Optional[StrictBool] = None
    phase: Optional[StrictStr] = None
    score: Optional[Annotated[str, Field(strict=True)]] = None
    token_usage: Optional[EvaluationV1alpha1StatusTokenUsage] = Field(default=None, alias="tokenUsage")
    __properties: ClassVar[List[str]] = ["batchProgress", "duration", "message", "passed", "phase", "score", "tokenUsage"]

    @field_validator('phase')
    def phase_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'running', 'error', 'done', 'canceled']):
            raise ValueError("must be one of enum values ('pending', 'running', 'error', 'done', 'canceled')")
        return value

    @field_validator('score')
    def score_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0(\.[0-9]+)?|1(\.0+)?)$", value):
            raise ValueError(r"must validate the regular expression /^(0(\.[0-9]+)?|1(\.0+)?)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of batch_progress
        if self.batch_progress:
            _dict['batchProgress'] = self.batch_progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_usage
        if self.token_usage:
            _dict['tokenUsage'] = self.token_usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchProgress": EvaluationV1alpha1StatusBatchProgress.from_dict(obj["batchProgress"]) if obj.get("batchProgress") is not None else None,
            "duration": obj.get("duration"),
            "message": obj.get("message"),
            "passed": obj.get("passed"),
            "phase": obj.get("phase"),
            "score": obj.get("score"),
            "tokenUsage": EvaluationV1alpha1StatusTokenUsage.from_dict(obj["tokenUsage"]) if obj.get("tokenUsage") is not None else None
        })
        return _obj


