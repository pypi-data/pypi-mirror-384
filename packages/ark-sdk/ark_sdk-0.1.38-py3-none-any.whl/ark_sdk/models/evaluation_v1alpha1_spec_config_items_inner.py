# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.evaluation_v1alpha1_spec_config_items_inner_evaluator import EvaluationV1alpha1SpecConfigItemsInnerEvaluator
from typing import Optional, Set
from typing_extensions import Self

class EvaluationV1alpha1SpecConfigItemsInner(BaseModel):
    """
    BatchEvaluationItem defines individual evaluation to create in batch mode
    """ # noqa: E501
    config: Dict[str, Any] = Field(description="Configuration for this specific evaluation")
    evaluator: EvaluationV1alpha1SpecConfigItemsInnerEvaluator
    name: Optional[StrictStr] = Field(default=None, description="Name for the child evaluation (auto-generated if empty)")
    timeout: Optional[StrictStr] = Field(default=None, description="Timeout override for this evaluation")
    ttl: Optional[StrictStr] = Field(default=None, description="TTL override for this evaluation")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["config", "evaluator", "name", "timeout", "ttl", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['direct', 'query', 'baseline', 'event']):
            raise ValueError("must be one of enum values ('direct', 'query', 'baseline', 'event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1SpecConfigItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of evaluator
        if self.evaluator:
            _dict['evaluator'] = self.evaluator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1SpecConfigItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": obj.get("config"),
            "evaluator": EvaluationV1alpha1SpecConfigItemsInnerEvaluator.from_dict(obj["evaluator"]) if obj.get("evaluator") is not None else None,
            "name": obj.get("name"),
            "timeout": obj.get("timeout"),
            "ttl": obj.get("ttl"),
            "type": obj.get("type")
        })
        return _obj


