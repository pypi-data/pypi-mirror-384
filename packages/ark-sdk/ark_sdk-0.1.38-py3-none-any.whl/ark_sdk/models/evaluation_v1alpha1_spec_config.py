# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.evaluation_v1alpha1_spec_config_evaluations_inner import EvaluationV1alpha1SpecConfigEvaluationsInner
from ark_sdk.models.evaluation_v1alpha1_spec_config_items_inner import EvaluationV1alpha1SpecConfigItemsInner
from ark_sdk.models.evaluation_v1alpha1_spec_config_query_ref import EvaluationV1alpha1SpecConfigQueryRef
from ark_sdk.models.evaluation_v1alpha1_spec_config_query_selector import EvaluationV1alpha1SpecConfigQuerySelector
from ark_sdk.models.evaluation_v1alpha1_spec_config_rules_inner import EvaluationV1alpha1SpecConfigRulesInner
from ark_sdk.models.evaluation_v1alpha1_spec_config_template import EvaluationV1alpha1SpecConfigTemplate
from typing import Optional, Set
from typing_extensions import Self

class EvaluationV1alpha1SpecConfig(BaseModel):
    """
    EvaluationConfig holds type-specific configuration parameters
    """ # noqa: E501
    concurrency: Optional[StrictInt] = Field(default=10, description="Maximum number of concurrent child evaluations")
    continue_on_failure: Optional[StrictBool] = Field(default=False, description="Whether to continue on child evaluation failures", alias="continueOnFailure")
    evaluations: Optional[List[EvaluationV1alpha1SpecConfigEvaluationsInner]] = Field(default=None, description="List of existing evaluations to aggregate (legacy support)")
    input: Optional[StrictStr] = None
    items: Optional[List[EvaluationV1alpha1SpecConfigItemsInner]] = Field(default=None, description="List of specific evaluations to create (explicit definitions)")
    output: Optional[StrictStr] = None
    query_ref: Optional[EvaluationV1alpha1SpecConfigQueryRef] = Field(default=None, alias="queryRef")
    query_selector: Optional[EvaluationV1alpha1SpecConfigQuerySelector] = Field(default=None, alias="querySelector")
    rules: Optional[List[EvaluationV1alpha1SpecConfigRulesInner]] = None
    template: Optional[EvaluationV1alpha1SpecConfigTemplate] = None
    __properties: ClassVar[List[str]] = ["concurrency", "continueOnFailure", "evaluations", "input", "items", "output", "queryRef", "querySelector", "rules", "template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1SpecConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in evaluations (list)
        _items = []
        if self.evaluations:
            for _item_evaluations in self.evaluations:
                if _item_evaluations:
                    _items.append(_item_evaluations.to_dict())
            _dict['evaluations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of query_ref
        if self.query_ref:
            _dict['queryRef'] = self.query_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_selector
        if self.query_selector:
            _dict['querySelector'] = self.query_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationV1alpha1SpecConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrency": obj.get("concurrency") if obj.get("concurrency") is not None else 10,
            "continueOnFailure": obj.get("continueOnFailure") if obj.get("continueOnFailure") is not None else False,
            "evaluations": [EvaluationV1alpha1SpecConfigEvaluationsInner.from_dict(_item) for _item in obj["evaluations"]] if obj.get("evaluations") is not None else None,
            "input": obj.get("input"),
            "items": [EvaluationV1alpha1SpecConfigItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "output": obj.get("output"),
            "queryRef": EvaluationV1alpha1SpecConfigQueryRef.from_dict(obj["queryRef"]) if obj.get("queryRef") is not None else None,
            "querySelector": EvaluationV1alpha1SpecConfigQuerySelector.from_dict(obj["querySelector"]) if obj.get("querySelector") is not None else None,
            "rules": [EvaluationV1alpha1SpecConfigRulesInner.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "template": EvaluationV1alpha1SpecConfigTemplate.from_dict(obj["template"]) if obj.get("template") is not None else None
        })
        return _obj


