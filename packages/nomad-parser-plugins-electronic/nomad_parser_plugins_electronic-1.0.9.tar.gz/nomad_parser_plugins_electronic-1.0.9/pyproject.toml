[build-system]
requires = ["setuptools>=61.0.0", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = 'nomad-parser-plugins-electronic'
dynamic = ["version"]
description = 'Collection of NOMAD parsers for electronic structure codes.'
readme = "README.md"
authors = [{ name = "The NOMAD Authors" }]
license = { file = "LICENSE" }
dependencies = [
    "h5py>=3.6.0",
    "lxml>=5.2",
    "nomad-lab>=1.3.17",
    "nomad-schema-plugin-simulation-workflow>=1.0.1",
    "nomad-schema-plugin-run>=1.0.1",
    "nomad-parser-plugins-simulation>=1.0.2",
    # issue with reading nc file in 1.7.3: https://github.com/Unidata/netcdf4-python/issues/1438
    "netcdf4<=1.7.2",
    "pyyaml>=6.0",
    "pydantic>=1.10.8",
    "numpy",
]

[project.urls]
homepage = "https://github.com/nomad-coe/electronic-parsers"

[project.optional-dependencies]
dev = [
    'astroid==2.11.7',
    'mypy>=1.15',
    'pytest>= 5.3.0, <8',
    'pytest-timeout>=1.4.2',
    'pytest-cov>=2.7.1',
    'ruff>=0.6',
    'typing-extensions>=4.12',
]
# these are extra deps for nomad infra as a result of using nomad.search
# TODO remove usage in magres and w2dynamics
infrastructure = ["nomad-lab[infrastructure]>=1.3.10"]

[tool.ruff]
include = ["electronicparsers/*.py", "tests/*.py"]
lint.select = [
    "E",  # pycodestyle
    "W",  # pycodestyle
    "PL", # pylint
]
lint.ignore = [
    "E501",    # Line too long ({width} > {limit} characters)
    "E701",    # Multiple statements on one line (colon)
    "E731",    # Do not assign a lambda expression, use a def
    "E402",    # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
    "PLC0415", # Import should be at top-level (conflicts with lazy imports)
]
lint.fixable = ["ALL"]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.format]
# use single quotes for strings.
quote-style = "single"

# indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.setuptools.packages.find]
include = ["electronicparsers*"]

[tool.setuptools_scm]

[tool.mypy]
strict = false
ignore_missing_imports = true
follow_imports = "silent"
no_strict_optional = true
disable_error_code = "import, annotation-unchecked"

[project.entry-points.'nomad.plugin']
abacusparser = "electronicparsers:abacus_parser_entry_point"
abinitparser = "electronicparsers:abinit_parser_entry_point"
amsparser = "electronicparsers:ams_parser_entry_point"
atkparser = "electronicparsers:atk_parser_entry_point"
bigdftparser = "electronicparsers:bigdft_parser_entry_point"
castepparser = "electronicparsers:castep_parser_entry_point"
charmmparser = "electronicparsers:charmm_parser_entry_point"
cp2kparser = "electronicparsers:cp2k_parser_entry_point"
cpmdparser = "electronicparsers:cpmd_parser_entry_point"
crystalparser = "electronicparsers:crystal_parser_entry_point"
dmol3parser = "electronicparsers:dmol3_parser_entry_point"
edmftparser = "electronicparsers:edmft_parser_entry_point"
elkparser = "electronicparsers:elk_parser_entry_point"
excitingparser = "electronicparsers:exciting_parser_entry_point"
fhiaimsparser = "electronicparsers:fhiaims_parser_entry_point"
fleurparser = "electronicparsers:fleur_parser_entry_point"
fploparser = "electronicparsers:fplo_parser_entry_point"
gamessparser = "electronicparsers:gamess_parser_entry_point"
gaussianparser = "electronicparsers:gaussian_parser_entry_point"
gpawparser = "electronicparsers:gpaw_parser_entry_point"
magresparser = "electronicparsers:magres_parser_entry_point"
molcasparser = "electronicparsers:molcas_parser_entry_point"
mopacparser = "electronicparsers:mopac_parser_entry_point"
nwchemparser = "electronicparsers:nwchem_parser_entry_point"
oceanparser = "electronicparsers:ocean_parser_entry_point"
octopusparser = "electronicparsers:octopus_parser_entry_point"
onetepparser = "electronicparsers:onetep_parser_entry_point"
openmxparser = "electronicparsers:openmx_parser_entry_point"
orcaparser = "electronicparsers:orca_parser_entry_point"
psi4parser = "electronicparsers:psi4_parser_entry_point"
qballparser = "electronicparsers:qball_parser_entry_point"
qboxparser = "electronicparsers:qbox_parser_entry_point"
quantumespressoparser = "electronicparsers:quantumespresso_parser_entry_point"
siestaparser = "electronicparsers:siesta_parser_entry_point"
soliddmftparser = "electronicparsers:soliddmft_parser_entry_point"
tbstudioparser = "electronicparsers:tbstudio_parser_entry_point"
turbomoleparser = "electronicparsers:turbomole_parser_entry_point"
vaspparser = "electronicparsers:vasp_parser_entry_point"
w2dynamicsparser = "electronicparsers:w2dynamics_parser_entry_point"
wannier90parser = "electronicparsers:wannier90_parser_entry_point"
wien2kparser = "electronicparsers:wien2k_parser_entry_point"
yamboparser = "electronicparsers:yambo_parser_entry_point"
