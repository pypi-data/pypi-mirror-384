/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_NVWSASSIGNSTAGEPHASE
#define GEN_PASS_DECL_NVWSINSERTAREF
#define GEN_PASS_DECL_NVWSINSERTTMEMAREF
#define GEN_PASS_DECL_NVWSLOWERAREF
#define GEN_PASS_DECL_NVWSLOWERWARPGROUP
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// NVWSAssignStagePhase
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVWSASSIGNSTAGEPHASE
std::unique_ptr<::mlir::Pass> createNVWSAssignStagePhase();
#undef GEN_PASS_DECL_NVWSASSIGNSTAGEPHASE
#endif // GEN_PASS_DECL_NVWSASSIGNSTAGEPHASE
#ifdef GEN_PASS_DEF_NVWSASSIGNSTAGEPHASE

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSAssignStagePhase();
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVWSAssignStagePhaseBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSAssignStagePhaseBase;

  NVWSAssignStagePhaseBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSAssignStagePhaseBase(const NVWSAssignStagePhaseBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSAssignStagePhaseBase& operator=(const NVWSAssignStagePhaseBase &) = delete;
  NVWSAssignStagePhaseBase(NVWSAssignStagePhaseBase &&) = delete;
  NVWSAssignStagePhaseBase& operator=(NVWSAssignStagePhaseBase &&) = delete;
  ~NVWSAssignStagePhaseBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-assign-stage-phase");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-assign-stage-phase"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Assign buffer stage to nvws.aref.*.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSAssignStagePhase");
  }
  ::llvm::StringRef getName() const override { return "NVWSAssignStagePhase"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSAssignStagePhaseBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createNVWSAssignStagePhase() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVWSAssignStagePhase() {
  return impl::createNVWSAssignStagePhase();
}
#undef GEN_PASS_DEF_NVWSASSIGNSTAGEPHASE
#endif // GEN_PASS_DEF_NVWSASSIGNSTAGEPHASE

//===----------------------------------------------------------------------===//
// NVWSInsertAref
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVWSINSERTAREF
std::unique_ptr<::mlir::Pass> createNVWSInsertAref();
#undef GEN_PASS_DECL_NVWSINSERTAREF
#endif // GEN_PASS_DECL_NVWSINSERTAREF
#ifdef GEN_PASS_DEF_NVWSINSERTAREF

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSInsertAref();
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVWSInsertArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSInsertArefBase;

  NVWSInsertArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSInsertArefBase(const NVWSInsertArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSInsertArefBase& operator=(const NVWSInsertArefBase &) = delete;
  NVWSInsertArefBase(NVWSInsertArefBase &&) = delete;
  NVWSInsertArefBase& operator=(NVWSInsertArefBase &&) = delete;
  ~NVWSInsertArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-insert-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-insert-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Insert arefs between producer and consumer partitions.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSInsertAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSInsertAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSInsertArefBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createNVWSInsertAref() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVWSInsertAref() {
  return impl::createNVWSInsertAref();
}
#undef GEN_PASS_DEF_NVWSINSERTAREF
#endif // GEN_PASS_DEF_NVWSINSERTAREF

//===----------------------------------------------------------------------===//
// NVWSInsertTmemAref
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVWSINSERTTMEMAREF
std::unique_ptr<::mlir::Pass> createNVWSInsertTmemAref();
#undef GEN_PASS_DECL_NVWSINSERTTMEMAREF
#endif // GEN_PASS_DECL_NVWSINSERTTMEMAREF
#ifdef GEN_PASS_DEF_NVWSINSERTTMEMAREF

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSInsertTmemAref();
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVWSInsertTmemArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSInsertTmemArefBase;

  NVWSInsertTmemArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSInsertTmemArefBase(const NVWSInsertTmemArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSInsertTmemArefBase& operator=(const NVWSInsertTmemArefBase &) = delete;
  NVWSInsertTmemArefBase(NVWSInsertTmemArefBase &&) = delete;
  NVWSInsertTmemArefBase& operator=(NVWSInsertTmemArefBase &&) = delete;
  ~NVWSInsertTmemArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-insert-tmem-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-insert-tmem-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Insert tmem arefs between producer and consumer partitions.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSInsertTmemAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSInsertTmemAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSInsertTmemArefBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createNVWSInsertTmemAref() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVWSInsertTmemAref() {
  return impl::createNVWSInsertTmemAref();
}
#undef GEN_PASS_DEF_NVWSINSERTTMEMAREF
#endif // GEN_PASS_DEF_NVWSINSERTTMEMAREF

//===----------------------------------------------------------------------===//
// NVWSLowerAref
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVWSLOWERAREF
struct NVWSLowerArefOptions {
  int32_t numStages = 3;
};
std::unique_ptr<::mlir::Pass> createNVWSLowerAref();
std::unique_ptr<::mlir::Pass> createNVWSLowerAref(NVWSLowerArefOptions options);
#undef GEN_PASS_DECL_NVWSLOWERAREF
#endif // GEN_PASS_DECL_NVWSLOWERAREF
#ifdef GEN_PASS_DEF_NVWSLOWERAREF

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSLowerAref();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSLowerAref(NVWSLowerArefOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVWSLowerArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSLowerArefBase;

  NVWSLowerArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSLowerArefBase(const NVWSLowerArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSLowerArefBase& operator=(const NVWSLowerArefBase &) = delete;
  NVWSLowerArefBase(NVWSLowerArefBase &&) = delete;
  NVWSLowerArefBase& operator=(NVWSLowerArefBase &&) = delete;
  ~NVWSLowerArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-lower-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-lower-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert nvws.aref.* to ttng.*barrier* ops.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSLowerAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSLowerAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSLowerArefBase<DerivedT>)

  NVWSLowerArefBase(NVWSLowerArefOptions options) : NVWSLowerArefBase() {
    numStages = std::move(options.numStages);
  }
protected:
  ::mlir::Pass::Option<int32_t> numStages{*this, "num-stages", ::llvm::cl::desc(R"PO(number of pipeline stages)PO"), ::llvm::cl::init(3)};
private:

  friend std::unique_ptr<::mlir::Pass> createNVWSLowerAref() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createNVWSLowerAref(NVWSLowerArefOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVWSLowerAref() {
  return impl::createNVWSLowerAref();
}

std::unique_ptr<::mlir::Pass> createNVWSLowerAref(NVWSLowerArefOptions options) {
  return impl::createNVWSLowerAref(std::move(options));
}
#undef GEN_PASS_DEF_NVWSLOWERAREF
#endif // GEN_PASS_DEF_NVWSLOWERAREF

//===----------------------------------------------------------------------===//
// NVWSLowerWarpGroup
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_NVWSLOWERWARPGROUP
std::unique_ptr<::mlir::Pass> createNVWSLowerWarpGroup();
#undef GEN_PASS_DECL_NVWSLOWERWARPGROUP
#endif // GEN_PASS_DECL_NVWSLOWERWARPGROUP
#ifdef GEN_PASS_DEF_NVWSLOWERWARPGROUP

namespace impl {
  std::unique_ptr<::mlir::Pass> createNVWSLowerWarpGroup();
} // namespace impl
namespace impl {

template <typename DerivedT>
class NVWSLowerWarpGroupBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSLowerWarpGroupBase;

  NVWSLowerWarpGroupBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSLowerWarpGroupBase(const NVWSLowerWarpGroupBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSLowerWarpGroupBase& operator=(const NVWSLowerWarpGroupBase &) = delete;
  NVWSLowerWarpGroupBase(NVWSLowerWarpGroupBase &&) = delete;
  NVWSLowerWarpGroupBase& operator=(NVWSLowerWarpGroupBase &&) = delete;
  ~NVWSLowerWarpGroupBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-lower-warp-group");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-lower-warp-group"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert nvws.warp_group to ttg.warp_specialize.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSLowerWarpGroup");
  }
  ::llvm::StringRef getName() const override { return "NVWSLowerWarpGroup"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSLowerWarpGroupBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createNVWSLowerWarpGroup() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createNVWSLowerWarpGroup() {
  return impl::createNVWSLowerWarpGroup();
}
#undef GEN_PASS_DEF_NVWSLOWERWARPGROUP
#endif // GEN_PASS_DEF_NVWSLOWERWARPGROUP
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// NVWSAssignStagePhase Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSAssignStagePhase() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSAssignStagePhase();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVWSAssignStagePhasePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSAssignStagePhase();
  });
}

//===----------------------------------------------------------------------===//
// NVWSInsertAref Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSInsertAref() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSInsertAref();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVWSInsertArefPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSInsertAref();
  });
}

//===----------------------------------------------------------------------===//
// NVWSInsertTmemAref Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSInsertTmemAref() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSInsertTmemAref();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVWSInsertTmemArefPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSInsertTmemAref();
  });
}

//===----------------------------------------------------------------------===//
// NVWSLowerAref Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSLowerAref() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSLowerAref();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVWSLowerArefPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSLowerAref();
  });
}

//===----------------------------------------------------------------------===//
// NVWSLowerWarpGroup Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSLowerWarpGroup() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSLowerWarpGroup();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerNVWSLowerWarpGroupPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createNVWSLowerWarpGroup();
  });
}

//===----------------------------------------------------------------------===//
// NVWSTransforms Registration
//===----------------------------------------------------------------------===//

inline void registerNVWSTransformsPasses() {
  registerNVWSAssignStagePhase();
  registerNVWSInsertAref();
  registerNVWSInsertTmemAref();
  registerNVWSLowerAref();
  registerNVWSLowerWarpGroup();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class NVWSAssignStagePhaseBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSAssignStagePhaseBase;

  NVWSAssignStagePhaseBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSAssignStagePhaseBase(const NVWSAssignStagePhaseBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSAssignStagePhaseBase& operator=(const NVWSAssignStagePhaseBase &) = delete;
  NVWSAssignStagePhaseBase(NVWSAssignStagePhaseBase &&) = delete;
  NVWSAssignStagePhaseBase& operator=(NVWSAssignStagePhaseBase &&) = delete;
  ~NVWSAssignStagePhaseBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-assign-stage-phase");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-assign-stage-phase"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Assign buffer stage to nvws.aref.*.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSAssignStagePhase");
  }
  ::llvm::StringRef getName() const override { return "NVWSAssignStagePhase"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSAssignStagePhaseBase<DerivedT>)

protected:
};

template <typename DerivedT>
class NVWSInsertArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSInsertArefBase;

  NVWSInsertArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSInsertArefBase(const NVWSInsertArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSInsertArefBase& operator=(const NVWSInsertArefBase &) = delete;
  NVWSInsertArefBase(NVWSInsertArefBase &&) = delete;
  NVWSInsertArefBase& operator=(NVWSInsertArefBase &&) = delete;
  ~NVWSInsertArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-insert-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-insert-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Insert arefs between producer and consumer partitions.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSInsertAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSInsertAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSInsertArefBase<DerivedT>)

protected:
};

template <typename DerivedT>
class NVWSInsertTmemArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSInsertTmemArefBase;

  NVWSInsertTmemArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSInsertTmemArefBase(const NVWSInsertTmemArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSInsertTmemArefBase& operator=(const NVWSInsertTmemArefBase &) = delete;
  NVWSInsertTmemArefBase(NVWSInsertTmemArefBase &&) = delete;
  NVWSInsertTmemArefBase& operator=(NVWSInsertTmemArefBase &&) = delete;
  ~NVWSInsertTmemArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-insert-tmem-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-insert-tmem-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Insert tmem arefs between producer and consumer partitions.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSInsertTmemAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSInsertTmemAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSInsertTmemArefBase<DerivedT>)

protected:
};

template <typename DerivedT>
class NVWSLowerArefBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSLowerArefBase;

  NVWSLowerArefBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSLowerArefBase(const NVWSLowerArefBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSLowerArefBase& operator=(const NVWSLowerArefBase &) = delete;
  NVWSLowerArefBase(NVWSLowerArefBase &&) = delete;
  NVWSLowerArefBase& operator=(NVWSLowerArefBase &&) = delete;
  ~NVWSLowerArefBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-lower-aref");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-lower-aref"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert nvws.aref.* to ttng.*barrier* ops.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSLowerAref");
  }
  ::llvm::StringRef getName() const override { return "NVWSLowerAref"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSLowerArefBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> numStages{*this, "num-stages", ::llvm::cl::desc(R"PO(number of pipeline stages)PO"), ::llvm::cl::init(3)};
};

template <typename DerivedT>
class NVWSLowerWarpGroupBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = NVWSLowerWarpGroupBase;

  NVWSLowerWarpGroupBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  NVWSLowerWarpGroupBase(const NVWSLowerWarpGroupBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  NVWSLowerWarpGroupBase& operator=(const NVWSLowerWarpGroupBase &) = delete;
  NVWSLowerWarpGroupBase(NVWSLowerWarpGroupBase &&) = delete;
  NVWSLowerWarpGroupBase& operator=(NVWSLowerWarpGroupBase &&) = delete;
  ~NVWSLowerWarpGroupBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("nvws-lower-warp-group");
  }
  ::llvm::StringRef getArgument() const override { return "nvws-lower-warp-group"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert nvws.warp_group to ttg.warp_specialize.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("NVWSLowerWarpGroup");
  }
  ::llvm::StringRef getName() const override { return "NVWSLowerWarpGroup"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvws::NVWSDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(NVWSLowerWarpGroupBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
