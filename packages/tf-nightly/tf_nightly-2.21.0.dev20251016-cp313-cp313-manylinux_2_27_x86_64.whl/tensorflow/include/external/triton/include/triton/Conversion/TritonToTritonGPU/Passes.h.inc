/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_CONVERTTRITONTOTRITONGPU
#define GEN_PASS_DECL_RELAYOUTTRITONGPU
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// ConvertTritonToTritonGPU
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CONVERTTRITONTOTRITONGPU
struct ConvertTritonToTritonGPUOptions {
  std::string target = "";
  int32_t numWarps = 4;
  int32_t threadsPerWarp = 32;
  int32_t numCTAs = 1;
  bool enableSourceRemat = false;
};
std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU();
std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU(ConvertTritonToTritonGPUOptions options);
#undef GEN_PASS_DECL_CONVERTTRITONTOTRITONGPU
#endif // GEN_PASS_DECL_CONVERTTRITONTOTRITONGPU
#ifdef GEN_PASS_DEF_CONVERTTRITONTOTRITONGPU

namespace impl {
  std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU(ConvertTritonToTritonGPUOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class ConvertTritonToTritonGPUBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonToTritonGPUBase;

  ConvertTritonToTritonGPUBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonToTritonGPUBase(const ConvertTritonToTritonGPUBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonToTritonGPUBase& operator=(const ConvertTritonToTritonGPUBase &) = delete;
  ConvertTritonToTritonGPUBase(ConvertTritonToTritonGPUBase &&) = delete;
  ConvertTritonToTritonGPUBase& operator=(ConvertTritonToTritonGPUBase &&) = delete;
  ~ConvertTritonToTritonGPUBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-to-tritongpu");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-to-tritongpu"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert Triton to TritonGPU)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonToTritonGPU");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonToTritonGPU"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonToTritonGPUBase<DerivedT>)

  ConvertTritonToTritonGPUBase(ConvertTritonToTritonGPUOptions options) : ConvertTritonToTritonGPUBase() {
    target = std::move(options.target);
    numWarps = std::move(options.numWarps);
    threadsPerWarp = std::move(options.threadsPerWarp);
    numCTAs = std::move(options.numCTAs);
    enableSourceRemat = std::move(options.enableSourceRemat);
  }
protected:
  ::mlir::Pass::Option<std::string> target{*this, "target", ::llvm::cl::desc(R"PO(the GPU target, e.g., cuda:80, hip:gfx942)PO"), ::llvm::cl::init("")};
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc(R"PO(number of warps)PO"), ::llvm::cl::init(4)};
  ::mlir::Pass::Option<int32_t> threadsPerWarp{*this, "threads-per-warp", ::llvm::cl::desc(R"PO(number of threads per warp)PO"), ::llvm::cl::init(32)};
  ::mlir::Pass::Option<int32_t> numCTAs{*this, "num-ctas", ::llvm::cl::desc(R"PO(number of ctas in a cga)PO"), ::llvm::cl::init(1)};
  ::mlir::Pass::Option<bool> enableSourceRemat{*this, "enable-source-remat", ::llvm::cl::desc(R"PO(enable trivial source rematerialization)PO"), ::llvm::cl::init(false)};
private:

  friend std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU(ConvertTritonToTritonGPUOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU() {
  return impl::createConvertTritonToTritonGPU();
}

std::unique_ptr<::mlir::Pass> createConvertTritonToTritonGPU(ConvertTritonToTritonGPUOptions options) {
  return impl::createConvertTritonToTritonGPU(std::move(options));
}
#undef GEN_PASS_DEF_CONVERTTRITONTOTRITONGPU
#endif // GEN_PASS_DEF_CONVERTTRITONTOTRITONGPU

//===----------------------------------------------------------------------===//
// RelayoutTritonGPU
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_RELAYOUTTRITONGPU
std::unique_ptr<::mlir::Pass> createRelayoutTritonGPU();
#undef GEN_PASS_DECL_RELAYOUTTRITONGPU
#endif // GEN_PASS_DECL_RELAYOUTTRITONGPU
#ifdef GEN_PASS_DEF_RELAYOUTTRITONGPU

namespace impl {
  std::unique_ptr<::mlir::Pass> createRelayoutTritonGPU();
} // namespace impl
namespace impl {

template <typename DerivedT>
class RelayoutTritonGPUBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = RelayoutTritonGPUBase;

  RelayoutTritonGPUBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  RelayoutTritonGPUBase(const RelayoutTritonGPUBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  RelayoutTritonGPUBase& operator=(const RelayoutTritonGPUBase &) = delete;
  RelayoutTritonGPUBase(RelayoutTritonGPUBase &&) = delete;
  RelayoutTritonGPUBase& operator=(RelayoutTritonGPUBase &&) = delete;
  ~RelayoutTritonGPUBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("relayout-tritongpu");
  }
  ::llvm::StringRef getArgument() const override { return "relayout-tritongpu"; }

  ::llvm::StringRef getDescription() const override { return R"PD(relayout pass for `ttg` and `ttng` operations)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("RelayoutTritonGPU");
  }
  ::llvm::StringRef getName() const override { return "RelayoutTritonGPU"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(RelayoutTritonGPUBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createRelayoutTritonGPU() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createRelayoutTritonGPU() {
  return impl::createRelayoutTritonGPU();
}
#undef GEN_PASS_DEF_RELAYOUTTRITONGPU
#endif // GEN_PASS_DEF_RELAYOUTTRITONGPU
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// ConvertTritonToTritonGPU Registration
//===----------------------------------------------------------------------===//

inline void registerConvertTritonToTritonGPU() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertTritonToTritonGPU();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerConvertTritonToTritonGPUPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertTritonToTritonGPU();
  });
}

//===----------------------------------------------------------------------===//
// RelayoutTritonGPU Registration
//===----------------------------------------------------------------------===//

inline void registerRelayoutTritonGPU() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createRelayoutTritonGPU();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerRelayoutTritonGPUPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createRelayoutTritonGPU();
  });
}

//===----------------------------------------------------------------------===//
// TritonToTritonGPU Registration
//===----------------------------------------------------------------------===//

inline void registerTritonToTritonGPUPasses() {
  registerConvertTritonToTritonGPU();
  registerRelayoutTritonGPU();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class ConvertTritonToTritonGPUBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonToTritonGPUBase;

  ConvertTritonToTritonGPUBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonToTritonGPUBase(const ConvertTritonToTritonGPUBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonToTritonGPUBase& operator=(const ConvertTritonToTritonGPUBase &) = delete;
  ConvertTritonToTritonGPUBase(ConvertTritonToTritonGPUBase &&) = delete;
  ConvertTritonToTritonGPUBase& operator=(ConvertTritonToTritonGPUBase &&) = delete;
  ~ConvertTritonToTritonGPUBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-to-tritongpu");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-to-tritongpu"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert Triton to TritonGPU)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonToTritonGPU");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonToTritonGPU"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonToTritonGPUBase<DerivedT>)

protected:
  ::mlir::Pass::Option<std::string> target{*this, "target", ::llvm::cl::desc(R"PO(the GPU target, e.g., cuda:80, hip:gfx942)PO"), ::llvm::cl::init("")};
  ::mlir::Pass::Option<int32_t> numWarps{*this, "num-warps", ::llvm::cl::desc(R"PO(number of warps)PO"), ::llvm::cl::init(4)};
  ::mlir::Pass::Option<int32_t> threadsPerWarp{*this, "threads-per-warp", ::llvm::cl::desc(R"PO(number of threads per warp)PO"), ::llvm::cl::init(32)};
  ::mlir::Pass::Option<int32_t> numCTAs{*this, "num-ctas", ::llvm::cl::desc(R"PO(number of ctas in a cga)PO"), ::llvm::cl::init(1)};
  ::mlir::Pass::Option<bool> enableSourceRemat{*this, "enable-source-remat", ::llvm::cl::desc(R"PO(enable trivial source rematerialization)PO"), ::llvm::cl::init(false)};
};

template <typename DerivedT>
class RelayoutTritonGPUBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = RelayoutTritonGPUBase;

  RelayoutTritonGPUBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  RelayoutTritonGPUBase(const RelayoutTritonGPUBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  RelayoutTritonGPUBase& operator=(const RelayoutTritonGPUBase &) = delete;
  RelayoutTritonGPUBase(RelayoutTritonGPUBase &&) = delete;
  RelayoutTritonGPUBase& operator=(RelayoutTritonGPUBase &&) = delete;
  ~RelayoutTritonGPUBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("relayout-tritongpu");
  }
  ::llvm::StringRef getArgument() const override { return "relayout-tritongpu"; }

  ::llvm::StringRef getDescription() const override { return R"PD(relayout pass for `ttg` and `ttng` operations)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("RelayoutTritonGPU");
  }
  ::llvm::StringRef getName() const override { return "RelayoutTritonGPU"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(RelayoutTritonGPUBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
