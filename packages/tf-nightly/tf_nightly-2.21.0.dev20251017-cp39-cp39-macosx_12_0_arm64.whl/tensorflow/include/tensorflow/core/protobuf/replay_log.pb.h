// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/replay_log.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_2epb_2eh
#define tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/protobuf/master.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto;
}  // extern "C"
namespace tensorflow {
class NewReplaySession;
struct NewReplaySessionDefaultTypeInternal;
PROTOBUF_EXPORT extern NewReplaySessionDefaultTypeInternal _NewReplaySession_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull NewReplaySession_class_data_;
class ReplayOp;
struct ReplayOpDefaultTypeInternal;
PROTOBUF_EXPORT extern ReplayOpDefaultTypeInternal _ReplayOp_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ReplayOp_class_data_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT NewReplaySession final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.NewReplaySession) */ {
 public:
  inline NewReplaySession() : NewReplaySession(nullptr) {}
  ~NewReplaySession() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewReplaySession* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewReplaySession));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewReplaySession(::google::protobuf::internal::ConstantInitialized);

  inline NewReplaySession(const NewReplaySession& from) : NewReplaySession(nullptr, from) {}
  inline NewReplaySession(NewReplaySession&& from) noexcept
      : NewReplaySession(nullptr, ::std::move(from)) {}
  inline NewReplaySession& operator=(const NewReplaySession& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewReplaySession& operator=(NewReplaySession&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewReplaySession& default_instance() {
    return *reinterpret_cast<const NewReplaySession*>(
        &_NewReplaySession_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NewReplaySession& a, NewReplaySession& b) { a.Swap(&b); }
  inline void Swap(NewReplaySession* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewReplaySession* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewReplaySession* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewReplaySession>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewReplaySession& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewReplaySession& from) { NewReplaySession::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewReplaySession* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.NewReplaySession"; }

 protected:
  explicit NewReplaySession(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NewReplaySession(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NewReplaySession& from);
  NewReplaySession(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NewReplaySession&& from) noexcept
      : NewReplaySession(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionHandleFieldNumber = 2,
    kDevicesFieldNumber = 1,
  };
  // string session_handle = 2;
  void clear_session_handle() ;
  const ::std::string& session_handle() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_session_handle(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_session_handle();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_session_handle();
  void set_allocated_session_handle(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_session_handle() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_session_handle(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_session_handle();

  public:
  // .tensorflow.ListDevicesResponse devices = 1;
  bool has_devices() const;
  void clear_devices() ;
  const ::tensorflow::ListDevicesResponse& devices() const;
  [[nodiscard]] ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE release_devices();
  ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL mutable_devices();
  void set_allocated_devices(::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_devices(::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE unsafe_arena_release_devices();

  private:
  const ::tensorflow::ListDevicesResponse& _internal_devices() const;
  ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL _internal_mutable_devices();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.NewReplaySession)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NewReplaySession& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr session_handle_;
    ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE devices_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull NewReplaySession_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ReplayOp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.ReplayOp) */ {
 public:
  inline ReplayOp() : ReplayOp(nullptr) {}
  ~ReplayOp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplayOp* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplayOp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplayOp(::google::protobuf::internal::ConstantInitialized);

  inline ReplayOp(const ReplayOp& from) : ReplayOp(nullptr, from) {}
  inline ReplayOp(ReplayOp&& from) noexcept
      : ReplayOp(nullptr, ::std::move(from)) {}
  inline ReplayOp& operator=(const ReplayOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayOp& operator=(ReplayOp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplayOp& default_instance() {
    return *reinterpret_cast<const ReplayOp*>(
        &_ReplayOp_default_instance_);
  }
  enum OpCase {
    kCreateSession = 1,
    kExtendSession = 2,
    kPartialRunSetup = 3,
    kRunStep = 4,
    kCloseSession = 5,
    kListDevices = 6,
    kResetRequest = 7,
    kMakeCallable = 8,
    kRunCallable = 9,
    kReleaseCallable = 10,
    kNewReplaySession = 11,
    OP_NOT_SET = 0,
  };
  enum ResponseCase {
    kCreateSessionResponse = 21,
    kExtendSessionResponse = 22,
    kPartialRunSetupResponse = 23,
    kRunStepResponse = 24,
    kCloseSessionResponse = 25,
    kListDevicesResponse = 26,
    kResetRequestResponse = 27,
    kMakeCallableResponse = 28,
    kRunCallableResponse = 29,
    kReleaseCallableResponse = 30,
    RESPONSE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReplayOp& a, ReplayOp& b) { a.Swap(&b); }
  inline void Swap(ReplayOp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayOp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplayOp* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplayOp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplayOp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplayOp& from) { ReplayOp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplayOp* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.ReplayOp"; }

 protected:
  explicit ReplayOp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ReplayOp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ReplayOp& from);
  ReplayOp(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ReplayOp&& from) noexcept
      : ReplayOp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartTimeUsFieldNumber = 31,
    kEndTimeUsFieldNumber = 32,
    kCreateSessionFieldNumber = 1,
    kExtendSessionFieldNumber = 2,
    kPartialRunSetupFieldNumber = 3,
    kRunStepFieldNumber = 4,
    kCloseSessionFieldNumber = 5,
    kListDevicesFieldNumber = 6,
    kResetRequestFieldNumber = 7,
    kMakeCallableFieldNumber = 8,
    kRunCallableFieldNumber = 9,
    kReleaseCallableFieldNumber = 10,
    kNewReplaySessionFieldNumber = 11,
    kCreateSessionResponseFieldNumber = 21,
    kExtendSessionResponseFieldNumber = 22,
    kPartialRunSetupResponseFieldNumber = 23,
    kRunStepResponseFieldNumber = 24,
    kCloseSessionResponseFieldNumber = 25,
    kListDevicesResponseFieldNumber = 26,
    kResetRequestResponseFieldNumber = 27,
    kMakeCallableResponseFieldNumber = 28,
    kRunCallableResponseFieldNumber = 29,
    kReleaseCallableResponseFieldNumber = 30,
  };
  // double start_time_us = 31;
  void clear_start_time_us() ;
  double start_time_us() const;
  void set_start_time_us(double value);

  private:
  double _internal_start_time_us() const;
  void _internal_set_start_time_us(double value);

  public:
  // double end_time_us = 32;
  void clear_end_time_us() ;
  double end_time_us() const;
  void set_end_time_us(double value);

  private:
  double _internal_end_time_us() const;
  void _internal_set_end_time_us(double value);

  public:
  // .tensorflow.CreateSessionRequest create_session = 1;
  bool has_create_session() const;
  private:
  bool _internal_has_create_session() const;

  public:
  void clear_create_session() ;
  const ::tensorflow::CreateSessionRequest& create_session() const;
  [[nodiscard]] ::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE release_create_session();
  ::tensorflow::CreateSessionRequest* PROTOBUF_NONNULL mutable_create_session();
  void set_allocated_create_session(::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_create_session(::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE unsafe_arena_release_create_session();

  private:
  const ::tensorflow::CreateSessionRequest& _internal_create_session() const;
  ::tensorflow::CreateSessionRequest* PROTOBUF_NONNULL _internal_mutable_create_session();

  public:
  // .tensorflow.ExtendSessionRequest extend_session = 2;
  bool has_extend_session() const;
  private:
  bool _internal_has_extend_session() const;

  public:
  void clear_extend_session() ;
  const ::tensorflow::ExtendSessionRequest& extend_session() const;
  [[nodiscard]] ::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE release_extend_session();
  ::tensorflow::ExtendSessionRequest* PROTOBUF_NONNULL mutable_extend_session();
  void set_allocated_extend_session(::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_extend_session(::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE unsafe_arena_release_extend_session();

  private:
  const ::tensorflow::ExtendSessionRequest& _internal_extend_session() const;
  ::tensorflow::ExtendSessionRequest* PROTOBUF_NONNULL _internal_mutable_extend_session();

  public:
  // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  bool has_partial_run_setup() const;
  private:
  bool _internal_has_partial_run_setup() const;

  public:
  void clear_partial_run_setup() ;
  const ::tensorflow::PartialRunSetupRequest& partial_run_setup() const;
  [[nodiscard]] ::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE release_partial_run_setup();
  ::tensorflow::PartialRunSetupRequest* PROTOBUF_NONNULL mutable_partial_run_setup();
  void set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE unsafe_arena_release_partial_run_setup();

  private:
  const ::tensorflow::PartialRunSetupRequest& _internal_partial_run_setup() const;
  ::tensorflow::PartialRunSetupRequest* PROTOBUF_NONNULL _internal_mutable_partial_run_setup();

  public:
  // .tensorflow.RunStepRequest run_step = 4;
  bool has_run_step() const;
  private:
  bool _internal_has_run_step() const;

  public:
  void clear_run_step() ;
  const ::tensorflow::RunStepRequest& run_step() const;
  [[nodiscard]] ::tensorflow::RunStepRequest* PROTOBUF_NULLABLE release_run_step();
  ::tensorflow::RunStepRequest* PROTOBUF_NONNULL mutable_run_step();
  void set_allocated_run_step(::tensorflow::RunStepRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_run_step(::tensorflow::RunStepRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::RunStepRequest* PROTOBUF_NULLABLE unsafe_arena_release_run_step();

  private:
  const ::tensorflow::RunStepRequest& _internal_run_step() const;
  ::tensorflow::RunStepRequest* PROTOBUF_NONNULL _internal_mutable_run_step();

  public:
  // .tensorflow.CloseSessionRequest close_session = 5;
  bool has_close_session() const;
  private:
  bool _internal_has_close_session() const;

  public:
  void clear_close_session() ;
  const ::tensorflow::CloseSessionRequest& close_session() const;
  [[nodiscard]] ::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE release_close_session();
  ::tensorflow::CloseSessionRequest* PROTOBUF_NONNULL mutable_close_session();
  void set_allocated_close_session(::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_close_session(::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE unsafe_arena_release_close_session();

  private:
  const ::tensorflow::CloseSessionRequest& _internal_close_session() const;
  ::tensorflow::CloseSessionRequest* PROTOBUF_NONNULL _internal_mutable_close_session();

  public:
  // .tensorflow.ListDevicesRequest list_devices = 6;
  bool has_list_devices() const;
  private:
  bool _internal_has_list_devices() const;

  public:
  void clear_list_devices() ;
  const ::tensorflow::ListDevicesRequest& list_devices() const;
  [[nodiscard]] ::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE release_list_devices();
  ::tensorflow::ListDevicesRequest* PROTOBUF_NONNULL mutable_list_devices();
  void set_allocated_list_devices(::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_list_devices(::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE unsafe_arena_release_list_devices();

  private:
  const ::tensorflow::ListDevicesRequest& _internal_list_devices() const;
  ::tensorflow::ListDevicesRequest* PROTOBUF_NONNULL _internal_mutable_list_devices();

  public:
  // .tensorflow.ResetRequest reset_request = 7;
  bool has_reset_request() const;
  private:
  bool _internal_has_reset_request() const;

  public:
  void clear_reset_request() ;
  const ::tensorflow::ResetRequest& reset_request() const;
  [[nodiscard]] ::tensorflow::ResetRequest* PROTOBUF_NULLABLE release_reset_request();
  ::tensorflow::ResetRequest* PROTOBUF_NONNULL mutable_reset_request();
  void set_allocated_reset_request(::tensorflow::ResetRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_reset_request(::tensorflow::ResetRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::ResetRequest* PROTOBUF_NULLABLE unsafe_arena_release_reset_request();

  private:
  const ::tensorflow::ResetRequest& _internal_reset_request() const;
  ::tensorflow::ResetRequest* PROTOBUF_NONNULL _internal_mutable_reset_request();

  public:
  // .tensorflow.MakeCallableRequest make_callable = 8;
  bool has_make_callable() const;
  private:
  bool _internal_has_make_callable() const;

  public:
  void clear_make_callable() ;
  const ::tensorflow::MakeCallableRequest& make_callable() const;
  [[nodiscard]] ::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE release_make_callable();
  ::tensorflow::MakeCallableRequest* PROTOBUF_NONNULL mutable_make_callable();
  void set_allocated_make_callable(::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_make_callable(::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE unsafe_arena_release_make_callable();

  private:
  const ::tensorflow::MakeCallableRequest& _internal_make_callable() const;
  ::tensorflow::MakeCallableRequest* PROTOBUF_NONNULL _internal_mutable_make_callable();

  public:
  // .tensorflow.RunCallableRequest run_callable = 9;
  bool has_run_callable() const;
  private:
  bool _internal_has_run_callable() const;

  public:
  void clear_run_callable() ;
  const ::tensorflow::RunCallableRequest& run_callable() const;
  [[nodiscard]] ::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE release_run_callable();
  ::tensorflow::RunCallableRequest* PROTOBUF_NONNULL mutable_run_callable();
  void set_allocated_run_callable(::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_run_callable(::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE unsafe_arena_release_run_callable();

  private:
  const ::tensorflow::RunCallableRequest& _internal_run_callable() const;
  ::tensorflow::RunCallableRequest* PROTOBUF_NONNULL _internal_mutable_run_callable();

  public:
  // .tensorflow.ReleaseCallableRequest release_callable = 10;
  bool has_release_callable() const;
  private:
  bool _internal_has_release_callable() const;

  public:
  void clear_release_callable() ;
  const ::tensorflow::ReleaseCallableRequest& release_callable() const;
  [[nodiscard]] ::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE release_release_callable();
  ::tensorflow::ReleaseCallableRequest* PROTOBUF_NONNULL mutable_release_callable();
  void set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE value);
  ::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE unsafe_arena_release_release_callable();

  private:
  const ::tensorflow::ReleaseCallableRequest& _internal_release_callable() const;
  ::tensorflow::ReleaseCallableRequest* PROTOBUF_NONNULL _internal_mutable_release_callable();

  public:
  // .tensorflow.NewReplaySession new_replay_session = 11;
  bool has_new_replay_session() const;
  private:
  bool _internal_has_new_replay_session() const;

  public:
  void clear_new_replay_session() ;
  const ::tensorflow::NewReplaySession& new_replay_session() const;
  [[nodiscard]] ::tensorflow::NewReplaySession* PROTOBUF_NULLABLE release_new_replay_session();
  ::tensorflow::NewReplaySession* PROTOBUF_NONNULL mutable_new_replay_session();
  void set_allocated_new_replay_session(::tensorflow::NewReplaySession* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_new_replay_session(::tensorflow::NewReplaySession* PROTOBUF_NULLABLE value);
  ::tensorflow::NewReplaySession* PROTOBUF_NULLABLE unsafe_arena_release_new_replay_session();

  private:
  const ::tensorflow::NewReplaySession& _internal_new_replay_session() const;
  ::tensorflow::NewReplaySession* PROTOBUF_NONNULL _internal_mutable_new_replay_session();

  public:
  // .tensorflow.CreateSessionResponse create_session_response = 21;
  bool has_create_session_response() const;
  private:
  bool _internal_has_create_session_response() const;

  public:
  void clear_create_session_response() ;
  const ::tensorflow::CreateSessionResponse& create_session_response() const;
  [[nodiscard]] ::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE release_create_session_response();
  ::tensorflow::CreateSessionResponse* PROTOBUF_NONNULL mutable_create_session_response();
  void set_allocated_create_session_response(::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_create_session_response(::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE unsafe_arena_release_create_session_response();

  private:
  const ::tensorflow::CreateSessionResponse& _internal_create_session_response() const;
  ::tensorflow::CreateSessionResponse* PROTOBUF_NONNULL _internal_mutable_create_session_response();

  public:
  // .tensorflow.ExtendSessionResponse extend_session_response = 22;
  bool has_extend_session_response() const;
  private:
  bool _internal_has_extend_session_response() const;

  public:
  void clear_extend_session_response() ;
  const ::tensorflow::ExtendSessionResponse& extend_session_response() const;
  [[nodiscard]] ::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE release_extend_session_response();
  ::tensorflow::ExtendSessionResponse* PROTOBUF_NONNULL mutable_extend_session_response();
  void set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE unsafe_arena_release_extend_session_response();

  private:
  const ::tensorflow::ExtendSessionResponse& _internal_extend_session_response() const;
  ::tensorflow::ExtendSessionResponse* PROTOBUF_NONNULL _internal_mutable_extend_session_response();

  public:
  // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  bool has_partial_run_setup_response() const;
  private:
  bool _internal_has_partial_run_setup_response() const;

  public:
  void clear_partial_run_setup_response() ;
  const ::tensorflow::PartialRunSetupResponse& partial_run_setup_response() const;
  [[nodiscard]] ::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE release_partial_run_setup_response();
  ::tensorflow::PartialRunSetupResponse* PROTOBUF_NONNULL mutable_partial_run_setup_response();
  void set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE unsafe_arena_release_partial_run_setup_response();

  private:
  const ::tensorflow::PartialRunSetupResponse& _internal_partial_run_setup_response() const;
  ::tensorflow::PartialRunSetupResponse* PROTOBUF_NONNULL _internal_mutable_partial_run_setup_response();

  public:
  // .tensorflow.RunStepResponse run_step_response = 24;
  bool has_run_step_response() const;
  private:
  bool _internal_has_run_step_response() const;

  public:
  void clear_run_step_response() ;
  const ::tensorflow::RunStepResponse& run_step_response() const;
  [[nodiscard]] ::tensorflow::RunStepResponse* PROTOBUF_NULLABLE release_run_step_response();
  ::tensorflow::RunStepResponse* PROTOBUF_NONNULL mutable_run_step_response();
  void set_allocated_run_step_response(::tensorflow::RunStepResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_run_step_response(::tensorflow::RunStepResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::RunStepResponse* PROTOBUF_NULLABLE unsafe_arena_release_run_step_response();

  private:
  const ::tensorflow::RunStepResponse& _internal_run_step_response() const;
  ::tensorflow::RunStepResponse* PROTOBUF_NONNULL _internal_mutable_run_step_response();

  public:
  // .tensorflow.CloseSessionResponse close_session_response = 25;
  bool has_close_session_response() const;
  private:
  bool _internal_has_close_session_response() const;

  public:
  void clear_close_session_response() ;
  const ::tensorflow::CloseSessionResponse& close_session_response() const;
  [[nodiscard]] ::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE release_close_session_response();
  ::tensorflow::CloseSessionResponse* PROTOBUF_NONNULL mutable_close_session_response();
  void set_allocated_close_session_response(::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_close_session_response(::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE unsafe_arena_release_close_session_response();

  private:
  const ::tensorflow::CloseSessionResponse& _internal_close_session_response() const;
  ::tensorflow::CloseSessionResponse* PROTOBUF_NONNULL _internal_mutable_close_session_response();

  public:
  // .tensorflow.ListDevicesResponse list_devices_response = 26;
  bool has_list_devices_response() const;
  private:
  bool _internal_has_list_devices_response() const;

  public:
  void clear_list_devices_response() ;
  const ::tensorflow::ListDevicesResponse& list_devices_response() const;
  [[nodiscard]] ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE release_list_devices_response();
  ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL mutable_list_devices_response();
  void set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE unsafe_arena_release_list_devices_response();

  private:
  const ::tensorflow::ListDevicesResponse& _internal_list_devices_response() const;
  ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL _internal_mutable_list_devices_response();

  public:
  // .tensorflow.ResetResponse reset_request_response = 27;
  bool has_reset_request_response() const;
  private:
  bool _internal_has_reset_request_response() const;

  public:
  void clear_reset_request_response() ;
  const ::tensorflow::ResetResponse& reset_request_response() const;
  [[nodiscard]] ::tensorflow::ResetResponse* PROTOBUF_NULLABLE release_reset_request_response();
  ::tensorflow::ResetResponse* PROTOBUF_NONNULL mutable_reset_request_response();
  void set_allocated_reset_request_response(::tensorflow::ResetResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_reset_request_response(::tensorflow::ResetResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::ResetResponse* PROTOBUF_NULLABLE unsafe_arena_release_reset_request_response();

  private:
  const ::tensorflow::ResetResponse& _internal_reset_request_response() const;
  ::tensorflow::ResetResponse* PROTOBUF_NONNULL _internal_mutable_reset_request_response();

  public:
  // .tensorflow.MakeCallableResponse make_callable_response = 28;
  bool has_make_callable_response() const;
  private:
  bool _internal_has_make_callable_response() const;

  public:
  void clear_make_callable_response() ;
  const ::tensorflow::MakeCallableResponse& make_callable_response() const;
  [[nodiscard]] ::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE release_make_callable_response();
  ::tensorflow::MakeCallableResponse* PROTOBUF_NONNULL mutable_make_callable_response();
  void set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE unsafe_arena_release_make_callable_response();

  private:
  const ::tensorflow::MakeCallableResponse& _internal_make_callable_response() const;
  ::tensorflow::MakeCallableResponse* PROTOBUF_NONNULL _internal_mutable_make_callable_response();

  public:
  // .tensorflow.RunCallableResponse run_callable_response = 29;
  bool has_run_callable_response() const;
  private:
  bool _internal_has_run_callable_response() const;

  public:
  void clear_run_callable_response() ;
  const ::tensorflow::RunCallableResponse& run_callable_response() const;
  [[nodiscard]] ::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE release_run_callable_response();
  ::tensorflow::RunCallableResponse* PROTOBUF_NONNULL mutable_run_callable_response();
  void set_allocated_run_callable_response(::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_run_callable_response(::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE unsafe_arena_release_run_callable_response();

  private:
  const ::tensorflow::RunCallableResponse& _internal_run_callable_response() const;
  ::tensorflow::RunCallableResponse* PROTOBUF_NONNULL _internal_mutable_run_callable_response();

  public:
  // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  bool has_release_callable_response() const;
  private:
  bool _internal_has_release_callable_response() const;

  public:
  void clear_release_callable_response() ;
  const ::tensorflow::ReleaseCallableResponse& release_callable_response() const;
  [[nodiscard]] ::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE release_release_callable_response();
  ::tensorflow::ReleaseCallableResponse* PROTOBUF_NONNULL mutable_release_callable_response();
  void set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE value);
  ::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE unsafe_arena_release_release_callable_response();

  private:
  const ::tensorflow::ReleaseCallableResponse& _internal_release_callable_response() const;
  ::tensorflow::ReleaseCallableResponse* PROTOBUF_NONNULL _internal_mutable_release_callable_response();

  public:
  void clear_op();
  OpCase op_case() const;
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.ReplayOp)
 private:
  class _Internal;
  void set_has_create_session();
  void set_has_extend_session();
  void set_has_partial_run_setup();
  void set_has_run_step();
  void set_has_close_session();
  void set_has_list_devices();
  void set_has_reset_request();
  void set_has_make_callable();
  void set_has_run_callable();
  void set_has_release_callable();
  void set_has_new_replay_session();
  void set_has_create_session_response();
  void set_has_extend_session_response();
  void set_has_partial_run_setup_response();
  void set_has_run_step_response();
  void set_has_close_session_response();
  void set_has_list_devices_response();
  void set_has_reset_request_response();
  void set_has_make_callable_response();
  void set_has_run_callable_response();
  void set_has_release_callable_response();
  inline bool has_op() const;
  inline void clear_has_op();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 23,
                                   21, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ReplayOp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    double start_time_us_;
    double end_time_us_;
    union OpUnion {
      constexpr OpUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE create_session_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE extend_session_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE partial_run_setup_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE run_step_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE close_session_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE list_devices_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE reset_request_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE make_callable_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE run_callable_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE release_callable_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE new_replay_session_;
    } op_;
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE create_session_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE extend_session_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE partial_run_setup_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE run_step_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE close_session_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE list_devices_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE reset_request_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE make_callable_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE run_callable_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE release_callable_response_;
    } response_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull ReplayOp_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NewReplaySession

// .tensorflow.ListDevicesResponse devices = 1;
inline bool NewReplaySession::has_devices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.devices_ != nullptr);
  return value;
}
inline const ::tensorflow::ListDevicesResponse& NewReplaySession::_internal_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::ListDevicesResponse* p = _impl_.devices_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::ListDevicesResponse&>(::tensorflow::_ListDevicesResponse_default_instance_);
}
inline const ::tensorflow::ListDevicesResponse& NewReplaySession::devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.devices)
  return _internal_devices();
}
inline void NewReplaySession::unsafe_arena_set_allocated_devices(
    ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devices_);
  }
  _impl_.devices_ = reinterpret_cast<::tensorflow::ListDevicesResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NewReplaySession.devices)
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE NewReplaySession::release_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::ListDevicesResponse* released = _impl_.devices_;
  _impl_.devices_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE NewReplaySession::unsafe_arena_release_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.devices)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::ListDevicesResponse* temp = _impl_.devices_;
  _impl_.devices_ = nullptr;
  return temp;
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL NewReplaySession::_internal_mutable_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.devices_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::ListDevicesResponse>(GetArena());
    _impl_.devices_ = reinterpret_cast<::tensorflow::ListDevicesResponse*>(p);
  }
  return _impl_.devices_;
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL NewReplaySession::mutable_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::ListDevicesResponse* _msg = _internal_mutable_devices();
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.devices)
  return _msg;
}
inline void NewReplaySession::set_allocated_devices(::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devices_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.devices_ = reinterpret_cast<::tensorflow::ListDevicesResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.devices)
}

// string session_handle = 2;
inline void NewReplaySession::clear_session_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& NewReplaySession::session_handle() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.session_handle)
  return _internal_session_handle();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NewReplaySession::set_session_handle(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_handle_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NewReplaySession.session_handle)
}
inline ::std::string* PROTOBUF_NONNULL NewReplaySession::mutable_session_handle()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_session_handle();
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.session_handle)
  return _s;
}
inline const ::std::string& NewReplaySession::_internal_session_handle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_handle_.Get();
}
inline void NewReplaySession::_internal_set_session_handle(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_handle_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NewReplaySession::_internal_mutable_session_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_handle_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NewReplaySession::release_session_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.session_handle)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.session_handle_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.session_handle_.Set("", GetArena());
  }
  return released;
}
inline void NewReplaySession::set_allocated_session_handle(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_handle_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_handle_.IsDefault()) {
    _impl_.session_handle_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.session_handle)
}

// -------------------------------------------------------------------

// ReplayOp

// double start_time_us = 31;
inline void ReplayOp::clear_start_time_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_us_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ReplayOp::start_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.start_time_us)
  return _internal_start_time_us();
}
inline void ReplayOp::set_start_time_us(double value) {
  _internal_set_start_time_us(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.start_time_us)
}
inline double ReplayOp::_internal_start_time_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_us_;
}
inline void ReplayOp::_internal_set_start_time_us(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_us_ = value;
}

// double end_time_us = 32;
inline void ReplayOp::clear_end_time_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_us_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ReplayOp::end_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.end_time_us)
  return _internal_end_time_us();
}
inline void ReplayOp::set_end_time_us(double value) {
  _internal_set_end_time_us(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.end_time_us)
}
inline double ReplayOp::_internal_end_time_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_us_;
}
inline void ReplayOp::_internal_set_end_time_us(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_us_ = value;
}

// .tensorflow.CreateSessionRequest create_session = 1;
inline bool ReplayOp::has_create_session() const {
  return op_case() == kCreateSession;
}
inline bool ReplayOp::_internal_has_create_session() const {
  return op_case() == kCreateSession;
}
inline void ReplayOp::set_has_create_session() {
  _impl_._oneof_case_[0] = kCreateSession;
}
inline ::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE ReplayOp::release_create_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session)
  if (op_case() == kCreateSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::CreateSessionRequest*>(_impl_.op_.create_session_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.create_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::CreateSessionRequest& ReplayOp::_internal_create_session() const {
  return op_case() == kCreateSession ? *reinterpret_cast<::tensorflow::CreateSessionRequest*>(_impl_.op_.create_session_) : reinterpret_cast<::tensorflow::CreateSessionRequest&>(::tensorflow::_CreateSessionRequest_default_instance_);
}
inline const ::tensorflow::CreateSessionRequest& ReplayOp::create_session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session)
  return _internal_create_session();
}
inline ::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_create_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session)
  if (op_case() == kCreateSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::CreateSessionRequest*>(_impl_.op_.create_session_);
    _impl_.op_.create_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_create_session(
    ::tensorflow::CreateSessionRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_create_session();
    _impl_.op_.create_session_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session)
}
inline ::tensorflow::CreateSessionRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_create_session() {
  if (op_case() != kCreateSession) {
    clear_op();
    set_has_create_session();
    _impl_.op_.create_session_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::CreateSessionRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::CreateSessionRequest*>(_impl_.op_.create_session_);
}
inline ::tensorflow::CreateSessionRequest* PROTOBUF_NONNULL ReplayOp::mutable_create_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::CreateSessionRequest* _msg = _internal_mutable_create_session();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session)
  return _msg;
}

// .tensorflow.ExtendSessionRequest extend_session = 2;
inline bool ReplayOp::has_extend_session() const {
  return op_case() == kExtendSession;
}
inline bool ReplayOp::_internal_has_extend_session() const {
  return op_case() == kExtendSession;
}
inline void ReplayOp::set_has_extend_session() {
  _impl_._oneof_case_[0] = kExtendSession;
}
inline ::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE ReplayOp::release_extend_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session)
  if (op_case() == kExtendSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ExtendSessionRequest*>(_impl_.op_.extend_session_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.extend_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ExtendSessionRequest& ReplayOp::_internal_extend_session() const {
  return op_case() == kExtendSession ? *reinterpret_cast<::tensorflow::ExtendSessionRequest*>(_impl_.op_.extend_session_) : reinterpret_cast<::tensorflow::ExtendSessionRequest&>(::tensorflow::_ExtendSessionRequest_default_instance_);
}
inline const ::tensorflow::ExtendSessionRequest& ReplayOp::extend_session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session)
  return _internal_extend_session();
}
inline ::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_extend_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session)
  if (op_case() == kExtendSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ExtendSessionRequest*>(_impl_.op_.extend_session_);
    _impl_.op_.extend_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_extend_session(
    ::tensorflow::ExtendSessionRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_extend_session();
    _impl_.op_.extend_session_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session)
}
inline ::tensorflow::ExtendSessionRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_extend_session() {
  if (op_case() != kExtendSession) {
    clear_op();
    set_has_extend_session();
    _impl_.op_.extend_session_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ExtendSessionRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ExtendSessionRequest*>(_impl_.op_.extend_session_);
}
inline ::tensorflow::ExtendSessionRequest* PROTOBUF_NONNULL ReplayOp::mutable_extend_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ExtendSessionRequest* _msg = _internal_mutable_extend_session();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session)
  return _msg;
}

// .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
inline bool ReplayOp::has_partial_run_setup() const {
  return op_case() == kPartialRunSetup;
}
inline bool ReplayOp::_internal_has_partial_run_setup() const {
  return op_case() == kPartialRunSetup;
}
inline void ReplayOp::set_has_partial_run_setup() {
  _impl_._oneof_case_[0] = kPartialRunSetup;
}
inline ::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE ReplayOp::release_partial_run_setup() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup)
  if (op_case() == kPartialRunSetup) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::PartialRunSetupRequest*>(_impl_.op_.partial_run_setup_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.partial_run_setup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::PartialRunSetupRequest& ReplayOp::_internal_partial_run_setup() const {
  return op_case() == kPartialRunSetup ? *reinterpret_cast<::tensorflow::PartialRunSetupRequest*>(_impl_.op_.partial_run_setup_) : reinterpret_cast<::tensorflow::PartialRunSetupRequest&>(::tensorflow::_PartialRunSetupRequest_default_instance_);
}
inline const ::tensorflow::PartialRunSetupRequest& ReplayOp::partial_run_setup() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup)
  return _internal_partial_run_setup();
}
inline ::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_partial_run_setup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup)
  if (op_case() == kPartialRunSetup) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::PartialRunSetupRequest*>(_impl_.op_.partial_run_setup_);
    _impl_.op_.partial_run_setup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_partial_run_setup(
    ::tensorflow::PartialRunSetupRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_partial_run_setup();
    _impl_.op_.partial_run_setup_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
inline ::tensorflow::PartialRunSetupRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_partial_run_setup() {
  if (op_case() != kPartialRunSetup) {
    clear_op();
    set_has_partial_run_setup();
    _impl_.op_.partial_run_setup_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::PartialRunSetupRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::PartialRunSetupRequest*>(_impl_.op_.partial_run_setup_);
}
inline ::tensorflow::PartialRunSetupRequest* PROTOBUF_NONNULL ReplayOp::mutable_partial_run_setup()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::PartialRunSetupRequest* _msg = _internal_mutable_partial_run_setup();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup)
  return _msg;
}

// .tensorflow.RunStepRequest run_step = 4;
inline bool ReplayOp::has_run_step() const {
  return op_case() == kRunStep;
}
inline bool ReplayOp::_internal_has_run_step() const {
  return op_case() == kRunStep;
}
inline void ReplayOp::set_has_run_step() {
  _impl_._oneof_case_[0] = kRunStep;
}
inline ::tensorflow::RunStepRequest* PROTOBUF_NULLABLE ReplayOp::release_run_step() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step)
  if (op_case() == kRunStep) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::RunStepRequest*>(_impl_.op_.run_step_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.run_step_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::RunStepRequest& ReplayOp::_internal_run_step() const {
  return op_case() == kRunStep ? *reinterpret_cast<::tensorflow::RunStepRequest*>(_impl_.op_.run_step_) : reinterpret_cast<::tensorflow::RunStepRequest&>(::tensorflow::_RunStepRequest_default_instance_);
}
inline const ::tensorflow::RunStepRequest& ReplayOp::run_step() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step)
  return _internal_run_step();
}
inline ::tensorflow::RunStepRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_run_step() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step)
  if (op_case() == kRunStep) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::RunStepRequest*>(_impl_.op_.run_step_);
    _impl_.op_.run_step_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_run_step(
    ::tensorflow::RunStepRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_run_step();
    _impl_.op_.run_step_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step)
}
inline ::tensorflow::RunStepRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_run_step() {
  if (op_case() != kRunStep) {
    clear_op();
    set_has_run_step();
    _impl_.op_.run_step_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunStepRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::RunStepRequest*>(_impl_.op_.run_step_);
}
inline ::tensorflow::RunStepRequest* PROTOBUF_NONNULL ReplayOp::mutable_run_step()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::RunStepRequest* _msg = _internal_mutable_run_step();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step)
  return _msg;
}

// .tensorflow.CloseSessionRequest close_session = 5;
inline bool ReplayOp::has_close_session() const {
  return op_case() == kCloseSession;
}
inline bool ReplayOp::_internal_has_close_session() const {
  return op_case() == kCloseSession;
}
inline void ReplayOp::set_has_close_session() {
  _impl_._oneof_case_[0] = kCloseSession;
}
inline ::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE ReplayOp::release_close_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session)
  if (op_case() == kCloseSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::CloseSessionRequest*>(_impl_.op_.close_session_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.close_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::CloseSessionRequest& ReplayOp::_internal_close_session() const {
  return op_case() == kCloseSession ? *reinterpret_cast<::tensorflow::CloseSessionRequest*>(_impl_.op_.close_session_) : reinterpret_cast<::tensorflow::CloseSessionRequest&>(::tensorflow::_CloseSessionRequest_default_instance_);
}
inline const ::tensorflow::CloseSessionRequest& ReplayOp::close_session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session)
  return _internal_close_session();
}
inline ::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_close_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session)
  if (op_case() == kCloseSession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::CloseSessionRequest*>(_impl_.op_.close_session_);
    _impl_.op_.close_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_close_session(
    ::tensorflow::CloseSessionRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_close_session();
    _impl_.op_.close_session_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session)
}
inline ::tensorflow::CloseSessionRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_close_session() {
  if (op_case() != kCloseSession) {
    clear_op();
    set_has_close_session();
    _impl_.op_.close_session_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::CloseSessionRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::CloseSessionRequest*>(_impl_.op_.close_session_);
}
inline ::tensorflow::CloseSessionRequest* PROTOBUF_NONNULL ReplayOp::mutable_close_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::CloseSessionRequest* _msg = _internal_mutable_close_session();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session)
  return _msg;
}

// .tensorflow.ListDevicesRequest list_devices = 6;
inline bool ReplayOp::has_list_devices() const {
  return op_case() == kListDevices;
}
inline bool ReplayOp::_internal_has_list_devices() const {
  return op_case() == kListDevices;
}
inline void ReplayOp::set_has_list_devices() {
  _impl_._oneof_case_[0] = kListDevices;
}
inline ::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE ReplayOp::release_list_devices() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices)
  if (op_case() == kListDevices) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ListDevicesRequest*>(_impl_.op_.list_devices_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.list_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ListDevicesRequest& ReplayOp::_internal_list_devices() const {
  return op_case() == kListDevices ? *reinterpret_cast<::tensorflow::ListDevicesRequest*>(_impl_.op_.list_devices_) : reinterpret_cast<::tensorflow::ListDevicesRequest&>(::tensorflow::_ListDevicesRequest_default_instance_);
}
inline const ::tensorflow::ListDevicesRequest& ReplayOp::list_devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices)
  return _internal_list_devices();
}
inline ::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_list_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices)
  if (op_case() == kListDevices) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ListDevicesRequest*>(_impl_.op_.list_devices_);
    _impl_.op_.list_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_list_devices(
    ::tensorflow::ListDevicesRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_list_devices();
    _impl_.op_.list_devices_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices)
}
inline ::tensorflow::ListDevicesRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_list_devices() {
  if (op_case() != kListDevices) {
    clear_op();
    set_has_list_devices();
    _impl_.op_.list_devices_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ListDevicesRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ListDevicesRequest*>(_impl_.op_.list_devices_);
}
inline ::tensorflow::ListDevicesRequest* PROTOBUF_NONNULL ReplayOp::mutable_list_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ListDevicesRequest* _msg = _internal_mutable_list_devices();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices)
  return _msg;
}

// .tensorflow.ResetRequest reset_request = 7;
inline bool ReplayOp::has_reset_request() const {
  return op_case() == kResetRequest;
}
inline bool ReplayOp::_internal_has_reset_request() const {
  return op_case() == kResetRequest;
}
inline void ReplayOp::set_has_reset_request() {
  _impl_._oneof_case_[0] = kResetRequest;
}
inline ::tensorflow::ResetRequest* PROTOBUF_NULLABLE ReplayOp::release_reset_request() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request)
  if (op_case() == kResetRequest) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ResetRequest*>(_impl_.op_.reset_request_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.reset_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ResetRequest& ReplayOp::_internal_reset_request() const {
  return op_case() == kResetRequest ? *reinterpret_cast<::tensorflow::ResetRequest*>(_impl_.op_.reset_request_) : reinterpret_cast<::tensorflow::ResetRequest&>(::tensorflow::_ResetRequest_default_instance_);
}
inline const ::tensorflow::ResetRequest& ReplayOp::reset_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request)
  return _internal_reset_request();
}
inline ::tensorflow::ResetRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_reset_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request)
  if (op_case() == kResetRequest) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ResetRequest*>(_impl_.op_.reset_request_);
    _impl_.op_.reset_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_reset_request(
    ::tensorflow::ResetRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_reset_request();
    _impl_.op_.reset_request_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request)
}
inline ::tensorflow::ResetRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_reset_request() {
  if (op_case() != kResetRequest) {
    clear_op();
    set_has_reset_request();
    _impl_.op_.reset_request_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ResetRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ResetRequest*>(_impl_.op_.reset_request_);
}
inline ::tensorflow::ResetRequest* PROTOBUF_NONNULL ReplayOp::mutable_reset_request()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ResetRequest* _msg = _internal_mutable_reset_request();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request)
  return _msg;
}

// .tensorflow.MakeCallableRequest make_callable = 8;
inline bool ReplayOp::has_make_callable() const {
  return op_case() == kMakeCallable;
}
inline bool ReplayOp::_internal_has_make_callable() const {
  return op_case() == kMakeCallable;
}
inline void ReplayOp::set_has_make_callable() {
  _impl_._oneof_case_[0] = kMakeCallable;
}
inline ::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE ReplayOp::release_make_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable)
  if (op_case() == kMakeCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::MakeCallableRequest*>(_impl_.op_.make_callable_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.make_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::MakeCallableRequest& ReplayOp::_internal_make_callable() const {
  return op_case() == kMakeCallable ? *reinterpret_cast<::tensorflow::MakeCallableRequest*>(_impl_.op_.make_callable_) : reinterpret_cast<::tensorflow::MakeCallableRequest&>(::tensorflow::_MakeCallableRequest_default_instance_);
}
inline const ::tensorflow::MakeCallableRequest& ReplayOp::make_callable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable)
  return _internal_make_callable();
}
inline ::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_make_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable)
  if (op_case() == kMakeCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::MakeCallableRequest*>(_impl_.op_.make_callable_);
    _impl_.op_.make_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_make_callable(
    ::tensorflow::MakeCallableRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_make_callable();
    _impl_.op_.make_callable_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable)
}
inline ::tensorflow::MakeCallableRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_make_callable() {
  if (op_case() != kMakeCallable) {
    clear_op();
    set_has_make_callable();
    _impl_.op_.make_callable_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::MakeCallableRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::MakeCallableRequest*>(_impl_.op_.make_callable_);
}
inline ::tensorflow::MakeCallableRequest* PROTOBUF_NONNULL ReplayOp::mutable_make_callable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::MakeCallableRequest* _msg = _internal_mutable_make_callable();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable)
  return _msg;
}

// .tensorflow.RunCallableRequest run_callable = 9;
inline bool ReplayOp::has_run_callable() const {
  return op_case() == kRunCallable;
}
inline bool ReplayOp::_internal_has_run_callable() const {
  return op_case() == kRunCallable;
}
inline void ReplayOp::set_has_run_callable() {
  _impl_._oneof_case_[0] = kRunCallable;
}
inline ::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE ReplayOp::release_run_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable)
  if (op_case() == kRunCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::RunCallableRequest*>(_impl_.op_.run_callable_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.run_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::RunCallableRequest& ReplayOp::_internal_run_callable() const {
  return op_case() == kRunCallable ? *reinterpret_cast<::tensorflow::RunCallableRequest*>(_impl_.op_.run_callable_) : reinterpret_cast<::tensorflow::RunCallableRequest&>(::tensorflow::_RunCallableRequest_default_instance_);
}
inline const ::tensorflow::RunCallableRequest& ReplayOp::run_callable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable)
  return _internal_run_callable();
}
inline ::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_run_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable)
  if (op_case() == kRunCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::RunCallableRequest*>(_impl_.op_.run_callable_);
    _impl_.op_.run_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_run_callable(
    ::tensorflow::RunCallableRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_run_callable();
    _impl_.op_.run_callable_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable)
}
inline ::tensorflow::RunCallableRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_run_callable() {
  if (op_case() != kRunCallable) {
    clear_op();
    set_has_run_callable();
    _impl_.op_.run_callable_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunCallableRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::RunCallableRequest*>(_impl_.op_.run_callable_);
}
inline ::tensorflow::RunCallableRequest* PROTOBUF_NONNULL ReplayOp::mutable_run_callable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::RunCallableRequest* _msg = _internal_mutable_run_callable();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable)
  return _msg;
}

// .tensorflow.ReleaseCallableRequest release_callable = 10;
inline bool ReplayOp::has_release_callable() const {
  return op_case() == kReleaseCallable;
}
inline bool ReplayOp::_internal_has_release_callable() const {
  return op_case() == kReleaseCallable;
}
inline void ReplayOp::set_has_release_callable() {
  _impl_._oneof_case_[0] = kReleaseCallable;
}
inline ::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE ReplayOp::release_release_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable)
  if (op_case() == kReleaseCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ReleaseCallableRequest*>(_impl_.op_.release_callable_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.release_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ReleaseCallableRequest& ReplayOp::_internal_release_callable() const {
  return op_case() == kReleaseCallable ? *reinterpret_cast<::tensorflow::ReleaseCallableRequest*>(_impl_.op_.release_callable_) : reinterpret_cast<::tensorflow::ReleaseCallableRequest&>(::tensorflow::_ReleaseCallableRequest_default_instance_);
}
inline const ::tensorflow::ReleaseCallableRequest& ReplayOp::release_callable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable)
  return _internal_release_callable();
}
inline ::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_release_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable)
  if (op_case() == kReleaseCallable) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::ReleaseCallableRequest*>(_impl_.op_.release_callable_);
    _impl_.op_.release_callable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_release_callable(
    ::tensorflow::ReleaseCallableRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_release_callable();
    _impl_.op_.release_callable_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable)
}
inline ::tensorflow::ReleaseCallableRequest* PROTOBUF_NONNULL ReplayOp::_internal_mutable_release_callable() {
  if (op_case() != kReleaseCallable) {
    clear_op();
    set_has_release_callable();
    _impl_.op_.release_callable_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ReleaseCallableRequest>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ReleaseCallableRequest*>(_impl_.op_.release_callable_);
}
inline ::tensorflow::ReleaseCallableRequest* PROTOBUF_NONNULL ReplayOp::mutable_release_callable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ReleaseCallableRequest* _msg = _internal_mutable_release_callable();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable)
  return _msg;
}

// .tensorflow.NewReplaySession new_replay_session = 11;
inline bool ReplayOp::has_new_replay_session() const {
  return op_case() == kNewReplaySession;
}
inline bool ReplayOp::_internal_has_new_replay_session() const {
  return op_case() == kNewReplaySession;
}
inline void ReplayOp::set_has_new_replay_session() {
  _impl_._oneof_case_[0] = kNewReplaySession;
}
inline void ReplayOp::clear_new_replay_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (op_case() == kNewReplaySession) {
    if (GetArena() == nullptr) {
      delete _impl_.op_.new_replay_session_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.new_replay_session_);
    }
    clear_has_op();
  }
}
inline ::tensorflow::NewReplaySession* PROTOBUF_NULLABLE ReplayOp::release_new_replay_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.new_replay_session)
  if (op_case() == kNewReplaySession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::NewReplaySession*>(_impl_.op_.new_replay_session_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.op_.new_replay_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::NewReplaySession& ReplayOp::_internal_new_replay_session() const {
  return op_case() == kNewReplaySession ? *reinterpret_cast<::tensorflow::NewReplaySession*>(_impl_.op_.new_replay_session_) : reinterpret_cast<::tensorflow::NewReplaySession&>(::tensorflow::_NewReplaySession_default_instance_);
}
inline const ::tensorflow::NewReplaySession& ReplayOp::new_replay_session() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.new_replay_session)
  return _internal_new_replay_session();
}
inline ::tensorflow::NewReplaySession* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_new_replay_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.new_replay_session)
  if (op_case() == kNewReplaySession) {
    clear_has_op();
    auto* temp = reinterpret_cast<::tensorflow::NewReplaySession*>(_impl_.op_.new_replay_session_);
    _impl_.op_.new_replay_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_new_replay_session(
    ::tensorflow::NewReplaySession* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_op();
  if (value) {
    set_has_new_replay_session();
    _impl_.op_.new_replay_session_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
inline ::tensorflow::NewReplaySession* PROTOBUF_NONNULL ReplayOp::_internal_mutable_new_replay_session() {
  if (op_case() != kNewReplaySession) {
    clear_op();
    set_has_new_replay_session();
    _impl_.op_.new_replay_session_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::NewReplaySession>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::NewReplaySession*>(_impl_.op_.new_replay_session_);
}
inline ::tensorflow::NewReplaySession* PROTOBUF_NONNULL ReplayOp::mutable_new_replay_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::NewReplaySession* _msg = _internal_mutable_new_replay_session();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.new_replay_session)
  return _msg;
}

// .tensorflow.CreateSessionResponse create_session_response = 21;
inline bool ReplayOp::has_create_session_response() const {
  return response_case() == kCreateSessionResponse;
}
inline bool ReplayOp::_internal_has_create_session_response() const {
  return response_case() == kCreateSessionResponse;
}
inline void ReplayOp::set_has_create_session_response() {
  _impl_._oneof_case_[1] = kCreateSessionResponse;
}
inline ::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE ReplayOp::release_create_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session_response)
  if (response_case() == kCreateSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::CreateSessionResponse*>(_impl_.response_.create_session_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.create_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::CreateSessionResponse& ReplayOp::_internal_create_session_response() const {
  return response_case() == kCreateSessionResponse ? *reinterpret_cast<::tensorflow::CreateSessionResponse*>(_impl_.response_.create_session_response_) : reinterpret_cast<::tensorflow::CreateSessionResponse&>(::tensorflow::_CreateSessionResponse_default_instance_);
}
inline const ::tensorflow::CreateSessionResponse& ReplayOp::create_session_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session_response)
  return _internal_create_session_response();
}
inline ::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_create_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session_response)
  if (response_case() == kCreateSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::CreateSessionResponse*>(_impl_.response_.create_session_response_);
    _impl_.response_.create_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_create_session_response(
    ::tensorflow::CreateSessionResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_create_session_response();
    _impl_.response_.create_session_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session_response)
}
inline ::tensorflow::CreateSessionResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_create_session_response() {
  if (response_case() != kCreateSessionResponse) {
    clear_response();
    set_has_create_session_response();
    _impl_.response_.create_session_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::CreateSessionResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::CreateSessionResponse*>(_impl_.response_.create_session_response_);
}
inline ::tensorflow::CreateSessionResponse* PROTOBUF_NONNULL ReplayOp::mutable_create_session_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::CreateSessionResponse* _msg = _internal_mutable_create_session_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session_response)
  return _msg;
}

// .tensorflow.ExtendSessionResponse extend_session_response = 22;
inline bool ReplayOp::has_extend_session_response() const {
  return response_case() == kExtendSessionResponse;
}
inline bool ReplayOp::_internal_has_extend_session_response() const {
  return response_case() == kExtendSessionResponse;
}
inline void ReplayOp::set_has_extend_session_response() {
  _impl_._oneof_case_[1] = kExtendSessionResponse;
}
inline ::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE ReplayOp::release_extend_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session_response)
  if (response_case() == kExtendSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ExtendSessionResponse*>(_impl_.response_.extend_session_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.extend_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ExtendSessionResponse& ReplayOp::_internal_extend_session_response() const {
  return response_case() == kExtendSessionResponse ? *reinterpret_cast<::tensorflow::ExtendSessionResponse*>(_impl_.response_.extend_session_response_) : reinterpret_cast<::tensorflow::ExtendSessionResponse&>(::tensorflow::_ExtendSessionResponse_default_instance_);
}
inline const ::tensorflow::ExtendSessionResponse& ReplayOp::extend_session_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session_response)
  return _internal_extend_session_response();
}
inline ::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_extend_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session_response)
  if (response_case() == kExtendSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ExtendSessionResponse*>(_impl_.response_.extend_session_response_);
    _impl_.response_.extend_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_extend_session_response(
    ::tensorflow::ExtendSessionResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_extend_session_response();
    _impl_.response_.extend_session_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
inline ::tensorflow::ExtendSessionResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_extend_session_response() {
  if (response_case() != kExtendSessionResponse) {
    clear_response();
    set_has_extend_session_response();
    _impl_.response_.extend_session_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ExtendSessionResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ExtendSessionResponse*>(_impl_.response_.extend_session_response_);
}
inline ::tensorflow::ExtendSessionResponse* PROTOBUF_NONNULL ReplayOp::mutable_extend_session_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ExtendSessionResponse* _msg = _internal_mutable_extend_session_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session_response)
  return _msg;
}

// .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
inline bool ReplayOp::has_partial_run_setup_response() const {
  return response_case() == kPartialRunSetupResponse;
}
inline bool ReplayOp::_internal_has_partial_run_setup_response() const {
  return response_case() == kPartialRunSetupResponse;
}
inline void ReplayOp::set_has_partial_run_setup_response() {
  _impl_._oneof_case_[1] = kPartialRunSetupResponse;
}
inline ::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE ReplayOp::release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (response_case() == kPartialRunSetupResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::PartialRunSetupResponse*>(_impl_.response_.partial_run_setup_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.partial_run_setup_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::PartialRunSetupResponse& ReplayOp::_internal_partial_run_setup_response() const {
  return response_case() == kPartialRunSetupResponse ? *reinterpret_cast<::tensorflow::PartialRunSetupResponse*>(_impl_.response_.partial_run_setup_response_) : reinterpret_cast<::tensorflow::PartialRunSetupResponse&>(::tensorflow::_PartialRunSetupResponse_default_instance_);
}
inline const ::tensorflow::PartialRunSetupResponse& ReplayOp::partial_run_setup_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup_response)
  return _internal_partial_run_setup_response();
}
inline ::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (response_case() == kPartialRunSetupResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::PartialRunSetupResponse*>(_impl_.response_.partial_run_setup_response_);
    _impl_.response_.partial_run_setup_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_partial_run_setup_response(
    ::tensorflow::PartialRunSetupResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_partial_run_setup_response();
    _impl_.response_.partial_run_setup_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
inline ::tensorflow::PartialRunSetupResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_partial_run_setup_response() {
  if (response_case() != kPartialRunSetupResponse) {
    clear_response();
    set_has_partial_run_setup_response();
    _impl_.response_.partial_run_setup_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::PartialRunSetupResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::PartialRunSetupResponse*>(_impl_.response_.partial_run_setup_response_);
}
inline ::tensorflow::PartialRunSetupResponse* PROTOBUF_NONNULL ReplayOp::mutable_partial_run_setup_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::PartialRunSetupResponse* _msg = _internal_mutable_partial_run_setup_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup_response)
  return _msg;
}

// .tensorflow.RunStepResponse run_step_response = 24;
inline bool ReplayOp::has_run_step_response() const {
  return response_case() == kRunStepResponse;
}
inline bool ReplayOp::_internal_has_run_step_response() const {
  return response_case() == kRunStepResponse;
}
inline void ReplayOp::set_has_run_step_response() {
  _impl_._oneof_case_[1] = kRunStepResponse;
}
inline ::tensorflow::RunStepResponse* PROTOBUF_NULLABLE ReplayOp::release_run_step_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step_response)
  if (response_case() == kRunStepResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::RunStepResponse*>(_impl_.response_.run_step_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.run_step_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::RunStepResponse& ReplayOp::_internal_run_step_response() const {
  return response_case() == kRunStepResponse ? *reinterpret_cast<::tensorflow::RunStepResponse*>(_impl_.response_.run_step_response_) : reinterpret_cast<::tensorflow::RunStepResponse&>(::tensorflow::_RunStepResponse_default_instance_);
}
inline const ::tensorflow::RunStepResponse& ReplayOp::run_step_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step_response)
  return _internal_run_step_response();
}
inline ::tensorflow::RunStepResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_run_step_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step_response)
  if (response_case() == kRunStepResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::RunStepResponse*>(_impl_.response_.run_step_response_);
    _impl_.response_.run_step_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_run_step_response(
    ::tensorflow::RunStepResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_run_step_response();
    _impl_.response_.run_step_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step_response)
}
inline ::tensorflow::RunStepResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_run_step_response() {
  if (response_case() != kRunStepResponse) {
    clear_response();
    set_has_run_step_response();
    _impl_.response_.run_step_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunStepResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::RunStepResponse*>(_impl_.response_.run_step_response_);
}
inline ::tensorflow::RunStepResponse* PROTOBUF_NONNULL ReplayOp::mutable_run_step_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::RunStepResponse* _msg = _internal_mutable_run_step_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step_response)
  return _msg;
}

// .tensorflow.CloseSessionResponse close_session_response = 25;
inline bool ReplayOp::has_close_session_response() const {
  return response_case() == kCloseSessionResponse;
}
inline bool ReplayOp::_internal_has_close_session_response() const {
  return response_case() == kCloseSessionResponse;
}
inline void ReplayOp::set_has_close_session_response() {
  _impl_._oneof_case_[1] = kCloseSessionResponse;
}
inline ::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE ReplayOp::release_close_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session_response)
  if (response_case() == kCloseSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::CloseSessionResponse*>(_impl_.response_.close_session_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.close_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::CloseSessionResponse& ReplayOp::_internal_close_session_response() const {
  return response_case() == kCloseSessionResponse ? *reinterpret_cast<::tensorflow::CloseSessionResponse*>(_impl_.response_.close_session_response_) : reinterpret_cast<::tensorflow::CloseSessionResponse&>(::tensorflow::_CloseSessionResponse_default_instance_);
}
inline const ::tensorflow::CloseSessionResponse& ReplayOp::close_session_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session_response)
  return _internal_close_session_response();
}
inline ::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_close_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session_response)
  if (response_case() == kCloseSessionResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::CloseSessionResponse*>(_impl_.response_.close_session_response_);
    _impl_.response_.close_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_close_session_response(
    ::tensorflow::CloseSessionResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_close_session_response();
    _impl_.response_.close_session_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session_response)
}
inline ::tensorflow::CloseSessionResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_close_session_response() {
  if (response_case() != kCloseSessionResponse) {
    clear_response();
    set_has_close_session_response();
    _impl_.response_.close_session_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::CloseSessionResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::CloseSessionResponse*>(_impl_.response_.close_session_response_);
}
inline ::tensorflow::CloseSessionResponse* PROTOBUF_NONNULL ReplayOp::mutable_close_session_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::CloseSessionResponse* _msg = _internal_mutable_close_session_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session_response)
  return _msg;
}

// .tensorflow.ListDevicesResponse list_devices_response = 26;
inline bool ReplayOp::has_list_devices_response() const {
  return response_case() == kListDevicesResponse;
}
inline bool ReplayOp::_internal_has_list_devices_response() const {
  return response_case() == kListDevicesResponse;
}
inline void ReplayOp::set_has_list_devices_response() {
  _impl_._oneof_case_[1] = kListDevicesResponse;
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE ReplayOp::release_list_devices_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices_response)
  if (response_case() == kListDevicesResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ListDevicesResponse*>(_impl_.response_.list_devices_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.list_devices_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ListDevicesResponse& ReplayOp::_internal_list_devices_response() const {
  return response_case() == kListDevicesResponse ? *reinterpret_cast<::tensorflow::ListDevicesResponse*>(_impl_.response_.list_devices_response_) : reinterpret_cast<::tensorflow::ListDevicesResponse&>(::tensorflow::_ListDevicesResponse_default_instance_);
}
inline const ::tensorflow::ListDevicesResponse& ReplayOp::list_devices_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices_response)
  return _internal_list_devices_response();
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_list_devices_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices_response)
  if (response_case() == kListDevicesResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ListDevicesResponse*>(_impl_.response_.list_devices_response_);
    _impl_.response_.list_devices_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_list_devices_response(
    ::tensorflow::ListDevicesResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_list_devices_response();
    _impl_.response_.list_devices_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_list_devices_response() {
  if (response_case() != kListDevicesResponse) {
    clear_response();
    set_has_list_devices_response();
    _impl_.response_.list_devices_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ListDevicesResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ListDevicesResponse*>(_impl_.response_.list_devices_response_);
}
inline ::tensorflow::ListDevicesResponse* PROTOBUF_NONNULL ReplayOp::mutable_list_devices_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ListDevicesResponse* _msg = _internal_mutable_list_devices_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices_response)
  return _msg;
}

// .tensorflow.ResetResponse reset_request_response = 27;
inline bool ReplayOp::has_reset_request_response() const {
  return response_case() == kResetRequestResponse;
}
inline bool ReplayOp::_internal_has_reset_request_response() const {
  return response_case() == kResetRequestResponse;
}
inline void ReplayOp::set_has_reset_request_response() {
  _impl_._oneof_case_[1] = kResetRequestResponse;
}
inline ::tensorflow::ResetResponse* PROTOBUF_NULLABLE ReplayOp::release_reset_request_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request_response)
  if (response_case() == kResetRequestResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ResetResponse*>(_impl_.response_.reset_request_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.reset_request_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ResetResponse& ReplayOp::_internal_reset_request_response() const {
  return response_case() == kResetRequestResponse ? *reinterpret_cast<::tensorflow::ResetResponse*>(_impl_.response_.reset_request_response_) : reinterpret_cast<::tensorflow::ResetResponse&>(::tensorflow::_ResetResponse_default_instance_);
}
inline const ::tensorflow::ResetResponse& ReplayOp::reset_request_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request_response)
  return _internal_reset_request_response();
}
inline ::tensorflow::ResetResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_reset_request_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request_response)
  if (response_case() == kResetRequestResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ResetResponse*>(_impl_.response_.reset_request_response_);
    _impl_.response_.reset_request_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_reset_request_response(
    ::tensorflow::ResetResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_reset_request_response();
    _impl_.response_.reset_request_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
inline ::tensorflow::ResetResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_reset_request_response() {
  if (response_case() != kResetRequestResponse) {
    clear_response();
    set_has_reset_request_response();
    _impl_.response_.reset_request_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ResetResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ResetResponse*>(_impl_.response_.reset_request_response_);
}
inline ::tensorflow::ResetResponse* PROTOBUF_NONNULL ReplayOp::mutable_reset_request_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ResetResponse* _msg = _internal_mutable_reset_request_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request_response)
  return _msg;
}

// .tensorflow.MakeCallableResponse make_callable_response = 28;
inline bool ReplayOp::has_make_callable_response() const {
  return response_case() == kMakeCallableResponse;
}
inline bool ReplayOp::_internal_has_make_callable_response() const {
  return response_case() == kMakeCallableResponse;
}
inline void ReplayOp::set_has_make_callable_response() {
  _impl_._oneof_case_[1] = kMakeCallableResponse;
}
inline ::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE ReplayOp::release_make_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable_response)
  if (response_case() == kMakeCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::MakeCallableResponse*>(_impl_.response_.make_callable_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.make_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::MakeCallableResponse& ReplayOp::_internal_make_callable_response() const {
  return response_case() == kMakeCallableResponse ? *reinterpret_cast<::tensorflow::MakeCallableResponse*>(_impl_.response_.make_callable_response_) : reinterpret_cast<::tensorflow::MakeCallableResponse&>(::tensorflow::_MakeCallableResponse_default_instance_);
}
inline const ::tensorflow::MakeCallableResponse& ReplayOp::make_callable_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable_response)
  return _internal_make_callable_response();
}
inline ::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_make_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable_response)
  if (response_case() == kMakeCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::MakeCallableResponse*>(_impl_.response_.make_callable_response_);
    _impl_.response_.make_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_make_callable_response(
    ::tensorflow::MakeCallableResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_make_callable_response();
    _impl_.response_.make_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
inline ::tensorflow::MakeCallableResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_make_callable_response() {
  if (response_case() != kMakeCallableResponse) {
    clear_response();
    set_has_make_callable_response();
    _impl_.response_.make_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::MakeCallableResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::MakeCallableResponse*>(_impl_.response_.make_callable_response_);
}
inline ::tensorflow::MakeCallableResponse* PROTOBUF_NONNULL ReplayOp::mutable_make_callable_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::MakeCallableResponse* _msg = _internal_mutable_make_callable_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable_response)
  return _msg;
}

// .tensorflow.RunCallableResponse run_callable_response = 29;
inline bool ReplayOp::has_run_callable_response() const {
  return response_case() == kRunCallableResponse;
}
inline bool ReplayOp::_internal_has_run_callable_response() const {
  return response_case() == kRunCallableResponse;
}
inline void ReplayOp::set_has_run_callable_response() {
  _impl_._oneof_case_[1] = kRunCallableResponse;
}
inline ::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE ReplayOp::release_run_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable_response)
  if (response_case() == kRunCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::RunCallableResponse*>(_impl_.response_.run_callable_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.run_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::RunCallableResponse& ReplayOp::_internal_run_callable_response() const {
  return response_case() == kRunCallableResponse ? *reinterpret_cast<::tensorflow::RunCallableResponse*>(_impl_.response_.run_callable_response_) : reinterpret_cast<::tensorflow::RunCallableResponse&>(::tensorflow::_RunCallableResponse_default_instance_);
}
inline const ::tensorflow::RunCallableResponse& ReplayOp::run_callable_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable_response)
  return _internal_run_callable_response();
}
inline ::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_run_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable_response)
  if (response_case() == kRunCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::RunCallableResponse*>(_impl_.response_.run_callable_response_);
    _impl_.response_.run_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_run_callable_response(
    ::tensorflow::RunCallableResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_run_callable_response();
    _impl_.response_.run_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
inline ::tensorflow::RunCallableResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_run_callable_response() {
  if (response_case() != kRunCallableResponse) {
    clear_response();
    set_has_run_callable_response();
    _impl_.response_.run_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::RunCallableResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::RunCallableResponse*>(_impl_.response_.run_callable_response_);
}
inline ::tensorflow::RunCallableResponse* PROTOBUF_NONNULL ReplayOp::mutable_run_callable_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::RunCallableResponse* _msg = _internal_mutable_run_callable_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable_response)
  return _msg;
}

// .tensorflow.ReleaseCallableResponse release_callable_response = 30;
inline bool ReplayOp::has_release_callable_response() const {
  return response_case() == kReleaseCallableResponse;
}
inline bool ReplayOp::_internal_has_release_callable_response() const {
  return response_case() == kReleaseCallableResponse;
}
inline void ReplayOp::set_has_release_callable_response() {
  _impl_._oneof_case_[1] = kReleaseCallableResponse;
}
inline ::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE ReplayOp::release_release_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable_response)
  if (response_case() == kReleaseCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ReleaseCallableResponse*>(_impl_.response_.release_callable_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.release_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::ReleaseCallableResponse& ReplayOp::_internal_release_callable_response() const {
  return response_case() == kReleaseCallableResponse ? *reinterpret_cast<::tensorflow::ReleaseCallableResponse*>(_impl_.response_.release_callable_response_) : reinterpret_cast<::tensorflow::ReleaseCallableResponse&>(::tensorflow::_ReleaseCallableResponse_default_instance_);
}
inline const ::tensorflow::ReleaseCallableResponse& ReplayOp::release_callable_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable_response)
  return _internal_release_callable_response();
}
inline ::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE ReplayOp::unsafe_arena_release_release_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable_response)
  if (response_case() == kReleaseCallableResponse) {
    clear_has_response();
    auto* temp = reinterpret_cast<::tensorflow::ReleaseCallableResponse*>(_impl_.response_.release_callable_response_);
    _impl_.response_.release_callable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayOp::unsafe_arena_set_allocated_release_callable_response(
    ::tensorflow::ReleaseCallableResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_release_callable_response();
    _impl_.response_.release_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
inline ::tensorflow::ReleaseCallableResponse* PROTOBUF_NONNULL ReplayOp::_internal_mutable_release_callable_response() {
  if (response_case() != kReleaseCallableResponse) {
    clear_response();
    set_has_release_callable_response();
    _impl_.response_.release_callable_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tensorflow::ReleaseCallableResponse>(GetArena()));
  }
  return reinterpret_cast<::tensorflow::ReleaseCallableResponse*>(_impl_.response_.release_callable_response_);
}
inline ::tensorflow::ReleaseCallableResponse* PROTOBUF_NONNULL ReplayOp::mutable_release_callable_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tensorflow::ReleaseCallableResponse* _msg = _internal_mutable_release_callable_response();
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable_response)
  return _msg;
}

inline bool ReplayOp::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void ReplayOp::clear_has_op() {
  _impl_._oneof_case_[0] = OP_NOT_SET;
}
inline bool ReplayOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ReplayOp::clear_has_response() {
  _impl_._oneof_case_[1] = RESPONSE_NOT_SET;
}
inline ReplayOp::OpCase ReplayOp::op_case() const {
  return ReplayOp::OpCase(_impl_._oneof_case_[0]);
}
inline ReplayOp::ResponseCase ReplayOp::response_case() const {
  return ReplayOp::ResponseCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_2epb_2eh
