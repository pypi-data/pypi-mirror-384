// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/core/host_offloading/host_offloading_executable.proto
// Protobuf C++ Version: 6.31.1

#ifndef xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto_2epb_2eh
#define xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "xla/service/cpu/executable.pb.h"
#include "xla/service/hlo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto;
}  // extern "C"
namespace xla {
enum HostOffloadingExecutableProto_ExecutableType : int;
PROTOBUF_EXPORT extern const uint32_t HostOffloadingExecutableProto_ExecutableType_internal_data_[];
class HostOffloadingExecutableProto;
struct HostOffloadingExecutableProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern HostOffloadingExecutableProtoDefaultTypeInternal _HostOffloadingExecutableProto_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull HostOffloadingExecutableProto_class_data_;
}  // namespace xla
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::xla::HostOffloadingExecutableProto_ExecutableType_internal_data_>
    internal::EnumTraitsImpl::value<::xla::HostOffloadingExecutableProto_ExecutableType>;
}  // namespace protobuf
}  // namespace google

namespace xla {
enum HostOffloadingExecutableProto_ExecutableType : int {
  HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_INVALID = 0,
  HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_PJRT = 1,
  HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_NANORT = 2,
  HostOffloadingExecutableProto_ExecutableType_HostOffloadingExecutableProto_ExecutableType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  HostOffloadingExecutableProto_ExecutableType_HostOffloadingExecutableProto_ExecutableType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT extern const uint32_t HostOffloadingExecutableProto_ExecutableType_internal_data_[];
inline constexpr HostOffloadingExecutableProto_ExecutableType HostOffloadingExecutableProto_ExecutableType_ExecutableType_MIN =
    static_cast<HostOffloadingExecutableProto_ExecutableType>(0);
inline constexpr HostOffloadingExecutableProto_ExecutableType HostOffloadingExecutableProto_ExecutableType_ExecutableType_MAX =
    static_cast<HostOffloadingExecutableProto_ExecutableType>(2);
inline bool HostOffloadingExecutableProto_ExecutableType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int HostOffloadingExecutableProto_ExecutableType_ExecutableType_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL HostOffloadingExecutableProto_ExecutableType_descriptor();
template <typename T>
const ::std::string& HostOffloadingExecutableProto_ExecutableType_Name(T value) {
  static_assert(::std::is_same<T, HostOffloadingExecutableProto_ExecutableType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to ExecutableType_Name().");
  return HostOffloadingExecutableProto_ExecutableType_Name(static_cast<HostOffloadingExecutableProto_ExecutableType>(value));
}
template <>
inline const ::std::string& HostOffloadingExecutableProto_ExecutableType_Name(HostOffloadingExecutableProto_ExecutableType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HostOffloadingExecutableProto_ExecutableType_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool HostOffloadingExecutableProto_ExecutableType_Parse(
    ::absl::string_view name, HostOffloadingExecutableProto_ExecutableType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<HostOffloadingExecutableProto_ExecutableType>(HostOffloadingExecutableProto_ExecutableType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT HostOffloadingExecutableProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xla.HostOffloadingExecutableProto) */ {
 public:
  inline HostOffloadingExecutableProto() : HostOffloadingExecutableProto(nullptr) {}
  ~HostOffloadingExecutableProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HostOffloadingExecutableProto* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HostOffloadingExecutableProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HostOffloadingExecutableProto(::google::protobuf::internal::ConstantInitialized);

  inline HostOffloadingExecutableProto(const HostOffloadingExecutableProto& from) : HostOffloadingExecutableProto(nullptr, from) {}
  inline HostOffloadingExecutableProto(HostOffloadingExecutableProto&& from) noexcept
      : HostOffloadingExecutableProto(nullptr, ::std::move(from)) {}
  inline HostOffloadingExecutableProto& operator=(const HostOffloadingExecutableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostOffloadingExecutableProto& operator=(HostOffloadingExecutableProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostOffloadingExecutableProto& default_instance() {
    return *reinterpret_cast<const HostOffloadingExecutableProto*>(
        &_HostOffloadingExecutableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HostOffloadingExecutableProto& a, HostOffloadingExecutableProto& b) { a.Swap(&b); }
  inline void Swap(HostOffloadingExecutableProto* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostOffloadingExecutableProto* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostOffloadingExecutableProto* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HostOffloadingExecutableProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HostOffloadingExecutableProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HostOffloadingExecutableProto& from) { HostOffloadingExecutableProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HostOffloadingExecutableProto* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xla.HostOffloadingExecutableProto"; }

 protected:
  explicit HostOffloadingExecutableProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HostOffloadingExecutableProto(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HostOffloadingExecutableProto& from);
  HostOffloadingExecutableProto(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HostOffloadingExecutableProto&& from) noexcept
      : HostOffloadingExecutableProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ExecutableType = HostOffloadingExecutableProto_ExecutableType;
  static constexpr ExecutableType EXECUTABLE_TYPE_INVALID = HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_INVALID;
  static constexpr ExecutableType EXECUTABLE_TYPE_PJRT = HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_PJRT;
  static constexpr ExecutableType EXECUTABLE_TYPE_NANORT = HostOffloadingExecutableProto_ExecutableType_EXECUTABLE_TYPE_NANORT;
  static inline bool ExecutableType_IsValid(int value) {
    return HostOffloadingExecutableProto_ExecutableType_IsValid(value);
  }
  static constexpr ExecutableType ExecutableType_MIN = HostOffloadingExecutableProto_ExecutableType_ExecutableType_MIN;
  static constexpr ExecutableType ExecutableType_MAX = HostOffloadingExecutableProto_ExecutableType_ExecutableType_MAX;
  static constexpr int ExecutableType_ARRAYSIZE = HostOffloadingExecutableProto_ExecutableType_ExecutableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ExecutableType_descriptor() {
    return HostOffloadingExecutableProto_ExecutableType_descriptor();
  }
  template <typename T>
  static inline const ::std::string& ExecutableType_Name(T value) {
    return HostOffloadingExecutableProto_ExecutableType_Name(value);
  }
  static inline bool ExecutableType_Parse(
      ::absl::string_view name, ExecutableType* PROTOBUF_NONNULL value) {
    return HostOffloadingExecutableProto_ExecutableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kHloModuleFieldNumber = 1,
    kAotCompilationResultFieldNumber = 3,
    kExecutableTypeFieldNumber = 2,
  };
  // .xla.HloModuleProto hlo_module = 1;
  bool has_hlo_module() const;
  void clear_hlo_module() ;
  const ::xla::HloModuleProto& hlo_module() const;
  [[nodiscard]] ::xla::HloModuleProto* PROTOBUF_NULLABLE release_hlo_module();
  ::xla::HloModuleProto* PROTOBUF_NONNULL mutable_hlo_module();
  void set_allocated_hlo_module(::xla::HloModuleProto* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_hlo_module(::xla::HloModuleProto* PROTOBUF_NULLABLE value);
  ::xla::HloModuleProto* PROTOBUF_NULLABLE unsafe_arena_release_hlo_module();

  private:
  const ::xla::HloModuleProto& _internal_hlo_module() const;
  ::xla::HloModuleProto* PROTOBUF_NONNULL _internal_mutable_hlo_module();

  public:
  // optional .xla.cpu.CompilationResultProto aot_compilation_result = 3;
  bool has_aot_compilation_result() const;
  void clear_aot_compilation_result() ;
  const ::xla::cpu::CompilationResultProto& aot_compilation_result() const;
  [[nodiscard]] ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE release_aot_compilation_result();
  ::xla::cpu::CompilationResultProto* PROTOBUF_NONNULL mutable_aot_compilation_result();
  void set_allocated_aot_compilation_result(::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_aot_compilation_result(::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE value);
  ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE unsafe_arena_release_aot_compilation_result();

  private:
  const ::xla::cpu::CompilationResultProto& _internal_aot_compilation_result() const;
  ::xla::cpu::CompilationResultProto* PROTOBUF_NONNULL _internal_mutable_aot_compilation_result();

  public:
  // .xla.HostOffloadingExecutableProto.ExecutableType executable_type = 2;
  void clear_executable_type() ;
  ::xla::HostOffloadingExecutableProto_ExecutableType executable_type() const;
  void set_executable_type(::xla::HostOffloadingExecutableProto_ExecutableType value);

  private:
  ::xla::HostOffloadingExecutableProto_ExecutableType _internal_executable_type() const;
  void _internal_set_executable_type(::xla::HostOffloadingExecutableProto_ExecutableType value);

  public:
  // @@protoc_insertion_point(class_scope:xla.HostOffloadingExecutableProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HostOffloadingExecutableProto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::xla::HloModuleProto* PROTOBUF_NULLABLE hlo_module_;
    ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE aot_compilation_result_;
    int executable_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull HostOffloadingExecutableProto_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HostOffloadingExecutableProto

// .xla.HloModuleProto hlo_module = 1;
inline bool HostOffloadingExecutableProto::has_hlo_module() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hlo_module_ != nullptr);
  return value;
}
inline const ::xla::HloModuleProto& HostOffloadingExecutableProto::_internal_hlo_module() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xla::HloModuleProto* p = _impl_.hlo_module_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProto&>(::xla::_HloModuleProto_default_instance_);
}
inline const ::xla::HloModuleProto& HostOffloadingExecutableProto::hlo_module() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.HostOffloadingExecutableProto.hlo_module)
  return _internal_hlo_module();
}
inline void HostOffloadingExecutableProto::unsafe_arena_set_allocated_hlo_module(
    ::xla::HloModuleProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hlo_module_);
  }
  _impl_.hlo_module_ = reinterpret_cast<::xla::HloModuleProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.HostOffloadingExecutableProto.hlo_module)
}
inline ::xla::HloModuleProto* PROTOBUF_NULLABLE HostOffloadingExecutableProto::release_hlo_module() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xla::HloModuleProto* released = _impl_.hlo_module_;
  _impl_.hlo_module_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xla::HloModuleProto* PROTOBUF_NULLABLE HostOffloadingExecutableProto::unsafe_arena_release_hlo_module() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.HostOffloadingExecutableProto.hlo_module)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xla::HloModuleProto* temp = _impl_.hlo_module_;
  _impl_.hlo_module_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProto* PROTOBUF_NONNULL HostOffloadingExecutableProto::_internal_mutable_hlo_module() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hlo_module_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xla::HloModuleProto>(GetArena());
    _impl_.hlo_module_ = reinterpret_cast<::xla::HloModuleProto*>(p);
  }
  return _impl_.hlo_module_;
}
inline ::xla::HloModuleProto* PROTOBUF_NONNULL HostOffloadingExecutableProto::mutable_hlo_module()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xla::HloModuleProto* _msg = _internal_mutable_hlo_module();
  // @@protoc_insertion_point(field_mutable:xla.HostOffloadingExecutableProto.hlo_module)
  return _msg;
}
inline void HostOffloadingExecutableProto::set_allocated_hlo_module(::xla::HloModuleProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hlo_module_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.hlo_module_ = reinterpret_cast<::xla::HloModuleProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:xla.HostOffloadingExecutableProto.hlo_module)
}

// .xla.HostOffloadingExecutableProto.ExecutableType executable_type = 2;
inline void HostOffloadingExecutableProto::clear_executable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::xla::HostOffloadingExecutableProto_ExecutableType HostOffloadingExecutableProto::executable_type() const {
  // @@protoc_insertion_point(field_get:xla.HostOffloadingExecutableProto.executable_type)
  return _internal_executable_type();
}
inline void HostOffloadingExecutableProto::set_executable_type(::xla::HostOffloadingExecutableProto_ExecutableType value) {
  _internal_set_executable_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:xla.HostOffloadingExecutableProto.executable_type)
}
inline ::xla::HostOffloadingExecutableProto_ExecutableType HostOffloadingExecutableProto::_internal_executable_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::xla::HostOffloadingExecutableProto_ExecutableType>(_impl_.executable_type_);
}
inline void HostOffloadingExecutableProto::_internal_set_executable_type(::xla::HostOffloadingExecutableProto_ExecutableType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_type_ = value;
}

// optional .xla.cpu.CompilationResultProto aot_compilation_result = 3;
inline bool HostOffloadingExecutableProto::has_aot_compilation_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aot_compilation_result_ != nullptr);
  return value;
}
inline const ::xla::cpu::CompilationResultProto& HostOffloadingExecutableProto::_internal_aot_compilation_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xla::cpu::CompilationResultProto* p = _impl_.aot_compilation_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::cpu::CompilationResultProto&>(::xla::cpu::_CompilationResultProto_default_instance_);
}
inline const ::xla::cpu::CompilationResultProto& HostOffloadingExecutableProto::aot_compilation_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xla.HostOffloadingExecutableProto.aot_compilation_result)
  return _internal_aot_compilation_result();
}
inline void HostOffloadingExecutableProto::unsafe_arena_set_allocated_aot_compilation_result(
    ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aot_compilation_result_);
  }
  _impl_.aot_compilation_result_ = reinterpret_cast<::xla::cpu::CompilationResultProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.HostOffloadingExecutableProto.aot_compilation_result)
}
inline ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE HostOffloadingExecutableProto::release_aot_compilation_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xla::cpu::CompilationResultProto* released = _impl_.aot_compilation_result_;
  _impl_.aot_compilation_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE HostOffloadingExecutableProto::unsafe_arena_release_aot_compilation_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xla.HostOffloadingExecutableProto.aot_compilation_result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::xla::cpu::CompilationResultProto* temp = _impl_.aot_compilation_result_;
  _impl_.aot_compilation_result_ = nullptr;
  return temp;
}
inline ::xla::cpu::CompilationResultProto* PROTOBUF_NONNULL HostOffloadingExecutableProto::_internal_mutable_aot_compilation_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.aot_compilation_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xla::cpu::CompilationResultProto>(GetArena());
    _impl_.aot_compilation_result_ = reinterpret_cast<::xla::cpu::CompilationResultProto*>(p);
  }
  return _impl_.aot_compilation_result_;
}
inline ::xla::cpu::CompilationResultProto* PROTOBUF_NONNULL HostOffloadingExecutableProto::mutable_aot_compilation_result()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::xla::cpu::CompilationResultProto* _msg = _internal_mutable_aot_compilation_result();
  // @@protoc_insertion_point(field_mutable:xla.HostOffloadingExecutableProto.aot_compilation_result)
  return _msg;
}
inline void HostOffloadingExecutableProto::set_allocated_aot_compilation_result(::xla::cpu::CompilationResultProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aot_compilation_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.aot_compilation_result_ = reinterpret_cast<::xla::cpu::CompilationResultProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:xla.HostOffloadingExecutableProto.aot_compilation_result)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xla::HostOffloadingExecutableProto_ExecutableType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::xla::HostOffloadingExecutableProto_ExecutableType>() {
  return ::xla::HostOffloadingExecutableProto_ExecutableType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xla_2fcore_2fhost_5foffloading_2fhost_5foffloading_5fexecutable_2eproto_2epb_2eh
