// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/allocation_description.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_2epb_2eh
#define tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto;
}  // extern "C"
namespace tensorflow {
class AllocationDescription;
struct AllocationDescriptionDefaultTypeInternal;
PROTOBUF_EXPORT extern AllocationDescriptionDefaultTypeInternal _AllocationDescription_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull AllocationDescription_class_data_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT AllocationDescription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.AllocationDescription) */ {
 public:
  inline AllocationDescription() : AllocationDescription(nullptr) {}
  ~AllocationDescription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AllocationDescription* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AllocationDescription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllocationDescription(::google::protobuf::internal::ConstantInitialized);

  inline AllocationDescription(const AllocationDescription& from) : AllocationDescription(nullptr, from) {}
  inline AllocationDescription(AllocationDescription&& from) noexcept
      : AllocationDescription(nullptr, ::std::move(from)) {}
  inline AllocationDescription& operator=(const AllocationDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocationDescription& operator=(AllocationDescription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocationDescription& default_instance() {
    return *reinterpret_cast<const AllocationDescription*>(
        &_AllocationDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AllocationDescription& a, AllocationDescription& b) { a.Swap(&b); }
  inline void Swap(AllocationDescription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocationDescription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllocationDescription* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AllocationDescription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllocationDescription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllocationDescription& from) { AllocationDescription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AllocationDescription* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.AllocationDescription"; }

 protected:
  explicit AllocationDescription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AllocationDescription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AllocationDescription& from);
  AllocationDescription(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AllocationDescription&& from) noexcept
      : AllocationDescription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllocatorNameFieldNumber = 3,
    kRequestedBytesFieldNumber = 1,
    kAllocatedBytesFieldNumber = 2,
    kAllocationIdFieldNumber = 4,
    kPtrFieldNumber = 6,
    kHasSingleReferenceFieldNumber = 5,
  };
  // string allocator_name = 3;
  void clear_allocator_name() ;
  const ::std::string& allocator_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_allocator_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_allocator_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_allocator_name();
  void set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_allocator_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_allocator_name();

  public:
  // int64 requested_bytes = 1;
  void clear_requested_bytes() ;
  ::int64_t requested_bytes() const;
  void set_requested_bytes(::int64_t value);

  private:
  ::int64_t _internal_requested_bytes() const;
  void _internal_set_requested_bytes(::int64_t value);

  public:
  // int64 allocated_bytes = 2;
  void clear_allocated_bytes() ;
  ::int64_t allocated_bytes() const;
  void set_allocated_bytes(::int64_t value);

  private:
  ::int64_t _internal_allocated_bytes() const;
  void _internal_set_allocated_bytes(::int64_t value);

  public:
  // int64 allocation_id = 4;
  void clear_allocation_id() ;
  ::int64_t allocation_id() const;
  void set_allocation_id(::int64_t value);

  private:
  ::int64_t _internal_allocation_id() const;
  void _internal_set_allocation_id(::int64_t value);

  public:
  // uint64 ptr = 6;
  void clear_ptr() ;
  ::uint64_t ptr() const;
  void set_ptr(::uint64_t value);

  private:
  ::uint64_t _internal_ptr() const;
  void _internal_set_ptr(::uint64_t value);

  public:
  // bool has_single_reference = 5;
  void clear_has_single_reference() ;
  bool has_single_reference() const;
  void set_has_single_reference(bool value);

  private:
  bool _internal_has_single_reference() const;
  void _internal_set_has_single_reference(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.AllocationDescription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 55,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AllocationDescription& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr allocator_name_;
    ::int64_t requested_bytes_;
    ::int64_t allocated_bytes_;
    ::int64_t allocation_id_;
    ::uint64_t ptr_;
    bool has_single_reference_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull AllocationDescription_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AllocationDescription

// int64 requested_bytes = 1;
inline void AllocationDescription::clear_requested_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_bytes_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t AllocationDescription::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.requested_bytes)
  return _internal_requested_bytes();
}
inline void AllocationDescription::set_requested_bytes(::int64_t value) {
  _internal_set_requested_bytes(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.requested_bytes)
}
inline ::int64_t AllocationDescription::_internal_requested_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requested_bytes_;
}
inline void AllocationDescription::_internal_set_requested_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requested_bytes_ = value;
}

// int64 allocated_bytes = 2;
inline void AllocationDescription::clear_allocated_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocated_bytes_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t AllocationDescription::allocated_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.allocated_bytes)
  return _internal_allocated_bytes();
}
inline void AllocationDescription::set_allocated_bytes(::int64_t value) {
  _internal_set_allocated_bytes(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.allocated_bytes)
}
inline ::int64_t AllocationDescription::_internal_allocated_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocated_bytes_;
}
inline void AllocationDescription::_internal_set_allocated_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocated_bytes_ = value;
}

// string allocator_name = 3;
inline void AllocationDescription::clear_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& AllocationDescription::allocator_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.allocator_name)
  return _internal_allocator_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void AllocationDescription::set_allocator_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allocator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.allocator_name)
}
inline ::std::string* PROTOBUF_NONNULL AllocationDescription::mutable_allocator_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_allocator_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.AllocationDescription.allocator_name)
  return _s;
}
inline const ::std::string& AllocationDescription::_internal_allocator_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_name_.Get();
}
inline void AllocationDescription::_internal_set_allocator_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allocator_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL AllocationDescription::_internal_mutable_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.allocator_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE AllocationDescription::release_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.AllocationDescription.allocator_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.allocator_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  return released;
}
inline void AllocationDescription::set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allocator_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allocator_name_.IsDefault()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AllocationDescription.allocator_name)
}

// int64 allocation_id = 4;
inline void AllocationDescription::clear_allocation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t AllocationDescription::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.allocation_id)
  return _internal_allocation_id();
}
inline void AllocationDescription::set_allocation_id(::int64_t value) {
  _internal_set_allocation_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.allocation_id)
}
inline ::int64_t AllocationDescription::_internal_allocation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocation_id_;
}
inline void AllocationDescription::_internal_set_allocation_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = value;
}

// bool has_single_reference = 5;
inline void AllocationDescription::clear_has_single_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_single_reference_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool AllocationDescription::has_single_reference() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.has_single_reference)
  return _internal_has_single_reference();
}
inline void AllocationDescription::set_has_single_reference(bool value) {
  _internal_set_has_single_reference(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.has_single_reference)
}
inline bool AllocationDescription::_internal_has_single_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_single_reference_;
}
inline void AllocationDescription::_internal_set_has_single_reference(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_single_reference_ = value;
}

// uint64 ptr = 6;
inline void AllocationDescription::clear_ptr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ptr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t AllocationDescription::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationDescription.ptr)
  return _internal_ptr();
}
inline void AllocationDescription::set_ptr(::uint64_t value) {
  _internal_set_ptr(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationDescription.ptr)
}
inline ::uint64_t AllocationDescription::_internal_ptr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ptr_;
}
inline void AllocationDescription::_internal_set_ptr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ptr_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_2epb_2eh
