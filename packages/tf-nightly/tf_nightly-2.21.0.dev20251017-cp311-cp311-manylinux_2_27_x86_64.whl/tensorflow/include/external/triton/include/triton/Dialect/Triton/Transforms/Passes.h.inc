/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TRITONCOMBINEOPS
#define GEN_PASS_DECL_TRITONLOOPAWARECSE
#define GEN_PASS_DECL_TRITONLOOPINVARIANTCODEMOTION
#define GEN_PASS_DECL_TRITONLOOPUNROLL
#define GEN_PASS_DECL_TRITONREORDERBROADCAST
#define GEN_PASS_DECL_TRITONREWRITETENSORDESCRIPTORTOPOINTER
#define GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TritonCombineOps
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONCOMBINEOPS
std::unique_ptr<::mlir::Pass> createTritonCombineOps();
#undef GEN_PASS_DECL_TRITONCOMBINEOPS
#endif // GEN_PASS_DECL_TRITONCOMBINEOPS
#ifdef GEN_PASS_DEF_TRITONCOMBINEOPS

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonCombineOps();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonCombineOpsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonCombineOpsBase;

  TritonCombineOpsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonCombineOpsBase(const TritonCombineOpsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonCombineOpsBase& operator=(const TritonCombineOpsBase &) = delete;
  TritonCombineOpsBase(TritonCombineOpsBase &&) = delete;
  TritonCombineOpsBase& operator=(TritonCombineOpsBase &&) = delete;
  ~TritonCombineOpsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-combine");
  }
  ::llvm::StringRef getArgument() const override { return "triton-combine"; }

  ::llvm::StringRef getDescription() const override { return R"PD(combine ops)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonCombineOps");
  }
  ::llvm::StringRef getName() const override { return "TritonCombineOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonCombineOpsBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonCombineOps() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonCombineOps() {
  return impl::createTritonCombineOps();
}
#undef GEN_PASS_DEF_TRITONCOMBINEOPS
#endif // GEN_PASS_DEF_TRITONCOMBINEOPS

//===----------------------------------------------------------------------===//
// TritonLoopAwareCSE
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONLOOPAWARECSE
std::unique_ptr<::mlir::Pass> createTritonLoopAwareCSE();
#undef GEN_PASS_DECL_TRITONLOOPAWARECSE
#endif // GEN_PASS_DECL_TRITONLOOPAWARECSE
#ifdef GEN_PASS_DEF_TRITONLOOPAWARECSE

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonLoopAwareCSE();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonLoopAwareCSEBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopAwareCSEBase;

  TritonLoopAwareCSEBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopAwareCSEBase(const TritonLoopAwareCSEBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopAwareCSEBase& operator=(const TritonLoopAwareCSEBase &) = delete;
  TritonLoopAwareCSEBase(TritonLoopAwareCSEBase &&) = delete;
  TritonLoopAwareCSEBase& operator=(TritonLoopAwareCSEBase &&) = delete;
  ~TritonLoopAwareCSEBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-loop-aware-cse");
  }
  ::llvm::StringRef getArgument() const override { return "triton-loop-aware-cse"; }

  ::llvm::StringRef getDescription() const override { return R"PD(CSE within loop bodies)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopAwareCSE");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopAwareCSE"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopAwareCSEBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonLoopAwareCSE() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonLoopAwareCSE() {
  return impl::createTritonLoopAwareCSE();
}
#undef GEN_PASS_DEF_TRITONLOOPAWARECSE
#endif // GEN_PASS_DEF_TRITONLOOPAWARECSE

//===----------------------------------------------------------------------===//
// TritonLoopInvariantCodeMotion
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONLOOPINVARIANTCODEMOTION
std::unique_ptr<::mlir::Pass> createTritonLoopInvariantCodeMotion();
#undef GEN_PASS_DECL_TRITONLOOPINVARIANTCODEMOTION
#endif // GEN_PASS_DECL_TRITONLOOPINVARIANTCODEMOTION
#ifdef GEN_PASS_DEF_TRITONLOOPINVARIANTCODEMOTION

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonLoopInvariantCodeMotion();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonLoopInvariantCodeMotionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopInvariantCodeMotionBase;

  TritonLoopInvariantCodeMotionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopInvariantCodeMotionBase(const TritonLoopInvariantCodeMotionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopInvariantCodeMotionBase& operator=(const TritonLoopInvariantCodeMotionBase &) = delete;
  TritonLoopInvariantCodeMotionBase(TritonLoopInvariantCodeMotionBase &&) = delete;
  TritonLoopInvariantCodeMotionBase& operator=(TritonLoopInvariantCodeMotionBase &&) = delete;
  ~TritonLoopInvariantCodeMotionBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-licm");
  }
  ::llvm::StringRef getArgument() const override { return "triton-licm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(MLIR's LICM plus hoist load ops out of loops with masks.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopInvariantCodeMotion");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopInvariantCodeMotion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopInvariantCodeMotionBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonLoopInvariantCodeMotion() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonLoopInvariantCodeMotion() {
  return impl::createTritonLoopInvariantCodeMotion();
}
#undef GEN_PASS_DEF_TRITONLOOPINVARIANTCODEMOTION
#endif // GEN_PASS_DEF_TRITONLOOPINVARIANTCODEMOTION

//===----------------------------------------------------------------------===//
// TritonLoopUnroll
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONLOOPUNROLL
std::unique_ptr<::mlir::Pass> createTritonLoopUnroll();
#undef GEN_PASS_DECL_TRITONLOOPUNROLL
#endif // GEN_PASS_DECL_TRITONLOOPUNROLL
#ifdef GEN_PASS_DEF_TRITONLOOPUNROLL

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonLoopUnroll();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonLoopUnrollBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopUnrollBase;

  TritonLoopUnrollBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopUnrollBase(const TritonLoopUnrollBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopUnrollBase& operator=(const TritonLoopUnrollBase &) = delete;
  TritonLoopUnrollBase(TritonLoopUnrollBase &&) = delete;
  TritonLoopUnrollBase& operator=(TritonLoopUnrollBase &&) = delete;
  ~TritonLoopUnrollBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-loop-unroll");
  }
  ::llvm::StringRef getArgument() const override { return "triton-loop-unroll"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Loop unroller)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopUnroll");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopUnroll"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopUnrollBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonLoopUnroll() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonLoopUnroll() {
  return impl::createTritonLoopUnroll();
}
#undef GEN_PASS_DEF_TRITONLOOPUNROLL
#endif // GEN_PASS_DEF_TRITONLOOPUNROLL

//===----------------------------------------------------------------------===//
// TritonReorderBroadcast
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONREORDERBROADCAST
std::unique_ptr<::mlir::Pass> createTritonReorderBroadcast();
#undef GEN_PASS_DECL_TRITONREORDERBROADCAST
#endif // GEN_PASS_DECL_TRITONREORDERBROADCAST
#ifdef GEN_PASS_DEF_TRITONREORDERBROADCAST

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonReorderBroadcast();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonReorderBroadcastBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonReorderBroadcastBase;

  TritonReorderBroadcastBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonReorderBroadcastBase(const TritonReorderBroadcastBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonReorderBroadcastBase& operator=(const TritonReorderBroadcastBase &) = delete;
  TritonReorderBroadcastBase(TritonReorderBroadcastBase &&) = delete;
  TritonReorderBroadcastBase& operator=(TritonReorderBroadcastBase &&) = delete;
  ~TritonReorderBroadcastBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-reorder-broadcast");
  }
  ::llvm::StringRef getArgument() const override { return "triton-reorder-broadcast"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Moves broadcast and splat after elementwise operations)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonReorderBroadcast");
  }
  ::llvm::StringRef getName() const override { return "TritonReorderBroadcast"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonReorderBroadcastBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonReorderBroadcast() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonReorderBroadcast() {
  return impl::createTritonReorderBroadcast();
}
#undef GEN_PASS_DEF_TRITONREORDERBROADCAST
#endif // GEN_PASS_DEF_TRITONREORDERBROADCAST

//===----------------------------------------------------------------------===//
// TritonRewriteTensorDescriptorToPointer
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONREWRITETENSORDESCRIPTORTOPOINTER
std::unique_ptr<::mlir::Pass> createTritonRewriteTensorDescriptorToPointer();
#undef GEN_PASS_DECL_TRITONREWRITETENSORDESCRIPTORTOPOINTER
#endif // GEN_PASS_DECL_TRITONREWRITETENSORDESCRIPTORTOPOINTER
#ifdef GEN_PASS_DEF_TRITONREWRITETENSORDESCRIPTORTOPOINTER

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonRewriteTensorDescriptorToPointer();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonRewriteTensorDescriptorToPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorDescriptorToPointerBase;

  TritonRewriteTensorDescriptorToPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorDescriptorToPointerBase(const TritonRewriteTensorDescriptorToPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonRewriteTensorDescriptorToPointerBase& operator=(const TritonRewriteTensorDescriptorToPointerBase &) = delete;
  TritonRewriteTensorDescriptorToPointerBase(TritonRewriteTensorDescriptorToPointerBase &&) = delete;
  TritonRewriteTensorDescriptorToPointerBase& operator=(TritonRewriteTensorDescriptorToPointerBase &&) = delete;
  ~TritonRewriteTensorDescriptorToPointerBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-descriptor-to-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-descriptor-to-pointer"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Rewrite load/stores of tensor descriptors into pointer load/stores)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorDescriptorToPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorDescriptorToPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorDescriptorToPointerBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonRewriteTensorDescriptorToPointer() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonRewriteTensorDescriptorToPointer() {
  return impl::createTritonRewriteTensorDescriptorToPointer();
}
#undef GEN_PASS_DEF_TRITONREWRITETENSORDESCRIPTORTOPOINTER
#endif // GEN_PASS_DEF_TRITONREWRITETENSORDESCRIPTORTOPOINTER

//===----------------------------------------------------------------------===//
// TritonRewriteTensorPointer
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
std::unique_ptr<::mlir::Pass> createTritonRewriteTensorPointer();
#undef GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#endif // GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#ifdef GEN_PASS_DEF_TRITONREWRITETENSORPOINTER

namespace impl {
  std::unique_ptr<::mlir::Pass> createTritonRewriteTensorPointer();
} // namespace impl
namespace impl {

template <typename DerivedT>
class TritonRewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorPointerBase;

  TritonRewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorPointerBase(const TritonRewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonRewriteTensorPointerBase& operator=(const TritonRewriteTensorPointerBase &) = delete;
  TritonRewriteTensorPointerBase(TritonRewriteTensorPointerBase &&) = delete;
  TritonRewriteTensorPointerBase& operator=(TritonRewriteTensorPointerBase &&) = delete;
  ~TritonRewriteTensorPointerBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Rewrite load/stores with tensor pointers into legacy load/stores)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorPointerBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createTritonRewriteTensorPointer() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createTritonRewriteTensorPointer() {
  return impl::createTritonRewriteTensorPointer();
}
#undef GEN_PASS_DEF_TRITONREWRITETENSORPOINTER
#endif // GEN_PASS_DEF_TRITONREWRITETENSORPOINTER
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TritonCombineOps Registration
//===----------------------------------------------------------------------===//

inline void registerTritonCombineOps() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonCombineOps();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonCombineOpsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonCombineOps();
  });
}

//===----------------------------------------------------------------------===//
// TritonLoopAwareCSE Registration
//===----------------------------------------------------------------------===//

inline void registerTritonLoopAwareCSE() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopAwareCSE();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonLoopAwareCSEPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopAwareCSE();
  });
}

//===----------------------------------------------------------------------===//
// TritonLoopInvariantCodeMotion Registration
//===----------------------------------------------------------------------===//

inline void registerTritonLoopInvariantCodeMotion() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopInvariantCodeMotion();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonLoopInvariantCodeMotionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopInvariantCodeMotion();
  });
}

//===----------------------------------------------------------------------===//
// TritonLoopUnroll Registration
//===----------------------------------------------------------------------===//

inline void registerTritonLoopUnroll() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopUnroll();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonLoopUnrollPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonLoopUnroll();
  });
}

//===----------------------------------------------------------------------===//
// TritonReorderBroadcast Registration
//===----------------------------------------------------------------------===//

inline void registerTritonReorderBroadcast() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonReorderBroadcast();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonReorderBroadcastPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonReorderBroadcast();
  });
}

//===----------------------------------------------------------------------===//
// TritonRewriteTensorDescriptorToPointer Registration
//===----------------------------------------------------------------------===//

inline void registerTritonRewriteTensorDescriptorToPointer() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonRewriteTensorDescriptorToPointer();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonRewriteTensorDescriptorToPointerPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonRewriteTensorDescriptorToPointer();
  });
}

//===----------------------------------------------------------------------===//
// TritonRewriteTensorPointer Registration
//===----------------------------------------------------------------------===//

inline void registerTritonRewriteTensorPointer() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonRewriteTensorPointer();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonRewriteTensorPointerPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createTritonRewriteTensorPointer();
  });
}

//===----------------------------------------------------------------------===//
// Triton Registration
//===----------------------------------------------------------------------===//

inline void registerTritonPasses() {
  registerTritonCombineOps();
  registerTritonLoopAwareCSE();
  registerTritonLoopInvariantCodeMotion();
  registerTritonLoopUnroll();
  registerTritonReorderBroadcast();
  registerTritonRewriteTensorDescriptorToPointer();
  registerTritonRewriteTensorPointer();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TritonCombineOpsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonCombineOpsBase;

  TritonCombineOpsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonCombineOpsBase(const TritonCombineOpsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonCombineOpsBase& operator=(const TritonCombineOpsBase &) = delete;
  TritonCombineOpsBase(TritonCombineOpsBase &&) = delete;
  TritonCombineOpsBase& operator=(TritonCombineOpsBase &&) = delete;
  ~TritonCombineOpsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-combine");
  }
  ::llvm::StringRef getArgument() const override { return "triton-combine"; }

  ::llvm::StringRef getDescription() const override { return R"PD(combine ops)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonCombineOps");
  }
  ::llvm::StringRef getName() const override { return "TritonCombineOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonCombineOpsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonLoopAwareCSEBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopAwareCSEBase;

  TritonLoopAwareCSEBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopAwareCSEBase(const TritonLoopAwareCSEBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopAwareCSEBase& operator=(const TritonLoopAwareCSEBase &) = delete;
  TritonLoopAwareCSEBase(TritonLoopAwareCSEBase &&) = delete;
  TritonLoopAwareCSEBase& operator=(TritonLoopAwareCSEBase &&) = delete;
  ~TritonLoopAwareCSEBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-loop-aware-cse");
  }
  ::llvm::StringRef getArgument() const override { return "triton-loop-aware-cse"; }

  ::llvm::StringRef getDescription() const override { return R"PD(CSE within loop bodies)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopAwareCSE");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopAwareCSE"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopAwareCSEBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonLoopInvariantCodeMotionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopInvariantCodeMotionBase;

  TritonLoopInvariantCodeMotionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopInvariantCodeMotionBase(const TritonLoopInvariantCodeMotionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopInvariantCodeMotionBase& operator=(const TritonLoopInvariantCodeMotionBase &) = delete;
  TritonLoopInvariantCodeMotionBase(TritonLoopInvariantCodeMotionBase &&) = delete;
  TritonLoopInvariantCodeMotionBase& operator=(TritonLoopInvariantCodeMotionBase &&) = delete;
  ~TritonLoopInvariantCodeMotionBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-licm");
  }
  ::llvm::StringRef getArgument() const override { return "triton-licm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(MLIR's LICM plus hoist load ops out of loops with masks.)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopInvariantCodeMotion");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopInvariantCodeMotion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopInvariantCodeMotionBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonLoopUnrollBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonLoopUnrollBase;

  TritonLoopUnrollBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonLoopUnrollBase(const TritonLoopUnrollBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonLoopUnrollBase& operator=(const TritonLoopUnrollBase &) = delete;
  TritonLoopUnrollBase(TritonLoopUnrollBase &&) = delete;
  TritonLoopUnrollBase& operator=(TritonLoopUnrollBase &&) = delete;
  ~TritonLoopUnrollBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-loop-unroll");
  }
  ::llvm::StringRef getArgument() const override { return "triton-loop-unroll"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Loop unroller)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonLoopUnroll");
  }
  ::llvm::StringRef getName() const override { return "TritonLoopUnroll"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonLoopUnrollBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonReorderBroadcastBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonReorderBroadcastBase;

  TritonReorderBroadcastBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonReorderBroadcastBase(const TritonReorderBroadcastBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonReorderBroadcastBase& operator=(const TritonReorderBroadcastBase &) = delete;
  TritonReorderBroadcastBase(TritonReorderBroadcastBase &&) = delete;
  TritonReorderBroadcastBase& operator=(TritonReorderBroadcastBase &&) = delete;
  ~TritonReorderBroadcastBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-reorder-broadcast");
  }
  ::llvm::StringRef getArgument() const override { return "triton-reorder-broadcast"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Moves broadcast and splat after elementwise operations)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonReorderBroadcast");
  }
  ::llvm::StringRef getName() const override { return "TritonReorderBroadcast"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonReorderBroadcastBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonRewriteTensorDescriptorToPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorDescriptorToPointerBase;

  TritonRewriteTensorDescriptorToPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorDescriptorToPointerBase(const TritonRewriteTensorDescriptorToPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonRewriteTensorDescriptorToPointerBase& operator=(const TritonRewriteTensorDescriptorToPointerBase &) = delete;
  TritonRewriteTensorDescriptorToPointerBase(TritonRewriteTensorDescriptorToPointerBase &&) = delete;
  TritonRewriteTensorDescriptorToPointerBase& operator=(TritonRewriteTensorDescriptorToPointerBase &&) = delete;
  ~TritonRewriteTensorDescriptorToPointerBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-descriptor-to-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-descriptor-to-pointer"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Rewrite load/stores of tensor descriptors into pointer load/stores)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorDescriptorToPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorDescriptorToPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorDescriptorToPointerBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonRewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorPointerBase;

  TritonRewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorPointerBase(const TritonRewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonRewriteTensorPointerBase& operator=(const TritonRewriteTensorPointerBase &) = delete;
  TritonRewriteTensorPointerBase(TritonRewriteTensorPointerBase &&) = delete;
  TritonRewriteTensorPointerBase& operator=(TritonRewriteTensorPointerBase &&) = delete;
  ~TritonRewriteTensorPointerBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Rewrite load/stores with tensor pointers into legacy load/stores)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::TritonDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorPointerBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
