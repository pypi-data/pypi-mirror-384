/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_ALLOCATESHAREDMEMORYNV
#define GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#define GEN_PASS_DECL_CONVERTWARPSPECIALIZETOLLVM
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// AllocateSharedMemoryNv
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_ALLOCATESHAREDMEMORYNV
struct AllocateSharedMemoryNvOptions {
  int32_t computeCapability = 80;
  int32_t ptxVersion = 80;
};
std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv();
std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv(AllocateSharedMemoryNvOptions options);
#undef GEN_PASS_DECL_ALLOCATESHAREDMEMORYNV
#endif // GEN_PASS_DECL_ALLOCATESHAREDMEMORYNV
#ifdef GEN_PASS_DEF_ALLOCATESHAREDMEMORYNV

namespace impl {
  std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv(AllocateSharedMemoryNvOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class AllocateSharedMemoryNvBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = AllocateSharedMemoryNvBase;

  AllocateSharedMemoryNvBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  AllocateSharedMemoryNvBase(const AllocateSharedMemoryNvBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  AllocateSharedMemoryNvBase& operator=(const AllocateSharedMemoryNvBase &) = delete;
  AllocateSharedMemoryNvBase(AllocateSharedMemoryNvBase &&) = delete;
  AllocateSharedMemoryNvBase& operator=(AllocateSharedMemoryNvBase &&) = delete;
  ~AllocateSharedMemoryNvBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("allocate-shared-memory-nv");
  }
  ::llvm::StringRef getArgument() const override { return "allocate-shared-memory-nv"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Add metadata for shared memory allocation for Nvidia)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("AllocateSharedMemoryNv");
  }
  ::llvm::StringRef getName() const override { return "AllocateSharedMemoryNv"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(AllocateSharedMemoryNvBase<DerivedT>)

  AllocateSharedMemoryNvBase(AllocateSharedMemoryNvOptions options) : AllocateSharedMemoryNvBase() {
    computeCapability = std::move(options.computeCapability);
    ptxVersion = std::move(options.ptxVersion);
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc(R"PO(device compute capability)PO"), ::llvm::cl::init(80)};
  ::mlir::Pass::Option<int32_t> ptxVersion{*this, "ptx-version", ::llvm::cl::desc(R"PO(PTX version)PO"), ::llvm::cl::init(80)};
private:

  friend std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv(AllocateSharedMemoryNvOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv() {
  return impl::createAllocateSharedMemoryNv();
}

std::unique_ptr<::mlir::Pass> createAllocateSharedMemoryNv(AllocateSharedMemoryNvOptions options) {
  return impl::createAllocateSharedMemoryNv(std::move(options));
}
#undef GEN_PASS_DEF_ALLOCATESHAREDMEMORYNV
#endif // GEN_PASS_DEF_ALLOCATESHAREDMEMORYNV

//===----------------------------------------------------------------------===//
// ConvertTritonGPUToLLVM
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
struct ConvertTritonGPUToLLVMOptions {
  int32_t computeCapability = 80;
  int32_t ptxVersion = 80;
};
std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM();
std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM(ConvertTritonGPUToLLVMOptions options);
#undef GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#endif // GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#ifdef GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM

namespace impl {
  std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM(ConvertTritonGPUToLLVMOptions options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class ConvertTritonGPUToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonGPUToLLVMBase;

  ConvertTritonGPUToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonGPUToLLVMBase(const ConvertTritonGPUToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonGPUToLLVMBase& operator=(const ConvertTritonGPUToLLVMBase &) = delete;
  ConvertTritonGPUToLLVMBase(ConvertTritonGPUToLLVMBase &&) = delete;
  ConvertTritonGPUToLLVMBase& operator=(ConvertTritonGPUToLLVMBase &&) = delete;
  ~ConvertTritonGPUToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-gpu-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-gpu-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert TritonGPU to LLVM)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonGPUToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonGPUToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::gpu::GPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::triton::nvgpu::NVGPUDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonGPUToLLVMBase<DerivedT>)

  ConvertTritonGPUToLLVMBase(ConvertTritonGPUToLLVMOptions options) : ConvertTritonGPUToLLVMBase() {
    computeCapability = std::move(options.computeCapability);
    ptxVersion = std::move(options.ptxVersion);
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc(R"PO(device compute capability)PO"), ::llvm::cl::init(80)};
  ::mlir::Pass::Option<int32_t> ptxVersion{*this, "ptx-version", ::llvm::cl::desc(R"PO(PTX version)PO"), ::llvm::cl::init(80)};
private:

  friend std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM(ConvertTritonGPUToLLVMOptions options) {
    return std::make_unique<DerivedT>(std::move(options));
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM() {
  return impl::createConvertTritonGPUToLLVM();
}

std::unique_ptr<::mlir::Pass> createConvertTritonGPUToLLVM(ConvertTritonGPUToLLVMOptions options) {
  return impl::createConvertTritonGPUToLLVM(std::move(options));
}
#undef GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM
#endif // GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM

//===----------------------------------------------------------------------===//
// ConvertWarpSpecializeToLLVM
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CONVERTWARPSPECIALIZETOLLVM
std::unique_ptr<::mlir::Pass> createConvertWarpSpecializeToLLVM();
#undef GEN_PASS_DECL_CONVERTWARPSPECIALIZETOLLVM
#endif // GEN_PASS_DECL_CONVERTWARPSPECIALIZETOLLVM
#ifdef GEN_PASS_DEF_CONVERTWARPSPECIALIZETOLLVM

namespace impl {
  std::unique_ptr<::mlir::Pass> createConvertWarpSpecializeToLLVM();
} // namespace impl
namespace impl {

template <typename DerivedT>
class ConvertWarpSpecializeToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertWarpSpecializeToLLVMBase;

  ConvertWarpSpecializeToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertWarpSpecializeToLLVMBase(const ConvertWarpSpecializeToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertWarpSpecializeToLLVMBase& operator=(const ConvertWarpSpecializeToLLVMBase &) = delete;
  ConvertWarpSpecializeToLLVMBase(ConvertWarpSpecializeToLLVMBase &&) = delete;
  ConvertWarpSpecializeToLLVMBase& operator=(ConvertWarpSpecializeToLLVMBase &&) = delete;
  ~ConvertWarpSpecializeToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-warp-specialize-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-warp-specialize-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(lower `ttg.warp_specialize` to LLVM)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertWarpSpecializeToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertWarpSpecializeToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertWarpSpecializeToLLVMBase<DerivedT>)

protected:
private:

  friend std::unique_ptr<::mlir::Pass> createConvertWarpSpecializeToLLVM() {
    return std::make_unique<DerivedT>();
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createConvertWarpSpecializeToLLVM() {
  return impl::createConvertWarpSpecializeToLLVM();
}
#undef GEN_PASS_DEF_CONVERTWARPSPECIALIZETOLLVM
#endif // GEN_PASS_DEF_CONVERTWARPSPECIALIZETOLLVM
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// AllocateSharedMemoryNv Registration
//===----------------------------------------------------------------------===//

inline void registerAllocateSharedMemoryNv() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createAllocateSharedMemoryNv();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerAllocateSharedMemoryNvPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createAllocateSharedMemoryNv();
  });
}

//===----------------------------------------------------------------------===//
// ConvertTritonGPUToLLVM Registration
//===----------------------------------------------------------------------===//

inline void registerConvertTritonGPUToLLVM() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertTritonGPUToLLVM();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerConvertTritonGPUToLLVMPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertTritonGPUToLLVM();
  });
}

//===----------------------------------------------------------------------===//
// ConvertWarpSpecializeToLLVM Registration
//===----------------------------------------------------------------------===//

inline void registerConvertWarpSpecializeToLLVM() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertWarpSpecializeToLLVM();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerConvertWarpSpecializeToLLVMPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createConvertWarpSpecializeToLLVM();
  });
}

//===----------------------------------------------------------------------===//
// TritonNVIDIAGPUToLLVM Registration
//===----------------------------------------------------------------------===//

inline void registerTritonNVIDIAGPUToLLVMPasses() {
  registerAllocateSharedMemoryNv();
  registerConvertTritonGPUToLLVM();
  registerConvertWarpSpecializeToLLVM();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class AllocateSharedMemoryNvBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = AllocateSharedMemoryNvBase;

  AllocateSharedMemoryNvBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  AllocateSharedMemoryNvBase(const AllocateSharedMemoryNvBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  AllocateSharedMemoryNvBase& operator=(const AllocateSharedMemoryNvBase &) = delete;
  AllocateSharedMemoryNvBase(AllocateSharedMemoryNvBase &&) = delete;
  AllocateSharedMemoryNvBase& operator=(AllocateSharedMemoryNvBase &&) = delete;
  ~AllocateSharedMemoryNvBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("allocate-shared-memory-nv");
  }
  ::llvm::StringRef getArgument() const override { return "allocate-shared-memory-nv"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Add metadata for shared memory allocation for Nvidia)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("AllocateSharedMemoryNv");
  }
  ::llvm::StringRef getName() const override { return "AllocateSharedMemoryNv"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(AllocateSharedMemoryNvBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc(R"PO(device compute capability)PO"), ::llvm::cl::init(80)};
  ::mlir::Pass::Option<int32_t> ptxVersion{*this, "ptx-version", ::llvm::cl::desc(R"PO(PTX version)PO"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class ConvertTritonGPUToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonGPUToLLVMBase;

  ConvertTritonGPUToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonGPUToLLVMBase(const ConvertTritonGPUToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonGPUToLLVMBase& operator=(const ConvertTritonGPUToLLVMBase &) = delete;
  ConvertTritonGPUToLLVMBase(ConvertTritonGPUToLLVMBase &&) = delete;
  ConvertTritonGPUToLLVMBase& operator=(ConvertTritonGPUToLLVMBase &&) = delete;
  ~ConvertTritonGPUToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-gpu-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-gpu-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(Convert TritonGPU to LLVM)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonGPUToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonGPUToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::gpu::GPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::triton::nvgpu::NVGPUDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonGPUToLLVMBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc(R"PO(device compute capability)PO"), ::llvm::cl::init(80)};
  ::mlir::Pass::Option<int32_t> ptxVersion{*this, "ptx-version", ::llvm::cl::desc(R"PO(PTX version)PO"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class ConvertWarpSpecializeToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertWarpSpecializeToLLVMBase;

  ConvertWarpSpecializeToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertWarpSpecializeToLLVMBase(const ConvertWarpSpecializeToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertWarpSpecializeToLLVMBase& operator=(const ConvertWarpSpecializeToLLVMBase &) = delete;
  ConvertWarpSpecializeToLLVMBase(ConvertWarpSpecializeToLLVMBase &&) = delete;
  ConvertWarpSpecializeToLLVMBase& operator=(ConvertWarpSpecializeToLLVMBase &&) = delete;
  ~ConvertWarpSpecializeToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-warp-specialize-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-warp-specialize-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return R"PD(lower `ttg.warp_specialize` to LLVM)PD"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertWarpSpecializeToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertWarpSpecializeToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertWarpSpecializeToLLVMBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
