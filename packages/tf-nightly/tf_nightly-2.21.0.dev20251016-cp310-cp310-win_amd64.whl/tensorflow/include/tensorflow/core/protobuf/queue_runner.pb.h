// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/protobuf/queue_runner.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto_2epb_2eh
#define tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/protobuf/error_codes.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto;
}  // extern "C"
namespace tensorflow {
class QueueRunnerDef;
struct QueueRunnerDefDefaultTypeInternal;
PROTOBUF_EXPORT extern QueueRunnerDefDefaultTypeInternal _QueueRunnerDef_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull QueueRunnerDef_class_data_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT QueueRunnerDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.QueueRunnerDef) */ {
 public:
  inline QueueRunnerDef() : QueueRunnerDef(nullptr) {}
  ~QueueRunnerDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueueRunnerDef* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueueRunnerDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueueRunnerDef(::google::protobuf::internal::ConstantInitialized);

  inline QueueRunnerDef(const QueueRunnerDef& from) : QueueRunnerDef(nullptr, from) {}
  inline QueueRunnerDef(QueueRunnerDef&& from) noexcept
      : QueueRunnerDef(nullptr, ::std::move(from)) {}
  inline QueueRunnerDef& operator=(const QueueRunnerDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueRunnerDef& operator=(QueueRunnerDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueueRunnerDef& default_instance() {
    return *reinterpret_cast<const QueueRunnerDef*>(
        &_QueueRunnerDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueueRunnerDef& a, QueueRunnerDef& b) { a.Swap(&b); }
  inline void Swap(QueueRunnerDef* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueRunnerDef* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueueRunnerDef* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueueRunnerDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueueRunnerDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueueRunnerDef& from) { QueueRunnerDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueueRunnerDef* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.QueueRunnerDef"; }

 protected:
  explicit QueueRunnerDef(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  QueueRunnerDef(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const QueueRunnerDef& from);
  QueueRunnerDef(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, QueueRunnerDef&& from) noexcept
      : QueueRunnerDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnqueueOpNameFieldNumber = 2,
    kQueueClosedExceptionTypesFieldNumber = 5,
    kQueueNameFieldNumber = 1,
    kCloseOpNameFieldNumber = 3,
    kCancelOpNameFieldNumber = 4,
  };
  // repeated string enqueue_op_name = 2;
  int enqueue_op_name_size() const;
  private:
  int _internal_enqueue_op_name_size() const;

  public:
  void clear_enqueue_op_name() ;
  const ::std::string& enqueue_op_name(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_enqueue_op_name(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_enqueue_op_name(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_enqueue_op_name();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_enqueue_op_name(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& enqueue_op_name() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_enqueue_op_name();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_enqueue_op_name() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_enqueue_op_name();

  public:
  // repeated .tensorflow.error.Code queue_closed_exception_types = 5;
  int queue_closed_exception_types_size() const;
  private:
  int _internal_queue_closed_exception_types_size() const;

  public:
  void clear_queue_closed_exception_types() ;
  public:
  ::tensorflow::error::Code queue_closed_exception_types(int index) const;
  void set_queue_closed_exception_types(int index, ::tensorflow::error::Code value);
  void add_queue_closed_exception_types(::tensorflow::error::Code value);
  const ::google::protobuf::RepeatedField<int>& queue_closed_exception_types() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_queue_closed_exception_types();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_queue_closed_exception_types() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_queue_closed_exception_types();

  public:
  // string queue_name = 1;
  void clear_queue_name() ;
  const ::std::string& queue_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_queue_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_queue_name();
  void set_allocated_queue_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_queue_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_queue_name();

  public:
  // string close_op_name = 3;
  void clear_close_op_name() ;
  const ::std::string& close_op_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_close_op_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_close_op_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_close_op_name();
  void set_allocated_close_op_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_close_op_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_close_op_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_close_op_name();

  public:
  // string cancel_op_name = 4;
  void clear_cancel_op_name() ;
  const ::std::string& cancel_op_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_cancel_op_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_cancel_op_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_cancel_op_name();
  void set_allocated_cancel_op_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_cancel_op_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_op_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_cancel_op_name();

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.QueueRunnerDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 86,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const QueueRunnerDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> enqueue_op_name_;
    ::google::protobuf::RepeatedField<int> queue_closed_exception_types_;
    ::google::protobuf::internal::CachedSize _queue_closed_exception_types_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr close_op_name_;
    ::google::protobuf::internal::ArenaStringPtr cancel_op_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull QueueRunnerDef_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueueRunnerDef

// string queue_name = 1;
inline void QueueRunnerDef::clear_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& QueueRunnerDef::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.QueueRunnerDef.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QueueRunnerDef::set_queue_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.QueueRunnerDef.queue_name)
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::mutable_queue_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.QueueRunnerDef.queue_name)
  return _s;
}
inline const ::std::string& QueueRunnerDef::_internal_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_name_.Get();
}
inline void QueueRunnerDef::_internal_set_queue_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.queue_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::_internal_mutable_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.queue_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QueueRunnerDef::release_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.QueueRunnerDef.queue_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.queue_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.queue_name_.Set("", GetArena());
  }
  return released;
}
inline void QueueRunnerDef::set_allocated_queue_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.queue_name_.IsDefault()) {
    _impl_.queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.QueueRunnerDef.queue_name)
}

// repeated string enqueue_op_name = 2;
inline int QueueRunnerDef::_internal_enqueue_op_name_size() const {
  return _internal_enqueue_op_name().size();
}
inline int QueueRunnerDef::enqueue_op_name_size() const {
  return _internal_enqueue_op_name_size();
}
inline void QueueRunnerDef::clear_enqueue_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enqueue_op_name_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::add_enqueue_op_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_enqueue_op_name()->Add();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.QueueRunnerDef.enqueue_op_name)
  return _s;
}
inline const ::std::string& QueueRunnerDef::enqueue_op_name(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.QueueRunnerDef.enqueue_op_name)
  return _internal_enqueue_op_name().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::mutable_enqueue_op_name(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.QueueRunnerDef.enqueue_op_name)
  return _internal_mutable_enqueue_op_name()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void QueueRunnerDef::set_enqueue_op_name(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_enqueue_op_name()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:tensorflow.QueueRunnerDef.enqueue_op_name)
}
template <typename Arg_, typename... Args_>
inline void QueueRunnerDef::add_enqueue_op_name(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_enqueue_op_name(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tensorflow.QueueRunnerDef.enqueue_op_name)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& QueueRunnerDef::enqueue_op_name()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.QueueRunnerDef.enqueue_op_name)
  return _internal_enqueue_op_name();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
QueueRunnerDef::mutable_enqueue_op_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.QueueRunnerDef.enqueue_op_name)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_enqueue_op_name();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
QueueRunnerDef::_internal_enqueue_op_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enqueue_op_name_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
QueueRunnerDef::_internal_mutable_enqueue_op_name() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.enqueue_op_name_;
}

// string close_op_name = 3;
inline void QueueRunnerDef::clear_close_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_op_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& QueueRunnerDef::close_op_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.QueueRunnerDef.close_op_name)
  return _internal_close_op_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QueueRunnerDef::set_close_op_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.close_op_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.QueueRunnerDef.close_op_name)
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::mutable_close_op_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_close_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.QueueRunnerDef.close_op_name)
  return _s;
}
inline const ::std::string& QueueRunnerDef::_internal_close_op_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_op_name_.Get();
}
inline void QueueRunnerDef::_internal_set_close_op_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.close_op_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::_internal_mutable_close_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.close_op_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QueueRunnerDef::release_close_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.QueueRunnerDef.close_op_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.close_op_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.close_op_name_.Set("", GetArena());
  }
  return released;
}
inline void QueueRunnerDef::set_allocated_close_op_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.close_op_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.close_op_name_.IsDefault()) {
    _impl_.close_op_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.QueueRunnerDef.close_op_name)
}

// string cancel_op_name = 4;
inline void QueueRunnerDef::clear_cancel_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cancel_op_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& QueueRunnerDef::cancel_op_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.QueueRunnerDef.cancel_op_name)
  return _internal_cancel_op_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QueueRunnerDef::set_cancel_op_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cancel_op_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.QueueRunnerDef.cancel_op_name)
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::mutable_cancel_op_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_cancel_op_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.QueueRunnerDef.cancel_op_name)
  return _s;
}
inline const ::std::string& QueueRunnerDef::_internal_cancel_op_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cancel_op_name_.Get();
}
inline void QueueRunnerDef::_internal_set_cancel_op_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cancel_op_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QueueRunnerDef::_internal_mutable_cancel_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.cancel_op_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QueueRunnerDef::release_cancel_op_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.QueueRunnerDef.cancel_op_name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.cancel_op_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cancel_op_name_.Set("", GetArena());
  }
  return released;
}
inline void QueueRunnerDef::set_allocated_cancel_op_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cancel_op_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cancel_op_name_.IsDefault()) {
    _impl_.cancel_op_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.QueueRunnerDef.cancel_op_name)
}

// repeated .tensorflow.error.Code queue_closed_exception_types = 5;
inline int QueueRunnerDef::_internal_queue_closed_exception_types_size() const {
  return _internal_queue_closed_exception_types().size();
}
inline int QueueRunnerDef::queue_closed_exception_types_size() const {
  return _internal_queue_closed_exception_types_size();
}
inline void QueueRunnerDef::clear_queue_closed_exception_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_closed_exception_types_.Clear();
}
inline ::tensorflow::error::Code QueueRunnerDef::queue_closed_exception_types(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.QueueRunnerDef.queue_closed_exception_types)
  return static_cast<::tensorflow::error::Code>(_internal_queue_closed_exception_types().Get(index));
}
inline void QueueRunnerDef::set_queue_closed_exception_types(int index, ::tensorflow::error::Code value) {
  _internal_mutable_queue_closed_exception_types()->Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.QueueRunnerDef.queue_closed_exception_types)
}
inline void QueueRunnerDef::add_queue_closed_exception_types(::tensorflow::error::Code value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_queue_closed_exception_types()->Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.QueueRunnerDef.queue_closed_exception_types)
}
inline const ::google::protobuf::RepeatedField<int>& QueueRunnerDef::queue_closed_exception_types() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.QueueRunnerDef.queue_closed_exception_types)
  return _internal_queue_closed_exception_types();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL QueueRunnerDef::mutable_queue_closed_exception_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.QueueRunnerDef.queue_closed_exception_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_queue_closed_exception_types();
}
inline const ::google::protobuf::RepeatedField<int>& QueueRunnerDef::_internal_queue_closed_exception_types()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_closed_exception_types_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
QueueRunnerDef::_internal_mutable_queue_closed_exception_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.queue_closed_exception_types_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcore_2fprotobuf_2fqueue_5frunner_2eproto_2epb_2eh
