// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xla/stream_executor/blas.proto
// Protobuf C++ Version: 6.31.1

#ifndef xla_2fstream_5fexecutor_2fblas_2eproto_2epb_2eh
#define xla_2fstream_5fexecutor_2fblas_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xla_2fstream_5fexecutor_2fblas_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fstream_5fexecutor_2fblas_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_xla_2fstream_5fexecutor_2fblas_2eproto;
}  // extern "C"
namespace xla {
enum BlasComputationTypeProto : int;
PROTOBUF_EXPORT extern const uint32_t BlasComputationTypeProto_internal_data_[];
enum BlasTransposeProto : int;
PROTOBUF_EXPORT extern const uint32_t BlasTransposeProto_internal_data_[];
}  // namespace xla
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::xla::BlasComputationTypeProto_internal_data_>
    internal::EnumTraitsImpl::value<::xla::BlasComputationTypeProto>;
template <>
internal::EnumTraitsT<::xla::BlasTransposeProto_internal_data_>
    internal::EnumTraitsImpl::value<::xla::BlasTransposeProto>;
}  // namespace protobuf
}  // namespace google

namespace xla {
enum BlasTransposeProto : int {
  BLAS_NO_TRANSPOSE = 0,
  BLAS_TRANSPOSE = 1,
  BLAS_CONJUGATE_TRANSPOSE = 2,
  BlasTransposeProto_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  BlasTransposeProto_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT extern const uint32_t BlasTransposeProto_internal_data_[];
inline constexpr BlasTransposeProto BlasTransposeProto_MIN =
    static_cast<BlasTransposeProto>(0);
inline constexpr BlasTransposeProto BlasTransposeProto_MAX =
    static_cast<BlasTransposeProto>(2);
inline bool BlasTransposeProto_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int BlasTransposeProto_ARRAYSIZE = 2 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL BlasTransposeProto_descriptor();
template <typename T>
const ::std::string& BlasTransposeProto_Name(T value) {
  static_assert(::std::is_same<T, BlasTransposeProto>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to BlasTransposeProto_Name().");
  return BlasTransposeProto_Name(static_cast<BlasTransposeProto>(value));
}
template <>
inline const ::std::string& BlasTransposeProto_Name(BlasTransposeProto value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BlasTransposeProto_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool BlasTransposeProto_Parse(
    ::absl::string_view name, BlasTransposeProto* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlasTransposeProto>(BlasTransposeProto_descriptor(), name,
                                           value);
}
enum BlasComputationTypeProto : int {
  BLAS_COMPUTATION_TYPE_UNSET = 0,
  BLAS_COMPUTATION_TYPE_F16 = 1,
  BLAS_COMPUTATION_TYPE_F32 = 2,
  BLAS_COMPUTATION_TYPE_F64 = 3,
  BLAS_COMPUTATION_TYPE_I32 = 4,
  BLAS_COMPUTATION_TYPE_F16_AS_F32 = 5,
  BLAS_COMPUTATION_TYPE_BF16_AS_F32 = 6,
  BLAS_COMPUTATION_TYPE_TF32_AS_F32 = 7,
  BlasComputationTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  BlasComputationTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

PROTOBUF_EXPORT extern const uint32_t BlasComputationTypeProto_internal_data_[];
inline constexpr BlasComputationTypeProto BlasComputationTypeProto_MIN =
    static_cast<BlasComputationTypeProto>(0);
inline constexpr BlasComputationTypeProto BlasComputationTypeProto_MAX =
    static_cast<BlasComputationTypeProto>(7);
inline bool BlasComputationTypeProto_IsValid(int value) {
  return 0 <= value && value <= 7;
}
inline constexpr int BlasComputationTypeProto_ARRAYSIZE = 7 + 1;
PROTOBUF_EXPORT const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL BlasComputationTypeProto_descriptor();
template <typename T>
const ::std::string& BlasComputationTypeProto_Name(T value) {
  static_assert(::std::is_same<T, BlasComputationTypeProto>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to BlasComputationTypeProto_Name().");
  return BlasComputationTypeProto_Name(static_cast<BlasComputationTypeProto>(value));
}
template <>
inline const ::std::string& BlasComputationTypeProto_Name(BlasComputationTypeProto value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BlasComputationTypeProto_descriptor, 0, 7>(
      static_cast<int>(value));
}
inline bool BlasComputationTypeProto_Parse(
    ::absl::string_view name, BlasComputationTypeProto* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlasComputationTypeProto>(BlasComputationTypeProto_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace xla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xla::BlasTransposeProto> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::xla::BlasTransposeProto>() {
  return ::xla::BlasTransposeProto_descriptor();
}
template <>
struct is_proto_enum<::xla::BlasComputationTypeProto> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::xla::BlasComputationTypeProto>() {
  return ::xla::BlasComputationTypeProto_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xla_2fstream_5fexecutor_2fblas_2eproto_2epb_2eh
