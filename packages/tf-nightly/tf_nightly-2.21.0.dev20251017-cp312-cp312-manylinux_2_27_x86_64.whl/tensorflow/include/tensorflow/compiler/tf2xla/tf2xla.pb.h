// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/compiler/tf2xla/tf2xla.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto_2epb_2eh
#define tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
}  // extern "C"
namespace tensorflow {
namespace tf2xla {
class Config;
struct ConfigDefaultTypeInternal;
PROTOBUF_EXPORT extern ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Config_class_data_;
class Feed;
struct FeedDefaultTypeInternal;
PROTOBUF_EXPORT extern FeedDefaultTypeInternal _Feed_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Feed_class_data_;
class Fetch;
struct FetchDefaultTypeInternal;
PROTOBUF_EXPORT extern FetchDefaultTypeInternal _Fetch_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Fetch_class_data_;
class TensorId;
struct TensorIdDefaultTypeInternal;
PROTOBUF_EXPORT extern TensorIdDefaultTypeInternal _TensorId_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull TensorId_class_data_;
class Variable;
struct VariableDefaultTypeInternal;
PROTOBUF_EXPORT extern VariableDefaultTypeInternal _Variable_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Variable_class_data_;
}  // namespace tf2xla
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {
namespace tf2xla {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT TensorId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tf2xla.TensorId) */ {
 public:
  inline TensorId() : TensorId(nullptr) {}
  ~TensorId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TensorId* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TensorId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TensorId(::google::protobuf::internal::ConstantInitialized);

  inline TensorId(const TensorId& from) : TensorId(nullptr, from) {}
  inline TensorId(TensorId&& from) noexcept
      : TensorId(nullptr, ::std::move(from)) {}
  inline TensorId& operator=(const TensorId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorId& operator=(TensorId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorId& default_instance() {
    return *reinterpret_cast<const TensorId*>(
        &_TensorId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TensorId& a, TensorId& b) { a.Swap(&b); }
  inline void Swap(TensorId* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorId* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorId* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TensorId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TensorId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TensorId& from) { TensorId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TensorId* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tf2xla.TensorId"; }

 protected:
  explicit TensorId(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TensorId(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TensorId& from);
  TensorId(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TensorId&& from) noexcept
      : TensorId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 1,
    kOutputIndexFieldNumber = 2,
  };
  // string node_name = 1;
  void clear_node_name() ;
  const ::std::string& node_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_node_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_node_name();
  void set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_node_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_node_name();

  public:
  // int64 output_index = 2;
  void clear_output_index() ;
  ::int64_t output_index() const;
  void set_output_index(::int64_t value);

  private:
  ::int64_t _internal_output_index() const;
  void _internal_set_output_index(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tf2xla.TensorId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 44,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TensorId& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    ::int64_t output_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull TensorId_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT Variable final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tf2xla.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Variable* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Variable));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Variable(::google::protobuf::internal::ConstantInitialized);

  inline Variable(const Variable& from) : Variable(nullptr, from) {}
  inline Variable(Variable&& from) noexcept
      : Variable(nullptr, ::std::move(from)) {}
  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *reinterpret_cast<const Variable*>(
        &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Variable& a, Variable& b) { a.Swap(&b); }
  inline void Swap(Variable* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Variable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Variable& from) { Variable::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Variable* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tf2xla.Variable"; }

 protected:
  explicit Variable(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Variable(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Variable& from);
  Variable(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Variable&& from) noexcept
      : Variable(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 1,
    kNameFieldNumber = 2,
    kShapeFieldNumber = 3,
    kTypeFieldNumber = 4,
    kReadonlyFieldNumber = 5,
  };
  // string node_name = 1;
  void clear_node_name() ;
  const ::std::string& node_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_node_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_node_name();
  void set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_node_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_node_name();

  public:
  // string name = 2;
  void clear_name() ;
  const ::std::string& name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // .tensorflow.TensorShapeProto shape = 3;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  [[nodiscard]] ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE release_shape();
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL _internal_mutable_shape();

  public:
  // .tensorflow.DataType type = 4;
  void clear_type() ;
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);

  private:
  ::tensorflow::DataType _internal_type() const;
  void _internal_set_type(::tensorflow::DataType value);

  public:
  // bool readonly = 5;
  void clear_readonly() ;
  bool readonly() const;
  void set_readonly(bool value);

  private:
  bool _internal_readonly() const;
  void _internal_set_readonly(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tf2xla.Variable)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 48,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Variable& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE shape_;
    int type_;
    bool readonly_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Variable_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT Fetch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tf2xla.Fetch) */ {
 public:
  inline Fetch() : Fetch(nullptr) {}
  ~Fetch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Fetch* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Fetch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Fetch(::google::protobuf::internal::ConstantInitialized);

  inline Fetch(const Fetch& from) : Fetch(nullptr, from) {}
  inline Fetch(Fetch&& from) noexcept
      : Fetch(nullptr, ::std::move(from)) {}
  inline Fetch& operator=(const Fetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fetch& operator=(Fetch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fetch& default_instance() {
    return *reinterpret_cast<const Fetch*>(
        &_Fetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Fetch& a, Fetch& b) { a.Swap(&b); }
  inline void Swap(Fetch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fetch* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fetch* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Fetch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Fetch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Fetch& from) { Fetch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Fetch* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tf2xla.Fetch"; }

 protected:
  explicit Fetch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Fetch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Fetch& from);
  Fetch(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Fetch&& from) noexcept
      : Fetch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kShapeFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string name = 2;
  void clear_name() ;
  const ::std::string& name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // .tensorflow.tf2xla.TensorId id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::tensorflow::tf2xla::TensorId& id() const;
  [[nodiscard]] ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE release_id();
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL mutable_id();
  void set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value);
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE unsafe_arena_release_id();

  private:
  const ::tensorflow::tf2xla::TensorId& _internal_id() const;
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // .tensorflow.TensorShapeProto shape = 3;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  [[nodiscard]] ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE release_shape();
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL _internal_mutable_shape();

  public:
  // .tensorflow.DataType type = 4;
  void clear_type() ;
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);

  private:
  ::tensorflow::DataType _internal_type() const;
  void _internal_set_type(::tensorflow::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tf2xla.Fetch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   2, 36,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Fetch& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE id_;
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE shape_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Fetch_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT Feed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tf2xla.Feed) */ {
 public:
  inline Feed() : Feed(nullptr) {}
  ~Feed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Feed* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Feed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Feed(::google::protobuf::internal::ConstantInitialized);

  inline Feed(const Feed& from) : Feed(nullptr, from) {}
  inline Feed(Feed&& from) noexcept
      : Feed(nullptr, ::std::move(from)) {}
  inline Feed& operator=(const Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feed& operator=(Feed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feed& default_instance() {
    return *reinterpret_cast<const Feed*>(
        &_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Feed& a, Feed& b) { a.Swap(&b); }
  inline void Swap(Feed* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feed* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feed* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Feed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Feed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Feed& from) { Feed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Feed* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tf2xla.Feed"; }

 protected:
  explicit Feed(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Feed(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Feed& from);
  Feed(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Feed&& from) noexcept
      : Feed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kShapeFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string name = 3;
  void clear_name() ;
  const ::std::string& name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // .tensorflow.tf2xla.TensorId id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::tensorflow::tf2xla::TensorId& id() const;
  [[nodiscard]] ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE release_id();
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL mutable_id();
  void set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value);
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE unsafe_arena_release_id();

  private:
  const ::tensorflow::tf2xla::TensorId& _internal_id() const;
  ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape() ;
  const ::tensorflow::TensorShapeProto& shape() const;
  [[nodiscard]] ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE release_shape();
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value);
  ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE unsafe_arena_release_shape();

  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL _internal_mutable_shape();

  public:
  // .tensorflow.DataType type = 4;
  void clear_type() ;
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);

  private:
  ::tensorflow::DataType _internal_type() const;
  void _internal_set_type(::tensorflow::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.tf2xla.Feed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   2, 35,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Feed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE id_;
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE shape_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Feed_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT Config final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.tf2xla.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Config* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config(::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from) : Config(nullptr, from) {}
  inline Config(Config&& from) noexcept
      : Config(nullptr, ::std::move(from)) {}
  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *reinterpret_cast<const Config*>(
        &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Config& a, Config& b) { a.Swap(&b); }
  inline void Swap(Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Config& from) { Config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Config* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.tf2xla.Config"; }

 protected:
  explicit Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config& from);
  Config(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Config&& from) noexcept
      : Config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeedFieldNumber = 1,
    kFetchFieldNumber = 2,
    kVariableFieldNumber = 3,
  };
  // repeated .tensorflow.tf2xla.Feed feed = 1;
  int feed_size() const;
  private:
  int _internal_feed_size() const;

  public:
  void clear_feed() ;
  ::tensorflow::tf2xla::Feed* PROTOBUF_NONNULL mutable_feed(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>* PROTOBUF_NONNULL mutable_feed();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>& _internal_feed() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>* PROTOBUF_NONNULL _internal_mutable_feed();
  public:
  const ::tensorflow::tf2xla::Feed& feed(int index) const;
  ::tensorflow::tf2xla::Feed* PROTOBUF_NONNULL add_feed();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>& feed() const;
  // repeated .tensorflow.tf2xla.Fetch fetch = 2;
  int fetch_size() const;
  private:
  int _internal_fetch_size() const;

  public:
  void clear_fetch() ;
  ::tensorflow::tf2xla::Fetch* PROTOBUF_NONNULL mutable_fetch(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>* PROTOBUF_NONNULL mutable_fetch();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>& _internal_fetch() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>* PROTOBUF_NONNULL _internal_mutable_fetch();
  public:
  const ::tensorflow::tf2xla::Fetch& fetch(int index) const;
  ::tensorflow::tf2xla::Fetch* PROTOBUF_NONNULL add_fetch();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>& fetch() const;
  // repeated .tensorflow.tf2xla.Variable variable = 3;
  int variable_size() const;
  private:
  int _internal_variable_size() const;

  public:
  void clear_variable() ;
  ::tensorflow::tf2xla::Variable* PROTOBUF_NONNULL mutable_variable(int index);
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>* PROTOBUF_NONNULL mutable_variable();

  private:
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>& _internal_variable() const;
  ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>* PROTOBUF_NONNULL _internal_mutable_variable();
  public:
  const ::tensorflow::tf2xla::Variable& variable(int index) const;
  ::tensorflow::tf2xla::Variable* PROTOBUF_NONNULL add_variable();
  const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>& variable() const;
  // @@protoc_insertion_point(class_scope:tensorflow.tf2xla.Config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Config& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tensorflow::tf2xla::Feed > feed_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::tf2xla::Fetch > fetch_;
    ::google::protobuf::RepeatedPtrField< ::tensorflow::tf2xla::Variable > variable_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull Config_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TensorId

// string node_name = 1;
inline void TensorId::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TensorId::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.TensorId.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TensorId::set_node_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.TensorId.node_name)
}
inline ::std::string* PROTOBUF_NONNULL TensorId::mutable_node_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.TensorId.node_name)
  return _s;
}
inline const ::std::string& TensorId::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void TensorId::_internal_set_node_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TensorId::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.node_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TensorId::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.TensorId.node_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.node_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.node_name_.Set("", GetArena());
  }
  return released;
}
inline void TensorId::set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.node_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.TensorId.node_name)
}

// int64 output_index = 2;
inline void TensorId::clear_output_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_index_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TensorId::output_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.TensorId.output_index)
  return _internal_output_index();
}
inline void TensorId::set_output_index(::int64_t value) {
  _internal_set_output_index(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.TensorId.output_index)
}
inline ::int64_t TensorId::_internal_output_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_index_;
}
inline void TensorId::_internal_set_output_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_index_ = value;
}

// -------------------------------------------------------------------

// Feed

// .tensorflow.tf2xla.TensorId id = 1;
inline bool Feed::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline void Feed::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::tf2xla::TensorId& Feed::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::tf2xla::TensorId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tf2xla::TensorId&>(::tensorflow::tf2xla::_TensorId_default_instance_);
}
inline const ::tensorflow::tf2xla::TensorId& Feed::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Feed.id)
  return _internal_id();
}
inline void Feed::unsafe_arena_set_allocated_id(
    ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tf2xla.Feed.id)
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE Feed::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tf2xla::TensorId* released = _impl_.id_;
  _impl_.id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE Feed::unsafe_arena_release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Feed.id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tf2xla::TensorId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL Feed::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::tf2xla::TensorId>(GetArena());
    _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(p);
  }
  return _impl_.id_;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL Feed::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::tf2xla::TensorId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Feed.id)
  return _msg;
}
inline void Feed::set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Feed.id)
}

// .tensorflow.TensorShapeProto shape = 2;
inline bool Feed::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& Feed::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& Feed::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Feed.shape)
  return _internal_shape();
}
inline void Feed::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tf2xla.Feed.shape)
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Feed::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Feed::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Feed.shape)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Feed::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Feed::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Feed.shape)
  return _msg;
}
inline void Feed::set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Feed.shape)
}

// string name = 3;
inline void Feed::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Feed::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Feed.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Feed::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Feed.name)
}
inline ::std::string* PROTOBUF_NONNULL Feed::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Feed.name)
  return _s;
}
inline const ::std::string& Feed::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Feed::_internal_set_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Feed::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Feed::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Feed.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Feed::set_allocated_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Feed.name)
}

// .tensorflow.DataType type = 4;
inline void Feed::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tensorflow::DataType Feed::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Feed.type)
  return _internal_type();
}
inline void Feed::set_type(::tensorflow::DataType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Feed.type)
}
inline ::tensorflow::DataType Feed::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::DataType>(_impl_.type_);
}
inline void Feed::_internal_set_type(::tensorflow::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Fetch

// .tensorflow.tf2xla.TensorId id = 1;
inline bool Fetch::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline void Fetch::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tensorflow::tf2xla::TensorId& Fetch::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::tf2xla::TensorId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tf2xla::TensorId&>(::tensorflow::tf2xla::_TensorId_default_instance_);
}
inline const ::tensorflow::tf2xla::TensorId& Fetch::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Fetch.id)
  return _internal_id();
}
inline void Fetch::unsafe_arena_set_allocated_id(
    ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tf2xla.Fetch.id)
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE Fetch::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tf2xla::TensorId* released = _impl_.id_;
  _impl_.id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE Fetch::unsafe_arena_release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Fetch.id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::tf2xla::TensorId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL Fetch::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::tf2xla::TensorId>(GetArena());
    _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(p);
  }
  return _impl_.id_;
}
inline ::tensorflow::tf2xla::TensorId* PROTOBUF_NONNULL Fetch::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::tf2xla::TensorId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Fetch.id)
  return _msg;
}
inline void Fetch::set_allocated_id(::tensorflow::tf2xla::TensorId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.id_ = reinterpret_cast<::tensorflow::tf2xla::TensorId*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Fetch.id)
}

// string name = 2;
inline void Fetch::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Fetch::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Fetch.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Fetch::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Fetch.name)
}
inline ::std::string* PROTOBUF_NONNULL Fetch::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Fetch.name)
  return _s;
}
inline const ::std::string& Fetch::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Fetch::_internal_set_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Fetch::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Fetch::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Fetch.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Fetch::set_allocated_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Fetch.name)
}

// .tensorflow.TensorShapeProto shape = 3;
inline bool Fetch::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& Fetch::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& Fetch::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Fetch.shape)
  return _internal_shape();
}
inline void Fetch::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tf2xla.Fetch.shape)
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Fetch::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Fetch::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Fetch.shape)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Fetch::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Fetch::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Fetch.shape)
  return _msg;
}
inline void Fetch::set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Fetch.shape)
}

// .tensorflow.DataType type = 4;
inline void Fetch::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tensorflow::DataType Fetch::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Fetch.type)
  return _internal_type();
}
inline void Fetch::set_type(::tensorflow::DataType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Fetch.type)
}
inline ::tensorflow::DataType Fetch::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::DataType>(_impl_.type_);
}
inline void Fetch::_internal_set_type(::tensorflow::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Variable

// string node_name = 1;
inline void Variable::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Variable::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Variable.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Variable::set_node_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Variable.node_name)
}
inline ::std::string* PROTOBUF_NONNULL Variable::mutable_node_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Variable.node_name)
  return _s;
}
inline const ::std::string& Variable::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void Variable::_internal_set_node_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Variable::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.node_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Variable::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Variable.node_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.node_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.node_name_.Set("", GetArena());
  }
  return released;
}
inline void Variable::set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.node_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Variable.node_name)
}

// string name = 2;
inline void Variable::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Variable::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Variable.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Variable::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Variable.name)
}
inline ::std::string* PROTOBUF_NONNULL Variable::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Variable.name)
  return _s;
}
inline const ::std::string& Variable::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Variable::_internal_set_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Variable::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Variable::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Variable.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Variable::set_allocated_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Variable.name)
}

// .tensorflow.TensorShapeProto shape = 3;
inline bool Variable::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorShapeProto& Variable::_internal_shape() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& Variable::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Variable.shape)
  return _internal_shape();
}
inline void Variable::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tf2xla.Variable.shape)
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Variable::release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE Variable::unsafe_arena_release_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.tf2xla.Variable.shape)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Variable::_internal_mutable_shape() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorShapeProto>(GetArena());
    _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* PROTOBUF_NONNULL Variable::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Variable.shape)
  return _msg;
}
inline void Variable::set_allocated_shape(::tensorflow::TensorShapeProto* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.shape_ = reinterpret_cast<::tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tf2xla.Variable.shape)
}

// .tensorflow.DataType type = 4;
inline void Variable::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::tensorflow::DataType Variable::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Variable.type)
  return _internal_type();
}
inline void Variable::set_type(::tensorflow::DataType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Variable.type)
}
inline ::tensorflow::DataType Variable::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tensorflow::DataType>(_impl_.type_);
}
inline void Variable::_internal_set_type(::tensorflow::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bool readonly = 5;
inline void Variable::clear_readonly() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.readonly_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Variable::readonly() const {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Variable.readonly)
  return _internal_readonly();
}
inline void Variable::set_readonly(bool value) {
  _internal_set_readonly(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:tensorflow.tf2xla.Variable.readonly)
}
inline bool Variable::_internal_readonly() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.readonly_;
}
inline void Variable::_internal_set_readonly(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.readonly_ = value;
}

// -------------------------------------------------------------------

// Config

// repeated .tensorflow.tf2xla.Feed feed = 1;
inline int Config::_internal_feed_size() const {
  return _internal_feed().size();
}
inline int Config::feed_size() const {
  return _internal_feed_size();
}
inline void Config::clear_feed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feed_.Clear();
}
inline ::tensorflow::tf2xla::Feed* PROTOBUF_NONNULL Config::mutable_feed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Config.feed)
  return _internal_mutable_feed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>* PROTOBUF_NONNULL Config::mutable_feed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tf2xla.Config.feed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_feed();
}
inline const ::tensorflow::tf2xla::Feed& Config::feed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Config.feed)
  return _internal_feed().Get(index);
}
inline ::tensorflow::tf2xla::Feed* PROTOBUF_NONNULL Config::add_feed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::tf2xla::Feed* _add = _internal_mutable_feed()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.tf2xla.Config.feed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>& Config::feed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.tf2xla.Config.feed)
  return _internal_feed();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>&
Config::_internal_feed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feed_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Feed>* PROTOBUF_NONNULL
Config::_internal_mutable_feed() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.feed_;
}

// repeated .tensorflow.tf2xla.Fetch fetch = 2;
inline int Config::_internal_fetch_size() const {
  return _internal_fetch().size();
}
inline int Config::fetch_size() const {
  return _internal_fetch_size();
}
inline void Config::clear_fetch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fetch_.Clear();
}
inline ::tensorflow::tf2xla::Fetch* PROTOBUF_NONNULL Config::mutable_fetch(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Config.fetch)
  return _internal_mutable_fetch()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>* PROTOBUF_NONNULL Config::mutable_fetch()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tf2xla.Config.fetch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fetch();
}
inline const ::tensorflow::tf2xla::Fetch& Config::fetch(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Config.fetch)
  return _internal_fetch().Get(index);
}
inline ::tensorflow::tf2xla::Fetch* PROTOBUF_NONNULL Config::add_fetch()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::tf2xla::Fetch* _add = _internal_mutable_fetch()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.tf2xla.Config.fetch)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>& Config::fetch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.tf2xla.Config.fetch)
  return _internal_fetch();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>&
Config::_internal_fetch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fetch_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Fetch>* PROTOBUF_NONNULL
Config::_internal_mutable_fetch() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fetch_;
}

// repeated .tensorflow.tf2xla.Variable variable = 3;
inline int Config::_internal_variable_size() const {
  return _internal_variable().size();
}
inline int Config::variable_size() const {
  return _internal_variable_size();
}
inline void Config::clear_variable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variable_.Clear();
}
inline ::tensorflow::tf2xla::Variable* PROTOBUF_NONNULL Config::mutable_variable(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tensorflow.tf2xla.Config.variable)
  return _internal_mutable_variable()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>* PROTOBUF_NONNULL Config::mutable_variable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tf2xla.Config.variable)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_variable();
}
inline const ::tensorflow::tf2xla::Variable& Config::variable(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.tf2xla.Config.variable)
  return _internal_variable().Get(index);
}
inline ::tensorflow::tf2xla::Variable* PROTOBUF_NONNULL Config::add_variable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tensorflow::tf2xla::Variable* _add = _internal_mutable_variable()->Add();
  // @@protoc_insertion_point(field_add:tensorflow.tf2xla.Config.variable)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>& Config::variable() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tensorflow.tf2xla.Config.variable)
  return _internal_variable();
}
inline const ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>&
Config::_internal_variable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variable_;
}
inline ::google::protobuf::RepeatedPtrField<::tensorflow::tf2xla::Variable>* PROTOBUF_NONNULL
Config::_internal_mutable_variable() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.variable_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tf2xla
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcompiler_2ftf2xla_2ftf2xla_2eproto_2epb_2eh
