[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cloudmask-aws"
version = "0.4.1"
description = "Anonymize AWS infrastructure identifiers for secure LLM processing"
readme = "README.md"
authors = [
    {name = "Sam Fakhreddine", email = "sam.fakhreddine@gmail.com"}
]
maintainers = [
    {name = "Sam Fakhreddine", email = "sam.fakhreddine@gmail.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = [
    "aws",
    "anonymization",
    "security",
    "privacy",
    "llm",
    "infrastructure",
    "cloud",
    "data-privacy",
    "pii",
    "masking",
    "obfuscation",
]
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0.3",
    "pyperclip>=1.11.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "black>=25.9.0",
    "ruff>=0.14.0",
    "mypy>=1.18.2",
    "types-tqdm>=4.66.0",
    "pydocstyle>=6.3.0",
    "pre-commit>=4.3.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "tqdm>=4.66.0",
]
performance = [
    "tqdm>=4.66.0",
]

[project.urls]
Homepage = "https://github.com/sam-fakhreddine/cloudmask-aws"
Documentation = "https://github.com/sam-fakhreddine/cloudmask-aws#readme"
Repository = "https://github.com/sam-fakhreddine/cloudmask-aws"
"Bug Tracker" = "https://github.com/sam-fakhreddine/cloudmask-aws/issues"
"Changelog" = "https://github.com/sam-fakhreddine/cloudmask-aws/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/sam-fakhreddine/cloudmask-aws"

[project.scripts]
cloudmask = "cloudmask.cli.cli:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["cloudmask*"]

[tool.setuptools.package-data]
cloudmask = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip without explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101"]  # allow unused args and asserts in tests

[tool.ruff.lint.isort]
known-first-party = ["cloudmask"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["yaml", "pyperclip", "tomllib", "tomli"]
ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
match = '(?!test_).*\.py'
match-dir = '^(?!(\.tox|\.eggs|build|dist)).*'
add-ignore = ["D100", "D104"]  # Missing docstring in public module/package

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=cloudmask --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
