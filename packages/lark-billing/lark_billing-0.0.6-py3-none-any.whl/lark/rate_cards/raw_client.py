# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.create_credit_grant_interface import CreateCreditGrantInterface
from ..types.create_fixed_rate_interface import CreateFixedRateInterface
from ..types.create_rate_card_response import CreateRateCardResponse
from ..types.create_rate_card_version_response import CreateRateCardVersionResponse
from ..types.credit_grant_resource import CreditGrantResource
from ..types.feature_access_resource import FeatureAccessResource
from ..types.fixed_rate_interface import FixedRateInterface
from ..types.get_rate_card_response import GetRateCardResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_rate_cards_response import ListRateCardsResponse
from .types.create_rate_card_request_billing_interval import CreateRateCardRequestBillingInterval
from .types.create_rate_card_request_usage_based_rates_item import CreateRateCardRequestUsageBasedRatesItem
from .types.create_rate_card_version_request_usage_based_rates_item import (
    CreateRateCardVersionRequestUsageBasedRatesItem,
)
from .types.create_rate_card_version_request_version_type import CreateRateCardVersionRequestVersionType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawRateCardsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_rate_cards(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ListRateCardsResponse]:
        """
        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListRateCardsResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "rate-cards",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListRateCardsResponse,
                    parse_obj_as(
                        type_=ListRateCardsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_rate_card(
        self,
        *,
        name: str,
        description: str,
        usage_based_rates: typing.Sequence[CreateRateCardRequestUsageBasedRatesItem],
        billing_interval: CreateRateCardRequestBillingInterval,
        fixed_rates: typing.Optional[typing.Sequence[CreateFixedRateInterface]] = OMIT,
        credit_grants: typing.Optional[typing.Sequence[CreateCreditGrantInterface]] = OMIT,
        feature_access: typing.Optional[typing.Sequence[FeatureAccessResource]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateRateCardResponse]:
        """
        Parameters
        ----------
        name : str

        description : str

        usage_based_rates : typing.Sequence[CreateRateCardRequestUsageBasedRatesItem]

        billing_interval : CreateRateCardRequestBillingInterval

        fixed_rates : typing.Optional[typing.Sequence[CreateFixedRateInterface]]

        credit_grants : typing.Optional[typing.Sequence[CreateCreditGrantInterface]]

        feature_access : typing.Optional[typing.Sequence[FeatureAccessResource]]

        metadata : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateRateCardResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "rate-cards",
            method="POST",
            json={
                "name": name,
                "description": description,
                "usage_based_rates": convert_and_respect_annotation_metadata(
                    object_=usage_based_rates,
                    annotation=typing.Sequence[CreateRateCardRequestUsageBasedRatesItem],
                    direction="write",
                ),
                "fixed_rates": convert_and_respect_annotation_metadata(
                    object_=fixed_rates, annotation=typing.Sequence[CreateFixedRateInterface], direction="write"
                ),
                "billing_interval": billing_interval,
                "credit_grants": convert_and_respect_annotation_metadata(
                    object_=credit_grants, annotation=typing.Sequence[CreateCreditGrantInterface], direction="write"
                ),
                "feature_access": convert_and_respect_annotation_metadata(
                    object_=feature_access, annotation=typing.Sequence[FeatureAccessResource], direction="write"
                ),
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateRateCardResponse,
                    parse_obj_as(
                        type_=CreateRateCardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetRateCardResponse]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetRateCardResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetRateCardResponse,
                    parse_obj_as(
                        type_=GetRateCardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="PATCH",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_rate_card_version(
        self,
        rate_card_id: str,
        *,
        name: str,
        description: str,
        usage_based_rates: typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem],
        version_type: CreateRateCardVersionRequestVersionType,
        fixed_rates: typing.Optional[typing.Sequence[FixedRateInterface]] = OMIT,
        credit_grants: typing.Optional[typing.Sequence[CreditGrantResource]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateRateCardVersionResponse]:
        """
        Parameters
        ----------
        rate_card_id : str

        name : str

        description : str

        usage_based_rates : typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem]

        version_type : CreateRateCardVersionRequestVersionType

        fixed_rates : typing.Optional[typing.Sequence[FixedRateInterface]]

        credit_grants : typing.Optional[typing.Sequence[CreditGrantResource]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateRateCardVersionResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}/versions",
            method="POST",
            json={
                "name": name,
                "description": description,
                "usage_based_rates": convert_and_respect_annotation_metadata(
                    object_=usage_based_rates,
                    annotation=typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem],
                    direction="write",
                ),
                "fixed_rates": convert_and_respect_annotation_metadata(
                    object_=fixed_rates, annotation=typing.Sequence[FixedRateInterface], direction="write"
                ),
                "version_type": version_type,
                "credit_grants": convert_and_respect_annotation_metadata(
                    object_=credit_grants, annotation=typing.Sequence[CreditGrantResource], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateRateCardVersionResponse,
                    parse_obj_as(
                        type_=CreateRateCardVersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawRateCardsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_rate_cards(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ListRateCardsResponse]:
        """
        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListRateCardsResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "rate-cards",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListRateCardsResponse,
                    parse_obj_as(
                        type_=ListRateCardsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_rate_card(
        self,
        *,
        name: str,
        description: str,
        usage_based_rates: typing.Sequence[CreateRateCardRequestUsageBasedRatesItem],
        billing_interval: CreateRateCardRequestBillingInterval,
        fixed_rates: typing.Optional[typing.Sequence[CreateFixedRateInterface]] = OMIT,
        credit_grants: typing.Optional[typing.Sequence[CreateCreditGrantInterface]] = OMIT,
        feature_access: typing.Optional[typing.Sequence[FeatureAccessResource]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateRateCardResponse]:
        """
        Parameters
        ----------
        name : str

        description : str

        usage_based_rates : typing.Sequence[CreateRateCardRequestUsageBasedRatesItem]

        billing_interval : CreateRateCardRequestBillingInterval

        fixed_rates : typing.Optional[typing.Sequence[CreateFixedRateInterface]]

        credit_grants : typing.Optional[typing.Sequence[CreateCreditGrantInterface]]

        feature_access : typing.Optional[typing.Sequence[FeatureAccessResource]]

        metadata : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateRateCardResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "rate-cards",
            method="POST",
            json={
                "name": name,
                "description": description,
                "usage_based_rates": convert_and_respect_annotation_metadata(
                    object_=usage_based_rates,
                    annotation=typing.Sequence[CreateRateCardRequestUsageBasedRatesItem],
                    direction="write",
                ),
                "fixed_rates": convert_and_respect_annotation_metadata(
                    object_=fixed_rates, annotation=typing.Sequence[CreateFixedRateInterface], direction="write"
                ),
                "billing_interval": billing_interval,
                "credit_grants": convert_and_respect_annotation_metadata(
                    object_=credit_grants, annotation=typing.Sequence[CreateCreditGrantInterface], direction="write"
                ),
                "feature_access": convert_and_respect_annotation_metadata(
                    object_=feature_access, annotation=typing.Sequence[FeatureAccessResource], direction="write"
                ),
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateRateCardResponse,
                    parse_obj_as(
                        type_=CreateRateCardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetRateCardResponse]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetRateCardResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GetRateCardResponse,
                    parse_obj_as(
                        type_=GetRateCardResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_rate_card(
        self, rate_card_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        rate_card_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}",
            method="PATCH",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_rate_card_version(
        self,
        rate_card_id: str,
        *,
        name: str,
        description: str,
        usage_based_rates: typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem],
        version_type: CreateRateCardVersionRequestVersionType,
        fixed_rates: typing.Optional[typing.Sequence[FixedRateInterface]] = OMIT,
        credit_grants: typing.Optional[typing.Sequence[CreditGrantResource]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateRateCardVersionResponse]:
        """
        Parameters
        ----------
        rate_card_id : str

        name : str

        description : str

        usage_based_rates : typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem]

        version_type : CreateRateCardVersionRequestVersionType

        fixed_rates : typing.Optional[typing.Sequence[FixedRateInterface]]

        credit_grants : typing.Optional[typing.Sequence[CreditGrantResource]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateRateCardVersionResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"rate-cards/{jsonable_encoder(rate_card_id)}/versions",
            method="POST",
            json={
                "name": name,
                "description": description,
                "usage_based_rates": convert_and_respect_annotation_metadata(
                    object_=usage_based_rates,
                    annotation=typing.Sequence[CreateRateCardVersionRequestUsageBasedRatesItem],
                    direction="write",
                ),
                "fixed_rates": convert_and_respect_annotation_metadata(
                    object_=fixed_rates, annotation=typing.Sequence[FixedRateInterface], direction="write"
                ),
                "version_type": version_type,
                "credit_grants": convert_and_respect_annotation_metadata(
                    object_=credit_grants, annotation=typing.Sequence[CreditGrantResource], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateRateCardVersionResponse,
                    parse_obj_as(
                        type_=CreateRateCardVersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
