# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_subscriptions_response import ListSubscriptionsResponse
from ..types.subscription_resource import SubscriptionResource
from .raw_client import AsyncRawSubscriptionsClient, RawSubscriptionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SubscriptionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSubscriptionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSubscriptionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSubscriptionsClient
        """
        return self._raw_client

    def list_subscriptions(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSubscriptionsResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSubscriptionsResponse
            Successful Response

        Examples
        --------
        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.subscriptions.list_subscriptions(
            limit=1,
            offset=1,
        )
        """
        _response = self._raw_client.list_subscriptions(limit=limit, offset=offset, request_options=request_options)
        return _response.data

    def create_subscription(
        self,
        *,
        rate_card_id: str,
        subject_id: str,
        effective_at: dt.datetime,
        variables: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionResource:
        """
        Parameters
        ----------
        rate_card_id : str

        subject_id : str

        effective_at : dt.datetime

        variables : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionResource
            Successful Response

        Examples
        --------
        import datetime

        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.subscriptions.create_subscription(
            rate_card_id="rate_card_id",
            subject_id="subject_id",
            effective_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.create_subscription(
            rate_card_id=rate_card_id,
            subject_id=subject_id,
            effective_at=effective_at,
            variables=variables,
            metadata=metadata,
            request_options=request_options,
        )
        return _response.data

    def get_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionResource:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionResource
            Successful Response

        Examples
        --------
        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.subscriptions.get_subscription(
            subscription_id="subscription_id",
        )
        """
        _response = self._raw_client.get_subscription(subscription_id, request_options=request_options)
        return _response.data

    def cancel_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.subscriptions.cancel_subscription(
            subscription_id="subscription_id",
        )
        """
        _response = self._raw_client.cancel_subscription(subscription_id, request_options=request_options)
        return _response.data

    def update_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.subscriptions.update_subscription(
            subscription_id="subscription_id",
        )
        """
        _response = self._raw_client.update_subscription(subscription_id, request_options=request_options)
        return _response.data


class AsyncSubscriptionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSubscriptionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSubscriptionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSubscriptionsClient
        """
        return self._raw_client

    async def list_subscriptions(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSubscriptionsResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSubscriptionsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.subscriptions.list_subscriptions(
                limit=1,
                offset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_subscriptions(
            limit=limit, offset=offset, request_options=request_options
        )
        return _response.data

    async def create_subscription(
        self,
        *,
        rate_card_id: str,
        subject_id: str,
        effective_at: dt.datetime,
        variables: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscriptionResource:
        """
        Parameters
        ----------
        rate_card_id : str

        subject_id : str

        effective_at : dt.datetime

        variables : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio
        import datetime

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.subscriptions.create_subscription(
                rate_card_id="rate_card_id",
                subject_id="subject_id",
                effective_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_subscription(
            rate_card_id=rate_card_id,
            subject_id=subject_id,
            effective_at=effective_at,
            variables=variables,
            metadata=metadata,
            request_options=request_options,
        )
        return _response.data

    async def get_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubscriptionResource:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.subscriptions.get_subscription(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_subscription(subscription_id, request_options=request_options)
        return _response.data

    async def cancel_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.subscriptions.cancel_subscription(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel_subscription(subscription_id, request_options=request_options)
        return _response.data

    async def update_subscription(
        self, subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        subscription_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.subscriptions.update_subscription(
                subscription_id="subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_subscription(subscription_id, request_options=request_options)
        return _response.data
