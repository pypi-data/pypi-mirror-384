///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/core/cost-base.hpp"

#include "python/crocoddyl/utils/deprecate.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct CostModelAbstractVisitor
    : public bp::def_visitor<CostModelAbstractVisitor<Model>> {
  typedef typename Model::CostModel CostModel;
  typedef typename Model::CostData CostData;
  typedef typename Model::State State;
  typedef typename Model::ActivationModel ActivationModel;
  typedef typename Model::ResidualModel ResidualModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, std::shared_ptr<ActivationModel>,
                    std::size_t>(
               bp::args("self", "state", "activation", "nu"),
               "Initialize the cost model.\n\n"
               ":param state: state description\n"
               ":param activation: activation model\n"
               ":param nu: dimension of control vector (default state.nv)"))
        .def(bp::init<std::shared_ptr<State>, std::shared_ptr<ActivationModel>>(
            bp::args("self", "state", "activation"),
            "Initialize the cost model.\n\n"
            ":param state: state description\n"
            ":param activation: activation model"))
        .def(bp::init<std::shared_ptr<State>, std::shared_ptr<ResidualModel>>(
            bp::args("self", "state", "residual"),
            "Initialize the cost model.\n\n"
            ":param state: state description\n"
            ":param residual: residual model"))
        .def(bp::init<std::shared_ptr<State>, std::size_t, std::size_t>(
            bp::args("self", "state", "nr", "nu"),
            "Initialize the cost model.\n\n"
            "We use ActivationModelQuad as a default activation model (i.e., "
            "a=0.5*||r||^2).\n"
            ":param state: state description\n"
            ":param nr: dimension of residual vector\n"
            ":param nu: dimension of control vector (default state.nv)"))
        .def(bp::init<std::shared_ptr<State>, std::size_t>(
            bp::args("self", "state", "nr"),
            "Initialize the cost model.\n\n"
            "We use ActivationModelQuad as a default activation model (i.e., "
            "a=0.5*||r||^2), and the default nu value is obtained from "
            "state.nv.\n"
            ":param state: state description\n"
            ":param nr: dimension of cost vector"))
        .def("calc", pure_virtual(&Model::calc),
             bp::args("self", "data", "x", "u"),
             "Compute the cost value and its residuals.\n\n"
             ":param data: cost data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (CostModel::*)(const std::shared_ptr<CostData>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &CostModel::calc),
            bp::args("self", "data", "x"),
            "Compute the total cost value for nodes that depends only on the "
            "state.\n\n"
            "It updates the total cost based on the state only. This function "
            "is used in the terminal nodes of an optimal control problem.\n"
            ":param data: cost data\n"
            ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x", "u"),
             "Compute the derivatives of the cost function and its "
             "residuals.\n\n"
             "It computes the partial derivatives of the cost function. It "
             "assumes that calc has been run first.\n"
             ":param data: cost data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (CostModel::*)(const std::shared_ptr<CostData>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &CostModel::calcDiff),
            bp::args("self", "data", "x"),
            "Compute the Jacobian and Hessian of the cost functions with "
            "respect to the state only.\n\n"
            "It updates the Jacobian and Hessian of the cost function based on "
            "the state only. This function is used in the terminal nodes of an "
            "optimal control problem.\n"
            ":param data: cost data\n"
            ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the cost data.\n\n"
             "Each cost model has its own data that needs to be allocated. "
             "This function returns the allocated data for a predefined cost.\n"
             ":param data: shared data\n"
             ":return cost data.")
        .def("createData", &Model::default_createData,
             bp::with_custodian_and_ward_postcall<0, 2>())
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state description")
        .add_property(
            "activation",
            bp::make_function(&Model::get_activation,
                              bp::return_value_policy<bp::return_by_value>()),
            "activation model")
        .add_property(
            "residual",
            bp::make_function(&Model::get_residual,
                              bp::return_value_policy<bp::return_by_value>()),
            "residual model")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of control vector");
  }
};

template <typename Data>
struct CostDataAbstractVisitor
    : public bp::def_visitor<CostDataAbstractVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "shared",
          bp::make_getter(&Data::shared, bp::return_internal_reference<>()),
          "shared data")
        .add_property(
            "activation",
            bp::make_getter(&Data::activation,
                            bp::return_value_policy<bp::return_by_value>()),
            "activation data")
        .add_property(
            "residual",
            bp::make_getter(&Data::residual,
                            bp::return_value_policy<bp::return_by_value>()),
            "residual data")
        .add_property(
            "cost",
            bp::make_getter(&Data::cost,
                            bp::return_value_policy<bp::return_by_value>()),
            bp::make_setter(&Data::cost), "cost value")
        .add_property(
            "Lx", bp::make_getter(&Data::Lx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lx), "Jacobian of the cost")
        .add_property(
            "Lu", bp::make_getter(&Data::Lu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lu), "Jacobian of the cost")
        .add_property(
            "Lxx",
            bp::make_getter(&Data::Lxx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lxx), "Hessian of the cost")
        .add_property(
            "Lxu",
            bp::make_getter(&Data::Lxu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Lxu), "Hessian of the cost")
        .add_property(
            "Luu",
            bp::make_getter(&Data::Luu, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Luu), "Hessian of the cost")
        .add_property(
            "r",
            bp::make_function(&Data::get_r,
                              deprecated<bp::return_internal_reference<>>(
                                  "Deprecated. Use residual.r.")),
            bp::make_function(&Data::set_r,
                              deprecated<>("Deprecated. Use residual.r.")),
            "cost residual")
        .add_property(
            "Rx",
            bp::make_function(&Data::get_Rx,
                              deprecated<bp::return_internal_reference<>>(
                                  "Deprecated. Use residual.Rx.")),
            bp::make_function(&Data::set_Rx,
                              deprecated<>("Deprecated. Use residual.Rx.")),
            "Jacobian of the cost residual")
        .add_property(
            "Ru",
            bp::make_function(&Data::get_Ru,
                              deprecated<bp::return_internal_reference<>>(
                                  "Deprecated. Use residual.Ru.")),
            bp::make_function(&Data::set_Ru,
                              deprecated<>("Deprecated. Use residual.Ru.")),
            "Jacobian of the cost residual");
  }
};

#define CROCODDYL_COST_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)                  \
  typedef CostModelAbstractTpl<Scalar> Model;                                  \
  typedef CostModelAbstractTpl_wrap<Scalar> Model_wrap;                        \
  typedef StateAbstractTpl<Scalar> State;                                      \
  typedef Model::ActivationModelAbstract ActivationModel;                      \
  typedef Model::ResidualModelAbstract ResidualModel;                          \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model_wrap, boost::noncopyable>(                                  \
      "CostModelAbstract",                                                     \
      "Abstract multibody cost models.\n\n"                                    \
      "In Crocoddyl, a cost model is defined by the scalar activation "        \
      "function a(.) and by the residual function r(.) as follows:\n"          \
      "    cost = a(r(x, u)),\n"                                               \
      "where the residual function depends on the state point x, which lies "  \
      "in the state manifold described with a nq-tuple, its velocity xd that " \
      "belongs to the tangent space with nv dimension, and the control input " \
      "u. The dimension of the residual vector is defined by nr, which "       \
      "belongs to the Euclidean space. On the other hand, the activation "     \
      "function builds a cost value based on the definition of the residual "  \
      "vector. The residual vector has to be specialized in a derived "        \
      "classes.",                                                              \
      bp::init<std::shared_ptr<State>, std::shared_ptr<ActivationModel>,       \
               std::shared_ptr<ResidualModel>>(                                \
          bp::args("self", "state", "activation", "residual"),                 \
          "Initialize the cost model.\n\n"                                     \
          ":param state: state description\n"                                  \
          ":param activation: activation model\n"                              \
          ":param residual: residual model"))                                  \
      .def(CostModelAbstractVisitor<Model_wrap>())                             \
      .def(PrintableVisitor<Model_wrap>())                                     \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_COST_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)       \
  typedef CostDataAbstractTpl<Scalar> Data;                        \
  typedef CostModelAbstractTpl<Scalar> Model;                      \
  typedef Model::DataCollectorAbstract DataCollector;              \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();             \
  bp::class_<Data, boost::noncopyable>(                            \
      "CostDataAbstract", "Abstract class for cost data.\n\n",     \
      bp::init<Model*, DataCollector*>(                            \
          bp::args("self", "model", "data"),                       \
          "Create common data shared between cost models.\n\n"     \
          ":param model: cost model\n"                             \
          ":param data: shared data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])             \
      .def(CostDataAbstractVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeCostAbstract() {
// TODO: Remove once the deprecated update call has been removed in a future
// release
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  CROCODDYL_COST_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_COST_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)

#pragma GCC diagnostic pop
}

}  // namespace python
}  // namespace crocoddyl
