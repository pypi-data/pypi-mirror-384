///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2020-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/activations/smooth-2norm.hpp"

#include "python/crocoddyl/core/activation-base.hpp"
#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActivationModelSmooth2NormVisitor
    : public bp::def_visitor<ActivationModelSmooth2NormVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "r"),
           "Compute the smooth-2norm function.\n\n"
           ":param data: activation data\n"
           ":param r: residual vector")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "r"),
             "Compute the derivatives of a smooth-2norm function.\n\n"
             "It assumes that calc has been run first.\n"
             ":param data: activation data\n"
             ":param r: residual vector \n")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the smooth-2norm activation data.\n\n");
  }
};

#define CROCODDYL_ACTIVATION_MODEL_SMOOTH2NORM_PYTHON_BINDINGS(Scalar)      \
  typedef ActivationModelSmooth2NormTpl<Scalar> Model;                      \
  typedef ActivationModelAbstractTpl<Scalar> ModelBase;                     \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                     \
  bp::class_<Model, bp::bases<ModelBase>>(                                  \
      "ActivationModelSmooth2Norm",                                         \
      "Smooth-2Norm activation model.\n\n"                                  \
      "It describes a smooth representation of a 2-norm, i.e., sqrt{eps + " \
      "sum^nr_{i=0} ||ri||^2}, where ri is the scalar residual for the i "  \
      "constraints, and nr is the dimension of the residual vector.",       \
      bp::init<std::size_t, bp::optional<Scalar>>(                          \
          bp::args("self", "nr", "eps"),                                    \
          "Initialize the activation model.\n\n"                            \
          ":param nr: dimension of the residual vector\n"                   \
          ":param eps: smoothing factor (default: 1.)"))                    \
      .def(ActivationModelSmooth2NormVisitor<Model>())                      \
      .def(CastVisitor<Model>())                                            \
      .def(PrintableVisitor<Model>())                                       \
      .def(CopyableVisitor<Model>());

void exposeActivationSmooth2Norm() {
  CROCODDYL_ACTIVATION_MODEL_SMOOTH2NORM_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
