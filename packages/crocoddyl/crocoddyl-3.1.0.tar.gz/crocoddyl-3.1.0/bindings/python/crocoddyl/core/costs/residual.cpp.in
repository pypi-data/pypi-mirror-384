///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/costs/residual.hpp"

#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct CostModelResidualVisitor
    : public bp::def_visitor<CostModelResidualVisitor<Model>> {
  typedef typename Model::CostDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateAbstract State;
  typedef typename Model::ResidualModelAbstract ResidualModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, std::shared_ptr<ResidualModel>>(
               bp::args("self", "state", "residual"),
               "Initialize the residual cost model.\n\n"
               ":param state: state description\n"
               ":param residual: residual model"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the residual cost.\n\n"
            ":param data: cost residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"),
             "Compute the residual cost based on state only.\n\n"
             "It updates the total cost based on the state only. This function "
             "is used in the terminal nodes of an optimal control problem.\n"
             ":param data: cost data\n"
             ":param x: state point (dim. state.nx)")
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the residual cost.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: cost residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the derivatives of the residual cost with respect to the "
             "state only.\n\n"
             "It updates the Jacobian and Hessian of the cost function based "
             "on the state only. This function is used in the terminal nodes "
             "of an optimal control problem.\n"
             ":param data: cost residual data\n"
             ":param x: state point (dim. state.nx)")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the residual cost data.\n\n"
             "Each cost model has its own data that needs to be allocated. "
             "This function returns the allocated data for a predefined cost.\n"
             ":param data: shared data\n"
             ":return cost data.");
  }
};

#define CROCODDYL_COST_MODEL_RESIDUAL_PYTHON_BINDINGS(Scalar)            \
  typedef CostModelResidualTpl<Scalar> Model;                            \
  typedef CostModelAbstractTpl<Scalar> ModelBase;                        \
  typedef typename ModelBase::StateAbstract State;                       \
  typedef typename ModelBase::ActivationModelAbstract ActivationModel;   \
  typedef typename ModelBase::ResidualModelAbstract ResidualModel;       \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                  \
  bp::class_<Model, bp::bases<ModelBase>>(                               \
      "CostModelResidual",                                               \
      "This cost function uses a residual vector with a Gauss-Newton "   \
      "assumption to define a cost term.",                               \
      bp::init<std::shared_ptr<State>, std::shared_ptr<ActivationModel>, \
               std::shared_ptr<ResidualModel>>(                          \
          bp::args("self", "state", "activation", "residual"),           \
          "Initialize the residual cost model.\n\n"                      \
          ":param state: state description\n"                            \
          ":param activation: activation model\n"                        \
          ":param residual: residual model"))                            \
      .def(CostModelResidualVisitor<Model>())                            \
      .def(CastVisitor<Model>())                                         \
      .def(PrintableVisitor<Model>())                                    \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_COST_DATA_RESIDUAL_PYTHON_BINDINGS(Scalar)       \
  typedef CostDataResidualTpl<Scalar> Data;                        \
  typedef CostDataAbstractTpl<Scalar> DataBase;                    \
  typedef CostModelResidualTpl<Scalar> Model;                      \
  typedef Model::DataCollectorAbstract DataCollector;              \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();             \
  bp::class_<Data, bp::bases<DataBase>>(                           \
      "CostDataResidual", "Data for residual cost.\n\n",           \
      bp::init<Model*, DataCollector*>(                            \
          bp::args("self", "model", "data"),                       \
          "Create residual cost data.\n\n"                         \
          ":param model: residual cost model\n"                    \
          ":param data: shared data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])             \
      .def(CopyableVisitor<Data>());

void exposeCostResidual() {
  CROCODDYL_COST_MODEL_RESIDUAL_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_COST_DATA_RESIDUAL_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
