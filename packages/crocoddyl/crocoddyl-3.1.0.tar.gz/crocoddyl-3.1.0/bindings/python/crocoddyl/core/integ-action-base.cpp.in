///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, LAAS-CNRS, University of Edinburgh,
//                          University of Oxford, University of Trento,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/core/integ-action-base.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct IntegratedActionModelAbstractVisitor
    : public bp::def_visitor<IntegratedActionModelAbstractVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  typedef typename Model::IntegratedActionModel IntegratedActionModel;
  typedef typename Model::IntegratedActionData IntegratedActionData;
  typedef typename Model::DifferentialActionModel DifferentialActionModel;
  typedef typename Model::ActionData ActionData;
  typedef typename Model::ControlModel ControlModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<DifferentialActionModel>,
                    std::shared_ptr<ControlModel>, bp::optional<Scalar, bool>>(
               bp::args("self", "diffModel", "control", "stepTime",
                        "withCostResidual"),
               "Initialize the integrated-action integrator.\n\n"
               "You can also integrate autonomous systems (i.e., when "
               "diffModel.nu is equals to 0).\n"
               ":param model: differential action model\n"
               ":param control: the control parametrization\n"
               ":param stepTime: step time (default 1e-3)\n"
               ":param withCostResidual: includes the cost residuals and "
               "derivatives (default True)."))
        .def("calc", pure_virtual(&Model::calc),
             bp::args("self", "data", "x", "u"),
             "Compute the next state and cost value.\n\n"
             "It describes the time-discrete evolution of our dynamical system "
             "in which we obtain the next state. Additionally it computes the "
             "cost value associated to this discrete state and control pair.\n"
             ":param data: integrated-action data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (IntegratedActionModel::*)(
                 const std::shared_ptr<ActionData>&,
                 const Eigen::Ref<const VectorXs>&)>(
                 &IntegratedActionModel::calc),
             bp::args("self", "data", "x"))
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x", "u"),
             "Compute the derivatives of the dynamics and cost functions.\n\n"
             "It computes the partial derivatives of the dynamical system and "
             "the cost function. It assumes that calc has been run first. This "
             "function builds a quadratic approximation of the action model "
             "(i.e. linear dynamics and quadratic cost).\n"
             ":param data: integrated-action data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (IntegratedActionModel::*)(
                 const std::shared_ptr<ActionData>&,
                 const Eigen::Ref<const VectorXs>&)>(
                 &IntegratedActionModel::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, &Model::default_createData,
             bp::args("self"),
             "Create the integrated-action data.\n\n"
             "Each integrated-action model (IAM) has its own data that needs "
             "to be allocated. This function returns the allocated data for a "
             "predefined IAM.\n"
             ":return integrated-action data.")
        .add_property(
            "differential",
            bp::make_function(&Model::get_differential,
                              bp::return_value_policy<bp::return_by_value>()),
            "differential action model")
        .add_property(
            "control",
            bp::make_function(&Model::get_control,
                              bp::return_value_policy<bp::return_by_value>()),
            "control parametrization model")
        .add_property(
            "dt",
            bp::make_function(&IntegratedActionModelAbstract::get_dt,
                              bp::return_value_policy<bp::return_by_value>()),
            &IntegratedActionModelAbstract::set_dt, "step time");
  }
};

#define CROCODDYL_INTACTION_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)          \
  typedef IntegratedActionModelAbstractTpl<Scalar> Model;                   \
  typedef IntegratedActionModelAbstractTpl_wrap<Scalar> Model_wrap;         \
  typedef ActionModelAbstractTpl<Scalar> ModelBase;                         \
  typedef DifferentialActionModelAbstractTpl<Scalar> DiffModelBase;         \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                     \
  bp::class_<Model_wrap, boost::noncopyable, bp::bases<ModelBase>>(         \
      "IntegratedActionModelAbstract",                                      \
      "Abstract class for integrated action models.\n\n"                    \
      "In Crocoddyl, an integrated action model transforms a differential " \
      "action model in a (discrete) action model.\n",                       \
      bp::init<std::shared_ptr<DiffModelBase>, bp::optional<Scalar, bool>>( \
          bp::args("self", "diffModel", "timeStep", "withCostResidual"),    \
          "Initialize the integrated-action model.\n\n"                     \
          "You can also integrate autonomous systems (i.e., when "          \
          "diffModel.nu is equals to 0).\n"                                 \
          ":param diffModel: differential action model\n"                   \
          ":param timestep: integration time step (default 1e-3)\n"         \
          ":param withCostResidual: includes the cost residuals and "       \
          "derivatives (default True)."))                                   \
      .def(IntegratedActionModelAbstractVisitor<Model_wrap>())              \
      .def(PrintableVisitor<Model_wrap>())                                  \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_INTACTION_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)              \
  typedef IntegratedActionDataAbstractTpl<Scalar> Data;                        \
  typedef IntegratedActionModelAbstractTpl<Scalar> Model;                      \
  typedef ActionDataAbstractTpl<Scalar> DataBase;                              \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                         \
  bp::class_<Data, bp::bases<DataBase>>(                                       \
      "IntegratedActionDataAbstract",                                          \
      "Abstract class for integrated-action data.\n\n"                         \
      "In Crocoddyl, an action data contains all the required information "    \
      "for processing an user-defined action model. The action data "          \
      "typically is allocated onces by running model.createData() and "        \
      "contains the first- and second- order derivatives of the dynamics and " \
      "cost function, respectively.",                                          \
      bp::init<Model*>(                                                        \
          bp::args("self", "model"),                                           \
          "Create common data shared between integrated-action models.\n\n"    \
          "The integrated-action data uses its model in order to first "       \
          "process it.\n"                                                      \
          ":param model: integrated-action model"))                            \
      .def(CopyableVisitor<Data>());

void exposeIntegratedActionAbstract() {
  CROCODDYL_INTACTION_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_INTACTION_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
