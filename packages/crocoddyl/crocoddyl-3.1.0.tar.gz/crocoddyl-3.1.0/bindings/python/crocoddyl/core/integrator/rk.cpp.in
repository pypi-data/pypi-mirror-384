///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, University of Edinburgh, University of Trento,
//                          LAAS-CNRS, IRI: CSIC-UPC, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/integrator/rk.hpp"

#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/core/integ-action-base.hpp"

#define SCALAR_@SCALAR_NAME@

namespace crocoddyl {
namespace python {

template <typename Model>
struct IntegratedActionModelRKVisitor
    : public bp::def_visitor<IntegratedActionModelRKVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  typedef typename Model::ActionDataAbstract Data;
  typedef
      typename Model::DifferentialActionModelAbstract DifferentialActionModel;
  typedef typename Model::ControlParametrizationModelAbstract
      ControlParametrizationModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<DifferentialActionModel>,
                    std::shared_ptr<ControlParametrizationModel>, RKType,
                    bp::optional<Scalar, bool>>(
               bp::args("self", "diffModel", "control", "rktype", "stepTime",
                        "withCostResidual"),
               "Initialize the RK integrator.\n\n"
               ":param diffModel: differential action model\n"
               ":param control: the control parametrization\n"
               ":param rktype: type of RK integrator (options are two, three, "
               "and four)\n"
               ":param stepTime: step time (default 1e-3)\n"
               ":param withCostResidual: includes the cost residuals and "
               "derivatives (default True)."))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the time-discrete evolution of a differential action "
            "model.\n\n"
            "It describes the time-discrete evolution of action model.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Computes the derivatives of the integrated action model wrt state "
            "and control. \n\n"
            "This function builds a quadratic approximation of the action "
            "model (i.e. dynamical system and cost function). It assumes that "
            "calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, bp::args("self"),
             "Create the RK integrator data.")
        .add_property(
            "ni",
            bp::make_function(&Model::get_ni,
                              bp::return_value_policy<bp::return_by_value>()),
            "number of nodes to be integrated")
        .add_property(
            "ng", bp::make_function(&Model::get_ng), "number of equality constraints")
        .add_property(
            "nh", bp::make_function(&Model::get_nh), "number of inequality constraints")
        .add_property(
            "ng_T", bp::make_function(&Model::get_ng_T), "number of equality terminal constraints")
        .add_property(
            "nh_T", bp::make_function(&Model::get_nh_T), "number of inequality terminal constraints");
  }
};

template <typename Data>
struct IntegratedActionDataRKVisitor
    : public bp::def_visitor<IntegratedActionDataRKVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "differential",
          bp::make_getter(&Data::differential,
                          bp::return_value_policy<bp::return_by_value>()),
          "list of differential action data")
        .add_property(
            "control",
            bp::make_getter(&Data::control,
                            bp::return_value_policy<bp::return_by_value>()),
            "list of control parametrization data")
        .add_property(
            "integral",
            bp::make_getter(&Data::integral,
                            bp::return_value_policy<bp::return_by_value>()),
            "list of RK terms related to the cost")
        .add_property(
            "dx", bp::make_getter(&Data::dx, bp::return_internal_reference<>()),
            "state rate.")
        .add_property(
            "ki", bp::make_getter(&Data::ki, bp::return_internal_reference<>()),
            "list of RK terms related to system dynamics")
        .add_property(
            "y", bp::make_getter(&Data::y, bp::return_internal_reference<>()),
            "list of states where f is evaluated in the RK integration")
        .add_property(
            "ws", bp::make_getter(&Data::ws, bp::return_internal_reference<>()),
            "control inputs evaluated in the RK integration")
        .add_property(
            "dki_dx",
            bp::make_getter(&Data::dki_dx, bp::return_internal_reference<>()),
            "list of partial derivatives of RK nodes with respect to the state "
            "of the RK integration. dki/dx")
        .add_property(
            "dki_du",
            bp::make_getter(&Data::dki_du, bp::return_internal_reference<>()),
            "list of partial derivatives of RK nodes with respect to the "
            "control parameters of the RK integration. dki/du")
        .add_property(
            "dyi_dx",
            bp::make_getter(&Data::dyi_dx, bp::return_internal_reference<>()),
            "list of partial derivatives of RK dynamics with respect to the "
            "state of the RK integrator. dyi/dx")
        .add_property(
            "dyi_du",
            bp::make_getter(&Data::dyi_du, bp::return_internal_reference<>()),
            "list of partial derivatives of RK dynamics with respect to the "
            "control parameters of the RK integrator. dyi/du")
        .add_property(
            "dli_dx",
            bp::make_getter(&Data::dli_dx, bp::return_internal_reference<>()),
            "list of partial derivatives of the cost with respect to the state "
            "of the RK integration. dli_dx")
        .add_property(
            "dli_du",
            bp::make_getter(&Data::dli_du, bp::return_internal_reference<>()),
            "list of partial derivatives of the cost with respect to the "
            "control input of the RK integration. dli_du")
        .add_property(
            "ddli_ddx",
            bp::make_getter(&Data::ddli_ddx, bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the state of the RK integration. ddli_ddx")
        .add_property(
            "ddli_ddw",
            bp::make_getter(&Data::ddli_ddw, bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the control of the differential action model w. ddli_ddw")
        .add_property(
            "ddli_ddu",
            bp::make_getter(&Data::ddli_ddu, bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the control input of the RK integration. ddli_ddu")
        .add_property(
            "ddli_dxdw",
            bp::make_getter(&Data::ddli_dxdw,
                            bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the state and control of the differential action model. ddli_dxdw")
        .add_property(
            "ddli_dxdu",
            bp::make_getter(&Data::ddli_dxdu,
                            bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the state and control input of the RK integration. ddli_dxdu")
        .add_property(
            "ddli_dwdu",
            bp::make_getter(&Data::ddli_dwdu,
                            bp::return_internal_reference<>()),
            "list of second partial derivatives of the cost with respect to "
            "the control of the differential action model and the control "
            "inputs of the RK integration. ddli_dwdu");
  }
};

#define CROCODDYL_INTACTION_MODEL_RK_PYTHON_BINDINGS(Scalar)                   \
  typedef IntegratedActionModelRKTpl<Scalar> Model;                            \
  typedef IntegratedActionModelAbstractTpl<Scalar> ModelBase;                  \
  typedef ActionModelAbstractTpl<Scalar> ActionBase;                           \
  typedef DifferentialActionModelAbstractTpl<Scalar> DiffActionBase;           \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model, bp::bases<ModelBase, ActionBase>>(                         \
      "IntegratedActionModelRK",                                               \
      "RK integrator for differential action models.\n\n"                      \
      "This class implements different RK integrator schemes. The available "  \
      "integrators are: RK2, RK3, and RK4.",                                   \
      bp::init<std::shared_ptr<DiffActionBase>, RKType,                        \
               bp::optional<Scalar, bool>>(                                    \
          bp::args("self", "diffModel", "rktype", "stepTime",                  \
                   "withCostResidual"),                                        \
          "Initialize the RK integrator.\n\n"                                  \
          ":param diffModel: differential action model\n"                      \
          ":param rktype: type of RK integrator (options are two, three, and " \
          "four)\n"                                                            \
          ":param stepTime: step time (default 1e-3)\n"                        \
          ":param withCostResidual: includes the cost residuals and "          \
          "derivatives (default True)."))                                      \
      .def(IntegratedActionModelRKVisitor<Model>())                            \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_INTACTION_DATA_RK_PYTHON_BINDINGS(Scalar)  \
  typedef IntegratedActionDataRKTpl<Scalar> Data;            \
  typedef IntegratedActionDataAbstractTpl<Scalar> DataBase;  \
  typedef IntegratedActionModelRKTpl<Scalar> Model;          \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();       \
  bp::class_<Data, bp::bases<DataBase>>(                     \
      "IntegratedActionDataRK", "RK integrator data.",       \
      bp::init<Model*>(bp::args("self", "model"),            \
                       "Create RK integrator data.\n\n"      \
                       ":param model: RK integrator model")) \
      .def(IntegratedActionDataRKVisitor<Data>())            \
      .def(CopyableVisitor<Data>());

void exposeIntegratedActionRK() {
#ifdef SCALAR_float64
  bp::enum_<RKType>("RKType")
      .value("two", two)
      .value("three", three)
      .value("four", four)
      .export_values();
#endif

  CROCODDYL_INTACTION_MODEL_RK_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_INTACTION_DATA_RK_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
