///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/states/euclidean.hpp"

#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/core/state-base.hpp"

namespace crocoddyl {
namespace python {

template <typename State>
struct StateVectorVisitor : public bp::def_visitor<StateVectorVisitor<State>> {
  typedef typename State::Scalar Scalar;
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(Jdiffs,
                                         StateAbstractTpl<Scalar>::Jdiff_Js, 2,
                                         3)
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(
      Jintegrates, StateAbstractTpl<Scalar>::Jintegrate_Js, 2, 3)
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("zero", &State::zero, bp::args("self"),
           "Return a zero reference state.\n\n"
           ":return zero reference state")
        .def("rand", &State::rand, bp::args("self"),
             "Return a random reference state.\n\n"
             ":return random reference state")
        .def("diff", &State::diff_dx, bp::args("self", "x0", "x1"),
             "Operator that differentiates the two state points.\n\n"
             "It returns the value of x1 [-] x0 operation. Due to a state "
             "vector lies in the Euclidean space, this operator is defined "
             "with arithmetic subtraction.\n"
             ":param x0: current state (dim state.nx()).\n"
             ":param x1: next state (dim state.nx()).\n"
             ":return x1 - x0 value (dim state.nx()).")
        .def("integrate", &State::integrate_x, bp::args("self", "x", "dx"),
             "Operator that integrates the current state.\n\n"
             "It returns the value of x [+] dx operation. Due to a state "
             "vector lies in the Euclidean space, this operator is defined "
             "with arithmetic addition. Futhermore there is no timestep here "
             "(i.e. dx = v*dt), note this if you're integrating a velocity v "
             "during an interval dt.\n"
             ":param x: current state (dim state.nx()).\n"
             ":param dx: displacement of the state (dim state.nx()).\n"
             ":return x + dx value (dim state.nx()).")
        .def("Jdiff", &State::Jdiff_Js,
             Jdiffs(bp::args("self", "x0", "x1", "firstsecond"),
                    "Compute the partial derivatives of arithmetic "
                    "substraction.\n\n"
                    "Both Jacobian matrices are represented throught an "
                    "identity matrix, with the exception that the first "
                    "partial derivatives (w.r.t. x0) has negative signed. By "
                    "default, this function returns the derivatives of the "
                    "first and second argument (i.e. firstsecond='both'). "
                    "However we ask for a specific partial derivative by "
                    "setting firstsecond='first' or firstsecond='second'.\n"
                    ":param x0: current state (dim state.nx()).\n"
                    ":param x1: next state (dim state.nx()).\n"
                    ":param firstsecond: derivative w.r.t x0 or x1 or both\n"
                    ":return the partial derivative(s) of the diff(x0, x1) "
                    "function"))
        .def("Jintegrate", &State::Jintegrate_Js,
             Jintegrates(
                 bp::args("self", "x", "dx", "firstsecond"),
                 "Compute the partial derivatives of arithmetic addition.\n\n"
                 "Both Jacobian matrices are represented throught an identity "
                 "matrix. By default, this function returns the derivatives of "
                 "the first and second argument (i.e. firstsecond='both'). "
                 "However we ask for a specific partial derivative by setting "
                 "firstsecond='first' or firstsecond='second'.\n"
                 ":param x: current state (dim state.nx()).\n"
                 ":param dx: displacement of the state (dim state.nx()).\n"
                 ":param firstsecond: derivative w.r.t x or dx or both\n"
                 ":return the partial derivative(s) of the integrate(x, dx) "
                 "function"))
        .def("JintegrateTransport", &State::JintegrateTransport,
             bp::args("self", "x", "dx", "Jin", "firstsecond"),
             "Parallel transport from integrate(x, dx) to x.\n\n"
             "This function performs the parallel transportation of an input "
             "matrix whose columns are expressed in the tangent space at "
             "integrate(x, dx) to the tangent space at x point.\n"
             ":param x: state point (dim. state.nx).\n"
             ":param dx: velocity vector (dim state.ndx).\n"
             ":param Jin: input matrix (number of rows = state.nv).\n"
             ":param firstsecond: derivative w.r.t x or dx");
  }
};

#define CROCODDYL_STATE_VECTOR_PYTHON_BINDINGS(Scalar)                         \
  typedef StateVectorTpl<Scalar> State;                                        \
  typedef StateAbstractTpl<Scalar> StateBase;                                  \
  bp::register_ptr_to_python<std::shared_ptr<State>>();                        \
  bp::class_<State, bp::bases<StateBase>>(                                     \
      "StateVector",                                                           \
      "Euclidean state vector.\n\n"                                            \
      "For this type of states, the difference and integrate operators are "   \
      "described by arithmetic subtraction and addition operations, "          \
      "respectively. Due to the Euclidean point and its velocity lie in the "  \
      "same space, all Jacobians are described throught the identity matrix.", \
      bp::init<std::size_t>(bp::args("self", "nx"),                            \
                            "Initialize the vector dimension.\n\n"             \
                            ":param nx: dimension of state"))                  \
      .def(StateVectorVisitor<State>())                                        \
      .def(CastVisitor<State>())                                               \
      .def(PrintableVisitor<State>())                                          \
      .def(CopyableVisitor<State>());

void exposeStateEuclidean() {
  CROCODDYL_STATE_VECTOR_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
