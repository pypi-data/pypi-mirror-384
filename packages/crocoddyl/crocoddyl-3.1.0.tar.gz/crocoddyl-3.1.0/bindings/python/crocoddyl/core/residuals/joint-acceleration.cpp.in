///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2022-2023, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/residuals/joint-acceleration.hpp"

#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelJointAccelerationVisitor
    : public bp::def_visitor<ResidualModelJointAccelerationVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateAbstract State;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, VectorXs>(
               bp::args("self", "state", "aref"),
               "Initialize the joint-acceleration residual model.\n\n"
               "The default nu value is obtained from state.nv.\n"
               ":param state: state description\n"
               ":param aref: reference joint acceleration"))
        .def(bp::init<std::shared_ptr<State>, std::size_t>(
            bp::args("self", "state", "nu"),
            "Initialize the joint-acceleration residual model.\n\n"
            "The default reference joint-acceleration is obtained from "
            "np.zero(actuation.nu).\n"
            ":param state: state description\n"
            ":param nu: dimension of the control vector"))
        .def(bp::init<std::shared_ptr<State>>(
            bp::args("self", "state"),
            "Initialize the joint-acceleration residual model.\n\n"
            "The default reference joint-acceleration is obtained from "
            "np.zero(actuation.nu). The default nu value is obtained from "
            "state.nv.\n"
            ":param state: state description"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the joint-acceleration residual.\n\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the joint-acceleration residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the joint-acceleration residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for the joint-acceleration residual.\n"
             ":param data: shared data\n"
             ":return residual data.")
        .add_property("reference",
                      bp::make_function(&Model::get_reference,
                                        bp::return_internal_reference<>()),
                      &Model::set_reference, "reference joint acceleration");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_JOINTACC_PYTHON_BINDINGS(Scalar)          \
  typedef ResidualModelJointAccelerationTpl<Scalar> Model;                 \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                      \
  typedef typename ModelBase::StateAbstract State;                         \
  typedef typename ModelBase::VectorXs VectorXs;                           \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                    \
  bp::class_<Model, bp::bases<ModelBase>>(                                 \
      "ResidualModelJointAcceleration",                                    \
      "This residual function defines a residual vector as r = a - aref, " \
      "with a and aref as the current and reference joint acceleration "   \
      "(i.e., generalized acceleration), respectively.",                   \
      bp::init<std::shared_ptr<State>, VectorXs, std::size_t>(             \
          bp::args("self", "state", "aref", "nu"),                         \
          "Initialize the joint-acceleration residual model.\n\n"          \
          ":param state: state description\n"                              \
          ":param aref: reference joint acceleration\n"                    \
          ":param nu: dimension of the control vector"))                   \
      .def(ResidualModelJointAccelerationVisitor<Model>())                 \
      .def(CastVisitor<Model>())                                           \
      .def(PrintableVisitor<Model>())                                      \
      .def(CopyableVisitor<Model>());

void exposeResidualJointAcceleration() {
  CROCODDYL_RESIDUAL_MODEL_JOINTACC_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
