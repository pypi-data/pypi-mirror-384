///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

#include "crocoddyl/core/solvers/box-fddp.hpp"

#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/utils/copyable.hpp"

#define SCALAR_@SCALAR_NAME@

namespace crocoddyl {
namespace python {

void exposeSolverBoxFDDP() {
#ifdef SCALAR_float64
  bp::register_ptr_to_python<std::shared_ptr<SolverBoxFDDP> >();

  bp::class_<SolverBoxFDDP, bp::bases<SolverFDDP> >(
      "SolverBoxFDDP",
      "Box-constrained FDDP solver.\n\n"
      ":param shootingProblem: shooting problem (list of action models along "
      "trajectory.)",
      bp::init<std::shared_ptr<ShootingProblem> >(
          bp::args("self", "problem"),
          "Initialize the vector dimension.\n\n"
          ":param problem: shooting problem."))
      .add_property(
          "Quu_inv",
          make_function(
              &SolverBoxFDDP::get_Quu_inv,
              bp::return_value_policy<bp::reference_existing_object>()),
          "inverse of the Quu computed by the box QP")
      .def(CopyableVisitor<SolverBoxFDDP>());
#endif
}

}  // namespace python
}  // namespace crocoddyl
