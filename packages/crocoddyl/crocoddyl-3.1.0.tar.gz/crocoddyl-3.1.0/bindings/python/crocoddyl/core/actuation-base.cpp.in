///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/core/actuation-base.hpp"

#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActuationModelAbstractVisitor
    : public bp::def_visitor<ActuationModelAbstractVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  typedef typename Model::ActuationModel ActuationModel;
  typedef typename Model::ActuationData ActuationData;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", pure_virtual(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the actuation signal and actuation set from the "
           "joint-torque input u.\n\n"
           "It describes the time-continuos evolution of the actuation model.\n"
           ":param data: actuation data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: joint-torque input (dim. nu)")
        .def("calc",
             static_cast<void (ActuationModel::*)(
                 const std::shared_ptr<ActuationData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ActuationModel::calc),
             bp::args("self", "data", "x"),
             "Ignore the computation of the actuation signal and actuation "
             "set.\n\n"
             "It does not update the actuation signal as this function is used "
             "in "
             "the\n"
             "terminal nodes of an optimal control problem.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x", "u"),
             "Compute the Jacobians of the actuation model.\n\n"
             "It computes the partial derivatives of the actuation model which "
             "is\n"
             "describes in continouos time.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: joint-torque input (dim. nu)")
        .def("calcDiff",
             static_cast<void (ActuationModel::*)(
                 const std::shared_ptr<ActuationData>&,
                 const Eigen::Ref<const VectorXs>&)>(&ActuationModel::calc),
             bp::args("self", "data", "x"),
             "Ignore the computation of the Jacobians of the actuation "
             "function.\n\n"
             "It does not update the Jacobians of the actuation function as "
             "this "
             "function\n"
             "is used in the terminal nodes of an optimal control problem.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)")
        .def("commands", pure_virtual(&Model::commands),
             bp::args("self", "data", "x", "tau"),
             "Compute the joint-torque commands from the generalized "
             "torques.\n\n"
             "It stores the results in data.u.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param tau: generalized torques (dim state.nv)")
        .def("torqueTransform", &Model::torqueTransform,
             &Model::default_torqueTransform,
             bp::args("self", "data", "x", "u"),
             "Compute the torque transform from generalized torques to "
             "joint-torque inputs.\n\n"
             "It stores the results in data.Mtau.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: joint-torque input (dim nu)")
        .def("createData", &Model::createData, &Model::default_createData,
             bp::args("self"),
             "Create the actuation data.\n\n"
             "Each actuation model (AM) has its own data that needs to be "
             "allocated.\n"
             "This function returns the allocated data for a predefined AM.\n"
             ":return AM data.")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of joint-torque vector")
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state");
  }
};

template <typename Data>
struct ActuationDataAbstractVisitor
    : public bp::def_visitor<ActuationDataAbstractVisitor<Data>> {
  typedef typename Data::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "tau", bp::make_getter(&Data::tau, bp::return_internal_reference<>()),
          bp::make_setter(&Data::tau), "generalized torques")
        .add_property(
            "u", bp::make_getter(&Data::u, bp::return_internal_reference<>()),
            bp::make_setter(&Data::u), "joint-torque inputs")
        .add_property(
            "dtau_dx",
            bp::make_getter(&Data::dtau_dx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dtau_dx),
            "partial derivatives of the actuation model w.r.t. the state point")
        .add_property(
            "dtau_du",
            bp::make_getter(&Data::dtau_du, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dtau_du),
            "partial derivatives of the actuation model w.r.t. the "
            "joint-torque input")
        .add_property(
            "Mtau",
            bp::make_getter(&Data::Mtau, bp::return_internal_reference<>()),
            bp::make_setter(&Data::Mtau),
            "torque transform from generalized torques to joint-torque input")
        .add_property(
            "tau_set",
            bp::make_getter(&Data::tau_set,
                            bp::return_value_policy<bp::return_by_value>()),
            bp::make_setter(&Data::tau_set), "actuation set");
  }
};

#define CROCODDYL_ACTUATION_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)             \
  typedef ActuationModelAbstractTpl<Scalar> Model;                             \
  typedef ActuationModelAbstractTpl_wrap<Scalar> Model_wrap;                   \
  typedef StateAbstractTpl<Scalar> State;                                      \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model_wrap, boost::noncopyable>(                                  \
      "ActuationModelAbstract",                                                \
      "Abstract class for actuation-mapping models.\n\n"                       \
      "An actuation model is a function that maps state x and joint-torque "   \
      "inputs u into generalized torques tau, where tau is also named as the " \
      "actuation signal of our system. The computation of the actuation "      \
      "signal and its partial derivatives are mainly carried out inside "      \
      "calc() and calcDiff(), respectively.",                                  \
      bp::init<std::shared_ptr<State>, std::size_t>(                           \
          bp::args("self", "state", "nu"),                                     \
          "Initialize the actuation model.\n\n"                                \
          ":param state: state description,\n"                                 \
          ":param nu: dimension of the joint-torque input"))                   \
      .def(ActuationModelAbstractVisitor<Model_wrap>())                        \
      .def(PrintableVisitor<Model_wrap>())                                     \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_ACTUATION_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)             \
  typedef ActuationDataAbstractTpl<Scalar> Data;                              \
  typedef ActuationModelAbstractTpl<Scalar> Model;                            \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                        \
  bp::class_<Data>(                                                           \
      "ActuationDataAbstract",                                                \
      "Abstract class for actuation datas.\n\n"                               \
      "An actuation data contains all the required information for "          \
      "processing an user-defined actuation model. The actuation data "       \
      "typically is allocated onces by running model.createData().",          \
      bp::init<Model*>(                                                       \
          bp::args("self", "model"),                                          \
          "Create common data shared between actuation models.\n\n"           \
          "The actuation data uses the model in order to first process it.\n" \
          ":param model: actuation model"))                                   \
      .def(ActuationDataAbstractVisitor<Data>())                              \
      .def(CopyableVisitor<Data>());

void exposeActuationAbstract() {
  CROCODDYL_ACTUATION_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTUATION_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
