///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/activations/weighted-quadratic-barrier.hpp"

#include "python/crocoddyl/core/activation-base.hpp"
#include "python/crocoddyl/core/core.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActivationModelWeightedQuadraticBarrierVisitor
    : public bp::def_visitor<
          ActivationModelWeightedQuadraticBarrierVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "r"),
           "Compute the inequality activation.\n\n"
           ":param data: activation data\n"
           ":param r: residual vector")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "r"),
             "Compute the derivatives of inequality activation.\n\n"
             "Note that the Hessian is constant, so we don't write again this "
             "value. It assumes that calc has been run first.\n"
             ":param data: activation data\n"
             ":param r: residual vector \n")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the weighted quadratic activation data.")
        .add_property(
            "bounds",
            bp::make_function(&Model::get_bounds,
                              bp::return_value_policy<bp::return_by_value>()),
            bp::make_function(&Model::set_bounds),
            "bounds (beta, lower and upper bounds)")
        .add_property("weights",
                      bp::make_function(&Model::get_weights,
                                        bp::return_internal_reference<>()),
                      bp::make_function(&Model::set_weights),
                      "vector of weights");
  }
};

#define CROCODDYL_ACTIVATION_MODEL_WEIGHTEDQUADRATICBARRIER_PYTHON_BINDINGS( \
    Scalar)                                                                  \
  typedef ActivationModelWeightedQuadraticBarrierTpl<Scalar> Model;          \
  typedef ActivationModelAbstractTpl<Scalar> ModelBase;                      \
  typedef ActivationBoundsTpl<Scalar> Bounds;                                \
  typedef typename Model::VectorXs VectorXs;                                 \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                      \
  bp::class_<Model, bp::bases<ModelBase>>(                                   \
      "ActivationModelWeightedQuadraticBarrier",                             \
      "Inequality activation model.\n\n"                                     \
      "The activation is zero when r is between the lower (lb) and upper "   \
      "(ub) bounds, beta determines how much of the total range is not "     \
      "activated. This is the activation equations:\n"                       \
      "a(r) = 0.5 * ||r||_w^2 for lb < r < ub\n"                             \
      "a(r) = 0. for lb >= r >= ub,\n"                                       \
      "where w is the vector of weights",                                    \
      bp::init<Bounds, VectorXs>(bp::args("self", "bounds", "weights"),      \
                                 "Initialize the activation model.\n\n"      \
                                 ":param bounds: activation bounds\n"        \
                                 ":param weights: weights"))                 \
      .def(ActivationModelWeightedQuadraticBarrierVisitor<Model>())          \
      .def(CastVisitor<Model>())                                             \
      .def(PrintableVisitor<Model>())                                        \
      .def(CopyableVisitor<Model>());

void exposeActivationWeightedQuadraticBarrier() {
  CROCODDYL_ACTIVATION_MODEL_WEIGHTEDQUADRATICBARRIER_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
