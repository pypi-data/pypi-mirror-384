///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          University of Oxford, University of Trento,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/core/integrator/euler.hpp"

#include "python/crocoddyl/core/core.hpp"
#include "python/crocoddyl/core/integ-action-base.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct IntegratedActionModelEulerVisitor
    : public bp::def_visitor<IntegratedActionModelEulerVisitor<Model>> {
  typedef typename Model::Scalar Scalar;
  typedef typename Model::ActionDataAbstract Data;
  typedef
      typename Model::DifferentialActionModelAbstract DifferentialActionModel;
  typedef typename Model::ControlParametrizationModelAbstract
      ControlParametrizationModel;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<DifferentialActionModel>,
                    std::shared_ptr<ControlParametrizationModel>,
                    bp::optional<Scalar, bool>>(
               bp::args("self", "diffModel", "control", "stepTime",
                        "withCostResidual"),
               "Initialize the Euler integrator.\n\n"
               ":param diffModel: differential action model\n"
               ":param control: the control parametrization\n"
               ":param stepTime: step time (default 1e-3)\n"
               ":param withCostResidual: includes the cost residuals and "
               "derivatives (default True)."))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the time-discrete evolution of a differential action "
            "model.\n\n"
            "It describes the time-discrete evolution of action model.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Computes the derivatives of the integrated action model wrt state "
            "and control. \n\n"
            "This function builds a quadratic approximation of the action "
            "model (i.e. dynamical system and cost function). It assumes that "
            "calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, bp::args("self"),
             "Create the Euler integrator data.")
        .add_property(
            "ng", bp::make_function(&Model::get_ng), "number of equality constraints")
        .add_property(
            "nh", bp::make_function(&Model::get_nh), "number of inequality constraints")
        .add_property(
            "ng_T", bp::make_function(&Model::get_ng_T), "number of equality terminal constraints")
        .add_property(
            "nh_T", bp::make_function(&Model::get_nh_T), "number of inequality terminal constraints");
  }
};

template <typename Data>
struct IntegratedActionDataEulerVisitor
    : public bp::def_visitor<IntegratedActionDataEulerVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "differential",
          bp::make_getter(&Data::differential,
                          bp::return_value_policy<bp::return_by_value>()),
          "differential action data")
        .add_property(
            "control",
            bp::make_getter(&Data::control,
                            bp::return_value_policy<bp::return_by_value>()),
            "control parametrization data")
        .add_property(
            "dx", bp::make_getter(&Data::dx, bp::return_internal_reference<>()),
            "state rate.")
        .add_property(
            "Lwu",
            bp::make_getter(&Data::Lwu, bp::return_internal_reference<>()),
            "Hessian of the cost wrt the differential control (w) and "
            "the control parameters (u).");
  }
};

#define CROCODDYL_INTACTION_MODEL_EULER_PYTHON_BINDINGS(Scalar)              \
  typedef IntegratedActionModelEulerTpl<Scalar> Model;                       \
  typedef IntegratedActionModelAbstractTpl<Scalar> ModelBase;                \
  typedef ActionModelAbstractTpl<Scalar> ActionBase;                         \
  typedef DifferentialActionModelAbstractTpl<Scalar> DiffActionBase;         \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                      \
  bp::class_<Model, bp::bases<ModelBase, ActionBase>>(                       \
      "IntegratedActionModelEuler",                                          \
      "Sympletic Euler integrator for differential action models.\n\n"       \
      "This class implements a sympletic Euler integrator (a.k.a "           \
      "semi-implicit integrator) give a differential action model, i.e.:\n"  \
      "  [q+, v+] = State.integrate([q, v], [v + a * dt, a * dt] * dt).",    \
      bp::init<std::shared_ptr<DiffActionBase>, bp::optional<Scalar, bool>>( \
          bp::args("self", "diffModel", "stepTime", "withCostResidual"),     \
          "Initialize the sympletic Euler integrator.\n\n"                   \
          ":param diffModel: differential action model\n"                    \
          ":param stepTime: step time (default 1e-3)\n"                      \
          ":param withCostResidual: includes the cost residuals and "        \
          "derivatives (default True)."))                                    \
      .def(IntegratedActionModelEulerVisitor<Model>())                       \
      .def(CastVisitor<Model>())                                             \
      .def(PrintableVisitor<Model>())                                        \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_INTACTION_DATA_EULER_PYTHON_BINDINGS(Scalar)            \
  typedef IntegratedActionDataEulerTpl<Scalar> Data;                      \
  typedef IntegratedActionDataAbstractTpl<Scalar> DataBase;               \
  typedef IntegratedActionModelEulerTpl<Scalar> Model;                    \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                    \
  bp::class_<Data, bp::bases<DataBase>>(                                  \
      "IntegratedActionDataEuler", "Sympletic Euler integrator data.",    \
      bp::init<Model*>(bp::args("self", "model"),                         \
                       "Create sympletic Euler integrator data.\n\n"      \
                       ":param model: sympletic Euler integrator model")) \
      .def(IntegratedActionDataEulerVisitor<Data>())                      \
      .def(CopyableVisitor<Data>());

void exposeIntegratedActionEuler() {
  CROCODDYL_INTACTION_MODEL_EULER_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_INTACTION_DATA_EULER_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
