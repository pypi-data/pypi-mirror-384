///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/actuations/floating-base.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActuationModelFloatingBaseVisitor
    : public bp::def_visitor<ActuationModelFloatingBaseVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "x", "u"),
           "Compute the floating-base actuation signal and actuation set from "
           "the joint torque input u.\n\n"
           "It describes the time-continuos evolution of the floating-base "
           "actuation model.\n"
           ":param data: floating-base actuation data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: joint-torque input (dim. nu)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x", "u"),
             "Compute the Jacobians of the floating-base actuation model.\n\n"
             "It computes the partial derivatives of the floating-base "
             "actuation. It assumes that calc\n"
             "has been run first. The reason is that the derivatives are "
             "constant and defined in createData. The derivatives are "
             "constant, so we don't write again these values.\n"
             ":param data: floating-base actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: joint-torque input (dim. nu)")
        .def("commands", &Model::commands, bp::args("self", "data", "x", "tau"),
             "Compute the joint-torque commands from the generalized "
             "torques.\n\n"
             "It stores the results in data.u.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param tau: generalized torques (dim state.nv)")
        .def("torqueTransform", &Model::torqueTransform,
             bp::args("self", "data", "x", "tau"),
             "Compute the torque transform from generalized torques to "
             "joint-torque inputs.\n\n"
             "It stores the results in data.Mtau.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param tau: generalized torques (dim state.nv)")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the floating-base actuation data.\n\n"
             "Each actuation model (AM) has its own data that needs to be "
             "allocated.\n"
             "This function returns the allocated data for a predefined AM.\n"
             ":return AM data.");
  }
};

#define CROCODDYL_ACTUATION_MODEL_FLOATINGBASE_PYTHON_BINDINGS(Scalar)         \
  typedef ActuationModelFloatingBaseTpl<Scalar> Model;                         \
  typedef ActuationModelAbstractTpl<Scalar> ModelBase;                         \
  typedef StateMultibodyTpl<Scalar> StateMultibody;                            \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model, bp::bases<ModelBase>>(                                     \
      "ActuationModelFloatingBase",                                            \
      "Floating-base actuation models.\n\n"                                    \
      "It considers the first joint, defined in the Pinocchio model, as the "  \
      "floating-base joints. Then, this joint (that might have various DoFs) " \
      "is unactuated.",                                                        \
      bp::init<std::shared_ptr<StateMultibody>>(                               \
          bp::args("self", "state"),                                           \
          "Initialize the floating-base actuation model.\n\n"                  \
          ":param state: state of multibody system"))                          \
      .def(ActuationModelFloatingBaseVisitor<Model>())                         \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

void exposeActuationFloatingBase() {
  CROCODDYL_ACTUATION_MODEL_FLOATINGBASE_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
