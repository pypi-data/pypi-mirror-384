///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/residuals/com-position.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelCoMPositionVisitor
    : public bp::def_visitor<ResidualModelCoMPositionVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateMultibody State;
  typedef typename Model::VectorXs VectorXs;
  typedef typename Model::Vector3s Vector3s;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, Vector3s>(
               bp::args("self", "state", "cref"),
               "Initialize the CoM position residual model.\n\n"
               "The default nu is obtained from state.nv.\n"
               ":param state: state of the multibody system\n"
               ":param cref: reference CoM position"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            bp::args("self", "data", "x", "u"),
            "Compute the CoM position residual.\n\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calc),
            bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the CoM position residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the CoM position residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for a predefined residual.\n"
             ":param data: shared data\n"
             ":return residual data.")
        .add_property("reference",
                      bp::make_function(&Model::get_reference,
                                        bp::return_internal_reference<>()),
                      &Model::set_reference, "reference CoM position");
  }
};

template <typename Data>
struct ResidualDataCoMPositionVisitor
    : public bp::def_visitor<ResidualDataCoMPositionVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
        "pinocchio",
        bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
        "pinocchio data");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_COM_POSITION_PYTHON_BINDINGS(Scalar)          \
  typedef ResidualModelCoMPositionTpl<Scalar> Model;                           \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                          \
  typedef typename Model::StateMultibody State;                                \
  typedef typename Model::Vector3s Vector3s;                                   \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                        \
  bp::class_<Model, bp::bases<ModelBase>>(                                     \
      "ResidualModelCoMPosition",                                              \
      "This residual function defines the CoM tracking as r = c - cref, with " \
      "c and cref as the current and reference CoM position, respectively.",   \
      bp::init<std::shared_ptr<State>, Vector3s, std::size_t>(                 \
          bp::args("self", "state", "cref", "nu"),                             \
          "Initialize the CoM position residual model.\n\n"                    \
          ":param state: state of the multibody system\n"                      \
          ":param cref: reference CoM position\n"                              \
          ":param nu: dimension of control vector"))                           \
      .def(ResidualModelCoMPositionVisitor<Model>())                           \
      .def(CastVisitor<Model>())                                               \
      .def(PrintableVisitor<Model>())                                          \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_RESIDUAL_DATA_COM_POSITION_PYTHON_BINDINGS(Scalar)    \
  typedef ResidualDataCoMPositionTpl<Scalar> Data;                      \
  typedef ResidualDataAbstractTpl<Scalar> DataBase;                     \
  typedef ResidualModelCoMPositionTpl<Scalar> Model;                    \
  typedef Model::DataCollectorAbstract DataCollector;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                  \
  bp::class_<Data, bp::bases<DataBase>>(                                \
      "ResidualDataCoMPosition", "Data for CoM position residual.\n\n", \
      bp::init<Model*, DataCollector*>(                                 \
          bp::args("self", "model", "data"),                            \
          "Create CoM position residual data.\n\n"                      \
          ":param model: CoM position residual model\n"                 \
          ":param data: shared data")[bp::with_custodian_and_ward<      \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                  \
      .def(ResidualDataCoMPositionVisitor<Data>())                      \
      .def(CopyableVisitor<Data>());

void exposeResidualCoMPosition() {
  CROCODDYL_RESIDUAL_MODEL_COM_POSITION_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_RESIDUAL_DATA_COM_POSITION_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
