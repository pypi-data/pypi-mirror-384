///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "python/crocoddyl/multibody/impulse-base.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"
#include "python/crocoddyl/utils/deprecate.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ImpulseModelAbstractVisitor
    : public bp::def_visitor<ImpulseModelAbstractVisitor<Model>> {
  typedef typename Model::StateMultibody State;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, std::size_t>(
               bp::args("self", "state", "nc"),
               "Initialize the impulse model.\n\n"
               ":param state: state of the multibody system\n"
               ":param nc: dimension of impulse model"))
        .def("calc", pure_virtual(&Model::calc), bp::args("self", "data", "x"),
             "Compute the impulse Jacobian\n"
             ":param data: impulse data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", pure_virtual(&Model::calcDiff),
             bp::args("self", "data", "x"),
             "Compute the derivatives of impulse Jacobian\n"
             "It assumes that calc has been run first.\n"
             ":param data: impulse data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateForce", pure_virtual(&Model::updateForce),
             bp::args("self", "data", "force"),
             "Convert the force into a stack of spatial forces.\n\n"
             ":param data: impulse data\n"
             ":param force: force vector (dimension nc)")
        .def("updateForceDiff", &Model::updateForceDiff,
             bp::args("self", "data", "df_dx"),
             "Update the Jacobian of the impulse force.\n\n"
             ":param data: impulse data\n"
             ":param df_dx: Jacobian of the impulse force (dimension nc*ndx)")
        .def("setZeroForce", &Model::setZeroForce, bp::args("self", "data"),
             "Set zero the spatial force.\n\n"
             ":param data: contact data")
        .def("setZeroForceDiff", &Model::setZeroForceDiff,
             bp::args("self", "data"),
             "Set zero the derivatives of the spatial force.\n\n"
             ":param data: contact data")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the impulse data.\n\n"
             "Each impulse model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for a predefined impulse.\n"
             ":param data: Pinocchio data\n"
             ":return impulse data.")
        .def("createData", &Model::default_createData,
             bp::with_custodian_and_ward_postcall<0, 2>())
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state of the multibody system")
        .add_property("ni",
                      bp::make_function(&Model::get_nc,
                                        deprecated<>("Deprecated. Use nc")),
                      "dimension of impulse")
        .add_property("nc", bp::make_function(&Model::get_nc),
                      "dimension of impulse")
        .add_property("id", &Model::get_id, &Model::set_id,
                      "reference frame id")
        .add_property("type", bp::make_function(&Model::get_type),
                      &Model::set_type, "type of impulse");
  }
};

template <typename Data>
struct ImpulseDataAbstractVisitor
    : public bp::def_visitor<ImpulseDataAbstractVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "fXj", bp::make_getter(&Data::fXj, bp::return_internal_reference<>()),
          bp::make_setter(&Data::fXj),
          "action matrix from contact to local frames")
        .add_property(
            "dv0_dq",
            bp::make_getter(&Data::dv0_dq, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dv0_dq),
            "Jacobian of the previous impulse velocity")
        .add_property(
            "dtau_dq",
            bp::make_getter(&Data::dtau_dq, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dtau_dq), "force contribution to dtau_dq");
  }
};

#define CROCODDYL_IMPULSE_MODEL_ABSTRACT_PYTHON_BINDINGS(Scalar)            \
  typedef ImpulseModelAbstractTpl<Scalar> Model;                            \
  typedef ImpulseModelAbstractTpl_wrap<Scalar> Model_wrap;                  \
  typedef Model::StateMultibody State;                                      \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                     \
  bp::class_<Model_wrap, boost::noncopyable>(                               \
      "ImpulseModelAbstract",                                               \
      "Abstract impulse model.\n\n"                                         \
      "It defines a template for impulse models.\n"                         \
      "The calc and calcDiff functions compute the impulse Jacobian the "   \
      "derivatives respectively.",                                          \
      bp::init<std::shared_ptr<State>, pinocchio::ReferenceFrame,           \
               std::size_t>(bp::args("self", "state", "type", "nc"),        \
                            "Initialize the impulse model.\n\n"             \
                            ":param state: state of the multibody system\n" \
                            ":param type: type of impulse\n"                \
                            ":param nc: dimension of impulse model"))       \
      .def(ImpulseModelAbstractVisitor<Model_wrap>())                       \
      .def(PrintableVisitor<Model_wrap>())                                  \
      .def(CopyableVisitor<Model_wrap>());

#define CROCODDYL_IMPULSE_DATA_ABSTRACT_PYTHON_BINDINGS(Scalar)                \
  typedef ImpulseDataAbstractTpl<Scalar> Data;                                 \
  typedef ImpulseModelAbstractTpl<Scalar> Model;                               \
  typedef ForceDataAbstractTpl<Scalar> ForceData;                              \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                            \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                         \
  bp::class_<Data, bp::bases<ForceData>>(                                      \
      "ImpulseDataAbstract", "Abstract class for impulse data.\n\n",           \
      bp::init<Model*, PinocchioData*>(                                        \
          bp::args("self", "model", "data"),                                   \
          "Create common data shared between impulse models.\n\n"              \
          ":param model: impulse model\n"                                      \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward<1, 3>()]) \
      .def(ImpulseDataAbstractVisitor<Data>())                                 \
      .def(CopyableVisitor<Data>());

void exposeImpulseAbstract() {
  CROCODDYL_IMPULSE_MODEL_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_IMPULSE_DATA_ABSTRACT_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
