///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh,
//                          University of Oxford, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/contacts/multiple-contacts.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"
#include "python/crocoddyl/utils/map-converter.hpp"
#include "python/crocoddyl/utils/set-converter.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ContactItemVisitor : public bp::def_visitor<ContactItemVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def_readwrite("name", &Model::name, "contact name")
        .add_property(
            "contact",
            bp::make_getter(&Model::contact,
                            bp::return_value_policy<bp::return_by_value>()),
            "contact model")
        .def_readwrite("active", &Model::active, "contact status");
  }
};

template <typename Model>
struct ContactModelMultipleVisitor
    : public bp::def_visitor<ContactModelMultipleVisitor<Model>> {
  BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(ContactModelMultiple_addContact_wrap,
                                         Model::addContact, 2, 3)
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(
          "addContact", &Model::addContact,
          ContactModelMultiple_addContact_wrap(
              bp::args("self", "name", "contact", "active"),
              "Add a contact item.\n\n"
              ":param name: contact name\n"
              ":param contact: contact model\n"
              ":param active: True if the contact is activated (default true)"))
        .def("removeContact", &Model::removeContact, bp::args("self", "name"),
             "Remove a contact item.\n\n"
             ":param name: contact name")
        .def("changeContactStatus", &Model::changeContactStatus,
             bp::args("self", "name", "active"),
             "Change the contact status.\n\n"
             ":param name: contact name\n"
             ":param active: contact status (true for active and false for "
             "inactive)")
        .def("calc", &Model::calc, bp::args("self", "data", "x"),
             "Compute the contact Jacobian and contact acceleration.\n\n"
             "The rigid contact model throught acceleration-base holonomic "
             "constraint\n"
             "of the contact frame placement.\n"
             ":param data: contact data\n"
             ":param x: state point (dim. state.nx)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x"),
             "Compute the derivatives of the contact holonomic constraint.\n\n"
             "The rigid contact model throught acceleration-base holonomic "
             "constraint\n"
             "of the contact frame placement.\n"
             "It assumes that calc has been run first.\n"
             ":param data: contact data\n"
             ":param x: state point (dim. state.nx)")
        .def("updateAcceleration", &Model::updateAcceleration,
             bp::args("self", "data", "dv"),
             "Update the constrained system acceleration.\n\n"
             ":param data: contact data\n"
             ":param dv: constrained acceleration (dimension nv)")
        .def("updateForce", &Model::updateForce,
             bp::args("self", "data", "force"),
             "Update the spatial force in frame coordinate.\n\n"
             ":param data: contact data\n"
             ":param force: force vector (dimension nc)")
        .def(
            "updateAccelerationDiff", &Model::updateAccelerationDiff,
            bp::args("self", "data", "ddv_dx"),
            "Update the Jacobian of the constrained system acceleration.\n\n"
            ":param data: contact data\n"
            ":param ddv_dx: Jacobian of the system acceleration in generalized "
            "coordinates (dimension nv*ndx)")
        .def("updateForceDiff", &Model::updateForceDiff,
             bp::args("self", "data", "df_dx", "df_du"),
             "Update the Jacobians of the spatial force defined in frame "
             "coordinates.\n\n"
             ":param data: contact data\n"
             ":param df_dx: Jacobian of the force with respect to the state "
             "(dimension nc*ndx)\n"
             ":param df_du: Jacobian of the force with respect to the control "
             "(dimension nc*nu)")
        .def("updateRneaDiff", &Model::updateRneaDiff,
             bp::args("self", "data", "pinocchio"),
             "Update the RNEA derivative dtau_dq by by adding the skew term "
             "(necessary for contacts expressed in\n"
             "LOCAL_WORLD_ALIGNED / WORLD).\n\n"
             ":param data: contact data\n"
             ":param pinocchio: Pinocchio data")
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the total contact data.\n\n"
             ":param data: Pinocchio data\n"
             ":return total contact data.")
        .add_property(
            "contacts",
            bp::make_function(&Model::get_contacts,
                              bp::return_value_policy<bp::return_by_value>()),
            "stack of contacts")
        .add_property(
            "state",
            bp::make_function(&Model::get_state,
                              bp::return_value_policy<bp::return_by_value>()),
            "state of the multibody system")
        .add_property("nc", bp::make_function(&Model::get_nc),
                      "dimension of the active contact vector")
        .add_property("nc_total", bp::make_function(&Model::get_nc_total),
                      "dimension of the total contact vector")
        .add_property("nu", bp::make_function(&Model::get_nu),
                      "dimension of control vector")
        .add_property(
            "active_set",
            bp::make_function(&Model::get_active_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "names of the active set of contact items")
        .add_property(
            "inactive_set",
            bp::make_function(&Model::get_inactive_set,
                              bp::return_value_policy<bp::return_by_value>()),
            "names of the inactive set of contact items")
        .def("getContactStatus", &Model::getContactStatus,
             bp::args("self", "name"),
             "Return the contact status of a given contact name.\n\n"
             ":param name: contact name")
        .add_property(
            "computeAllContacts",
            bp::make_function(&Model::getComputeAllContacts),
            bp::make_function(&Model::setComputeAllContacts),
            "type of contact computation (True for all contacts and False for "
            "active contacts)");
  }
};

template <typename Data>
struct ContactDataMultipleVisitor
    : public bp::def_visitor<ContactDataMultipleVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "Jc", bp::make_getter(&Data::Jc, bp::return_internal_reference<>()),
          bp::make_setter(&Data::Jc),
          "contact Jacobian in frame coordinate (memory defined for "
          "active and inactive contacts)")
        .add_property(
            "a0", bp::make_getter(&Data::a0, bp::return_internal_reference<>()),
            bp::make_setter(&Data::a0),
            "desired spatial contact acceleration in frame coordinate "
            "(memory defined for active and inactive contacts)")
        .add_property(
            "da0_dx",
            bp::make_getter(&Data::da0_dx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::da0_dx),
            "Jacobian of the desired spatial contact acceleration in "
            "frame coordinate (memory defined for active and "
            "inactive contacts)")
        .add_property(
            "dv", bp::make_getter(&Data::dv, bp::return_internal_reference<>()),
            bp::make_setter(&Data::dv),
            "constrained system acceleration in generalized coordinates")
        .add_property(
            "ddv_dx",
            bp::make_getter(&Data::ddv_dx, bp::return_internal_reference<>()),
            bp::make_setter(&Data::ddv_dx),
            "Jacobian of the constrained system acceleration in "
            "generalized coordinates")
        .add_property(
            "contacts",
            bp::make_getter(&Data::contacts,
                            bp::return_value_policy<bp::return_by_value>()),
            "stack of contacts data")
        .def_readwrite("fext", &Data::fext,
                       "external spatial forces in join coordinates");
  }
};

#define CROCODDYL_CONTACT_ITEM_PYTHON_BINDINGS(Scalar)                       \
  typedef ContactItemTpl<Scalar> Item;                                      \
  typedef Item::ContactModelAbstract ContactModel;                          \
  typedef std::shared_ptr<Item> ContactItemPtr;                             \
  StdMapPythonVisitor<                                                       \
      std::string, ContactItemPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, ContactItemPtr>>,          \
      true>::expose("StdMap_ContactItem");                                   \
  typedef ContactDataAbstractTpl<Scalar> ContactData;                        \
  typedef std::shared_ptr<ContactData> ContactDataPtr;                       \
  StdMapPythonVisitor<                                                       \
      std::string, ContactDataPtr, std::less<std::string>,                   \
      std::allocator<std::pair<const std::string, ContactDataPtr>>,          \
      true>::expose("StdMap_ContactData");                                   \
  bp::register_ptr_to_python<std::shared_ptr<Item>>();                      \
  bp::class_<Item>(                                                         \
      "ContactItem", "Describe a contact item.\n\n",                         \
      bp::init<std::string, std::shared_ptr<ContactModel>,                   \
               bp::optional<bool>>(                                          \
          bp::args("self", "name", "contact", "active"),                     \
          "Initialize the contact item.\n\n"                                 \
          ":param name: contact name\n"                                      \
          ":param contact: contact model\n"                                  \
          ":param active: True if the contact is activated (default true)")) \
      .def(ContactItemVisitor<Item>())                                      \
      .def(CastVisitor<Item>())                                             \
      .def(PrintableVisitor<Item>())                                        \
      .def(CopyableVisitor<Item>());

#define CROCODDYL_CONTACT_MODEL_MULTIPLE_PYTHON_BINDINGS(Scalar)   \
  typedef ContactModelMultipleTpl<Scalar> Model;                   \
  typedef Model::StateMultibody State;                             \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();            \
  bp::class_<Model>(                                               \
      "ContactModelMultiple",                                      \
      bp::init<std::shared_ptr<State>, bp::optional<std::size_t>>( \
          bp::args("self", "state", "nu"),                         \
          "Initialize the multiple contact model.\n\n"             \
          ":param state: state of the multibody system\n"          \
          ":param nu: dimension of control vector"))               \
      .def(ContactModelMultipleVisitor<Model>())                   \
      .def(CastVisitor<Model>())                                   \
      .def(PrintableVisitor<Model>())                              \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_CONTACT_DATA_MULTIPLE_PYTHON_BINDINGS(Scalar)       \
  typedef ContactDataMultipleTpl<Scalar> Data;                        \
  typedef ContactModelMultipleTpl<Scalar> Model;                      \
  typedef pinocchio::DataTpl<Scalar> PinocchioData;                   \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                \
  bp::class_<Data>(                                                   \
      "ContactDataMultiple", "Data class for multiple contacts.\n\n", \
      bp::init<Model*, PinocchioData*>(                               \
          bp::args("self", "model", "data"),                          \
          "Create multicontact data.\n\n"                             \
          ":param model: multicontact model\n"                        \
          ":param data: Pinocchio data")[bp::with_custodian_and_ward< \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                \
      .def(ContactDataMultipleVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeContactMultiple() {
  CROCODDYL_CONTACT_ITEM_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_CONTACT_MODEL_MULTIPLE_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_CONTACT_DATA_MULTIPLE_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
