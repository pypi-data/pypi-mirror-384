///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/actions/contact-invdyn.hpp"

#include "python/crocoddyl/core/diff-action-base.hpp"
#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct DifferentialActionModelContactInvDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionModelContactInvDynamicsVisitor<Model>> {
  typedef typename Model::DifferentialActionDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the next state, cost value and constraints.\n\n"
           ":param data: contact inverse-dynamics data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the differential multibody system, and "
            "its cost and constraint functions.\n\n"
            "It computes the partial derivatives of the differential multibody "
            "system, the cost and constraint functions. It assumes that calc "
            "has been run first. This function builds a quadratic "
            "approximation of the action model (i.e., dynamical system, cost "
            "and constraint functions).\n"
            ":param data: contact inverse-dynamics data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, bp::args("self"),
             "Create the contact inverse-dynamics differential action data.")
        .add_property(
            "actuation",
            bp::make_function(&Model::get_actuation,
                              bp::return_value_policy<bp::return_by_value>()),
            "actuation model")
        .add_property(
            "contacts",
            bp::make_function(&Model::get_contacts,
                              bp::return_value_policy<bp::return_by_value>()),
            "multiple contact model")
        .add_property(
            "costs",
            bp::make_function(&Model::get_costs,
                              bp::return_value_policy<bp::return_by_value>()),
            "total cost model")
        .add_property(
            "constraints",
            bp::make_function(&Model::get_constraints,
                              bp::return_value_policy<bp::return_by_value>()),
            "constraint model manager");
  }
};

template <typename Model>
struct DifferentialActionModelContactInvDynamicsResidualModelActuationVisitor
    : public bp::def_visitor<
          DifferentialActionModelContactInvDynamicsResidualModelActuationVisitor<
              Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the actuation residual.\n\n"
           ":param data: residual data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the actuation residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)\n")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the actuation residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function returns the allocated data for the actuation "
             "residual.\n"
             ":param data: shared data\n"
             ":return residual data.");
  }
};

template <typename Model>
struct DifferentialActionModelContactInvDynamicsResidualModelContactVisitor
    : public bp::def_visitor<
          DifferentialActionModelContactInvDynamicsResidualModelContactVisitor<
              Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the contact-acceleration residual.\n\n"
           ":param data: residual data\n"
           ":param x: state vector\n"
           ":param u: control input")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the contact-acceleration residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state vector\n"
            ":param u: control input\n")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the contact-acceleration residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function returns the allocated data for the "
             "contact-acceleration residual.\n"
             ":param data: shared data\n"
             ":return residual data.");
  }
};

template <typename Data>
struct DifferentialActionDataContactInvDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionDataContactInvDynamicsVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "pinocchio",
          bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
          "pinocchio data")
        .add_property("multibody",
                      bp::make_getter(&Data::multibody,
                                      bp::return_internal_reference<>()),
                      "multibody data")
        .add_property(
            "costs",
            bp::make_getter(&Data::costs,
                            bp::return_value_policy<bp::return_by_value>()),
            "total cost data")
        .add_property(
            "constraints",
            bp::make_getter(&Data::constraints,
                            bp::return_value_policy<bp::return_by_value>()),
            "constraint data");
  }
};

#define CROCODDYL_ACTION_MODEL_CONTACT_INVDYN_PYTHON_BINDINGS(Scalar)             \
  typedef DifferentialActionModelContactInvDynamicsTpl<Scalar> Model;             \
  typedef DifferentialActionModelAbstractTpl<Scalar> ModelBase;                   \
  typedef typename Model::StateMultibody State;                                   \
  typedef typename Model::ActuationModelAbstract Actuation;                       \
  typedef typename Model::ContactModelMultiple Contacts;                          \
  typedef typename Model::CostModelSum Costs;                                     \
  typedef typename Model::ConstraintModelManager Constraints;                     \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                           \
  bp::scope model_outer =                                                         \
      bp::class_<Model, bp::bases<ModelBase>>(                                    \
          "DifferentialActionModelContactInvDynamics",                            \
          "Differential action model for inverse dynamics in multibody "          \
          "systems with contacts.\n\n"                                            \
          "This class implements forward kinematic with holonomic contact "       \
          "constraints (defined at the acceleration level) and "                  \
          "inverse-dynamics computation using the Recursive Newton Euler "        \
          "Algorithm (RNEA). On the other hand, the stack of cost and "           \
          "constraint functions are implemented in ConstraintModelManager() "     \
          "and CostModelSum(), respectively.",                                    \
          bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>,            \
                   std::shared_ptr<Contacts>, std::shared_ptr<Costs>,             \
                   bp::optional<std::shared_ptr<Constraints>>>(                   \
              bp::args("self", "state", "actuation", "contacts", "costs",         \
                       "constraints"),                                            \
              "Initialize the inverse-dynamics action model for system with "     \
              "contact.\n\n"                                                      \
              "It describes the kinematic evolution of the multibody system "     \
              "with contacts, and computes the needed torques using "             \
              "inverse-dynamics.\n."                                              \
              ":param state: multibody state\n"                                   \
              ":param actuation: abstract actuation model\n"                      \
              ":param contacts: stack of contact model\n"                         \
              ":param costs: stack of cost functions\n"                           \
              ":param constraints: stack of constraint functions"))               \
          .def(DifferentialActionModelContactInvDynamicsVisitor<Model>())         \
          .def(CastVisitor<Model>())                                              \
          .def(PrintableVisitor<Model>())                                         \
          .def(CopyableVisitor<Model>());                                         \
  typedef typename Model::ResidualModelActuation ResidualModelActuation;          \
  typedef typename ResidualModelActuation::Base ResidualModelBase;                \
  bp::register_ptr_to_python<std::shared_ptr<ResidualModelActuation>>();          \
  bp::class_<ResidualModelActuation, bp::bases<ResidualModelBase>>(               \
      "ResidualModelActuation",                                                   \
      "This residual function enforces the torques of under-actuated joints "     \
      "(e.g., floating-base joints) to be zero. We compute these torques and "    \
      "their derivatives using RNEA inside "                                      \
      "DifferentialActionModelContactInvDynamics.",                               \
      bp::init<std::shared_ptr<State>, std::size_t, std::size_t>(                 \
          bp::args("self", "state", "nu", "nc"),                                  \
          "Initialize the actuation residual model.\n\n"                          \
          ":param nu: dimension of control vector\n"                              \
          ":param nc: number of the contacts"))                                   \
      .def(                                                                       \
          DifferentialActionModelContactInvDynamicsResidualModelActuationVisitor< \
              ResidualModelActuation>())                                          \
      .def(CopyableVisitor<ResidualModelActuation>());                            \
  typedef typename Model::ResidualModelContact ResidualModelContact;              \
  bp::register_ptr_to_python<std::shared_ptr<ResidualModelContact>>();            \
  bp::class_<ResidualModelContact, bp::bases<ResidualModelBase>>(                 \
      "ResidualModelContact",                                                     \
      "This residual function for the contact acceleration, i.e., r = a0, "       \
      "where a0 is the desired contact acceleration which also considers the "    \
      "Baumgarte stabilization.",                                                 \
      bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, std::size_t,        \
               std::size_t>(                                                      \
          bp::args("self", "state", "id", "nr", "nc"),                            \
          "Initialize the contact-acceleration residual model.\n\n"               \
          ":param id: contact id\n"                                               \
          ":param nr: dimension of contact residual\n"                            \
          ":param nc: dimension of contact vector"))                              \
      .def(                                                                       \
          DifferentialActionModelContactInvDynamicsResidualModelContactVisitor<   \
              ResidualModelContact>())                                            \
      .def(CopyableVisitor<ResidualModelContact>());

#define CROCODDYL_ACTION_DATA_CONTACT_INVDYN_PYTHON_BINDINGS(Scalar)           \
  typedef DifferentialActionDataContactInvDynamicsTpl<Scalar> Data;            \
  typedef DifferentialActionDataAbstractTpl<Scalar> DataBase;                  \
  typedef DifferentialActionModelContactInvDynamicsTpl<Scalar> Model;          \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                         \
  bp::scope data_outer =                                                       \
      bp::class_<Data, bp::bases<DataBase>>(                                   \
          "DifferentialActionDataContactInvDynamics",                          \
          "Differential action data for the inverse-dynamics for system with " \
          "contact.",                                                          \
          bp::init<Model*>(                                                    \
              bp::args("self", "model"),                                       \
              "Create inverse-dynamics action data for system with "           \
              "contacts.\n\n"                                                  \
              ":param model: contact inverse-dynamics action model"))          \
          .def(DifferentialActionDataContactInvDynamicsVisitor<Data>())        \
          .def(CopyableVisitor<Data>());                                       \
  typedef typename Model::ResidualModelActuation ResidualModelActuation;       \
  typedef typename Data::ResidualDataActuation ResidualDataActuation;          \
  typedef typename ResidualDataActuation::Base ResidualDataBase;               \
  typedef                                                                      \
      typename ResidualModelActuation::DataCollectorAbstract DataCollector;    \
  bp::register_ptr_to_python<std::shared_ptr<ResidualDataActuation>>();        \
  bp::class_<ResidualDataActuation, bp::bases<ResidualDataBase>>(              \
      "ResidualDataActuation", "Data for actuation residual.\n\n",             \
      bp::init<ResidualModelActuation*, DataCollector*>(                       \
          bp::args("self", "model", "data"),                                   \
          "Create actuation residual data.\n\n"                                \
          ":param model: actuation residual model\n"                           \
          ":param data: shared data")[bp::with_custodian_and_ward<             \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                         \
      .def(CopyableVisitor<ResidualDataActuation>());                          \
  typedef typename Model::ResidualModelContact ResidualModelContact;           \
  typedef typename Data::ResidualDataContact ResidualDataContact;              \
  bp::register_ptr_to_python<std::shared_ptr<ResidualDataContact>>();          \
  bp::class_<ResidualDataContact, bp::bases<ResidualDataBase>>(                \
      "ResidualDataContact", "Data for contact acceleration residual.\n\n",    \
      bp::init<ResidualModelContact*, DataCollector*, std::size_t>(            \
          bp::args("self", "model", "data", "id"),                             \
          "Create contact-acceleration residual data.\n\n"                     \
          ":param model: contact-acceleration residual model\n"                \
          ":param data: shared data\n"                                         \
          ":param id: contact id")[bp::with_custodian_and_ward<                \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                         \
      .add_property(                                                           \
          "contact",                                                           \
          bp::make_getter(&ResidualDataContact::contact,                       \
                          bp::return_value_policy<bp::return_by_value>()),     \
          "contact data associated with the current residual")                 \
      .def(CopyableVisitor<ResidualDataContact>());

void exposeDifferentialActionContactInvDynamics() {
  CROCODDYL_ACTION_MODEL_CONTACT_INVDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTION_DATA_CONTACT_INVDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
