///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/actions/free-fwddyn.hpp"

#include "python/crocoddyl/core/diff-action-base.hpp"
#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct DifferentialActionModelFreeFwdDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionModelFreeFwdDynamicsVisitor<Model>> {
  typedef typename Model::DifferentialActionDataAbstract Data;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the next state and cost value.\n\n"
           "It describes the time-continuous evolution of the multibody system "
           "without any contact. Additionally it computes the cost value "
           "associated to this state and control pair.\n"
           ":param data: free forward-dynamics action data\n"
           ":param x: time-continuous state vector\n"
           ":param u: time-continuous control input")
        .def("calc",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calc),
             bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the derivatives of the differential multibody system "
            "(free of contact) and its cost functions.\n\n"
            "It computes the partial derivatives of the differential multibody "
            "system and the cost function. It assumes that calc has been run "
            "first. This function builds a quadratic approximation of the "
            "action model (i.e. dynamical system and cost function).\n"
            ":param data: free forward-dynamics action data\n"
            ":param x: time-continuous state vector\n"
            ":param u: time-continuous control input\n")
        .def("calcDiff",
             static_cast<void (Model::*)(const std::shared_ptr<Data>&,
                                         const Eigen::Ref<const VectorXs>&)>(
                 &Model::calcDiff),
             bp::args("self", "data", "x"))
        .def("createData", &Model::createData, bp::args("self"),
             "Create the free forward dynamics differential action data.")
        .add_property("pinocchio",
                      bp::make_function(&Model::get_pinocchio,
                                        bp::return_internal_reference<>()),
                      "multibody model (i.e. pinocchio model)")
        .add_property(
            "actuation",
            bp::make_function(&Model::get_actuation,
                              bp::return_value_policy<bp::return_by_value>()),
            "actuation model")
        .add_property(
            "costs",
            bp::make_function(&Model::get_costs,
                              bp::return_value_policy<bp::return_by_value>()),
            "total cost model")
        .add_property(
            "constraints",
            bp::make_function(&Model::get_constraints,
                              bp::return_value_policy<bp::return_by_value>()),
            "constraint model manager")
        .add_property("armature",
                      bp::make_function(&Model::get_armature,
                                        bp::return_internal_reference<>()),
                      bp::make_function(&Model::set_armature),
                      "set an armature mechanism in the joints");
  }
};

template <typename Data>
struct DifferentialActionDataFreeFwdDynamicsVisitor
    : public bp::def_visitor<
          DifferentialActionDataFreeFwdDynamicsVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "pinocchio",
          bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
          "pinocchio data")
        .add_property("multibody",
                      bp::make_getter(&Data::multibody,
                                      bp::return_internal_reference<>()),
                      "multibody data")
        .add_property(
            "costs",
            bp::make_getter(&Data::costs,
                            bp::return_value_policy<bp::return_by_value>()),
            "total cost data")
        .add_property(
            "constraints",
            bp::make_getter(&Data::constraints,
                            bp::return_value_policy<bp::return_by_value>()),
            "constraint data")
        .add_property(
            "Minv",
            bp::make_getter(&Data::Minv, bp::return_internal_reference<>()),
            "inverse of the joint-space inertia matrix")
        .add_property(
            "u_drift",
            bp::make_getter(&Data::u_drift, bp::return_internal_reference<>()),
            "force-bias vector that accounts for control, Coriolis and "
            "gravitational effects");
  }
};

#define CROCODDYL_ACTION_MODEL_FREE_FWDDYN_PYTHON_BINDINGS(Scalar)            \
  typedef DifferentialActionModelFreeFwdDynamicsTpl<Scalar> Model;            \
  typedef DifferentialActionModelAbstractTpl<Scalar> ModelBase;               \
  typedef typename Model::StateMultibody State;                               \
  typedef typename Model::ActuationModelAbstract Actuation;                   \
  typedef typename Model::CostModelSum Costs;                                 \
  typedef typename Model::ConstraintModelManager Constraints;                 \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                       \
  bp::class_<Model, bp::bases<ModelBase>>(                                    \
      "DifferentialActionModelFreeFwdDynamics",                               \
      "Differential action model for free forward dynamics in multibody "     \
      "systems.\n\n"                                                          \
      "This class implements a the dynamics using Articulate Body Algorithm " \
      "(ABA), or a custom implementation in case of system with armatures. "  \
      "If you want to include the armature, you need to use set_armature(). " \
      "On the other hand, the stack of cost functions are implemented in "    \
      "CostModelSum().",                                                      \
      bp::init<std::shared_ptr<State>, std::shared_ptr<Actuation>,            \
               std::shared_ptr<Costs>,                                        \
               bp::optional<std::shared_ptr<Constraints>>>(                   \
          bp::args("self", "state", "actuation", "costs", "constraints"),     \
          "Initialize the free forward-dynamics action model.\n\n"            \
          ":param state: multibody state\n"                                   \
          ":param actuation: abstract actuation model\n"                      \
          ":param costs: stack of cost functions\n"                           \
          ":param constraints: stack of constraint functions"))               \
      .def(DifferentialActionModelFreeFwdDynamicsVisitor<Model>())            \
      .def(CastVisitor<Model>())                                              \
      .def(PrintableVisitor<Model>())                                         \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_ACTION_DATA_FREE_FWDDYN_PYTHON_BINDINGS(Scalar)           \
  typedef DifferentialActionDataFreeFwdDynamicsTpl<Scalar> Data;            \
  typedef DifferentialActionDataAbstractTpl<Scalar> DataBase;               \
  typedef DifferentialActionModelFreeFwdDynamicsTpl<Scalar> Model;          \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                      \
  bp::class_<Data, bp::bases<DataBase>>(                                    \
      "DifferentialActionDataFreeFwdDynamics",                              \
      "Action data for the free forward dynamics system.",                  \
      bp::init<Model*>(bp::args("self", "model"),                           \
                       "Create free forward-dynamics action data.\n\n"      \
                       ":param model: free forward-dynamics action model")) \
      .def(DifferentialActionDataFreeFwdDynamicsVisitor<Data>())            \
      .def(CopyableVisitor<Data>());

void exposeDifferentialActionFreeFwdDynamics() {
  CROCODDYL_ACTION_MODEL_FREE_FWDDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_ACTION_DATA_FREE_FWDDYN_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
