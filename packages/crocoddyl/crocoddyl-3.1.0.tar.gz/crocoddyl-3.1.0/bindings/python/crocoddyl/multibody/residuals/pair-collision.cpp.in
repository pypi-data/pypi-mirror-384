///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, LAAS-CNRS, INRIA,
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

#ifdef PINOCCHIO_WITH_HPP_FCL

#ifdef CROCODDYL_WITH_PAIR_COLLISION

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/residuals/pair-collision.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelPairCollisionVisitor
    : public bp::def_visitor<ResidualModelPairCollisionVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc",
           static_cast<void (Model::*)(
               const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
               const Eigen::Ref<const VectorXs>&)>(&Model::calc),
           bp::args("self", "data", "x", "u"),
           "Compute the pair collision residual.\n\n"
           ":param data: residual data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calc),
            bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the pair collision residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the pair collision residual data.\n\n"
             ":param data: shared data\n"
             ":return residual data.");
  }
};

template <typename Data>
struct ResidualDataPairCollisionVisitor
    : public bp::def_visitor<ResidualDataPairCollisionVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
          "pinocchio",
          bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
          "pinocchio data")
        .add_property(
            "geometry",
            bp::make_getter(&Data::geometry, bp::return_internal_reference<>()),
            "pinocchio geometry data")
        .add_property(
            "J", bp::make_getter(&Data::J, bp::return_internal_reference<>()),
            "Jacobian of the collision joint")
        .add_property(
            "d", bp::make_getter(&Data::d, bp::return_internal_reference<>()),
            "vector from joint to collision point in world frame");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_PAIR_COLLISION_PYTHON_BINDINGS(Scalar)    \
  typedef ResidualModelPairCollisionTpl<Scalar> Model;                     \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                      \
  typedef typename Model::StateMultibody State;                            \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                    \
  bp::class_<Model, bp::bases<ModelBase>>(                                 \
      "ResidualModelPairCollision",                                        \
      bp::init<std::shared_ptr<State>, std::size_t,                        \
               std::shared_ptr<pinocchio::GeometryModel>,                  \
               pinocchio::PairIndex, pinocchio::JointIndex>(               \
          bp::args("self", "state", "nu", "geom_model", "pair_id",         \
                   "joint_id"),                                            \
          "Initialize the pair collision residual model.\n\n"              \
          ":param state: state of the multibody system\n"                  \
          ":param nu: dimension of control vector\n"                       \
          ":param geom_model: geometric model of the multibody system\n"   \
          ":param pair_id: id of the pair of colliding objects\n"          \
          ":param joint_id: used to calculate the Jacobian at the joint")) \
      .def(ResidualModelPairCollisionVisitor<Model>())                     \
      .def(CastVisitor<Model>())                                           \
      .def(PrintableVisitor<Model>())                                      \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_RESIDUAL_DATA_PAIR_COLLISION_PYTHON_BINDINGS(Scalar)      \
  typedef ResidualDataPairCollisionTpl<Scalar> Data;                        \
  typedef ResidualDataAbstractTpl<Scalar> DataBase;                         \
  typedef ResidualModelPairCollisionTpl<Scalar> Model;                      \
  typedef Model::DataCollectorAbstract DataCollector;                       \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                      \
  bp::class_<Data, bp::bases<DataBase>>(                                    \
      "ResidualDataPairCollision", "Data for pair collision residual.\n\n", \
      bp::init<Model*, DataCollector*>(                                     \
          bp::args("self", "model", "data"),                                \
          "Create pair collision residual data.\n\n"                        \
          ":param model: pair collision residual model\n"                   \
          ":param data: shared data")[bp::with_custodian_and_ward<          \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                      \
      .def(ResidualDataPairCollisionVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeResidualPairCollision() {
  CROCODDYL_RESIDUAL_MODEL_PAIR_COLLISION_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_RESIDUAL_DATA_PAIR_COLLISION_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl

#endif  // CROCODDYL_WITH_PAIR_COLLISION

#endif  // PINOCCHIO_WITH_HPP_FCL
