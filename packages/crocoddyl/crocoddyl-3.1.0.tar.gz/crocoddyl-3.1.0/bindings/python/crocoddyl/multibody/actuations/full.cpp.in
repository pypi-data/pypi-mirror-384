///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2019-2025, LAAS-CNRS, University of Edinburgh
//                          Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/actuations/full.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ActuationModelFullBaseVisitor
    : public bp::def_visitor<ActuationModelFullBaseVisitor<Model>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def("calc", &Model::calc, bp::args("self", "data", "x", "u"),
           "Compute the actuation signal and actuation set from the joint "
           "torque input u.\n\n"
           ":param data: full actuation data\n"
           ":param x: state point (dim. state.nx)\n"
           ":param u: joint torque input (dim. nu)")
        .def("calcDiff", &Model::calcDiff, bp::args("self", "data", "x", "u"),
             "Compute the derivatives of the actuation model.\n\n"
             "It computes the partial derivatives of the full actuation. It "
             "assumes that calc has been run first. The reason is that the "
             "derivatives are constant and defined in createData. The Hessian "
             "is constant, so we don't write again this value.\n"
             ":param data: full actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param u: joint torque input (dim. nu)")
        .def("commands", &Model::commands, bp::args("self", "data", "x", "tau"),
             "Compute the joint torque commands from the generalized "
             "torques.\n\n"
             "It stores the results in data.u.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param tau: generalized torques (dim state.nv)")
        .def("torqueTransform", &Model::torqueTransform,
             bp::args("self", "data", "x", "tau"),
             "Compute the torque transform from generalized torques to joint "
             "torque inputs.\n\n"
             "It stores the results in data.Mtau.\n"
             ":param data: actuation data\n"
             ":param x: state point (dim. state.nx)\n"
             ":param tau: generalized torques (dim state.nv)")
        .def("createData", &Model::createData, bp::args("self"),
             "Create the full actuation data.\n\n"
             "Each actuation model (AM) has its own data that needs to be "
             "allocated.\n"
             "This function returns the allocated data for a predefined AM.\n"
             ":return AM data.");
  }
};

#define CROCODDYL_ACTUATION_MODEL_FULL_PYTHON_BINDINGS(Scalar) \
  typedef ActuationModelFullTpl<Scalar> Model;                 \
  typedef ActuationModelAbstractTpl<Scalar> ModelBase;         \
  typedef StateAbstractTpl<Scalar> StateAbstract;              \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();        \
  bp::class_<Model, bp::bases<ModelBase>>(                     \
      "ActuationModelFull", "Full actuation models.",          \
      bp::init<std::shared_ptr<StateAbstract>>(                \
          bp::args("self", "state"),                           \
          "Initialize the full actuation model.\n\n"           \
          ":param state: state of dynamical system"))          \
      .def(ActuationModelFullBaseVisitor<Model>())             \
      .def(CastVisitor<Model>())                               \
      .def(PrintableVisitor<Model>())                          \
      .def(CopyableVisitor<Model>());

void exposeActuationFull() {
  CROCODDYL_ACTUATION_MODEL_FULL_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
