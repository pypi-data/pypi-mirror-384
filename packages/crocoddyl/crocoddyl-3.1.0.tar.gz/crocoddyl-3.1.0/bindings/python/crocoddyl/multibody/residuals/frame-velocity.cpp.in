///////////////////////////////////////////////////////////////////////////////
// BSD 3-Clause License
//
// Copyright (C) 2021-2025, University of Edinburgh, Heriot-Watt University
// Copyright note valid unless otherwise stated in individual files.
// All rights reserved.
///////////////////////////////////////////////////////////////////////////////

// Auto-generated file for @SCALAR_TYPE@
#include "crocoddyl/multibody/residuals/frame-velocity.hpp"

#include "python/crocoddyl/multibody/multibody.hpp"

namespace crocoddyl {
namespace python {

template <typename Model>
struct ResidualModelFrameVelocityVisitor
    : public bp::def_visitor<ResidualModelFrameVelocityVisitor<Model>> {
  typedef typename Model::ResidualDataAbstract Data;
  typedef typename Model::Base ModelBase;
  typedef typename Model::StateMultibody State;
  typedef typename Model::Motion Motion;
  typedef typename Model::VectorXs VectorXs;
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.def(bp::init<std::shared_ptr<State>, pinocchio::FrameIndex, Motion,
                    pinocchio::ReferenceFrame>(
               bp::args("self", "state", "id", "velocity", "type"),
               "Initialize the frame velocity residual model.\n\n"
               ":param state: state of the multibody system\n"
               ":param residual: residual model\n"
               ":param id: reference frame id\n"
               ":param velocity: reference velocity\n"
               ":param type: reference type of velocity"))
        .def(
            "calc",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calc),
            "Compute the frame velocity residual.\n\n"
            ":param data: residual data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calc",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calc),
            bp::args("self", "data", "x"))
        .def(
            "calcDiff",
            static_cast<void (Model::*)(
                const std::shared_ptr<Data>&, const Eigen::Ref<const VectorXs>&,
                const Eigen::Ref<const VectorXs>&)>(&Model::calcDiff),
            bp::args("self", "data", "x", "u"),
            "Compute the Jacobians of the frame velocity residual.\n\n"
            "It assumes that calc has been run first.\n"
            ":param data: action data\n"
            ":param x: state point (dim. state.nx)\n"
            ":param u: control input (dim. nu)")
        .def(
            "calcDiff",
            static_cast<void (ModelBase::*)(const std::shared_ptr<Data>&,
                                            const Eigen::Ref<const VectorXs>&)>(
                &ModelBase::calcDiff),
            bp::args("self", "data", "x"))
        .def("createData", &Model::createData,
             bp::with_custodian_and_ward_postcall<0, 2>(),
             bp::args("self", "data"),
             "Create the frame velocity residual data.\n\n"
             "Each residual model has its own data that needs to be allocated. "
             "This function\n"
             "returns the allocated data for the frame velocity residual.\n"
             ":param data: shared data\n"
             ":return residual data.")
        .add_property("id", &Model::get_id, &Model::set_id,
                      "reference frame id")
        .add_property("reference",
                      bp::make_function(&Model::get_reference,
                                        bp::return_internal_reference<>()),
                      &Model::set_reference, "reference velocity")
        .add_property("type", &Model::get_type, &Model::set_type,
                      "reference type of velocity");
  }
};

template <typename Data>
struct ResidualDataFrameVelocityVisitor
    : public bp::def_visitor<ResidualDataFrameVelocityVisitor<Data>> {
  template <class PyClass>
  void visit(PyClass& cl) const {
    cl.add_property(
        "pinocchio",
        bp::make_getter(&Data::pinocchio, bp::return_internal_reference<>()),
        "pinocchio data");
  }
};

#define CROCODDYL_RESIDUAL_MODEL_FRAME_VELOCITY_PYTHON_BINDINGS(Scalar)      \
  typedef ResidualModelFrameVelocityTpl<Scalar> Model;                       \
  typedef ResidualModelAbstractTpl<Scalar> ModelBase;                        \
  typedef typename Model::StateMultibody State;                              \
  typedef typename Model::Motion Motion;                                     \
  bp::register_ptr_to_python<std::shared_ptr<Model>>();                      \
  bp::class_<Model, bp::bases<ModelBase>>(                                   \
      "ResidualModelFrameVelocity",                                          \
      "This residual function defines r = v - vref, with v and vref as the " \
      "current and reference frame velocities, respectively.",               \
      bp::init<std::shared_ptr<State>, std::size_t, Motion,                  \
               pinocchio::ReferenceFrame, std::size_t>(                      \
          bp::args("self", "state", "id", "velocity", "type", "nu"),         \
          "Initialize the frame velocity residual model.\n\n"                \
          ":param state: state of the multibody system\n"                    \
          ":param residual: residual model\n"                                \
          ":param id: reference frame id\n"                                  \
          ":param velocity: reference velocity\n"                            \
          ":param type: reference type of velocity\n"                        \
          ":param nu: dimension of control vector"))                         \
      .def(ResidualModelFrameVelocityVisitor<Model>())                       \
      .def(CastVisitor<Model>())                                             \
      .def(PrintableVisitor<Model>())                                        \
      .def(CopyableVisitor<Model>());

#define CROCODDYL_RESIDUAL_DATA_FRAME_VELOCITY_PYTHON_BINDINGS(Scalar)      \
  typedef ResidualDataFrameVelocityTpl<Scalar> Data;                        \
  typedef ResidualDataAbstractTpl<Scalar> DataBase;                         \
  typedef ResidualModelFrameVelocityTpl<Scalar> Model;                      \
  typedef Model::DataCollectorAbstract DataCollector;                       \
  bp::register_ptr_to_python<std::shared_ptr<Data>>();                      \
  bp::class_<Data, bp::bases<DataBase>>(                                    \
      "ResidualDataFrameVelocity", "Data for frame velocity residual.\n\n", \
      bp::init<Model*, DataCollector*>(                                     \
          bp::args("self", "model", "data"),                                \
          "Create frame velocity residual data.\n\n"                        \
          ":param model: frame Velocity residual model\n"                   \
          ":param data: shared data")[bp::with_custodian_and_ward<          \
          1, 2, bp::with_custodian_and_ward<1, 3>>()])                      \
      .def(ResidualDataFrameVelocityVisitor<Data>())                        \
      .def(CopyableVisitor<Data>());

void exposeResidualFrameVelocity() {
  CROCODDYL_RESIDUAL_MODEL_FRAME_VELOCITY_PYTHON_BINDINGS(@SCALAR_TYPE@)
  CROCODDYL_RESIDUAL_DATA_FRAME_VELOCITY_PYTHON_BINDINGS(@SCALAR_TYPE@)
}

}  // namespace python
}  // namespace crocoddyl
