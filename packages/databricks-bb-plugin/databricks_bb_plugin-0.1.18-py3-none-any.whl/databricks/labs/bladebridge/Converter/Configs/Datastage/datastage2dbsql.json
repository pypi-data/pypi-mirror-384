{
	"target_sql" : "DATABRICKS",
	"inherit_from":["general_sql_specs.json"],

	"line_subst" : [

		{"from" : "\bDSJOBNAME\b", "to" : "'curr_dsjobname'"}, // FIXME - REPLACE WITH PROPER TRANSLATION
		{"from" : "DSJobStartDate", "to" : "current_timestamp"},
		{"from" : "%YYYY", "to" : "YYYY"},
		{"from" : "%MM", "to" : "MM"},
		{"from" : "%DD", "to" : "DD"},
		{"from" : "\bTimeDate\b", "to" : "current_timestamp"},

		//do etl variable expression substitutions first, since they are limited to ETL_VARIABLE category
		{"from" : "if\s*@INROWNUM\s*=\s*1\s*then\s*DSGetJobInfo\s*\(.*USERSTATUS.*\s*\)\s*else.*\s+", "to" : "0 /* USERSTATUS */"}, //replace job status with 0
		{"from" : "if\s*\(\s*@INROWNUM\s*=\s*1\s*,\s*DSGetJobInfo\s*\(.*USERSTATUS.*\s*\)\s*,\s*.*__VARNAME__.*", "to" : "0 /* USERSTATUS */"},

		{"from" : "#(\w+)#", "to" : "${$1}"},
		//{"from" : "#(\w+)#", "to" : "{$1}"},
		{"from" : "__JOBVAR_ENCLOSURE_OPEN__", "to" : "{"}, //DS reader thing
		{"from" : "__JOBVAR_ENCLOSURE_CLOSE__", "to" : "}"}, //DS reader thing
		{"from" : "\"", "to" : "'"},
		{"from" : "\s:\s", "to" : " || "},
		{"from" : "#(\w+)#\.#(\w+)#", "to" : "$PARAM1.$PARAM2"}, // #PS1#.#VAR1# => $PS1.$VAR1
		{"from" : "@PARTITIONNUM.*@NUMPARTITIONS.*\+\s+1", "to" : "row_number() over (order by 1)"},
		{"from" : "@NULL\b", "to" : "NULL"},
		{"from" : ".INROWNUM", "to" : "row_number() over (order by 1)"},
		{"from" : ".PARTITIONNUM", "to" : "row_number() over (order by 1)"},
		{"from" : "DSJobStartTimestamp", "to" : "'{starttime}'"},
		{"from" : "oconv.*@date.*oconv\s*\(\s*@time(.*?)\)", "to" : "current_timestamp"}, // this is a concat of date and time, convert to timestamp for data type compatibility purposes
		{"from": "IsValidDecimal\s*\(\s*([\s\S]+?)\s*\)\s*=\s*0", "to": "case when try_cast($1 AS INT) is NULL then 0 else 1 end"}, //may need modification
		{"from" : "DSJobStartTimestamp", "to" : "'{starttime}'"},
		
		// subjob parameter subst
		{"from": ":", "to" : " + ", "statement_categories" : ["SUBJOB_PARAM_EXPR"]},
		{"from": "\$(\w+)", "to" : "$1", "statement_categories" : ["SUBJOB_PARAM_EXPR"]}
	],

	"function_subst" : [
		{"from": "StringToDate", "output_template": "cast($1 as date)"},
		{"from": "IsValidDate", "output_template": "cast($1 as date)"},
		{"from" : "DownCase", "to" : "LOWER"},
		{"from" : "Num", "output_template":"TRY_CAST($1 AS NUMERIC) IS NOT NULL"},
		{"from" : "UpCase", "to" : "UPPER"},
		{"from" : "ISNULL", "output_template" : "$1 IS NULL"},
		{"from" : "is_date", "output_template" : "$1.rlike('\\d.*\\/.*\\d.*\\/.*\\d'))"},
		{"from" : "SETNULL", "output_template" : "NULL"},
		{"from" : "AsInteger", "output_template" : "CAST($1 as int)"},
		{"from" : "StringToDecimal", "output_template" : "CAST($1 as numeric)"},
		{"from" : "to_int", "output_template" : "CAST($1 as int)"},
		{"from" : "string_trim", "to" : "TRIM"},
		{"from" : "CONVERT", "output_template" : "TRANSLATE($3,$1,$2)"},
		{"from" : "CurrentDate", "output_template" : "CURRENT_DATE"},
		{"from" : "DaysSinceFromDate", "output_template" : "DATEDIFF($1, $2)"},
		{"from" : "Field", "output_template" : "split($1, $2)[$3-1]"},
		{"from" : "GenerateKey", "output_template" : "row_number() over (order by 1)"},
		{"from" : "TRIM", "arg_pattern" : {"3" : "L"},  "output_template" : "regexp_replace($1, r'^[$2]*', '')"},
		{"from" : "TRIM", "arg_pattern" : {"3" : "A"},  "output_template" : "replace($1, $2, '')"},
		{"from" : "TRIM", "to" : "trim"},
		{"from" : "TRIMLEADINGTRAILING", "to" : "trim"},
		{"from" : "RecCount", "output_template" : "count(1)"},
		{"from" : "OutPatientServiceTypeLogic", "output_template" : "'OutPatientServiceTypeLogic_call'"},  // temp solution
		{"from" : "UtilityAbortToLog", "to" : "raise_error"},
		{"from" : "Oconv", "arg_pattern" : {"1" : "@DATE"}, "output_template" : "date_format(current_timestamp,'y-MM-dd')"},
		{"from" : "Oconv", "arg_pattern" : {"1" : "@TIME"}, "output_template" : "date_format(current_timestamp,'HH-mm-ss')"},
		{"from" : "DECIMALTODECIMAL", "output_template" : "CAST($1 AS decimal(10, 2))"},
		{"from" : "DECIMALTOSTRING", "output_template" : "CAST($1 AS STRING)"},
		{"from" : "DATETOSTRING", "output_template" : "date_format($1, $2)", "num_args" : 2},
		{"from" : "DATETOSTRING", "output_template" : "date_format(current_timestamp,'yyyymmdd')", "num_args" : 1}, // FIXME - 
		{"from" : "MONTHFROMDATE", "output_template" : "datediff(month,$1,CURRENT_DATE)"},
		{"from" : "YEARFROMDATE", "output_template" : "datediff(year,$1,CURRENT_DATE)"},
		{"from" : "|", "TO" : "OR"},
		{"from" : "TRIMB", "TO" : "rtrim"},
		{"from" : "TRIMF", "TO" : "ltrim"},
		{"from": "IsNotNull", "output_template": "$1 IS NOT NULL"},
		{"from" : "generate", "output_template": "1"},
		{"from" : "DateFromDaysSince", "output_template": "date_add($2,$1)"},
		{"from" : "DateFromJulianDay", "output_template": "from_unixtime(unix_timestamp('1900-01-01', 'yyyy-MM-dd') + $1 * 86400, 'yyyy-MM-dd')"},
		{"from" : "DaysSinceFromDate", "output_template": "datediff($1, $2)"},
		{"from" : "HoursFromTime", "output_template": "EXTRACT(HOUR from $1)"},
		{"from" : "JulianDayFromDate ", "output_template": "floor((unix_timestamp($1, 'yyyy-MM-dd') - unix_timestamp('1900-01-01', 'yyyy-MM-dd')) / 86400)"},
		{"from" : "MicroSecondsFromTime", "output_template": "unix_timestamp($1) * 1000000"},
		{"from" : "MinutesFromTime", "output_template": "minute($1)"},
		{"from" : "MonthDayFromDate", "output_template": "day($1)"},
		{"from" : "MonthFromDate", "output_template": "month($1)"},
		{"from" : "NextWeekdayFromDate", "output_template": "  CASE WHEN dayofweek($1) = 7 THEN date_add($1, 2)   ELSE date_add($1, 1)  END"},
		{"from" : "PreviousWeekdayFromDate", "output_template": "  CASE     WHEN dayofweek($1) = 1 THEN date_sub($1, 2)     ELSE date_sub($1, 1)   END"},
		{"from" : "SecondsFromTime", "output_template": "extract(second from $1)"},
		{"from" : "SecondsSinceFromTimestamp", "output_template": "unix_timestamp($1, 'yyyy-MM-dd HH:mm:ss') - unix_timestamp($2, 'yyyy-MM-dd HH:mm:ss')"},
		{"from" : "TimestampFromDateTime", "output_template": "to_timestamp(concat($1, ' ', $2), 'yyyy-MM-dd HH:mm:ss')"},
		{"from" : "TimestampFromSecondsSince", "output_template": "from_unixtime($1, 'yyyy-MM-dd HH:mm:ss')"},
		{"from" : "TimestampFromTimet", "output_template": "from_unixtime($1, 'yyyy-MM-dd HH:mm:ss')"},
		{"from" : "TimetFromTimestamp", "output_template": "unix_timestamp($1, 'yyyy-MM-dd HH:mm:ss')"},
		{"from" : "WeekdayFromDate", "output_template": "date_format($1,'EEEE')"},
		{"from" : "YeardayFromDate", "output_template": "date_format($1,'D')"},
		{"from" : "YearFromDate", "output_template": "date_format($1,'YYYY')"},
		{"from" : "YearweekFromDate", "output_template": "extract(week from $1)"},
		{"from" : "BITAND", "output_template": "$1 & $2"},
		{"from" : "BITXOR", "output_template": "$1 ^ $2"},
	    {"from" : "BITEXPAND", "output_template": "CAST(CONV($1, 2, 10) AS STRING)"},
		{"from" : "BITCOMPRESS", "output_template": "LPAD(CONV($1, 10, 2), 8 * LENGTH($1), '0')"},
		{"from" : "fabs", "to": "abs"},
		{"from" : "LDEXP", "output_template": "$1  * POW(2, $2)"},
		{"from" : "LABS", "output_template": "log(abs($1))"},
		{"from" : "LN", "output_template": "log($1)"},
		{"from" : "NEG", "output_template": "$1*-1"},
		{"from" : "NEG", "output_template": "CASE WHEN $1 = $2 THEN NULL ELSE $1 END"},
		{"from" : "NullToEmpty", "output_template": " COALESCE($1, '')"},
		{"from" : "NullToZero", "output_template": " COALESCE($1, 0)"},
		{"from" : "NullToValues", "output_template": " COALESCE($1, $2)"},
		{"from" : "CurrentTimestamp", "output_template" : "CURRENT_TIMESTAMP()"},
		//{"from" : "SETNULL", "output_template": "CASE WHEN $1 IS NULL THEN $2 ELSE $1 END "},
		{"from" : "SETNULL", "output_template" : "NULL"},
		{"from" : "MantissaFromDecimal ", "output_template": "CAST(SUBSTR(CAST($1 AS STRING), POSITION('.' IN CAST($1 AS STRING)) + 1) AS DECIMAL)"},
		{"from" : "MantissaFromDfloat", "output_template": "CAST(SUBSTR(CAST($1 AS STRING), POSITION('.' IN CAST($1 AS STRING)) + 1) AS DOUBLE)"},
		{"from" : "RAWLENGTH ", "to" : "length"},	
		{"from" : "ALNUM ", "output_template" : "case when try_to_number($1,999999999) is null then 0 else 1 end"},
		{"from" : "ALPHA ", "output_template" : "$1 REGEXP '^[A-Za-z]+$'"},
		{"from" : "CompactWhiteSpace", "output_template" : "regexp_replace($1, '\\s+', ' ')"},
		{"from" : "ComparNoCase", "output_template" : "lower($1)=lower($2)"},
		{"from" : "ComparNumNoCase", "output_template" : "lower(substring($1,1,$3))=lower(substring($2,1,$3))"},
		{"from" : "ComparNume", "output_template" : "substring($1,1,$3)=substring($2,1,$3)"},
		{"from" : "DQuote", "output_template" : "concat('\"',$1,'\"')"},
		{"from" : "INDEX", "to" : "charindex"},
		{"from" : "NUM", "output_template" : "try_to_number($1,'S9999999999')"},
		{"from" : "PadString", "to" : "rpad"},
		{"from" : "Str", "to" : "REPEAT"},
		{"from" : "StripWhiteSpace", "output_template" : "regexp_replace($1, r'\s', '')"},
		{"from" : "TrimF", "to" : "LTRIM"},
		{"from" : "TRIMB", "to" : "BTRIM"},
		{"from" : "Trim Leading Trailing", "to" : "TRIM(BOTH ' ' FROM $1)"},
		{"from" : "DecimalToDFloat", "output_template" : "CAST($1 AS FLOAT) "},
		{"from" : "AsDouble", "output_template" : "CAST($1 AS DOUBLE) "},
		{"from" : "AsFloat", "output_template" : "CAST($1 AS FLOAT) "},
		{"from" : "AsInteger", "output_template" : "CAST($1 AS INTEGER) "},
		{"from" : "DecimalToDFloat", "output_template" : "CAST($1 AS FLOAT) "},
		{"from" : "DfloatToStringNoExp", "output_template" : "CAST($1 AS DECIMAL) "},
		{"from" : "StringToRaw", "output_template" : "CAST($1 AS BINARY)"},
		{"from" : "StringToTimestamp", "output_template" : "to_timestamp($1)"},
		{"from" : "TimestampToDate", "output_template" : "date_format($1,'y/mm/dd')"},
		{"from" : "TimestampToString", "output_template" : "CAST($1 AS STRING)"},
	    {"from" : "TimeToString", "output_template" : "CAST($1 AS STRING)"},
		{"from" : "UstringToString", "output_template" : "CAST($1 AS STRING)"},
		{"from" : "TimestampToTime", "output_template" : "CAST($1 AS TIME)"},
		{"from" : "StringToTime", "output_template" : "CAST($1 AS TIME)"}
	],

	"block_subst" : [
		{"from" : "(?<!\{)run_type(?!\})", "to" : "'${RUN_TYPE}'"}, 
		{"from" : "(?<!\{)\bstart_dt(?!\})", "to" : "'${START_DT}'"},
		{"from" : "(?<!\{)\bend_dt(?!\})", "to" : "'${END_DT}'"},
		{"from" : "(?<!\{)\bpaid_dt(?!\})", "to" : "'${PAID_DT}'"}
	],

	"block_post_function_subst" : [
		{"from" : "cast\s*\(\s*cast\s*\(\s*([\s\S]+?)\)\s*as\s+date\s*\)\s*as\s+date\s*\)", "to" : "cast($1 as date)"}
	],

	"random_value_expressions" : {
		"DATE" : "CURRENT_DATE",
		"DATETIME" : "CURRENT_TIMESTAMP",
		"TIMESTAMP" : "CURRENT_TIMESTAMP",
		"INT" : "100",
		"BIGINT" : "100",
		"STRING" : "'A'",
		"DECIMAL" : "12345.67",
		"DEFAULT" : "0"
	}
}
