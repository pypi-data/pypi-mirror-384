{
	//"inherit_from":["general_sql_specs.json"],
	"target_sql" : "DATABRICKS",
	"target_file_extension" : "sql",

	
	"datepart_translations" : { // case sensitive! will be processed lengthier pattern first (yyyy goes before DD)
		"\bSS\b" : "ss",
		"YYYY" : "yyyy",
		"Y,YYY" : "y,yyy",
		"IYYY" : "yyyy",
		"\bYY\b" : "yy",
		"\bIY\b" : "yy",
		"FMMonth":"MMMM",
		"Month":"MMMM ",
		"month":"MMMM ",
		"\bMON\b" : "MMM",
		"\bMon\b" : "MMM",
		"\bmon\b" : "MMM",
		"\bWW\b":"WEEK",
		"\bIW\b":"WEEK",
		"\bDDD\b" : "d",
		"\bDD\b" : "dd",
		"FXDD":"dd",
		"FMDay":"EEEE",
		"\bDay\b":"EEEE ",
		"\bday\b":"EEEE ",
		"\bDAY\b":"EEEE ",
		"\bDY\b":"EEE",
		"\bDy\b":"EEE",
		"\bdy\b":"EEE",
		"hh24" : "HH",
		"hh12" : "hh",
		"HH24" : "HH",
		"HH12" : "hh",
		"\bmi\b" : "mm",
		"\bMI\b" : "mm",
		"\bMi\b" : "mm",
		"FF1" : "S",
		"FF2" : "SS",
		"FF3" : "SSS",
		"FF" : "SSS",
		"AM" : "a",
		"am" : "a",
		"FM":" ",
		"FX":"",
		"\"":""		
	},
	

"stmt_categorization_patterns": 
	[
	//{"category": "FULL_OUTER", "patterns" : [".*FULL\s+OUTER\s+JOIN"]},
	{"category": "JSON_EXTRACT", "patterns" : [".*JSON_EXTRACT.*"]},
	{"category": "TABLE_DDL", "patterns" : ["CREATE\s+TABLE","CREATE\s+SET.*\s+TABLE","CREATE\s+MULTISET.*\s+TABLE","CREATE\s+VOLATILE.*\s+TABLE","CREATE\s+TEMPORARY*\s+TABLE"]},
	{"category": "UPDATE", "patterns" : [".*update\s+\w*\.*\w+\s+\w*\s*SET\s+.*\bfrom\b\s*\(select\s+.*?where.*?\;",".*update\s+\w*\.*\w+\s+\w*\s*SET\s+.*\bfrom\b\s+\w+\s*\,.*?where.*?\;",".*update\s+\w*\.*\w+\s+\w*\s*SET\s+.*?(?:\=|\|)\s*\w*\.*\w+\s+FROM\s+\w+\b\s*\b\w+\b\s*\,.*?where.*?\;",".*update\s+(\w*\.*\w+)\s+(SET\s+.*?\=\s*\w*\.*\w+\s+)FROM\s+(\w+\s*\w+\s*\,.*?)where(.*?\;)","update\s+\w*\.*\w+\s+SET\s+.*?(?:\=|\|)\s*\w*\.*\w+\s+FROM\s+\w+s*\,.*?where.*?\;"]}
	//{"category": "COLS", "patterns" : [".*\;"]}
	

	],
	"CUSTOM_CONVERTER_MODULES" : ["update2merge"],
	//"preprocess_file" : "1",
	//"preprocess_routine" : "::preprocess_for_netezza",
	//"initialize_hooks_call" : "::init_netezza_hooks",
	//"pre_finalization_handler" : "::finalize_content",
	
	"extract_embedded_sql" : ["sh","ksh","ssh"], //listing extensions of files from which to extract embedded sql.  Use "embedded_sql_tags" key to list strings depicting the start of sql
	"code_fragment_breakers": {
		"line_end": ["\;", ";\s*\-\-"]
	},
	
	"line_subst" : [
		
		{"from" : "TIMEZONE\(timestamp\s*(\'.*?\')\s*\,\s*(\'.*?\')\,\s*(\'.*?\')\);", "to" : "FROM_UTC_TIMESTAMP(TO_UTC_TIMESTAMP($1,$2),$3)"},
		{"from" : "timestamp\s*(\'.*?\')", "to" : "TO_TIMESTAMP($1)"},
		{"from" : "date\s*(\'.*?\')", "to" : "to_date($1)"},
		//{"from" : "(substr\s*\(\s*\w*\.*\w+\s*\,\s*\d+\s*\,\s*instr\s*\(\s*\w*\.*\w+\s*\,\s*'.*?'\s*\)\s*(\-|\+)\s*\d+\s*\))(?!_DONE_)","to" :"trim($1_DONE_)"},
        {"from" : "@PARTITIONNUM.*@NUMPARTITIONS.*\+\s+1", "to" : "row_number() over (order by 1)"},
		{"from" : ".INROWNUM", "to" : "row_number() over (order by 1)"},
		{"from" : ".PARTITIONNUM", "to" : "row_number() over (order by 1)"},
		{"from" : "\"", "to" : "", "statement_categories" : ["TABLE_DDL"]}, // get rid of double quotes in table DDLs
		{"from" : "\bDISTRIBUTE\s+ON\s*\(",  "to" : ""},
		{"from" : "\bORGANIZE\s+ON",  "to" : ""},
		{"from" : "\bBYTEINT\b",  "to" : "TINYINT", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bCHAR\b",  "to" : "VARCHAR","statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bCHARACTER\s+VARYING\s*\((.*?)\)",  "to" : "VARCHAR($1)", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bCHARACTER\s*\((.*?)\)",  "to" : "VARCHAR($1)", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bDOUBLE\b PRECISION",  "to" : "DOUBLE", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bNVARCHAR\b\(.*?\)",  "to" : "STRING", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bNVARCHAR\b\(.*?\)",  "to" : "STRING"},
		{"from" : "\bNATIONAL\s+CHARACTER\s+VARYING\s*\((.*?)\)",  "to" : "VARCHAR($1)", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bTIME\b",  "to" : "STRING", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\bTimewithzone\b",  "to" : "STRING", "statement_categories" : ["TABLE_DDL"]},
		{"from" : "\/\s*\=\s*\/\s*NULL", "to" : "IS NULL"},
		{"from" : "\\\!\s*DATE\;", "to" : ""},
		{"from" : "\\\!.*", "to" : ""},
		{"from" : "\bVARCHAR\b\s*(?!\()", "to" : "STRING"},
	    {"from" : "\"(\w+)\"\s*\(", "to" : "$1("},
		{"from" : "\:\:\"(.*?)\"",  "to" : "::$1"},
		{"from" : "NOTNULL","to" :"IS NOT NULL"},
		{"from" : "\<\s*\>\s*ALL","to" :"not in"},
		{"from" : "(\w+)\.substr\s*\(\s*","to" :"substr($1."},
		{"from" : "TRUNCATE\s+\b(?!table)","to" :"TRUNCATE TABLE "},
		{"from" : "NULL\:\:\w+\b","to" :"NULL"},
		{"from" : "\bBYTEINT\b","to" :"TINYINT"},
		{"from" : "character\s+varying\s*\(\s*\d+\s*\)","to" :"STRING"},
		{"from" : "\bEXIT\b","to" :""},
	    {"from" : "(\=|>)\s*'\s+'","to" :"$1 ''"},
	    {"from" : "(?<!\|)'\s+'\s*(\w+)","to" :"'' $1"},
	    {"from" : "('\w+)\s+'(?!\|)","to" :"$1'"},
	    {"from" : "\,\s*\'\s+\'\s*\,","to" :",'',"}, 
	    {"from" : "(rpad\s*\((\s*\w*\.*customer_id\s*)\,\s*\d+\s*\,\s*\'\s+\'\s*\))\s*\|(?!_DONE_)","to" :"decode($2,'',' ',$1)|_DONE_"},
	    {"from" : "((?:sum|min|max|avg)\s*\(\w*\.*\w+\)\s*(?:\/|\*)\s*(?:sum|min|max|avg)\s*\(\w*\.*\w+\)(?!\)\:))","to" :"($1)::decimal(38,6)"},
	    {"from" : "(\((?:sum|min|max|avg)\s*\(\w*\.*\w+\s*\)\s*(?:\-|\+|\*\/)\s*(?:sum|min|max|avg)\s*\(\w*\.*\w+\s*\)\s*\)\s*\/\s*(?:sum|min|max|avg)\s*\(\w*\.*\w+\s*\)(?!\)\:))","to" :"($1)::decimal(38,6)"},
		{"from" : "BEGIN_PROC", "to" : "BEGIN"},
		{"from" : "END_PROC", "to" : "END"},
		{"from" : "\bELSIF\b", "to" : "ELSEIF"},
		{"from" : "RAISE NOTICE", "to" : "SELECT"},
		{"from" : "\bVARCHAR\b\s*\(\s*[0-9]+\s*\)", "to" : "STRING"},
	    {"from" : "_DONE_","to" :""} 
	],
	

		
	 "block_subst" : [
		{"from" : "\bRETURNS\s+\w+\s+LANGUAGE\s+NZPLSQL\s+AS\b", "to" : ""},
	 	{"from" : "\bDISTRIBUTE\s+ON\s*\(",  "to" : "DISTRIBUTE_CLAUSE_FUNCTION("},
		{"from" : "\bTOOLKIT\.SQLEXT\.GROUP_CONCAT\b\s*\((\s*\(.*?\)\:\:VARCHAR\(.*?\))\s*\,\s*\(\s*\'\|\'\:\:\"VARCHAR\"\s*\)\:\:VARCHAR\s*\(.*?\)\s*\)\s*\)\s*\|\|\s*\'\|\'\:\:\"VARCHAR\"\s*\)",  "to" : "LIST_AGG($1, '|')) || '|'::\"VARCHAR\")"},
		{"from" : "\bTOOLKIT\.SQLEXT\.GROUP_CONCAT\b",  "to" : "LISTAGG"},
		{"from" : "TOOLKIT\.SQLEXT\.ISNUMBER\s*\(ISNULL\((\s*\w*\.*\w+\s*)\,(.*?)\)", "to" : "(NVL($1,$2) regexp '^[0-9\.]+$'"},
		{"from" : "TOOLKIT\.SQLEXT\.ISDATE\s*\(ISNULL\((\s*\w*\.*\w+\s*)\,\s*(\'.*?\')\)\s*\,\s*(\'yyyy\-MM\-dd\s+HH\:mm\:ss\')\s*\)", "to" : "TO_TIMESTAMP(NVL($1,$2),$3) is not null"},
		{"from" : "TOOLKIT\.SQLEXT\.ISDATE\s*\(NVL\((\s*\w*\.*\w+\s*)\,\s*(\'.*?\')\)\s*\,\s*(\'yyyy\-MM\-dd\s+HH\:mm\:ss\')\s*\)", "to" : "TO_TIMESTAMP(NVL($1,$2),$3) is not null"},
		{"from" : "TOOLKIT\.SQLEXT\.ISDATE\s*\(ISNULL\((\s*\w*\.*\w+\s*)\,\s*(\'.*?\')\)\s*\,\s*(\'yyyy\-MM\-dd\')\s*\)", "to" : "TO_DATE(NVL($1,$2),$3) is not null"},
		{"from" : "TOOLKIT\.SQLEXT\.ISDATE\s*\(NVL\((\s*\w*\.*\w+\s*)\,\s*(\'.*?\')\)\s*\,\s*(\'yyyy\-MM\-dd\')\s*\)", "to" : "TO_DATE(NVL($1,$2),$3) is not null"}	,
        {"from" : "(\bVIEW\s*)\"(.*?)\"",  "to" : "$1$2("},
		
       // {"from" : "\:\:\"(string)\"",  "to" : "::$1"},
		//{"from" : "\:\:\"(numeric)\"",  "to" : "::$1"},
		
		{"from" : "\=\s*ANY",  "to" : " in "},
		//{"from" : "\;(?!_DONE_)","to" :";_DONE_\n-- COMMAND ----------\n"},
		{"from" : "\!\~\~","to" :"not like"},
		{"from" : "\~\~","to" :"like"},
		{"from" : "(\w*\.*\w*DATE)\s*\-\s*(\d+)","to" :"date_sub($1,$2)"}, 
	  	{"from" : "(\w*\.*\w*DATE)\s*\-\s*(\w*\.*\w+)","to" :"datediff($1,$2)"}, 
		{"from" : "update\s+(\w*\.*\w+)\s+(SET.*?\=\s*\w*\.*\w+)\s+FROM\s+(\(.*?\)\s*\w+)\s+where\s+(.*?)\;","to" :"MERGE INTO $1\nUSING $3\nON $4\nWHEN MATCHED THEN UPDATE\n$2;"},
		{"from" : "update\s+(\w*\.*\w+)\s+(SET\s+.*?\=\s*\w*\.*\w+\s+)FROM\s+(\w+)\s*where(.*?)\;","to" :"MERGE INTO $1\nusing $3\nON$4\nWHEN MATCHED THEN UPDATE\n$2;"}, 
		{"from" : "update\s+(\w*\.*\w+)\s+(SET\s+.*?\=\s*\w+.*?)\s+FROM\s+(\w+)\s+where(\s*.*?)\;","to" :"MERGE INTO $1\nusing $3\nON$4\nWHEN MATCHED THEN UPDATE\n$2;"}, 
		{"from" : "update\s+(\w*\.*\w+\s+\w*)\s*(SET\s+.*?\=\s*\w+.*?)\s+FROM\s+(\w+\s+\w*)\s*where(\s*.*?)\;","to" :"MERGE INTO $1\nusing $3\nON$4\nWHEN MATCHED THEN UPDATE\n$2;"},
		{"from" : "UPDATE\s+(\w*\.*\w*\.*\w+\s+\w*)\s*\bSET(\b.*)\s*\bFROM\s+(\(.*\))\s*(\w+)\s+where(.*?)\;","to" :"MERGE INTO $1 using $3 $4 ON\n $5 \nWHEN MATCHED THEN UPDATE SET\n$2;"},   
		{"from" : "NOTNULL","to" :"IS NOT NULL"},
		{"from" : "_DONE_","to" :""},
		{"from" : "generate\s+statistics.*?(\;|$)","to" :""},
		{"from" : "\)\s*distribute\s+on\b.*?\;","to" :");"},
		{"from" : "'now'::STRING","to" :"CURRENT_TIMESTAMP::STRING"},
		{"from" : "insert\s+into\s+(\w+)\s*(\(.*?\))\s*\(\s*select\s+next\s+value\s+for\s+(employee)_id_seq", "to" : "INSERT INTO $1 $2 \n(SELECT (SELECT MAX($3_SKEY)  from $1) +ROW_NUMBER() OVER(ORDER BY 1)"},

		{"from" : "insert\s+into\s+(\w+)\s*(\(.*?\))\s*\(\s*select\s+next\s+value\s+for\s+(\w+)_seq", "to" : "INSERT INTO $1 $2 \n(SELECT (SELECT MAX($3_SKEY)  from $1) +ROW_NUMBER() OVER(ORDER BY 1)"},

		{"from" : "delete\b.*?\bfrom\s+(\w*\.*\w+)\s+where\s+(\w+)\s+in\s*(\(.*\))\s*\;","to" :"merge into $1 using $3 source on $1.$2=source.$2\nWHEN MATCHED THEN\nDELETE;"}
		//,{"from" : "TOOLKIT\.SQLEXT\.ISDATE\s*\((NVL\(\s*\w*\.*\w+\s*)\,(.*?)\)\s*\,(\'.*?\'\s*\))", "to" : "TO_TIMESTAMP($1,$2),$3 is not null"}
		],
	

	"function_subst" : [
	    {"from" : "TO_CHAR", "num_args" : "1", "output_template"  : "CAST($1 AS STRING)"}, 
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "\'\bD\b\'"},"output_template" :"dayofweek($1)"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "\'\bW\b\'"},"output_template" :"FLOOR((day($1) - 1) / 7) + 1"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "(FF|Y|I|MON|WW|DD|FMDAY|FM|MI|S|AM|Day|FX|Mon)"},"output_template" :"DATE_FORMAT($1,$2)","date_format_arg" : "2"},
		{"from" : "TO_CHAR","arg_pattern" : {"2" : "CC"},"output_template" :"FLOOR((year($1) - 1) / 100) + 1"},
		{"from" : "TO_DATE","arg_pattern" : {"2" : "(FF|Y|I|MON|WW|DD|FMDAY|FM|MI|S|AM|Day|FX|Mon)"},"output_template" :"TO_DATE_DONE_($1,$2)","date_format_arg" : "2"},
		{"from" : "TO_DATE_DONE_","to" :"TO_DATE"},
		{"from" : "TO_TIMESTAMP","arg_pattern" : {"2" : "(FF|Y|I|MON|WW|DD|FMDAY|FM|MI|S|AM|Day|FX|Mon)"},"output_template" :"TO_TIMESTAMP_DONE_($1,$2)","date_format_arg" : "2"},
		{"from" : "TO_TIMESTAMP_DONE_","to" :"TO_TIMESTAMP"},
		{"from" : "DISTRIBUTE_CLAUSE_FUNCTION", "to" : "__BLANK__"},
		{"from" : "ORGANIZE_CLAUSE_FUNCTION", "to" : "__BLANK__"},
		{"from" : "TOOLKIT.SQLEXT.ISNUMBER","num_args" : "1", "output_template" : "($1 regexp '^[0-9\.]+$')"},
	    {"from" : "coalesce","to" :"nvl"},
		{"from" : "UpCase", "to" : "UPPER"},
		{"from" : "LEN", "to" : "length"},
		{"from" : "unicode", "to" : "ascii"},
		{"from" : "unichr", "to" : "chr"},
		{"from" : "hex_to_binary", "to" : "unhex"},
		{"from" : "duration_add", "output_template" : "$1+$2"},
		{"from" : "duration_subtract", "output_template" : "$1-$2"},
		{"from" : "timeofday", "output_template" : "date_format($1,'E dd MMM yyyy HH:mm:ss z')"},
		//{"from" : "LEN", "to" : "length"},
		{"from" : "STRPOS", "output_template" : "CHARINDEX($2,$1)"},
		{"from" : "to_int", "output_template" : "CAST($1 as int)"},
		{"from" : "NUMERIC","num_args" : "1", "output_template" : "CAST($1 as NUMERIC)"},
		{"from" : "CurrentDate", "output_template" : "CURRENT_DATE"},
		{"from" : "TRIM", "arg_pattern" : {"3" : "L"},  "output_template" : "regexp_replace($1, r'^[$2]*', '')"},
		{"from" : "TRIMLEADINGTRAILING", "to" : "trim"},
		{"from": "INDEX",                            "output_template": "LOCATE($2,$1)", "statement_categories": ["READ_DML_INTO_VAR","WRITE_DML","READ_DML"]},
		{"from": "INSTR",                            "output_template": "CHARINDEX($2,$1)",    "num_args" : "2"},
	    {"from": "INSTR",                            "output_template": "CHARINDEX($2,$1,$3)", "num_args" : "3"},
	    {"from": "INSTR",                            "output_template": "INSTR_MULTI_ARG($1,$2,$3,$4)", "num_args" : "4"}, // this is a user defined python function
		{"from": "STRTOK",                           "to" : "SPLIT"},
		{"from": "dceil",                           "to" : "ceil"},
		{"from": "dfloor",                           "to" : "floor"},
		{"from": "fpow",                           "to" : "pow"},
		{"from": "log",                           "to" : "log10"},
		{"from": "numeric_sqrt",                           "to" : "sqrt"},
		{"from": "trunc",    "num_args" : "1",                        "output_template" : "trunc($1,0)"},
		{"from": "ZEROIFNULL",                       "output_template": "COALESCE($1, 0)"},
		{"from": "isfalse",                       "output_template": "$1=false"},
		{"from": "isnotfalse",                       "output_template": "$1!=false"},
		{"from": "isnottrue",                       "output_template": "$1!=true"},
		{"from": "istrue",                       "output_template": "$1=true"},
	    {"from": "NULLIFZERO",                       "output_template" : "NULLIF($1, 0)"},
		{"from": "TRUNC",                            "to": "date_trunc", "arg_placement": { "1":"2||'DD'", "2":"1" } },
		{"from" : "DECODE","num_args" : "5","output_template" :"case when $1=$2 then $3 when $1=$4 then $5 END"},
		{"from" : "INT8","output_template" :"CAST($1 as LONG)"}
	],
	
	"variable_patterns" : ["\$[a-z|A-Z|0-9|_]+?\$", "\$\$\w+", "\b[^\$]\$\w+"],
    "return_backup_merge_sql_if_no_match" : 1,
	//enable column parsing for: manipulate on 1 column at a time, it is safer; for lin-place aliases, swap column order; format functionality handling
	"column_level_parsing" : ["VIEW_DDL", "TABLE_DDL_AS_SELECT", "TABLE_DDL"],
	"adjust_format_tokens" : "1",
	"adjust_native_casting" : "1", //yet to be implemented
	"embedded_sql_var_prefix" : "&"
}
