name: Release Drafter

on:
  push:
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get previous tag and commit messages
        id: get_changes
        run: |
          # Get the most recent tag
          PREVIOUS_TAG=$(git tag --sort=-creatordate | head -1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Get commit messages since the previous tag
          COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" | head -20)
          
          # Save commits to environment variable
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v6
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update draft release with commit history
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release notes content
          echo "## Changes since $PREVIOUS_TAG" > release_notes.txt
          echo "" >> release_notes.txt
          echo "$COMMITS" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "---" >> release_notes.txt
          echo "*This release was automatically generated from commits since the last tag.*" >> release_notes.txt

          # Get the latest draft release
          DRAFT_RELEASE=$(gh release list --limit 50 --json isDraft,tagName,id | jq -r '.[] | select(.isDraft == true) | .tagName' | head -1)
          
          if [ -n "$DRAFT_RELEASE" ] && [ "$DRAFT_RELEASE" != "null" ]; then
            echo "Updating draft release: $DRAFT_RELEASE"
            gh release edit "$DRAFT_RELEASE" --notes-file release_notes.txt
            echo "Draft release updated successfully"
          else
            echo "No draft release found. Checking all releases:"
            gh release list --limit 10
            echo "Creating a new draft release..."
            # Create a new draft release if none exists
            NEXT_VERSION=$(date +"%Y.%m.%d")
            gh release create "v$NEXT_VERSION" --draft --title "v$NEXT_VERSION" --notes-file release_notes.txt
            echo "Created new draft release: v$NEXT_VERSION"
          fi
