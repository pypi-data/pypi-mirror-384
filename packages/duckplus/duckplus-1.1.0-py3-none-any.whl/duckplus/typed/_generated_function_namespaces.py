# pylint: skip-file
# mypy: ignore-errors

"""Auto-generated DuckDB function namespaces.

This file is generated by ``scripts/generate_function_namespaces.py``.
Do not edit by hand; regenerate to pull in new function definitions.

"""

from __future__ import annotations

from typing import ClassVar

from .functions import (
    DuckDBFunctionDefinition,
    _DuckDBFilterFunctionCall,
    _DuckDBFunctionCall,
    _StaticFunctionNamespace,
)
from .types import parse_type


class AggregateBlobFunctions(_StaticFunctionNamespace):
    """DuckDB aggregate functions returning binary results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'aggregate'
    return_category: ClassVar[str] = 'blob'
    arg_max = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_max_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_max_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_max_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_min = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_min_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_min_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    arg_min_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    argmax = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    argmax_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    argmin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    argmin_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    max_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    max_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    min_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    min_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'arg_max': arg_max,
        'arg_max_filter': arg_max_filter,
        'arg_max_null': arg_max_null,
        'arg_max_null_filter': arg_max_null_filter,
        'arg_min': arg_min,
        'arg_min_filter': arg_min_filter,
        'arg_min_null': arg_min_null,
        'arg_min_null_filter': arg_min_null_filter,
        'argmax': argmax,
        'argmax_filter': argmax_filter,
        'argmin': argmin,
        'argmin_filter': argmin_filter,
        'max_by': max_by,
        'max_by_filter': max_by_filter,
        'min_by': min_by,
        'min_by_filter': min_by_filter,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class AggregateBooleanFunctions(_StaticFunctionNamespace):
    """DuckDB aggregate functions returning boolean results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'aggregate'
    return_category: ClassVar[str] = 'boolean'
    bool_and = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bool_and',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Returns TRUE if every input value is TRUE, otherwise FALSE.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    bool_and_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bool_and',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Returns TRUE if every input value is TRUE, otherwise FALSE.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    bool_or = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bool_or',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Returns TRUE if any input value is TRUE, otherwise FALSE.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    bool_or_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bool_or',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Returns TRUE if any input value is TRUE, otherwise FALSE.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'bool_and': bool_and,
        'bool_and_filter': bool_and_filter,
        'bool_or': bool_or,
        'bool_or_filter': bool_or_filter,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class AggregateGenericFunctions(_StaticFunctionNamespace):
    """DuckDB aggregate functions returning generic results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'aggregate'
    return_category: ClassVar[str] = 'generic'
    any_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='any_value',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first non-NULL value from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    any_value_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='any_value',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first non-NULL value from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    approx_quantile = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DATE[]'),
                parameter_types=(parse_type('DATE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME[]'),
                parameter_types=(parse_type('TIME'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP[]'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    approx_quantile_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DATE[]'),
                parameter_types=(parse_type('DATE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME[]'),
                parameter_types=(parse_type('TIME'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP[]'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    approx_top_k = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_top_k',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('val', 'k'),
                varargs=None,
                description='Finds the k approximately most occurring values in the data set',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    approx_top_k_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_top_k',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('val', 'k'),
                varargs=None,
                description='Finds the k approximately most occurring values in the data set',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arbitrary = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arbitrary',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arbitrary_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arbitrary',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_max = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_max_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_max_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_max_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_min = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_min_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_min_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    arg_min_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    argmax = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    argmax_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    argmin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    argmin_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_agg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_agg',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST containing all the values of a column.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_agg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_agg',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST containing all the values of a column.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    avg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    avg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_and = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_and_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_or = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_or_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_xor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bit_xor_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bitstring_agg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bitstring_agg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring_agg',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('arg', 'col1', 'col2'),
                varargs=None,
                description='Returns a bitstring with bits set for each distinct value.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    first = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='first',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    first_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='first',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    histogram = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'), parse_type('ANY[]')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    histogram_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'), parse_type('ANY[]')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    histogram_exact = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram_exact',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'), parse_type('ANY[]')),
                parameters=('arg', 'bins'),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count matching the buckets exactly.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    histogram_exact_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='histogram_exact',
                function_type=function_type,
                return_type=parse_type('MAP'),
                parameter_types=(parse_type('ANY'), parse_type('ANY[]')),
                parameters=('arg', 'bins'),
                varargs=None,
                description='Returns a LIST of STRUCTs with the fields bucket and count matching the buckets exactly.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    last = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the last value of a column. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    last_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the last value of a column. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST containing all the values of a column.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('arg',),
                varargs=None,
                description='Returns a LIST containing all the values of a column.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    max = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the maximum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns the maximum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    max_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the maximum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns the maximum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    max_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    max_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    mean = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    mean_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    median = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='median',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the middle value of the set. NULL values are ignored. For even value counts, interpolate-able types (numeric, date/time) return the average of the two middle values. Non-interpolate-able types (everything else) return the lower of the two middle values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    median_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='median',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the middle value of the set. NULL values are ignored. For even value counts, interpolate-able types (numeric, date/time) return the average of the two middle values. Non-interpolate-able types (everything else) return the lower of the two middle values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    min = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the minimum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns the minimum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    min_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the minimum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'col1'),
                varargs=None,
                description='Returns the minimum value present in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    min_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    min_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('arg', 'val', 'col2'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    mode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mode',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the most frequent value for the values within x. NULL values are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    mode_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mode',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the most frequent value for the values within x. NULL values are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile_cont = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile_cont_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile_disc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    quantile_disc_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_disc',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    sum = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('BIGNUM'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    sum_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('BIGNUM'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'any_value': any_value,
        'any_value_filter': any_value_filter,
        'approx_quantile': approx_quantile,
        'approx_quantile_filter': approx_quantile_filter,
        'approx_top_k': approx_top_k,
        'approx_top_k_filter': approx_top_k_filter,
        'arbitrary': arbitrary,
        'arbitrary_filter': arbitrary_filter,
        'arg_max': arg_max,
        'arg_max_filter': arg_max_filter,
        'arg_max_null': arg_max_null,
        'arg_max_null_filter': arg_max_null_filter,
        'arg_min': arg_min,
        'arg_min_filter': arg_min_filter,
        'arg_min_null': arg_min_null,
        'arg_min_null_filter': arg_min_null_filter,
        'argmax': argmax,
        'argmax_filter': argmax_filter,
        'argmin': argmin,
        'argmin_filter': argmin_filter,
        'array_agg': array_agg,
        'array_agg_filter': array_agg_filter,
        'avg': avg,
        'avg_filter': avg_filter,
        'bit_and': bit_and,
        'bit_and_filter': bit_and_filter,
        'bit_or': bit_or,
        'bit_or_filter': bit_or_filter,
        'bit_xor': bit_xor,
        'bit_xor_filter': bit_xor_filter,
        'bitstring_agg': bitstring_agg,
        'bitstring_agg_filter': bitstring_agg_filter,
        'first': first,
        'first_filter': first_filter,
        'histogram': histogram,
        'histogram_filter': histogram_filter,
        'histogram_exact': histogram_exact,
        'histogram_exact_filter': histogram_exact_filter,
        'last': last,
        'last_filter': last_filter,
        'list': list,
        'list_filter': list_filter,
        'max': max,
        'max_filter': max_filter,
        'max_by': max_by,
        'max_by_filter': max_by_filter,
        'mean': mean,
        'mean_filter': mean_filter,
        'median': median,
        'median_filter': median_filter,
        'min': min,
        'min_filter': min_filter,
        'min_by': min_by,
        'min_by_filter': min_by_filter,
        'mode': mode,
        'mode_filter': mode_filter,
        'quantile': quantile,
        'quantile_filter': quantile_filter,
        'quantile_cont': quantile_cont,
        'quantile_cont_filter': quantile_cont_filter,
        'quantile_disc': quantile_disc,
        'quantile_disc_filter': quantile_disc_filter,
        'sum': sum,
        'sum_filter': sum_filter,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class AggregateNumericFunctions(_StaticFunctionNamespace):
    """DuckDB aggregate functions returning numeric results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'aggregate'
    return_category: ClassVar[str] = 'numeric'
    any_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='any_value',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first non-NULL value from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    any_value_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='any_value',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first non-NULL value from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    approx_count_distinct = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_count_distinct',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('any',),
                varargs=None,
                description='Computes the approximate count of distinct elements using HyperLogLog.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    approx_count_distinct_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_count_distinct',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('any',),
                varargs=None,
                description='Computes the approximate count of distinct elements using HyperLogLog.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    approx_quantile = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    approx_quantile_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('FLOAT')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='approx_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('FLOAT[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Computes the approximate quantile using T-Digest.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arbitrary = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arbitrary',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arbitrary_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arbitrary',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_max = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_max_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_max_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_max_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_min = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_min_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_min_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    arg_min_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    argmax = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    argmax_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    argmin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    argmin_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    avg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    avg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='avg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_and = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_and_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_and',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise AND of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_or = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_or_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_or',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise OR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_xor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_xor_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_xor',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the bitwise XOR of all bits in a given expression.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    corr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='corr',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the correlation coefficient for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    corr_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='corr',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the correlation coefficient for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the number of non-NULL values in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the number of non-NULL values in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the number of non-NULL values in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the number of non-NULL values in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count_if = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count_if',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Counts the total number of TRUE values for a boolean column',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count_if_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count_if',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Counts the total number of TRUE values for a boolean column',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count_star = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count_star',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    count_star_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='count_star',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    countif = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='countif',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Counts the total number of TRUE values for a boolean column',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    countif_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='countif',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Counts the total number of TRUE values for a boolean column',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    covar_pop = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='covar_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the population covariance of input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    covar_pop_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='covar_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the population covariance of input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    covar_samp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='covar_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the sample covariance for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    covar_samp_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='covar_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the sample covariance for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    entropy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='entropy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the log-2 entropy of count input-values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    entropy_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='entropy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('ANY'),),
                parameters=('x',),
                varargs=None,
                description='Returns the log-2 entropy of count input-values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    favg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='favg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average using a more accurate floating point summation (Kahan Sum)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    favg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='favg',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average using a more accurate floating point summation (Kahan Sum)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    first = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='first',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    first_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='first',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the first value (NULL or non-NULL) from arg. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    fsum = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='fsum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    fsum_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='fsum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kahan_sum = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kahan_sum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kahan_sum_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kahan_sum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kurtosis = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kurtosis',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the excess kurtosis (Fisher’s definition) of all input values, with a bias correction according to the sample size',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kurtosis_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kurtosis',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the excess kurtosis (Fisher’s definition) of all input values, with a bias correction according to the sample size',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kurtosis_pop = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kurtosis_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the excess kurtosis (Fisher’s definition) of all input values, without bias correction',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    kurtosis_pop_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='kurtosis_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the excess kurtosis (Fisher’s definition) of all input values, without bias correction',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    last = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the last value of a column. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    last_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Returns the last value of a column. This function is affected by ordering.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mad = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('DATE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mad_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('DATE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIME'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mad',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    max_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    max_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mean = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mean_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mean',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Calculates the average value for all tuples in x.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    min_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    min_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the product of all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    product_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the product of all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    quantile_cont = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    quantile_cont_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quantile_cont',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]')),
                parameters=('x', 'pos'),
                varargs=None,
                description='Returns the interpolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_avgx = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_avgx',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the average of the independent variable for non-NULL pairs in a group, where x is the independent variable and y is the dependent variable.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_avgx_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_avgx',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the average of the independent variable for non-NULL pairs in a group, where x is the independent variable and y is the dependent variable.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_avgy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_avgy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the average of the dependent variable for non-NULL pairs in a group, where x is the independent variable and y is the dependent variable.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_avgy_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_avgy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the average of the dependent variable for non-NULL pairs in a group, where x is the independent variable and y is the dependent variable.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_count = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_count',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the number of non-NULL number pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_count_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_count',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the number of non-NULL number pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_intercept = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_intercept',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the intercept of the univariate linear regression line for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_intercept_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_intercept',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the intercept of the univariate linear regression line for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_r2 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_r2',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the coefficient of determination for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_r2_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_r2',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the coefficient of determination for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_slope = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_slope',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the slope of the linear regression line for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_slope_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_slope',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the slope of the linear regression line for non-NULL pairs in a group.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_sxx = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_sxx',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_sxx_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_sxx',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_sxy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_sxy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the population covariance of input values',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_sxy_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_sxy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Returns the population covariance of input values',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_syy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_syy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    regr_syy_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regr_syy',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    reservoir_quantile = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    reservoir_quantile_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]')),
                parameters=('x', 'quantile'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DECIMAL[]'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('TINYINT[]'),
                parameter_types=(parse_type('TINYINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('SMALLINT[]'),
                parameter_types=(parse_type('SMALLINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('INTEGER[]'),
                parameter_types=(parse_type('INTEGER'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('HUGEINT[]'),
                parameter_types=(parse_type('HUGEINT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('FLOAT[]'),
                parameter_types=(parse_type('FLOAT'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reservoir_quantile',
                function_type=function_type,
                return_type=parse_type('DOUBLE[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE[]'), parse_type('INTEGER')),
                parameters=('x', 'quantile', 'sample_size'),
                varargs=None,
                description='Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sem = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sem',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the standard error of the mean',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sem_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sem',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the standard error of the mean',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    skewness = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='skewness',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the skewness of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    skewness_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='skewness',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the skewness of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample standard deviation',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample standard deviation',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev_pop = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the population standard deviation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev_pop_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the population standard deviation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev_samp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample standard deviation',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    stddev_samp_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stddev_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample standard deviation',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sum = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sum_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum value for all tuples in arg.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sum_no_overflow = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sum_no_overflow_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sum_no_overflow',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('arg',),
                varargs=None,
                description='Internal only. Calculates the sum value for all tuples in arg without overflow checks.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sumkahan = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sumkahan',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sumkahan_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sumkahan',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('arg',),
                varargs=None,
                description='Calculates the sum using a more accurate floating point summation (Kahan Sum).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    var_pop = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='var_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the population variance.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    var_pop_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='var_pop',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the population variance.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    var_samp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='var_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample variance of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    var_samp_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='var_samp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample variance of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    variance = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='variance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample variance of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    variance_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='variance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sample variance of all input values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'any_value': any_value,
        'any_value_filter': any_value_filter,
        'approx_count_distinct': approx_count_distinct,
        'approx_count_distinct_filter': approx_count_distinct_filter,
        'approx_quantile': approx_quantile,
        'approx_quantile_filter': approx_quantile_filter,
        'arbitrary': arbitrary,
        'arbitrary_filter': arbitrary_filter,
        'arg_max': arg_max,
        'arg_max_filter': arg_max_filter,
        'arg_max_null': arg_max_null,
        'arg_max_null_filter': arg_max_null_filter,
        'arg_min': arg_min,
        'arg_min_filter': arg_min_filter,
        'arg_min_null': arg_min_null,
        'arg_min_null_filter': arg_min_null_filter,
        'argmax': argmax,
        'argmax_filter': argmax_filter,
        'argmin': argmin,
        'argmin_filter': argmin_filter,
        'avg': avg,
        'avg_filter': avg_filter,
        'bit_and': bit_and,
        'bit_and_filter': bit_and_filter,
        'bit_or': bit_or,
        'bit_or_filter': bit_or_filter,
        'bit_xor': bit_xor,
        'bit_xor_filter': bit_xor_filter,
        'corr': corr,
        'corr_filter': corr_filter,
        'count': count,
        'count_filter': count_filter,
        'count_if': count_if,
        'count_if_filter': count_if_filter,
        'count_star': count_star,
        'count_star_filter': count_star_filter,
        'countif': countif,
        'countif_filter': countif_filter,
        'covar_pop': covar_pop,
        'covar_pop_filter': covar_pop_filter,
        'covar_samp': covar_samp,
        'covar_samp_filter': covar_samp_filter,
        'entropy': entropy,
        'entropy_filter': entropy_filter,
        'favg': favg,
        'favg_filter': favg_filter,
        'first': first,
        'first_filter': first_filter,
        'fsum': fsum,
        'fsum_filter': fsum_filter,
        'kahan_sum': kahan_sum,
        'kahan_sum_filter': kahan_sum_filter,
        'kurtosis': kurtosis,
        'kurtosis_filter': kurtosis_filter,
        'kurtosis_pop': kurtosis_pop,
        'kurtosis_pop_filter': kurtosis_pop_filter,
        'last': last,
        'last_filter': last_filter,
        'mad': mad,
        'mad_filter': mad_filter,
        'max_by': max_by,
        'max_by_filter': max_by_filter,
        'mean': mean,
        'mean_filter': mean_filter,
        'min_by': min_by,
        'min_by_filter': min_by_filter,
        'product': product,
        'product_filter': product_filter,
        'quantile_cont': quantile_cont,
        'quantile_cont_filter': quantile_cont_filter,
        'regr_avgx': regr_avgx,
        'regr_avgx_filter': regr_avgx_filter,
        'regr_avgy': regr_avgy,
        'regr_avgy_filter': regr_avgy_filter,
        'regr_count': regr_count,
        'regr_count_filter': regr_count_filter,
        'regr_intercept': regr_intercept,
        'regr_intercept_filter': regr_intercept_filter,
        'regr_r2': regr_r2,
        'regr_r2_filter': regr_r2_filter,
        'regr_slope': regr_slope,
        'regr_slope_filter': regr_slope_filter,
        'regr_sxx': regr_sxx,
        'regr_sxx_filter': regr_sxx_filter,
        'regr_sxy': regr_sxy,
        'regr_sxy_filter': regr_sxy_filter,
        'regr_syy': regr_syy,
        'regr_syy_filter': regr_syy_filter,
        'reservoir_quantile': reservoir_quantile,
        'reservoir_quantile_filter': reservoir_quantile_filter,
        'sem': sem,
        'sem_filter': sem_filter,
        'skewness': skewness,
        'skewness_filter': skewness_filter,
        'stddev': stddev,
        'stddev_filter': stddev_filter,
        'stddev_pop': stddev_pop,
        'stddev_pop_filter': stddev_pop_filter,
        'stddev_samp': stddev_samp,
        'stddev_samp_filter': stddev_samp_filter,
        'sum': sum,
        'sum_filter': sum_filter,
        'sum_no_overflow': sum_no_overflow,
        'sum_no_overflow_filter': sum_no_overflow_filter,
        'sumkahan': sumkahan,
        'sumkahan_filter': sumkahan_filter,
        'var_pop': var_pop,
        'var_pop_filter': var_pop_filter,
        'var_samp': var_samp,
        'var_samp_filter': var_samp_filter,
        'variance': variance,
        'variance_filter': variance_filter,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class AggregateVarcharFunctions(_StaticFunctionNamespace):
    """DuckDB aggregate functions returning string results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'aggregate'
    return_category: ClassVar[str] = 'varchar'
    arg_max = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_max_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_max_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_max_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_max_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_min = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_min_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_min_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    arg_min_null_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='arg_min_null',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    argmax = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    argmax_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmax',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    argmin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    argmin_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='argmin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    group_concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='group_concat',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='group_concat',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    group_concat_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='group_concat',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='group_concat',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    listagg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='listagg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='listagg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    listagg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='listagg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='listagg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    max_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    max_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='max_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the maximum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    min_by = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    min_by_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('HUGEINT')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='min_by',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BLOB')),
                parameters=('arg', 'val'),
                varargs=None,
                description='Finds the row with the minimum val. Calculates the non-NULL arg expression at that row.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    string_agg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_agg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_agg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    string_agg_filter = _DuckDBFilterFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_agg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('str',),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_agg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'), parse_type('VARCHAR')),
                parameters=('str', 'arg'),
                varargs=None,
                description='Concatenates the column string values with an optional separator.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'arg_max': arg_max,
        'arg_max_filter': arg_max_filter,
        'arg_max_null': arg_max_null,
        'arg_max_null_filter': arg_max_null_filter,
        'arg_min': arg_min,
        'arg_min_filter': arg_min_filter,
        'arg_min_null': arg_min_null,
        'arg_min_null_filter': arg_min_null_filter,
        'argmax': argmax,
        'argmax_filter': argmax_filter,
        'argmin': argmin,
        'argmin_filter': argmin_filter,
        'group_concat': group_concat,
        'group_concat_filter': group_concat_filter,
        'listagg': listagg,
        'listagg_filter': listagg_filter,
        'max_by': max_by,
        'max_by_filter': max_by_filter,
        'min_by': min_by,
        'min_by_filter': min_by_filter,
        'string_agg': string_agg,
        'string_agg_filter': string_agg_filter,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class AggregateFunctionNamespace:
    """DuckDB aggregate function categories."""
    __slots__ = ()
    Blob: AggregateBlobFunctions = AggregateBlobFunctions()  # noqa: N802
    Boolean: AggregateBooleanFunctions = AggregateBooleanFunctions()  # noqa: N802
    Generic: AggregateGenericFunctions = AggregateGenericFunctions()  # noqa: N802
    Numeric: AggregateNumericFunctions = AggregateNumericFunctions()  # noqa: N802
    Varchar: AggregateVarcharFunctions = AggregateVarcharFunctions()  # noqa: N802
    def __dir__(self) -> list[str]:
        return sorted(name for name in self.__class__.__dict__ if not name.startswith('_'))

class ScalarBlobFunctions(_StaticFunctionNamespace):
    """DuckDB scalar functions returning binary results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'scalar'
    return_category: ClassVar[str] = 'blob'
    create_sort_key = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='create_sort_key',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('ANY'),),
                parameters=('parameters...',),
                varargs=parse_type('ANY'),
                description='Constructs a binary-comparable sort key based on a set of input parameters and sort qualifiers',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    encode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='encode',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts the `string` to `BLOB`. Converts UTF-8 characters into literal encoding.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    from_base64 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_base64',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts a base64 encoded `string` to a character string (`BLOB`).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    from_binary = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_binary',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Converts a `value` from binary representation to a blob.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    from_hex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_hex',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Converts a `value` from hexadecimal representation to a blob.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    repeat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='repeat',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('BLOB'), parse_type('BIGINT')),
                parameters=('blob', 'count'),
                varargs=None,
                description='Repeats the `blob` `count` number of times.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    unbin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='unbin',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Converts a `value` from binary representation to a blob.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    unhex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='unhex',
                function_type=function_type,
                return_type=parse_type('BLOB'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Converts a `value` from hexadecimal representation to a blob.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='blob',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'create_sort_key': create_sort_key,
        'encode': encode,
        'from_base64': from_base64,
        'from_binary': from_binary,
        'from_hex': from_hex,
        'repeat': repeat,
        'unbin': unbin,
        'unhex': unhex,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class ScalarBooleanFunctions(_StaticFunctionNamespace):
    """DuckDB scalar functions returning boolean results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'scalar'
    return_category: ClassVar[str] = 'boolean'
    array_contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns true if the list contains the element.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    array_has = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_has',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns true if the list contains the element.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    array_has_all = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_has_all',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Returns true if all elements of list2 are in list1. NULLs are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    array_has_any = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_has_any',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Returns true if the lists have any element in common. NULLs are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    can_cast_implicitly = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='can_cast_implicitly',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('source_type', 'target_type'),
                varargs=None,
                description='Whether or not we can implicitly cast from the source type to the other type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns `true` if `search_string` is found within `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('MAP(K, V)'), parse_type('K')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('STRUCT'), parse_type('ANY')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    ends_with = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ends_with',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns `true` if `string` ends with `search_string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    ilike_escape = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ilike_escape',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'like_specifier', 'escape_character'),
                varargs=None,
                description='Returns `true` if the `string` matches the `like_specifier` (see Pattern Matching) using case-insensitive matching. `escape_character` is used to search for wildcard characters in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    in_search_path = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='in_search_path',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('database_name', 'schema_name'),
                varargs=None,
                description='Returns whether or not the database/schema are in the search path',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    is_histogram_other_bin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='is_histogram_other_bin',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('ANY'),),
                parameters=('val',),
                varargs=None,
                description='Whether or not the provided value is the histogram "other" bin (used for values not belonging to any provided bin)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    isfinite = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isfinite',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is finite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isfinite',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is finite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isfinite',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DATE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is finite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isfinite',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is finite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isfinite',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is finite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    isinf = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isinf',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is infinite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isinf',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is infinite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isinf',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DATE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is infinite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isinf',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is infinite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isinf',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is infinite, false otherwise',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    isnan = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isnan',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is not a number, false otherwise',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isnan',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns true if the floating point value is not a number, false otherwise',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    json_contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('JSON')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('JSON'), parse_type('JSON')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    json_exists = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_exists',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_exists',
                function_type=function_type,
                return_type=parse_type('BOOLEAN[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_exists',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_exists',
                function_type=function_type,
                return_type=parse_type('BOOLEAN[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    json_valid = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_valid',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_valid',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    like_escape = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='like_escape',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'like_specifier', 'escape_character'),
                varargs=None,
                description='Returns `true` if the `string` matches the `like_specifier` (see Pattern Matching) using case-sensitive matching. `escape_character` is used to search for wildcard characters in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    list_contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns true if the list contains the element.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    list_has = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_has',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns true if the list contains the element.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    list_has_all = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_has_all',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Returns true if all elements of list2 are in list1. NULLs are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    list_has_any = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_has_any',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('T[]'), parse_type('T[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Returns true if the lists have any element in common. NULLs are ignored.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    map_contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('MAP(K, V)'), parse_type('K')),
                parameters=('map', 'key'),
                varargs=None,
                description='Checks if a map contains a given key.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    not_ilike_escape = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='not_ilike_escape',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'like_specifier', 'escape_character'),
                varargs=None,
                description='Returns `false` if the `string` matches the `like_specifier` (see Pattern Matching) using case-insensitive matching. `escape_character` is used to search for wildcard characters in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    not_like_escape = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='not_like_escape',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'like_specifier', 'escape_character'),
                varargs=None,
                description='Returns `false` if the `string` matches the `like_specifier` (see Pattern Matching) using case-sensitive matching. `escape_character` is used to search for wildcard characters in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    prefix = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='prefix',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns `true` if `string` starts with `search_string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    regexp_full_match = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_full_match',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Returns `true` if the entire `string` matches the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_full_match',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'col2'),
                varargs=None,
                description='Returns `true` if the entire `string` matches the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    regexp_matches = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_matches',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Returns `true` if `string` contains the `regex`, `false` otherwise. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_matches',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'options'),
                varargs=None,
                description='Returns `true` if `string` contains the `regex`, `false` otherwise. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    signbit = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='signbit',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns whether the signbit is set or not',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='signbit',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns whether the signbit is set or not',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    starts_with = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='starts_with',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns `true` if `string` begins with `search_string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    struct_contains = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_contains',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('STRUCT'), parse_type('ANY')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Check if an unnamed STRUCT contains the value.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    struct_has = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_has',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('STRUCT'), parse_type('ANY')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Check if an unnamed STRUCT contains the value.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    suffix = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='suffix',
                function_type=function_type,
                return_type=parse_type('BOOLEAN'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns `true` if `string` ends with `search_string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='boolean',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        'array_contains': array_contains,
        'array_has': array_has,
        'array_has_all': array_has_all,
        'array_has_any': array_has_any,
        'can_cast_implicitly': can_cast_implicitly,
        'contains': contains,
        'ends_with': ends_with,
        'ilike_escape': ilike_escape,
        'in_search_path': in_search_path,
        'is_histogram_other_bin': is_histogram_other_bin,
        'isfinite': isfinite,
        'isinf': isinf,
        'isnan': isnan,
        'json_contains': json_contains,
        'json_exists': json_exists,
        'json_valid': json_valid,
        'like_escape': like_escape,
        'list_contains': list_contains,
        'list_has': list_has,
        'list_has_all': list_has_all,
        'list_has_any': list_has_any,
        'map_contains': map_contains,
        'not_ilike_escape': not_ilike_escape,
        'not_like_escape': not_like_escape,
        'prefix': prefix,
        'regexp_full_match': regexp_full_match,
        'regexp_matches': regexp_matches,
        'signbit': signbit,
        'starts_with': starts_with,
        'struct_contains': struct_contains,
        'struct_has': struct_has,
        'suffix': suffix,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '!~~': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='!~~',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '!~~*': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='!~~*',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '&&': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&&',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('T[]'), parse_type('T[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Returns true if the lists have any element in common. NULLs are ignored.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '<@': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<@',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('T[]'), parse_type('T[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Returns true if all elements of list2 are in list1. NULLs are ignored.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '@>': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@>',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('T[]'), parse_type('T[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Returns true if all elements of list2 are in list1. NULLs are ignored.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '^@': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='^@',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('string', 'search_string'),
                            varargs=None,
                            description='Returns `true` if `string` begins with `search_string`.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '~~': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~~',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '~~*': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~~*',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
        '~~~': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~~~',
                            function_type=function_type,
                            return_type=parse_type('BOOLEAN'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='boolean',
        ),
    }

class ScalarGenericFunctions(_StaticFunctionNamespace):
    """DuckDB scalar functions returning generic results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'scalar'
    return_category: ClassVar[str] = 'generic'
    __internal_compress_string_uhugeint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_uhugeint',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    __internal_decompress_integral_uhugeint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uhugeint',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uhugeint',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uhugeint',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uhugeint',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    abs = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    add = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY[]'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('DATE'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('INTERVAL'), parse_type('DATE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIME')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIME WITH TIME ZONE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIME'), parse_type('DATE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('DATE'), parse_type('TIME')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DATE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('DATE'), parse_type('TIME WITH TIME ZONE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('BIGNUM'),
                parameter_types=(parse_type('BIGNUM'), parse_type('BIGNUM')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    aggregate = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='aggregate',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'function_name'),
                varargs=parse_type('ANY'),
                description='Executes the aggregate function `function_name` on the elements of `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    apply = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='apply',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description='Returns a list that is the result of applying the `lambda` function to each element of the input `list`. The return type is defined by the return type of the `lambda` function.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_aggr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_aggr',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'function_name'),
                varargs=parse_type('ANY'),
                description='Executes the aggregate function `function_name` on the elements of `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_aggregate = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_aggregate',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'function_name'),
                varargs=parse_type('ANY'),
                description='Executes the aggregate function `function_name` on the elements of `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_apply = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_apply',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description='Returns a list that is the result of applying the `lambda` function to each element of the input `list`. The return type is defined by the return type of the `lambda` function.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_cat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cat',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY[]'),
                description='Concatenates lists. `NULL` inputs are skipped. See also operator `||`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_concat',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY[]'),
                description='Concatenates lists. `NULL` inputs are skipped. See also operator `||`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_distinct = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_distinct',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'),),
                parameters=('list',),
                varargs=None,
                description='Removes all duplicates and `NULL` values from a list. Does not preserve the original order.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_extract',
                function_type=function_type,
                return_type=parse_type('T'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_extract',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('STRUCT'), parse_type('VARCHAR')),
                parameters=('struct', 'entry'),
                varargs=None,
                description='Extracts the named `entry` from the `STRUCT`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_extract',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('STRUCT'), parse_type('BIGINT')),
                parameters=('struct', 'index'),
                varargs=None,
                description='Extracts the entry from an unnamed `STRUCT` (tuple) using an index (1-based).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_filter = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_filter',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description="Constructs a list from those elements of the input `list` for which the `lambda` function returns `true`. DuckDB must be able to cast the `lambda` function's return type to `BOOL`. The return type of `list_filter` is the same as the input list's.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_grade_up = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('list', 'col1', 'col2'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_reduce = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x,y)'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA'), parse_type('ANY')),
                parameters=('list', 'lambda(x,y)', 'initial_value'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_resize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_resize',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('ANY')),
                parameters=('list', 'size['),
                varargs=None,
                description='Resizes the `list` to contain `size` elements. Initializes new elements with `value` or `NULL` if `value` is not set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_resize',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('ANY'), parse_type('ANY')),
                parameters=('list', 'size[', 'value]'),
                varargs=None,
                description='Resizes the `list` to contain `size` elements. Initializes new elements with `value` or `NULL` if `value` is not set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_reverse_sort = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_reverse_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Sorts the elements of the list in reverse order.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_reverse_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Sorts the elements of the list in reverse order.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_select = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_select',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT[]')),
                parameters=('value_list', 'index_list'),
                varargs=None,
                description='Returns a list based on the elements selected by the `index_list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_slice = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_slice',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY')),
                parameters=('list', 'begin', 'end'),
                varargs=None,
                description='Extracts a sublist or substring using slice conventions. Negative values are accepted.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_slice',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('list', 'begin', 'end', 'step'),
                varargs=None,
                description='list_slice with added step feature.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_sort = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('list', 'col1', 'col2'),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_transform = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_transform',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description='Returns a list that is the result of applying the `lambda` function to each element of the input `list`. The return type is defined by the return type of the `lambda` function.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_value',
                function_type=function_type,
                return_type=parse_type('ARRAY'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Creates an `ARRAY` containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_where = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_where',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'), parse_type('BOOLEAN[]')),
                parameters=('value_list', 'mask_list'),
                varargs=None,
                description='Returns a list with the `BOOLEAN`s in `mask_list` applied as a mask to the `value_list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    array_zip = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_zip',
                function_type=function_type,
                return_type=parse_type('STRUCT[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Zips n `LIST`s to a new `LIST` whose length will be that of the longest list. Its elements are structs of n elements from each list `list_1`, …, `list_n`, missing elements are replaced with `NULL`. If `truncate` is set, all lists are truncated to the smallest list length.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    bitstring = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('bitstring', 'length'),
                varargs=None,
                description='Pads the bitstring until the specified length',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bitstring',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'), parse_type('INTEGER')),
                parameters=('bitstring', 'length'),
                varargs=None,
                description='Pads the bitstring until the specified length',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    cast_to_type = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cast_to_type',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('param', 'type'),
                varargs=None,
                description='Casts the first argument to the type of the second argument',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    combine = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='combine',
                function_type=function_type,
                return_type=parse_type('AGGREGATE_STATE<?>'),
                parameter_types=(parse_type('AGGREGATE_STATE<?>'), parse_type('ANY')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='concat',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('value',),
                varargs=parse_type('ANY'),
                description='Concatenates multiple strings or lists. `NULL` inputs are skipped. See also operator `||`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    constant_or_null = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='constant_or_null',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('arg1', 'arg2'),
                varargs=parse_type('ANY'),
                description='If arg2 is NULL, return NULL. Otherwise, return arg1.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    current_date = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_date',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    current_localtime = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_localtime',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    current_localtimestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_localtimestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    current_setting = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_setting',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('setting_name',),
                varargs=None,
                description='Returns the current value of the configuration setting',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    date_part = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('DATE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('INTERVAL')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIMESTAMP')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME_NS')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    date_trunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_trunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_trunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_trunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    datepart = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('DATE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('INTERVAL')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIMESTAMP')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIME_NS')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('STRUCT()'),
                parameter_types=(parse_type('VARCHAR[]'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    datetrunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datetrunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datetrunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datetrunc',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    divide = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    element_at = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='element_at',
                function_type=function_type,
                return_type=parse_type('V[]'),
                parameter_types=(parse_type('MAP(K, V)'), parse_type('K')),
                parameters=('map', 'key'),
                varargs=None,
                description='Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    enum_code = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='enum_code',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('enum',),
                varargs=None,
                description='Returns the numeric value backing the given enum value',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    epoch_ms = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    equi_width_bins = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='equi_width_bins',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BOOLEAN')),
                parameters=('min', 'max', 'bin_count', 'nice_rounding'),
                varargs=None,
                description='Generates bin_count equi-width bins between the min and max. If enabled nice_rounding makes the numbers more readable/less jagged',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='equi_width_bins',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('BIGINT'), parse_type('BOOLEAN')),
                parameters=('min', 'max', 'bin_count', 'nice_rounding'),
                varargs=None,
                description='Generates bin_count equi-width bins between the min and max. If enabled nice_rounding makes the numbers more readable/less jagged',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='equi_width_bins',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP'), parse_type('BIGINT'), parse_type('BOOLEAN')),
                parameters=('min', 'max', 'bin_count', 'nice_rounding'),
                varargs=None,
                description='Generates bin_count equi-width bins between the min and max. If enabled nice_rounding makes the numbers more readable/less jagged',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='equi_width_bins',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT'), parse_type('BOOLEAN')),
                parameters=('min', 'max', 'bin_count', 'nice_rounding'),
                varargs=None,
                description='Generates bin_count equi-width bins between the min and max. If enabled nice_rounding makes the numbers more readable/less jagged',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    error = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='error',
                function_type=function_type,
                return_type=parse_type('"NULL"'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('message',),
                varargs=None,
                description='Throws the given error message',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    filter = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='filter',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description="Constructs a list from those elements of the input `list` for which the `lambda` function returns `true`. DuckDB must be able to cast the `lambda` function's return type to `BOOL`. The return type of `list_filter` is the same as the input list's.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    finalize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='finalize',
                function_type=function_type,
                return_type=parse_type('INVALID'),
                parameter_types=(parse_type('AGGREGATE_STATE<?>'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    flatten = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='flatten',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[][]'),),
                parameters=('nested_list',),
                varargs=None,
                description='Flattens a nested list by one level.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    from_json = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_json',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_json',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    from_json_strict = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_json_strict',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='from_json_strict',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    generate_series = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='generate_series',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP[]'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is inclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='generate_series',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTERVAL')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is inclusive.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    get_current_time = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='get_current_time',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    get_current_timestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='get_current_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the current timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    getvariable = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='getvariable',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    grade_up = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('list', 'col1', 'col2'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    greatest = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='greatest',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg1',),
                varargs=parse_type('ANY'),
                description='Returns the largest value. For strings lexicographical ordering is used. Note that lowercase characters are considered “larger” than uppercase characters and collations are not supported.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    json_transform = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_transform',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_transform',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    json_transform_strict = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_transform_strict',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_transform_strict',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    last_day = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last_day',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Returns the last day of the month',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last_day',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Returns the last day of the month',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='last_day',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Returns the last day of the month',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    least = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='least',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'),),
                parameters=('arg1',),
                varargs=parse_type('ANY'),
                description='Returns the smallest value. For strings lexicographical ordering is used. Note that uppercase characters are considered “smaller” than lowercase characters, and collations are not supported.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_aggr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_aggr',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'function_name'),
                varargs=parse_type('ANY'),
                description='Executes the aggregate function `function_name` on the elements of `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_aggregate = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_aggregate',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'function_name'),
                varargs=parse_type('ANY'),
                description='Executes the aggregate function `function_name` on the elements of `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_apply = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_apply',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description='Returns a list that is the result of applying the `lambda` function to each element of the input `list`. The return type is defined by the return type of the `lambda` function.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_cat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_cat',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY[]'),
                description='Concatenates lists. `NULL` inputs are skipped. See also operator `||`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_concat',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY[]'),
                description='Concatenates lists. `NULL` inputs are skipped. See also operator `||`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_distinct = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_distinct',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'),),
                parameters=('list',),
                varargs=None,
                description='Removes all duplicates and `NULL` values from a list. Does not preserve the original order.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_element = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_element',
                function_type=function_type,
                return_type=parse_type('T'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT')),
                parameters=('list', 'index'),
                varargs=None,
                description='Extract the `index`th (1-based) value from the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_extract',
                function_type=function_type,
                return_type=parse_type('T'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT')),
                parameters=('list', 'index'),
                varargs=None,
                description='Extract the `index`th (1-based) value from the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_filter = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_filter',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description="Constructs a list from those elements of the input `list` for which the `lambda` function returns `true`. DuckDB must be able to cast the `lambda` function's return type to `BOOL`. The return type of `list_filter` is the same as the input list's.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_grade_up = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_grade_up',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('list', 'col1', 'col2'),
                varargs=None,
                description='Works like list_sort, but the results are the indexes that correspond to the position in the original list instead of the actual values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_pack = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_pack',
                function_type=function_type,
                return_type=parse_type('"NULL"[]'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Creates a LIST containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_pack',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('any',),
                varargs=parse_type('T'),
                description='Creates a LIST containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_reduce = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x,y)'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA'), parse_type('ANY')),
                parameters=('list', 'lambda(x,y)', 'initial_value'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_resize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_resize',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('ANY')),
                parameters=('list', 'size['),
                varargs=None,
                description='Resizes the `list` to contain `size` elements. Initializes new elements with `value` or `NULL` if `value` is not set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_resize',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('ANY'), parse_type('ANY')),
                parameters=('list', 'size[', 'value]'),
                varargs=None,
                description='Resizes the `list` to contain `size` elements. Initializes new elements with `value` or `NULL` if `value` is not set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_reverse_sort = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_reverse_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Sorts the elements of the list in reverse order.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_reverse_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Sorts the elements of the list in reverse order.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_select = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_select',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT[]')),
                parameters=('value_list', 'index_list'),
                varargs=None,
                description='Returns a list based on the elements selected by the `index_list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_slice = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_slice',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY')),
                parameters=('list', 'begin', 'end'),
                varargs=None,
                description='Extracts a sublist or substring using slice conventions. Negative values are accepted.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_slice',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY'), parse_type('BIGINT')),
                parameters=('list', 'begin', 'end', 'step'),
                varargs=None,
                description='list_slice with added step feature.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_sort = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR')),
                parameters=('list', 'col1'),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_sort',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('list', 'col1', 'col2'),
                varargs=None,
                description='Sorts the elements of the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_transform = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_transform',
                function_type=function_type,
                return_type=parse_type('ANY[]'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x)'),
                varargs=None,
                description='Returns a list that is the result of applying the `lambda` function to each element of the input `list`. The return type is defined by the return type of the `lambda` function.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_value',
                function_type=function_type,
                return_type=parse_type('"NULL"[]'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Creates a LIST containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_value',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T'),),
                parameters=('any',),
                varargs=parse_type('T'),
                description='Creates a LIST containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_where = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_where',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'), parse_type('BOOLEAN[]')),
                parameters=('value_list', 'mask_list'),
                varargs=None,
                description='Returns a list with the `BOOLEAN`s in `mask_list` applied as a mask to the `value_list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    list_zip = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_zip',
                function_type=function_type,
                return_type=parse_type('STRUCT[]'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Zips n `LIST`s to a new `LIST` whose length will be that of the longest list. Its elements are structs of n elements from each list `list_1`, …, `list_n`, missing elements are replaced with `NULL`. If `truncate` is set, all lists are truncated to the smallest list length.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_date = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_date',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_date',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('STRUCT("year" BIGINT, "month" BIGINT, "day" BIGINT)'),),
                parameters=('date-struct',),
                varargs=None,
                description='The date for the given struct.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_date',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('year', 'month', 'day'),
                varargs=None,
                description='The date for the given parts.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_time = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_time',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('hour', 'minute', 'seconds'),
                varargs=None,
                description='The time for the given parts',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_timestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('year',),
                varargs=None,
                description='The timestamp for the given parts',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('year', 'month', 'day', 'hour', 'minute', 'seconds'),
                varargs=None,
                description='The timestamp for the given parts',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_timestamp_ms = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamp_ms',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('nanos',),
                varargs=None,
                description='The timestamp for the given microseconds since the epoch',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_timestamp_ns = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamp_ns',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP_NS'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('nanos',),
                varargs=None,
                description='The timestamp for the given nanoseconds since epoch',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    make_timestamptz = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamptz',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamptz',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('DOUBLE')),
                parameters=('col0', 'col1', 'col2', 'col3', 'col4', 'col5'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='make_timestamptz',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT'), parse_type('DOUBLE'), parse_type('VARCHAR')),
                parameters=('col0', 'col1', 'col2', 'col3', 'col4', 'col5', 'col6'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map',
                function_type=function_type,
                return_type=parse_type('MAP("NULL", "NULL")'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Creates a map from a set of keys and values',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map',
                function_type=function_type,
                return_type=parse_type('MAP(K, V)'),
                parameter_types=(parse_type('K[]'), parse_type('V[]')),
                parameters=('keys', 'values'),
                varargs=None,
                description='Creates a map from a set of keys and values',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_concat',
                function_type=function_type,
                return_type=parse_type('LIST'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_entries = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_entries',
                function_type=function_type,
                return_type=parse_type('STRUCT("key" K, "value" V)[]'),
                parameter_types=(parse_type('MAP(K, V)'),),
                parameters=('map',),
                varargs=None,
                description='Returns the map entries as a list of keys/values',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_extract',
                function_type=function_type,
                return_type=parse_type('V[]'),
                parameter_types=(parse_type('MAP(K, V)'), parse_type('K')),
                parameters=('map', 'key'),
                varargs=None,
                description='Returns a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_extract_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_extract_value',
                function_type=function_type,
                return_type=parse_type('V'),
                parameter_types=(parse_type('MAP(K, V)'), parse_type('K')),
                parameters=('map', 'key'),
                varargs=None,
                description='Returns the value for a given key or NULL if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_from_entries = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_from_entries',
                function_type=function_type,
                return_type=parse_type('MAP(K, V)'),
                parameter_types=(parse_type('STRUCT(K, V)[]'),),
                parameters=('map',),
                varargs=None,
                description='Returns a map created from the entries of the array',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_keys = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_keys',
                function_type=function_type,
                return_type=parse_type('K[]'),
                parameter_types=(parse_type('MAP(K, V)'),),
                parameters=('map',),
                varargs=None,
                description='Returns the keys of a map as a list',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    map_values = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='map_values',
                function_type=function_type,
                return_type=parse_type('V[]'),
                parameter_types=(parse_type('MAP(K, V)'),),
                parameters=('map',),
                varargs=None,
                description='Returns the values of a map as a list',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    md5_number = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='md5_number',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Returns the MD5 hash of the `string` as a `HUGEINT`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='md5_number',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Returns the MD5 hash of the `blob` as a `HUGEINT`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    mod = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    multiply = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    now = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='now',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the current timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    parse_duckdb_log_message = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_duckdb_log_message',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('type', 'message'),
                varargs=None,
                description='Parse the message into the expected logical type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    range = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='range',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP[]'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is exclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='range',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE[]'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTERVAL')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is exclusive.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    reduce = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA')),
                parameters=('list', 'lambda(x,y)'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reduce',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY[]'), parse_type('LAMBDA'), parse_type('ANY')),
                parameters=('list', 'lambda(x,y)', 'initial_value'),
                varargs=None,
                description='Reduces all elements of the input `list` into a single scalar value by executing the `lambda` function on a running result and the next list element. The `lambda` function has an optional `initial_value` argument.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    remap_struct = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='remap_struct',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY'), parse_type('ANY')),
                parameters=('input', 'target_type', 'mapping', 'defaults'),
                varargs=None,
                description='Map a struct to another struct type, potentially re-ordering, renaming and casting members and filling in defaults for missing values',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    repeat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='repeat',
                function_type=function_type,
                return_type=parse_type('T[]'),
                parameter_types=(parse_type('T[]'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    replace_type = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='replace_type',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('ANY'), parse_type('ANY'), parse_type('ANY')),
                parameters=('param', 'type1', 'type2'),
                varargs=None,
                description='Casts all fields of type1 to type2',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    row = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='row',
                function_type=function_type,
                return_type=parse_type('STRUCT'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Create an unnamed STRUCT (tuple) containing the argument values.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    set_bit = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='set_bit',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'), parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('bitstring', 'index', 'new_value'),
                varargs=None,
                description='Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    setseed = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='setseed',
                function_type=function_type,
                return_type=parse_type('"NULL"'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('col0',),
                varargs=None,
                description='Sets the seed to be used for the random function',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    strptime = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strptime',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('text', 'format'),
                varargs=None,
                description='Converts the `string` text to timestamp according to the format string. Throws an error on failure. To return `NULL` on failure, use try_strptime.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strptime',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('text', 'format-list'),
                varargs=None,
                description='Converts the `string` text to timestamp applying the format strings in the list until one succeeds. Throws an error on failure. To return `NULL` on failure, use try_strptime.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_concat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_concat',
                function_type=function_type,
                return_type=parse_type('STRUCT'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Merge the multiple STRUCTs into a single STRUCT.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_extract',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('STRUCT'), parse_type('VARCHAR')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Extract the named entry from the STRUCT.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_extract',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('STRUCT'), parse_type('BIGINT')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Extract the named entry from the STRUCT.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_extract_at = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_extract_at',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('STRUCT'), parse_type('BIGINT')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Extract the entry from the STRUCT by position (starts at 1!).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_insert = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_insert',
                function_type=function_type,
                return_type=parse_type('STRUCT'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Adds field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_pack = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_pack',
                function_type=function_type,
                return_type=parse_type('STRUCT'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Create a STRUCT containing the argument values. The entry name will be the bound variable name.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    struct_update = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_update',
                function_type=function_type,
                return_type=parse_type('STRUCT'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Changes field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    subtract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('BIGNUM'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('BIGNUM'),
                parameter_types=(parse_type('BIGNUM'), parse_type('BIGNUM')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('DATE'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TIME'),
                parameter_types=(parse_type('TIME'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    time_bucket = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('DATE')),
                parameters=('bucket_width', 'timestamp'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP')),
                parameters=('bucket_width', 'timestamp'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('bucket_width', 'timestamp'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('DATE'), parse_type('DATE')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('DATE'), parse_type('INTERVAL')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTERVAL')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='time_bucket',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('bucket_width', 'timestamp', 'origin'),
                varargs=None,
                description='Truncate TIMESTAMPTZ by the specified interval bucket_width. Buckets are aligned relative to origin TIMESTAMPTZ. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    timezone = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('INTERVAL'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('TIME WITH TIME ZONE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    to_timestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('sec',),
                varargs=None,
                description='Converts secs since epoch to a timestamp with time zone',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    today = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='today',
                function_type=function_type,
                return_type=parse_type('DATE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    transaction_timestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='transaction_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the current timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    trunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    try_strptime = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='try_strptime',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('text', 'format'),
                varargs=None,
                description='Converts the `string` text to timestamp according to the format string. Returns `NULL` on failure.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='try_strptime',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('text', 'format'),
                varargs=None,
                description='Converts the `string` text to timestamp according to the format string. Returns `NULL` on failure.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    union_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='union_extract',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('UNION'), parse_type('VARCHAR')),
                parameters=('union', 'tag'),
                varargs=None,
                description='Extract the value with the named tags from the union. NULL if the tag is not currently selected',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    union_tag = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='union_tag',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('UNION'),),
                parameters=('union',),
                varargs=None,
                description='Retrieve the currently selected tag of the union as an ENUM',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    union_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='union_value',
                function_type=function_type,
                return_type=parse_type('UNION'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Create a single member UNION containing the argument value. The tag of the value will be the bound variable name',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    unpivot_list = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='unpivot_list',
                function_type=function_type,
                return_type=parse_type('LIST'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description='Identical to list_value, but generated as part of unpivot for better error messages.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    uuid_extract_timestamp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='uuid_extract_timestamp',
                function_type=function_type,
                return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                parameter_types=(parse_type('UUID'),),
                parameters=('uuid',),
                varargs=None,
                description='Extract the timestamp for the given UUID v7.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    variant_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='variant_extract',
                function_type=function_type,
                return_type=parse_type('VARIANT'),
                parameter_types=(parse_type('VARIANT'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='variant_extract',
                function_type=function_type,
                return_type=parse_type('VARIANT'),
                parameter_types=(parse_type('VARIANT'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    write_log = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='write_log',
                function_type=function_type,
                return_type=parse_type('ANY'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=parse_type('ANY'),
                description='Writes to the logger',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    xor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('UHUGEINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('BIT'),
                parameter_types=(parse_type('BIT'), parse_type('BIT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='generic',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '__internal_compress_string_uhugeint': __internal_compress_string_uhugeint,
        '__internal_decompress_integral_uhugeint': __internal_decompress_integral_uhugeint,
        'abs': abs,
        'add': add,
        'aggregate': aggregate,
        'apply': apply,
        'array_aggr': array_aggr,
        'array_aggregate': array_aggregate,
        'array_apply': array_apply,
        'array_cat': array_cat,
        'array_concat': array_concat,
        'array_distinct': array_distinct,
        'array_extract': array_extract,
        'array_filter': array_filter,
        'array_grade_up': array_grade_up,
        'array_reduce': array_reduce,
        'array_resize': array_resize,
        'array_reverse_sort': array_reverse_sort,
        'array_select': array_select,
        'array_slice': array_slice,
        'array_sort': array_sort,
        'array_transform': array_transform,
        'array_value': array_value,
        'array_where': array_where,
        'array_zip': array_zip,
        'bitstring': bitstring,
        'cast_to_type': cast_to_type,
        'combine': combine,
        'concat': concat,
        'constant_or_null': constant_or_null,
        'current_date': current_date,
        'current_localtime': current_localtime,
        'current_localtimestamp': current_localtimestamp,
        'current_setting': current_setting,
        'date_part': date_part,
        'date_trunc': date_trunc,
        'datepart': datepart,
        'datetrunc': datetrunc,
        'divide': divide,
        'element_at': element_at,
        'enum_code': enum_code,
        'epoch_ms': epoch_ms,
        'equi_width_bins': equi_width_bins,
        'error': error,
        'filter': filter,
        'finalize': finalize,
        'flatten': flatten,
        'from_json': from_json,
        'from_json_strict': from_json_strict,
        'generate_series': generate_series,
        'get_current_time': get_current_time,
        'get_current_timestamp': get_current_timestamp,
        'getvariable': getvariable,
        'grade_up': grade_up,
        'greatest': greatest,
        'json_transform': json_transform,
        'json_transform_strict': json_transform_strict,
        'last_day': last_day,
        'least': least,
        'list_aggr': list_aggr,
        'list_aggregate': list_aggregate,
        'list_apply': list_apply,
        'list_cat': list_cat,
        'list_concat': list_concat,
        'list_distinct': list_distinct,
        'list_element': list_element,
        'list_extract': list_extract,
        'list_filter': list_filter,
        'list_grade_up': list_grade_up,
        'list_pack': list_pack,
        'list_reduce': list_reduce,
        'list_resize': list_resize,
        'list_reverse_sort': list_reverse_sort,
        'list_select': list_select,
        'list_slice': list_slice,
        'list_sort': list_sort,
        'list_transform': list_transform,
        'list_value': list_value,
        'list_where': list_where,
        'list_zip': list_zip,
        'make_date': make_date,
        'make_time': make_time,
        'make_timestamp': make_timestamp,
        'make_timestamp_ms': make_timestamp_ms,
        'make_timestamp_ns': make_timestamp_ns,
        'make_timestamptz': make_timestamptz,
        'map': map,
        'map_concat': map_concat,
        'map_entries': map_entries,
        'map_extract': map_extract,
        'map_extract_value': map_extract_value,
        'map_from_entries': map_from_entries,
        'map_keys': map_keys,
        'map_values': map_values,
        'md5_number': md5_number,
        'mod': mod,
        'multiply': multiply,
        'now': now,
        'parse_duckdb_log_message': parse_duckdb_log_message,
        'range': range,
        'reduce': reduce,
        'remap_struct': remap_struct,
        'repeat': repeat,
        'replace_type': replace_type,
        'row': row,
        'set_bit': set_bit,
        'setseed': setseed,
        'strptime': strptime,
        'struct_concat': struct_concat,
        'struct_extract': struct_extract,
        'struct_extract_at': struct_extract_at,
        'struct_insert': struct_insert,
        'struct_pack': struct_pack,
        'struct_update': struct_update,
        'subtract': subtract,
        'time_bucket': time_bucket,
        'timezone': timezone,
        'to_timestamp': to_timestamp,
        'today': today,
        'transaction_timestamp': transaction_timestamp,
        'trunc': trunc,
        'try_strptime': try_strptime,
        'union_extract': union_extract,
        'union_tag': union_tag,
        'union_value': union_value,
        'unpivot_list': unpivot_list,
        'uuid_extract_timestamp': uuid_extract_timestamp,
        'variant_extract': variant_extract,
        'write_log': write_log,
        'xor': xor,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '%': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '&': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('BIT'),
                            parameter_types=(parse_type('BIT'), parse_type('BIT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '*': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '+': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('ANY[]'),
                            parameter_types=(),
                            parameters=(),
                            varargs=parse_type('ANY[]'),
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DATE'),
                            parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DATE'),
                            parameter_types=(parse_type('INTEGER'), parse_type('DATE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('DATE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('DATE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIME'),
                            parameter_types=(parse_type('TIME'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIME'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('TIME')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIME WITH TIME ZONE'),
                            parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIME WITH TIME ZONE'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('TIME WITH TIME ZONE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('TIME'), parse_type('DATE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('DATE'), parse_type('TIME')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                            parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('DATE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                            parameter_types=(parse_type('DATE'), parse_type('TIME WITH TIME ZONE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('BIGNUM'),
                            parameter_types=(parse_type('BIGNUM'), parse_type('BIGNUM')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                            parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('TIMESTAMP WITH TIME ZONE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '-': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('BIGNUM'),
                            parameter_types=(parse_type('BIGNUM'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('BIGNUM'),
                            parameter_types=(parse_type('BIGNUM'), parse_type('BIGNUM')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('DATE'),
                            parameter_types=(parse_type('DATE'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('DATE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TIME'),
                            parameter_types=(parse_type('TIME'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP'),
                            parameter_types=(parse_type('TIMESTAMP'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TIME WITH TIME ZONE'),
                            parameter_types=(parse_type('TIME WITH TIME ZONE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TIMESTAMP WITH TIME ZONE'),
                            parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '//': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '<<': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('BIT'),
                            parameter_types=(parse_type('BIT'), parse_type('INTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '>>': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('BIT'),
                            parameter_types=(parse_type('BIT'), parse_type('INTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '@': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '|': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('BIT'),
                            parameter_types=(parse_type('BIT'), parse_type('BIT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '||': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='||',
                            function_type=function_type,
                            return_type=parse_type('ANY'),
                            parameter_types=(parse_type('ANY'), parse_type('ANY')),
                            parameters=('arg1', 'arg2'),
                            varargs=None,
                            description='Concatenates two strings, lists, or blobs. Any `NULL` input results in `NULL`. See also `concat(arg1, arg2, ...)` and `list_concat(list1, list2, ...)`.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
        '~': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('UHUGEINT'),
                            parameter_types=(parse_type('UHUGEINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('BIT'),
                            parameter_types=(parse_type('BIT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='generic',
        ),
    }

class ScalarNumericFunctions(_StaticFunctionNamespace):
    """DuckDB scalar functions returning numeric results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'scalar'
    return_category: ClassVar[str] = 'numeric'
    __internal_compress_integral_ubigint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_integral_uinteger = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_integral_usmallint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_integral_utinyint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_integral_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UHUGEINT'), parse_type('UHUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_string_hugeint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_hugeint',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_string_ubigint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_string_uinteger = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_string_usmallint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_compress_string_utinyint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_compress_string_utinyint',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_bigint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_bigint',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_bigint',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_bigint',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_hugeint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_hugeint',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_hugeint',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_hugeint',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_hugeint',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_integer = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_integer',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('UTINYINT'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_integer',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('USMALLINT'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_smallint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_smallint',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_ubigint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_ubigint',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_uinteger = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_uinteger',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('USMALLINT'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    __internal_decompress_integral_usmallint = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_integral_usmallint',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    abs = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='abs',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Absolute value',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    acos = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='acos',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the arccosine of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    acosh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='acosh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the inverse hyperbolic cos of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    add = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='add',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    age = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='age',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('timestamp',),
                varargs=None,
                description='Subtract arguments, resulting in the time difference between the two timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='age',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('timestamp',),
                varargs=None,
                description='Subtract arguments, resulting in the time difference between the two timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='age',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('timestamp', 'timestamp'),
                varargs=None,
                description='Subtract arguments, resulting in the time difference between the two timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='age',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('timestamp', 'timestamp'),
                varargs=None,
                description='Subtract arguments, resulting in the time difference between the two timestamps',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_cosine_distance = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cosine_distance',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the cosine distance between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cosine_distance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the cosine distance between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_cosine_similarity = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cosine_similarity',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the cosine similarity between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cosine_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the cosine similarity between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_cross_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cross_product',
                function_type=function_type,
                return_type=parse_type('FLOAT[3]'),
                parameter_types=(parse_type('FLOAT[3]'), parse_type('FLOAT[3]')),
                parameters=('array', 'array'),
                varargs=None,
                description='Computes the cross product of two arrays of size 3. The array elements can not be `NULL`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_cross_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE[3]'),
                parameter_types=(parse_type('DOUBLE[3]'), parse_type('DOUBLE[3]')),
                parameters=('array', 'array'),
                varargs=None,
                description='Computes the cross product of two arrays of size 3. The array elements can not be `NULL`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_distance = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_distance',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the distance between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_distance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the distance between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_dot_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_dot_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_dot_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_indexof = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_indexof',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns the index of the `element` if the `list` contains the `element`. If the `element` is not found, it returns `NULL`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_inner_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_inner_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_inner_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Returns the length of the `list`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'), parse_type('BIGINT')),
                parameters=('list', 'dimension'),
                varargs=None,
                description='`array_length` for lists with dimensions other than 1 not implemented',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_negative_dot_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_negative_dot_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the negative inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_negative_dot_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the negative inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_negative_inner_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_negative_inner_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[ANY]'), parse_type('FLOAT[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the negative inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_negative_inner_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[ANY]'), parse_type('DOUBLE[ANY]')),
                parameters=('array1', 'array2'),
                varargs=None,
                description='Computes the negative inner product between two arrays of the same size. The array elements can not be `NULL`. The arrays can have any size as long as the size is the same for both arguments.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_position = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_position',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns the index of the `element` if the `list` contains the `element`. If the `element` is not found, it returns `NULL`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    array_unique = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_unique',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Counts the unique elements of a `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    ascii = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ascii',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Returns an integer that represents the Unicode code point of the first character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    asin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='asin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the arcsine of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    asinh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='asinh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the inverse hyperbolic sin of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    atan = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='atan',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the arctangent of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    atan2 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='atan2',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('y', 'x'),
                varargs=None,
                description='Computes the arctangent (y, x)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    atanh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='atanh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the inverse hyperbolic tan of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_count = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_count',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the number of bits that are set',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of bits in a `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bit',),
                varargs=None,
                description='Returns the bit-length of the `bit` argument.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    bit_position = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bit_position',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('BIT'), parse_type('BIT')),
                parameters=('substring', 'bitstring'),
                varargs=None,
                description='Returns first starting index of the specified substring within bits, or zero if it is not present. The first (leftmost) bit is indexed 1',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    cardinality = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cardinality',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('map',),
                varargs=parse_type('ANY'),
                description='Returns the size of the map (or the number of entries in the map)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    cbrt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cbrt',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the cube root of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    ceil = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceil',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceil',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceil',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    ceiling = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceiling',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceiling',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ceiling',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number up',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    century = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='century',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the century component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='century',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the century component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='century',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the century component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='century',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the century component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    char_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='char_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of characters in `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='char_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bit',),
                varargs=None,
                description='Returns the bit-length of the `bit` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='char_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Returns the length of the `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    character_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='character_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of characters in `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='character_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bit',),
                varargs=None,
                description='Returns the bit-length of the `bit` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='character_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Returns the length of the `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    cos = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cos',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the cos of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    cosh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cosh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the hyperbolic cos of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    cot = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='cot',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the cotangent of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    current_connection_id = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_connection_id',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Get the current connection_id',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    current_query_id = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_query_id',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Get the current query_id',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    current_transaction_id = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_transaction_id',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Get the current global transaction_id',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    currval = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='currval',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=("'sequence_name'",),
                varargs=None,
                description='Return the current value of the sequence. Note that nextval must be called at least once prior to calling currval.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    damerau_levenshtein = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='damerau_levenshtein',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Characters of different cases (e.g., `a` and `A`) are considered different.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    date_diff = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_diff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE'), parse_type('DATE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_diff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME'), parse_type('TIME')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_diff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_diff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    date_part = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTERVAL')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME_NS')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_part',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    date_sub = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_sub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE'), parse_type('DATE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_sub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME'), parse_type('TIME')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_sub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_sub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    date_trunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='date_trunc',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTERVAL')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    datediff = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datediff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE'), parse_type('DATE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datediff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME'), parse_type('TIME')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datediff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datediff',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of partition boundaries between the timestamps',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    datepart = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTERVAL')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME_NS')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datepart',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('ts', 'col1'),
                varargs=None,
                description='Get subfield (equivalent to extract)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    datesub = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datesub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE'), parse_type('DATE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datesub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIME'), parse_type('TIME')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datesub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datesub',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                parameters=('part', 'startdate', 'enddate'),
                varargs=None,
                description='The number of complete partitions between the timestamps',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    datetrunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='datetrunc',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTERVAL')),
                parameters=('part', 'timestamp'),
                varargs=None,
                description='Truncate to specified precision',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    day = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='day',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the day component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='day',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the day component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='day',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the day component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='day',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the day component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    dayofmonth = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofmonth',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofmonth component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofmonth',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofmonth component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofmonth',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofmonth component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofmonth',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofmonth component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    dayofweek = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    dayofyear = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the dayofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    decade = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='decade',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the decade component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='decade',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the decade component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='decade',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the decade component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='decade',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the decade component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    degrees = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='degrees',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Converts radians to degrees',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    divide = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='divide',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    editdist3 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='editdist3',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., `a` and `A`) are considered different.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    epoch = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DATE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIME'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component from a temporal type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    epoch_ms = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ms',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in milliseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    epoch_ns = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_ns',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP_NS'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in nanoseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    epoch_us = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='epoch_us',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('temporal',),
                varargs=None,
                description='Extract the epoch component in microseconds from a temporal type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    era = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='era',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the era component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='era',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the era component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='era',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the era component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='era',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the era component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    even = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='even',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to next even number by rounding away from zero',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    exp = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='exp',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes e to the power of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    factorial = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='factorial',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Factorial of x. Computes the product of the current integer and all integers below it',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    floor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='floor',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number down',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='floor',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number down',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='floor',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Rounds the number down',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    gamma = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='gamma',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Interpolation of (x-1) factorial (so decimal inputs are allowed)',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    gcd = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='gcd',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the greatest common divisor of x and y',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='gcd',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the greatest common divisor of x and y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    generate_series = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='generate_series',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('start',),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is inclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='generate_series',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('start', 'stop'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is inclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='generate_series',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is inclusive.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    get_bit = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='get_bit',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('BIT'), parse_type('INTEGER')),
                parameters=('bitstring', 'index'),
                varargs=None,
                description='Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    greatest_common_divisor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='greatest_common_divisor',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the greatest common divisor of x and y',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='greatest_common_divisor',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the greatest common divisor of x and y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    hamming = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hamming',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., `a` and `A`) are considered different.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    hash = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hash',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('ANY'),),
                parameters=('value',),
                varargs=parse_type('ANY'),
                description='Returns a `UBIGINT` with the hash of the `value`. Note that this is not a cryptographic hash.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    hour = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    instr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='instr',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns location of first occurrence of `search_string` in `string`, counting from 1. Returns 0 if no match found.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    isodow = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isodow',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isodow component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isodow',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isodow component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isodow',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isodow component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isodow',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isodow component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    isoyear = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isoyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isoyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isoyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isoyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isoyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isoyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='isoyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the isoyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    jaccard = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='jaccard',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The Jaccard similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    jaro_similarity = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='jaro_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The Jaro similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='jaro_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('s1', 's2', 'score_cutoff'),
                varargs=None,
                description='The Jaro similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    jaro_winkler_similarity = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='jaro_winkler_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='jaro_winkler_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('DOUBLE')),
                parameters=('s1', 's2', 'score_cutoff'),
                varargs=None,
                description='The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    json_array_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array_length',
                function_type=function_type,
                return_type=parse_type('UBIGINT[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    julian = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='julian',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the Julian Day number from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='julian',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the Julian Day number from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='julian',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the Julian Day number from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    lcm = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lcm',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the least common multiple of x and y',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lcm',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the least common multiple of x and y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    least_common_multiple = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='least_common_multiple',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the least common multiple of x and y',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='least_common_multiple',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes the least common multiple of x and y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    len = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='len',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of characters in `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='len',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bit',),
                varargs=None,
                description='Returns the bit-length of the `bit` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='len',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Returns the length of the `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of characters in `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bit',),
                varargs=None,
                description='Returns the bit-length of the `bit` argument.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Returns the length of the `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    length_grapheme = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='length_grapheme',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of grapheme clusters in `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    levenshtein = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='levenshtein',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., `a` and `A`) are considered different.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    lgamma = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lgamma',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the log of the gamma function',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_cosine_distance = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_cosine_distance',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the cosine distance between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_cosine_distance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the cosine distance between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_cosine_similarity = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_cosine_similarity',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the cosine similarity between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_cosine_similarity',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the cosine similarity between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_distance = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_distance',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_distance',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_dot_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_dot_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_dot_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_indexof = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_indexof',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns the index of the `element` if the `list` contains the `element`. If the `element` is not found, it returns `NULL`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_inner_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_inner_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_inner_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_negative_dot_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_negative_dot_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the negative inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_negative_dot_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the negative inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_negative_inner_product = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_negative_inner_product',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the negative inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_negative_inner_product',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                parameters=('list1', 'list2'),
                varargs=None,
                description='Computes the negative inner product between two same-sized lists.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_position = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_position',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('T[]'), parse_type('T')),
                parameters=('list', 'element'),
                varargs=None,
                description='Returns the index of the `element` if the `list` contains the `element`. If the `element` is not found, it returns `NULL`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    list_unique = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_unique',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('ANY[]'),),
                parameters=('list',),
                varargs=None,
                description='Counts the unique elements of a `list`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    ln = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ln',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the natural logarithm of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    log = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='log',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('b',),
                varargs=None,
                description='Computes the logarithm of x to base b. b may be omitted, in which case the default 10',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='log',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('b', 'x'),
                varargs=None,
                description='Computes the logarithm of x to base b. b may be omitted, in which case the default 10',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    log10 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='log10',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the 10-log of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    log2 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='log2',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the 2-log of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    microsecond = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='microsecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the microsecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    millennium = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millennium',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millennium component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millennium',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millennium component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millennium',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millennium component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millennium',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millennium component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    millisecond = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='millisecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the millisecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    minute = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mismatches = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mismatches',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('s1', 's2'),
                varargs=None,
                description='The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., `a` and `A`) are considered different.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    mod = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='mod',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    month = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='month',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the month component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='month',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the month component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='month',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the month component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='month',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the month component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    multiply = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='multiply',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    nanosecond = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP_NS'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nanosecond',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('tsns',),
                varargs=None,
                description='Extract the nanosecond component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    nextafter = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nextafter',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'y'),
                varargs=None,
                description='Returns the next floating point value after x in the direction of y',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nextafter',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('x', 'y'),
                varargs=None,
                description='Returns the next floating point value after x in the direction of y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    nextval = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nextval',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=("'sequence_name'",),
                varargs=None,
                description='Return the following value of the sequence.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    normalized_interval = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='normalized_interval',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('interval',),
                varargs=None,
                description='Normalizes an INTERVAL to an equivalent interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    octet_length = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='octet_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Number of bytes in `blob`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='octet_length',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIT'),),
                parameters=('bitstring',),
                varargs=None,
                description='Returns the number of bytes in the `bitstring`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    ord = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ord',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Returns an `INTEGER` representing the `unicode` codepoint of the first character in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    pi = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='pi',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the value of pi',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    position = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='position',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns location of first occurrence of `search_string` in `string`, counting from 1. Returns 0 if no match found.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    pow = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='pow',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes x to the power of y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    power = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='power',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'y'),
                varargs=None,
                description='Computes x to the power of y',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    quarter = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quarter',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the quarter component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quarter',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the quarter component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quarter',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the quarter component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='quarter',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the quarter component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    radians = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='radians',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Converts degrees to radians',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    random = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='random',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns a random number between 0 and 1',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    range = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='range',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('start',),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is exclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='range',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('start', 'stop'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is exclusive.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='range',
                function_type=function_type,
                return_type=parse_type('BIGINT[]'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('start', 'stop', 'step'),
                varargs=None,
                description='Creates a list of values between `start` and `stop` - the stop parameter is exclusive.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    round = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='round',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('x', 'precision'),
                varargs=None,
                description='Rounds x to s decimal places',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    second = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIME_NS'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='second',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the second component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sign = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sign',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Returns the sign of x as -1, 0 or 1',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sin',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the sin of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sinh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sinh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the hyperbolic sin of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    sqrt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sqrt',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Returns the square root of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    strlen = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strlen',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Number of bytes in `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    strpos = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strpos',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'search_string'),
                varargs=None,
                description='Returns location of first occurrence of `search_string` in `string`, counting from 1. Returns 0 if no match found.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    struct_indexof = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_indexof',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('STRUCT'), parse_type('ANY')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Get the position of the entry in an unnamed STRUCT, starting at 1.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    struct_position = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='struct_position',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('STRUCT'), parse_type('ANY')),
                parameters=('struct', "'entry'"),
                varargs=None,
                description='Get the position of the entry in an unnamed STRUCT, starting at 1.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    subtract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'), parse_type('DATE')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='subtract',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTERVAL'), parse_type('INTERVAL')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    tan = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='tan',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the tan of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    tanh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='tanh',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Computes the hyperbolic tan of x',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    timetz_byte_comparable = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timetz_byte_comparable',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('TIME WITH TIME ZONE'),),
                parameters=('time_tz',),
                varargs=None,
                description='Converts a TIME WITH TIME ZONE to an integer sort key',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    timezone = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    timezone_hour = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_hour',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_hour component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    timezone_minute = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='timezone_minute',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the timezone_minute component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_centuries = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_centuries',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a century interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_centuries',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a century interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_days = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_days',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a day interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_days',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a day interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_decades = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_decades',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a decade interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_decades',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a decade interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_hours = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hours',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a hour interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_microseconds = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_microseconds',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a microsecond interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_millennia = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_millennia',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a millenium interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_millennia',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a millenium interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_milliseconds = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_milliseconds',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('double',),
                varargs=None,
                description='Construct a millisecond interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_minutes = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_minutes',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a minute interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_months = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_months',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a month interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_months',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a month interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_quarters = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_quarters',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a quarter interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_quarters',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a quarter interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_seconds = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_seconds',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('double',),
                varargs=None,
                description='Construct a second interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_weeks = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_weeks',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a week interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_weeks',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a week interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    to_years = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_years',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a year interval',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_years',
                function_type=function_type,
                return_type=parse_type('INTERVAL'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Construct a year interval',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    trunc = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('x',),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('FLOAT'),
                parameter_types=(parse_type('FLOAT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('DOUBLE'),
                parameter_types=(parse_type('DOUBLE'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('DECIMAL'),
                parameter_types=(parse_type('DECIMAL'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trunc',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('INTEGER')),
                parameters=('x', 'col1'),
                varargs=None,
                description='Truncates the number',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    txid_current = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='txid_current',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the current transaction’s ID (a BIGINT). It will assign a new one if the current transaction does not have one already',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    unicode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='unicode',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Returns an `INTEGER` representing the `unicode` codepoint of the first character in the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    uuid_extract_version = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='uuid_extract_version',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UUID'),),
                parameters=('uuid',),
                varargs=None,
                description='Extract a version for the given UUID.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    week = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='week',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the week component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='week',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the week component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='week',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the week component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='week',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the week component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    weekday = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekday',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekday component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekday',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekday component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekday',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekday component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekday',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekday component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    weekofyear = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='weekofyear',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the weekofyear component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    xor = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('TINYINT'),
                parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('SMALLINT'),
                parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('INTEGER'),
                parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('HUGEINT'),
                parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('UTINYINT'),
                parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('USMALLINT'),
                parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('UINTEGER'),
                parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='xor',
                function_type=function_type,
                return_type=parse_type('UBIGINT'),
                parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                parameters=('left', 'right'),
                varargs=None,
                description='Bitwise XOR',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    year = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='year',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the year component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='year',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the year component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='year',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the year component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='year',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the year component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    yearweek = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='yearweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the yearweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='yearweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('INTERVAL'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the yearweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='yearweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the yearweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='yearweek',
                function_type=function_type,
                return_type=parse_type('BIGINT'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='Extract the yearweek component from a date or timestamp',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='numeric',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '__internal_compress_integral_ubigint': __internal_compress_integral_ubigint,
        '__internal_compress_integral_uinteger': __internal_compress_integral_uinteger,
        '__internal_compress_integral_usmallint': __internal_compress_integral_usmallint,
        '__internal_compress_integral_utinyint': __internal_compress_integral_utinyint,
        '__internal_compress_string_hugeint': __internal_compress_string_hugeint,
        '__internal_compress_string_ubigint': __internal_compress_string_ubigint,
        '__internal_compress_string_uinteger': __internal_compress_string_uinteger,
        '__internal_compress_string_usmallint': __internal_compress_string_usmallint,
        '__internal_compress_string_utinyint': __internal_compress_string_utinyint,
        '__internal_decompress_integral_bigint': __internal_decompress_integral_bigint,
        '__internal_decompress_integral_hugeint': __internal_decompress_integral_hugeint,
        '__internal_decompress_integral_integer': __internal_decompress_integral_integer,
        '__internal_decompress_integral_smallint': __internal_decompress_integral_smallint,
        '__internal_decompress_integral_ubigint': __internal_decompress_integral_ubigint,
        '__internal_decompress_integral_uinteger': __internal_decompress_integral_uinteger,
        '__internal_decompress_integral_usmallint': __internal_decompress_integral_usmallint,
        'abs': abs,
        'acos': acos,
        'acosh': acosh,
        'add': add,
        'age': age,
        'array_cosine_distance': array_cosine_distance,
        'array_cosine_similarity': array_cosine_similarity,
        'array_cross_product': array_cross_product,
        'array_distance': array_distance,
        'array_dot_product': array_dot_product,
        'array_indexof': array_indexof,
        'array_inner_product': array_inner_product,
        'array_length': array_length,
        'array_negative_dot_product': array_negative_dot_product,
        'array_negative_inner_product': array_negative_inner_product,
        'array_position': array_position,
        'array_unique': array_unique,
        'ascii': ascii,
        'asin': asin,
        'asinh': asinh,
        'atan': atan,
        'atan2': atan2,
        'atanh': atanh,
        'bit_count': bit_count,
        'bit_length': bit_length,
        'bit_position': bit_position,
        'cardinality': cardinality,
        'cbrt': cbrt,
        'ceil': ceil,
        'ceiling': ceiling,
        'century': century,
        'char_length': char_length,
        'character_length': character_length,
        'cos': cos,
        'cosh': cosh,
        'cot': cot,
        'current_connection_id': current_connection_id,
        'current_query_id': current_query_id,
        'current_transaction_id': current_transaction_id,
        'currval': currval,
        'damerau_levenshtein': damerau_levenshtein,
        'date_diff': date_diff,
        'date_part': date_part,
        'date_sub': date_sub,
        'date_trunc': date_trunc,
        'datediff': datediff,
        'datepart': datepart,
        'datesub': datesub,
        'datetrunc': datetrunc,
        'day': day,
        'dayofmonth': dayofmonth,
        'dayofweek': dayofweek,
        'dayofyear': dayofyear,
        'decade': decade,
        'degrees': degrees,
        'divide': divide,
        'editdist3': editdist3,
        'epoch': epoch,
        'epoch_ms': epoch_ms,
        'epoch_ns': epoch_ns,
        'epoch_us': epoch_us,
        'era': era,
        'even': even,
        'exp': exp,
        'factorial': factorial,
        'floor': floor,
        'gamma': gamma,
        'gcd': gcd,
        'generate_series': generate_series,
        'get_bit': get_bit,
        'greatest_common_divisor': greatest_common_divisor,
        'hamming': hamming,
        'hash': hash,
        'hour': hour,
        'instr': instr,
        'isodow': isodow,
        'isoyear': isoyear,
        'jaccard': jaccard,
        'jaro_similarity': jaro_similarity,
        'jaro_winkler_similarity': jaro_winkler_similarity,
        'json_array_length': json_array_length,
        'julian': julian,
        'lcm': lcm,
        'least_common_multiple': least_common_multiple,
        'len': len,
        'length': length,
        'length_grapheme': length_grapheme,
        'levenshtein': levenshtein,
        'lgamma': lgamma,
        'list_cosine_distance': list_cosine_distance,
        'list_cosine_similarity': list_cosine_similarity,
        'list_distance': list_distance,
        'list_dot_product': list_dot_product,
        'list_indexof': list_indexof,
        'list_inner_product': list_inner_product,
        'list_negative_dot_product': list_negative_dot_product,
        'list_negative_inner_product': list_negative_inner_product,
        'list_position': list_position,
        'list_unique': list_unique,
        'ln': ln,
        'log': log,
        'log10': log10,
        'log2': log2,
        'microsecond': microsecond,
        'millennium': millennium,
        'millisecond': millisecond,
        'minute': minute,
        'mismatches': mismatches,
        'mod': mod,
        'month': month,
        'multiply': multiply,
        'nanosecond': nanosecond,
        'nextafter': nextafter,
        'nextval': nextval,
        'normalized_interval': normalized_interval,
        'octet_length': octet_length,
        'ord': ord,
        'pi': pi,
        'position': position,
        'pow': pow,
        'power': power,
        'quarter': quarter,
        'radians': radians,
        'random': random,
        'range': range,
        'round': round,
        'second': second,
        'sign': sign,
        'sin': sin,
        'sinh': sinh,
        'sqrt': sqrt,
        'strlen': strlen,
        'strpos': strpos,
        'struct_indexof': struct_indexof,
        'struct_position': struct_position,
        'subtract': subtract,
        'tan': tan,
        'tanh': tanh,
        'timetz_byte_comparable': timetz_byte_comparable,
        'timezone': timezone,
        'timezone_hour': timezone_hour,
        'timezone_minute': timezone_minute,
        'to_centuries': to_centuries,
        'to_days': to_days,
        'to_decades': to_decades,
        'to_hours': to_hours,
        'to_microseconds': to_microseconds,
        'to_millennia': to_millennia,
        'to_milliseconds': to_milliseconds,
        'to_minutes': to_minutes,
        'to_months': to_months,
        'to_quarters': to_quarters,
        'to_seconds': to_seconds,
        'to_weeks': to_weeks,
        'to_years': to_years,
        'trunc': trunc,
        'txid_current': txid_current,
        'unicode': unicode,
        'uuid_extract_version': uuid_extract_version,
        'week': week,
        'weekday': weekday,
        'weekofyear': weekofyear,
        'xor': xor,
        'year': year,
        'yearweek': yearweek,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '!__postfix': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='!__postfix',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('INTEGER'),),
                            parameters=('x',),
                            varargs=None,
                            description='Factorial of x. Computes the product of the current integer and all integers below it',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '%': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='%',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '&': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='&',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise AND',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '*': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('BIGINT'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='*',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '**': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='**',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('x', 'y'),
                            varargs=None,
                            description='Computes x to the power of y',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '+': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='+',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '-': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'),),
                            parameters=('col0',),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'), parse_type('DECIMAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('DATE'), parse_type('DATE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('TIMESTAMP'), parse_type('TIMESTAMP')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('INTERVAL')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='-',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('TIMESTAMP WITH TIME ZONE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '/': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='/',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='/',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='/',
                            function_type=function_type,
                            return_type=parse_type('INTERVAL'),
                            parameter_types=(parse_type('INTERVAL'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '//': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'), parse_type('FLOAT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='//',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '<->': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<->',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length.',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<->',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '<<': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<<',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift left',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '<=>': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<=>',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT[]'), parse_type('FLOAT[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Computes the cosine distance between two same-sized lists.',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='<=>',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE[]'), parse_type('DOUBLE[]')),
                            parameters=('list1', 'list2'),
                            varargs=None,
                            description='Computes the cosine distance between two same-sized lists.',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '>>': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='>>',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('input', 'col1'),
                            varargs=None,
                            description='Bitwise shift right',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '@': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('FLOAT'),
                            parameter_types=(parse_type('FLOAT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('DECIMAL'),
                            parameter_types=(parse_type('DECIMAL'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='@',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'),),
                            parameters=('x',),
                            varargs=None,
                            description='Absolute value',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '^': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='^',
                            function_type=function_type,
                            return_type=parse_type('DOUBLE'),
                            parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE')),
                            parameters=('x', 'y'),
                            varargs=None,
                            description='Computes x to the power of y',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '|': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'), parse_type('TINYINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'), parse_type('SMALLINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'), parse_type('INTEGER')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'), parse_type('BIGINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'), parse_type('HUGEINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'), parse_type('UTINYINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'), parse_type('USMALLINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'), parse_type('UINTEGER')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='|',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'), parse_type('UBIGINT')),
                            parameters=('left', 'right'),
                            varargs=None,
                            description='Bitwise OR',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
        '~': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('TINYINT'),
                            parameter_types=(parse_type('TINYINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('SMALLINT'),
                            parameter_types=(parse_type('SMALLINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('INTEGER'),
                            parameter_types=(parse_type('INTEGER'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('BIGINT'),
                            parameter_types=(parse_type('BIGINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('HUGEINT'),
                            parameter_types=(parse_type('HUGEINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('UTINYINT'),
                            parameter_types=(parse_type('UTINYINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('USMALLINT'),
                            parameter_types=(parse_type('USMALLINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('UINTEGER'),
                            parameter_types=(parse_type('UINTEGER'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='~',
                            function_type=function_type,
                            return_type=parse_type('UBIGINT'),
                            parameter_types=(parse_type('UBIGINT'),),
                            parameters=('input',),
                            varargs=None,
                            description='Bitwise NOT',
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='numeric',
        ),
    }

class ScalarVarcharFunctions(_StaticFunctionNamespace):
    """DuckDB scalar functions returning string results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'scalar'
    return_category: ClassVar[str] = 'varchar'
    __internal_decompress_string = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UTINYINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('USMALLINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UINTEGER'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='__internal_decompress_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    alias = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='alias',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('expr',),
                varargs=None,
                description='Returns the name of a given expression',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    array_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'index'),
                varargs=None,
                description='Extracts a single character from a `string` using a (1-based) `index`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    array_to_json = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='array_to_json',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    bar = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bar',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'min', 'max'),
                varargs=None,
                description='Draws a band whose width is proportional to (`x - min`) and equal to `width` characters when `x` = `max`. `width` defaults to 80.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bar',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('DOUBLE'), parse_type('DOUBLE')),
                parameters=('x', 'min', 'max', 'width'),
                varargs=None,
                description='Draws a band whose width is proportional to (`x - min`) and equal to `width` characters when `x` = `max`. `width` defaults to 80.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    base64 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='base64',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Converts a `blob` to a base64 encoded string.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    bin = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts the `string` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='bin',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    chr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='chr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('INTEGER'),),
                parameters=('code_point',),
                varargs=None,
                description='Returns a character which is corresponding the ASCII code value or Unicode code point.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    concat_ws = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='concat_ws',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('ANY')),
                parameters=('separator', 'string'),
                varargs=parse_type('ANY'),
                description='Concatenates many strings, separated by `separator`. `NULL` inputs are skipped.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    current_database = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_database',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the name of the currently active database',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    current_query = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_query',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the current query as a string',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    current_schema = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_schema',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the name of the currently active schema. Default is main',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    current_schemas = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='current_schemas',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('BOOLEAN'),),
                parameters=('include_implicit',),
                varargs=None,
                description='Returns list of schemas. Pass a parameter of True to include implicit schemas',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    dayname = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the weekday',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the weekday',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='dayname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the weekday',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    decode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='decode',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Converts `blob` to `VARCHAR`. Fails if `blob` is not valid UTF-8.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    enum_first = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='enum_first',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('enum',),
                varargs=None,
                description='Returns the first value of the input enum type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    enum_last = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='enum_last',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('enum',),
                varargs=None,
                description='Returns the last value of the input enum type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    enum_range = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='enum_range',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('ANY'),),
                parameters=('enum',),
                varargs=None,
                description='Returns all values of the input enum type as an array',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    enum_range_boundary = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='enum_range_boundary',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('ANY'), parse_type('ANY')),
                parameters=('start', 'end'),
                varargs=None,
                description='Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    format = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='format',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('format',),
                varargs=parse_type('ANY'),
                description='Formats a string using the fmt syntax.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    formatReadableDecimalSize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='formatReadableDecimalSize',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Converts `integer` to a human-readable representation using units based on powers of 10 (KB, MB, GB, etc.).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    formatReadableSize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='formatReadableSize',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Converts `integer` to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    format_bytes = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='format_bytes',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('integer',),
                varargs=None,
                description='Converts `integer` to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.).',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    gen_random_uuid = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='gen_random_uuid',
                function_type=function_type,
                return_type=parse_type('UUID'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns a random UUID v4 similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    hex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts the `string` to hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Converts `blob` to `VARCHAR` using hexadecimal encoding.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_af = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_af',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_am = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_am',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ar = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ar',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ar_sa = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ar_sa',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_as = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_as',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_az = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_az',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_be = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_be',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_bg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_bg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_bn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_bn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_bo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_bo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_br = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_br',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_bs = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_bs',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ca = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ca',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ceb = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ceb',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_chr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_chr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_cs = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_cs',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_cy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_cy',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_da = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_da',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_de = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_de',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_de_at = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_de_at',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_dsb = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_dsb',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_dz = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_dz',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ee = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ee',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_el = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_el',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_en = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_en',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_en_us = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_en_us',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_eo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_eo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_es = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_es',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_et = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_et',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fa = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fa',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fa_af = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fa_af',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ff = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ff',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fi = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fi',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fil = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fil',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fr_ca = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fr_ca',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_fy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_fy',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ga = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ga',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_gl = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_gl',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_gu = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_gu',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ha = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ha',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_haw = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_haw',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_he = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_he',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_he_il = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_he_il',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_hi = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_hi',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_hr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_hr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_hsb = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_hsb',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_hu = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_hu',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_hy = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_hy',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_id = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_id',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_id_id = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_id_id',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ig = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ig',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_is = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_is',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_it = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_it',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ja = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ja',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ka = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ka',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_kk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_kk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_kl = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_kl',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_km = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_km',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_kn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_kn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ko = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ko',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_kok = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_kok',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ku = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ku',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ky = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ky',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_lb = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_lb',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_lkt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_lkt',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ln = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ln',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_lo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_lo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_lt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_lt',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_lv = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_lv',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_mk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_mk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ml = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ml',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_mn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_mn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_mr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_mr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ms = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ms',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_mt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_mt',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_my = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_my',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_nb = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_nb',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_nb_no = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_nb_no',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ne = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ne',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_nl = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_nl',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_nn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_nn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_noaccent = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_noaccent',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_om = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_om',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_or = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_or',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_pa = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_pa',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_pa_in = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_pa_in',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_pl = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_pl',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ps = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ps',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_pt = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_pt',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ro = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ro',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ru = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ru',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sa = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sa',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_se = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_se',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_si = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_si',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sl = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sl',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_smn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_smn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sq = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sq',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sr_ba = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sr_ba',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sr_me = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sr_me',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sr_rs = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sr_rs',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sv = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sv',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_sw = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_sw',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ta = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ta',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_te = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_te',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_th = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_th',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_tk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_tk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_to = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_to',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_tr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_tr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ug = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ug',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_uk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_uk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_ur = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_ur',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_uz = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_uz',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_vi = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_vi',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_wae = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_wae',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_wo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_wo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_xh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_xh',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_yi = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_yi',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_yo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_yo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_yue = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_yue',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_yue_cn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_yue_cn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh_cn = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh_cn',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh_hk = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh_hk',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh_mo = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh_mo',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh_sg = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh_sg',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zh_tw = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zh_tw',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_collate_zu = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_collate_zu',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    icu_sort_key = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='icu_sort_key',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_array = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_array',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_deserialize_sql = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_deserialize_sql',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract',
                function_type=function_type,
                return_type=parse_type('JSON[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_extract_path = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path',
                function_type=function_type,
                return_type=parse_type('JSON[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_extract_path_text = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_path_text',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_extract_string = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_extract_string',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_keys = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[][]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_keys',
                function_type=function_type,
                return_type=parse_type('VARCHAR[][]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_merge_patch = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_merge_patch',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'), parse_type('JSON')),
                parameters=('col0', 'col1'),
                varargs=parse_type('JSON'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_object = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_object',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_pretty = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_pretty',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_quote = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_quote',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_serialize_plan = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_plan',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_plan',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_plan',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_plan',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2', 'col3'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_plan',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2', 'col3', 'col4'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_serialize_sql = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_sql',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_sql',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_sql',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_sql',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2', 'col3'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_serialize_sql',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN'), parse_type('BOOLEAN')),
                parameters=('col0', 'col1', 'col2', 'col3', 'col4'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_structure = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_structure',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_structure',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_type = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'),),
                parameters=('col0',),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    json_value = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='json_value',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                parameters=('col0', 'col1'),
                varargs=None,
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    lcase = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lcase',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts `string` to lower case.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    left = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='left',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'count'),
                varargs=None,
                description='Extracts the left-most count characters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    left_grapheme = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='left_grapheme',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'count'),
                varargs=None,
                description='Extracts the left-most count grapheme clusters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    list_element = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_element',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('list', 'index'),
                varargs=None,
                description='Extract the `index`th (1-based) value from the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    list_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='list_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('list', 'index'),
                varargs=None,
                description='Extract the `index`th (1-based) value from the list.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    lower = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lower',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts `string` to lower case.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    lpad = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='lpad',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('string', 'count', 'character'),
                varargs=None,
                description='Pads the `string` with the `character` on the left until it has `count` characters. Truncates the `string` on the right if it has more than `count` characters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    ltrim = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ltrim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from the left side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ltrim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'characters'),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from the left side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    md5 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='md5',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Returns the MD5 hash of the `string` as a `VARCHAR`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='md5',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Returns the MD5 hash of the `blob` as a `VARCHAR`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    monthname = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='monthname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('DATE'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the month',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='monthname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the month',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='monthname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'),),
                parameters=('ts',),
                varargs=None,
                description='The (English) name of the month',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    nfc_normalize = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='nfc_normalize',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts `string` to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    parse_dirname = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_dirname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('path',),
                varargs=None,
                description='Returns the top-level directory name from the given `path`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_dirname',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('path', 'separator'),
                varargs=None,
                description='Returns the top-level directory name from the given `path`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    parse_dirpath = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_dirpath',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('path',),
                varargs=None,
                description="Returns the head of the `path` (the pathname until the last slash) similarly to Python's `os.path.dirname`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_dirpath',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('path', 'separator'),
                varargs=None,
                description="Returns the head of the `path` (the pathname until the last slash) similarly to Python's `os.path.dirname`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    parse_filename = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_filename',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description="Returns the last component of the `path` similarly to Python's `os.path.basename` function. If `trim_extension` is `true`, the file extension will be removed (defaults to `false`). `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_filename',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'trim_extension'),
                varargs=None,
                description="Returns the last component of the `path` similarly to Python's `os.path.basename` function. If `trim_extension` is `true`, the file extension will be removed (defaults to `false`). `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_filename',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN')),
                parameters=('string', 'trim_extension'),
                varargs=None,
                description="Returns the last component of the `path` similarly to Python's `os.path.basename` function. If `trim_extension` is `true`, the file extension will be removed (defaults to `false`). `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_filename',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BOOLEAN'), parse_type('VARCHAR')),
                parameters=('string', 'trim_extension', 'separator'),
                varargs=None,
                description="Returns the last component of the `path` similarly to Python's `os.path.basename` function. If `trim_extension` is `true`, the file extension will be removed (defaults to `false`). `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    parse_path = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_path',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('path',),
                varargs=None,
                description="Returns a list of the components (directories and filename) in the `path` similarly to Python's `pathlib.parts` function. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='parse_path',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('path', 'separator'),
                varargs=None,
                description="Returns a list of the components (directories and filename) in the `path` similarly to Python's `pathlib.parts` function. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    printf = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='printf',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('format',),
                varargs=parse_type('ANY'),
                description='Formats a `string` using printf syntax.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    regexp_escape = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_escape',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description="Escapes special patterns to turn `string` into a regular expression similarly to Python's `re.escape` function.",
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    regexp_extract = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='If `string` contains the `regex` pattern, returns the capturing group specified by optional parameter `group`; otherwise, returns the empty string. The `group` must be a constant value. If no `group` is given, it defaults to 0. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('string', 'regex', 'group'),
                varargs=None,
                description='If `string` contains the `regex` pattern, returns the capturing group specified by optional parameter `group`; otherwise, returns the empty string. The `group` must be a constant value. If no `group` is given, it defaults to 0. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                parameters=('string', 'regex', 'name_list'),
                varargs=None,
                description='If `string` contains the `regex` pattern, returns the capturing groups as a struct with corresponding names from `name_list`; otherwise, returns a struct with the same keys and empty strings as values. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'group', 'options'),
                varargs=None,
                description='If `string` contains the `regex` pattern, returns the capturing group specified by optional parameter `group`; otherwise, returns the empty string. The `group` must be a constant value. If no `group` is given, it defaults to 0. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR[]'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'name_list', 'options'),
                varargs=None,
                description='If `string` contains the `regex` pattern, returns the capturing groups as a struct with corresponding names from `name_list`; otherwise, returns a struct with the same keys and empty strings as values. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    regexp_extract_all = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract_all',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Finds non-overlapping occurrences of the `regex` in the `string` and returns the corresponding values of the capturing `group`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract_all',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('INTEGER')),
                parameters=('string', 'regex', 'group'),
                varargs=None,
                description='Finds non-overlapping occurrences of the `regex` in the `string` and returns the corresponding values of the capturing `group`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_extract_all',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'group', 'options'),
                varargs=None,
                description='Finds non-overlapping occurrences of the `regex` in the `string` and returns the corresponding values of the capturing `group`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    regexp_replace = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_replace',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'replacement'),
                varargs=None,
                description='If `string` contains the `regex`, replaces the matching part with `replacement`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_replace',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'replacement', 'options'),
                varargs=None,
                description='If `string` contains the `regex`, replaces the matching part with `replacement`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    regexp_split_to_array = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_split_to_array',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='regexp_split_to_array',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'options'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    repeat = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='repeat',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'count'),
                varargs=None,
                description='Repeats the `string` `count` number of times.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    replace = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='replace',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'source', 'target'),
                varargs=None,
                description='Replaces any occurrences of the `source` with `target` in `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    reverse = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='reverse',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Reverses the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    right = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='right',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'count'),
                varargs=None,
                description='Extract the right-most `count` characters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    right_grapheme = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='right_grapheme',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'count'),
                varargs=None,
                description='Extracts the right-most `count` grapheme clusters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    row_to_json = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='row_to_json',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    rpad = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='rpad',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('INTEGER'), parse_type('VARCHAR')),
                parameters=('string', 'count', 'character'),
                varargs=None,
                description='Pads the `string` with the `character` on the right until it has `count` characters. Truncates the `string` on the right if it has more than `count` characters.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    rtrim = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='rtrim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from the right side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='rtrim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'characters'),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from the right side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    sha1 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sha1',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Returns a `VARCHAR` with the SHA-1 hash of the `value`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sha1',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Returns a `VARCHAR` with the SHA-1 hash of the `blob`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    sha256 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sha256',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('value',),
                varargs=None,
                description='Returns a `VARCHAR` with the SHA-256 hash of the `value`',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='sha256',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Returns a `VARCHAR` with the SHA-256 hash of the `blob`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    split = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='split',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'separator'),
                varargs=None,
                description='Splits the `string` along the `separator`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    stats = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='stats',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('expression',),
                varargs=None,
                description='Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    str_split = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='str_split',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'separator'),
                varargs=None,
                description='Splits the `string` along the `separator`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    str_split_regex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='str_split_regex',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='str_split_regex',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'options'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    strftime = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('DATE'), parse_type('VARCHAR')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP'), parse_type('VARCHAR')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP_NS'), parse_type('VARCHAR')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('DATE')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('TIMESTAMP_NS')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strftime',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('TIMESTAMP WITH TIME ZONE'), parse_type('VARCHAR')),
                parameters=('data', 'format'),
                varargs=None,
                description='Converts a `date` to a string according to the format string.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    string_split = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_split',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'separator'),
                varargs=None,
                description='Splits the `string` along the `separator`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    string_split_regex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_split_regex',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_split_regex',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'regex', 'options'),
                varargs=None,
                description='Splits the `string` along the `regex`. A set of optional regex `options` can be set.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    string_to_array = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='string_to_array',
                function_type=function_type,
                return_type=parse_type('VARCHAR[]'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'separator'),
                varargs=None,
                description='Splits the `string` along the `separator`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    strip_accents = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='strip_accents',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Strips accents from `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    substr = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'start'),
                varargs=None,
                description='Extracts substring starting from character `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` characters instead. Note that a `start` value of `1` refers to the first character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substr',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('string', 'start', 'length'),
                varargs=None,
                description='Extracts substring starting from character `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` characters instead. Note that a `start` value of `1` refers to the first character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    substring = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substring',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'start'),
                varargs=None,
                description='Extracts substring starting from character `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` characters instead. Note that a `start` value of `1` refers to the first character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substring',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('string', 'start', 'length'),
                varargs=None,
                description='Extracts substring starting from character `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` characters instead. Note that a `start` value of `1` refers to the first character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    substring_grapheme = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substring_grapheme',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                parameters=('string', 'start'),
                varargs=None,
                description='Extracts substring starting from grapheme clusters `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` grapheme clusters instead. Note that a `start` value of `1` refers to the `first` character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='substring_grapheme',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT'), parse_type('BIGINT')),
                parameters=('string', 'start', 'length'),
                varargs=None,
                description='Extracts substring starting from grapheme clusters `start` up to the end of the string. If optional argument `length` is set, extracts a substring of `length` grapheme clusters instead. Note that a `start` value of `1` refers to the `first` character of the `string`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    to_base = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_base',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER')),
                parameters=('number', 'radix'),
                varargs=None,
                description='Converts `number` to a string in the given base `radix`, optionally padding with leading zeros to `min_length`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_base',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'), parse_type('INTEGER'), parse_type('INTEGER')),
                parameters=('number', 'radix', 'min_length'),
                varargs=None,
                description='Converts `number` to a string in the given base `radix`, optionally padding with leading zeros to `min_length`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    to_base64 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_base64',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Converts a `blob` to a base64 encoded string.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    to_binary = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts the `string` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_binary',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to binary representation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    to_hex = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts the `string` to hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGNUM'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BLOB'),),
                parameters=('blob',),
                varargs=None,
                description='Converts `blob` to `VARCHAR` using hexadecimal encoding.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('BIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UBIGINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('HUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_hex',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('UHUGEINT'),),
                parameters=('value',),
                varargs=None,
                description='Converts the `value` to `VARCHAR` using hexadecimal representation.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    to_json = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='to_json',
                function_type=function_type,
                return_type=parse_type('JSON'),
                parameter_types=(),
                parameters=(),
                varargs=parse_type('ANY'),
                description=None,
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    translate = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='translate',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'from', 'to'),
                varargs=None,
                description='Replaces each character in `string` that matches a character in the `from` set with the corresponding character in the `to` set. If `from` is longer than `to`, occurrences of the extra characters in `from` are deleted.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    trim = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from either side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='trim',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                parameters=('string', 'characters'),
                varargs=None,
                description='Removes any occurrences of any of the `characters` from either side of the `string`. `characters` defaults to `space`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    typeof = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='typeof',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('expression',),
                varargs=None,
                description='Returns the name of the data type of the result of the expression',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    ucase = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='ucase',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts `string` to upper case.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    upper = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='upper',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Converts `string` to upper case.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    url_decode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='url_decode',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Decodes a URL from a representation using Percent-Encoding.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    url_encode = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='url_encode',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARCHAR'),),
                parameters=('string',),
                varargs=None,
                description='Encodes a URL to a representation using Percent-Encoding.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    uuid = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='uuid',
                function_type=function_type,
                return_type=parse_type('UUID'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns a random UUID v4 similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    uuidv4 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='uuidv4',
                function_type=function_type,
                return_type=parse_type('UUID'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns a random UUIDv4 similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    uuidv7 = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='uuidv7',
                function_type=function_type,
                return_type=parse_type('UUID'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns a random UUID v7 similar to this: 019482e4-1441-7aad-8127-eec99573b0a0',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    variant_typeof = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='variant_typeof',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('VARIANT'),),
                parameters=('input_variant',),
                varargs=None,
                description='Returns the internal type of the `input_variant`.',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    vector_type = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='vector_type',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(parse_type('ANY'),),
                parameters=('col',),
                varargs=None,
                description='Returns the VectorType of a given column',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    version = _DuckDBFunctionCall((
            DuckDBFunctionDefinition(
                schema_name='main',
                function_name='version',
                function_type=function_type,
                return_type=parse_type('VARCHAR'),
                parameter_types=(),
                parameters=(),
                varargs=None,
                description='Returns the currently active version of DuckDB in this format: v0.3.2\t',
                comment=None,
                macro_definition=None,
            ),
        ),
        return_category='varchar',
    )
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '__internal_decompress_string': __internal_decompress_string,
        'alias': alias,
        'array_extract': array_extract,
        'array_to_json': array_to_json,
        'bar': bar,
        'base64': base64,
        'bin': bin,
        'chr': chr,
        'concat_ws': concat_ws,
        'current_database': current_database,
        'current_query': current_query,
        'current_schema': current_schema,
        'current_schemas': current_schemas,
        'dayname': dayname,
        'decode': decode,
        'enum_first': enum_first,
        'enum_last': enum_last,
        'enum_range': enum_range,
        'enum_range_boundary': enum_range_boundary,
        'format': format,
        'formatReadableDecimalSize': formatReadableDecimalSize,
        'formatReadableSize': formatReadableSize,
        'format_bytes': format_bytes,
        'gen_random_uuid': gen_random_uuid,
        'hex': hex,
        'icu_collate_af': icu_collate_af,
        'icu_collate_am': icu_collate_am,
        'icu_collate_ar': icu_collate_ar,
        'icu_collate_ar_sa': icu_collate_ar_sa,
        'icu_collate_as': icu_collate_as,
        'icu_collate_az': icu_collate_az,
        'icu_collate_be': icu_collate_be,
        'icu_collate_bg': icu_collate_bg,
        'icu_collate_bn': icu_collate_bn,
        'icu_collate_bo': icu_collate_bo,
        'icu_collate_br': icu_collate_br,
        'icu_collate_bs': icu_collate_bs,
        'icu_collate_ca': icu_collate_ca,
        'icu_collate_ceb': icu_collate_ceb,
        'icu_collate_chr': icu_collate_chr,
        'icu_collate_cs': icu_collate_cs,
        'icu_collate_cy': icu_collate_cy,
        'icu_collate_da': icu_collate_da,
        'icu_collate_de': icu_collate_de,
        'icu_collate_de_at': icu_collate_de_at,
        'icu_collate_dsb': icu_collate_dsb,
        'icu_collate_dz': icu_collate_dz,
        'icu_collate_ee': icu_collate_ee,
        'icu_collate_el': icu_collate_el,
        'icu_collate_en': icu_collate_en,
        'icu_collate_en_us': icu_collate_en_us,
        'icu_collate_eo': icu_collate_eo,
        'icu_collate_es': icu_collate_es,
        'icu_collate_et': icu_collate_et,
        'icu_collate_fa': icu_collate_fa,
        'icu_collate_fa_af': icu_collate_fa_af,
        'icu_collate_ff': icu_collate_ff,
        'icu_collate_fi': icu_collate_fi,
        'icu_collate_fil': icu_collate_fil,
        'icu_collate_fo': icu_collate_fo,
        'icu_collate_fr': icu_collate_fr,
        'icu_collate_fr_ca': icu_collate_fr_ca,
        'icu_collate_fy': icu_collate_fy,
        'icu_collate_ga': icu_collate_ga,
        'icu_collate_gl': icu_collate_gl,
        'icu_collate_gu': icu_collate_gu,
        'icu_collate_ha': icu_collate_ha,
        'icu_collate_haw': icu_collate_haw,
        'icu_collate_he': icu_collate_he,
        'icu_collate_he_il': icu_collate_he_il,
        'icu_collate_hi': icu_collate_hi,
        'icu_collate_hr': icu_collate_hr,
        'icu_collate_hsb': icu_collate_hsb,
        'icu_collate_hu': icu_collate_hu,
        'icu_collate_hy': icu_collate_hy,
        'icu_collate_id': icu_collate_id,
        'icu_collate_id_id': icu_collate_id_id,
        'icu_collate_ig': icu_collate_ig,
        'icu_collate_is': icu_collate_is,
        'icu_collate_it': icu_collate_it,
        'icu_collate_ja': icu_collate_ja,
        'icu_collate_ka': icu_collate_ka,
        'icu_collate_kk': icu_collate_kk,
        'icu_collate_kl': icu_collate_kl,
        'icu_collate_km': icu_collate_km,
        'icu_collate_kn': icu_collate_kn,
        'icu_collate_ko': icu_collate_ko,
        'icu_collate_kok': icu_collate_kok,
        'icu_collate_ku': icu_collate_ku,
        'icu_collate_ky': icu_collate_ky,
        'icu_collate_lb': icu_collate_lb,
        'icu_collate_lkt': icu_collate_lkt,
        'icu_collate_ln': icu_collate_ln,
        'icu_collate_lo': icu_collate_lo,
        'icu_collate_lt': icu_collate_lt,
        'icu_collate_lv': icu_collate_lv,
        'icu_collate_mk': icu_collate_mk,
        'icu_collate_ml': icu_collate_ml,
        'icu_collate_mn': icu_collate_mn,
        'icu_collate_mr': icu_collate_mr,
        'icu_collate_ms': icu_collate_ms,
        'icu_collate_mt': icu_collate_mt,
        'icu_collate_my': icu_collate_my,
        'icu_collate_nb': icu_collate_nb,
        'icu_collate_nb_no': icu_collate_nb_no,
        'icu_collate_ne': icu_collate_ne,
        'icu_collate_nl': icu_collate_nl,
        'icu_collate_nn': icu_collate_nn,
        'icu_collate_noaccent': icu_collate_noaccent,
        'icu_collate_om': icu_collate_om,
        'icu_collate_or': icu_collate_or,
        'icu_collate_pa': icu_collate_pa,
        'icu_collate_pa_in': icu_collate_pa_in,
        'icu_collate_pl': icu_collate_pl,
        'icu_collate_ps': icu_collate_ps,
        'icu_collate_pt': icu_collate_pt,
        'icu_collate_ro': icu_collate_ro,
        'icu_collate_ru': icu_collate_ru,
        'icu_collate_sa': icu_collate_sa,
        'icu_collate_se': icu_collate_se,
        'icu_collate_si': icu_collate_si,
        'icu_collate_sk': icu_collate_sk,
        'icu_collate_sl': icu_collate_sl,
        'icu_collate_smn': icu_collate_smn,
        'icu_collate_sq': icu_collate_sq,
        'icu_collate_sr': icu_collate_sr,
        'icu_collate_sr_ba': icu_collate_sr_ba,
        'icu_collate_sr_me': icu_collate_sr_me,
        'icu_collate_sr_rs': icu_collate_sr_rs,
        'icu_collate_sv': icu_collate_sv,
        'icu_collate_sw': icu_collate_sw,
        'icu_collate_ta': icu_collate_ta,
        'icu_collate_te': icu_collate_te,
        'icu_collate_th': icu_collate_th,
        'icu_collate_tk': icu_collate_tk,
        'icu_collate_to': icu_collate_to,
        'icu_collate_tr': icu_collate_tr,
        'icu_collate_ug': icu_collate_ug,
        'icu_collate_uk': icu_collate_uk,
        'icu_collate_ur': icu_collate_ur,
        'icu_collate_uz': icu_collate_uz,
        'icu_collate_vi': icu_collate_vi,
        'icu_collate_wae': icu_collate_wae,
        'icu_collate_wo': icu_collate_wo,
        'icu_collate_xh': icu_collate_xh,
        'icu_collate_yi': icu_collate_yi,
        'icu_collate_yo': icu_collate_yo,
        'icu_collate_yue': icu_collate_yue,
        'icu_collate_yue_cn': icu_collate_yue_cn,
        'icu_collate_zh': icu_collate_zh,
        'icu_collate_zh_cn': icu_collate_zh_cn,
        'icu_collate_zh_hk': icu_collate_zh_hk,
        'icu_collate_zh_mo': icu_collate_zh_mo,
        'icu_collate_zh_sg': icu_collate_zh_sg,
        'icu_collate_zh_tw': icu_collate_zh_tw,
        'icu_collate_zu': icu_collate_zu,
        'icu_sort_key': icu_sort_key,
        'json_array': json_array,
        'json_deserialize_sql': json_deserialize_sql,
        'json_extract': json_extract,
        'json_extract_path': json_extract_path,
        'json_extract_path_text': json_extract_path_text,
        'json_extract_string': json_extract_string,
        'json_keys': json_keys,
        'json_merge_patch': json_merge_patch,
        'json_object': json_object,
        'json_pretty': json_pretty,
        'json_quote': json_quote,
        'json_serialize_plan': json_serialize_plan,
        'json_serialize_sql': json_serialize_sql,
        'json_structure': json_structure,
        'json_type': json_type,
        'json_value': json_value,
        'lcase': lcase,
        'left': left,
        'left_grapheme': left_grapheme,
        'list_element': list_element,
        'list_extract': list_extract,
        'lower': lower,
        'lpad': lpad,
        'ltrim': ltrim,
        'md5': md5,
        'monthname': monthname,
        'nfc_normalize': nfc_normalize,
        'parse_dirname': parse_dirname,
        'parse_dirpath': parse_dirpath,
        'parse_filename': parse_filename,
        'parse_path': parse_path,
        'printf': printf,
        'regexp_escape': regexp_escape,
        'regexp_extract': regexp_extract,
        'regexp_extract_all': regexp_extract_all,
        'regexp_replace': regexp_replace,
        'regexp_split_to_array': regexp_split_to_array,
        'repeat': repeat,
        'replace': replace,
        'reverse': reverse,
        'right': right,
        'right_grapheme': right_grapheme,
        'row_to_json': row_to_json,
        'rpad': rpad,
        'rtrim': rtrim,
        'sha1': sha1,
        'sha256': sha256,
        'split': split,
        'stats': stats,
        'str_split': str_split,
        'str_split_regex': str_split_regex,
        'strftime': strftime,
        'string_split': string_split,
        'string_split_regex': string_split_regex,
        'string_to_array': string_to_array,
        'strip_accents': strip_accents,
        'substr': substr,
        'substring': substring,
        'substring_grapheme': substring_grapheme,
        'to_base': to_base,
        'to_base64': to_base64,
        'to_binary': to_binary,
        'to_hex': to_hex,
        'to_json': to_json,
        'translate': translate,
        'trim': trim,
        'typeof': typeof,
        'ucase': ucase,
        'upper': upper,
        'url_decode': url_decode,
        'url_encode': url_encode,
        'uuid': uuid,
        'uuidv4': uuidv4,
        'uuidv7': uuidv7,
        'variant_typeof': variant_typeof,
        'vector_type': vector_type,
        'version': version,
    }
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {
        '->>': _DuckDBFunctionCall((
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR[]'),
                            parameter_types=(parse_type('VARCHAR'), parse_type('VARCHAR[]')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR'),
                            parameter_types=(parse_type('JSON'), parse_type('BIGINT')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR'),
                            parameter_types=(parse_type('JSON'), parse_type('VARCHAR')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
                        DuckDBFunctionDefinition(
                            schema_name='main',
                            function_name='->>',
                            function_type=function_type,
                            return_type=parse_type('VARCHAR[]'),
                            parameter_types=(parse_type('JSON'), parse_type('VARCHAR[]')),
                            parameters=('col0', 'col1'),
                            varargs=None,
                            description=None,
                            comment=None,
                            macro_definition=None,
                        ),
            ),
            return_category='varchar',
        ),
    }

class ScalarFunctionNamespace:
    """DuckDB scalar function categories."""
    __slots__ = ()
    Blob: ScalarBlobFunctions = ScalarBlobFunctions()  # noqa: N802
    Boolean: ScalarBooleanFunctions = ScalarBooleanFunctions()  # noqa: N802
    Generic: ScalarGenericFunctions = ScalarGenericFunctions()  # noqa: N802
    Numeric: ScalarNumericFunctions = ScalarNumericFunctions()  # noqa: N802
    Varchar: ScalarVarcharFunctions = ScalarVarcharFunctions()  # noqa: N802
    def __dir__(self) -> list[str]:
        return sorted(name for name in self.__class__.__dict__ if not name.startswith('_'))

class WindowBlobFunctions(_StaticFunctionNamespace):
    """DuckDB window functions returning binary results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'window'
    return_category: ClassVar[str] = 'blob'
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class WindowBooleanFunctions(_StaticFunctionNamespace):
    """DuckDB window functions returning boolean results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'window'
    return_category: ClassVar[str] = 'boolean'
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class WindowGenericFunctions(_StaticFunctionNamespace):
    """DuckDB window functions returning generic results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'window'
    return_category: ClassVar[str] = 'generic'
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class WindowNumericFunctions(_StaticFunctionNamespace):
    """DuckDB window functions returning numeric results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'window'
    return_category: ClassVar[str] = 'numeric'
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class WindowVarcharFunctions(_StaticFunctionNamespace):
    """DuckDB window functions returning string results."""
    __slots__ = ()
    function_type: ClassVar[str] = 'window'
    return_category: ClassVar[str] = 'varchar'
    _IDENTIFIER_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}
    _SYMBOLIC_FUNCTIONS: ClassVar[dict[str, _DuckDBFunctionCall]] = {}

class WindowFunctionNamespace:
    """DuckDB window function categories."""
    __slots__ = ()
    Blob: WindowBlobFunctions = WindowBlobFunctions()  # noqa: N802
    Boolean: WindowBooleanFunctions = WindowBooleanFunctions()  # noqa: N802
    Generic: WindowGenericFunctions = WindowGenericFunctions()  # noqa: N802
    Numeric: WindowNumericFunctions = WindowNumericFunctions()  # noqa: N802
    Varchar: WindowVarcharFunctions = WindowVarcharFunctions()  # noqa: N802
    def __dir__(self) -> list[str]:
        return sorted(name for name in self.__class__.__dict__ if not name.startswith('_'))
