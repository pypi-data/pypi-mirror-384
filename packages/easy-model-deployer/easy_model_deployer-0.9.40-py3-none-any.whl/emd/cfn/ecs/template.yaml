AWSTemplateFormatVersion: '2010-09-09'
Description: Easy Model Deployer model deployment stack for Amazon ECS. The invoke URL can be found in the stack Outputs. Please go to https://github.com/aws-samples/easy-model-deployer for more information.
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to be used for the ECS Endpoint
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets to be used for the ECS Endpoint
  ECSCluster:
    Type: String
    Description: The name of the ECS cluster to be used for the ECS Endpoint
  DNSName:
    Type: String
    Description: The DNS name of the public load balancer. To use HTTPS, create an SSL certificate in AWS Certificate Manager and attach it to the load balancer.
  PublicLoadBalancerListenerArn:
    Type: String
    Description: The listener to be used for the ECS Endpoint
  PublicLoadBalancerSecurityGroup:
    Type: String
    Description: The security group to be used for the ECS Endpoint
  APIRouterSecurityGroup:
    Type: String
    Description: The security group to be used for the API Router
  LambdaDeploymentHelperArn:
    Type: String
    Description: The ARN of the Lambda function for capacity provider association
  LogGroup:
    Type: String
    Description: The log group to be used for the ECS Endpoint
  ECRImageURI:
    Type: String
    Description: The URI of the ECR image to be used for the ECS Endpoint
  InstanceType:
    Type: String
    Default: "g5.xlarge"
    Description: The instance type to be used for the ECS Endpoint
  ModelId:
    Type: String
    Description: The emd model ID to be used for the ECS Endpoint
  ModelTag:
    Type: String
    Default: "dev"
    Description: The model tag to be used for the ECS Endpoint
  FrameWorkType:
    Type: String
    Description: The framework type to be used for the ECS Endpoint
  ServiceType:
    Type: String
    Description: The service type to be used for the ECS Endpoint
  EngineType:
    Type: String
    Description: The engine type to be used for the ECS Endpoint
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: 1
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: The Amazon Machine Image ID used for the cluster
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/amzn2-ami-ecs-gpu-hvm-2.0.20241001-x86_64-ebs/image_id
  ContainerCpu:
    Type: Number
    Default: 4096
    Description: How much CPU to give the container. Please refer https://aws.amazon.com/ec2/instance-types/g5/
  ContainerMemory:
    Type: Number
    Default: 12288
    Description: How much memory in MB to give the container. Please refer https://aws.amazon.com/ec2/instance-types/g5/
  ContainerGpu:
    Type: Number
    Default: 1
    Description: How much GPU to give the container. Please refer https://aws.amazon.com/ec2/instance-types/g5/
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port that the application expects traffic on
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Region:
    Type: String
    Description: Not used currently
  APIKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: API key to be used for invoking the model

Conditions:
  HasAPIKey: !Not [!Equals [!Ref APIKey, ""]]
  IsChinaRegion: !Or
    - !Equals [!Ref "AWS::Region", "cn-north-1"]
    - !Equals [!Ref "AWS::Region", "cn-northwest-1"]

Resources:
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EC2Role
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 5
        MinInstancesInService: 1 # ECS draining hook will maintain instances that are still hosting tasks
        PauseTime: PT2M
        WaitOnResourceSignals: true
        MinSuccessfulInstancesPercent: 100
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref ContainerInstances
        Version: !GetAtt ContainerInstances.LatestVersionNumber
      MinSize: 0
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity
      NewInstancesProtectedFromScaleIn: false
  # The config for each instance that is added to the cluster
  ContainerInstances:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Ref: ECSAMI
        InstanceType:
          Ref: InstanceType
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref ContainerHostSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              VolumeSize: 150
              DeleteOnTermination: true
              Encrypted: true
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            echo ECS_ENABLE_GPU_SUPPORT=true >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region} &
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2Role
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 100
          Status: ENABLED
          # Percentage of cluster reservation to try to maintain
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
        ManagedDraining: ENABLED
  UpdateCapacityProvider:
    Type: Custom::UpdateCapacityProvider
    Properties:
      ServiceToken: !Ref LambdaDeploymentHelperArn
      CapacityProvider: !Ref CapacityProvider

  GetPriorityNumber:
    Type: Custom::GetPriorityNumber
    Properties:
      ServiceToken: !Ref LambdaDeploymentHelperArn
  ConvertDnsName:
    Type: Custom::ConvertDnsName
    Properties:
      ServiceToken: !Ref LambdaDeploymentHelperArn
      ModelName: !Join ['', [!Ref ModelId, '/', !Ref ModelTag]]
  SetApiKey:
    Type: Custom::SetApiKey
    Condition: HasAPIKey
    Properties:
      ServiceToken: !Ref LambdaDeploymentHelperArn
      ModelName: !Join ['', [!Ref ModelId, '/', !Ref ModelTag]]
      APIKey: !Ref APIKey

  ContainerHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EC2 hosts that run containers
      VpcId:
        Ref: VPCID
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - ECSTaskExecutionRole
      - EC2Role
      # - CapacityProviderAssociation
      - ECSAutoScalingGroup
    Properties:
      Family: !Sub '${AWS::StackName}'
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}'
          Memory: !Ref ContainerMemory
          Image: !Ref ECRImageURI
          ResourceRequirements:
            - Type: GPU
              Value: !Ref ContainerGpu
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Name: model-port
              AppProtocol: http
            - ContainerPort: 80
              HostPort: 80
          # Command: [--gpus, all]
          Environment:
            - Name: model_id
              Value: !Ref ModelId
            - Name: model_tag
              Value: !Ref ModelTag
          Essential: 'true'
          LinuxParameters:
            sharedMemorySize: 1024
          healthCheck:
            command: ["CMD-SHELL","echo 'Server is running' || exit 0"]
            interval: 30
            retries: 3
            timeout: 5
            startPeriod: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub '${AWS::StackName}'
          # MountPoints:
          #   - ContainerPath: /opt/tomcat/webapps
          #     SourceVolume: webapps
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSTaskExecutionRole
      - EC2Role
      - UpdateCapacityProvider
    Properties:
      ServiceName: !Sub '${AWS::StackName}'
      Cluster: !Ref ECSCluster
      PlacementStrategies:
        - Field: 'attribute:ecs.availability-zone'
          Type: spread
        - Field: cpu
          Type: binpack
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref Subnets
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: emd-service-connect-namespace
        Services:
          - PortName: model-port
            DiscoveryName: !GetAtt ConvertDnsName.DnsName
            ClientAliases:
              - Port: !Ref ContainerPort
                DnsName: !GetAtt ConvertDnsName.DnsName
            Timeout:
              IdleTimeoutSeconds: 3600
              PerRequestTimeoutSeconds: 3600
  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VPCID

  ServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ServiceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref APIRouterSecurityGroup
      Description: Allow traffic from API router service to model service

  ForceApiRouterDeployment:
    Type: Custom::ForceApiRouterDeployment
    DependsOn: Service
    Properties:
      ServiceToken: !Ref LambdaDeploymentHelperArn

Outputs:
  Model:
    Description: The unique model ID that determines which model will process your request in the OpenAI-compatible API.
    Value: !Join ['', [!Ref ModelId, '/', !Ref ModelTag]]
  BaseURL:
    Description: Please use this URL for the OpenAI-compatible model API, like /v1/chat/completions. To use HTTPS, create an SSL certificate in AWS Certificate Manager and attach it to the load balancer.
    Value: !Join ['', ['http://', !Ref DNSName]]
  ECSServiceConnect:
    Description: Service Connect allows for service-to-service communications with automatic discovery using short names and standard ports.
    Value: !Join ['', ['http://', !GetAtt ConvertDnsName.DnsName, ':', !Ref ContainerPort]]
  ModelAPIKey:
    Condition: HasAPIKey
    Description: "API key for accessing model is securely stored in AWS Secrets Manager and can be managed through the provided link."
    Value: !If
      - IsChinaRegion
      - !Sub "https://console.amazonaws.cn/secretsmanager/secret?name=EMD-APIKey-Secrets&region=${AWS::Region}"
      - !Sub "https://console.aws.amazon.com/secretsmanager/secret?name=EMD-APIKey-Secrets&region=${AWS::Region}"
