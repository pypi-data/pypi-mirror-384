name: Package validation
# Lint, type-check, and test and build the package.
# Inspired by https://github.com/python-semantic-release/python-semantic-release/blob/6e3678a948b62b9af7c4639fa7e199bee5fe8a2e/.github/workflows/validate.yml

on:
  workflow_call:
    inputs:
      python-versions:
        required: false
        type: string
        description: The Python versions to run with (as a JSON array). Defaults to calculating the versions based on the `requires-python` value in `pyproject.toml`.

      lint-os:
        description: The OS version to lint with
        type: string
        required: false
        default: ubuntu-latest
      lint-command:
        description: The command to run in the lint step
        type: string
        required: false
        default: just lint pre-commit

      typecheck-os:
        description: The OS version to type check with
        type: string
        required: false
        default: ubuntu-latest
      typecheck-command:
        description: The command to run in the type check step
        type: string
        required: false
        default: just type-check

      test-oses:
        description: The OS versions to test with (as a JSON array)
        type: string
        required: false
        default: '["ubuntu-latest", "macos-latest", "windows-latest"]'

    outputs:
      version-min:
        description: The minimum Python version to use
        value: ${{ jobs.python-versions.outputs.version-min }}
      version-max:
        description: The maximum Python version to use
        value: ${{ jobs.python-versions.outputs.version-max }}
      version-matrix:
        description: The Python versions to use (as a JSON array)
        value: ${{ jobs.python-versions.outputs.version-matrix }}

      build-artifacts:
        description: The generated build artifacts
        value: ${{ jobs.build.outputs.distribution-artifacts }}

      new-release:
        description: Whether a new release was created
        value: ${{ jobs.build.outputs.new-release }}
      new-version:
        description: The new version of the package
        value: ${{ jobs.build.outputs.new-version }}
      new-tag:
        description: The new tag of the package
        value: ${{ jobs.build.outputs.new-tag }}
      new-is-prerelease:
        description: Whether the new version is a pre-release
        value: ${{ jobs.build.outputs.new-is-prerelease }}

      check-result:
        description: The result of the check job
        value: ${{ jobs.check.outputs.result }}


permissions: {}

env:
  UV_PYTHON_PREFERENCE: only-managed
  UV_FROZEN: true

jobs:
  python-versions:
    name: Setup | Calculate Py versions
    runs-on: ubuntu-latest
    if: ${{ inputs.python-versions == '' }}

    outputs:
      version-min: ${{ inputs.python-versions == '' && steps.version-ranges.outputs.min-version || inputs.python-versions[0] }}
      version-max: ${{ inputs.python-versions == '' && steps.version-ranges.outputs.max-version || inputs.python-versions[-1] }}
      version-matrix: ${{ inputs.python-versions == '' && steps.version-matrix.outputs.latest-python-versions || inputs.python-versions }}

    steps:
      - name: Setup | Checkout repository
        if: ${{ inputs.python-versions == '' }}
        uses: actions/checkout@v5

      - uses: ./.github/actions/setup
        if: ${{ inputs.python-versions == '' }}
        with:
          skip-just: "true"

      - name: Calculate | Get Py version ranges
        if: ${{ inputs.python-versions == '' }}
        id: version-ranges
        run: uv run scripts/get_supported_py_versions.py --mode gh-action pyproject.toml

      - name: Calculate | Get Py version matrix
        if: ${{ inputs.python-versions == '' }}
        id: version-matrix
        uses: snok/latest-python-versions@v1
        with:
          min-version: ${{ steps.version-ranges.outputs.min-version }}
          max-version: ${{ steps.version-ranges.outputs.max-version }}

  lint:
    name: "[Py${{ needs.python-versions.outputs.version-min }}] Lint"
    needs: python-versions
    runs-on: ${{ inputs.lint-os }}

    steps:
      - name: Setup | Checkout repository
        uses: actions/checkout@v5

      - uses: ./.github/actions/setup
        with:
          python-version: ${{ needs.python-versions.outputs.version-min }}
          install-project: "true"
          install-project-with-group: lint

      - name: Setup | Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Lint | Run linters
        run: ${{ inputs.lint-command }}

  typecheck:
    name: "[Py${{ matrix.python-version }}] Type-Check"
    needs: python-versions
    runs-on: ${{ inputs.typecheck-os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.python-versions.outputs.version-matrix) }}

    steps:
    - name: Setup | Checkout repository
      uses: actions/checkout@v5

    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}
        install-project: "true"
        install-project-with-group: typecheck

    - name: Type-Check | Run type-checks
      run: ${{ inputs.typecheck-command }}

  build:
    name: Build
    needs:
      - python-versions
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Checkout repository with history and tags
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup | Force correct release branch on workflow sha
        run: |
          git checkout -B ${{ github.ref_name }}

      - uses: ./.github/actions/setup

      - name: Build | Build next version
        id: version
        env:
          GH_TOKEN: ""
        run: |
          just release-local

      - name: Debug | Note next version
        if: ${{ steps.version.outputs.released == 'true'}}
        run: echo "Next version will be ${{ steps.version.outputs.tag }}"

      - name: Build | Build the package (unversioned)
        if: ${{ steps.version.outputs.released != 'true'}}
        run: just build

      - name: Meta | Set output variables
        id: set-outputs
        run: |
          echo "dist-path=dist/" >> $GITHUB_OUTPUT
          echo "artifact-name=validate-build-artifacts" >> $GITHUB_OUTPUT

      - name: Store artifact | Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-outputs.outputs.artifact-name }}
          path: ${{ steps.set-outputs.outputs.dist-path }}
          retention-days: 30

    outputs:
      distribution-path: ${{ steps.set-outputs.outputs.dist-path }}
      distribution-artifacts: ${{ steps.set-outputs.outputs.artifact-name }}

      new-release: ${{ steps.version.outputs.released }}
      new-version: ${{ steps.version.outputs.version }}
      new-tag: ${{ steps.version.outputs.tag }}
      new-is-prerelease: ${{ steps.version.outputs.is_prerelease }}

  test-all-versions:
    name: "[${{ matrix.os }} | Py${{ matrix.python-version }}] Test (All Py versions)"
    needs:
      - python-versions
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ${{ fromJson(inputs.test-oses)[0] }}
        python-version: ${{ fromJson(needs.python-versions.outputs.version-matrix) }}

    env:
      OS: ${{ matrix.os }}
      DEPS: yes  # TODO: figure out if this is needed

    steps:
    - name: Setup | Checkout repository with history and tags
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        filter: tree:0

    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}
        install-project: "true"
        install-project-with-group: test

    - name: Test | Run tests
      run: |
        mkdir coverage
        just test-cov
      env:
        COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
        CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}

    - name: Store artifact | Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
        path: coverage
        include-hidden-files: true

  test-build-artifact:
    name: "[${{ matrix.os }} | Py${{ matrix.python-version }}] Test build artifacts (All OSes)"
    needs:
      - python-versions
      - build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.test-oses) }}
        python-version:
          - ${{ needs.python-versions.outputs.version-min }}

    env:
      OS: ${{ matrix.os }}
      DEPS: yes  # TODO: figure out if this is needed

    steps:
    - name: Setup | Checkout repository
      uses: actions/checkout@v5

    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}
        install-project: "true"
        install-project-with-group: test

    - name: Get artifact | Get build artifacts
      uses: actions/download-artifact@v5
      with:
        name: ${{ needs.build.outputs.distribution-artifacts }}
        path: ${{ needs.build.outputs.distribution-path }}

    - name: Test | Run tests (with build artifacts)
      run: |
        mkdir coverage
        just test-cov-build-artifact "${{ needs.build.outputs.distribution-path }}"
      env:
        COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
        CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}

    - name: Store artifact | Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-dist-${{ matrix.os }}-py${{ matrix.python-version }}
        path: coverage
        include-hidden-files: true

  coverage:
    name: Process Coverage
    needs:
      - test-all-versions
      - test-build-artifact
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref_name == github.event.repository.default_branch

    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Setup | Checkout repository
        uses: actions/checkout@v5

      - name: Setup | Configure bot user
        id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ secrets.CI_BOT_ID }}
          private-key: ${{ secrets.CI_BOT_PRIVATE_KEY }}

      - name: Setup | Checkout repository as bot user
        uses: actions/checkout@v5
        with:
          token: ${{ steps.setup-bot.outputs.token }}

      - name: Get artifact | Get coverage files
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          pattern: coverage-*

      - name: Process | Generate coverage comment
        id: coverage-comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ steps.setup-bot.outputs.token }}
          MERGE_COVERAGE_FILES: true

      - name: Store artifact | Store merged coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-all
          path: .coverage
          include-hidden-files: true

      - name: Store artifact | Store coverage comment
        uses: actions/upload-artifact@v4
        if: steps.coverage-comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  check:  # This job does nothing and is only used for the branch protection
    name: Check
    needs:
      - lint
      - typecheck
      - build
      - test-build-artifact
      - test-all-versions
      - coverage
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check | Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        id: all-green
        with:
          jobs: ${{ toJSON(needs) }}

    outputs:
      result: ${{ steps.all-green.outputs.result }}
