[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling", "uv-dynamic-versioning" ]

[project]
name = "pytest-lf-skip"
description = "A pytest plugin which makes `--last-failed` skip instead of deselect tests."
readme = "README.md"
authors = [ { name = "Alex Fayers", email = "alex@fayers.com" } ]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = [ "version" ]
dependencies = [ "pytest>=8.3.5" ]

urls.Changelog = 'https://github.com/alexfayers/pytest-lf-skip/blob/main/CHANGELOG.md'
urls.Homepage = 'https://github.com/alexfayers/pytest-lf-skip'
urls.Source = 'https://github.com/alexfayers/pytest-lf-skip'

entry-points.pytest11.pytest_lf_skip = "pytest_lf_skip.plugin"

[dependency-groups]
dev = [
    { include-group = "format" },
    { include-group = "lint" },
    { include-group = "release" },
    { include-group = "test" },
    { include-group = "typecheck" },
]

test = [
    "coverage>=7.8",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14",
]
format = [
    "pyproject-fmt>=2.5.1",
]
lint = [
    "codespell>=2.4.1",
    "ruff>=0.11.5",
]
typecheck = [
    "mypy>=1.15",
]
release = [
    "python-semantic-release>=9.21",
]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.ruff]
line-length = 120

show-fixes = true
lint.select = [ "ALL" ]
lint.extend-ignore = [
    "COM812",  # flake8-commas: Trailing comma missing [conflicts with ruff format]
    "D100",    # pydocstyle: Missing docstring in public module
    "D101",    # pydocstyle: Missing docstring in public class
    "D104",    # pydocstyle: Missing docstring in public package
    "D105",    # pydocstyle: Missing docstring in magic method
    "D107",    # pydocstyle: Missing docstring in `__init__`
    "FIX",     # flake8-fixme
    "PLC0414", # Pylint: Import alias does not rename original package
    "TD002",   # flake8-todos: Missing author in TODO
    "TD003",   # flake8-todos: Missing issue link for this TODO
    "UP040",   # pyupgrade: Type alias uses `TypeAlias` annotation instead of the `type` keyword
]

# Allow more lenient linting rules for scripts
lint.extend-per-file-ignores."scripts/*" = [
    "T201", # flake8-print: Print statement found
]

# Allow more lenient linting rules for tests
lint.extend-per-file-ignores."tests/*" = [
    "ANN001",  # flake8-annotations: Missing type annotation for function argument
    "D103",    # pydocstyle: Missing docstring in public function
    "PLR2004", # Pylint: Magic value used in comparison
    "S101",    # flake8-bandit: Use of `assert` detected
]

lint.extend-safe-fixes = [
    "ANN",    # flake8-annotations
    "EM",     #Â flake8-errmsg
    "TC001",  # flake8-type-checking: Move application import into a type-checking block
    "TC002",  # flake8-type-checking: Move third-party import into a type-checking block
    "TC003",  # flake8-type-checking: Move standard library import into a type-checking block
    "TC004",  # flake8-type-checking: Move import out of type-checking block. Import is used for more than type hinting.
    "TID252", # flake8-tidy-imports: Replace relative imports from parent modules with absolute imports
]

lint.flake8-annotations.allow-star-arg-any = true

lint.isort.combine-as-imports = true
lint.isort.force-sort-within-sections = true
lint.isort.force-wrap-aliases = true
lint.isort.required-imports = [ "from __future__ import annotations" ]

lint.pydocstyle.convention = "google"
lint.pydocstyle.ignore-var-parameters = true

[tool.pyproject-fmt]
indent = 4

[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = "test_*.py"
log_cli_level = "DEBUG"
addopts = [
    "--color=yes",
]

[tool.coverage.paths]
source = [
    "src/pytest_lf_skip/",
    ".venv/**/pytest_lf_skip/",
]

[tool.coverage.report]
skip_empty = true
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
source = [ "src" ]
relative_files = true
context = '${CONTEXT}'

[tool.mypy]
files = [ "src", "tests" ]
python_version = "3.10"

warn_unused_configs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "scripts.*"
follow_imports = "silent"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[tool.semantic_release]
build_command = "just build"
commit_message = "chore(release): {version}"
exclude_commit_patterns = [
    "^:bookmark: Release \\d+\\.\\d+\\.\\d+.+$",
]
no_git_verify = true # bypass pre-commit hooks

[tool.semantic_release.branches.main]
match = "(main|master)"

[tool.semantic_release.commit_parser_options]
parse_squash_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"

[tool.semantic_release.publish]
dist_glob_patterns = [ "dist/*" ]
upload_to_vcs_release = true
