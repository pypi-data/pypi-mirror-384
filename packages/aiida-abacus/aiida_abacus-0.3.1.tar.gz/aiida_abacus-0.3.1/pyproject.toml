[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-abacus"
dynamic = ["version"]  # read from aiida_abacus/src/__init__.py
description = "AiiDA plugin for ABACUS"
authors = [{name = "aiida-abacus team"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.10"
dependencies = [
    "aiida-core>=2.5,<3",
    "aiida-pseudo~=1.7.2",
    "voluptuous",
    "ase",
    "pydantic",
    "tqdm"
]

[project.optional-dependencies]
pre-commit = [
  'pre-commit~=3.5',
  'hatch',
]
docs = [
    "sphinx~=6.2.1",
    "sphinxcontrib-contentui",
    "sphinxemoji",
    "furo",
    "markupsafe>=2.1.1",
    'sphinx-copybutton~=0.5.2',
    'sphinx-book-theme~=1.0.1',
    'sphinx-click~=4.4.0',
    'sphinx-design~=0.6.1',
    'sphinxcontrib-details-directive~=0.1.0',
    'sphinx-autoapi~=3.0.0',
    'myst-parser~=3.0.0',
]
tutorial = [
    "pymatgen",
    "ase-weas-widget",
    "aiida-vasp",
    "sumo",
]
dev = [
    "ruff>=0.12.12",
]

[project.urls]
Source = "https://github.com/MCresearch/aiida-abacus"

[project.entry-points."aiida.data"]
"abacus.orbital" = "aiida_abacus.data.orbital:AtomicOrbitalData"

[project.entry-points."aiida.groups"]
"abacus.orbital_collection" = "aiida_abacus.group.orb_group:AtomicOrbitalCollection"
"abacus.orbital_family" = "aiida_abacus.group.orb_group:AtomicOrbitalFamily"

[project.entry-points."aiida.calculations"]
"abacus.abacus" = "aiida_abacus.calculations:AbacusCalculation"

[project.entry-points."aiida.workflows"]
"abacus.base" = "aiida_abacus.workflows.base:AbacusBaseWorkChain"
"abacus.relax" = "aiida_abacus.workflows.relax:AbacusRelaxWorkChain"
"abacus.band" = "aiida_abacus.workflows.band:AbacusBandWorkChain"

[project.entry-points."aiida.parsers"]
"abacus.abacus" = "aiida_abacus.parsers:AbacusParser"

[project.entry-points."aiida.cmdline.data"]
"abacus" = "aiida_abacus.cli:data_cli"

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
addopts = "--pdbcls=IPython.terminal.debugger:TerminalPdb"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore:Creating AiiDA configuration folder:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:yaml:",
]


[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source = ["src/aiida_abacus"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
ignore = [
  'F403',  # Star imports unable to detect undefined names
  'F405',  # Import may be undefined or defined from star imports
  'PLR0911',  # Too many return statements
  'PLR0912',  # Too many branches
  'PLR0913',  # Too many arguments in function definition
  'PLR0915',  # Too many statements
  'PLR2004',  # Magic value used in comparison
  'RUF005',  # Consider iterable unpacking instead of concatenation
  'RUF012'  # Mutable class attributes should be annotated with `typing.ClassVar`
]
select = [
  'E',  # pydocstyle
  'W',  # pydocstyle
  'F',  # pyflakes
  'I',  # isort
  'N',  # pep8-naming
  'PLC',  # pylint-convention
  'PLE',  # pylint-error
  'PLR',  # pylint-refactor
  'PLW',  # pylint-warning
  'RUF',  # ruff
  'Q',    # flake8-quotes
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

## Hatch configurations

[tool.hatch.version]
path = "src/aiida_abacus/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "docs/",
  "tests/",
]

[tool.hatch.envs.hatch-test]
dependencies = [
    'pgtest~=1.3,>=1.3.1',
    'coverage~=7.0',
    'pytest~=7.0',
    "pytest-cov~=4.1",
    "ipdb"
]

[tool.hatch.envs.hatch-test.scripts]
# These are the efault scripts provided by hatch.
# The have been copied to make the execution more transparent

# This command is run with the command `hatch test`
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
# The three commands below are run with the command `hatch test --coverage`
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff==0.4.3"]

[tool.hatch.envs.hatch-static-analysis.scripts]
# Fixes are executed with `hatch fmt`.
# Checks are executed with `hatch fmt --check`.

format-check = "ruff format --check --config pyproject.toml {args:.}"
format-fix = "ruff format --config pyproject.toml {args:.}"
lint-check = "ruff check --config pyproject.toml {args:.}"
lint-fix = "ruff check --config pyproject.toml --fix --exit-non-zero-on-fix --show-fixes {args:.}"

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.scripts]
build = [
  "make -C docs"
]
