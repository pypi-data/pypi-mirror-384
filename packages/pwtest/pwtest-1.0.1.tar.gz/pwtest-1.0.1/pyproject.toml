[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pwtest"
version = "1.0.1"
description = "基于 Playwright + Pytest + Allure 的 UI 自动化测试框架"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "mofanx", email = "yanwuning@live.cn"}
]
maintainers = [
    {name = "mofanx", email = "yanwuning@live.cn"}
]
keywords = [
    "playwright",
    "pytest",
    "automation",
    "testing",
    "ui-testing",
    "allure",
    "test-framework",
    "e2e-testing",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

# 核心依赖
dependencies = [
    "playwright>=1.54.0",
    "pytest>=8.4.1",
    "pytest-playwright>=0.7.0",
    "loguru>=0.7.3",
    "allure-pytest>=2.15.0",
]

[project.optional-dependencies]
# 开发依赖
dev = [
    "pytest-html>=4.1.1",
    "build>=1.0.0",
    "twine>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

# 完整安装(包含所有可选依赖)
all = [
    "pwtest[dev]",
]

[project.urls]
Homepage = "https://github.com/mofanx/pwtest"
Documentation = "https://github.com/mofanx/pwtest/blob/main/README.md"
Repository = "https://github.com/mofanx/pwtest"
"Bug Reports" = "https://github.com/mofanx/pwtest/issues"
Changelog = "https://github.com/mofanx/pwtest/blob/main/CHANGELOG.md"

# 注意: 不使用 pytest 插件入口点,避免自动加载导致冲突
# 用户需要在项目的 conftest.py 中显式导入: from pwtest.conftest import *

# 命令行工具入口点
[project.scripts]
pwtest = "pwtest.cli:main"

# Setuptools 配置
[tool.setuptools]
packages = ["pwtest", "pwtest.config", "pwtest.utils"]
include-package-data = true

[tool.setuptools.package-data]
pwtest = ["*.ini", "py.typed"]

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--capture=no",
]
markers = [
    "smoke: 冒烟测试用例",
    "regression: 回归测试用例",
    "no_login: 需要全新浏览器实例的测试",
    "slow: 运行缓慢的测试",
]

# Black 代码格式化配置
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # 默认排除目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | examples
)/
'''

# MyPy 类型检查配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "examples/",
    "tests/",
    "build/",
    "dist/",
]

# Coverage 配置
[tool.coverage.run]
source = ["pwtest"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
