# coding: utf-8

"""
    Equinix Fabric API v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from equinix.services.fabricv4.models.connectivity_source import ConnectivitySource
from equinix.services.fabricv4.models.link_aggregation_group import LinkAggregationGroup
from equinix.services.fabricv4.models.virtual_port_configuration import VirtualPortConfiguration
from equinix.services.fabricv4.models.virtual_port_location import VirtualPortLocation
from equinix.services.fabricv4.models.virtual_port_package import VirtualPortPackage
from equinix.services.fabricv4.models.virtual_port_redundancy import VirtualPortRedundancy
from equinix.services.fabricv4.models.virtual_port_service_type import VirtualPortServiceType
from equinix.services.fabricv4.models.virtual_port_type import VirtualPortType
from typing import Optional, Set
from typing_extensions import Self

class VirtualPortPrice(BaseModel):
    """
    Preferences and settings for a virtual port connected to an internet service provider (ISP) or other Equinix platform entity.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="Unique identifier assigned to the virtual port. Either the uuid or the remaining attributes must be supplied.")
    type: Optional[VirtualPortType] = None
    location: Optional[VirtualPortLocation] = None
    lag: Optional[LinkAggregationGroup] = None
    physical_ports_quantity: Optional[StrictInt] = Field(default=1, description="Number of physical ports requested. The defaults is 1.", alias="physicalPortsQuantity")
    bandwidth: Optional[StrictInt] = Field(default=None, description="Aggregated data transfer capacity,  expressed as follows <br> -> Mbps, megabits (1 million bits) per second <br> -> Gbps, gigabits (1 billion bits) per second <br> Bandwidth must be divisible by physicalPortsQuantity.")
    redundancy: Optional[VirtualPortRedundancy] = None
    connectivity_source: Optional[ConnectivitySource] = Field(default=None, alias="connectivitySource")
    service_type: Optional[VirtualPortServiceType] = Field(default=VirtualPortServiceType.MSP, alias="serviceType")
    settings: Optional[VirtualPortConfiguration] = None
    package: Optional[VirtualPortPackage] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["uuid", "type", "location", "lag", "physicalPortsQuantity", "bandwidth", "redundancy", "connectivitySource", "serviceType", "settings", "package"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualPortPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lag
        if self.lag:
            _dict['lag'] = self.lag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redundancy
        if self.redundancy:
            _dict['redundancy'] = self.redundancy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connectivity_source
        if self.connectivity_source:
            _dict['connectivitySource'] = self.connectivity_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualPortPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "type": obj.get("type"),
            "location": VirtualPortLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "lag": LinkAggregationGroup.from_dict(obj["lag"]) if obj.get("lag") is not None else None,
            "physicalPortsQuantity": obj.get("physicalPortsQuantity") if obj.get("physicalPortsQuantity") is not None else 1,
            "bandwidth": obj.get("bandwidth"),
            "redundancy": VirtualPortRedundancy.from_dict(obj["redundancy"]) if obj.get("redundancy") is not None else None,
            "connectivitySource": ConnectivitySource.from_dict(obj["connectivitySource"]) if obj.get("connectivitySource") is not None else None,
            "serviceType": obj.get("serviceType") if obj.get("serviceType") is not None else VirtualPortServiceType.MSP,
            "settings": VirtualPortConfiguration.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "package": VirtualPortPackage.from_dict(obj["package"]) if obj.get("package") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


