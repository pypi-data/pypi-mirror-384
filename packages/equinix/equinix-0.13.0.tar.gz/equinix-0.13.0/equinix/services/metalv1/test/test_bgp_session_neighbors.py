# coding: utf-8

"""
    Metal API

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equinix.services.metalv1.models.bgp_session_neighbors import BgpSessionNeighbors

class TestBgpSessionNeighbors(unittest.TestCase):
    """BgpSessionNeighbors unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BgpSessionNeighbors:
        """Test BgpSessionNeighbors
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BgpSessionNeighbors`
        """
        model = BgpSessionNeighbors()
        if include_optional:
            return BgpSessionNeighbors(
                bgp_neighbors = [
                    equinix.services.metalv1.models.bgp_neighbor_data.BgpNeighborData(
                        address_family = 4, 
                        customer_as = 65000, 
                        customer_ip = '10.32.16.1 (IPv4) or 2604:1380:4111:2700::1 (IPv6)', 
                        href = '', 
                        md5_enabled = True, 
                        md5_password = '', 
                        multihop = True, 
                        peer_as = 65530, 
                        peer_ips = ["169.254.255.1","169.254.255.2"], 
                        routes_in = [{"exact":true,"route":"10.32.16.0/31"}], 
                        routes_out = [{"exact":true,"route":"0.0.0.0/0"}], )
                    ],
                href = ''
            )
        else:
            return BgpSessionNeighbors(
        )
        """

    def testBgpSessionNeighbors(self):
        """Test BgpSessionNeighbors"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
