# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from icat_plus_client.api.logbook_api import LogbookApi


class TestLogbookApi(unittest.TestCase):
    """LogbookApi unit test stubs"""

    def setUp(self) -> None:
        self.api = LogbookApi()

    def tearDown(self) -> None:
        pass

    def test_logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_createfrombase64_post(self) -> None:
        """Test case for logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_createfrombase64_post

        Create an event given a base64 string. It requires the API token. This is used on the spec beamlines from the metadata manager
        """
        pass

    def test_logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_post(self) -> None:
        """Test case for logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_post

        This is used on the spec beamlines from the metadata manager
        """
        pass

    def test_logbook_session_id_event_count_get(self) -> None:
        """Test case for logbook_session_id_event_count_get

        Count events
        """
        pass

    def test_logbook_session_id_event_createfrombase64_post(self) -> None:
        """Test case for logbook_session_id_event_createfrombase64_post

        Create an event given a base64 string
        """
        pass

    def test_logbook_session_id_event_dates_get(self) -> None:
        """Test case for logbook_session_id_event_dates_get

        Lists events dates
        """
        pass

    def test_logbook_session_id_event_get(self) -> None:
        """Test case for logbook_session_id_event_get

        Lists events
        """
        pass

    def test_logbook_session_id_event_page_get(self) -> None:
        """Test case for logbook_session_id_event_page_get

        Gets the number of page where the event is
        """
        pass

    def test_logbook_session_id_event_post(self) -> None:
        """Test case for logbook_session_id_event_post

        Creates an event
        """
        pass

    def test_logbook_session_id_event_put(self) -> None:
        """Test case for logbook_session_id_event_put

        Updates an event
        """
        pass

    def test_logbook_session_id_event_remove_put(self) -> None:
        """Test case for logbook_session_id_event_remove_put

        Flag events as removed
        """
        pass

    def test_logbook_session_id_event_restore_put(self) -> None:
        """Test case for logbook_session_id_event_restore_put

        Flag events as restored by setting removed = false for each event. InvestigationId is mandatory
        """
        pass

    def test_logbook_session_id_events_patch(self) -> None:
        """Test case for logbook_session_id_events_patch

        Updates the tags of a list of events
        """
        pass

    def test_logbook_session_id_stats_count_get(self) -> None:
        """Test case for logbook_session_id_stats_count_get

        Counts number of event for date range
        """
        pass

    def test_logbook_session_id_stats_investigation_get(self) -> None:
        """Test case for logbook_session_id_stats_investigation_get

        Lists statistics on events for each investigation that are allocated in the date range
        """
        pass

    def test_logbook_session_id_tag_get(self) -> None:
        """Test case for logbook_session_id_tag_get

        GET all tags available, (ie used in the investigation or not) for a given logbook including global, beamline specific and investigation specific tags. Tags available but not used are also retrieved.
        """
        pass

    def test_logbook_session_id_tag_post(self) -> None:
        """Test case for logbook_session_id_tag_post

        Create an investigation tag for a given investigationId
        """
        pass

    def test_logbook_session_id_tag_put(self) -> None:
        """Test case for logbook_session_id_tag_put

        Update an investigation tag
        """
        pass


if __name__ == '__main__':
    unittest.main()
