# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from icat_plus_client.models.logbook_filters import LogbookFilters
from icat_plus_client.models.mxsettings import Mxsettings
from icat_plus_client.models.pagination_inner import PaginationInner
from icat_plus_client.models.recently_visited import RecentlyVisited
from icat_plus_client.models.userpreferences_selection import UserpreferencesSelection
from typing import Optional, Set
from typing_extensions import Self

class Userpreferences(BaseModel):
    """
    user's preferences
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    username: StrictStr
    selection: Optional[UserpreferencesSelection] = None
    logbook_filters: Optional[LogbookFilters] = Field(default=None, alias="logbookFilters")
    recently_visited: Optional[List[RecentlyVisited]] = Field(default=None, alias="recentlyVisited")
    mxsettings: Optional[Mxsettings] = None
    is_grouped_by_sample: Optional[StrictBool] = Field(default=None, alias="isGroupedBySample")
    pagination: Optional[List[PaginationInner]] = Field(default=None, description="page size for the different tables")
    __properties: ClassVar[List[str]] = ["_id", "username", "selection", "logbookFilters", "recentlyVisited", "mxsettings", "isGroupedBySample", "pagination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Userpreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selection
        if self.selection:
            _dict['selection'] = self.selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logbook_filters
        if self.logbook_filters:
            _dict['logbookFilters'] = self.logbook_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recently_visited (list)
        _items = []
        if self.recently_visited:
            for _item_recently_visited in self.recently_visited:
                if _item_recently_visited:
                    _items.append(_item_recently_visited.to_dict())
            _dict['recentlyVisited'] = _items
        # override the default output from pydantic by calling `to_dict()` of mxsettings
        if self.mxsettings:
            _dict['mxsettings'] = self.mxsettings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pagination (list)
        _items = []
        if self.pagination:
            for _item_pagination in self.pagination:
                if _item_pagination:
                    _items.append(_item_pagination.to_dict())
            _dict['pagination'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Userpreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "username": obj.get("username"),
            "selection": UserpreferencesSelection.from_dict(obj["selection"]) if obj.get("selection") is not None else None,
            "logbookFilters": LogbookFilters.from_dict(obj["logbookFilters"]) if obj.get("logbookFilters") is not None else None,
            "recentlyVisited": [RecentlyVisited.from_dict(_item) for _item in obj["recentlyVisited"]] if obj.get("recentlyVisited") is not None else None,
            "mxsettings": Mxsettings.from_dict(obj["mxsettings"]) if obj.get("mxsettings") is not None else None,
            "isGroupedBySample": obj.get("isGroupedBySample"),
            "pagination": [PaginationInner.from_dict(_item) for _item in obj["pagination"]] if obj.get("pagination") is not None else None
        })
        return _obj


