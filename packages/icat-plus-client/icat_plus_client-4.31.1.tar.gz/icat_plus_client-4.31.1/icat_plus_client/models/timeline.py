# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Timeline(BaseModel):
    """
    Timeline
    """ # noqa: E501
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    investigation_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="investigationId")
    investigation_name: Optional[StrictStr] = Field(default=None, alias="investigationName")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="datasetName")
    dataset_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="datasetId")
    sample_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sampleId")
    sample_name: Optional[StrictStr] = Field(default=None, alias="sampleName")
    dataset_type: Optional[StrictStr] = Field(default=None, alias="datasetType")
    file_count: Optional[StrictStr] = Field(default=None, alias="__fileCount")
    volume: Optional[StrictStr] = Field(default=None, alias="__volume")
    elapsed_time: Optional[StrictStr] = Field(default=None, alias="__elapsedTime")
    __properties: ClassVar[List[str]] = ["startDate", "endDate", "investigationId", "investigationName", "datasetName", "datasetId", "sampleId", "sampleName", "datasetType", "__fileCount", "__volume", "__elapsedTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Timeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Timeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "investigationId": obj.get("investigationId"),
            "investigationName": obj.get("investigationName"),
            "datasetName": obj.get("datasetName"),
            "datasetId": obj.get("datasetId"),
            "sampleId": obj.get("sampleId"),
            "sampleName": obj.get("sampleName"),
            "datasetType": obj.get("datasetType"),
            "__fileCount": obj.get("__fileCount"),
            "__volume": obj.get("__volume"),
            "__elapsedTime": obj.get("__elapsedTime")
        })
        return _obj


