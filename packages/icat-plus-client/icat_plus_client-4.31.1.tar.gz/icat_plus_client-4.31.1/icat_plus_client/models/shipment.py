# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from icat_plus_client.models.address import Address
from icat_plus_client.models.parcel import Parcel
from typing import Optional, Set
from typing_extensions import Self

class Shipment(BaseModel):
    """
    a shipment
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    investigation_id: Optional[StrictInt] = Field(default=None, alias="investigationId")
    investigation_name: StrictStr = Field(alias="investigationName")
    name: StrictStr
    default_return_address: Optional[Address] = Field(default=None, alias="defaultReturnAddress")
    default_shipping_address: Optional[Address] = Field(default=None, alias="defaultShippingAddress")
    parcels: Optional[List[Parcel]] = None
    __properties: ClassVar[List[str]] = ["_id", "investigationId", "investigationName", "name", "defaultReturnAddress", "defaultShippingAddress", "parcels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_return_address
        if self.default_return_address:
            _dict['defaultReturnAddress'] = self.default_return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_shipping_address
        if self.default_shipping_address:
            _dict['defaultShippingAddress'] = self.default_shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parcels (list)
        _items = []
        if self.parcels:
            for _item_parcels in self.parcels:
                if _item_parcels:
                    _items.append(_item_parcels.to_dict())
            _dict['parcels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "investigationId": obj.get("investigationId"),
            "investigationName": obj.get("investigationName"),
            "name": obj.get("name"),
            "defaultReturnAddress": Address.from_dict(obj["defaultReturnAddress"]) if obj.get("defaultReturnAddress") is not None else None,
            "defaultShippingAddress": Address.from_dict(obj["defaultShippingAddress"]) if obj.get("defaultShippingAddress") is not None else None,
            "parcels": [Parcel.from_dict(_item) for _item in obj["parcels"]] if obj.get("parcels") is not None else None
        })
        return _obj


