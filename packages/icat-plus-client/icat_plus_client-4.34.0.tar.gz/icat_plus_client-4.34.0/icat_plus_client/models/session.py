# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Session(BaseModel):
    """
    Session
    """ # noqa: E501
    session_id: Optional[StrictStr] = Field(default=None, alias="sessionId")
    usernane: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    fullname: Optional[StrictStr] = None
    life_time_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lifeTimeMinutes")
    expiration_time: Optional[StrictStr] = Field(default=None, alias="expirationTime")
    is_administrator: Optional[StrictBool] = Field(default=None, alias="isAdministrator")
    is_instrument_scientist: Optional[StrictBool] = Field(default=None, alias="isInstrumentScientist")
    is_minter: Optional[StrictBool] = Field(default=None, alias="isMinter")
    users_by_prefix: Optional[List[StrictStr]] = Field(default=None, alias="usersByPrefix")
    __properties: ClassVar[List[str]] = ["sessionId", "usernane", "name", "fullname", "lifeTimeMinutes", "expirationTime", "isAdministrator", "isInstrumentScientist", "isMinter", "usersByPrefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sessionId": obj.get("sessionId"),
            "usernane": obj.get("usernane"),
            "name": obj.get("name"),
            "fullname": obj.get("fullname"),
            "lifeTimeMinutes": obj.get("lifeTimeMinutes"),
            "expirationTime": obj.get("expirationTime"),
            "isAdministrator": obj.get("isAdministrator"),
            "isInstrumentScientist": obj.get("isInstrumentScientist"),
            "isMinter": obj.get("isMinter"),
            "usersByPrefix": obj.get("usersByPrefix")
        })
        return _obj


