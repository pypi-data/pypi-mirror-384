# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger

    The version of the OpenAPI document: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from icat_plus_client.models.dataset_document_parameters_inner import DatasetDocumentParametersInner
from icat_plus_client.models.member import Member
from typing import Optional, Set
from typing_extensions import Self

class Investigationlight(BaseModel):
    """
    Investigationlight
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    members: Optional[List[Member]] = None
    doi: Optional[StrictStr] = None
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    release_date: Optional[StrictStr] = Field(default=None, alias="releaseDate")
    name: Optional[StrictStr] = None
    parameters: Optional[List[DatasetDocumentParametersInner]] = None
    summary: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "members", "doi", "startDate", "endDate", "releaseDate", "name", "parameters", "summary", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Investigationlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Investigationlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "members": [Member.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "doi": obj.get("doi"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "releaseDate": obj.get("releaseDate"),
            "name": obj.get("name"),
            "parameters": [DatasetDocumentParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "summary": obj.get("summary"),
            "title": obj.get("title")
        })
        return _obj


