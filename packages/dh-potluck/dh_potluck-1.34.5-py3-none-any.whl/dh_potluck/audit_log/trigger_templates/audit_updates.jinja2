CREATE TRIGGER `{{ trigger_name }}` AFTER UPDATE ON `{{ table_name }}` FOR EACH ROW BEGIN
    DECLARE old_data JSON;
    DECLARE changed_data JSON;
    DECLARE columns TEXT;
    SET old_data = JSON_OBJECT();
    SET changed_data = JSON_OBJECT();
    SELECT GROUP_CONCAT(CONCAT('"', column_name, '"')) INTO columns
        FROM information_schema.columns WHERE table_name = '{{ table_name }}';

    {% for column in column_names %}
        {# Guard against accessing columns that are dropped during migrations, but haven't yet
           been removed from this trigger. #}
        IF LOCATE('"{{ column }}"', columns) > 0 THEN
            {# Build up a JSON object of old data. #}
            SET old_data = JSON_SET(old_data, '$.{{ column }}', OLD.{{ column }});

            {# Build up a JSON object of only changed data. This makes the audit log table a bit easier
               to use, and cuts down on space. #}
            IF NOT (NEW.{{ column }} <=> OLD.{{ column }}) THEN
                SET changed_data = JSON_SET(changed_data, '$.{{ column }}', NEW.{{ column }});
            END IF;
        END IF;
    {% endfor %}

    INSERT INTO audit_log SET
        timestamp=CURRENT_TIMESTAMP,
        {# If updated_at remains unchanged, then we assume the query was executed outside of the
           SQLAlchemy ORM (i.e. via conn.execute() or a manual SQL query). Therefore, the change
           can't be attributed to any end user and we log the MySQL user instead.

           The above assumption may not be true in all cases, but due to the lack of information
           available in MySQL triggers about the origin of the query, it is the best we can do. #}
        updated_by_type=IF(OLD.updated_at = NEW.updated_at, 'mysql', NEW.updated_by_type),
        updated_by_id=IF(OLD.updated_at = NEW.updated_at, SUBSTRING_INDEX(USER(), '@', 1), NEW.updated_by_id),
        updated_by_ip=IF(OLD.updated_at = NEW.updated_at, SUBSTRING_INDEX(USER(), '@', -1), NEW.updated_by_ip),
        table_name='{{ table_name }}',
        object_id=NEW.id,
        operation='update',
        old_data=old_data,
        changed_data=changed_data;
END
