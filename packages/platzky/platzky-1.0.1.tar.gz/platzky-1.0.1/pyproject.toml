[tool.poetry]
name = "platzky"
version = "1.0.1"
description = "Not only blog engine"
authors = []
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
Flask = "3.0.3"
PyYAML = "^6.0"
Flask-Babel = "^4.0.0"
Flask-WTF = "^1.2.1"
gql = "^3.4.0"
aiohttp = "^3.9.5"
Flask-Minify = "^0.42"
google-cloud-storage = "^2.5.0"
humanize = "^4.9.0"
pydantic = "^2.7.1"
deprecation = "^2.1.0"
pygithub = "^2.6.1"
pymongo = "^4.7.0"
sphinx = {version = "^8.0.0", optional = true}
sphinx-rtd-theme = {version = "^3.0.0", optional = true}
tomli = {version = "^2.0.0", optional = true}
myst-parser = {version = "^4.0.0", optional = true}
opentelemetry-api = {version = "^1.27.0", optional = true}
opentelemetry-sdk = {version = "^1.27.0", optional = true}
opentelemetry-instrumentation-flask = {version = "^0.48b0", optional = true}
opentelemetry-instrumentation-logging = {version = "^0.48b0", optional = true}
opentelemetry-exporter-otlp-proto-grpc = {version = "^1.27.0", optional = true}

[tool.poetry.extras]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
    "tomli"
]
telemetry = [
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-instrumentation-flask",
    "opentelemetry-instrumentation-logging",
    "opentelemetry-exporter-otlp-proto-grpc"
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
coverage = "^7.5.1"
pytest-cov = "^5.0.0"
freezegun = "^1.2.2"
black = "^24.8.0"
ruff = "^0.4.4"
pyright = "^1.1.364"
beautifulsoup4 = "^4.12.3"
python-semantic-release = "^9.8.0"
interrogate = "^1.7.0"
opentelemetry-api = "^1.27.0"
opentelemetry-sdk = "^1.27.0"
opentelemetry-instrumentation-flask = "^0.48b0"
opentelemetry-instrumentation-logging = "^0.48b0"
opentelemetry-exporter-otlp-proto-grpc = "^1.27.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "tests/*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@abc.abstractmethod"
]
fail_under = 70
show_missing = true

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportMissingParameterType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportUnusedFunction = false
reportUnnecessaryTypeIgnoreComment = true
reportUntypedClassDecorator = false
reportUnusedClass = false
reportUntypedBaseClass = false

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
show-fixes = true
lint.select = [
    "I", # isort
    "F", # Pyflakes
    "E", # pycodestyle Error
    "W", # pycodestyle Warning
    "RUF", # Ruff-specific rules
]
lint.ignore = []

[tool.pytest.ini_options]
markers = [
    "skip_coverage: skip coverage for this test"
]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "poetry build"
dist_path = "dist/"
upload_to_release = true
remove_dist = false
commit_author = "semantic-release <semantic-release>"
commit_message = "chore(release): {version}"
tag_format = "{version}"
commit_parser = "conventional"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic_release.remote]
type = "github"

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.interrogate]
fail-under = 20
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-private = true
ignore-semiprivate = false
exclude = ["tests", "docs"]
