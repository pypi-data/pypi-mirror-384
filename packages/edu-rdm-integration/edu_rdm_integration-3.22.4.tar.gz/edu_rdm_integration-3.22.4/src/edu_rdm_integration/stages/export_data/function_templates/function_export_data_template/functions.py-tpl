from typing import (
    TYPE_CHECKING,
    Optional,
)

from edu_rdm_integration.core.consts import (
    REGIONAL_DATA_MART_INTEGRATION_EXPORTING_DATA,
)
from edu_rdm_integration.rdm_entities.models import (
    RDMEntityEnum,
)

from {{ strategy.function_class_module }} import (
    {{ strategy.function_class_name }},
)

from {{ function_python_path }}.helpers import (
    {{ camel_case_function_name }}FunctionHelper,
)
from {{ function_python_path }}.results import (
    {{ camel_case_function_name }}FunctionResult,
)
from {{ function_python_path }}.validators import (
    {{ camel_case_function_name }}FunctionValidator,
)


if TYPE_CHECKING:
    from m3_db_utils.models import (
        ModelEnumValue,
    )


class {{ camel_case_function_name }}Function({{ strategy.function_class_name }}):
    """Функция "{{ function_verbose_name }}"."""

    @classmethod
    def _prepare_uuid(cls) -> Optional[str]:
        """Получение UUID класса. Используется при регистрации сущности в базе данных.

        Если ничего не возвращает, то регистрация в БД не будет произведена.
        """
        return '{{ strategy.function_uuid }}'

    @classmethod
    def _prepare_verbose_name(cls) -> str:
        """Полное наименование для дальнейшей регистрации и отображения пользователю."""
        return 'Функция "{{ function_verbose_name }}"'

    @classmethod
    def _prepare_entities(cls) -> list['ModelEnumValue']:
        """Формирование списка ключей модели-перечисления сущностей."""
        entities = [
            RDMEntityEnum.,
        ]

        return entities

    @classmethod
    def _prepare_tags(cls) -> list[str]:
        """Список тегов, по которым сущность можно будет осуществлять поиск."""
        tags = [
            REGIONAL_DATA_MART_INTEGRATION_EXPORTING_DATA,
        ]

        return tags

    def _prepare_helper_class(self) -> type[{{ camel_case_function_name }}FunctionHelper]:
        """Возвращает класс помощника функции."""
        return {{ camel_case_function_name }}FunctionHelper

    def _prepare_validator_class(self) -> type[{{ camel_case_function_name }}FunctionValidator]:
        """Возвращает класс валидатора функции."""
        return {{ camel_case_function_name }}FunctionValidator

    def _prepare_result_class(self) -> type[{{ camel_case_function_name }}FunctionResult]:
        """Возвращает класс результата функции."""
        return {{ camel_case_function_name }}FunctionResult
