[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-security-framework"
version = "1.2.8"
description = "Universal security framework for microservices with SSL/TLS, authentication, authorization, and rate limiting. CRITICAL FIX: SecurityManager now loads client certificates for mTLS authentication even with verify=false. Fixed SSL configuration validation to handle None values properly, resolving embed_client and mcp_proxy_adapter failures. Fixed MCP Proxy Adapter JSON-RPC authentication issue with null roles_file and SSL verify=false handling. Requires cryptography>=42.0.0 for certificate operations."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Vasiliy Zdanovskiy", email = "vasilyvz@gmail.com"}
]
maintainers = [
    {name = "Vasiliy Zdanovskiy", email = "vasilyvz@gmail.com"}
]
keywords = ["security", "authentication", "authorization", "ssl", "tls", "microservices", "fastapi", "flask"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
]
requires-python = ">=3.8"
dependencies = [
    "cryptography>=42.0.0",
    "pydantic>=1.8.0,<3.0.0",
    "PyJWT>=2.0.0",
    "click>=8.0.0",
    "typing-extensions>=4.0.0",
    "packaging>=20.0",
]

[project.optional-dependencies]
fastapi = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
]
flask = [
    "flask>=2.0.0",
    "werkzeug>=2.0.0",
]
django = [
    "django>=3.2.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "tox>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.8.0",
    "httpx>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/maverikod/mcp-security-framework"
Documentation = "https://mcp-security-framework.readthedocs.io/"
Repository = "https://github.com/maverikod/mcp-security-framework"
"Bug Tracker" = "https://github.com/maverikod/mcp-security-framework/issues"
"Security Policy" = "https://github.com/maverikod/mcp-security-framework/security/policy"

[project.scripts]
mcp-security = "mcp_security_framework.cli.security_cli:security_cli"
mcp-cert = "mcp_security_framework.cli.cert_cli:cert_cli"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"mcp_security_framework" = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_security_framework"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cryptography.*",
    "pydantic.*",
    "PyJWT.*",
    "click.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mcp_security_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312, lint, docs
isolated_build = True

[testenv]
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-asyncio>=0.21.0
    httpx>=0.24.0
commands =
    pytest {posargs:tests} --cov=mcp_security_framework --cov-report=term-missing

[testenv:lint]
deps =
    black>=22.0.0
    isort>=5.10.0
    flake8>=5.0.0
    mypy>=1.0.0
commands =
    black --check --diff src tests
    isort --check-only --diff src tests
    flake8 src tests
    mypy src

[testenv:docs]
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.0.0
    myst-parser>=0.18.0
commands =
    sphinx-build -b html docs docs/_build/html
"""
