jinx_name: "brainblast"
description: "Execute an advanced chunked search on command history"
inputs:
  - search_query: "" # Required search terms.
  - history_db_path: "~/npcsh_history.db" # Path to the command history database.
steps:
  - name: "execute_brainblast"
    engine: "python"
    code: |
      import os
      import traceback
      from npcpy.memory.command_history import CommandHistory
      from npcpy.memory.search import execute_brainblast_command
      
      search_query = context.get('search_query')
      history_db_path = context.get('history_db_path')
      output_messages = context.get('messages', [])
      
      if not search_query or not search_query.strip():
          context['output'] = "Usage: /brainblast <search_terms>"
          context['messages'] = output_messages
          exit()
      
      command_history = context.get('command_history')
      if not command_history:
          try:
              command_history = CommandHistory(os.path.expanduser(history_db_path))
              context['command_history'] = command_history # Add to context for potential reuse
          except Exception as e:
              context['output'] = f"Error connecting to command history: {e}"
              context['messages'] = output_messages
              exit()
      
      try:
          # The original handler passed **kwargs, so we pass current context
          # The execute_brainblast_command might filter out 'messages' itself
          result = execute_brainblast_command(
                                      command=search_query,
                                      command_history=command_history,
                                      **{k:v for k,v in context.items() if k != 'messages'}) # Exclude messages if not expected
          
          if isinstance(result, dict):
              context['output'] = result.get('output', 'Brainblast search executed.')
              context['messages'] = result.get('messages', output_messages)
          else:
              context['output'] = str(result)
              context['messages'] = output_messages
      except Exception as e:
          traceback.print_exc()
          context['output'] = f"Error executing brainblast command: {e}"
          context['messages'] = output_messages