# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: metalstack/infra/v2/switch.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import metalstack.infra.v2.switch_pb2 as metalstack_dot_infra_dot_v2_dot_switch__pb2


class SwitchService(Protocol):
    async def get(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def register(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def heartbeat(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class SwitchServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: SwitchService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/metalstack.infra.v2.SwitchService/Get": Endpoint.unary(
                    method=MethodInfo(
                        name="Get",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get,
                ),
                "/metalstack.infra.v2.SwitchService/Register": Endpoint.unary(
                    method=MethodInfo(
                        name="Register",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register,
                ),
                "/metalstack.infra.v2.SwitchService/Heartbeat": Endpoint.unary(
                    method=MethodInfo(
                        name="Heartbeat",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.heartbeat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.infra.v2.SwitchService"


class SwitchServiceClient(ConnectClient):
    async def get(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Get",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def register(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Register",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def heartbeat(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Heartbeat",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class SwitchServiceSync(Protocol):
    def get(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def register(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def heartbeat(self, request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest, ctx: RequestContext) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class SwitchServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: SwitchServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/metalstack.infra.v2.SwitchService/Get": EndpointSync.unary(
                    method=MethodInfo(
                        name="Get",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get,
                ),
                "/metalstack.infra.v2.SwitchService/Register": EndpointSync.unary(
                    method=MethodInfo(
                        name="Register",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register,
                ),
                "/metalstack.infra.v2.SwitchService/Heartbeat": EndpointSync.unary(
                    method=MethodInfo(
                        name="Heartbeat",
                        service_name="metalstack.infra.v2.SwitchService",
                        input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
                        output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.heartbeat,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.infra.v2.SwitchService"


class SwitchServiceClientSync(ConnectClientSync):
    def get(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Get",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceGetResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def register(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Register",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceRegisterResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def heartbeat(
        self,
        request: metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Heartbeat",
                service_name="metalstack.infra.v2.SwitchService",
                input=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatRequest,
                output=metalstack_dot_infra_dot_v2_dot_switch__pb2.SwitchServiceHeartbeatResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
