# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: metalstack/admin/v2/ip.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import metalstack.admin.v2.ip_pb2 as metalstack_dot_admin_dot_v2_dot_ip__pb2


class IPService(Protocol):
    async def list(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class IPServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: IPService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/metalstack.admin.v2.IPService/List": Endpoint.unary(
                    method=MethodInfo(
                        name="List",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.admin.v2.IPService"


class IPServiceClient(ConnectClient):
    async def list(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="List",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class IPServiceSync(Protocol):
    def list(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class IPServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: IPServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/metalstack.admin.v2.IPService/List": EndpointSync.unary(
                    method=MethodInfo(
                        name="List",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.admin.v2.IPService"


class IPServiceClientSync(ConnectClientSync):
    def list(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="List",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
