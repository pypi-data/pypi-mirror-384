# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

[build-system]
requires = [
    "scikit-build-core>=0.11.1",
    "setuptools-scm>=8.3.1",
    "pybind11>=3.0.0",
    "mqt.core~=3.3.1",
]
build-backend = "scikit_build_core.build"

[project]
name = "mqt.qudits"
description = "A Framework For Mixed-Dimensional Qudit Quantum Computing"
readme = "README.md"
authors = [
    { name = "Kevin Mato", email = "kevin.mato@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de"},
]

keywords = ["MQT", "quantum-computing", "design-automation", "qudits"]
license = { file = "LICENSE.md" }

classifiers = [
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24; python_version < '3.12'",
    "numpy>=1.26; python_version >= '3.12'",
    "numpy>=2.1; python_version >= '3.13'",
    "numpy>=2.3.2; python_version >= '3.14'",
    "networkx>=3.0",
    "scipy>=1.10; python_version < '3.12'",
    "scipy>=1.12; python_version >= '3.12'",
    "scipy>=1.15; python_version >= '3.13'",
    "scipy>=1.16.1; python_version >= '3.14'",
    "h5py>=3.8; python_version >= '3.11'",
    "h5py>=3.12.1; python_version >= '3.12'",
    "h5py>=3.15.0; python_version >= '3.14'",
    "tensornetwork>=0.4",
    "matplotlib>=3.7; python_version < '3.12'",
    "matplotlib>=3.8; python_version >= '3.12'",
    "matplotlib>=3.10; python_version >= '3.13'",
    "matplotlib>=3.10.5; python_version >= '3.14'",
    "typing-extensions>=4.1",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/munich-quantum-toolkit/qudits"
Documentation = "https://mqt.readthedocs.io/projects/qudits"
Issues = "https://github.com/munich-quantum-toolkit/qudits/issues"
Discussions = "https://github.com/munich-quantum-toolkit/qudits/discussions"

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"

# Set the wheel install directory
wheel.install-dir = "mqt/qudits"

# Set required Ninja version
ninja.version = ">=1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}/{build_type}"

# Explicitly set the package directory
wheel.packages = ["python/mqt"]

# Only build the Python bindings target
build.targets = ["mqt-qudits-bindings"]

# Only install the Python package component
install.components = ["mqt-qudits_Python"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["python/mqt/qudits/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests",
]

[tool.scikit-build.cmake.define]
BUILD_MQT_QUDITS_TESTS = "OFF"
BUILD_MQT_QUDITS_BINDINGS = "ON"


[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.check-sdist]
sdist-only = ["python/mqt/core/_version.py"]
git-only = [
    "docs/*",
    "extern/*",
    "test/*",
]


[tool.setuptools_scm]
write_to = "python/mqt/qudits/_version.py"


[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["test/python"]
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--showlocals",
  "--numprocesses=auto", # Automatically use all available CPU cores for parallel testing
]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:.*datetime\.datetime\.utcfromtimestamp.*:DeprecationWarning:',
]


[tool.coverage]
run.source = ["mqt.qudits"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
]
run.disable_warnings = [
  "no-sysmon",
]


[tool.mypy]
files = ["python/mqt", "test/python", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/python"]
python_version = "3.10"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true


[tool.check-wheel-contents]
ignore = ["W002"]  # Triggers on __init__.py's


[tool.ruff]
line-length = 120
namespace-packages = ["mqt"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PD",          # pandas-vet
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TC",          # flake8-type-checking
    "TID251",      # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "S101",    # Use of assert detected
    "S404",    # `subprocess` module is possibly insecure
    "D10",     # Missing docstrings
]
future-annotations = true

[tool.ruff.lint.isort]
known-first-party = ["mqt.qudits"]

[tool.ruff.lint.per-file-ignores]
"test/python/**" = ["T20", "ANN"]
"python/mqt/qudits/visualisation/**" = ["T20"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "PYI021"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
    "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]
[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
mone = "mone"


[tool.repo-review]
ignore = ["GH200"]


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux*"
archs = "auto64"
test-groups = ["test"]
test-command = "pytest {project}/test/python"
build-frontend = "build[uv]"
enable = ["cpython-freethreading"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"
test-skip = [
  "cp3*t-*", # no freethreading qiskit wheels
  "cp*-win_arm64", # no numpy, qiskit, ... wheels
]

[tool.cibuildwheel.linux]
environment = { DEPLOY="ON" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel>=1.7.3"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel} --namespace-pkg mqt"
environment = { CMAKE_ARGS = "-T ClangCL" }

[tool.uv]
reinstall-package = ["mqt.qudits"]

[dependency-groups]
build = [
    "scikit-build-core>=0.11.1",
    "setuptools-scm>=8.3.1",
    "pybind11>=3.0.0",
    "mqt.core~=3.3.1",
]
docs = [
    "furo>=2024.8.6",
    "setuptools-scm>=8.3.1",
    "sphinx-autoapi>=3.6.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinxcontrib-bibtex>=2.6.3",
    "sphinxcontrib-svg2pdfconverter>=1.3.0",
    "sphinxext-opengraph>=0.10.0",
    "ipykernel>=6.29.5",
    "nbsphinx>=0.9.7",
    "sphinx-autodoc-typehints>=2.3.0",
    "myst-nb>=1.2.0",
    "sphinx_inline_tabs>=2023.4.21",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>=3.7.0",
]
dev = [
    {include-group = "build"},
    {include-group = "docs"},
    {include-group = "test"},
]
