Metadata-Version: 2.4
Name: pgamit
Version: 1.2.45
Summary: A Python wrapper to parallelize GAMIT executions
Home-page: https://github.com/demiangomez/Parallel.GAMIT
Author: Demián D. Gómez
Author-email: "Demián D. Gómez" <demiang@gmail.com>
Maintainer-email: "Demián D. Gómez" <demiang@gmail.com>, "Shane Grigsby (espg)" <refuge@rocktalus.com>
License: BSD 3-Clause License
        
        Copyright (c) 2024, Demian Gomez
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Homepage, https://github.com/demiangomez/Parallel.GAMIT
Project-URL: Bug Tracker, https://github.com/demiangomez/Parallel.GAMIT/issues
Keywords: GAMIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy==1.26.4
Requires-Dist: pandas
Requires-Dist: tqdm==4.66.5
Requires-Dist: dispy
Requires-Dist: psycopg2-binary==2.9.9
Requires-Dist: pycos
Requires-Dist: country-converter
Requires-Dist: earthscope-cli==0.8.2
Requires-Dist: earthscope-sdk==0.2.0
Requires-Dist: basemap==1.4.0
Requires-Dist: cryptography==44.0.1
Requires-Dist: dirsync>=2.2.4
Requires-Dist: geopy==2.4.1
Requires-Dist: usgs-libcomcat
Requires-Dist: matplotlib>=2.0.0
Requires-Dist: munch==2.5.0
Requires-Dist: netifaces==0.10.9
Requires-Dist: networkx
Requires-Dist: paramiko==3.4.0
Requires-Dist: psutil>=5.6.3
Requires-Dist: pysftp==0.2.9
Requires-Dist: requests==2.32.4
Requires-Dist: scandir>=1.6
Requires-Dist: scikit-learn>=1.1
Requires-Dist: scipy>=1.2.0
Requires-Dist: simplekml==1.3.6
Requires-Dist: xmltodict==0.13.0
Requires-Dist: scikit-image
Requires-Dist: shapely
Requires-Dist: obspy
Dynamic: license-file

# Parallel.GAMIT
## A Python wrapper to manage GNSS data and metadata and parallelize GAMIT executions
### Author: Demián D. Gómez

Parallel.GAMIT (PGAMIT) is a Python software solution for parallel GNSS processing of large regional or global networks. It incorporates a metadata and RINEX data management tool that guarantees a consistent archive. It relies on Postgres SQL (https://www.postgresql.org/) to store station metadata and the GPSPACE Precise-Point-Positioning (PPP) software (see installation instructions) to obtain reliable daily a-priori coordinates for GAMIT.

The software can be installed as a Python package (see `INSTALL.md`) allowing to import modules to perform time series analysis and extraction of trajectory parameters from the database.

PGAMIT also includes a backend (see branch web-ui-backend) and web frontend (see branch web-ui-frontend) that can be easily deployed to edit station related metadata (such as observation files and pictures) and processing metadata. The backend was developed in django and the frontend was developed using node.js.

PGAMIT uses dispy (https://github.com/pgiri/dispy) to create Python pickles that are sent to local or remote nodes for execution. PGAMIT has the ability to split a network of GNSS stations into subnetworks for processing in GAMIT (when the network is larger than 50 stations, depending on PGAMIT's configuration). The parallel execution is performed per day-subnetwork. In other words, a GAMIT pickle is built for each subnetwork-day being processed and sent to the available nodes. At the end of each PGAMIT run, the subnetworks are combined with GLOBK and inserted as records in the Postgres database for later use. Some routines (such as the SINEX parser) are modified versions of the code from @softwarespartan (https://github.com/softwarespartan).

Some of the tasks that PGAMIT can perform include:

- Scan a directory structure containing RINEX files and add them to the Postgres database.
- Manage station metadata in GAMIT's station info format with consistency check of the records.
- Add new RINEX data to the database by geolocation, i.e. the data is incorporated not by station name but by running PPP and finding the corresponding station in the DB. This avoids problems with duplicate station codes and misidentified RINEX files.
- Handle ocean loading coefficients to correct the PPP and GAMIT coordinates.
- Plot PPP time series using Bevis and Brown's (2014) extended trajectory model.
- Manage (i.e. add, merge, delete) GNSS stations.
- Parse zenith tropospheric delays and store them in the database.
- Stack the GAMIT solutions to produce regional or global reference frames following Bevis and Brown's (2014) and Gómez et al (2022).
- Station name duplicate-tolerance by using a three-letter network code. Although this is not supported by GAMIT, PGAMIT converts duplicate station codes (stored in different networks) to unique IDs that are used during processing, which are later converted back to the original names after the GLOBK combination of the subnetworks.
- Because all the information is stored in a relational database, PGAMIT can handle very large datasets easily (it has been tested with ~ 14M station-days but Postgres can easily handle more than 100 million records). Also, the relational database guarantees then consistency of the data and does not allow accidental duplicates in metadata.

