Metadata-Version: 2.4
Name: dcisionai-optimization
Version: 1.0.0
Summary: Optimization Intelligence for AI Workflows via Model Context Protocol (MCP)
Home-page: https://github.com/dcisionai/dcisionai-mcp-platform
Author: DcisionAI
Author-email: DcisionAI <contact@dcisionai.com>
Maintainer-email: DcisionAI <contact@dcisionai.com>
License: MIT
Project-URL: Homepage, https://www.dcisionai.com
Project-URL: Documentation, https://docs.dcisionai.com
Project-URL: Repository, https://github.com/dcisionai/dcisionai-mcp-platform
Project-URL: Bug Tracker, https://github.com/dcisionai/dcisionai-mcp-platform/issues
Project-URL: Changelog, https://github.com/dcisionai/dcisionai-mcp-platform/blob/main/CHANGELOG.md
Keywords: optimization,mathematical-programming,mcp,model-context-protocol,ai,artificial-intelligence,decision-making,operations-research,linear-programming,manufacturing,healthcare,retail,marketing,financial,logistics,energy
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Office/Business :: Scheduling
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: mcp>=1.0.0
Requires-Dist: requests>=2.28.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: scipy>=1.9.0
Requires-Dist: pandas>=1.5.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyyaml>=6.0.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: httpx>=0.24.0
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: asyncio-mqtt>=0.13.0
Requires-Dist: websockets>=11.0.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.0.0
Requires-Dist: typer>=0.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# DcisionAI MCP Server

> **Optimization Intelligence for AI Workflows**

The DcisionAI MCP Server provides optimization capabilities through the Model Context Protocol (MCP), enabling AI agents to solve complex optimization problems across multiple industries.

## üöÄ **Features**

- **7 Industry Workflows**: Manufacturing, Healthcare, Retail, Marketing, Financial, Logistics, Energy
- **Qwen 30B Integration**: Advanced mathematical optimization
- **Real-Time Results**: Actual optimization solutions with mathematical proofs
- **MCP Protocol**: Seamless integration with AI development environments

## üì¶ **Installation**

### **From PyPI (Coming Soon)**
```bash
pip install dcisionai-optimization
```

### **From Source**
```bash
cd mcp-server
pip install -e .
```

## üîß **Quick Start**

### **1. Start the MCP Server**
```bash
cd mcp-server/src
python mcp_server.py
```

### **2. Configure Your IDE**
Add to your MCP configuration:
```json
{
  "mcpServers": {
    "dcisionai-optimization": {
      "command": "python",
      "args": ["-m", "dcisionai_mcp_server.robust_mcp"]
    }
  }
}
```

### **3. Use in Your AI Agent**
```python
# Example: Optimize manufacturing production
result = mcp.execute_workflow(
    industry="manufacturing",
    workflow_id="production_planning"
)
```

## üõ† **Available Tools**

- `classify_intent` - Identify optimization problem type
- `analyze_data` - Assess data readiness for optimization
- `build_model` - Create mathematical optimization model
- `solve_optimization` - Find optimal solution
- `get_workflow_templates` - Get available industry workflows
- `execute_workflow` - Run complete optimization workflow

## üìö **Documentation**

- [API Reference](docs/api-reference.md)
- [Workflow Guide](docs/workflows.md)
- [Integration Examples](docs/examples.md)

## üéØ **Supported Industries**

| Industry | Workflows | Use Cases |
|----------|-----------|-----------|
| **Manufacturing** | Production Planning, Resource Allocation, Quality Optimization | Production scheduling, capacity planning, quality control |
| **Healthcare** | Staff Scheduling, Resource Allocation, Patient Flow | Hospital operations, staff optimization, patient care |
| **Retail** | Pricing Optimization, Inventory Management, Demand Forecasting | Dynamic pricing, stock optimization, demand prediction |
| **Marketing** | Campaign Optimization, Budget Allocation, Channel Selection | Ad spend optimization, campaign performance, ROI maximization |
| **Financial** | Portfolio Optimization, Risk Management, Budget Allocation | Investment strategies, risk assessment, capital allocation |
| **Logistics** | Route Optimization, Supply Chain, Inventory Management | Delivery optimization, supply chain efficiency, warehouse management |
| **Energy** | Energy Mix Optimization, Grid Management, Demand Response | Renewable energy planning, grid optimization, demand management |

## üî¨ **Technical Details**

- **Model**: Qwen 30B for mathematical optimization
- **Protocol**: Model Context Protocol (MCP)
- **Languages**: Python, JavaScript
- **Dependencies**: See [requirements.txt](requirements.txt)

## ü§ù **Contributing**

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ **License**

MIT License - see [LICENSE](LICENSE) for details.

---

**Ready to add optimization intelligence to your AI workflows?** üöÄ
