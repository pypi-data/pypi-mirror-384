[project]
name = "py-undo-stack"
version = "1.1.0"
description = "Pure python Undo / Redo command stack"
authors = [
    { name = "Thibault Pelletier", email = "thibault.pelletier@kitware.com" },
]
dependencies = []

requires-python = ">=3.9"
readme = "README.md"
license = { text = "BSD 3-Clause License" }
keywords = [
    "undo",
    "redo",
    "stack",
    "history",
    "action tracking",
    "state management",
    "reversible actions",
    "developer tools",
    "utilities",
    "time travel"
]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: BSD License",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities"
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff",
    "pytest >=6",
    "pytest-cov >=3",
    "pytest-asyncio",
    "nox",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "/undo_stack",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]

[tool.ruff.lint]
extend-select = [
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "NPY", # NumPy specific rules
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP", # pyupgrade
    "YTT", # flake8-2020
]
ignore = [
    "PLR09", # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001", # Conflicts with formatter
]
isort.required-imports = []

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version",
]
version_variables = [
    "undo_stack/__init__.py:__version__",
]

build_command = """
  python -m venv .venv
  source .venv/bin/activate
  pip install -U pip build
  python -m build .
"""

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.coverage.report]
omit = ["*/tests/*"]
exclude_lines = [
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
