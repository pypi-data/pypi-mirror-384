[tox]
requires = 
    tox>=4
    tox-uv
# Define common test environment combinations
env_list = 
    py{311,312}
    py{311,312}-{gpu,nogpu}
    py{311,312}-{gpu,nogpu}-cov

[testenv]
description = 
    Run tests with different configurations
    gpu: Run GPU tests (requires CUDA)
    nogpu: Run non-GPU tests only
    cov: Run with coverage reporting

# Use uv for package installation and management
runner = uv-venv-runner
uv_seed = true

# Base dependencies - always needed
deps =
    pytest
    pytest-cov
    pytest-mock
    # GPU environments need torch and ninja
    gpu: torch>=2.6,<2.8
    gpu: ninja

# Skip automatic package installation - we'll do it manually
skip_install = true

# Environment variables
setenv = 
    # Clear CUDA for non-GPU tests
    nogpu: CUDA_VISIBLE_DEVICES = 
    TESTING=true
passenv =
    # Pass PATH so tox can find uv command
    PATH
    # GPU tests need CUDA environment variables
    gpu: CUDA_VISIBLE_DEVICES
    gpu: CUDA_HOME
    gpu: LD_LIBRARY_PATH
    gpu: NCCL_DEBUG

# Pre-commands for setup
commands_pre =
    # Install package with appropriate extras for each environment
    gpu: uv pip install -e .[cuda,test] --no-build-isolation
    nogpu: uv pip install -e .[test]
    !gpu-!nogpu: uv pip install -e .[test]

    # GPU tests: Install flash-attn in strict mode
    gpu: python -c "import sys; sys.exit(0) if __import__('importlib.util').util.find_spec('flash_attn') else None"
    gpu: python tests/gpu_tests/setup_flash_attn.py --strict
    # Regular tests with optional flash-attn (non-strict)
    !gpu-!nogpu: python -c "import torch; import sys; sys.exit(0 if torch.cuda.is_available() else 1)" && python tests/gpu_tests/setup_flash_attn.py || python -c "print('CUDA not available or flash-attn setup failed, skipping...')"

# Main test commands - only ONE will match per environment
commands = 
    # GPU tests (only when 'gpu' factor is present)
    gpu-!cov: pytest tests/gpu_tests -v --tb=short -p no:xdist {posargs}
    gpu-cov: pytest tests/gpu_tests -v --tb=short -p no:xdist --cov=src/mini_trainer --cov-report=term-missing --cov-report=xml --cov-report=html  {posargs}
    
    # Non-GPU tests (only when 'nogpu' factor is present)
    nogpu-!cov: pytest tests/ -m "not gpu and not multi_gpu" --ignore=tests/gpu_tests/ -v -s -p no:xdist --tb=short {posargs}
    nogpu-cov: pytest tests/ -m "not gpu and not multi_gpu" --ignore=tests/gpu_tests/ -v -s -p no:xdist --tb=short --cov=src/mini_trainer --cov-report=term-missing --cov-report=xml --cov-report=html {posargs}
    
    # Default tests (when neither gpu nor nogpu factors are present)
    !gpu-!nogpu-!cov: pytest {posargs} -p no:xdist
    !gpu-!nogpu-cov: pytest --cov=mini_trainer --cov-report=html --cov-report=term-missing  --cov-report=xml {posargs} -p no:xdist

# Python version specifications
[testenv:py311{,-gpu,-nogpu,-cov,-gpu-cov,-nogpu-cov}]
base_python = python3.11

[testenv:py312{,-gpu,-nogpu,-cov,-gpu-cov,-nogpu-cov}]
base_python = python3.12

# Convenience aliases for common test scenarios
[testenv:test]
description = Run all tests (includes GPU tests if CUDA is available)
base_python = python3.12
runner = uv-venv-runner
uv_seed = true
skip_install = true
deps =
    pytest
    pytest-cov
    pytest-mock
    torch>=2.6,<2.8
    ninja
passenv =
    PATH
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands_pre =
    uv pip install -e .[cuda,test] --no-build-isolation
    python -c "import torch; import sys; sys.exit(0 if torch.cuda.is_available() else 1)" && python tests/gpu_tests/setup_flash_attn.py || python -c "print('CUDA not available or flash-attn setup failed, skipping...')"
commands =
    pytest {posargs} -p no:xdist

[testenv:verbose]
description = Run tests with verbose output
base_python = python3.12
runner = uv-venv-runner
uv_seed = true
skip_install = true
commands_pre =
    uv pip install -e .[cuda,test] --no-build-isolation
commands = pytest -v {posargs} -p no:xdist

[testenv:quick]
description = Run tests until first failure
base_python = python3.12
runner = uv-venv-runner
uv_seed = true
skip_install = true
commands_pre =
    uv pip install -e .[cuda,test] --no-build-isolation
commands = pytest -x {posargs} -p no:xdist

[testenv:coverage]
description = Run all tests with coverage
base_python = python3.12
runner = uv-venv-runner
uv_seed = true
skip_install = true
commands_pre =
    uv pip install -e .[cuda,test] --no-build-isolation
commands = pytest --cov=mini_trainer --cov-report=html --cov-report=term-missing --cov-report=xml {posargs}

# Linting and formatting environments (kept separate as they don't benefit from factors)
[testenv:lint]
description = Run linting with ruff
deps = ruff
commands = ruff check .

[testenv:lint-fix]
description = Run linting with ruff and fix issues
deps = ruff
commands = ruff check --fix .

[testenv:format]
description = Format code with ruff
deps = ruff
commands = ruff format .

[testenv:format-check]
description = Check code formatting with ruff
deps = ruff
commands = ruff format --check .
