name: Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for PyPI Trusted Publishing / OIDC
      contents: read
    environment:
      name: pypi
      url: https://pypi.org/p/ai-ped-red-team
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Read package version
        id: metadata
        run: |
          python - <<'PY'
          import os, pathlib, sys
          try:
              import tomllib
          except ModuleNotFoundError:
              import tomli as tomllib  # type: ignore
          data = tomllib.loads(pathlib.Path('pyproject.toml').read_text())
          version = data['project']['version']
          print('version', version)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"version={version}\n")
          PY
      - name: Determine if version already on PyPI
        id: determine_pypi
        run: |
          python - <<'PY'
          import json, os, urllib.request
          pkg = 'ai-ped-red-team'
          version = os.environ.get('VERSION') or '${{ steps.metadata.outputs.version }}'
          should = 'true'
          try:
              with urllib.request.urlopen(f'https://pypi.org/pypi/{pkg}/json', timeout=15) as r:
                  data = json.load(r)
              if version in (data.get('releases') or {}):
                  should = 'false'
          except Exception:
              # If package not found or network flake, default to publish
              pass
          print('should_publish', should)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"should_publish={should}\n")
          PY
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build sdist and wheel
        if: steps.determine_pypi.outputs.should_publish == 'true'
        run: python -m build
      - name: Publish to PyPI (with provenance)
        if: github.ref == 'refs/heads/main' && steps.determine_pypi.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          verify-metadata: true
          attestations: true
      - name: Skip publish (version already exists)
        if: steps.determine_pypi.outputs.should_publish != 'true'
        run: |
          echo "Version ${{ steps.metadata.outputs.version }} already on PyPI. Skipping publish."
