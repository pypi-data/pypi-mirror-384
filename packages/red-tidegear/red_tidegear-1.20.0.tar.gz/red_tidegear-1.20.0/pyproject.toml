# SPDX-FileCopyrightText: 2025 cswimr <copyright@csw.im>
# SPDX-License-Identifier: MPL-2.0

[project]
name = "red-tidegear"
description = "A small collection of utilities for cog creation with Red-DiscordBot."
authors = [{ name = "cswimr", email = "cswimr@csw.im" }]
requires-python = ">=3.11,<3.12"
license = "MPL-2.0"
license-files = ["LICENCES/**"]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "pip",                   # Red-DiscordBot depends on pip, but doesn't actually list it as a dependency. Ensure it is installed; version is irrelevant.
  "red-discordbot>=3.5.6",
  "humanize>=4.12.3",
  "pydantic>=2.11,<2.12",
]
dynamic = ["readme", "version", "urls"]

[project.optional-dependencies]
sentinel = [
  "phx-class-registry>=5.1.1",
  "redbot-orm>=1.0.2",
  "piccolo[sqlite]>=1.27.1",
]


[dependency-groups]
dev = [
  { include-group = "tests" },
  { include-group = "lint" },
  { include-group = "docs" },
]
tests = ["pytest>=8.4.2", "pytest-cov>=7.0.0"]
lint = ["basedpyright>=1.29.4", "reuse>=5.1.1", "ruff>=0.12.0"]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-git-authors-plugin>=0.10.0",
  "mkdocs-git-revision-date-localized-plugin>=1.4.7",
  "mkdocs-glightbox>=0.4.0",
  "mkdocs-material[imaging]>=9.6.15",
  "mkdocs-minify-plugin>=0.8.0",
  "mkdocs-redirects>=1.2.2",
  "mkdocstrings[python]>=0.29.1",
]

[tool.hatch.build]
include = ["/tidegear"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "tidegear/version.py"
template = """
# SPDX-FileCopyrightText: 2025 cswimr <copyright@csw.im>
# SPDX-License-Identifier: MPL-2.0

\"\"\"Tidegear version information.\"\"\"

# This file is automatically generated on build, do not edit!
# Do not commit this file to source control!

from yarl import URL

from tidegear.metadata import Repository, SemVer, TidegearMeta

meta: TidegearMeta = TidegearMeta(
    version=SemVer._from_tuple({version_tuple}),  # noqa: SLF001
    repository=Repository(
        owner="cswimr",
        name="tidegear",
        url=URL("https://c.csw.im/cswimr/tidegear"),
    ),
)
\"\"\"Tidegear Metadata object. This is automatically generated on build, so the version information will change depending on your Tidegear version.\"\"\"

version: SemVer = meta.version
\"\"\"A SemVer object storing Tidegear's version.\"\"\"
__version__: str = str(meta.version)
\"\"\"A string storing Tidegear's version.\"\"\"
"""

[tool.hatch.metadata.hooks.vcs.urls]
Homepage = "https://c.csw.im/cswimr/tidegear"
Documentation = "https://tidegear.csw.im"
Issues = "https://c.csw.im/cswimr/tidegear/issues"
"Source Archive" = "https://c.csw.im/cswimr/tidegear/archive/{commit_hash}.tar.gz"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\[(.+?)\]\(((?!https?://)(?:\./)?(\S+?))\)'
replacement = '[\1](https://c.csw.im/cswimr/tidegear/src/tag/v$HFPR_VERSION/\g<2>)'

[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.basedpyright]
typeCheckingMode = "standard"
reportImplicitOverride = "warning"

[tool.ruff]
line-length = 150
indent-width = 4
target-version = "py311"
namespace-packages = ["docs/hooks"]

[tool.ruff.lint]
preview = true
select = [
  "I",
  "N",
  "F",
  "W",
  "E",
  "G",
  "A",
  "COM",
  "INP",
  "T20",
  "PLC",
  "PLE",
  "PLW",
  "PLR",
  "LOG",
  "SLF",
  "ERA",
  "FIX",
  "PERF",
  "C4",
  "EM",
  "RET",
  "RSE",
  "DOC",
  "D",
]
ignore = [
  "PLR0911", # too-many-return-statements (pylint)
  "PLR0912", # too-many-branches (pylint)
  "PLR0913", # too-many-arguments (pylint)
  "PLR0914", # too-many-locals (pylint)
  "PLR0915", # too-many-statements (pylint)
  "PLR1702", # too-many-nested-blocks (pylint)
  "COM812",  # missing-trailing-comma (flake8-commas)
  "D104",    # undocumented-public-package (pydoctsyle)
  "D105",    # undocumented-magic-method (pydocstyle)
  "D107",    # undocumented-public-init (pydocstyle)
  "D205",    # missing-blank-line-after-summary (pydocstyle)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"**/{tests,migrations}/*" = [
  "D",     # pydocstyle
  "EM101", # raw-string-in-exception (flake8-errmsg)
]
"examplecog/**" = [
  "D100", # undocumented-public-module (pydocstyle)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
