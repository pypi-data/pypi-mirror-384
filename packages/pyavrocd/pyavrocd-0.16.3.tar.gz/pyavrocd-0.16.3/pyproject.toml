[project]
name = "pyavrocd"
version = "0.16.3"
description = "A platform-agnostic GDB server for AVR MCUs"
authors = [
    {name = "Bernhard Nebel",email = "nebel@arduino-craft-corner.de"}
    ]
keywords = [ "AVR", "EDBG",  "gdb-server", "debugging" ]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Debuggers"
]
license-files = ["LICENSE*"]
readme = "README.md"
requires-python = "<3.14,>=3.10"
dependencies = [
    "pymcuprog (>=3.17.3.45,<4.0.0.0)",
    "pyedbglib (>=2.24.2.18,<3.0.0.0)",
    "pyusb (>=1.3.1,<1.4.0)",
    "pre-commit (>=4.2.0,<5.0.0)",
    "pyinstaller (>=6.12.0,<7.0.0)",
    "pexpect (>=4.9.0,<5.0.0)",
    "pylint (>=4.0.0,<5.0.0)",
    "pytest (>=8.4.2,<9.0.0)",
    "pytest-cov (>=7.0.0,<8.0.0)",
]

[project.urls]
repository = "https://github.com/felias-fogg/PyAvrOCD"
documentation = "https://felias-fogg.github.io/PyAvrOCD/"
"Bug Tracker" = "https://github.com/felias-fogg/PyAvrOCD/issues"

[project.scripts]
pyavrocd = 'pyavrocd.main:main'

[tool.poetry]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[tool.poetry.group.dev.dependencies]
pylint = "^4.0.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.pylint.MASTER]
ignore-patterns = ["at(tiny|mega|90).*\\.py" ]
ignore-paths = [".poetry",".*alldevices.py"]
jobs = 1

[tool.pylint.'MESSAGE CONTROL']
disable= ['broad-exception-caught',
         'consider-using-f-string',
         'trailing-whitespace',
	 'trailing-newlines',
	 'duplicate-code',
	 'consider-using-with',
	 'consider-using-dict-items',
	 'consider-using-generator']

[tool.pylint.REPORTS]
output-format = 'text'
reports = 'no'

[tool.pylint.FORMAT]
indent-string='    '

[tool.pylint.BASIC]
function-rgx="[a-z_][a-z0-9_]{2,50}$"

[tool.pylint.DESIGN]
max-args=15
max-locals=30
max-returns=15
max-branches=20
max-statements=90
max-attributes=25
min-public-methods=1
max-public-methods=25
max-bool-expr=10
max-nested-blocks=7
max-line-length=120

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
