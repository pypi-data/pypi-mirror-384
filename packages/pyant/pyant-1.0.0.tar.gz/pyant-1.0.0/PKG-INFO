Metadata-Version: 2.4
Name: pyant
Version: 1.0.0
Summary: Radar antenna models in python
Author-email: Daniel Kastinen <daniel.kastinen@irf.se>, Tom Grydeland <tgry@norceresearch.no>, Juha Vierinen <juha-pekka.vierinen@uit.no>
Maintainer-email: Daniel Kastinen <daniel.kastinen@irf.se>
License: MIT License
        
        Copyright (c) [2019] [Daniel Kastinen, Juha Vierinen, Tom Grydeland]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Documentation, https://danielk.developer.irf.se/pyant/
Project-URL: Repository, https://github.com/danielk333/pyant
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.14.3
Requires-Dist: scipy>=1.1.0
Provides-Extra: plotting
Requires-Dist: matplotlib>=3.2.0; extra == "plotting"
Provides-Extra: develop
Requires-Dist: pytest; extra == "develop"
Requires-Dist: flake8; extra == "develop"
Requires-Dist: wheel; extra == "develop"
Requires-Dist: build; extra == "develop"
Requires-Dist: twine; extra == "develop"
Requires-Dist: pytest-cov; extra == "develop"
Requires-Dist: matplotlib; extra == "develop"
Requires-Dist: ipykernel; extra == "develop"
Requires-Dist: radon; extra == "develop"
Requires-Dist: numpydoc; extra == "develop"
Requires-Dist: black; extra == "develop"
Requires-Dist: auditwheel; extra == "develop"
Requires-Dist: patchelf; extra == "develop"
Requires-Dist: mkdocs-material; extra == "develop"
Requires-Dist: mkdocstrings[python]; extra == "develop"
Requires-Dist: mkdocs-jupyter; extra == "develop"
Requires-Dist: mkdocs-gen-files; extra == "develop"
Requires-Dist: mkdocs-literate-nav; extra == "develop"
Requires-Dist: mkdocs-section-index; extra == "develop"
Provides-Extra: tests
Requires-Dist: pytest; extra == "tests"
Requires-Dist: pytest-cov; extra == "tests"
Dynamic: license-file

# PyAnt

PyAnt is a standardization for implementing radar gain pattern in Python. Nothing more, nothing less.

## Getting started

To install

```bash
    pip install pyant
```

or for the nightly build

```bash
    git clone git@github.com:danielk333/pyant.git
    cd pyant
    git checkout develop
    pip install .
```

Alternatively, if you are following updates closely you can install using ``pip install -e .`` so that in the future a ``git pull`` will update the library.

Then get started by looking at the examples gallery and API in the Documentation.

## Example

Plot the gain pattern of a dish radar modeled using the Cassegrain model.

```python
import matplotlib.pyplot as plt
import pyant

beam = pyant.models.Cassegrain(
    pointing=np.array([0, 0, 1], dtype=np.float64),
    frequency=930e6,
    outer_radius=40.0,
    inner_radius=23.0,
    peak_gain=10**4.81,
)

pyant.plotting.gain_heatmap(beam, resolution=301, min_elevation=80.0)
plt.show()
```
