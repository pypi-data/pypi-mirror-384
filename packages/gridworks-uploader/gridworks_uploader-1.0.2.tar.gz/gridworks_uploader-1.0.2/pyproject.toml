[tool.poetry]
name = "gridworks-uploader"
version = "1.0.2"
description = "Gridworks Uploader"
authors = ["Andrew Schweitzer <schweitz72@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/SmoothStoneComputing/gridworks-uploader"
repository = "https://github.com/SmoothStoneComputing/gridworks-uploader"
documentation = "https://gridworks-uploader.readthedocs.io"
packages = [#
    { include = "gwupload", from = "src" },
]
classifiers = [
    "Development Status :: 4 - Beta",
]

[tool.poetry.scripts]
gwup = "gwupload.cli:cli_app"

[tool.poetry.urls]
Changelog = "https://github.com/SmoothStoneComputing/gridworks-uploader/releases"


[tool.poetry.dependencies]
python = "^3.11"
gridworks-protocol = "^1.2.6"
# gridworks-protocol = { git = "https://github.com/thegridelectric/gridworks-protocol.git", branch = "dev" }
# gridworks-protocol = { path = "../gridworks-protocol", develop = true }
gridworks-proactor = {extras = ["tests"], version = "^4.1.0"}
# gridworks-proactor = {extras = ["tests"], git = "https://github.com/SmoothStoneComputing/gridworks-proactor.git", branch = "dev"}
# gridworks-proactor = {extras = ["tests"], path = "../gridworks-proactor", develop = true}
pydantic = "^2.11.2"
pydantic-settings = "^2.8.1"
typer = "^0.15.2"
httpx = "^0.28.1"
# TODO: remove when typer adjusts to new click version:
#   https://github.com/fastapi/typer/discussions/1215
#   https://github.com/fastapi/typer/pull/1222
#   https://github.com/fastapi/typer/commits/click-8.2/
click = "<8.2.0"


[tool.poetry.group.dev.dependencies]
Pygments = ">=2.19.1"
coverage = {extras = ["toml"], version = ">=7.8"}
furo = "^2024.8.6"
mypy = "^1.15.0"
pre-commit = "^4.2.0"
pre-commit-hooks = "^5.0.0"
pytest = "^8.3.5"
pyupgrade = "^3.19.1"
sphinx = "^8.2.3"
sphinx-autobuild = "^2024.10.3"
sphinx-click = "^6.0.0"
xdoctest = "^1.2.0"
myst-parser = "^4.0.1"
ruff = "^0.11.3"
types-paho-mqtt = "^1.6.0.20240321"
pytest-asyncio = "^0.26.0"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["gwupload", "tests"]

[tool.coverage.report]
show_missing = false
fail_under = 0

[tool.mypy]
strict = true
warn_unreachable = true
pretty = false
show_column_numbers = false
show_error_codes = true
show_error_context = false
exclude = [
    "hacking",
]
plugins = [
    "pydantic.mypy"
]
[[tool.mypy.overrides]]
module = [
    "paho.mqtt.client",
]
ignore_missing_imports = true


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".github",
    ".git",
    ".mypy_cache",
    ".nox",
    "htmlcov",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    ".idea",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs",
]
output-format = "concise"
fix = true
show-fixes = true
target-version = "py312"

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
# default select used by  ruff: ["E4", "E7", "E9", "F"]
select = ["ALL"]
ignore = [
    "ANN401", # When we use 'Any' we mean it.
    "B027",
    "COM812",
    "CPY",
    "D",
    "DOC",
    "E252", # Formatter
    "E302",
    "E501",
    "EM",
    "FA", # We only support Python >= 3.10, so we shouldn't need this
    "ISC001",
    "N801",
    "N803", # Protocol sometimes calls for CamelCase arguments.
    "N818", # We disagree with Pep8 about naming exceptions.
    "PGH004", # ruff and IDE can disagree, in which case a simple # noqa might be need.
    "PLW1514",
    "TRY003", # Many of our ValueErrors contain messages that are not plausibly resuable.
    "RUF100", # ruff and IDE often disagree about whether a 'noqa' is in use.
    "W191",
    "W291", # Formatter
    "W293", # Formatter
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "ARG001", # Unused function args -> fixtures nevertheless are functionally relevant...
    "C901", # Complexity
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "G004", # Ok to use f-strings in logging in test code
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912", # Complexity
    "PLR0913", # Complexity
    "PLR0915", # Complexity
    "PT011", # It's not practical to match strings in exceptions caught by pytest.raises()
    "S101", # asserts allowed in tests...
]
"src/gwupload/stubs/**/*.py" = [
    "ARG001",
    "C901", # Complexity
    "FBT",
    "G004",
    "N806", # We want to be able to have non pep8 variable names.
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PT011",
    "S101",
    "S311",
]
