# coding: utf-8

"""
    BugSeq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bugseq_client.openapi_client.models.job_run_submit_request_user_provided_metadata_inner_value import JobRunSubmitRequestUserProvidedMetadataInnerValue
from bugseq_client.openapi_client.models.pipeline_version import PipelineVersion
from bugseq_client.openapi_client.models.run_options_request import RunOptionsRequest
from typing import Optional, Set
from typing_extensions import Self

class JobRunSubmitRequest(BaseModel):
    """
    JobRunSubmitRequest
    """ # noqa: E501
    user_provided_name: Optional[StrictStr] = None
    aws_region: StrictStr
    file_ids: List[StrictStr]
    run_options: RunOptionsRequest
    lab_id: Optional[StrictStr] = None
    testmode: Optional[StrictBool] = False
    user_provided_metadata: Optional[List[Dict[str, JobRunSubmitRequestUserProvidedMetadataInnerValue]]] = None
    pipeline_version: Optional[PipelineVersion] = None
    __properties: ClassVar[List[str]] = ["user_provided_name", "aws_region", "file_ids", "run_options", "lab_id", "testmode", "user_provided_metadata", "pipeline_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobRunSubmitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of run_options
        if self.run_options:
            _dict['run_options'] = self.run_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_provided_metadata (list)
        _items = []
        if self.user_provided_metadata:
            for _item_user_provided_metadata in self.user_provided_metadata:
                if _item_user_provided_metadata:
                    _items.append(_item_user_provided_metadata.to_dict())
            _dict['user_provided_metadata'] = _items
        # set to None if user_provided_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_provided_name is None and "user_provided_name" in self.model_fields_set:
            _dict['user_provided_name'] = None

        # set to None if lab_id (nullable) is None
        # and model_fields_set contains the field
        if self.lab_id is None and "lab_id" in self.model_fields_set:
            _dict['lab_id'] = None

        # set to None if user_provided_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.user_provided_metadata is None and "user_provided_metadata" in self.model_fields_set:
            _dict['user_provided_metadata'] = None

        # set to None if pipeline_version (nullable) is None
        # and model_fields_set contains the field
        if self.pipeline_version is None and "pipeline_version" in self.model_fields_set:
            _dict['pipeline_version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobRunSubmitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_provided_name": obj.get("user_provided_name"),
            "aws_region": obj.get("aws_region"),
            "file_ids": obj.get("file_ids"),
            "run_options": RunOptionsRequest.from_dict(obj["run_options"]) if obj.get("run_options") is not None else None,
            "lab_id": obj.get("lab_id"),
            "testmode": obj.get("testmode") if obj.get("testmode") is not None else False,
            "user_provided_metadata": [Dict[str, JobRunSubmitRequestUserProvidedMetadataInnerValue].from_dict(_item) for _item in obj["user_provided_metadata"]] if obj.get("user_provided_metadata") is not None else None,
            "pipeline_version": obj.get("pipeline_version")
        })
        return _obj


