# coding: utf-8

"""
    BugSeq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from bugseq_client.openapi_client.models.kit import Kit
from bugseq_client.openapi_client.models.metagenomic_database import MetagenomicDatabase
from bugseq_client.openapi_client.models.molecule_type import MoleculeType
from bugseq_client.openapi_client.models.platform import Platform
from bugseq_client.openapi_client.models.sample_type_input import SampleTypeInput
from typing import Optional, Set
from typing_extensions import Self

class RunOptionsRequest(BaseModel):
    """
    RunOptionsRequest
    """ # noqa: E501
    platform: Platform
    kit: Optional[Kit] = None
    metagenomic_database: Optional[MetagenomicDatabase] = None
    sample_type: SampleTypeInput
    molecule_type: Optional[MoleculeType] = None
    include_in_lab_db: Optional[StrictBool] = True
    filter_animal_reads: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["platform", "kit", "metagenomic_database", "sample_type", "molecule_type", "include_in_lab_db", "filter_animal_reads"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunOptionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if kit (nullable) is None
        # and model_fields_set contains the field
        if self.kit is None and "kit" in self.model_fields_set:
            _dict['kit'] = None

        # set to None if filter_animal_reads (nullable) is None
        # and model_fields_set contains the field
        if self.filter_animal_reads is None and "filter_animal_reads" in self.model_fields_set:
            _dict['filter_animal_reads'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunOptionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platform": obj.get("platform"),
            "kit": obj.get("kit"),
            "metagenomic_database": obj.get("metagenomic_database"),
            "sample_type": obj.get("sample_type"),
            "molecule_type": obj.get("molecule_type"),
            "include_in_lab_db": obj.get("include_in_lab_db") if obj.get("include_in_lab_db") is not None else True,
            "filter_animal_reads": obj.get("filter_animal_reads")
        })
        return _obj


