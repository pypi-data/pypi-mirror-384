[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "partipy"
version = "0.0.6"
description = "Pareto Task Inference in Python"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Philipp Sven Lars Schäfer", email = "philipp.schaefer@uni-heidelberg.de" },
    { name = "Leoni Zimmermann", email = "leoni.zimmermann@stud.uni-heidelberg.de" }
]
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "scanpy",
  "decoupler >= 2.0.0", # below 2.0.0 the vignettes won't run
  "dcor", # decoupler dependency
  "nbformat",
  "tqdm",
  "joblib",
  "numpy",
  "numba",
  "pandas",
  "scipy",
  "plotnine",
  "matplotlib",
  "plotly",
  "pydantic",
]
optional-dependencies.extra = [
  "session-info2", # print system and package versions
  "requests", # required for data download
  "pybiomart", # required to process the fibroblast data
  "squidpy", # required to spatial analyses
  "liana", # required for crosstalk networks
  "networkx", # required for crosstalk networks
]
optional-dependencies.dev = [
  "ruff",
  "mypy",
  "pre-commit",
  "twine>=4.0.2",
  "pandas-stubs",
  "types-tqdm",
]
optional-dependencies.test = [
  "pytest",
  "coverage",
  "pytest-cov",
  "pytest-randomly",
  "pytest-qt",
  "pytest-xvfb",
  "ipytest",
  "hypothesis",
  "PyQt5", # needed for hatch test!?
  "tomli>=2.0.1; python_version < '3.11'",  # Only install on older Python
  "partipy[extra]", # Include extra dependencies
]
optional-dependencies.doc = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  "ipykernel",
  "jupyter",
  "squidpy", # used in two vignettes
  "ipython",
  "myst-nb>=1.1",
  "pandas",
  # Until pybtex >0.24.0 releases: https://bitbucket.org/pybtex-devs/pybtex/issues/169/
  "setuptools",
  "sphinx>=4",
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinx-tabs",
  "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
  "partipy[extra]", # Include extra dependencies
]
# https://docs.pypi.org/project_metadata/#project-urls
urls.Homepage = "https://github.com/saezlab/partipy"
urls.Source = "https://github.com/saezlab/partipy"
urls.Bug = "https://github.com/saezlab/partipy/issues"
urls.Changelog = "https://github.com/saezlab/partipy/CHANGELOG.md"
urls.Documentation = "https://partipy.readthedocs.io/en/latest/"

# default environment that is used by hatch, installs the dev dependencies
# and we use uv to manage environments and installling dependencies, see options here: https://hatch.pypa.io/latest/how-to/environment/select-installer/
[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.execute_notebooks = "jupyter nbconvert --to notebook --execute --inplace docs/notebooks/*.ipynb"
scripts.build = "sphinx-build -M html docs docs/_build {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "rm -rf docs/generated docs/_build docs/api/generated" # delete all files generated by sphinx

# all hatch-test environments are using the optional test dependencies
[tool.hatch.envs.hatch-test]
features = [ "test" ]
scripts.run_cov = "pytest -m 'github_actions' -v --cov=partipy --color=yes --durations=0 --cov-report=term --cov-report=xml"
scripts.run_cov_local = "pytest -m 'github_actions' -v --cov=partipy --color=yes --durations=0 --cov-report=term --cov-report=html"
scripts.run_gh_tests = "pytest -m 'github_actions' -v --cov=partipy --color=yes --durations=0"
scripts.run_all_tests = "pytest -v --cov=partipy --color=yes --durations=0"

# test the lowest and highest supported Python versions with normal deps
[[tool.hatch.envs.hatch-test.matrix]]
deps = [ "stable" ]
python = [ "3.10" ] # for now only testing in 3.10, from 3.12 onwards we get syntax errors from docstrings of leidenalg package

# test the newest supported Python version also with pre-release deps (currently deactivated)
# [[tool.hatch.envs.hatch-test.matrix]]
# deps = [ "pre" ]
# python = [ "3.13" ]

[tool.hatch.envs.hatch-test.overrides]
# If the matrix variable `deps` is set to "pre",
# set the environment variable `UV_PRERELEASE` to "allow".
matrix.deps.env-vars = [
  { key = "UV_PRERELEASE", value = "allow", if = [ "pre" ] },
]

[tool.ruff]
line-length = 120 # more generous that standard 79
src = ["partipy"]
# for now we will exclude the jupyter notebooks!
exclude = ["*.ipynb", "docs/source/conf.py"]
format.docstring-code-format = true
lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D204", #  I do not want to require blank line after docstring of class
  "D205", # I do not want to require blank line after docstring of function
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
# tests that should fail (marked by @pytest.mark.xfail) but actually pass should be considered failures
xfail_strict = true
# TODO: Check if we need this
pythonpath = [
  "."
]
filterwarnings = [
    "error",
    # ignore UserWarnings for now?
    "ignore::UserWarning"
]
# everything in addopts is always part of the pytest command (if not overridden)
addopts = [
  "--import-mode=importlib", # by default allow using test files with same name
]
markers = [
    "github_actions: marks tests that are run via github actions (CI)"
]

[tool.coverage.run]
source = [ "partipy" ]
# ignore all files that start with "test_" and end with ".py"
omit = [ "**/test_*.py" ]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover"
]

[tool.mypy]
exclude = "docs/"
disable_error_code = ["import-untyped"]
#disable_error_code = ["import-untyped", "attr-defined", "union-attr"]
