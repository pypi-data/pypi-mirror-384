import{b as c}from"./datasources-B0x4KOZU.js";import{_ as y,r as d,f,o as p,d as n,g,a as r,b as t,w as i,t as v}from"./index-B5gNOk1p.js";const b={name:"LoadSbom",emits:["update:repos"],data(){return{urls:[],loading:!1,hasLoaded:!1,form:{error:"",files:[]}}},methods:{async parseJSONFile(s){const e=await new Response(s).text();return JSON.parse(e)},async loadFile(s){if(!s)return;this.loading=!0;const e=[];try{await this.validateSPDX(s)}catch(a){this.form.error=a.message,this.loading=!1;return}const m=await this.parseJSONFile(s);if(m.packages)for(const a of m.packages){let o=await c(a.downloadLocation);o||(o=await c(a.homepage)),o&&!e.some(l=>l.url===o.url)&&(Object.assign(o,{has_issues:!0,has_pull_requests:!0}),e.push(o))}this.form.error=null,this.urls=e,this.loading=!1,this.hasLoaded=!0,this.$emit("update:repos",this.urls)},async validateSPDX(s){if(s.type!=="application/json")throw new Error("The file needs to be in a JSON format.");const e=await this.parseJSONFile(s);if(!e.SPDXID||!e.spdxVersion)throw new Error("The file is not in a valid SPDX format.")},reloadForm(){this.$emit("update:repos",[]),this.hasLoaded=!1,this.urls=[],this.form.files=[]}}},x={key:0},L={class:"mb-2"},N={href:"https://spdx.dev/learn/overview/",targe:"_blank"},k={key:1},F={class:"mb-4"},D={class:"font-weight-medium"};function O(s,e,m,a,o,l){const u=d("v-icon"),_=d("v-btn"),S=d("v-file-input"),w=d("v-form");return p(),f("div",null,[e[10]||(e[10]=n("h1",{class:"text-h6 my-4"},"Load SBoM",-1)),o.hasLoaded?g("",!0):(p(),f("div",x,[n("p",L,[e[4]||(e[4]=t(" Load a list of repositories from a JSON file in the ",-1)),n("a",N,[e[3]||(e[3]=t(" SPDX ",-1)),r(u,{size:"x-small"},{default:i(()=>e[2]||(e[2]=[t("mdi-open-in-new",-1)])),_:1,__:[2]})]),e[5]||(e[5]=t(" SBoM format. ",-1))]),r(w,{class:"my-6"},{default:i(()=>[r(S,{modelValue:o.form.files,"onUpdate:modelValue":e[1]||(e[1]=h=>o.form.files=h),"error-messages":o.form.error,accept:"application/JSON",color:"primary",label:"JSON file in SPDX format",density:"compact",variant:"outlined","data-test":"file-input"},{append:i(()=>[r(_,{loading:o.loading,color:"primary",onClick:e[0]||(e[0]=h=>l.loadFile(o.form.files))},{default:i(()=>e[6]||(e[6]=[t(" Load ",-1)])),_:1,__:[6]},8,["loading"])]),_:1},8,["modelValue","error-messages"])]),_:1})])),o.hasLoaded?(p(),f("div",k,[n("p",F,[e[9]||(e[9]=t(" Found ",-1)),n("span",D,v(o.urls.length),1),t(" "+v(o.urls.length===1?"repository":"repositories")+". ",1),r(_,{color:"primary",class:"text-body-2",density:"comfortable",size:"small",variant:"text",onClick:l.reloadForm},{default:i(()=>[r(u,{start:""},{default:i(()=>e[7]||(e[7]=[t("mdi-refresh",-1)])),_:1,__:[7]}),e[8]||(e[8]=t(" Load another file ",-1))]),_:1,__:[8]},8,["onClick"])])])):g("",!0)])}const C=y(b,[["render",O]]);export{C as default};
