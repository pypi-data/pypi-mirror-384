#
# GrimoireLab core basic settings file.
#
# This file defines the required settings to run GrimoireLab.
# Due to GrimoireLab is a Django based app, these settings are
# based on the configuration file generated by Django by
# default.
#
# Please check the next links for details about the configuration
# in a production environment:
#
# https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# https://docs.djangoproject.com/en/4.2/ref/settings/
#

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SILENCED_SYSTEM_CHECKS = ["django_mysql.E016"]

#
# General app parameters
#

#
# You must never enable debug in production.
#
# https://docs.djangoproject.com/en/4.2/ref/settings/#std:setting-DEBUG
#

DEBUG = os.environ.get("GRIMOIRELAB_DEBUG", "False").lower() in ("true", "1")

#
# ALLOWED_HOST protects the site against CSRF attacks.
# If DEBUG is set to False, you will need to configure this parameter,
# with the host you are using to serve GrimoireLab.
#
# https://docs.djangoproject.com/en/4.2/ref/settings/#allowed-hosts
#

if "GRIMOIRELAB_ALLOWED_HOST" in os.environ:
    ALLOWED_HOSTS = os.environ["GRIMOIRELAB_ALLOWED_HOST"].split(",")
else:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "localhost",
    ]

#
# Cross-Origin Resource Sharing (CORS)
#
# You'll HAVE TO configure the origins that are authorized to make
# cross-site HTTP requests. Check the following link to understand
# the possibilities and parameters you can use.
#
# https://github.com/adamchainz/django-cors-headers#configuration
#

if "GRIMOIRELAB_CORS_ALLOWED_ORIGINS" in os.environ:
    CORS_ALLOWED_ORIGINS = os.environ["GRIMOIRELAB_CORS_ALLOWED_ORIGINS"].split(",")
elif "GRIMOIRELAB_CORS_ALLOWED_ORIGIN_REGEXES" in os.environ:
    CORS_ALLOWED_ORIGIN_REGEXES = os.environ["GRIMOIRELAB_CORS_ALLOWED_ORIGIN_REGEXES"].split(",")
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
    ]

CORS_ALLOW_CREDENTIALS = True


#
# The secret key must be a large random value and it must be kept secret.
#
# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key
#

SECRET_KEY = os.environ.get("GRIMOIRELAB_SECRET_KEY", "fake-key")


# Require authentication when using the API.
# You shouldn't deactivate this option unless you are debugging
# the system or running it in a trusted and safe environment.
GRIMOIRELAB_AUTHENTICATION_REQUIRED = True


#
# Bot user, used to run some background tasks.
#
SYSTEM_BOT_USER = os.environ.get("GRIMOIRELAB_SYSTEM_BOT_USER", "grimoire-bot")

#
# Application definition - DO NOT MODIFY
#

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rq",
    "corsheaders",
    "rest_framework",
    "grimoirelab.core.scheduler",
    "grimoirelab.core.scheduler.tasks",
    "grimoirelab.core.datasources",
    "drf_spectacular",
    "graphene_django",
    "sortinghat.core",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "grimoirelab.core.app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "grimoirelab.core.app.wsgi.application"


#
# Grimoirelab core database
#
# You MUST set the database parameters in order to run
# GrimoireLab.
#

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "HOST": os.environ.get("GRIMOIRELAB_DB_HOST", "127.0.0.1"),
        "PORT": os.environ.get("GRIMOIRELAB_DB_PORT", 3306),
        "USER": os.environ.get("GRIMOIRELAB_DB_USER", "root"),
        "PASSWORD": os.environ.get("GRIMOIRELAB_DB_PASSWORD", ""),
        "NAME": os.environ.get("GRIMOIRELAB_DB_DATABASE", "grimoirelab_test"),
        "OPTIONS": {"charset": "utf8mb4"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


#
# Internationalization
#
# https://docs.djangoproject.com/en/4.2/topics/i18n/
#
#

LANGUAGE_CODE = "en-us"
USE_I18N = True

#
# Time Zone
#

USE_TZ = True
TIME_ZONE = "UTC"

#
# GrimoireLab Logging
#
# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
#

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{asctime}] {message}",
            "style": "{",
        },
        "verbose": {
            "format": "[{asctime} - {levelname} - {name}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}


#
# Static files (CSS, JavaScript, Images)
#
# https://docs.djangoproject.com/en/4.2/howto/static-files/
#

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "templates/static"]

# UI static files will be copied to the next path when
# 'collectstatic' is run.
# If you are serving these files in a dedicated server, you will
# need to copy them to their final destination.

STATIC_ROOT = os.path.join(BASE_DIR, "static")

# MEDIA_URL is only needed when DEBUG is set to True.
# Modify this URL if you want to run the server in developer mode.

MEDIA_URL = "http://media.localhost/"


# Use this variable to upload static files to a cloud storage.
# Current supported cloud platforms are: GCP

if "GRIMOIRELAB_STATICFILES_STORAGE" in os.environ:
    if os.environ["GRIMOIRELAB_STATICFILES_STORAGE"].lower() == "gcp":
        STORAGES = {
            "staticfiles": {
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {"bucket_name": os.environ["GRIMOIRELAB_GCP_BUCKET_NAME"]},
            }
        }
    else:
        raise ValueError(
            f"'{os.environ['GRIMOIRELAB_STATICFILES_STORAGE']}' storage is not supported"
        )


#
# Default primary key field type
#
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
#

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework settings

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "grimoirelab.core.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

#
# GrimoireLab uses RQ to run background and async jobs.
# You'll HAVE TO set the next parameters in order to run
# them in the background.
#
# You can define the names of the RQ queues using the following
# environment variables.
#
# Take into account RQ uses Redis database. You have more
# info about these parameters on the following link:
#
# https://github.com/rq/django-rq
#

GRIMOIRELAB_Q_EVENTIZER_JOBS = os.environ.get("GRIMOIRELAB_Q_EVENTIZER_JOBS", "eventizer_jobs")

_RQ_DATABASE = {
    "HOST": os.environ.get("GRIMOIRELAB_REDIS_HOST", "127.0.0.1"),
    "PORT": os.environ.get("GRIMOIRELAB_REDIS_PORT", 6379),
    "PASSWORD": os.environ.get("GRIMOIRELAB_REDIS_PASSWORD", ""),
    "DB": os.environ.get("GRIMOIRELAB_REDIS_DB", 0),
}

RQ_QUEUES = {
    "default": _RQ_DATABASE,
    GRIMOIRELAB_Q_EVENTIZER_JOBS: _RQ_DATABASE,
}

GRIMOIRELAB_EVENTS_STREAM_NAME = os.environ.get("GRIMOIRELAB_EVENTS_STREAM_NAME", "events")
# Maximum events in Redis stream before dropping. Consumers must process events
# faster than production to avoid loss. Default max size is 1M events (~2.5GB Git events).
# Adjust for memory constraints.
GRIMOIRELAB_EVENTS_STREAM_MAX_LENGTH = int(
    os.environ.get("GRIMOIRELAB_EVENTS_STREAM_MAX_LENGTH", 1 * 10**6)
)

RQ = {
    "JOB_CLASS": "grimoirelab.core.scheduler.jobs.GrimoireLabJob",
    "WORKER_CLASS": "grimoirelab.core.scheduler.worker.GrimoireLabWorker",
}

#
# Task default configuration
#

GRIMOIRELAB_JOB_INTERVAL = int(os.environ.get("GRIMOIRELAB_JOB_INTERVAL", 60 * 60 * 2))
GRIMOIRELAB_JOB_MAX_RETRIES = int(os.environ.get("GRIMOIRELAB_JOB_MAX_RETRIES", 5))
GRIMOIRELAB_JOB_RESULT_TTL = int(os.environ.get("GRIMOIRELAB_JOB_RESULT_TTL", 300))
GRIMOIRELAB_JOB_TIMEOUT = int(os.environ.get("GRIMOIRELAB_JOB_TIMEOUT", -1))

GRIMOIRELAB_GIT_STORAGE_PATH = os.environ.get("GRIMOIRELAB_GIT_PATH", "~/.perceval")

#
# Archivist configuration
#
GRIMOIRELAB_ARCHIVIST = {
    "STORAGE_URL": os.environ.get(
        "GRIMOIRELAB_ARCHIVIST_STORAGE_URL", "https://admin:admin@localhost:9200"
    ),
    "STORAGE_USERNAME": os.environ.get("GRIMOIRELAB_ARCHIVIST_STORAGE_USERNAME", ""),
    "STORAGE_PASSWORD": os.environ.get("GRIMOIRELAB_ARCHIVIST_STORAGE_PASSWORD", ""),
    "STORAGE_INDEX": os.environ.get("GRIMOIRELAB_ARCHIVIST_STORAGE_INDEX", "events"),
    "STORAGE_VERIFY_CERT": os.environ.get(
        "GRIMOIRELAB_ARCHIVIST_STORAGE_VERIFY_CERT", "False"
    ).lower()
    in ("true", "1"),
    "BLOCK_TIMEOUT": int(os.environ.get("GRIMOIRELAB_ARCHIVIST_BLOCK_TIMEOUT", 60000)),
    "BULK_SIZE": int(os.environ.get("GRIMOIRELAB_ARCHIVIST_BULK_SIZE", 100)),
    "ROLLOVER_INDICES": os.environ.get("GRIMOIRELAB_ARCHIVIST_ROLLOVER_INDICES", "True").lower()
    in ("true", "1"),
    "ROLLOVER_SIZE": os.environ.get("GRIMOIRELAB_ARCHIVIST_ROLLOVER_SIZE", "20gb"),
}

#
# Session cookies configuration
#
# https://docs.djangoproject.com/en/4.2/topics/http/sessions/#settings
#

SESSION_COOKIE_AGE = 1800
SESSION_COOKIE_SECURE = True
SESSION_SAVE_EVERY_REQUEST = True

#
# drf-spectacular settings
#
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
#

SPECTACULAR_SETTINGS = {"TITLE": "GrimoireLab API", "VERSION": "0.0.1"}

#
# Multi-tenant (not supported yet)
#

MULTI_TENANT = False


# Require authentication when using the API.
# You shouldn't deactivate this option unless you are debugging
# the system or running it in a trusted and safe environment.

SORTINGHAT_AUTHENTICATION_REQUIRED = True

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "graphql_jwt.backends.JSONWebTokenBackend",
]

#
# Graphene - DO NOT MODIFY
#

GRAPHENE = {
    "SCHEMA": "sortinghat.core.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

GRAPHQL_JWT = {"JWT_ALLOW_ANY_HANDLER": "sortinghat.core.middleware.allow_any"}

#
# API default page size
#

SORTINGHAT_API_PAGE_SIZE = 10

#
# genderize.io token, used only for gender recommendations
#

SORTINGHAT_GENDERIZE_API_KEY = os.environ.get("SORTINGHAT_GENDERIZE_API_KEY", None)

#
# Trusted data sources for matching by username
#

MATCH_TRUSTED_SOURCES = os.environ.get(
    "SORTINGHAT_MATCH_TRUSTED_SOURCES", "github,gitlab,slack"
).split(",")
