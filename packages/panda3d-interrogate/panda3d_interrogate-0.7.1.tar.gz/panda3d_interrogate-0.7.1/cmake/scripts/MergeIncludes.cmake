# Filename: MergeIncludes.cmake
#
# Description: When run, creates a single C++ file which expands all local
#   #include statements (ie. those that use double quotes and not angle brackets)
#
# Usage:
#   This script is invoked via add_custom_target, like this:
#   cmake -D OUTPUT_FILE="out.cxx" -D INPUT_FILES="a.h b.h" -P MergeIncludes.cmake
#

cmake_minimum_required(VERSION 3.5)

if(NOT CMAKE_SCRIPT_MODE_FILE)
  message(FATAL_ERROR "MergeIncludes.cmake should not be included but run in script mode.")
  return()
endif()

if(NOT DEFINED OUTPUT_FILE)
  message(FATAL_ERROR "OUTPUT_FILE should be defined when running MergeIncludes.cmake!")
  return()
endif()

file(WRITE "${OUTPUT_FILE}" "/* Generated file.  DO NOT EDIT. */
\n")

separate_arguments(INPUT_FILES)

function(_merge_includes _current_file _output_list_var _output_source_var)
  list(APPEND ${_output_list_var} "${_current_file}")
  set(_other_output_source "${${_output_source_var}}")
  set(_this_output_source "#line 1 \"${_current_file}\"\n")

  # Find all include directives
  file(READ "${_current_file}" _file_content)
  string(REPLACE ";" "\\;" _file_content "${_file_content}")
  string(REPLACE "\r\n" "\n" _file_content "${_file_content}")
  string(REPLACE "\r" "\n" _file_content "${_file_content}")
  string(REPLACE "\\\n" "<ESCAPED_NEWLINE>" _file_content "${_file_content}")
  string(REPLACE "\n" ";" _file_content "${_file_content}")
  string(REPLACE "<ESCAPED_NEWLINE>" "\\\n" _file_content "${_file_content}")
  set(_include_regex "^[ \t]*#[ \t]*include[ \t]+\"([^\"]+)\"")
  set(_pragma_once_regex "^[ \t]*#[ \t]*pragma[ \t]+once")

  get_filename_component(_current_dir "${_current_file}" DIRECTORY)

  foreach(_line IN LISTS _file_content)
    if(_line MATCHES "${_include_regex}")
      set(_include_full_path "${_current_dir}/${CMAKE_MATCH_1}")

      if(EXISTS "${_include_full_path}")
        if ("${_include_full_path}" MATCHES ".[hH](h|pp|xx)?$")
          if(NOT "${_include_full_path}" IN_LIST ${_output_list_var})
            set(_this_output_source "${_this_output_source}//${_line}\n")
            _merge_includes(
              "${_include_full_path}"
              "${_output_list_var}"
              _other_output_source
            )
          else()
            set(_this_output_source "${_this_output_source}//${_line}\n")
          endif()
        else()
          set(_this_output_source "${_this_output_source}//${_line} inlined\n")

          # Do this in-place.
          _merge_includes(
            "${_include_full_path}"
            "${_output_list_var}"
            _this_output_source
          )
        endif()

      else()
        set(_this_output_source "${_this_output_source}${_line}\n")
      endif()

    elseif(_line MATCHES "${_pragma_once_regex}")
      # Strip these out.
      set(_this_output_source "${_this_output_source}//${_line}\n")

    else()
      set(_this_output_source "${_this_output_source}${_line}\n")

    endif()
  endforeach()

  # Propagate the updated lists to the calling scope.
  set(${_output_list_var} ${${_output_list_var}} PARENT_SCOPE)
  set(${_output_source_var} "${_other_output_source}${_this_output_source}" PARENT_SCOPE)
endfunction()

file(WRITE "${OUTPUT_FILE}" "/* Generated by CMake.  DO NOT EDIT. */\n\n")

set(_output_list "")

foreach(infile ${INPUT_FILES})
  get_filename_component(_absfile "${infile}" ABSOLUTE)

  if(NOT "${_absfile}" IN_LIST _output_list)
    set(_output_source "// input file ${infile}\n")
    _merge_includes("${_absfile}" _output_list _output_source)
    file(APPEND "${OUTPUT_FILE}" "${_output_source}")
  endif()
endforeach()
