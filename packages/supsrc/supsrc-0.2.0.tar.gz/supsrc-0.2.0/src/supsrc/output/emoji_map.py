"""Emoji mappings for event types with ASCII fallbacks."""

from __future__ import annotations

from typing import TYPE_CHECKING, ClassVar

if TYPE_CHECKING:
    from supsrc.events.protocol import Event


class EmojiMapper:
    """Provides emoji and ASCII representations for events."""

    # Event type to emoji mapping
    EVENT_TYPE_EMOJIS: ClassVar[dict[str, str]] = {
        "ExternalCommitEvent": "ü§î",  # THINKING FACE
        "ConflictDetectedEvent": "‚ö†Ô∏è",  # WARNING SIGN
        "RepositoryFrozenEvent": "üßä",  # ICE CUBE
        "TestFailureEvent": "üî¨",  # MICROSCOPE
        "LLMVetoEvent": "üß†",  # BRAIN
        "GitCommitEvent": "üìù",  # MEMO
        "GitPushEvent": "üöÄ",  # ROCKET
        "GitStageEvent": "üìã",  # CLIPBOARD
        "GitBranchEvent": "üåø",  # HERB
        "FileChangeEvent": "üìÅ",  # FILE FOLDER
        "BufferedFileChangeEvent": "üì¶",  # PACKAGE
        "RuleTriggeredEvent": "‚è≥",  # HOURGLASS
        "ErrorEvent": "‚ùå",  # CROSS MARK
        "ConfigReloadEvent": "üîÑ",  # RELOAD
        "UserActionEvent": "üë§",  # USER
        "TimerUpdateEvent": "‚è±Ô∏è",  # STOPWATCH
    }

    # Change type emojis (for file events)
    CHANGE_TYPE_EMOJIS: ClassVar[dict[str, str]] = {
        "created": "‚ûï",  # HEAVY PLUS SIGN  # noqa: RUF001
        "modified": "‚úèÔ∏è",  # PENCIL
        "deleted": "‚ûñ",  # HEAVY MINUS SIGN  # noqa: RUF001
        "moved": "üîÑ",  # COUNTERCLOCKWISE ARROWS BUTTON
    }

    # Source emojis (fallback)
    SOURCE_EMOJIS: ClassVar[dict[str, str]] = {
        "git": "üîß",  # WRENCH
        "monitor": "üëÅÔ∏è",  # EYE
        "rules": "‚ö°",  # HIGH VOLTAGE SIGN
        "tui": "üíª",  # PERSONAL COMPUTER
        "buffer": "üìÅ",  # FILE FOLDER
        "system": "‚öôÔ∏è",  # GEAR
    }

    # ASCII fallback mappings
    ASCII_FALLBACKS: ClassVar[dict[str, str]] = {
        "ü§î": "[?]",
        "‚ö†Ô∏è": "[!]",
        "üßä": "[F]",  # Frozen
        "üî¨": "[T]",  # Test
        "üß†": "[A]",  # AI
        "üìù": "[C]",  # Commit
        "üöÄ": "[P]",  # Push
        "üìã": "[S]",  # Stage
        "üåø": "[B]",  # Branch
        "üìÅ": "[F]",  # File
        "üì¶": "[M]",  # Multiple
        "‚è≥": "[R]",  # Rule
        "‚ùå": "[X]",  # Error
        "üîÑ": "[R]",  # Reload
        "üë§": "[U]",  # User
        "‚è±Ô∏è": "[T]",  # Timer
        "‚ûï": "[+]",  # noqa: RUF001
        "‚úèÔ∏è": "[M]",  # Modified
        "‚ûñ": "[-]",  # noqa: RUF001
        "üîß": "[G]",  # Git
        "üëÅÔ∏è": "[W]",  # Watch
        "‚ö°": "[!]",
        "üíª": "[T]",  # TUI
        "‚öôÔ∏è": "[S]",  # System
    }

    @staticmethod
    def get_event_emoji(event: Event, use_ascii: bool = False) -> str:
        """Get appropriate emoji or ASCII representation for an event.

        Args:
            event: Event to get emoji for
            use_ascii: If True, return ASCII fallback instead of emoji

        Returns:
            Emoji or ASCII representation
        """
        # Check for specific event types first
        event_type = type(event).__name__
        if event_type in EmojiMapper.EVENT_TYPE_EMOJIS:
            emoji = EmojiMapper.EVENT_TYPE_EMOJIS[event_type]
            return EmojiMapper.ASCII_FALLBACKS.get(emoji, "[?]") if use_ascii else emoji

        # Check for operation type (BufferedFileChangeEvent)
        if hasattr(event, "operation_type"):
            if event.operation_type == "atomic_rewrite":
                emoji = "üîÑ"
                return EmojiMapper.ASCII_FALLBACKS.get(emoji, "[R]") if use_ascii else emoji
            elif event.operation_type == "batch_operation":
                emoji = "üì¶"
                return EmojiMapper.ASCII_FALLBACKS.get(emoji, "[M]") if use_ascii else emoji

        # Check for primary change type
        if hasattr(event, "primary_change_type"):
            change_type = event.primary_change_type
            if change_type in EmojiMapper.CHANGE_TYPE_EMOJIS:
                emoji = EmojiMapper.CHANGE_TYPE_EMOJIS[change_type]
                return EmojiMapper.ASCII_FALLBACKS.get(emoji, "[?]") if use_ascii else emoji

        # Fallback to source
        source = getattr(event, "source", "unknown")
        emoji = EmojiMapper.SOURCE_EMOJIS.get(source, "üìù")
        return EmojiMapper.ASCII_FALLBACKS.get(emoji, "[?]") if use_ascii else emoji
