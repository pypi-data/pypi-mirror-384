name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        os: ["ubuntu-latest", "windows-latest"]
        backend: ["torch", "tf", "jax"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pyproject.toml
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade tox setuptools
      - name: Restore cached .tox
        id: cache-tox
        uses: actions/cache@v4
        with:
          path: .tox
          key:
            tox-${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.backend }}-${{ hashFiles('pyproject.toml') }}
          restore-keys:
            tox-${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.backend }}
            tox-${{ matrix.python-version }}-${{ matrix.os }}
      - name: Pick proper tox env
        shell: python
        run: |
          import os; import platform; import sys; from pathlib import Path
          platform_mapping = {
              "Linux": "linux",
              "Darwin": "macos",
              "Windows": "win",
          }
          pythonversion = f'py{"" if platform.python_implementation() == "CPython" else "py"}3{sys.version_info.minor}'
          platformversion=platform_mapping[platform.system()]
          toxenv = f"{pythonversion}-{platformversion}"
          toxenv += "-${{ matrix.backend }}"
          set_toxenv_cmd = f"TOXENV={toxenv}"
          print(f"Picked: {toxenv}")
          with Path(os.environ["GITHUB_ENV"]).open("ta") as file_handler:
               file_handler.write(set_toxenv_cmd)
      - name: Run tox target env for ${{ env.TOXENV }}
        run: |
          python -m tox  # launch environment set by TOXENV at previous step
      - name: Check if coverage report exists
        id: check-coverage-report
        run: |
          if [ -f coverage.xml ]; then
            coverage_exists=true
          else
            coverage_exists=false
          fi
          echo ${coverage_exists}
          echo "coverage_exists=${coverage_exists}" >> $GITHUB_OUTPUT
      - name: Export coverage report (if existing)
        if: steps.check-coverage-report.outputs.coverage_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.xml
            coverage_html
