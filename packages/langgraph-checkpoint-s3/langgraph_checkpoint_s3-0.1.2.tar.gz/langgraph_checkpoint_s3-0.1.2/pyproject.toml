[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "langgraph-checkpoint-s3"
version = "0.1.2"
description = "A Python library for LangGraph checkpoint storage using S3"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Jun Kuroda", email = "jkuroda.isa@gmail.com"},
]
keywords = ["langgraph", "checkpoint", "s3", "storage"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
dependencies = [
    "boto3>=1.26.0",
    "botocore>=1.29.0",
    "aioboto3>=15.2.0",
    "langgraph-checkpoint>=2.1.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "types-aioboto3[s3]>=12.0.0",
    "types-boto3-s3 >= 1.40.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/Isa-rentacs/langgraph-checkpoint-s3"
Repository = "https://github.com/Isa-rentacs/langgraph-checkpoint-s3"
Documentation = "https://langgraph-checkpoint-s3.readthedocs.io"
Issues = "https://github.com/Isa-rentacs/langgraph-checkpoint-s3/issues"

[project.scripts]
s3-checkpoint = "langgraph_checkpoint_s3.cli.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/langgraph_checkpoint_s3"]

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["langgraph_checkpoint_s3"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "src/langgraph_checkpoint_s3/cli/.*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/langgraph_checkpoint_s3",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/langgraph_checkpoint_s3 --cov-report=term-missing --cov-report=html --cov-report=xml {args:tests}"
cov-report = ["test-cov", "python -m webbrowser htmlcov/index.html"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12", "3.13", "3.14"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.1.0",
]

[tool.hatch.envs.lint.scripts]
check = [
    "ruff check src tests",
    "ruff format --check src tests",
]
format = [
    "ruff check --fix src tests",
    "ruff format src tests",
]

[tool.hatch.envs.type-check]
dependencies = [
    "mypy>=1.0.0",
    "boto3-stubs[s3]>=1.26.0",
    "types-aioboto3[s3]>=12.0.0",
    "types-boto3-s3>=1.40.0"
]

[tool.hatch.envs.type-check.scripts]
check = "mypy src"

[tool.hatch.envs.ci]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "boto3-stubs[s3]>=1.26.0",
    "types-aioboto3[s3]>=12.0.0",
    "twine",
]

[tool.hatch.envs.ci.scripts]
check-all = [
    "echo '=== Running CI Pipeline ==='",
    "echo 'Step 1: Linting checks...'",
    "hatch run lint:check",
    "echo 'Step 2: Type checking...'", 
    "hatch run type-check:check",
    "echo 'Step 3: Running tests with coverage...'",
    "hatch run all:test-cov",
    "echo 'Step 4: Building package...'",
    "hatch build",
    "echo 'Step 5: Checking built package...'",
    "twine check dist/*",
    "echo '=== CI Pipeline Completed Successfully ==='",
]
# Individual steps for debugging (reference existing environments)
lint = "hatch run lint:check"
type-check = "hatch run type-check:check"
test = "hatch run test-cov"
build = "hatch build"
check-dist = "twine check dist/*"

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server 8000 -d docs/_build/html"
