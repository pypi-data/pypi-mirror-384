# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import beaker_pb2 as beaker__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in beaker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BeakerStub(object):
    """Services:

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTokenForGoogleUID = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateTokenForGoogleUID',
                request_serializer=beaker__pb2.CreateTokenForGoogleUIDRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateTokenForGoogleUIDResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/allenai.beaker.Beaker/GetUser',
                request_serializer=beaker__pb2.GetUserRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.ResolveUserName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveUserName',
                request_serializer=beaker__pb2.ResolveUserNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveUserNameResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/allenai.beaker.Beaker/ListUsers',
                request_serializer=beaker__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListUsersResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateUser',
                request_serializer=beaker__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateUser',
                request_serializer=beaker__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateUserResponse.FromString,
                _registered_method=True)
        self.RegenerateUserAuthToken = channel.unary_unary(
                '/allenai.beaker.Beaker/RegenerateUserAuthToken',
                request_serializer=beaker__pb2.RegenerateUserAuthTokenRequest.SerializeToString,
                response_deserializer=beaker__pb2.RegenerateUserAuthTokenResponse.FromString,
                _registered_method=True)
        self.GetOrganization = channel.unary_unary(
                '/allenai.beaker.Beaker/GetOrganization',
                request_serializer=beaker__pb2.GetOrganizationRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetOrganizationResponse.FromString,
                _registered_method=True)
        self.ResolveOrganizationName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveOrganizationName',
                request_serializer=beaker__pb2.ResolveOrganizationNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveOrganizationNameResponse.FromString,
                _registered_method=True)
        self.ListOrganizations = channel.unary_unary(
                '/allenai.beaker.Beaker/ListOrganizations',
                request_serializer=beaker__pb2.ListOrganizationsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListOrganizationsResponse.FromString,
                _registered_method=True)
        self.GetWorkspace = channel.unary_unary(
                '/allenai.beaker.Beaker/GetWorkspace',
                request_serializer=beaker__pb2.GetWorkspaceRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetWorkspaceResponse.FromString,
                _registered_method=True)
        self.ResolveWorkspaceName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveWorkspaceName',
                request_serializer=beaker__pb2.ResolveWorkspaceNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveWorkspaceNameResponse.FromString,
                _registered_method=True)
        self.ListWorkspaces = channel.unary_unary(
                '/allenai.beaker.Beaker/ListWorkspaces',
                request_serializer=beaker__pb2.ListWorkspacesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListWorkspacesResponse.FromString,
                _registered_method=True)
        self.CreateWorkspace = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateWorkspace',
                request_serializer=beaker__pb2.CreateWorkspaceRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateWorkspaceResponse.FromString,
                _registered_method=True)
        self.UpdateWorkspace = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateWorkspace',
                request_serializer=beaker__pb2.UpdateWorkspaceRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateWorkspaceResponse.FromString,
                _registered_method=True)
        self.TransferIntoWorkspace = channel.unary_unary(
                '/allenai.beaker.Beaker/TransferIntoWorkspace',
                request_serializer=beaker__pb2.TransferIntoWorkspaceRequest.SerializeToString,
                response_deserializer=beaker__pb2.TransferIntoWorkspaceResponse.FromString,
                _registered_method=True)
        self.UpdateWorkspaceSlotLimitNonPreemptible = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateWorkspaceSlotLimitNonPreemptible',
                request_serializer=beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleResponse.FromString,
                _registered_method=True)
        self.UpdateWorkspaceSlotLimitPreemptible = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateWorkspaceSlotLimitPreemptible',
                request_serializer=beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleResponse.FromString,
                _registered_method=True)
        self.GetCluster = channel.unary_unary(
                '/allenai.beaker.Beaker/GetCluster',
                request_serializer=beaker__pb2.GetClusterRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetClusterResponse.FromString,
                _registered_method=True)
        self.ResolveClusterName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveClusterName',
                request_serializer=beaker__pb2.ResolveClusterNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveClusterNameResponse.FromString,
                _registered_method=True)
        self.ListClusters = channel.unary_unary(
                '/allenai.beaker.Beaker/ListClusters',
                request_serializer=beaker__pb2.ListClustersRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListClustersResponse.FromString,
                _registered_method=True)
        self.CreateCluster = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateCluster',
                request_serializer=beaker__pb2.CreateClusterRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateClusterResponse.FromString,
                _registered_method=True)
        self.UpdateCluster = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateCluster',
                request_serializer=beaker__pb2.UpdateClusterRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateClusterResponse.FromString,
                _registered_method=True)
        self.UpdateClusterRestrictions = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateClusterRestrictions',
                request_serializer=beaker__pb2.UpdateClusterRestrictionsRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateClusterRestrictionsResponse.FromString,
                _registered_method=True)
        self.ListClusterSlotUsage = channel.unary_unary(
                '/allenai.beaker.Beaker/ListClusterSlotUsage',
                request_serializer=beaker__pb2.ListClusterSlotUsageRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListClusterSlotUsageResponse.FromString,
                _registered_method=True)
        self.UpdateClusterName = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateClusterName',
                request_serializer=beaker__pb2.UpdateClusterNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateClusterNameResponse.FromString,
                _registered_method=True)
        self.CreateClusterAlias = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateClusterAlias',
                request_serializer=beaker__pb2.CreateClusterAliasRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateClusterAliasResponse.FromString,
                _registered_method=True)
        self.DeleteCluster = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteCluster',
                request_serializer=beaker__pb2.DeleteClusterRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteClusterResponse.FromString,
                _registered_method=True)
        self.GetNode = channel.unary_unary(
                '/allenai.beaker.Beaker/GetNode',
                request_serializer=beaker__pb2.GetNodeRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetNodeResponse.FromString,
                _registered_method=True)
        self.ListNodes = channel.unary_unary(
                '/allenai.beaker.Beaker/ListNodes',
                request_serializer=beaker__pb2.ListNodesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListNodesResponse.FromString,
                _registered_method=True)
        self.CordonNode = channel.unary_unary(
                '/allenai.beaker.Beaker/CordonNode',
                request_serializer=beaker__pb2.CordonNodeRequest.SerializeToString,
                response_deserializer=beaker__pb2.CordonNodeResponse.FromString,
                _registered_method=True)
        self.DeleteNode = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteNode',
                request_serializer=beaker__pb2.DeleteNodeRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteNodeResponse.FromString,
                _registered_method=True)
        self.GetJobBind = channel.unary_unary(
                '/allenai.beaker.Beaker/GetJobBind',
                request_serializer=beaker__pb2.GetJobBindRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetJobBindResponse.FromString,
                _registered_method=True)
        self.CreateNodeEvents = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateNodeEvents',
                request_serializer=beaker__pb2.CreateNodeEventsRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateNodeEventsResponse.FromString,
                _registered_method=True)
        self.ListNodeEvents = channel.unary_unary(
                '/allenai.beaker.Beaker/ListNodeEvents',
                request_serializer=beaker__pb2.ListNodeEventsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListNodeEventsResponse.FromString,
                _registered_method=True)
        self.ProcessNodeEvent = channel.unary_unary(
                '/allenai.beaker.Beaker/ProcessNodeEvent',
                request_serializer=beaker__pb2.ProcessNodeEventRequest.SerializeToString,
                response_deserializer=beaker__pb2.ProcessNodeEventResponse.FromString,
                _registered_method=True)
        self.RecordGPUHealth = channel.unary_unary(
                '/allenai.beaker.Beaker/RecordGPUHealth',
                request_serializer=beaker__pb2.RecordGPUHealthRequest.SerializeToString,
                response_deserializer=beaker__pb2.RecordGPUHealthResponse.FromString,
                _registered_method=True)
        self.GetWorkload = channel.unary_unary(
                '/allenai.beaker.Beaker/GetWorkload',
                request_serializer=beaker__pb2.GetWorkloadRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetWorkloadResponse.FromString,
                _registered_method=True)
        self.ResolveWorkloadName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveWorkloadName',
                request_serializer=beaker__pb2.ResolveWorkloadNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveWorkloadNameResponse.FromString,
                _registered_method=True)
        self.ListWorkloads = channel.unary_unary(
                '/allenai.beaker.Beaker/ListWorkloads',
                request_serializer=beaker__pb2.ListWorkloadsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListWorkloadsResponse.FromString,
                _registered_method=True)
        self.UpdateWorkload = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateWorkload',
                request_serializer=beaker__pb2.UpdateWorkloadRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateWorkloadResponse.FromString,
                _registered_method=True)
        self.CancelWorkloads = channel.unary_unary(
                '/allenai.beaker.Beaker/CancelWorkloads',
                request_serializer=beaker__pb2.CancelWorkloadsRequest.SerializeToString,
                response_deserializer=beaker__pb2.CancelWorkloadsResponse.FromString,
                _registered_method=True)
        self.DeleteWorkloads = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteWorkloads',
                request_serializer=beaker__pb2.DeleteWorkloadsRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteWorkloadsResponse.FromString,
                _registered_method=True)
        self.GetJob = channel.unary_unary(
                '/allenai.beaker.Beaker/GetJob',
                request_serializer=beaker__pb2.GetJobRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetJobResponse.FromString,
                _registered_method=True)
        self.ListJobs = channel.unary_unary(
                '/allenai.beaker.Beaker/ListJobs',
                request_serializer=beaker__pb2.ListJobsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListJobsResponse.FromString,
                _registered_method=True)
        self.ScheduleJobs = channel.unary_unary(
                '/allenai.beaker.Beaker/ScheduleJobs',
                request_serializer=beaker__pb2.ScheduleJobsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ScheduleJobsResponse.FromString,
                _registered_method=True)
        self.UpdateJobSourcePriority = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateJobSourcePriority',
                request_serializer=beaker__pb2.UpdateJobSourcePriorityRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateJobSourcePriorityResponse.FromString,
                _registered_method=True)
        self.PreemptJob = channel.unary_unary(
                '/allenai.beaker.Beaker/PreemptJob',
                request_serializer=beaker__pb2.PreemptJobRequest.SerializeToString,
                response_deserializer=beaker__pb2.PreemptJobResponse.FromString,
                _registered_method=True)
        self.RescheduleJob = channel.unary_unary(
                '/allenai.beaker.Beaker/RescheduleJob',
                request_serializer=beaker__pb2.RescheduleJobRequest.SerializeToString,
                response_deserializer=beaker__pb2.RescheduleJobResponse.FromString,
                _registered_method=True)
        self.StreamJobLogs = channel.unary_stream(
                '/allenai.beaker.Beaker/StreamJobLogs',
                request_serializer=beaker__pb2.StreamJobLogsRequest.SerializeToString,
                response_deserializer=beaker__pb2.JobLog.FromString,
                _registered_method=True)
        self.CreateJobEvents = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateJobEvents',
                request_serializer=beaker__pb2.CreateJobEventsRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateJobEventsResponse.FromString,
                _registered_method=True)
        self.ListSummarizedJobEvents = channel.unary_unary(
                '/allenai.beaker.Beaker/ListSummarizedJobEvents',
                request_serializer=beaker__pb2.ListSummarizedJobEventsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListSummarizedJobEventsResponse.FromString,
                _registered_method=True)
        self.UpdateJobQueue = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateJobQueue',
                request_serializer=beaker__pb2.UpdateJobQueueRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateJobQueueResponse.FromString,
                _registered_method=True)
        self.GetExperimentYamlSpec = channel.unary_unary(
                '/allenai.beaker.Beaker/GetExperimentYamlSpec',
                request_serializer=beaker__pb2.GetExperimentYamlSpecRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetExperimentYamlSpecResponse.FromString,
                _registered_method=True)
        self.RestartExperimentTasks = channel.unary_unary(
                '/allenai.beaker.Beaker/RestartExperimentTasks',
                request_serializer=beaker__pb2.RestartExperimentTasksRequest.SerializeToString,
                response_deserializer=beaker__pb2.RestartExperimentTasksResponse.FromString,
                _registered_method=True)
        self.GetImage = channel.unary_unary(
                '/allenai.beaker.Beaker/GetImage',
                request_serializer=beaker__pb2.GetImageRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetImageResponse.FromString,
                _registered_method=True)
        self.ResolveImageName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveImageName',
                request_serializer=beaker__pb2.ResolveImageNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveImageNameResponse.FromString,
                _registered_method=True)
        self.ListImages = channel.unary_unary(
                '/allenai.beaker.Beaker/ListImages',
                request_serializer=beaker__pb2.ListImagesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListImagesResponse.FromString,
                _registered_method=True)
        self.UpdateImage = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateImage',
                request_serializer=beaker__pb2.UpdateImageRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateImageResponse.FromString,
                _registered_method=True)
        self.DeleteImages = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteImages',
                request_serializer=beaker__pb2.DeleteImagesRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteImagesResponse.FromString,
                _registered_method=True)
        self.GetSecret = channel.unary_unary(
                '/allenai.beaker.Beaker/GetSecret',
                request_serializer=beaker__pb2.GetSecretRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetSecretResponse.FromString,
                _registered_method=True)
        self.ListSecrets = channel.unary_unary(
                '/allenai.beaker.Beaker/ListSecrets',
                request_serializer=beaker__pb2.ListSecretsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListSecretsResponse.FromString,
                _registered_method=True)
        self.ListGroups = channel.unary_unary(
                '/allenai.beaker.Beaker/ListGroups',
                request_serializer=beaker__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListGroupsResponse.FromString,
                _registered_method=True)
        self.GetGroup = channel.unary_unary(
                '/allenai.beaker.Beaker/GetGroup',
                request_serializer=beaker__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetGroupResponse.FromString,
                _registered_method=True)
        self.UpdateGroup = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateGroup',
                request_serializer=beaker__pb2.UpdateGroupRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateGroupResponse.FromString,
                _registered_method=True)
        self.CreateGroup = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateGroup',
                request_serializer=beaker__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateGroupResponse.FromString,
                _registered_method=True)
        self.ListGroupTaskMetrics = channel.unary_unary(
                '/allenai.beaker.Beaker/ListGroupTaskMetrics',
                request_serializer=beaker__pb2.ListGroupTaskMetricsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListGroupTaskMetricsResponse.FromString,
                _registered_method=True)
        self.GetGroupMetricsExport = channel.unary_unary(
                '/allenai.beaker.Beaker/GetGroupMetricsExport',
                request_serializer=beaker__pb2.GetGroupMetricsExportRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetGroupMetricsExportResponse.FromString,
                _registered_method=True)
        self.DeleteGroups = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteGroups',
                request_serializer=beaker__pb2.DeleteGroupsRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteGroupsResponse.FromString,
                _registered_method=True)
        self.GetDataset = channel.unary_unary(
                '/allenai.beaker.Beaker/GetDataset',
                request_serializer=beaker__pb2.GetDatasetRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetDatasetResponse.FromString,
                _registered_method=True)
        self.ResolveDatasetName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveDatasetName',
                request_serializer=beaker__pb2.ResolveDatasetNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveDatasetNameResponse.FromString,
                _registered_method=True)
        self.ListDatasets = channel.unary_unary(
                '/allenai.beaker.Beaker/ListDatasets',
                request_serializer=beaker__pb2.ListDatasetsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListDatasetsResponse.FromString,
                _registered_method=True)
        self.UpdateDataset = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateDataset',
                request_serializer=beaker__pb2.UpdateDatasetRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateDatasetResponse.FromString,
                _registered_method=True)
        self.ListDatasetFiles = channel.unary_unary(
                '/allenai.beaker.Beaker/ListDatasetFiles',
                request_serializer=beaker__pb2.ListDatasetFilesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListDatasetFilesResponse.FromString,
                _registered_method=True)
        self.GetDatasetFileLink = channel.unary_unary(
                '/allenai.beaker.Beaker/GetDatasetFileLink',
                request_serializer=beaker__pb2.GetDatasetFileLinkRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetDatasetFileLinkResponse.FromString,
                _registered_method=True)
        self.DeleteDatasets = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteDatasets',
                request_serializer=beaker__pb2.DeleteDatasetsRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteDatasetsResponse.FromString,
                _registered_method=True)
        self.GetSchedulerRun = channel.unary_unary(
                '/allenai.beaker.Beaker/GetSchedulerRun',
                request_serializer=beaker__pb2.GetSchedulerRunRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetSchedulerRunResponse.FromString,
                _registered_method=True)
        self.GetGPUUsageByBudget = channel.unary_unary(
                '/allenai.beaker.Beaker/GetGPUUsageByBudget',
                request_serializer=beaker__pb2.GetGPUUsageByBudgetRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetGPUUsageByBudgetResponse.FromString,
                _registered_method=True)
        self.GetGPUUsageReport = channel.unary_unary(
                '/allenai.beaker.Beaker/GetGPUUsageReport',
                request_serializer=beaker__pb2.GetGPUUsageReportRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetGPUUsageReportResponse.FromString,
                _registered_method=True)
        self.CreateHealthcheck = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateHealthcheck',
                request_serializer=beaker__pb2.CreateHealthcheckRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateHealthcheckResponse.FromString,
                _registered_method=True)
        self.GetBudget = channel.unary_unary(
                '/allenai.beaker.Beaker/GetBudget',
                request_serializer=beaker__pb2.GetBudgetRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetBudgetResponse.FromString,
                _registered_method=True)
        self.ResolveBudgetName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveBudgetName',
                request_serializer=beaker__pb2.ResolveBudgetNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveBudgetNameResponse.FromString,
                _registered_method=True)
        self.ListBudgets = channel.unary_unary(
                '/allenai.beaker.Beaker/ListBudgets',
                request_serializer=beaker__pb2.ListBudgetsRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListBudgetsResponse.FromString,
                _registered_method=True)
        self.CreateBudget = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateBudget',
                request_serializer=beaker__pb2.CreateBudgetRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateBudgetResponse.FromString,
                _registered_method=True)
        self.UpdateBudget = channel.unary_unary(
                '/allenai.beaker.Beaker/UpdateBudget',
                request_serializer=beaker__pb2.UpdateBudgetRequest.SerializeToString,
                response_deserializer=beaker__pb2.UpdateBudgetResponse.FromString,
                _registered_method=True)
        self.CreateQueue = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateQueue',
                request_serializer=beaker__pb2.CreateQueueRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateQueueResponse.FromString,
                _registered_method=True)
        self.GetQueue = channel.unary_unary(
                '/allenai.beaker.Beaker/GetQueue',
                request_serializer=beaker__pb2.GetQueueRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetQueueResponse.FromString,
                _registered_method=True)
        self.ResolveQueueName = channel.unary_unary(
                '/allenai.beaker.Beaker/ResolveQueueName',
                request_serializer=beaker__pb2.ResolveQueueNameRequest.SerializeToString,
                response_deserializer=beaker__pb2.ResolveQueueNameResponse.FromString,
                _registered_method=True)
        self.ListQueues = channel.unary_unary(
                '/allenai.beaker.Beaker/ListQueues',
                request_serializer=beaker__pb2.ListQueuesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListQueuesResponse.FromString,
                _registered_method=True)
        self.DeleteQueues = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteQueues',
                request_serializer=beaker__pb2.DeleteQueuesRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteQueuesResponse.FromString,
                _registered_method=True)
        self.CreateQueueWorker = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateQueueWorker',
                request_serializer=beaker__pb2.CreateQueueWorkerRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateQueueWorkerResponse.FromString,
                _registered_method=True)
        self.ListQueueWorkers = channel.unary_unary(
                '/allenai.beaker.Beaker/ListQueueWorkers',
                request_serializer=beaker__pb2.ListQueueWorkersRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListQueueWorkersResponse.FromString,
                _registered_method=True)
        self.CreateQueueEntry = channel.unary_stream(
                '/allenai.beaker.Beaker/CreateQueueEntry',
                request_serializer=beaker__pb2.CreateQueueEntryRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateQueueEntryResponse.FromString,
                _registered_method=True)
        self.ProcessQueueEntries = channel.stream_stream(
                '/allenai.beaker.Beaker/ProcessQueueEntries',
                request_serializer=beaker__pb2.ProcessQueueEntriesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ProcessQueueEntriesResponse.FromString,
                _registered_method=True)
        self.GetQueueEntry = channel.unary_unary(
                '/allenai.beaker.Beaker/GetQueueEntry',
                request_serializer=beaker__pb2.GetQueueEntryRequest.SerializeToString,
                response_deserializer=beaker__pb2.GetQueueEntryResponse.FromString,
                _registered_method=True)
        self.ListQueueEntries = channel.unary_unary(
                '/allenai.beaker.Beaker/ListQueueEntries',
                request_serializer=beaker__pb2.ListQueueEntriesRequest.SerializeToString,
                response_deserializer=beaker__pb2.ListQueueEntriesResponse.FromString,
                _registered_method=True)
        self.CreateClusterTag = channel.unary_unary(
                '/allenai.beaker.Beaker/CreateClusterTag',
                request_serializer=beaker__pb2.CreateClusterTagRequest.SerializeToString,
                response_deserializer=beaker__pb2.CreateClusterTagResponse.FromString,
                _registered_method=True)
        self.DeleteClusterTag = channel.unary_unary(
                '/allenai.beaker.Beaker/DeleteClusterTag',
                request_serializer=beaker__pb2.DeleteClusterTagRequest.SerializeToString,
                response_deserializer=beaker__pb2.DeleteClusterTagResponse.FromString,
                _registered_method=True)


class BeakerServicer(object):
    """Services:

    """

    def CreateTokenForGoogleUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveUserName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegenerateUserAuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrganization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveOrganizationName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOrganizations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveWorkspaceName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkspaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferIntoWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkspaceSlotLimitNonPreemptible(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkspaceSlotLimitPreemptible(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveClusterName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClusters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClusterRestrictions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClusterSlotUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClusterName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateClusterAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CordonNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobBind(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNodeEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodeEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessNodeEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordGPUHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveWorkloadName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkloads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelWorkloads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkloads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateJobSourcePriority(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreemptJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RescheduleJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamJobLogs(self, request, context):
        """buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateJobEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSummarizedJobEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateJobQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentYamlSpec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartExperimentTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveImageName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSecrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupTaskMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupMetricsExport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveDatasetName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasetFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatasetFileLink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSchedulerRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGPUUsageByBudget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGPUUsageReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateHealthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBudget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveBudgetName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBudgets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBudget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBudget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveQueueName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQueueWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQueueWorkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQueueEntry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessQueueEntries(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueEntry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQueueEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateClusterTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClusterTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BeakerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTokenForGoogleUID': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTokenForGoogleUID,
                    request_deserializer=beaker__pb2.CreateTokenForGoogleUIDRequest.FromString,
                    response_serializer=beaker__pb2.CreateTokenForGoogleUIDResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=beaker__pb2.GetUserRequest.FromString,
                    response_serializer=beaker__pb2.GetUserResponse.SerializeToString,
            ),
            'ResolveUserName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveUserName,
                    request_deserializer=beaker__pb2.ResolveUserNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveUserNameResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=beaker__pb2.ListUsersRequest.FromString,
                    response_serializer=beaker__pb2.ListUsersResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=beaker__pb2.CreateUserRequest.FromString,
                    response_serializer=beaker__pb2.CreateUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=beaker__pb2.UpdateUserRequest.FromString,
                    response_serializer=beaker__pb2.UpdateUserResponse.SerializeToString,
            ),
            'RegenerateUserAuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RegenerateUserAuthToken,
                    request_deserializer=beaker__pb2.RegenerateUserAuthTokenRequest.FromString,
                    response_serializer=beaker__pb2.RegenerateUserAuthTokenResponse.SerializeToString,
            ),
            'GetOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganization,
                    request_deserializer=beaker__pb2.GetOrganizationRequest.FromString,
                    response_serializer=beaker__pb2.GetOrganizationResponse.SerializeToString,
            ),
            'ResolveOrganizationName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveOrganizationName,
                    request_deserializer=beaker__pb2.ResolveOrganizationNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveOrganizationNameResponse.SerializeToString,
            ),
            'ListOrganizations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOrganizations,
                    request_deserializer=beaker__pb2.ListOrganizationsRequest.FromString,
                    response_serializer=beaker__pb2.ListOrganizationsResponse.SerializeToString,
            ),
            'GetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkspace,
                    request_deserializer=beaker__pb2.GetWorkspaceRequest.FromString,
                    response_serializer=beaker__pb2.GetWorkspaceResponse.SerializeToString,
            ),
            'ResolveWorkspaceName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveWorkspaceName,
                    request_deserializer=beaker__pb2.ResolveWorkspaceNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveWorkspaceNameResponse.SerializeToString,
            ),
            'ListWorkspaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkspaces,
                    request_deserializer=beaker__pb2.ListWorkspacesRequest.FromString,
                    response_serializer=beaker__pb2.ListWorkspacesResponse.SerializeToString,
            ),
            'CreateWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkspace,
                    request_deserializer=beaker__pb2.CreateWorkspaceRequest.FromString,
                    response_serializer=beaker__pb2.CreateWorkspaceResponse.SerializeToString,
            ),
            'UpdateWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkspace,
                    request_deserializer=beaker__pb2.UpdateWorkspaceRequest.FromString,
                    response_serializer=beaker__pb2.UpdateWorkspaceResponse.SerializeToString,
            ),
            'TransferIntoWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferIntoWorkspace,
                    request_deserializer=beaker__pb2.TransferIntoWorkspaceRequest.FromString,
                    response_serializer=beaker__pb2.TransferIntoWorkspaceResponse.SerializeToString,
            ),
            'UpdateWorkspaceSlotLimitNonPreemptible': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkspaceSlotLimitNonPreemptible,
                    request_deserializer=beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleRequest.FromString,
                    response_serializer=beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleResponse.SerializeToString,
            ),
            'UpdateWorkspaceSlotLimitPreemptible': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkspaceSlotLimitPreemptible,
                    request_deserializer=beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleRequest.FromString,
                    response_serializer=beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleResponse.SerializeToString,
            ),
            'GetCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCluster,
                    request_deserializer=beaker__pb2.GetClusterRequest.FromString,
                    response_serializer=beaker__pb2.GetClusterResponse.SerializeToString,
            ),
            'ResolveClusterName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveClusterName,
                    request_deserializer=beaker__pb2.ResolveClusterNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveClusterNameResponse.SerializeToString,
            ),
            'ListClusters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClusters,
                    request_deserializer=beaker__pb2.ListClustersRequest.FromString,
                    response_serializer=beaker__pb2.ListClustersResponse.SerializeToString,
            ),
            'CreateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCluster,
                    request_deserializer=beaker__pb2.CreateClusterRequest.FromString,
                    response_serializer=beaker__pb2.CreateClusterResponse.SerializeToString,
            ),
            'UpdateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCluster,
                    request_deserializer=beaker__pb2.UpdateClusterRequest.FromString,
                    response_serializer=beaker__pb2.UpdateClusterResponse.SerializeToString,
            ),
            'UpdateClusterRestrictions': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClusterRestrictions,
                    request_deserializer=beaker__pb2.UpdateClusterRestrictionsRequest.FromString,
                    response_serializer=beaker__pb2.UpdateClusterRestrictionsResponse.SerializeToString,
            ),
            'ListClusterSlotUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClusterSlotUsage,
                    request_deserializer=beaker__pb2.ListClusterSlotUsageRequest.FromString,
                    response_serializer=beaker__pb2.ListClusterSlotUsageResponse.SerializeToString,
            ),
            'UpdateClusterName': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClusterName,
                    request_deserializer=beaker__pb2.UpdateClusterNameRequest.FromString,
                    response_serializer=beaker__pb2.UpdateClusterNameResponse.SerializeToString,
            ),
            'CreateClusterAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClusterAlias,
                    request_deserializer=beaker__pb2.CreateClusterAliasRequest.FromString,
                    response_serializer=beaker__pb2.CreateClusterAliasResponse.SerializeToString,
            ),
            'DeleteCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCluster,
                    request_deserializer=beaker__pb2.DeleteClusterRequest.FromString,
                    response_serializer=beaker__pb2.DeleteClusterResponse.SerializeToString,
            ),
            'GetNode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNode,
                    request_deserializer=beaker__pb2.GetNodeRequest.FromString,
                    response_serializer=beaker__pb2.GetNodeResponse.SerializeToString,
            ),
            'ListNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodes,
                    request_deserializer=beaker__pb2.ListNodesRequest.FromString,
                    response_serializer=beaker__pb2.ListNodesResponse.SerializeToString,
            ),
            'CordonNode': grpc.unary_unary_rpc_method_handler(
                    servicer.CordonNode,
                    request_deserializer=beaker__pb2.CordonNodeRequest.FromString,
                    response_serializer=beaker__pb2.CordonNodeResponse.SerializeToString,
            ),
            'DeleteNode': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNode,
                    request_deserializer=beaker__pb2.DeleteNodeRequest.FromString,
                    response_serializer=beaker__pb2.DeleteNodeResponse.SerializeToString,
            ),
            'GetJobBind': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobBind,
                    request_deserializer=beaker__pb2.GetJobBindRequest.FromString,
                    response_serializer=beaker__pb2.GetJobBindResponse.SerializeToString,
            ),
            'CreateNodeEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNodeEvents,
                    request_deserializer=beaker__pb2.CreateNodeEventsRequest.FromString,
                    response_serializer=beaker__pb2.CreateNodeEventsResponse.SerializeToString,
            ),
            'ListNodeEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodeEvents,
                    request_deserializer=beaker__pb2.ListNodeEventsRequest.FromString,
                    response_serializer=beaker__pb2.ListNodeEventsResponse.SerializeToString,
            ),
            'ProcessNodeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessNodeEvent,
                    request_deserializer=beaker__pb2.ProcessNodeEventRequest.FromString,
                    response_serializer=beaker__pb2.ProcessNodeEventResponse.SerializeToString,
            ),
            'RecordGPUHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordGPUHealth,
                    request_deserializer=beaker__pb2.RecordGPUHealthRequest.FromString,
                    response_serializer=beaker__pb2.RecordGPUHealthResponse.SerializeToString,
            ),
            'GetWorkload': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkload,
                    request_deserializer=beaker__pb2.GetWorkloadRequest.FromString,
                    response_serializer=beaker__pb2.GetWorkloadResponse.SerializeToString,
            ),
            'ResolveWorkloadName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveWorkloadName,
                    request_deserializer=beaker__pb2.ResolveWorkloadNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveWorkloadNameResponse.SerializeToString,
            ),
            'ListWorkloads': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkloads,
                    request_deserializer=beaker__pb2.ListWorkloadsRequest.FromString,
                    response_serializer=beaker__pb2.ListWorkloadsResponse.SerializeToString,
            ),
            'UpdateWorkload': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkload,
                    request_deserializer=beaker__pb2.UpdateWorkloadRequest.FromString,
                    response_serializer=beaker__pb2.UpdateWorkloadResponse.SerializeToString,
            ),
            'CancelWorkloads': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelWorkloads,
                    request_deserializer=beaker__pb2.CancelWorkloadsRequest.FromString,
                    response_serializer=beaker__pb2.CancelWorkloadsResponse.SerializeToString,
            ),
            'DeleteWorkloads': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkloads,
                    request_deserializer=beaker__pb2.DeleteWorkloadsRequest.FromString,
                    response_serializer=beaker__pb2.DeleteWorkloadsResponse.SerializeToString,
            ),
            'GetJob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJob,
                    request_deserializer=beaker__pb2.GetJobRequest.FromString,
                    response_serializer=beaker__pb2.GetJobResponse.SerializeToString,
            ),
            'ListJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListJobs,
                    request_deserializer=beaker__pb2.ListJobsRequest.FromString,
                    response_serializer=beaker__pb2.ListJobsResponse.SerializeToString,
            ),
            'ScheduleJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleJobs,
                    request_deserializer=beaker__pb2.ScheduleJobsRequest.FromString,
                    response_serializer=beaker__pb2.ScheduleJobsResponse.SerializeToString,
            ),
            'UpdateJobSourcePriority': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateJobSourcePriority,
                    request_deserializer=beaker__pb2.UpdateJobSourcePriorityRequest.FromString,
                    response_serializer=beaker__pb2.UpdateJobSourcePriorityResponse.SerializeToString,
            ),
            'PreemptJob': grpc.unary_unary_rpc_method_handler(
                    servicer.PreemptJob,
                    request_deserializer=beaker__pb2.PreemptJobRequest.FromString,
                    response_serializer=beaker__pb2.PreemptJobResponse.SerializeToString,
            ),
            'RescheduleJob': grpc.unary_unary_rpc_method_handler(
                    servicer.RescheduleJob,
                    request_deserializer=beaker__pb2.RescheduleJobRequest.FromString,
                    response_serializer=beaker__pb2.RescheduleJobResponse.SerializeToString,
            ),
            'StreamJobLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamJobLogs,
                    request_deserializer=beaker__pb2.StreamJobLogsRequest.FromString,
                    response_serializer=beaker__pb2.JobLog.SerializeToString,
            ),
            'CreateJobEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateJobEvents,
                    request_deserializer=beaker__pb2.CreateJobEventsRequest.FromString,
                    response_serializer=beaker__pb2.CreateJobEventsResponse.SerializeToString,
            ),
            'ListSummarizedJobEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSummarizedJobEvents,
                    request_deserializer=beaker__pb2.ListSummarizedJobEventsRequest.FromString,
                    response_serializer=beaker__pb2.ListSummarizedJobEventsResponse.SerializeToString,
            ),
            'UpdateJobQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateJobQueue,
                    request_deserializer=beaker__pb2.UpdateJobQueueRequest.FromString,
                    response_serializer=beaker__pb2.UpdateJobQueueResponse.SerializeToString,
            ),
            'GetExperimentYamlSpec': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentYamlSpec,
                    request_deserializer=beaker__pb2.GetExperimentYamlSpecRequest.FromString,
                    response_serializer=beaker__pb2.GetExperimentYamlSpecResponse.SerializeToString,
            ),
            'RestartExperimentTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartExperimentTasks,
                    request_deserializer=beaker__pb2.RestartExperimentTasksRequest.FromString,
                    response_serializer=beaker__pb2.RestartExperimentTasksResponse.SerializeToString,
            ),
            'GetImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=beaker__pb2.GetImageRequest.FromString,
                    response_serializer=beaker__pb2.GetImageResponse.SerializeToString,
            ),
            'ResolveImageName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveImageName,
                    request_deserializer=beaker__pb2.ResolveImageNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveImageNameResponse.SerializeToString,
            ),
            'ListImages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListImages,
                    request_deserializer=beaker__pb2.ListImagesRequest.FromString,
                    response_serializer=beaker__pb2.ListImagesResponse.SerializeToString,
            ),
            'UpdateImage': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateImage,
                    request_deserializer=beaker__pb2.UpdateImageRequest.FromString,
                    response_serializer=beaker__pb2.UpdateImageResponse.SerializeToString,
            ),
            'DeleteImages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteImages,
                    request_deserializer=beaker__pb2.DeleteImagesRequest.FromString,
                    response_serializer=beaker__pb2.DeleteImagesResponse.SerializeToString,
            ),
            'GetSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecret,
                    request_deserializer=beaker__pb2.GetSecretRequest.FromString,
                    response_serializer=beaker__pb2.GetSecretResponse.SerializeToString,
            ),
            'ListSecrets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSecrets,
                    request_deserializer=beaker__pb2.ListSecretsRequest.FromString,
                    response_serializer=beaker__pb2.ListSecretsResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=beaker__pb2.ListGroupsRequest.FromString,
                    response_serializer=beaker__pb2.ListGroupsResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=beaker__pb2.GetGroupRequest.FromString,
                    response_serializer=beaker__pb2.GetGroupResponse.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=beaker__pb2.UpdateGroupRequest.FromString,
                    response_serializer=beaker__pb2.UpdateGroupResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=beaker__pb2.CreateGroupRequest.FromString,
                    response_serializer=beaker__pb2.CreateGroupResponse.SerializeToString,
            ),
            'ListGroupTaskMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroupTaskMetrics,
                    request_deserializer=beaker__pb2.ListGroupTaskMetricsRequest.FromString,
                    response_serializer=beaker__pb2.ListGroupTaskMetricsResponse.SerializeToString,
            ),
            'GetGroupMetricsExport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupMetricsExport,
                    request_deserializer=beaker__pb2.GetGroupMetricsExportRequest.FromString,
                    response_serializer=beaker__pb2.GetGroupMetricsExportResponse.SerializeToString,
            ),
            'DeleteGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroups,
                    request_deserializer=beaker__pb2.DeleteGroupsRequest.FromString,
                    response_serializer=beaker__pb2.DeleteGroupsResponse.SerializeToString,
            ),
            'GetDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataset,
                    request_deserializer=beaker__pb2.GetDatasetRequest.FromString,
                    response_serializer=beaker__pb2.GetDatasetResponse.SerializeToString,
            ),
            'ResolveDatasetName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveDatasetName,
                    request_deserializer=beaker__pb2.ResolveDatasetNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveDatasetNameResponse.SerializeToString,
            ),
            'ListDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasets,
                    request_deserializer=beaker__pb2.ListDatasetsRequest.FromString,
                    response_serializer=beaker__pb2.ListDatasetsResponse.SerializeToString,
            ),
            'UpdateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDataset,
                    request_deserializer=beaker__pb2.UpdateDatasetRequest.FromString,
                    response_serializer=beaker__pb2.UpdateDatasetResponse.SerializeToString,
            ),
            'ListDatasetFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasetFiles,
                    request_deserializer=beaker__pb2.ListDatasetFilesRequest.FromString,
                    response_serializer=beaker__pb2.ListDatasetFilesResponse.SerializeToString,
            ),
            'GetDatasetFileLink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatasetFileLink,
                    request_deserializer=beaker__pb2.GetDatasetFileLinkRequest.FromString,
                    response_serializer=beaker__pb2.GetDatasetFileLinkResponse.SerializeToString,
            ),
            'DeleteDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDatasets,
                    request_deserializer=beaker__pb2.DeleteDatasetsRequest.FromString,
                    response_serializer=beaker__pb2.DeleteDatasetsResponse.SerializeToString,
            ),
            'GetSchedulerRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSchedulerRun,
                    request_deserializer=beaker__pb2.GetSchedulerRunRequest.FromString,
                    response_serializer=beaker__pb2.GetSchedulerRunResponse.SerializeToString,
            ),
            'GetGPUUsageByBudget': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGPUUsageByBudget,
                    request_deserializer=beaker__pb2.GetGPUUsageByBudgetRequest.FromString,
                    response_serializer=beaker__pb2.GetGPUUsageByBudgetResponse.SerializeToString,
            ),
            'GetGPUUsageReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGPUUsageReport,
                    request_deserializer=beaker__pb2.GetGPUUsageReportRequest.FromString,
                    response_serializer=beaker__pb2.GetGPUUsageReportResponse.SerializeToString,
            ),
            'CreateHealthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHealthcheck,
                    request_deserializer=beaker__pb2.CreateHealthcheckRequest.FromString,
                    response_serializer=beaker__pb2.CreateHealthcheckResponse.SerializeToString,
            ),
            'GetBudget': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBudget,
                    request_deserializer=beaker__pb2.GetBudgetRequest.FromString,
                    response_serializer=beaker__pb2.GetBudgetResponse.SerializeToString,
            ),
            'ResolveBudgetName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveBudgetName,
                    request_deserializer=beaker__pb2.ResolveBudgetNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveBudgetNameResponse.SerializeToString,
            ),
            'ListBudgets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBudgets,
                    request_deserializer=beaker__pb2.ListBudgetsRequest.FromString,
                    response_serializer=beaker__pb2.ListBudgetsResponse.SerializeToString,
            ),
            'CreateBudget': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBudget,
                    request_deserializer=beaker__pb2.CreateBudgetRequest.FromString,
                    response_serializer=beaker__pb2.CreateBudgetResponse.SerializeToString,
            ),
            'UpdateBudget': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBudget,
                    request_deserializer=beaker__pb2.UpdateBudgetRequest.FromString,
                    response_serializer=beaker__pb2.UpdateBudgetResponse.SerializeToString,
            ),
            'CreateQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueue,
                    request_deserializer=beaker__pb2.CreateQueueRequest.FromString,
                    response_serializer=beaker__pb2.CreateQueueResponse.SerializeToString,
            ),
            'GetQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueue,
                    request_deserializer=beaker__pb2.GetQueueRequest.FromString,
                    response_serializer=beaker__pb2.GetQueueResponse.SerializeToString,
            ),
            'ResolveQueueName': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveQueueName,
                    request_deserializer=beaker__pb2.ResolveQueueNameRequest.FromString,
                    response_serializer=beaker__pb2.ResolveQueueNameResponse.SerializeToString,
            ),
            'ListQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQueues,
                    request_deserializer=beaker__pb2.ListQueuesRequest.FromString,
                    response_serializer=beaker__pb2.ListQueuesResponse.SerializeToString,
            ),
            'DeleteQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQueues,
                    request_deserializer=beaker__pb2.DeleteQueuesRequest.FromString,
                    response_serializer=beaker__pb2.DeleteQueuesResponse.SerializeToString,
            ),
            'CreateQueueWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueueWorker,
                    request_deserializer=beaker__pb2.CreateQueueWorkerRequest.FromString,
                    response_serializer=beaker__pb2.CreateQueueWorkerResponse.SerializeToString,
            ),
            'ListQueueWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQueueWorkers,
                    request_deserializer=beaker__pb2.ListQueueWorkersRequest.FromString,
                    response_serializer=beaker__pb2.ListQueueWorkersResponse.SerializeToString,
            ),
            'CreateQueueEntry': grpc.unary_stream_rpc_method_handler(
                    servicer.CreateQueueEntry,
                    request_deserializer=beaker__pb2.CreateQueueEntryRequest.FromString,
                    response_serializer=beaker__pb2.CreateQueueEntryResponse.SerializeToString,
            ),
            'ProcessQueueEntries': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessQueueEntries,
                    request_deserializer=beaker__pb2.ProcessQueueEntriesRequest.FromString,
                    response_serializer=beaker__pb2.ProcessQueueEntriesResponse.SerializeToString,
            ),
            'GetQueueEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueEntry,
                    request_deserializer=beaker__pb2.GetQueueEntryRequest.FromString,
                    response_serializer=beaker__pb2.GetQueueEntryResponse.SerializeToString,
            ),
            'ListQueueEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQueueEntries,
                    request_deserializer=beaker__pb2.ListQueueEntriesRequest.FromString,
                    response_serializer=beaker__pb2.ListQueueEntriesResponse.SerializeToString,
            ),
            'CreateClusterTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClusterTag,
                    request_deserializer=beaker__pb2.CreateClusterTagRequest.FromString,
                    response_serializer=beaker__pb2.CreateClusterTagResponse.SerializeToString,
            ),
            'DeleteClusterTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClusterTag,
                    request_deserializer=beaker__pb2.DeleteClusterTagRequest.FromString,
                    response_serializer=beaker__pb2.DeleteClusterTagResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allenai.beaker.Beaker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allenai.beaker.Beaker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Beaker(object):
    """Services:

    """

    @staticmethod
    def CreateTokenForGoogleUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateTokenForGoogleUID',
            beaker__pb2.CreateTokenForGoogleUIDRequest.SerializeToString,
            beaker__pb2.CreateTokenForGoogleUIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetUser',
            beaker__pb2.GetUserRequest.SerializeToString,
            beaker__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveUserName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveUserName',
            beaker__pb2.ResolveUserNameRequest.SerializeToString,
            beaker__pb2.ResolveUserNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListUsers',
            beaker__pb2.ListUsersRequest.SerializeToString,
            beaker__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateUser',
            beaker__pb2.CreateUserRequest.SerializeToString,
            beaker__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateUser',
            beaker__pb2.UpdateUserRequest.SerializeToString,
            beaker__pb2.UpdateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegenerateUserAuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/RegenerateUserAuthToken',
            beaker__pb2.RegenerateUserAuthTokenRequest.SerializeToString,
            beaker__pb2.RegenerateUserAuthTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetOrganization',
            beaker__pb2.GetOrganizationRequest.SerializeToString,
            beaker__pb2.GetOrganizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveOrganizationName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveOrganizationName',
            beaker__pb2.ResolveOrganizationNameRequest.SerializeToString,
            beaker__pb2.ResolveOrganizationNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListOrganizations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListOrganizations',
            beaker__pb2.ListOrganizationsRequest.SerializeToString,
            beaker__pb2.ListOrganizationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetWorkspace',
            beaker__pb2.GetWorkspaceRequest.SerializeToString,
            beaker__pb2.GetWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveWorkspaceName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveWorkspaceName',
            beaker__pb2.ResolveWorkspaceNameRequest.SerializeToString,
            beaker__pb2.ResolveWorkspaceNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkspaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListWorkspaces',
            beaker__pb2.ListWorkspacesRequest.SerializeToString,
            beaker__pb2.ListWorkspacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateWorkspace',
            beaker__pb2.CreateWorkspaceRequest.SerializeToString,
            beaker__pb2.CreateWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateWorkspace',
            beaker__pb2.UpdateWorkspaceRequest.SerializeToString,
            beaker__pb2.UpdateWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferIntoWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/TransferIntoWorkspace',
            beaker__pb2.TransferIntoWorkspaceRequest.SerializeToString,
            beaker__pb2.TransferIntoWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkspaceSlotLimitNonPreemptible(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateWorkspaceSlotLimitNonPreemptible',
            beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleRequest.SerializeToString,
            beaker__pb2.UpdateWorkspaceSlotLimitNonPreemptibleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkspaceSlotLimitPreemptible(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateWorkspaceSlotLimitPreemptible',
            beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleRequest.SerializeToString,
            beaker__pb2.UpdateWorkspaceSlotLimitPreemptibleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetCluster',
            beaker__pb2.GetClusterRequest.SerializeToString,
            beaker__pb2.GetClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveClusterName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveClusterName',
            beaker__pb2.ResolveClusterNameRequest.SerializeToString,
            beaker__pb2.ResolveClusterNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListClusters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListClusters',
            beaker__pb2.ListClustersRequest.SerializeToString,
            beaker__pb2.ListClustersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateCluster',
            beaker__pb2.CreateClusterRequest.SerializeToString,
            beaker__pb2.CreateClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateCluster',
            beaker__pb2.UpdateClusterRequest.SerializeToString,
            beaker__pb2.UpdateClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateClusterRestrictions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateClusterRestrictions',
            beaker__pb2.UpdateClusterRestrictionsRequest.SerializeToString,
            beaker__pb2.UpdateClusterRestrictionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListClusterSlotUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListClusterSlotUsage',
            beaker__pb2.ListClusterSlotUsageRequest.SerializeToString,
            beaker__pb2.ListClusterSlotUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateClusterName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateClusterName',
            beaker__pb2.UpdateClusterNameRequest.SerializeToString,
            beaker__pb2.UpdateClusterNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateClusterAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateClusterAlias',
            beaker__pb2.CreateClusterAliasRequest.SerializeToString,
            beaker__pb2.CreateClusterAliasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteCluster',
            beaker__pb2.DeleteClusterRequest.SerializeToString,
            beaker__pb2.DeleteClusterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetNode',
            beaker__pb2.GetNodeRequest.SerializeToString,
            beaker__pb2.GetNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListNodes',
            beaker__pb2.ListNodesRequest.SerializeToString,
            beaker__pb2.ListNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CordonNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CordonNode',
            beaker__pb2.CordonNodeRequest.SerializeToString,
            beaker__pb2.CordonNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteNode',
            beaker__pb2.DeleteNodeRequest.SerializeToString,
            beaker__pb2.DeleteNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobBind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetJobBind',
            beaker__pb2.GetJobBindRequest.SerializeToString,
            beaker__pb2.GetJobBindResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNodeEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateNodeEvents',
            beaker__pb2.CreateNodeEventsRequest.SerializeToString,
            beaker__pb2.CreateNodeEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNodeEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListNodeEvents',
            beaker__pb2.ListNodeEventsRequest.SerializeToString,
            beaker__pb2.ListNodeEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessNodeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ProcessNodeEvent',
            beaker__pb2.ProcessNodeEventRequest.SerializeToString,
            beaker__pb2.ProcessNodeEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordGPUHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/RecordGPUHealth',
            beaker__pb2.RecordGPUHealthRequest.SerializeToString,
            beaker__pb2.RecordGPUHealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetWorkload',
            beaker__pb2.GetWorkloadRequest.SerializeToString,
            beaker__pb2.GetWorkloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveWorkloadName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveWorkloadName',
            beaker__pb2.ResolveWorkloadNameRequest.SerializeToString,
            beaker__pb2.ResolveWorkloadNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkloads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListWorkloads',
            beaker__pb2.ListWorkloadsRequest.SerializeToString,
            beaker__pb2.ListWorkloadsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateWorkload',
            beaker__pb2.UpdateWorkloadRequest.SerializeToString,
            beaker__pb2.UpdateWorkloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelWorkloads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CancelWorkloads',
            beaker__pb2.CancelWorkloadsRequest.SerializeToString,
            beaker__pb2.CancelWorkloadsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorkloads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteWorkloads',
            beaker__pb2.DeleteWorkloadsRequest.SerializeToString,
            beaker__pb2.DeleteWorkloadsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetJob',
            beaker__pb2.GetJobRequest.SerializeToString,
            beaker__pb2.GetJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListJobs',
            beaker__pb2.ListJobsRequest.SerializeToString,
            beaker__pb2.ListJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ScheduleJobs',
            beaker__pb2.ScheduleJobsRequest.SerializeToString,
            beaker__pb2.ScheduleJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateJobSourcePriority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateJobSourcePriority',
            beaker__pb2.UpdateJobSourcePriorityRequest.SerializeToString,
            beaker__pb2.UpdateJobSourcePriorityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PreemptJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/PreemptJob',
            beaker__pb2.PreemptJobRequest.SerializeToString,
            beaker__pb2.PreemptJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RescheduleJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/RescheduleJob',
            beaker__pb2.RescheduleJobRequest.SerializeToString,
            beaker__pb2.RescheduleJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamJobLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/allenai.beaker.Beaker/StreamJobLogs',
            beaker__pb2.StreamJobLogsRequest.SerializeToString,
            beaker__pb2.JobLog.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateJobEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateJobEvents',
            beaker__pb2.CreateJobEventsRequest.SerializeToString,
            beaker__pb2.CreateJobEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSummarizedJobEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListSummarizedJobEvents',
            beaker__pb2.ListSummarizedJobEventsRequest.SerializeToString,
            beaker__pb2.ListSummarizedJobEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateJobQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateJobQueue',
            beaker__pb2.UpdateJobQueueRequest.SerializeToString,
            beaker__pb2.UpdateJobQueueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperimentYamlSpec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetExperimentYamlSpec',
            beaker__pb2.GetExperimentYamlSpecRequest.SerializeToString,
            beaker__pb2.GetExperimentYamlSpecResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestartExperimentTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/RestartExperimentTasks',
            beaker__pb2.RestartExperimentTasksRequest.SerializeToString,
            beaker__pb2.RestartExperimentTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetImage',
            beaker__pb2.GetImageRequest.SerializeToString,
            beaker__pb2.GetImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveImageName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveImageName',
            beaker__pb2.ResolveImageNameRequest.SerializeToString,
            beaker__pb2.ResolveImageNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListImages',
            beaker__pb2.ListImagesRequest.SerializeToString,
            beaker__pb2.ListImagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateImage',
            beaker__pb2.UpdateImageRequest.SerializeToString,
            beaker__pb2.UpdateImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteImages',
            beaker__pb2.DeleteImagesRequest.SerializeToString,
            beaker__pb2.DeleteImagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetSecret',
            beaker__pb2.GetSecretRequest.SerializeToString,
            beaker__pb2.GetSecretResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSecrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListSecrets',
            beaker__pb2.ListSecretsRequest.SerializeToString,
            beaker__pb2.ListSecretsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListGroups',
            beaker__pb2.ListGroupsRequest.SerializeToString,
            beaker__pb2.ListGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetGroup',
            beaker__pb2.GetGroupRequest.SerializeToString,
            beaker__pb2.GetGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateGroup',
            beaker__pb2.UpdateGroupRequest.SerializeToString,
            beaker__pb2.UpdateGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateGroup',
            beaker__pb2.CreateGroupRequest.SerializeToString,
            beaker__pb2.CreateGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGroupTaskMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListGroupTaskMetrics',
            beaker__pb2.ListGroupTaskMetricsRequest.SerializeToString,
            beaker__pb2.ListGroupTaskMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroupMetricsExport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetGroupMetricsExport',
            beaker__pb2.GetGroupMetricsExportRequest.SerializeToString,
            beaker__pb2.GetGroupMetricsExportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteGroups',
            beaker__pb2.DeleteGroupsRequest.SerializeToString,
            beaker__pb2.DeleteGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetDataset',
            beaker__pb2.GetDatasetRequest.SerializeToString,
            beaker__pb2.GetDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveDatasetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveDatasetName',
            beaker__pb2.ResolveDatasetNameRequest.SerializeToString,
            beaker__pb2.ResolveDatasetNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListDatasets',
            beaker__pb2.ListDatasetsRequest.SerializeToString,
            beaker__pb2.ListDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateDataset',
            beaker__pb2.UpdateDatasetRequest.SerializeToString,
            beaker__pb2.UpdateDatasetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDatasetFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListDatasetFiles',
            beaker__pb2.ListDatasetFilesRequest.SerializeToString,
            beaker__pb2.ListDatasetFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDatasetFileLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetDatasetFileLink',
            beaker__pb2.GetDatasetFileLinkRequest.SerializeToString,
            beaker__pb2.GetDatasetFileLinkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteDatasets',
            beaker__pb2.DeleteDatasetsRequest.SerializeToString,
            beaker__pb2.DeleteDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSchedulerRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetSchedulerRun',
            beaker__pb2.GetSchedulerRunRequest.SerializeToString,
            beaker__pb2.GetSchedulerRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGPUUsageByBudget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetGPUUsageByBudget',
            beaker__pb2.GetGPUUsageByBudgetRequest.SerializeToString,
            beaker__pb2.GetGPUUsageByBudgetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGPUUsageReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetGPUUsageReport',
            beaker__pb2.GetGPUUsageReportRequest.SerializeToString,
            beaker__pb2.GetGPUUsageReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateHealthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateHealthcheck',
            beaker__pb2.CreateHealthcheckRequest.SerializeToString,
            beaker__pb2.CreateHealthcheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBudget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetBudget',
            beaker__pb2.GetBudgetRequest.SerializeToString,
            beaker__pb2.GetBudgetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveBudgetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveBudgetName',
            beaker__pb2.ResolveBudgetNameRequest.SerializeToString,
            beaker__pb2.ResolveBudgetNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBudgets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListBudgets',
            beaker__pb2.ListBudgetsRequest.SerializeToString,
            beaker__pb2.ListBudgetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBudget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateBudget',
            beaker__pb2.CreateBudgetRequest.SerializeToString,
            beaker__pb2.CreateBudgetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBudget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/UpdateBudget',
            beaker__pb2.UpdateBudgetRequest.SerializeToString,
            beaker__pb2.UpdateBudgetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateQueue',
            beaker__pb2.CreateQueueRequest.SerializeToString,
            beaker__pb2.CreateQueueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetQueue',
            beaker__pb2.GetQueueRequest.SerializeToString,
            beaker__pb2.GetQueueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResolveQueueName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ResolveQueueName',
            beaker__pb2.ResolveQueueNameRequest.SerializeToString,
            beaker__pb2.ResolveQueueNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListQueues',
            beaker__pb2.ListQueuesRequest.SerializeToString,
            beaker__pb2.ListQueuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteQueues',
            beaker__pb2.DeleteQueuesRequest.SerializeToString,
            beaker__pb2.DeleteQueuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateQueueWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateQueueWorker',
            beaker__pb2.CreateQueueWorkerRequest.SerializeToString,
            beaker__pb2.CreateQueueWorkerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListQueueWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListQueueWorkers',
            beaker__pb2.ListQueueWorkersRequest.SerializeToString,
            beaker__pb2.ListQueueWorkersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateQueueEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/allenai.beaker.Beaker/CreateQueueEntry',
            beaker__pb2.CreateQueueEntryRequest.SerializeToString,
            beaker__pb2.CreateQueueEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessQueueEntries(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/allenai.beaker.Beaker/ProcessQueueEntries',
            beaker__pb2.ProcessQueueEntriesRequest.SerializeToString,
            beaker__pb2.ProcessQueueEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQueueEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/GetQueueEntry',
            beaker__pb2.GetQueueEntryRequest.SerializeToString,
            beaker__pb2.GetQueueEntryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListQueueEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/ListQueueEntries',
            beaker__pb2.ListQueueEntriesRequest.SerializeToString,
            beaker__pb2.ListQueueEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateClusterTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/CreateClusterTag',
            beaker__pb2.CreateClusterTagRequest.SerializeToString,
            beaker__pb2.CreateClusterTagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteClusterTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allenai.beaker.Beaker/DeleteClusterTag',
            beaker__pb2.DeleteClusterTagRequest.SerializeToString,
            beaker__pb2.DeleteClusterTagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
