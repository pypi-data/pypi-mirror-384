name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Set up Python 3.13
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
      with:
        python-version: "3.13"
        
    - name: Install Hatch
      run: pip install "click<=8.2.1" "hatch==1.14.1"
      
    - name: Run QA checks
      run: hatch run qa:qa

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: qa  # Only run if QA job passes
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'dd_access' || 'pr_env' }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        pytest-version: ["7.2.0", "8.1.2", "8.4.*"]
        exclude:
          # Python 3.12 and 3.13 only support pytest 8.1.2 and 8.4.*
          - python-version: "3.12"
            pytest-version: "7.2.0"
          - python-version: "3.13"
            pytest-version: "7.2.0"
    
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Hatch
      run: pip install "click<=8.2.1" "hatch==1.14.1"

    - name: Run tests
      env:
        PYTEST_ADDOPTS: '-v --ignore=ddtestpy ${{ vars.PYTEST_ADDOPTS }}'
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
        DD_CIVISIBILITY_AGENTLESS_ENABLED: '1'
      run: hatch test -i py=${{ matrix.python-version }} -i pytest=${{ matrix.pytest-version}}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: qa  # Only run if QA job passes
    env:
      MINIMUM_COVERAGE: 79
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
    
    - name: Set up Python 3.13
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5
      with:
        python-version: "3.13"
        
    - name: Install Hatch
      run: pip install "click<=8.2.1" "hatch==1.14.1"

    - name: Run coverage tests
      id: coverage
      run: |
        # Run coverage and capture output
        coverage_output=$(hatch test -c 2>&1)
        echo "$coverage_output"
        
        # Extract coverage percentage from the last line
        coverage_percent=$(echo "$coverage_output" | tail -1 | grep -o '[0-9]\+$')
        
        echo "Coverage: ${coverage_percent}%"
        echo "coverage_percent=${coverage_percent}" >> $GITHUB_OUTPUT
        
        # Check if coverage meets minimum threshold
        if [ "$coverage_percent" -lt "$MINIMUM_COVERAGE" ]; then
          echo "❌ Coverage ${coverage_percent}% is below minimum threshold of ${MINIMUM_COVERAGE}%"
          exit 1
        else
          echo "✅ Coverage ${coverage_percent}% meets minimum threshold of ${MINIMUM_COVERAGE}%"
        fi
        
    - name: Coverage Summary
      if: always()
      run: |
        echo "## Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Coverage:** ${{ steps.coverage.outputs.coverage_percent }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum Required:** ${{ env.MINIMUM_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.coverage.outputs.coverage_percent }}" -ge "${{ env.MINIMUM_COVERAGE }}" ]; then
          echo "- **Status:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
        fi
