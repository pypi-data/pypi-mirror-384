[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[project]
name = "imha"
version = "0.2.0"
dependencies = [
    "pillow>=9.1.0",
]
requires-python = ">=3.10"
authors = [
    {name = "Eric Nielsen"},
]
description = "A more constrained and friendlier fork of ImageHash."
readme = "README.md"
license = "BSD-2-Clause"
license-files = ["LICENSE"]
keywords = ["average hash", "dhash", "image hash", "image hashing", "imagehash"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]

[project.scripts]
imha = "imha:main"

[project.urls]
Repository = "https://github.com/ericbn/imha.git"
Issues = "https://github.com/ericbn/imha/issues"
Changelog = "https://github.com/ericbn/imha/blob/master/CHANGELOG.md"

[dependency-groups]
dev = [
    "black",
    "mypy",
    "pytest",
    "ruff",
]

[tool.mypy]
strict = true

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "DTZ",    # flake8-datetimez
    "E",      # pycodestyle Error
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "F",      # Pyflakes
    "FBT",    # flake8-boolean-trap
    "FIX",    # flake8-fixme
    "FLY",    # flynt
    "FURB",   # refurb
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420
    "ISC",    # flake8-implicit-str-concat
    "LOG",    # flake8-logging
    "N",      # pep8-naming
    "PERF",   # Perflint
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # Pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "T10",    # flake8-debugger
    "TC",     # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pycodestyle Warning
    "YTT",    # flake8-2020
]

future-annotations = true

ignore = [
    "ANN401",   # Checks that function arguments are annotated with a more specific type than Any.
    "PLC0415",  # Checks for import statements outside a module's top-level scope.
    "PLR2004",  # Checks for the use of unnamed numerical constants values in comparisons.
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "ANN",      # flake8-annotations
    "D",        # pydocstyle
    "INP",      # flake8-no-pep420
    "S101",     # Checks for uses of the assert keyword.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"numpy".msg = "Use the Python standard library instead."

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 72

[tool.ruff.lint.pydocstyle]
convention = "google"
