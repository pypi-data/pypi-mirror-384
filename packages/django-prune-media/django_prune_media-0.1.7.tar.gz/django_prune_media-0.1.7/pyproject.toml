[project]
name = "django-prune-media"
version = "0.1.7"
description = "Adds tools for pruning media files from your django project"
authors = [{ name = "Daniel Andrlik", email = "daniel@andrlik.org" }]
license = "BSD-3-Clause"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "django-typer>=2.3.0",
    "django>=5.1.2",
]
classifiers = [
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "License :: OSI Approved :: BSD License",
    "Framework :: Django",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 4 - Beta",
]

[project.urls]
Repository = "https://codeberg.org/andrlik/django-prune-media"
Homepage = "https://codeberg.org/andrlik/django-prune-media"
Documentation = "https://django-prune-media.readthedocs.io/en/latest/"

[dependency-groups]
dev = [
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-include-markdown-plugin>=7.0.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-material>=9.5.43",
    "mkdocstrings[python]>=0.26.2",
    "pytest-cov>=6.0.0",
    "pytest-django>=4.11.1",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "django-coverage-plugin>=3.1.0",
    "django-types>=0.19.1",
    "pyright>=1.1.387",
    "ruff>=0.7.1",
    "bandit>=1.7.10",
    "bump-my-version>=0.28.0",
    "pillow>=11.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/prune_media"]

[tool.hatch.build.targets.sdist]
include = ["src/prune_media", "tests"]

[tool.black]
# https://github.com/psf/black
target-version = ["py312"]
line-length = 88
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | migrations
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = ["migrations", ".tox"]

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "DJ001",
  "RUF012",
  "ISC001",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101", "FBT001", "FBT002", "ARG001", "ARG002", "E501", "PLR2004", "T201"]
"tests/urls.py" = ["RUF005"]
"src/prune_media/management/commands/*.py" = ["ARG002"]
"conftest.py" = ["ARG001"]

[tool.ruff.lint.isort]
known-first-party = ["prune_media"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pyright]
pythonVersion = "3.12"
exclude = ["**/migrations/",
    "**/__pycache__",
    ".tox",
    ".venv",
    "tests",
    "conftest.py",
]
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.coverage.run]
source = ["src/prune_media"]
omit = ["*migrations*", "*tests*", "*staticfiles*"]
plugins = ["django_coverage_plugin"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
DJANGO_SETTINGS_MODULE = "tests.settings"
testpaths = ["tests"]
pythonpath = [".", "src"]
django_find_project = false
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__", ".venv", ".tox"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning"
]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules", "--cov=src/prune_media",
  "--cov-report=term-missing", "--ds=tests.settings", "--reuse-db",
]

[tool.tox]
env_list = ["3.12", "3.13", "3.14", "lint", "types"]

[tool.tox.env_run_base]
description = "Run tests under {base_python}"
allowlist_externals = ["{change_dir}/.tox/{base_python}/bin/python"]
runner = "uv-venv-lock-runner"
with_dev = true
commands = [["pytest"]]

[tool.tox.env.lint]
description = "Run linting via ruff"
skip_install = true
allowlist_externals = ["{change_dir}/.tox/{base_python}/bin/python"]
with_dev = true
runner = "uv-venv-lock-runner"
commands = [["ruff", "check"]]

[tool.tox.env.types]
description = "Run type checks via pyright"
allowlist_externals = ["{change_dir}/.tox/{base_python}/bin/python"]
runner = "uv-venv-lock-runner"
with_dev = true
commands = [["pyright"]]

[tool.check-wheel-contents]
ignore = ["W004"]

[tool.curlylint.rules]
image_alt = true

[tool.bandit]
exclude_dirs = ["tests", "conftest.py"]

[tool.bumpversion]
current_version = "0.1.7"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
pre_commit_hooks = ["uv sync", "git add uv.lock"]
commit_args = "-n"

[[tool.bumpversion.files]]
filename = "src/prune_media/__init__.py"
search = "__version__ = \"{current_version}\""
replace =  "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...v{new_version}"
