# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import enum
import typing
from oxapy.templating import Template
from . import exceptions
from . import jwt
from . import serializer
from . import templating

@typing.final
class Catcher:
    r"""
    A catcher for handling specific HTTP status codes.
    
    Catchers allow you to provide custom responses for specific HTTP status codes.
    They are typically created using the `catcher` decorator function.
    
    Args:
        status (Status): The HTTP status code this catcher will handle.
        handler (callable): The handler function that will be called when this status occurs.
    
    Example:
    ```python
    from oxapy import catcher, Status
    
    @catcher(Status.NOT_FOUND)
    def handle_not_found(request, response):
        return Response("<h1>Custom 404 Page</h1>", content_type="text/html")
    ```
    """
    ...

@typing.final
class CatcherBuilder:
    r"""
    Internal builder class for creating catchers.
    
    This class is returned by the `catcher` function and is used to create
    a Catcher when called with a handler function.
    """
    def __call__(self, handler:typing.Any) -> Catcher:
        r"""
        Create a Catcher when called with a handler function.
        
        Args:
            handler (callable): The handler function to call when the status occurs.
        
        Returns:
            Catcher: A new catcher for the specified status.
        """

@typing.final
class Cors:
    r"""
    Cross-Origin Resource Sharing (CORS) configuration.
    
    This class allows you to configure CORS headers for your server to control
    which domains can access your API and what methods they can use.
    
    Args:
        None
    
    Returns:
        Cors: A new CORS configuration with default settings.
    
    Example:
    ```python
    from oxapy import HttpServer, Cors
    
    app = HttpServer(("127.0.0.1", 8000))
    
    # Set up CORS with custom configuration
    cors = Cors()
    cors.origins = ["https://example.com", "https://app.example.com"]
    cors.methods = ["GET", "POST", "OPTIONS"]
    cors.headers = ["Content-Type", "Authorization"]
    
    app.cors(cors)
    ```
    """
    @property
    def origins(self) -> builtins.list[builtins.str]:
        r"""
        List of allowed origins, default is ["*"] (all origins)
        """
    @origins.setter
    def origins(self, value: builtins.list[builtins.str]) -> None:
        r"""
        List of allowed origins, default is ["*"] (all origins)
        """
    @property
    def methods(self) -> builtins.list[builtins.str]:
        r"""
        List of allowed HTTP methods, default includes common methods
        """
    @methods.setter
    def methods(self, value: builtins.list[builtins.str]) -> None:
        r"""
        List of allowed HTTP methods, default includes common methods
        """
    @property
    def headers(self) -> builtins.list[builtins.str]:
        r"""
        List of allowed HTTP headers, default includes common headers
        """
    @headers.setter
    def headers(self, value: builtins.list[builtins.str]) -> None:
        r"""
        List of allowed HTTP headers, default includes common headers
        """
    @property
    def allow_credentials(self) -> builtins.bool:
        r"""
        Whether to allow credentials (cookies, authorization headers), default is true
        """
    @allow_credentials.setter
    def allow_credentials(self, value: builtins.bool) -> None:
        r"""
        Whether to allow credentials (cookies, authorization headers), default is true
        """
    @property
    def max_age(self) -> builtins.int:
        r"""
        Maximum age of preflight requests in seconds, default is 86400 (1 day)
        """
    @max_age.setter
    def max_age(self, value: builtins.int) -> None:
        r"""
        Maximum age of preflight requests in seconds, default is 86400 (1 day)
        """
    def __new__(cls) -> Cors:
        r"""
        Create a new CORS configuration with default settings.
        
        Returns:
            Cors: A new CORS configuration with default values.
        
        Example:
        ```python
        # Create CORS with default configuration (allows all origins)
        cors = Cors()
        
        # Customize CORS settings
        cors.origins = ["https://example.com"]
        cors.allow_credentials = False
        ```
        """
    def __repr__(self) -> builtins.str:
        r"""
        Return a string representation of the CORS configuration.
        
        Returns:
            str: A debug string showing the CORS configuration.
        """

@typing.final
class File:
    r"""
    Represents an uploaded file in a multipart/form-data request.
    
    The File class provides access to uploaded file data, including the file name,
    content type, and binary content. It also allows saving the file to disk.
    
    Args:
        None (Files are created internally by the framework)
    
    Returns:
        File: A file object containing the uploaded data.
    
    Example:
    ```python
    @router.post("/upload")
    def upload_handler(request):
        if request.files:
            image = request.files.get("profile_image")
            if image:
                # Access file properties
                filename = image.name
                content_type = image.content_type
                # Save the file
                image.save(f"uploads/{filename}")
                return {"status": "success", "filename": filename}
        return {"status": "error", "message": "No file uploaded"}
    ```
    """
    @property
    def name(self) -> typing.Optional[builtins.str]: ...
    @property
    def content_type(self) -> typing.Optional[builtins.str]: ...
    @content_type.setter
    def content_type(self, value: typing.Optional[builtins.str]) -> None: ...
    def content(self) -> bytes:
        r"""
        Get the file content as bytes.
        
        Args:
            None
        
        Returns:
            bytes: The file content as a Python bytes object.
        
        Example:
        ```python
        file_bytes = uploaded_file.content()
        file_size = len(file_bytes)
        ```
        """
    def save(self, path:builtins.str) -> None:
        r"""
        Save the file content to disk.
        
        Args:
            path (str): The path where the file should be saved.
        
        Returns:
            None
        
        Raises:
            Exception: If the file cannot be written to disk.
        
        Example:
        ```python
        # Save the uploaded file
        if "profile_image" in request.files:
            image = request.files["profile_image"]
            image.save(f"uploads/{image.name}")
        ```
        """

class FileStreaming(Response):
    r"""
    HTTP file streaming response for efficiently serving large files.
    
    FileStreaming provides an efficient way to serve files by streaming them in chunks
    rather than loading the entire file into memory. This is particularly useful for
    large files like videos, images, or documents.
    
    The file is read in configurable buffer chunks and streamed to the client,
    allowing for low memory usage regardless of file size.
    
    Args:
        path (str): The file system path to the file to be streamed.
        buf_size (int, optional): The buffer size in bytes for reading chunks. Defaults to 8192.
        status (Status, optional): HTTP status code. Defaults to Status.OK.
        content_type (str, optional): MIME type of the file. Defaults to "application/octet-stream".
    
    Returns:
        tuple[FileStreaming, Response]: A tuple containing the FileStreaming instance and Response.
    
    Raises:
        OSError: If the file cannot be opened or read.
        ValueError: If the path is invalid or inaccessible.
    
    Example:
    ```python
    from oxapy import Router, FileStreaming, Status
    
    router = Router()
    
    # Stream a video file
    @router.get("/videos/{*path}")
    def serve_video(request, path):
        return FileStreaming(
            f"./media/videos/{path}",
            buf_size=16384,  # 16KB chunks
            content_type="video/mp4"
        )
    
    # Stream static files
    @router.get("/static/{*path}")
    def serve_static(request, path):
        return FileStreaming(
            f"./static/{path}",
            buf_size=32768,  # 32KB chunks for better performance
            content_type="application/octet-stream"
        )
    
    # Stream with custom status for partial content
    @router.get("/downloads/{filename}")
    def serve_download(request, filename):
        return FileStreaming(
            f"./downloads/{filename}",
            status=Status.PARTIAL_CONTENT,
            content_type="application/pdf"
        )
    ```
    """
    def __new__(cls, path:builtins.str, buf_size:builtins.int=8192, status:Status=Status.OK, content_type:builtins.str='application/octet-stream') -> FileStreaming:
        r"""
        Create a new FileStreaming response.
        
        Opens the specified file and prepares it for streaming to the client.
        The file is read in chunks of the specified buffer size, which helps
        control memory usage and allows for efficient streaming of large files.
        
        Args:
            path (str): Path to the file to stream. Must be accessible and readable.
            buf_size (int, optional): Buffer size in bytes for reading file chunks.
                                     Larger values may improve performance for large files
                                     but use more memory. Defaults to 8192 bytes (8KB).
            status (Status, optional): HTTP status code for the response. Defaults to Status.OK.
            content_type (str, optional): MIME type of the file content.
                                         Defaults to "application/octet-stream".
        
        Returns:
            FileStreaming: A FileStreaming instance.
        
        Raises:
            OSError: If the file at the specified path cannot be opened or read.
            PermissionError: If the process lacks permission to read the file.
        
        Note:
            The response automatically includes "Cache-Control: no-cache" header
            to prevent caching of streamed content.
        
        Example:
        ```python
        # Basic file streaming
        streaming_response = FileStreaming("./files/document.pdf")
        
        # Custom buffer size for better performance
        streaming_response = FileStreaming(
            "./media/large-video.mp4",
            buf_size=65536,  # 64KB chunks
            content_type="video/mp4"
        )
        ```
        """

@typing.final
class HttpServer:
    r"""
    HTTP Server for handling web requests.
    
    The HttpServer is the main entry point for creating web applications with OxAPY.
    It manages routers, middleware, templates, sessions, and other components.
    
    Args:
        addr (tuple): A tuple containing the IP address and port to bind to.
    
    Returns:
        HttpServer: A new server instance.
    
    Example:
    ```python
    from oxapy import HttpServer, Router
    
    # Create a server on localhost port 8000
    app = HttpServer(("127.0.0.1", 8000))
    
    # Create a router
    router = Router()
    
    # Define route handlers
    @router.get("/")
    def home(request):
        return "Hello, World!"
    
    @router.get("/users/{user_id}")
    def get_user(request, user_id: int):
        return {"user_id": user_id, "name": f"User {user_id}"}
    
    @router.post("/api/data")
    def create_data(request):
        # Access JSON data from the request
        data = request.json()
        return {"status": "success", "received": data}
    
    # Attach the router to the server
    app.attach(router)
    
    # Run the server
    app.run()
        ```
    """
    def __new__(cls, addr:tuple[builtins.str, builtins.int]) -> HttpServer:
        r"""
        Create a new instance of HttpServer.
        
        Args:
            addr (tuple): A tuple containing (ip_address: str, port: int)
        
        Returns:
            HttpServer: A new server instance ready to be configured.
        
        Example:
        ```python
        server = HttpServer(("127.0.0.1", 5555))
        ```
        """
    def app_data(self, app_data:typing.Any) -> None:
        r"""
        Set application-wide data that will be available to all request handlers.
        
        This is the perfect place to store shared resources like database connection pools,
        counters, or any other data that needs to be accessible across your application.
        
        Args:
            app_data (any): Any Python object to be stored as application data.
        
        Returns:
            None
        
        Example:
        ```python
        class AppState:
            def __init__(self):
                self.counter = 0
                # You can store database connection pools here
                self.db_pool = create_database_pool()
        
        app = HttpServer(("127.0.0.1", 5555))
        app.app_data(AppState())
        
        # Example of a handler that increments the counter
        @router.get("/counter")
        def increment_counter(request):
            state = request.app_data
            state.counter += 1
            return {"count": state.counter}
        ```
        """
    def attach(self, router:Router) -> None:
        r"""
        Attach a router to the server.
        
        Args:
            router (Router): The router instance to attach.
        
        Returns:
            None
        
        Example:
        ```python
        router = Router()
        
        # Define a simple hello world handler
        @router.get("/")
        def hello(request):
            return "Hello, World!"
        
        # Handler with path parameters
        @router.get("/users/{user_id}")
        def get_user(request, user_id: int):
            return f"User ID: {user_id}"
        
        # Handler that returns JSON
        @router.get("/api/data")
        def get_data(request):
            return {"message": "Success", "data": [1, 2, 3]}
        
        # Attach the router to the server
        server.attach(router)
        ```
        """
    def session_store(self, session_store:SessionStore) -> None:
        r"""
        Set up a session store for managing user sessions.
        
        When configured, session data will be available in request handlers.
        
        Args:
            session_store (SessionStore): The session store instance to use.
        
        Returns:
            None
        
        Example:
        ```python
        server.session_store(SessionStore())
        ```
        """
    def template(self, template:Template) -> None:
        r"""
        Enable template rendering for the server.
        
        Args:
            template (Template): An instance of Template for rendering HTML.
        
        Returns:
            None
        
        Example:
        ```python
        from oxapy import templating
        
        server.template(templating.Template())
        ```
        """
    def cors(self, cors:Cors) -> None:
        r"""
        Set up Cross-Origin Resource Sharing (CORS) for the server.
        
        Args:
            cors (Cors): An instance of Cors with your desired CORS configuration.
        
        Returns:
            None
        
        Example:
        ```python
        cors = Cors()
        cors.origins = ["https://example.com"]
        server.cors(cors)
        ```
        """
    def max_connections(self, max_connections:builtins.int) -> None:
        r"""
        Set the maximum number of concurrent connections the server will handle.
        
        Args:
            max_connections (int): Maximum number of concurrent connections.
        
        Returns:
            None
        
        Example:
        ```python
        server.max_connections(1000)
        ```
        """
    def channel_capacity(self, channel_capacity:builtins.int) -> None:
        r"""
        Set the internal channel capacity for handling requests.
        
        This is an advanced setting that controls how many pending requests
        can be buffered internally.
        
        Args:
            channel_capacity (int): The channel capacity.
        
        Returns:
            None
        
        Example:
        ```python
        server.channel_capacity(200)
        ```
        """
    def catchers(self, catchers:typing.Sequence[Catcher]) -> None:
        r"""
        Add status code catchers to the server.
        
        Args:
            catchers (list): A list of Catcher handlers for specific status codes.
        
        Returns:
            None
        
        Example:
        ```python
        @catcher(Status.NOT_FOUND)
        def not_found(request, response):
            return Response("<h1>Page Not Found</h1>", content_type="text/html")
        
        server.catchers([not_found])
        ```
        """
    def async_mode(self) -> HttpServer:
        r"""
        Enable asynchronous mode for the server.
        
        In asynchronous mode, request handlers can be asynchronous Python functions
        (i.e., defined with `async def`). This allows you to perform non-blocking
        I/O operations within your handlers.
        
        Returns:
            HttpServer: A new HttpServer instance configured for asynchronous operation.
        
        Example:
        ```python
        import asyncio
        app = HttpServer(("127.0.0.1", 8000))
        
        @router.get("/")
        async def home(request):
            # Asynchronous operations are allowed here
            data = await fetch_data_from_database()
            return "Hello, World!"
        
        app.attach(router)
        
        await def main():
            await app.async_mode().run()
        
        asyncio.run(main())
        ```
        """
    def run(self, workers:typing.Optional[builtins.int]=None) -> typing.Any:
        r"""
        Run the HTTP server.
        
        This starts the server and blocks until interrupted (e.g., with Ctrl+C).
        
        Args:
            workers (int, optional): Number of worker threads to use. If not specified,
                                     the Tokio runtime will decide automatically.
        
        Returns:
            None
        
        Example:
        ```python
        # Run with default number of workers
        server.run()
        
        # Or specify number of workers based on CPU count
        import multiprocessing
        workers = multiprocessing.cpu_count()
        server.run(workers)
        ```
        """

class Redirect(Response):
    r"""
    HTTP redirect response.
    
    A specialized response type that redirects the client to a different URL.
    
    Args:
        location (str): The URL to redirect to.
    
    Returns:
        Redirect: A redirect response.
    
    Example:
    ```python
    # Redirect to the home page
    return Redirect("/home")
    
    # Redirect to an external site
    return Redirect("https://example.com")
    ```
    """
    def __new__(cls, location:builtins.str) -> Redirect:
        r"""
        Create a new HTTP redirect response.
        
        Args:
            location (str): The URL to redirect to.
        
        Returns:
            Redirect: A redirect response with status 301 (Moved Permanently).
        
        Example:
        ```python
        # Redirect user after form submission
        @router.post("/submit")
        def submit_form(request):
            # Process form...
            return Redirect("/thank-you")
        ```
        """

@typing.final
class Request:
    r"""
    HTTP request object containing information about the incoming request.
    
    This class provides access to request details such as method, URI, headers,
    body content, form data, uploaded files, and session information.
    
    Args:
        method (str): The HTTP method of the request (GET, POST, etc.)
        uri (str): The URI of the request
        headers (dict): HTTP headers as key-value pairs
    
    Returns:
        Request: A new request object
    
    Example:
    ```python
    # Request objects are typically created by the framework and
    # passed to your handler functions:
    
    @router.get("/hello")
    def handler(request):
        user_agent = request.headers.get("user-agent")
        return f"Hello from {user_agent}"
    ```
    """
    @property
    def method(self) -> builtins.str:
        r"""
        The HTTP method of the request (e.g., GET, POST, PUT).
        """
    @property
    def uri(self) -> builtins.str:
        r"""
        The full URI of the request including path and query string.
        """
    @property
    def headers(self) -> builtins.dict[builtins.str, builtins.str]:
        r"""
        HTTP headers as key-value pairs.
        """
    @property
    def data(self) -> typing.Optional[builtins.str]:
        r"""
        The raw data content of the request as a string, if present.
        """
    @property
    def form(self) -> typing.Optional[builtins.dict[builtins.str, builtins.str]]:
        r"""
        Form data parsed from the request body, available when content type is application/x-www-form-urlencoded.
        """
    @property
    def files(self) -> typing.Optional[builtins.dict[builtins.str, File]]:
        r"""
        Files uploaded in a multipart form request, mapping field names to File objects.
        """
    @property
    def app_data(self) -> typing.Optional[typing.Any]:
        r"""
        Get application-wide data that was set with HttpServer.app_data.
        
        Args:
            None
        
        Returns:
            any: The application data object, or None if no app_data was set
        
        Example:
        ```python
        @router.get("/counter")
        def get_counter(request):
            app_state = request.app_data
            app_state.counter += 1
            return {"count": app_state.counter}
        ```
        """
    def __new__(cls, method:builtins.str, uri:builtins.str, headers:typing.Mapping[builtins.str, builtins.str]) -> Request:
        r"""
        Create a new Request instance.
        
        Note: This is primarily for internal use. Request objects are typically created
        by the framework and passed to your handler functions.
        
        Args:
            method (str): The HTTP method of the request (GET, POST, etc.)
            uri (str): The URI of the request
            headers (dict): HTTP headers as key-value pairs
        
        Returns:
            Request: A new request object
        """
    def json(self) -> dict:
        r"""
        Parse the request body as JSON and return it as a dictionary.
        
        Args:
            None
        
        Returns:
            dict: The parsed JSON data as a Python dictionary
        
        Raises:
            Exception: If the body is not present or cannot be parsed as JSON
        
        Example:
        ```python
        @router.post("/api/data")
        def handle_data(request):
            data = request.json()
            value = data["key"]
            return {"received": value}
        ```
        """
    def query(self) -> typing.Optional[builtins.dict[builtins.str, builtins.str]]:
        r"""
        Parse and return the query parameters from the request URI.
        
        Args:
            None
        
        Returns:
            dict or None: Dictionary of query parameters, or None if no query string exists
        
        Raises:
            Exception: If the URI cannot be parsed
        
        Example:
        ```python
        # For a request to /api?name=John&age=30
        @router.get("/api")
        def api_handler(request):
            query = request.query()
            name = query.get("name")
            age = query.get("age")
            return {"name": name, "age": age}
        ```
        """
    def session(self) -> Session:
        r"""
        Get the session object for the current request.
        
        Use this to access or modify session data that persists across requests.
        
        Args:
            None
        
        Returns:
            Session: The session instance for this request
        
        Raises:
            AttributeError: If session store is not configured on the server
        
        Example:
        ```python
        @router.get("/login")
        def login(request):
            session = request.session()
            session["user_id"] = 123
            session["is_authenticated"] = True
            return "Logged in successfully"
        ```
        """
    def get_cookie(self, name:builtins.str) -> typing.Optional[builtins.str]: ...
    def __getattr__(self, name:builtins.str) -> typing.Any: ...
    def __setattr__(self, name:builtins.str, value:typing.Any) -> None: ...
    def __repr__(self) -> builtins.str: ...

class Response:
    r"""
    HTTP response object that is returned from request handlers.
    
    Args:
        body (any): The response body, can be a string, bytes, or JSON-serializable object.
        status (Status, optional): The HTTP status code (defaults to Status.OK).
        content_type (str, optional): The content type header (defaults to "application/json").
    
    Returns:
        Response: A new HTTP response.
    
    Example:
    ```python
    # JSON response
    response = Response({"message": "Success"})
    
    # Plain text response
    response = Response("Hello, World!", content_type="text/plain")
    
    # HTML response with custom status
    response = Response("<h1>Not Found</h1>", Status.NOT_FOUND, "text/html")
    `
    """
    @property
    def status(self) -> Status: ...
    @status.setter
    def status(self, value: Status) -> None: ...
    @property
    def body(self) -> builtins.str:
        r"""
        Get the response body as a string.
        
        Returns:
            str: The response body as a UTF-8 string.
        
        Raises:
            Exception: If the body cannot be converted to a valid UTF-8 string.
        """
    @property
    def headers(self) -> builtins.list[tuple[builtins.str, builtins.str]]:
        r"""
        Get the response headers as a list of key-value tuples.
        
        Returns:
        
            list[tuple[str, str]]: The list of headers in the response.
        
        Raises:
        
            Exception: If a header value cannot be converted to a valid UTF-8 string.
        
        Example:
        ```python
        response = Response("Hello")
        headers = response.headers
        for name, value in headers:
            print(f"{name}: {value}")
        ```
        """
    def __new__(cls, body:typing.Any, status:Status=Status.OK, content_type:builtins.str='application/json') -> Response:
        r"""
        Create a new Response instance.
        
        Args:
            body (any): The response body content (string, bytes, or JSON-serializable object).
            status (Status, optional): HTTP status code, defaults to Status.OK.
            content_type (str, optional): Content-Type header, defaults to "application/json".
        
        Returns:
            Response: A new response object.
        
        Example:
        ```python
        # Return JSON
        response = Response({"message": "Hello"})
        
        # Return plain text
        response = Response("Hello", content_type="text/plain")
        
        # Return error
        response = Response("Not authorized", status=Status.UNAUTHORIZED)
        ```
        """
    def insert_header(self, key:builtins.str, value:builtins.str) -> None:
        r"""
        Add or update a header in the response.
        
        Args:
            key (str): The header name.
            value (str): The header value.
        
        Returns:
            Response: The response instance (for method chaining).
        
        Example:
        ```python
        response = Response("Hello")
        response.insert_header("Cache-Control", "no-cache")
        ```
        """
    def append_header(self, key:builtins.str, value:builtins.str) -> None:
        r"""
        Append a header to the response.
        
        This is useful for headers that can appear multiple times, such as `Set-Cookie`.
        
        Args:
        
            key (str): The header name.
            value (str): The header value.
        
        Returns:
        
            None
        
        Example:
        ```python
        response = Response("Hello")
        response.insert_header("Set-Cookie", "sessionid=abc123")
        response.append_header("Set-Cookie", "theme=dark")
        ```
        """

@typing.final
class Route:
    r"""
    A route definition that maps a URL path to a handler function.
    
    Args:
        path (str): The URL path pattern.
        method (str, optional): The HTTP method (defaults to "GET").
    
    Returns:
        Route: A route object that can be registered with a router.
    
    Example:
    ```python
    from oxapy import Route
    
    def handler(request):
        return "Hello, World!"
    
    route = Route("/hello", "GET")
    route = route(handler)  # Attach the handler
    ```
    """
    def __new__(cls, path:builtins.str, method:typing.Optional[builtins.str]=None) -> Route: ...
    def __call__(self, handler:typing.Any) -> Route: ...
    def __repr__(self) -> builtins.str: ...

@typing.final
class RouteBuilder:
    def __call__(self, handler:typing.Any) -> Route: ...

@typing.final
class Router:
    r"""
    A router for handling HTTP routes.
    
    The Router is responsible for registering routes and handling HTTP requests.
    It supports path parameters, middleware, and different HTTP methods.
    
    Returns:
        Router: A new router instance.
    
    Example:
    ```python
    from oxapy import Router, get
    
    router = Router()
    
    @router.get("/hello/{name}")
    def hello(request, name):
        return f"Hello, {name}!"
    ```
    """
    def __new__(cls) -> Router:
        r"""
        Create a new Router instance.
        
        Returns:
            Router: A new router with no routes or middleware.
        
        Example:
        ```python
        router = Router()
        ```
        """
    def middleware(self, middleware:typing.Any) -> None:
        r"""
        Add middleware to the router.
        
        Middleware functions are executed in the order they are added,
        before the route handler.
        
        Args:
            middleware (callable): A function that will process requests before route handlers.
        
        Returns:
            None
        
        Example:
        ```python
        def auth_middleware(request, next, **kwargs):
            if "authorization" not in request.headers:
                return Status.UNAUTHORIZED
            return next(request, **kwargs)
        
        router.middleware(auth_middleware)
        ```
        """
    def route(self, route:Route) -> None:
        r"""
        Register a route with the router.
        
        Args:
            route (Route): The route to register.
        
        Returns:
            None
        
        Raises:
            Exception: If the route cannot be added.
        
        Example:
        ```python
        from oxapy import get
        
        def hello_handler(request):
            return "Hello World!"
        
        route = get("/hello", hello_handler)
        router.route(route)
        ```
        """
    def routes(self, routes:typing.Sequence[Route]) -> None:
        r"""
        Register multiple routes with the router.
        
        Args:
            routes (list): A list of Route objects to register.
        
        Returns:
            None
        
        Raises:
            Exception: If any route cannot be added.
        
        Example:
        ```python
        from oxapy import get, post
        
        def hello_handler(request):
            return "Hello World!"
        
        def submit_handler(request):
            return "Form submitted!"
        
        routes = [
            get("/hello", hello_handler),
            post("/submit", submit_handler)
        ]
        router.routes(routes)
        ```
        """
    def get(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a GET route using the decorator `@router.get(path)`.
        
        Example:
        ```python
        @router.get("/hello")
        def hello(request):
            return "Hello, world!"
        ```
        """
    def post(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a POST route using the decorator `@router.post(path)`.
        
        Example:
        ```python
        @router.post("/submit")
        def submit(request):
            return "Submitted!"
        ```
        """
    def put(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a PUT route using the decorator `@router.put(path)`.
        
        Example:
        ```python
        @router.put("/items/{id}")
        def update_item(request, id):
            return f"Updated item {id}"
        ```
        """
    def patch(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a PATCH route using the decorator `@router.patch(path)`.
        
        Example:
        ```python
        @router.patch("/items/{id}")
        def patch_item(request, id):
            return f"Patched item {id}"
        ```
        """
    def delete(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a DELETE route using the decorator `@router.delete(path)`.
        
        Example:
        ```python
        @router.delete("/items/{id}")
        def delete_item(request, id):
            return f"Deleted item {id}"
        ```
        """
    def head(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register a HEAD route using the decorator `@router.head(path)`.
        
        Example:
        ```python
        @router.head("/ping")
        def head_ping(request):
            return ""
        ```
        """
    def options(self, path:builtins.str) -> RouteBuilder:
        r"""
        Register an OPTIONS route using the decorator `@router.options(path)`.
        
        Example:
        ```python
        @router.options("/data")
        def options_data(request):
            return "OPTIONS OK"
        ```
        """
    def __repr__(self) -> builtins.str: ...

@typing.final
class Session:
    r"""
    Session storage for maintaining state between requests.
    
    The Session class provides a dictionary-like interface for storing data
    that persists across multiple requests from the same client.
    
    Args:
        id (str, optional): Custom session ID. If not provided, a random ID will be generated.
    
    Returns:
        Session: A new session instance.
    
    Example:
    ```python
    # Sessions are typically accessed from the request object:
    @router.get("/profile")
    def profile(request):
        session = request.session()
        session["last_visit"] = "today"
        return {"user_id": session.get("user_id")}
    ```
    """
    @property
    def id(self) -> builtins.str: ...
    @property
    def create_at(self) -> builtins.int: ...
    def __new__(cls, id:typing.Optional[builtins.str]) -> Session:
        r"""
        Create a new Session instance.
        
        Args:
            id (str, optional): Custom session ID. If not provided, a random ID will be generated.
        
        Returns:
            Session: A new session instance.
        
        Example:
        ```python
        # Manual session creation (normally handled by the framework)
        session = Session()
        ```
        """
    def get(self, key:builtins.str) -> typing.Any:
        r"""
        Get a value from the session by key.
        
        Args:
            key (str): The key to look up in the session.
        
        Returns:
            any: The value associated with the key, or None if the key doesn't exist.
        
        Example:
        ```python
        user_id = session.get("user_id")
        if user_id is not None:
            # User is logged in
        ```
        """
    def set(self, key:builtins.str, value:typing.Any) -> None:
        r"""
        Set a value in the session.
        
        Args:
            key (str): The key to store the value under.
            value (any): The value to store in the session.
        
        Returns:
            None
        
        Example:
        ```python
        # Store user information in the session
        session.set("user_id", 123)
        session.set("is_admin", False)
        ```
        """
    def remove(self, key:builtins.str) -> None:
        r"""
        Remove a key-value pair from the session.
        
        Args:
            key (str): The key to remove.
        
        Returns:
            None
        
        Example:
        ```python
        # Log user out by removing their session data
        session.remove("user_id")
        session.remove("is_admin")
        ```
        """
    def clear(self) -> None:
        r"""
        Remove all data from the session.
        
        Args:
            None
        
        Returns:
            None
        
        Example:
        ```python
        # Clear all session data (e.g., during logout)
        session.clear()
        ```
        """
    def keys(self) -> typing.Any:
        r"""
        Get all keys in the session.
        
        Args:
            None
        
        Returns:
            list: A list of all keys in the session.
        
        Example:
        ```python
        # Check what data is stored in the session
        for key in session.keys():
            print(f"Session contains: {key}")
        ```
        """
    def values(self) -> typing.Any: ...
    def items(self) -> typing.Any: ...
    def __contains__(self, key:builtins.str) -> builtins.bool: ...
    def __iter__(self) -> typing.Any: ...
    def __getitem__(self, key:builtins.str) -> typing.Any: ...
    def __setitem__(self, key:builtins.str, value:typing.Any) -> None: ...
    def __delitem__(self, key:builtins.str) -> None: ...
    def __len__(self) -> builtins.int: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

@typing.final
class SessionStore:
    r"""
    Manages sessions for the application.
    
    The SessionStore maintains all active sessions and handles their serialization
    and deserialization via cookies.
    
    Args:
        cookie_name (str, optional): Name of the cookie used for session tracking (default: "session").
        cookie_max_age (int, optional): Max age of the cookie in seconds (default: None).
        cookie_path (str, optional): Path for the cookie (default: "/").
        cookie_secure (bool, optional): Whether the cookie should only be sent over HTTPS (default: False).
        cookie_http_only (bool, optional): Whether the cookie is inaccessible to JavaScript (default: True).
        cookie_same_site (str, optional): SameSite cookie policy ("Lax", "Strict", or "None") (default: "Lax").
        expiry_seconds (int, optional): How long sessions should last in seconds (default: 86400 - one day).
    
    Returns:
        SessionStore: A new session store instance.
    
    Example:
    ```python
    from oxapy import HttpServer, SessionStore
    
    app = HttpServer(("127.0.0.1", 8000))
    
    # Configure sessions with custom settings
    store = SessionStore(
        cookie_name="my_app_session",
        cookie_secure=True,
        expiry_seconds=3600  # 1 hour
    )
    app.session_store(store)
    ```
    """
    @property
    def cookie_name(self) -> builtins.str: ...
    @cookie_name.setter
    def cookie_name(self, value: builtins.str) -> None: ...
    @property
    def cookie_max_age(self) -> typing.Optional[builtins.int]: ...
    @cookie_max_age.setter
    def cookie_max_age(self, value: typing.Optional[builtins.int]) -> None: ...
    @property
    def cookie_path(self) -> builtins.str: ...
    @cookie_path.setter
    def cookie_path(self, value: builtins.str) -> None: ...
    @property
    def cookie_secure(self) -> builtins.bool: ...
    @cookie_secure.setter
    def cookie_secure(self, value: builtins.bool) -> None: ...
    @property
    def cookie_http_only(self) -> builtins.bool: ...
    @cookie_http_only.setter
    def cookie_http_only(self, value: builtins.bool) -> None: ...
    @property
    def cookie_same_site(self) -> builtins.str: ...
    @cookie_same_site.setter
    def cookie_same_site(self, value: builtins.str) -> None: ...
    @property
    def expiry_seconds(self) -> typing.Optional[builtins.int]: ...
    @expiry_seconds.setter
    def expiry_seconds(self, value: typing.Optional[builtins.int]) -> None: ...
    def __new__(cls, cookie_name:builtins.str='session', cookie_max_age:typing.Optional[builtins.int]=None, cookie_path:builtins.str='/', cookie_secure:builtins.bool=False, cookie_http_only:builtins.bool=True, cookie_same_site:builtins.str='Lax', expiry_seconds:typing.Optional[builtins.int]=86400) -> SessionStore:
        r"""
        Create a new SessionStore.
        
        Args:
            cookie_name (str, optional): Name of the cookie used for session tracking (default: "session").
            cookie_max_age (int, optional): Max age of the cookie in seconds (default: None).
            cookie_path (str, optional): Path for the cookie (default: "/").
            cookie_secure (bool, optional): Whether the cookie should only be sent over HTTPS (default: False).
            cookie_http_only (bool, optional): Whether the cookie is inaccessible to JavaScript (default: True).
            cookie_same_site (str, optional): SameSite cookie policy ("Lax", "Strict", or "None") (default: "Lax").
            expiry_seconds (int, optional): How long sessions should last in seconds (default: 86400 - one day).
        
        Returns:
            SessionStore: A new session store instance.
        
        Example:
        ```python
        # Create a session store with default settings
        store = SessionStore()
        
        # Create a session store with custom settings
        secure_store = SessionStore(
            cookie_name="secure_session",
            cookie_secure=True,
            cookie_same_site="Strict"
        )
        ```
        """
    def get_session(self, session_id:typing.Optional[builtins.str]) -> Session:
        r"""
        Get a session by ID or create a new one if not found.
        
        Args:
            session_id (str, optional): The session ID to look up.
        
        Returns:
            Session: The existing session if found, or a new session otherwise.
        
        Note:
            This method is primarily used internally by the framework.
        """
    def clear_session(self, session_id:builtins.str) -> builtins.bool:
        r"""
        Remove a session from the store.
        
        Args:
            session_id (str): The ID of the session to remove.
        
        Returns:
            bool: True if the session was found and removed, False otherwise.
        
        Example:
        ```python
        # Clear a specific session
        session_store.clear_session("abcd1234")
        ```
        """
    def session_count(self) -> builtins.int:
        r"""
        Get the total number of active sessions.
        
        Args:
            None
        
        Returns:
            int: The number of active sessions in the store.
        
        Example:
        ```python
        # Check how many active sessions exist
        count = session_store.session_count()
        print(f"Active sessions: {count}")
        ```
        """
    def get_cookie_header(self, session:Session) -> builtins.str: ...

@typing.final
class Status(enum.Enum):
    r"""
    HTTP status codes enumeration.
    
    This enum contains standard HTTP status codes as defined in RFC 7231 and other RFCs.
    Status codes are grouped by their first digit:
    - 1xx: Informational responses
    - 2xx: Successful responses
    - 3xx: Redirection messages
    - 4xx: Client error responses
    - 5xx: Server error responses
    
    Example:
    ```python
    from oxapy import Status, Response
    
    # Create a not found response
    response = Response("Not found", status=Status.NOT_FOUND)
    
    # Check status in a handler
    @router.get("/resource/{id}")
    def get_resource(request, id):
        resource = find_resource(id)
        if resource is None:
            return Status.NOT_FOUND
        return resource
    ```
    """
    CONTINUE = ...
    r"""
    100 Continue - Server has received the request headers and client should proceed to send the request body
    """
    SWITCHING_PROTOCOLS = ...
    r"""
    101 Switching Protocols - Server is switching protocols as requested by the client
    """
    PROCESSING = ...
    r"""
    102 Processing - Server has received and is processing the request, but no response is available yet
    """
    OK = ...
    r"""
    200 OK - Request has succeeded
    """
    CREATED = ...
    r"""
    201 Created - Request has succeeded and a new resource has been created
    """
    ACCEPTED = ...
    r"""
    202 Accepted - Request has been accepted for processing, but processing has not been completed
    """
    NON_AUTHORITATIVE_INFORMATION = ...
    r"""
    203 Non-Authoritative Information - Request was successful but returned metadata from another source
    """
    NO_CONTENT = ...
    r"""
    204 No Content - Request succeeded but returns no message body
    """
    RESET_CONTENT = ...
    r"""
    205 Reset Content - Request succeeded, and the user agent should reset the document view
    """
    PARTIAL_CONTENT = ...
    r"""
    206 Partial Content - Server is delivering only part of the resource due to a range header in the request
    """
    MULTI_STATUS = ...
    r"""
    207 Multi-Status - Provides status for multiple independent operations (WebDAV)
    """
    ALREADY_REPORTED = ...
    r"""
    208 Already Reported - Used in a DAV response to avoid enumerating members of multiple bindings to the same collection
    """
    IM_USED = ...
    r"""
    226 IM Used - The server has fulfilled a request for the resource, and the response is a representation of the instance-manipulation result
    """
    MULTIPLE_CHOICES = ...
    r"""
    300 Multiple Choices - The request has more than one possible response
    """
    MOVED_PERMANENTLY = ...
    r"""
    301 Moved Permanently - The URI of the requested resource has been changed permanently
    """
    FOUND = ...
    r"""
    302 Found - The URI of the requested resource has been changed temporarily
    """
    SEE_OTHER = ...
    r"""
    303 See Other - The response to the request can be found at another URI
    """
    NOT_MODIFIED = ...
    r"""
    304 Not Modified - Resource hasn't been modified since last request
    """
    USE_PROXY = ...
    r"""
    305 Use Proxy - The requested resource must be accessed through the proxy given by the location field
    """
    TEMPORARY_REDIRECT = ...
    r"""
    307 Temporary Redirect - The request should be repeated with another URI, but future requests can still use the original URI
    """
    PERMANENT_REDIRECT = ...
    r"""
    308 Permanent Redirect - All future requests should use another URI
    """
    BAD_REQUEST = ...
    r"""
    400 Bad Request - The server cannot or will not process the request due to client error
    """
    UNAUTHORIZED = ...
    r"""
    401 Unauthorized - Authentication is required and has failed or not been provided
    """
    PAYMENT_REQUIRED = ...
    r"""
    402 Payment Required - Reserved for future use
    """
    FORBIDDEN = ...
    r"""
    403 Forbidden - Server understood the request but refuses to authorize it
    """
    NOT_FOUND = ...
    r"""
    404 Not Found - The requested resource could not be found on the server
    """
    METHOD_NOT_ALLOWED = ...
    r"""
    405 Method Not Allowed - The request method is not supported for the requested resource
    """
    NOT_ACCEPTABLE = ...
    r"""
    406 Not Acceptable - The requested resource is capable of generating only content not acceptable according to the Accept headers
    """
    PROXY_AUTHENTICATION_REQUIRED = ...
    r"""
    407 Proxy Authentication Required - Authentication with the proxy is required
    """
    REQUEST_TIMEOUT = ...
    r"""
    408 Request Timeout - The server timed out waiting for the request
    """
    CONFLICT = ...
    r"""
    409 Conflict - The request could not be completed due to a conflict with the current state of the resource
    """
    GONE = ...
    r"""
    410 Gone - The requested resource is no longer available and will not be available again
    """
    LENGTH_REQUIRED = ...
    r"""
    411 Length Required - The request did not specify the length of its content, which is required
    """
    PRECONDITION_FAILED = ...
    r"""
    412 Precondition Failed - Server does not meet one of the preconditions in the request
    """
    PAYLOAD_TOO_LARGE = ...
    r"""
    413 Payload Too Large - The request is larger than the server is willing or able to process
    """
    URI_TOO_LONG = ...
    r"""
    414 URI Too Long - The URI provided was too long for the server to process
    """
    UNSUPPORTED_MEDIA_TYPE = ...
    r"""
    415 Unsupported Media Type - The request entity has a media type which the server does not support
    """
    RANGE_NOT_SATISFIABLE = ...
    r"""
    416 Range Not Satisfiable - The client has asked for a portion of the file, but the server cannot supply that portion
    """
    EXPECTATION_FAILED = ...
    r"""
    417 Expectation Failed - The server cannot meet the requirements of the Expect request-header field
    """
    IM_A_TEAPOT = ...
    r"""
    418 I'm a Teapot - The server refuses the attempt to brew coffee with a teapot (April Fools' joke)
    """
    MISDIRECTED_REQUEST = ...
    r"""
    421 Misdirected Request - The request was directed at a server that is not able to produce a response
    """
    UNPROCESSABLE_ENTITY = ...
    r"""
    422 Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors
    """
    LOCKED = ...
    r"""
    423 Locked - The resource that is being accessed is locked (WebDAV)
    """
    FAILED_DEPENDENCY = ...
    r"""
    424 Failed Dependency - The request failed due to failure of a previous request (WebDAV)
    """
    UPGRADE_REQUIRED = ...
    r"""
    426 Upgrade Required - The client should switch to a different protocol
    """
    PRECONDITION_REQUIRED = ...
    r"""
    428 Precondition Required - The origin server requires the request to be conditional
    """
    TOO_MANY_REQUESTS = ...
    r"""
    429 Too Many Requests - The user has sent too many requests in a given amount of time
    """
    REQUEST_HEADER_FIELDS_TOO_LARGE = ...
    r"""
    431 Request Header Fields Too Large - The server is unwilling to process the request because its header fields are too large
    """
    UNAVAILABLE_FOR_LEGAL_REASONS = ...
    r"""
    451 Unavailable For Legal Reasons - The server is denying access to the resource as a consequence of a legal demand
    """
    INTERNAL_SERVER_ERROR = ...
    r"""
    500 Internal Server Error - The server has encountered a situation it doesn't know how to handle
    """
    NOT_IMPLEMENTED = ...
    r"""
    501 Not Implemented - The server does not support the functionality required to fulfill the request
    """
    BAD_GATEWAY = ...
    r"""
    502 Bad Gateway - The server was acting as a gateway or proxy and received an invalid response from the upstream server
    """
    SERVICE_UNAVAILABLE = ...
    r"""
    503 Service Unavailable - The server is not ready to handle the request, often due to maintenance or overloading
    """
    GATEWAY_TIMEOUT = ...
    r"""
    504 Gateway Timeout - The server was acting as a gateway or proxy and did not receive a timely response from the upstream server
    """
    HTTP_VERSION_NOT_SUPPORTED = ...
    r"""
    505 HTTP Version Not Supported - The server does not support the HTTP protocol version used in the request
    """
    VARIANT_ALSO_NEGOTIATES = ...
    r"""
    506 Variant Also Negotiates - The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself
    """
    INSUFFICIENT_STORAGE = ...
    r"""
    507 Insufficient Storage - The server is unable to store the representation needed to complete the request (WebDAV)
    """
    LOOP_DETECTED = ...
    r"""
    508 Loop Detected - The server detected an infinite loop while processing the request (WebDAV)
    """
    NOT_EXTENDED = ...
    r"""
    510 Not Extended - Further extensions to the request are required for the server to fulfill it
    """
    NETWORK_AUTHENTICATION_REQUIRED = ...
    r"""
    511 Network Authentication Required - The client needs to authenticate to gain network access
    """

    def __richcmp__(self, other:Status, op:int) -> builtins.bool:
        r"""
        Compare two Status objects.
        
        This method allows Python code to use comparison operators (==, !=, <, <=, >, >=)
        between Status enum values.
        
        Args:
            other (Status): The status to compare with.
            op (CompareOp): The comparison operation to perform.
        
        Returns:
            bool: The result of the comparison.
        
        Example:
        ```python
        # Check if a status code is a success code (2xx)
        if status >= Status.OK and status < Status.MULTIPLE_CHOICES:
            print("Success!")
        ```
        """
    def code(self) -> builtins.int:
        r"""
        Return the status code
        
        Args:
            None
        
        Returns:
            int: The status code
        """

def convert_to_response(result:typing.Any) -> Response:
    r"""
    Convert a Python object into an OxAPY `Response`.
    
    This function normalizes the output of Python route handlers into a `Response` object
    that can be sent back to the client. It supports multiple return types such as strings,
    dictionaries, tuples, or even existing `Response` objects.
    
    If a handler returns an unsupported type, a `PyValueError` will be raised.
    
    Args:
        result (Any): The Python object returned by a route handler or middleware.
    
    Returns:
        Response: A valid OxAPY `Response` object.
    
    Supported return types:
        - `Response`: Returned directly without modification.
        - `str`: Converted into a text/plain `Response`.
        - `dict` / Python object: Serialized into JSON automatically.
        - `(str, Status)`: Returns a text response with the given status code.
        - `(Response, Status)`: Returns the provided `Response` but updates the status code.
    
    Example:
    ```python
    from oxapy import Response, Status, convert_to_response
    
    # From string
    convert_to_response("Hello World")
    
    # From dictionary (converted to JSON)
    convert_to_response({"message": "success"})
    
    # From tuple (content + status)
    convert_to_response(("Not Found", Status.NOT_FOUND))
    
    # From Response instance
    response = Response("OK", status=Status.OK)
    convert_to_response(response)
    ```
    
    Notes:
        This function is mainly used internally by the framework to unify handler return types,
        but it can also be used manually if you’re building custom middlewares or decorators.
    """

def delete(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP DELETE route.
    
    Parameters:
        path (str): The DELETE route path.
        handler (callable | None): Optional Python function that handles the request.
    
    Returns:
        Route: A DELETE Route instance.
    
    Example:
    ```python
    delete("/items/{id}", lambda req, id: f"Deleted {id}")
    ```
    """

def get(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP GET route.
    
    Parameters:
        path (str): The route path, which may include parameters (e.g. `/items/{id}`).
        handler (callable | None): Optional Python function that handles the request.
    
    Returns:
        Route: A GET Route instance.
    
    Example:
    ```python
    get("/hello/{name}", lambda req, name: f"Hello, {name}!")
    ```
    """

def head(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP HEAD route.
    
    Parameters:
        path (str): The HEAD route path.
        handler (callable | None): Optional function for returning headers only.
    
    Returns:
        Route: A HEAD Route instance.
    
    Example:
    ```python
    head("/status", lambda req: None)
    ```
    """

def options(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP OPTIONS route.
    
    Parameters:
        path (str): The OPTIONS route path.
        handler (callable | None): Optional handler that returns allowed methods.
    
    Returns:
        Route: An OPTIONS Route instance.
    
    Example:
    ```python
    options("/users", lambda req: {"Allow": "GET, POST"})
    ```
    """

def patch(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP PATCH route.
    
    Parameters:
        path (str): The PATCH route path.
        handler (callable | None): Optional Python function for partial updates.
    
    Returns:
        Route: A PATCH Route instance.
    
    Example:
    ```python
    patch("/users/{id}", lambda req, id: req.json())
    ```
    """

def post(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP POST route.
    
    Parameters:
        path (str): The POST route path.
        handler (callable | None): Optional Python function that handles the request.
    
    Returns:
        Route: A POST Route instance.
    
    Example:
    ```python
    post("/users", lambda req: {"id": 1, "name": req.json()["name"]})
    ```
    """

def put(path:builtins.str, handler:typing.Optional[typing.Any]=None) -> Route:
    r"""
    Registers an HTTP PUT route.
    
    Parameters:
        path (str): The PUT route path.
        handler (callable | None): Optional Python function for full replacement.
    
    Returns:
        Route: A PUT Route instance.
    
    Example:
    ```python
    put("/users/{id}", lambda req, id: req.json())
    ```
    """

def render(request:Request, name:builtins.str, context:typing.Optional[dict]=None) -> Response:
    r"""
    Render a template and return the result as an HTTP response.
    
    This function renders a template using the template engine configured for the request.
    
    Args:
        request (Request): The HTTP request object containing template configuration.
        name (str): The name of the template to render.
        context (dict, optional): Template variables to use during rendering.
    
    Returns:
        Response: An HTTP response with the rendered template as HTML.
    
    Raises:
        PyValueError: If no template engine is configured for the request.
    
    Example:
    ```python
    from oxapy import Router
    from oxapy import templating
    
    router = Router()
    
    @router.get("/")
    def index(request):
        return templating.render(request, "index.html", {"title": "Home Page"})
    ```
    """

def static_file(directory:builtins.str, path:builtins.str) -> Route:
    r"""
    Create a route for serving static files.
    
    Args:
        directory (str): The directory containing static files.
        path (str): The URL path at which to serve the files.
    
    Returns:
        Route: A route configured to serve static files.
    
    Example:
    ```python
    from oxapy import Router, static_file
    
    router = Router()
    router.route(static_file("./static", "static"))
    # This will serve files from ./static directory at /static URL path
    ```
    """

