# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

@typing.final
class BadRequestError(ClientError):
    r"""
    HTTP 400 Bad Request error exception.
    
    Raised when the server cannot process the request due to client error,
    such as malformed request syntax, invalid request message framing,
    or deceptive request routing.
    
    This exception corresponds to HTTP status code 400.
    """
    def __new__(cls, e:typing.Any) -> BadRequestError: ...

class ClientError(builtins.Exception):
    r"""
    Base exception for all client-related HTTP errors.
    
    This is the parent class for all HTTP client error exceptions (4xx status codes).
    It extends Python's built-in Exception class and serves as a base for more
    specific HTTP error types.
    
    This exception is typically not raised directly, but rather one of its
    more specific subclasses should be used.
    """
    def __new__(cls, e:typing.Any) -> ClientError: ...

@typing.final
class ConflictError(ClientError):
    r"""
    HTTP 409 Conflict error exception.
    
    Raised when the request could not be completed due to a conflict with
    the current state of the resource. This often occurs in scenarios involving
    resource creation where a duplicate would be created, or during updates
    that would create an inconsistent state.
    
    This exception corresponds to HTTP status code 409.
    """
    def __new__(cls, e:typing.Any) -> ConflictError: ...

@typing.final
class ForbiddenError(ClientError):
    r"""
    HTTP 403 Forbidden error exception.
    
    Raised when the client is authenticated but does not have permission
    to access the requested resource. Unlike 401 Unauthorized, the client's
    identity is known to the server but lacks sufficient privileges.
    
    This exception corresponds to HTTP status code 403.
    """
    def __new__(cls, e:typing.Any) -> ForbiddenError: ...

@typing.final
class InternalError(builtins.Exception):
    r"""
    HTTP 500 Internal Server Error exception.
    
    Raised when the server encounters an unexpected condition that prevents
    it from fulfilling the request. This is a generic error message when
    no more specific message is suitable.
    
    This exception corresponds to HTTP status code 500.
    """
    def __new__(cls, e:typing.Any) -> InternalError: ...

@typing.final
class NotFoundError(ClientError):
    r"""
    HTTP 404 Not Found error exception.
    
    Raised when the requested resource could not be found on the server.
    This is one of the most common HTTP errors and indicates that the
    server has not found anything matching the requested URI.
    
    This exception corresponds to HTTP status code 404.
    """
    def __new__(cls, e:typing.Any) -> NotFoundError: ...

@typing.final
class UnauthorizedError(ClientError):
    r"""
    HTTP 401 Unauthorized error exception.
    
    Raised when authentication is required and has failed or has not been provided.
    The client must authenticate itself to get the requested response.
    
    This exception corresponds to HTTP status code 401.
    """
    def __new__(cls, e:typing.Any) -> UnauthorizedError: ...

