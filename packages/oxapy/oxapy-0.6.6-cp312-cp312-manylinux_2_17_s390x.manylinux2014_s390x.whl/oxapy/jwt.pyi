# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

@typing.final
class Jwt:
    r"""
    Python class for generating and verifying JWT tokens
    """
    def __new__(cls, secret:builtins.str, algorithm:builtins.str='HS256') -> Jwt:
        r"""
        Create a new JWT
        
        Args:
            secret (str): Secret key used for signing tokens
            algorithm (str): JWT algorithm to use (default: "HS256")
        
        Returns:
            Jwt: A new Jwt instance
        
        Raises:
            Exception: If the algorithm is not supported or secret is invalid
        
        Example:
        ```python
        from oxapy import jwt
        
        jwt_handler = jwt.Jwt(secret="mysecret", algorithm="HS256")
        ```
        """
    def generate_token(self, claims:dict) -> builtins.str:
        r"""
        Generate a JWT token with the given claims
        
        Args:
            claims: A dictionary of claims to include in the token
        
        Returns:
            JWT token string
        
        Raises:
            Exception: If claims cannot be serialized or the token cannot be generated
        
        Example:
        ```python
        from oxapy import jwt, Router
        
        jwt_handler = jwt.Jwt(secret="mysecret", algorithm="HS256")
        router = Router()
        
        @router.post("/login")
        def login(request):
            # Authenticate user...
            claims = {
                "exp": 3600,  # seconds from now
                "sub": "user123",  # subject (optional)
                "iss": "myapp",    # issuer (optional)
                "aud": "webapp",   # audience (optional)
                "nbf": 1234567890  # not before timestamp (optional)
            }
            token = jwt_handler.generate_token(claims)
            return {"token": token}
        ```
        """
    def verify_token(self, token:builtins.str) -> dict:
        r"""
        Verify the integrity of the JWT token
        
        Args:
            token: A JWT token String
        
        Returns:
            Return Dictionary: the claims that you use to generate the token
        
        Raises:
            JwtError: if token was expired or not valid token
        
        Example:
        ```python
        from oxapy import jwt, Router, exceptions
        
        jwt_handler = jwt.Jwt(secret="mysecret", algorithm="HS256")
        router = Router()
        
        @router.get("/protected")
        def protected_route(request):
            token = request.headers.get("Authorization", "").replace("Bearer ", "")
            try:
                claims = jwt_handler.verify_token(token)
                return {"user_id": claims["sub"], "message": "Access granted"}
            except jwt.JwtDecodingError:
                raise exceptions.UnauthorizedError("Invalid or expired token")
        ```
        """

@typing.final
class JwtDecodingError(JwtError):
    r"""
    Occurs when there's an error during JWT decoding/verification.
    """
    def __new__(cls, e:typing.Any) -> JwtDecodingError: ...

@typing.final
class JwtEncodingError(JwtError):
    r"""
    Occurs when there's an error during JWT encoding.
    """
    def __new__(cls, e:typing.Any) -> JwtEncodingError: ...

class JwtError(builtins.Exception):
    r"""
    Base class for all JWT related exceptions.
    """
    def __new__(cls, e:typing.Any) -> JwtError: ...

@typing.final
class JwtInvalidAlgorithm(JwtError):
    r"""
    Occurs when the JWT algorithm is invalid or not supported.
    """
    def __new__(cls, e:typing.Any) -> JwtInvalidAlgorithm: ...

@typing.final
class JwtInvalidClaim(JwtError):
    r"""
    Occurs when a JWT claim is invalid (e.g., wrong format).
    """
    def __new__(cls, e:typing.Any) -> JwtInvalidClaim: ...

