"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .agentseterror import AgentsetError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .agentsetdefaulterror import AgentsetDefaultError
    from .badrequest_error import BadRequestError, BadRequestErrorData
    from .conflict_error import ConflictError, ConflictErrorData
    from .forbidden_error import ForbiddenError, ForbiddenErrorData
    from .internalservererror import InternalServerError, InternalServerErrorData
    from .inviteexpired_error import InviteExpiredError, InviteExpiredErrorData
    from .no_response_error import NoResponseError
    from .notfound_error import NotFoundError, NotFoundErrorData
    from .ratelimitexceeded_error import (
        RateLimitExceededError,
        RateLimitExceededErrorData,
    )
    from .responsevalidationerror import ResponseValidationError
    from .unauthorized_error import UnauthorizedError, UnauthorizedErrorData
    from .unprocessableentity_error import (
        UnprocessableEntityError,
        UnprocessableEntityErrorData,
    )

__all__ = [
    "AgentsetDefaultError",
    "AgentsetError",
    "BadRequestError",
    "BadRequestErrorData",
    "ConflictError",
    "ConflictErrorData",
    "ForbiddenError",
    "ForbiddenErrorData",
    "InternalServerError",
    "InternalServerErrorData",
    "InviteExpiredError",
    "InviteExpiredErrorData",
    "NoResponseError",
    "NotFoundError",
    "NotFoundErrorData",
    "RateLimitExceededError",
    "RateLimitExceededErrorData",
    "ResponseValidationError",
    "UnauthorizedError",
    "UnauthorizedErrorData",
    "UnprocessableEntityError",
    "UnprocessableEntityErrorData",
]

_dynamic_imports: dict[str, str] = {
    "AgentsetDefaultError": ".agentsetdefaulterror",
    "BadRequestError": ".badrequest_error",
    "BadRequestErrorData": ".badrequest_error",
    "ConflictError": ".conflict_error",
    "ConflictErrorData": ".conflict_error",
    "ForbiddenError": ".forbidden_error",
    "ForbiddenErrorData": ".forbidden_error",
    "InternalServerError": ".internalservererror",
    "InternalServerErrorData": ".internalservererror",
    "InviteExpiredError": ".inviteexpired_error",
    "InviteExpiredErrorData": ".inviteexpired_error",
    "NoResponseError": ".no_response_error",
    "NotFoundError": ".notfound_error",
    "NotFoundErrorData": ".notfound_error",
    "RateLimitExceededError": ".ratelimitexceeded_error",
    "RateLimitExceededErrorData": ".ratelimitexceeded_error",
    "ResponseValidationError": ".responsevalidationerror",
    "UnauthorizedError": ".unauthorized_error",
    "UnauthorizedErrorData": ".unauthorized_error",
    "UnprocessableEntityError": ".unprocessableentity_error",
    "UnprocessableEntityErrorData": ".unprocessableentity_error",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
