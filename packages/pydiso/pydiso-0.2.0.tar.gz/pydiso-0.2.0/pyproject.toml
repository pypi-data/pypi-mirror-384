
[build-system]
build-backend = 'mesonpy'
requires = [
    "meson-python>=0.15.0",
    "Cython>=3.1.0",
    "setuptools_scm[toml]>=6.2",
    "numpy>=2.0.0rc1",
]

[project]
name = 'pydiso'
dynamic = ["version"]
description = "Wrapper for intel's pardiso implementation in the MKL"
readme = 'README.md'
requires-python = '>=3.11'
authors = [
  {name = 'SimPEG developers', email = 'josephrcapriotti@gmail.com'},
]
keywords = [
    'sparse', 'solver', 'wrapper',
]

# Note: Python and NumPy upper version bounds should be set correctly in
# release branches, see:
#     https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
dependencies = [
    # TODO: update to "pin-compatible" once possible, see
    # https://github.com/mesonbuild/meson-python/issues/29
    "numpy>=1.22.4",
    "scipy>=1.12",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Cython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

[project.license]
file = 'LICENSE'

[project.optional-dependencies]
test = [
    "pytest",
]

coverage = [
    "coverage",
]

build = [
    "meson-python>=0.15.0",
    "meson",
    "ninja",
    "numpy>=2.0.0rc1",
    "cython>=3.1.0",
    "setuptools_scm",
]

[project.urls]
Homepage = 'https://simpeg.xyz'
#Documentation = 'https://discretize.simpeg.xyz'
Repository = 'https://github.com/simpeg/pydiso.git'

[tool.setuptools_scm]

[tool.coverage.run]
branch = true
source = ["pydiso", "tests"]

[tool.coverage.report]
ignore_errors = false
show_missing = true
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "AbstractMethodError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_html_report"