[tool.poetry]
name = "vrouter-agent"
version = "1.6.2"
description = "USDN vRouter-agent to execute order on each node"
authors = ["Phan Dang <phan.dang@usdatanetworks.com>"]
readme = "README.md"
license = "US Data Networks. All rights reserved."
homepage = "https://github.com/Unified-Sentinel-Data-Networks/vrouter-agent"
repository = "https://github.com/Unified-Sentinel-Data-Networks/vrouter-agent"
documentation = "https://github.com/Unified-Sentinel-Data-Networks/vrouter-agent/blob/main/README.md"
keywords = ["vrouter", "networking", "agent", "multichain", "wireguard"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Topic :: System :: Networking",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: POSIX :: Linux",
]
packages = [{include = "vrouter_agent"}]

[tool.poetry.dependencies]
python = "^3.10"
mcrpc = "^2.0.6.0"
wgconfig = "^1.1.0"
cffi = "*"
dataclasses-json = "^0.5.7"
simplejson = "^3.19.1" 
vpp-vrouter = "^0.1.28"
loguru = "^0.7.0"
cryptography = "^41.0.0"
psutil = "^5.9.8"
pydantic = "^2.9.0"
sqlmodel = "^0.0.24"
fastapi = "^0.116.1"
uvicorn = "^0.30.6"
python-multipart = "^0.0.12"
alembic = "^1.12.1"
typing-extensions = "^4.15.0"
pydantic-settings = "^2.10.1"

# Enhanced Stream Processing Dependencies
pyyaml = "^6.0.1"
tenacity = "^8.2.3"
asyncio-throttle = "^1.0.2"

# Optional dependencies for extras
prometheus-client = {version = "^0.20.0", optional = true}
structlog = {version = "^23.0.0", optional = true}
memory-profiler = {version = "^0.61.0", optional = true}
py-spy = {version = "^0.4.0", optional = true}
httpx = {version = "^0.28.0", optional = true}
faker = {version = "^35.0.0", optional = true}
pytest-asyncio = {version = "^0.24.0", optional = true}
pytest-cov = {version = "^6.0.0", optional = true}
pytest-mock = {version = "^3.14.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pre-commit = "*"

scriv = {extras = ["toml"], version = "^1.5.0"}
black = "^24.10.0"
flake8 = "^7.3.0"

# Enhanced Testing and Development Dependencies
pytest-xdist = "^3.8.0"
pytest-env = "^1.1.5"
factory-boy = "^3.3.0"
poethepoet = "^0.35.0"
bandit = "^1.8.6"

[build-system]
requires = ["poetry", "setuptools"]
build-backend = "poetry.masonry.api"

# Poetry Configuration
[tool.poetry.extras]
monitoring = ["prometheus-client", "structlog"]
performance = ["memory-profiler", "py-spy"]
testing = ["pytest-asyncio", "pytest-cov", "pytest-mock", "httpx", "faker"]
all = ["prometheus-client", "structlog", "memory-profiler", "py-spy", "pytest-asyncio", "pytest-cov", "pytest-mock", "httpx", "faker"]

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "asyncio: marks tests as async tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]


# Coverage Configuration
[tool.coverage.run]
source = ["vrouter_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/demo/*",
    "*/examples/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Poe the Poet Task Definitions (Poetry Task Runner)
[tool.poe.tasks]
# Development tasks
test = "pytest -v"
test-unit = "pytest tests/unit/ -v"
test-integration = "pytest tests/integration/ -v"
test-performance = "pytest tests/performance/ -v"
test-cov = "pytest --cov=vrouter_agent --cov-report=html --cov-report=term"

# Code quality tasks
format = "black vrouter_agent/ tests/"
format-check = "black --check vrouter_agent/ tests/"
lint = "flake8 vrouter_agent/ tests/"

# Enhanced stream processing tasks
stream-start = "python -m vrouter_agent.enhanced_stream_processor"
stream-monitor = "python -m vrouter_agent.monitoring"
stream-demo = "python -m vrouter_agent.migration_demo"
perf-test = "python -m vrouter_agent.tests.performance_tests"

# Server tasks
server = "python -m vrouter_agent.main"
server-dev = "uvicorn vrouter_agent.main:app --reload --host 0.0.0.0 --port 8000 --log-level debug"

# Database tasks
db-init = "python -m vrouter_agent.db init"
db-migrate = "python -m vrouter_agent.db migrate"

# Utility tasks
validate-config = "python -c 'from vrouter_agent.config_manager import validate_config; validate_config()'"
export-reqs = "poetry export -f requirements.txt --output requirements.txt --without-hashes"
clean = "python -c 'import shutil; import glob; [shutil.rmtree(p, ignore_errors=True) for p in glob.glob(\"**/__pycache__\", recursive=True)]'"

# Combined workflows
ci = ["format-check", "lint", "test-cov"]
dev-setup = ["install", "validate-config"]
full-test = ["test-unit", "test-integration", "test-performance"]

[tool.poetry.scripts]
rollback = "vrouter_agent.rollback:run"
vrouter-agent = "vrouter_agent.main:start"
db = "vrouter_agent.db:run"
# Enhanced Stream Processing Scripts
stream-processor = "vrouter_agent.enhanced_stream_processor:main"
stream-monitor = "vrouter_agent.monitoring:main"
stream-demo = "vrouter_agent.migration_demo:main"
performance-test = "vrouter_agent.tests.performance_tests:main"