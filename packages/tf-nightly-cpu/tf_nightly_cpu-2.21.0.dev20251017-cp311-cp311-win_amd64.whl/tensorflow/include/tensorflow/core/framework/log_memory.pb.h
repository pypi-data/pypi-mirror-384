// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tensorflow/core/framework/log_memory.proto
// Protobuf C++ Version: 6.31.1

#ifndef tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_2epb_2eh
#define tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensorflow/core/framework/tensor_description.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto PROTOBUF_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
PROTOBUF_EXPORT extern const ::google::protobuf::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
}  // extern "C"
namespace tensorflow {
class MemoryLogRawAllocation;
struct MemoryLogRawAllocationDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogRawAllocationDefaultTypeInternal _MemoryLogRawAllocation_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogRawAllocation_class_data_;
class MemoryLogRawDeallocation;
struct MemoryLogRawDeallocationDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogRawDeallocationDefaultTypeInternal _MemoryLogRawDeallocation_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogRawDeallocation_class_data_;
class MemoryLogStep;
struct MemoryLogStepDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogStepDefaultTypeInternal _MemoryLogStep_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogStep_class_data_;
class MemoryLogTensorAllocation;
struct MemoryLogTensorAllocationDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogTensorAllocationDefaultTypeInternal _MemoryLogTensorAllocation_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorAllocation_class_data_;
class MemoryLogTensorDeallocation;
struct MemoryLogTensorDeallocationDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogTensorDeallocationDefaultTypeInternal _MemoryLogTensorDeallocation_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorDeallocation_class_data_;
class MemoryLogTensorOutput;
struct MemoryLogTensorOutputDefaultTypeInternal;
PROTOBUF_EXPORT extern MemoryLogTensorOutputDefaultTypeInternal _MemoryLogTensorOutput_default_instance_;
PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorOutput_class_data_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogTensorDeallocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorDeallocation) */ {
 public:
  inline MemoryLogTensorDeallocation() : MemoryLogTensorDeallocation(nullptr) {}
  ~MemoryLogTensorDeallocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogTensorDeallocation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogTensorDeallocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogTensorDeallocation(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogTensorDeallocation(const MemoryLogTensorDeallocation& from) : MemoryLogTensorDeallocation(nullptr, from) {}
  inline MemoryLogTensorDeallocation(MemoryLogTensorDeallocation&& from) noexcept
      : MemoryLogTensorDeallocation(nullptr, ::std::move(from)) {}
  inline MemoryLogTensorDeallocation& operator=(const MemoryLogTensorDeallocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogTensorDeallocation& operator=(MemoryLogTensorDeallocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogTensorDeallocation& default_instance() {
    return *reinterpret_cast<const MemoryLogTensorDeallocation*>(
        &_MemoryLogTensorDeallocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MemoryLogTensorDeallocation& a, MemoryLogTensorDeallocation& b) { a.Swap(&b); }
  inline void Swap(MemoryLogTensorDeallocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogTensorDeallocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogTensorDeallocation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogTensorDeallocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogTensorDeallocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogTensorDeallocation& from) { MemoryLogTensorDeallocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogTensorDeallocation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogTensorDeallocation"; }

 protected:
  explicit MemoryLogTensorDeallocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogTensorDeallocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogTensorDeallocation& from);
  MemoryLogTensorDeallocation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogTensorDeallocation&& from) noexcept
      : MemoryLogTensorDeallocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllocatorNameFieldNumber = 2,
    kAllocationIdFieldNumber = 1,
  };
  // string allocator_name = 2;
  void clear_allocator_name() ;
  const ::std::string& allocator_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_allocator_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_allocator_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_allocator_name();
  void set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_allocator_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_allocator_name();

  public:
  // int64 allocation_id = 1;
  void clear_allocation_id() ;
  ::int64_t allocation_id() const;
  void set_allocation_id(::int64_t value);

  private:
  ::int64_t _internal_allocation_id() const;
  void _internal_set_allocation_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorDeallocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 61,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogTensorDeallocation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr allocator_name_;
    ::int64_t allocation_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorDeallocation_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogStep final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogStep) */ {
 public:
  inline MemoryLogStep() : MemoryLogStep(nullptr) {}
  ~MemoryLogStep() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogStep* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogStep));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogStep(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogStep(const MemoryLogStep& from) : MemoryLogStep(nullptr, from) {}
  inline MemoryLogStep(MemoryLogStep&& from) noexcept
      : MemoryLogStep(nullptr, ::std::move(from)) {}
  inline MemoryLogStep& operator=(const MemoryLogStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogStep& operator=(MemoryLogStep&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogStep& default_instance() {
    return *reinterpret_cast<const MemoryLogStep*>(
        &_MemoryLogStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MemoryLogStep& a, MemoryLogStep& b) { a.Swap(&b); }
  inline void Swap(MemoryLogStep* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogStep* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogStep* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogStep>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogStep& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogStep& from) { MemoryLogStep::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogStep* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogStep"; }

 protected:
  explicit MemoryLogStep(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogStep(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogStep& from);
  MemoryLogStep(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogStep&& from) noexcept
      : MemoryLogStep(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHandleFieldNumber = 2,
    kStepIdFieldNumber = 1,
  };
  // string handle = 2;
  void clear_handle() ;
  const ::std::string& handle() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_handle(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_handle();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_handle();
  void set_allocated_handle(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_handle() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_handle();

  public:
  // int64 step_id = 1;
  void clear_step_id() ;
  ::int64_t step_id() const;
  void set_step_id(::int64_t value);

  private:
  ::int64_t _internal_step_id() const;
  void _internal_set_step_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogStep)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 39,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogStep& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr handle_;
    ::int64_t step_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogStep_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogRawDeallocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogRawDeallocation) */ {
 public:
  inline MemoryLogRawDeallocation() : MemoryLogRawDeallocation(nullptr) {}
  ~MemoryLogRawDeallocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogRawDeallocation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogRawDeallocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogRawDeallocation(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogRawDeallocation(const MemoryLogRawDeallocation& from) : MemoryLogRawDeallocation(nullptr, from) {}
  inline MemoryLogRawDeallocation(MemoryLogRawDeallocation&& from) noexcept
      : MemoryLogRawDeallocation(nullptr, ::std::move(from)) {}
  inline MemoryLogRawDeallocation& operator=(const MemoryLogRawDeallocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogRawDeallocation& operator=(MemoryLogRawDeallocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogRawDeallocation& default_instance() {
    return *reinterpret_cast<const MemoryLogRawDeallocation*>(
        &_MemoryLogRawDeallocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MemoryLogRawDeallocation& a, MemoryLogRawDeallocation& b) { a.Swap(&b); }
  inline void Swap(MemoryLogRawDeallocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogRawDeallocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogRawDeallocation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogRawDeallocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogRawDeallocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogRawDeallocation& from) { MemoryLogRawDeallocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogRawDeallocation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogRawDeallocation"; }

 protected:
  explicit MemoryLogRawDeallocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogRawDeallocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogRawDeallocation& from);
  MemoryLogRawDeallocation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogRawDeallocation&& from) noexcept
      : MemoryLogRawDeallocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOperationFieldNumber = 2,
    kAllocatorNameFieldNumber = 4,
    kStepIdFieldNumber = 1,
    kAllocationIdFieldNumber = 3,
    kDeferredFieldNumber = 5,
  };
  // string operation = 2;
  void clear_operation() ;
  const ::std::string& operation() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_operation();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_operation();
  void set_allocated_operation(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_operation() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_operation();

  public:
  // string allocator_name = 4;
  void clear_allocator_name() ;
  const ::std::string& allocator_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_allocator_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_allocator_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_allocator_name();
  void set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_allocator_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_allocator_name();

  public:
  // int64 step_id = 1;
  void clear_step_id() ;
  ::int64_t step_id() const;
  void set_step_id(::int64_t value);

  private:
  ::int64_t _internal_step_id() const;
  void _internal_set_step_id(::int64_t value);

  public:
  // int64 allocation_id = 3;
  void clear_allocation_id() ;
  ::int64_t allocation_id() const;
  void set_allocation_id(::int64_t value);

  private:
  ::int64_t _internal_allocation_id() const;
  void _internal_set_allocation_id(::int64_t value);

  public:
  // bool deferred = 5;
  void clear_deferred() ;
  bool deferred() const;
  void set_deferred(bool value);

  private:
  bool _internal_deferred() const;
  void _internal_set_deferred(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogRawDeallocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 67,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogRawDeallocation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::google::protobuf::internal::ArenaStringPtr allocator_name_;
    ::int64_t step_id_;
    ::int64_t allocation_id_;
    bool deferred_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogRawDeallocation_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogRawAllocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogRawAllocation) */ {
 public:
  inline MemoryLogRawAllocation() : MemoryLogRawAllocation(nullptr) {}
  ~MemoryLogRawAllocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogRawAllocation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogRawAllocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogRawAllocation(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogRawAllocation(const MemoryLogRawAllocation& from) : MemoryLogRawAllocation(nullptr, from) {}
  inline MemoryLogRawAllocation(MemoryLogRawAllocation&& from) noexcept
      : MemoryLogRawAllocation(nullptr, ::std::move(from)) {}
  inline MemoryLogRawAllocation& operator=(const MemoryLogRawAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogRawAllocation& operator=(MemoryLogRawAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogRawAllocation& default_instance() {
    return *reinterpret_cast<const MemoryLogRawAllocation*>(
        &_MemoryLogRawAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MemoryLogRawAllocation& a, MemoryLogRawAllocation& b) { a.Swap(&b); }
  inline void Swap(MemoryLogRawAllocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogRawAllocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogRawAllocation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogRawAllocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogRawAllocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogRawAllocation& from) { MemoryLogRawAllocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogRawAllocation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogRawAllocation"; }

 protected:
  explicit MemoryLogRawAllocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogRawAllocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogRawAllocation& from);
  MemoryLogRawAllocation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogRawAllocation&& from) noexcept
      : MemoryLogRawAllocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOperationFieldNumber = 2,
    kAllocatorNameFieldNumber = 6,
    kStepIdFieldNumber = 1,
    kNumBytesFieldNumber = 3,
    kPtrFieldNumber = 4,
    kAllocationIdFieldNumber = 5,
  };
  // string operation = 2;
  void clear_operation() ;
  const ::std::string& operation() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_operation();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_operation();
  void set_allocated_operation(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_operation() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_operation(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_operation();

  public:
  // string allocator_name = 6;
  void clear_allocator_name() ;
  const ::std::string& allocator_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_allocator_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_allocator_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_allocator_name();
  void set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_allocator_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_allocator_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_allocator_name();

  public:
  // int64 step_id = 1;
  void clear_step_id() ;
  ::int64_t step_id() const;
  void set_step_id(::int64_t value);

  private:
  ::int64_t _internal_step_id() const;
  void _internal_set_step_id(::int64_t value);

  public:
  // int64 num_bytes = 3;
  void clear_num_bytes() ;
  ::int64_t num_bytes() const;
  void set_num_bytes(::int64_t value);

  private:
  ::int64_t _internal_num_bytes() const;
  void _internal_set_num_bytes(::int64_t value);

  public:
  // uint64 ptr = 4;
  void clear_ptr() ;
  ::uint64_t ptr() const;
  void set_ptr(::uint64_t value);

  private:
  ::uint64_t _internal_ptr() const;
  void _internal_set_ptr(::uint64_t value);

  public:
  // int64 allocation_id = 5;
  void clear_allocation_id() ;
  ::int64_t allocation_id() const;
  void set_allocation_id(::int64_t value);

  private:
  ::int64_t _internal_allocation_id() const;
  void _internal_set_allocation_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogRawAllocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 65,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogRawAllocation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::google::protobuf::internal::ArenaStringPtr allocator_name_;
    ::int64_t step_id_;
    ::int64_t num_bytes_;
    ::uint64_t ptr_;
    ::int64_t allocation_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogRawAllocation_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogTensorOutput final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorOutput) */ {
 public:
  inline MemoryLogTensorOutput() : MemoryLogTensorOutput(nullptr) {}
  ~MemoryLogTensorOutput() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogTensorOutput* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogTensorOutput));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogTensorOutput(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogTensorOutput(const MemoryLogTensorOutput& from) : MemoryLogTensorOutput(nullptr, from) {}
  inline MemoryLogTensorOutput(MemoryLogTensorOutput&& from) noexcept
      : MemoryLogTensorOutput(nullptr, ::std::move(from)) {}
  inline MemoryLogTensorOutput& operator=(const MemoryLogTensorOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogTensorOutput& operator=(MemoryLogTensorOutput&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogTensorOutput& default_instance() {
    return *reinterpret_cast<const MemoryLogTensorOutput*>(
        &_MemoryLogTensorOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MemoryLogTensorOutput& a, MemoryLogTensorOutput& b) { a.Swap(&b); }
  inline void Swap(MemoryLogTensorOutput* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogTensorOutput* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogTensorOutput* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogTensorOutput>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogTensorOutput& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogTensorOutput& from) { MemoryLogTensorOutput::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogTensorOutput* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogTensorOutput"; }

 protected:
  explicit MemoryLogTensorOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogTensorOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogTensorOutput& from);
  MemoryLogTensorOutput(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogTensorOutput&& from) noexcept
      : MemoryLogTensorOutput(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKernelNameFieldNumber = 2,
    kTensorFieldNumber = 4,
    kStepIdFieldNumber = 1,
    kIndexFieldNumber = 3,
  };
  // string kernel_name = 2;
  void clear_kernel_name() ;
  const ::std::string& kernel_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_kernel_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_kernel_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_kernel_name();
  void set_allocated_kernel_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_kernel_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_kernel_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_kernel_name();

  public:
  // .tensorflow.TensorDescription tensor = 4;
  bool has_tensor() const;
  void clear_tensor() ;
  const ::tensorflow::TensorDescription& tensor() const;
  [[nodiscard]] ::tensorflow::TensorDescription* PROTOBUF_NULLABLE release_tensor();
  ::tensorflow::TensorDescription* PROTOBUF_NONNULL mutable_tensor();
  void set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value);
  ::tensorflow::TensorDescription* PROTOBUF_NULLABLE unsafe_arena_release_tensor();

  private:
  const ::tensorflow::TensorDescription& _internal_tensor() const;
  ::tensorflow::TensorDescription* PROTOBUF_NONNULL _internal_mutable_tensor();

  public:
  // int64 step_id = 1;
  void clear_step_id() ;
  ::int64_t step_id() const;
  void set_step_id(::int64_t value);

  private:
  ::int64_t _internal_step_id() const;
  void _internal_set_step_id(::int64_t value);

  public:
  // int32 index = 3;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorOutput)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   1, 52,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogTensorOutput& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr kernel_name_;
    ::tensorflow::TensorDescription* PROTOBUF_NULLABLE tensor_;
    ::int64_t step_id_;
    ::int32_t index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorOutput_class_data_;
// -------------------------------------------------------------------

class PROTOBUF_EXPORT MemoryLogTensorAllocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorAllocation) */ {
 public:
  inline MemoryLogTensorAllocation() : MemoryLogTensorAllocation(nullptr) {}
  ~MemoryLogTensorAllocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemoryLogTensorAllocation* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemoryLogTensorAllocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryLogTensorAllocation(::google::protobuf::internal::ConstantInitialized);

  inline MemoryLogTensorAllocation(const MemoryLogTensorAllocation& from) : MemoryLogTensorAllocation(nullptr, from) {}
  inline MemoryLogTensorAllocation(MemoryLogTensorAllocation&& from) noexcept
      : MemoryLogTensorAllocation(nullptr, ::std::move(from)) {}
  inline MemoryLogTensorAllocation& operator=(const MemoryLogTensorAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLogTensorAllocation& operator=(MemoryLogTensorAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryLogTensorAllocation& default_instance() {
    return *reinterpret_cast<const MemoryLogTensorAllocation*>(
        &_MemoryLogTensorAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MemoryLogTensorAllocation& a, MemoryLogTensorAllocation& b) { a.Swap(&b); }
  inline void Swap(MemoryLogTensorAllocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryLogTensorAllocation* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryLogTensorAllocation* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemoryLogTensorAllocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryLogTensorAllocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryLogTensorAllocation& from) { MemoryLogTensorAllocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemoryLogTensorAllocation* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tensorflow.MemoryLogTensorAllocation"; }

 protected:
  explicit MemoryLogTensorAllocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MemoryLogTensorAllocation(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MemoryLogTensorAllocation& from);
  MemoryLogTensorAllocation(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MemoryLogTensorAllocation&& from) noexcept
      : MemoryLogTensorAllocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKernelNameFieldNumber = 2,
    kTensorFieldNumber = 3,
    kStepIdFieldNumber = 1,
  };
  // string kernel_name = 2;
  void clear_kernel_name() ;
  const ::std::string& kernel_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_kernel_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_kernel_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_kernel_name();
  void set_allocated_kernel_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_kernel_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_kernel_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_kernel_name();

  public:
  // .tensorflow.TensorDescription tensor = 3;
  bool has_tensor() const;
  void clear_tensor() ;
  const ::tensorflow::TensorDescription& tensor() const;
  [[nodiscard]] ::tensorflow::TensorDescription* PROTOBUF_NULLABLE release_tensor();
  ::tensorflow::TensorDescription* PROTOBUF_NONNULL mutable_tensor();
  void set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value);
  ::tensorflow::TensorDescription* PROTOBUF_NULLABLE unsafe_arena_release_tensor();

  private:
  const ::tensorflow::TensorDescription& _internal_tensor() const;
  ::tensorflow::TensorDescription* PROTOBUF_NONNULL _internal_mutable_tensor();

  public:
  // int64 step_id = 1;
  void clear_step_id() ;
  ::int64_t step_id() const;
  void set_step_id(::int64_t value);

  private:
  ::int64_t _internal_step_id() const;
  void _internal_set_step_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorAllocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 56,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MemoryLogTensorAllocation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr kernel_name_;
    ::tensorflow::TensorDescription* PROTOBUF_NULLABLE tensor_;
    ::int64_t step_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto;
};

PROTOBUF_EXPORT extern const ::google::protobuf::internal::ClassDataFull MemoryLogTensorAllocation_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MemoryLogStep

// int64 step_id = 1;
inline void MemoryLogStep::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t MemoryLogStep::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.step_id)
  return _internal_step_id();
}
inline void MemoryLogStep::set_step_id(::int64_t value) {
  _internal_set_step_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.step_id)
}
inline ::int64_t MemoryLogStep::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemoryLogStep::_internal_set_step_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// string handle = 2;
inline void MemoryLogStep::clear_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogStep::handle() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.handle)
  return _internal_handle();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogStep::set_handle(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.handle)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogStep::mutable_handle()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogStep.handle)
  return _s;
}
inline const ::std::string& MemoryLogStep::_internal_handle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.handle_.Get();
}
inline void MemoryLogStep::_internal_set_handle(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogStep::_internal_mutable_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogStep::release_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogStep.handle)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.handle_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.handle_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogStep::set_allocated_handle(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogStep.handle)
}

// -------------------------------------------------------------------

// MemoryLogTensorAllocation

// int64 step_id = 1;
inline void MemoryLogTensorAllocation::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t MemoryLogTensorAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.step_id)
  return _internal_step_id();
}
inline void MemoryLogTensorAllocation::set_step_id(::int64_t value) {
  _internal_set_step_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.step_id)
}
inline ::int64_t MemoryLogTensorAllocation::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemoryLogTensorAllocation::_internal_set_step_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// string kernel_name = 2;
inline void MemoryLogTensorAllocation::clear_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogTensorAllocation::kernel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return _internal_kernel_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogTensorAllocation::set_kernel_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kernel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorAllocation::mutable_kernel_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_kernel_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return _s;
}
inline const ::std::string& MemoryLogTensorAllocation::_internal_kernel_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kernel_name_.Get();
}
inline void MemoryLogTensorAllocation::_internal_set_kernel_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kernel_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorAllocation::_internal_mutable_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kernel_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogTensorAllocation::release_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.kernel_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.kernel_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.kernel_name_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogTensorAllocation::set_allocated_kernel_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kernel_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.kernel_name_.IsDefault()) {
    _impl_.kernel_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.kernel_name)
}

// .tensorflow.TensorDescription tensor = 3;
inline bool MemoryLogTensorAllocation::has_tensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tensor_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorAllocation::_internal_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorDescription* p = _impl_.tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorDescription&>(::tensorflow::_TensorDescription_default_instance_);
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorAllocation::tensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.tensor)
  return _internal_tensor();
}
inline void MemoryLogTensorAllocation::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }
  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}
inline ::tensorflow::TensorDescription* PROTOBUF_NULLABLE MemoryLogTensorAllocation::release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorDescription* released = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NULLABLE MemoryLogTensorAllocation::unsafe_arena_release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.tensor)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorDescription* temp = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NONNULL MemoryLogTensorAllocation::_internal_mutable_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tensor_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorDescription>(GetArena());
    _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(p);
  }
  return _impl_.tensor_;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NONNULL MemoryLogTensorAllocation::mutable_tensor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::TensorDescription* _msg = _internal_mutable_tensor();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.tensor)
  return _msg;
}
inline void MemoryLogTensorAllocation::set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}

// -------------------------------------------------------------------

// MemoryLogTensorDeallocation

// int64 allocation_id = 1;
inline void MemoryLogTensorDeallocation::clear_allocation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t MemoryLogTensorDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocation_id)
  return _internal_allocation_id();
}
inline void MemoryLogTensorDeallocation::set_allocation_id(::int64_t value) {
  _internal_set_allocation_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocation_id)
}
inline ::int64_t MemoryLogTensorDeallocation::_internal_allocation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocation_id_;
}
inline void MemoryLogTensorDeallocation::_internal_set_allocation_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = value;
}

// string allocator_name = 2;
inline void MemoryLogTensorDeallocation::clear_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogTensorDeallocation::allocator_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return _internal_allocator_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogTensorDeallocation::set_allocator_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allocator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorDeallocation::mutable_allocator_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_allocator_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return _s;
}
inline const ::std::string& MemoryLogTensorDeallocation::_internal_allocator_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_name_.Get();
}
inline void MemoryLogTensorDeallocation::_internal_set_allocator_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allocator_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorDeallocation::_internal_mutable_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.allocator_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogTensorDeallocation::release_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.allocator_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogTensorDeallocation::set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allocator_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allocator_name_.IsDefault()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}

// -------------------------------------------------------------------

// MemoryLogTensorOutput

// int64 step_id = 1;
inline void MemoryLogTensorOutput::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t MemoryLogTensorOutput::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.step_id)
  return _internal_step_id();
}
inline void MemoryLogTensorOutput::set_step_id(::int64_t value) {
  _internal_set_step_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.step_id)
}
inline ::int64_t MemoryLogTensorOutput::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemoryLogTensorOutput::_internal_set_step_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// string kernel_name = 2;
inline void MemoryLogTensorOutput::clear_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kernel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogTensorOutput::kernel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.kernel_name)
  return _internal_kernel_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogTensorOutput::set_kernel_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kernel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.kernel_name)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorOutput::mutable_kernel_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_kernel_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.kernel_name)
  return _s;
}
inline const ::std::string& MemoryLogTensorOutput::_internal_kernel_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kernel_name_.Get();
}
inline void MemoryLogTensorOutput::_internal_set_kernel_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kernel_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogTensorOutput::_internal_mutable_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kernel_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogTensorOutput::release_kernel_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.kernel_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.kernel_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.kernel_name_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogTensorOutput::set_allocated_kernel_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kernel_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.kernel_name_.IsDefault()) {
    _impl_.kernel_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.kernel_name)
}

// int32 index = 3;
inline void MemoryLogTensorOutput::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t MemoryLogTensorOutput::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.index)
  return _internal_index();
}
inline void MemoryLogTensorOutput::set_index(::int32_t value) {
  _internal_set_index(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.index)
}
inline ::int32_t MemoryLogTensorOutput::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void MemoryLogTensorOutput::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// .tensorflow.TensorDescription tensor = 4;
inline bool MemoryLogTensorOutput::has_tensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tensor_ != nullptr);
  return value;
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorOutput::_internal_tensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tensorflow::TensorDescription* p = _impl_.tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorDescription&>(::tensorflow::_TensorDescription_default_instance_);
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorOutput::tensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.tensor)
  return _internal_tensor();
}
inline void MemoryLogTensorOutput::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }
  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}
inline ::tensorflow::TensorDescription* PROTOBUF_NULLABLE MemoryLogTensorOutput::release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorDescription* released = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NULLABLE MemoryLogTensorOutput::unsafe_arena_release_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.tensor)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorDescription* temp = _impl_.tensor_;
  _impl_.tensor_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NONNULL MemoryLogTensorOutput::_internal_mutable_tensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tensor_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tensorflow::TensorDescription>(GetArena());
    _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(p);
  }
  return _impl_.tensor_;
}
inline ::tensorflow::TensorDescription* PROTOBUF_NONNULL MemoryLogTensorOutput::mutable_tensor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tensorflow::TensorDescription* _msg = _internal_mutable_tensor();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.tensor)
  return _msg;
}
inline void MemoryLogTensorOutput::set_allocated_tensor(::tensorflow::TensorDescription* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tensor_ = reinterpret_cast<::tensorflow::TensorDescription*>(value);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}

// -------------------------------------------------------------------

// MemoryLogRawAllocation

// int64 step_id = 1;
inline void MemoryLogRawAllocation::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t MemoryLogRawAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.step_id)
  return _internal_step_id();
}
inline void MemoryLogRawAllocation::set_step_id(::int64_t value) {
  _internal_set_step_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.step_id)
}
inline ::int64_t MemoryLogRawAllocation::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemoryLogRawAllocation::_internal_set_step_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// string operation = 2;
inline void MemoryLogRawAllocation::clear_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogRawAllocation::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogRawAllocation::set_operation(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.operation)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawAllocation::mutable_operation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.operation)
  return _s;
}
inline const ::std::string& MemoryLogRawAllocation::_internal_operation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_.Get();
}
inline void MemoryLogRawAllocation::_internal_set_operation(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawAllocation::_internal_mutable_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.operation_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogRawAllocation::release_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.operation)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.operation_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.operation_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogRawAllocation::set_allocated_operation(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.operation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.operation)
}

// int64 num_bytes = 3;
inline void MemoryLogRawAllocation::clear_num_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_bytes_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t MemoryLogRawAllocation::num_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.num_bytes)
  return _internal_num_bytes();
}
inline void MemoryLogRawAllocation::set_num_bytes(::int64_t value) {
  _internal_set_num_bytes(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.num_bytes)
}
inline ::int64_t MemoryLogRawAllocation::_internal_num_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_bytes_;
}
inline void MemoryLogRawAllocation::_internal_set_num_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_bytes_ = value;
}

// uint64 ptr = 4;
inline void MemoryLogRawAllocation::clear_ptr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ptr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t MemoryLogRawAllocation::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.ptr)
  return _internal_ptr();
}
inline void MemoryLogRawAllocation::set_ptr(::uint64_t value) {
  _internal_set_ptr(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.ptr)
}
inline ::uint64_t MemoryLogRawAllocation::_internal_ptr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ptr_;
}
inline void MemoryLogRawAllocation::_internal_set_ptr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ptr_ = value;
}

// int64 allocation_id = 5;
inline void MemoryLogRawAllocation::clear_allocation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t MemoryLogRawAllocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocation_id)
  return _internal_allocation_id();
}
inline void MemoryLogRawAllocation::set_allocation_id(::int64_t value) {
  _internal_set_allocation_id(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocation_id)
}
inline ::int64_t MemoryLogRawAllocation::_internal_allocation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocation_id_;
}
inline void MemoryLogRawAllocation::_internal_set_allocation_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = value;
}

// string allocator_name = 6;
inline void MemoryLogRawAllocation::clear_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& MemoryLogRawAllocation::allocator_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocator_name)
  return _internal_allocator_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogRawAllocation::set_allocator_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allocator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocator_name)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawAllocation::mutable_allocator_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_allocator_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.allocator_name)
  return _s;
}
inline const ::std::string& MemoryLogRawAllocation::_internal_allocator_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_name_.Get();
}
inline void MemoryLogRawAllocation::_internal_set_allocator_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allocator_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawAllocation::_internal_mutable_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.allocator_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogRawAllocation::release_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.allocator_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.allocator_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogRawAllocation::set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.allocator_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allocator_name_.IsDefault()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.allocator_name)
}

// -------------------------------------------------------------------

// MemoryLogRawDeallocation

// int64 step_id = 1;
inline void MemoryLogRawDeallocation::clear_step_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t MemoryLogRawDeallocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.step_id)
  return _internal_step_id();
}
inline void MemoryLogRawDeallocation::set_step_id(::int64_t value) {
  _internal_set_step_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.step_id)
}
inline ::int64_t MemoryLogRawDeallocation::_internal_step_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.step_id_;
}
inline void MemoryLogRawDeallocation::_internal_set_step_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.step_id_ = value;
}

// string operation = 2;
inline void MemoryLogRawDeallocation::clear_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MemoryLogRawDeallocation::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogRawDeallocation::set_operation(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.operation)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawDeallocation::mutable_operation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.operation)
  return _s;
}
inline const ::std::string& MemoryLogRawDeallocation::_internal_operation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operation_.Get();
}
inline void MemoryLogRawDeallocation::_internal_set_operation(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawDeallocation::_internal_mutable_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.operation_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogRawDeallocation::release_operation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.operation)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.operation_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.operation_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogRawDeallocation::set_allocated_operation(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.operation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operation_.IsDefault()) {
    _impl_.operation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.operation)
}

// int64 allocation_id = 3;
inline void MemoryLogRawDeallocation::clear_allocation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t MemoryLogRawDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocation_id)
  return _internal_allocation_id();
}
inline void MemoryLogRawDeallocation::set_allocation_id(::int64_t value) {
  _internal_set_allocation_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocation_id)
}
inline ::int64_t MemoryLogRawDeallocation::_internal_allocation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocation_id_;
}
inline void MemoryLogRawDeallocation::_internal_set_allocation_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocation_id_ = value;
}

// string allocator_name = 4;
inline void MemoryLogRawDeallocation::clear_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocator_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& MemoryLogRawDeallocation::allocator_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return _internal_allocator_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MemoryLogRawDeallocation::set_allocator_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allocator_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawDeallocation::mutable_allocator_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_allocator_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return _s;
}
inline const ::std::string& MemoryLogRawDeallocation::_internal_allocator_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocator_name_.Get();
}
inline void MemoryLogRawDeallocation::_internal_set_allocator_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allocator_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MemoryLogRawDeallocation::_internal_mutable_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.allocator_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MemoryLogRawDeallocation::release_allocator_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.allocator_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.allocator_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  return released;
}
inline void MemoryLogRawDeallocation::set_allocated_allocator_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.allocator_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.allocator_name_.IsDefault()) {
    _impl_.allocator_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.allocator_name)
}

// bool deferred = 5;
inline void MemoryLogRawDeallocation::clear_deferred() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deferred_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool MemoryLogRawDeallocation::deferred() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.deferred)
  return _internal_deferred();
}
inline void MemoryLogRawDeallocation::set_deferred(bool value) {
  _internal_set_deferred(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.deferred)
}
inline bool MemoryLogRawDeallocation::_internal_deferred() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deferred_;
}
inline void MemoryLogRawDeallocation::_internal_set_deferred(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deferred_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_2epb_2eh
