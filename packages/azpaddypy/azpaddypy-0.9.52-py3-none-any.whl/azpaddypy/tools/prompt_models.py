"""
Data models for Cosmos DB prompt data validation and serialization.
"""

from typing import Optional, Dict, Any
from dataclasses import dataclass, field

@dataclass
class PromptModel:
    """
    Data model representing a Cosmos DB prompt document.

    Fields:
        id: Unique identifier for the prompt (same as prompt_name)
        name: Name of the prompt
        prompt_template: The actual prompt template content
        description: Optional description of the prompt
        version: Optional version string
        timestamp: Optional UTC timestamp
    """
    id: str
    name: str
    prompt_template: str
    description: Optional[str] = "Autogenerated prompt"
    version: Optional[str] = "1.0.0"
    timestamp: Optional[str] = None
    # Store extra fields that might be present in Cosmos DB documents
    _extra_fields: Dict[str, Any] = field(default_factory=dict, repr=False)

    def to_dict(self) -> Dict[str, Any]:
        """Convert the model to a dictionary suitable for Cosmos DB storage."""
        result = {
            "id": self.id,
            "name": self.name,
            "prompt_template": self.prompt_template,
            "description": self.description,
            "version": self.version,
        }
        if self.timestamp is not None:
            result["timestamp"] = self.timestamp
        # Include any extra fields that were present in the original document
        result.update(self._extra_fields)
        return result

    @classmethod
    def from_cosmos_doc(cls, doc: Dict[str, Any]) -> 'PromptModel':
        """
        Create a PromptModel instance from a raw Cosmos DB document.

        Args:
            doc: Raw dictionary from Cosmos DB

        Returns:
            PromptModel instance
        """
        # Ensure required fields exist
        if not doc.get('id') or not doc.get('prompt_template'):
            raise ValueError("Invalid prompt document: missing required fields")

        # Extract known fields
        known_fields = {'id', 'name', 'prompt_template', 'description', 'version', 'timestamp'}
        extra_fields = {k: v for k, v in doc.items() if k not in known_fields}

        return cls(
            id=doc['id'],
            name=doc.get('name', doc['id']),  # Use id as fallback for name
            prompt_template=doc['prompt_template'],
            description=doc.get('description'),
            version=doc.get('version'),
            timestamp=doc.get('timestamp'),
            _extra_fields=extra_fields
        )