# coding: utf-8

"""
    LINE WORKS Talk API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SentMessage(BaseModel):
    """
    SentMessage
    """ # noqa: E501
    message_id: StrictInt = Field(alias="messageId")
    channel_no: StrictInt = Field(alias="channelNo")
    writer_id: StrictStr = Field(alias="writerId")
    user_no: StrictInt = Field(alias="userNo")
    bot_no: StrictInt = Field(alias="botNo")
    message_no: StrictInt = Field(alias="messageNo")
    content: StrictStr
    member_count: StrictInt = Field(alias="memberCount")
    message_type_code: StrictInt = Field(alias="messageTypeCode")
    message_status_type: StrictStr = Field(alias="messageStatusType")
    message_status_type_code: StrictInt = Field(alias="messageStatusTypeCode")
    extras: Optional[StrictStr] = None
    tid: StrictInt
    create_time: StrictInt = Field(alias="createTime")
    update_time: StrictInt = Field(alias="updateTime")
    __properties: ClassVar[List[str]] = ["messageId", "channelNo", "writerId", "userNo", "botNo", "messageNo", "content", "memberCount", "messageTypeCode", "messageStatusType", "messageStatusTypeCode", "extras", "tid", "createTime", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SentMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SentMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messageId": obj.get("messageId"),
            "channelNo": obj.get("channelNo"),
            "writerId": obj.get("writerId"),
            "userNo": obj.get("userNo"),
            "botNo": obj.get("botNo"),
            "messageNo": obj.get("messageNo"),
            "content": obj.get("content"),
            "memberCount": obj.get("memberCount"),
            "messageTypeCode": obj.get("messageTypeCode"),
            "messageStatusType": obj.get("messageStatusType"),
            "messageStatusTypeCode": obj.get("messageStatusTypeCode"),
            "extras": obj.get("extras"),
            "tid": obj.get("tid"),
            "createTime": obj.get("createTime"),
            "updateTime": obj.get("updateTime")
        })
        return _obj


