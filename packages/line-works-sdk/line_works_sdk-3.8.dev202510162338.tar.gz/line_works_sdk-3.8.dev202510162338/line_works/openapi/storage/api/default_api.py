# coding: utf-8

"""
    LINE WORKS Storage API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from line_works.openapi.storage.models.upload_resouce_response import UploadResouceResponse

from line_works.openapi.storage.api_client import ApiClient, RequestSerialized
from line_works.openapi.storage.api_response import ApiResponse
from line_works.openapi.storage.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def upload_resource(
        self,
        x_type: Annotated[StrictStr, Field(description="Type")],
        x_channelno: Annotated[StrictStr, Field(description="Channel No")],
        x_extras: Annotated[StrictStr, Field(description="Extra infomation")],
        upload_resource_path: Annotated[StrictStr, Field(description="Upload resource path")],
        servicekey: Annotated[Optional[StrictStr], Field(description="Service key")] = None,
        write_mode: Annotated[Optional[StrictStr], Field(description="Write mode")] = None,
        is_makethumbnail: Annotated[Optional[StrictStr], Field(description="Make thumbnail flag")] = None,
        x_serviceid: Annotated[Optional[StrictStr], Field(description="Service ID")] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UploadResouceResponse:
        """

        Upload resources.

        :param x_type: Type (required)
        :type x_type: str
        :param x_channelno: Channel No (required)
        :type x_channelno: str
        :param x_extras: Extra infomation (required)
        :type x_extras: str
        :param upload_resource_path: Upload resource path (required)
        :type upload_resource_path: str
        :param servicekey: Service key
        :type servicekey: str
        :param write_mode: Write mode
        :type write_mode: str
        :param is_makethumbnail: Make thumbnail flag
        :type is_makethumbnail: str
        :param x_serviceid: Service ID
        :type x_serviceid: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_resource_serialize(
            x_type=x_type,
            x_channelno=x_channelno,
            x_extras=x_extras,
            upload_resource_path=upload_resource_path,
            servicekey=servicekey,
            write_mode=write_mode,
            is_makethumbnail=is_makethumbnail,
            x_serviceid=x_serviceid,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadResouceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def upload_resource_with_http_info(
        self,
        x_type: Annotated[StrictStr, Field(description="Type")],
        x_channelno: Annotated[StrictStr, Field(description="Channel No")],
        x_extras: Annotated[StrictStr, Field(description="Extra infomation")],
        upload_resource_path: Annotated[StrictStr, Field(description="Upload resource path")],
        servicekey: Annotated[Optional[StrictStr], Field(description="Service key")] = None,
        write_mode: Annotated[Optional[StrictStr], Field(description="Write mode")] = None,
        is_makethumbnail: Annotated[Optional[StrictStr], Field(description="Make thumbnail flag")] = None,
        x_serviceid: Annotated[Optional[StrictStr], Field(description="Service ID")] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UploadResouceResponse]:
        """

        Upload resources.

        :param x_type: Type (required)
        :type x_type: str
        :param x_channelno: Channel No (required)
        :type x_channelno: str
        :param x_extras: Extra infomation (required)
        :type x_extras: str
        :param upload_resource_path: Upload resource path (required)
        :type upload_resource_path: str
        :param servicekey: Service key
        :type servicekey: str
        :param write_mode: Write mode
        :type write_mode: str
        :param is_makethumbnail: Make thumbnail flag
        :type is_makethumbnail: str
        :param x_serviceid: Service ID
        :type x_serviceid: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_resource_serialize(
            x_type=x_type,
            x_channelno=x_channelno,
            x_extras=x_extras,
            upload_resource_path=upload_resource_path,
            servicekey=servicekey,
            write_mode=write_mode,
            is_makethumbnail=is_makethumbnail,
            x_serviceid=x_serviceid,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadResouceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def upload_resource_without_preload_content(
        self,
        x_type: Annotated[StrictStr, Field(description="Type")],
        x_channelno: Annotated[StrictStr, Field(description="Channel No")],
        x_extras: Annotated[StrictStr, Field(description="Extra infomation")],
        upload_resource_path: Annotated[StrictStr, Field(description="Upload resource path")],
        servicekey: Annotated[Optional[StrictStr], Field(description="Service key")] = None,
        write_mode: Annotated[Optional[StrictStr], Field(description="Write mode")] = None,
        is_makethumbnail: Annotated[Optional[StrictStr], Field(description="Make thumbnail flag")] = None,
        x_serviceid: Annotated[Optional[StrictStr], Field(description="Service ID")] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """

        Upload resources.

        :param x_type: Type (required)
        :type x_type: str
        :param x_channelno: Channel No (required)
        :type x_channelno: str
        :param x_extras: Extra infomation (required)
        :type x_extras: str
        :param upload_resource_path: Upload resource path (required)
        :type upload_resource_path: str
        :param servicekey: Service key
        :type servicekey: str
        :param write_mode: Write mode
        :type write_mode: str
        :param is_makethumbnail: Make thumbnail flag
        :type is_makethumbnail: str
        :param x_serviceid: Service ID
        :type x_serviceid: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_resource_serialize(
            x_type=x_type,
            x_channelno=x_channelno,
            x_extras=x_extras,
            upload_resource_path=upload_resource_path,
            servicekey=servicekey,
            write_mode=write_mode,
            is_makethumbnail=is_makethumbnail,
            x_serviceid=x_serviceid,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadResouceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _upload_resource_serialize(
        self,
        x_type,
        x_channelno,
        x_extras,
        upload_resource_path,
        servicekey,
        write_mode,
        is_makethumbnail,
        x_serviceid,
        file,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if upload_resource_path is not None:
            _path_params['uploadResourcePath'] = upload_resource_path
        # process the query parameters
        if servicekey is not None:
            
            _query_params.append(('Servicekey', servicekey))
            
        if write_mode is not None:
            
            _query_params.append(('writeMode', write_mode))
            
        if is_makethumbnail is not None:
            
            _query_params.append(('isMakethumbnail', is_makethumbnail))
            
        # process the header parameters
        if x_serviceid is not None:
            _header_params['x-serviceid'] = x_serviceid
        if x_type is not None:
            _header_params['x-type'] = x_type
        if x_channelno is not None:
            _header_params['x-channelno'] = x_channelno
        if x_extras is not None:
            _header_params['x-extras'] = x_extras
        # process the form parameters
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{uploadResourcePath}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


