## Task
Create a beautiful, user-friendly visualization that explains a code function to non-technical end users. The visualization should be built using only Tailwind CSS classes (no custom CSS).

## Requirements

### 1. Function Name in Natural Language
- Start by clearly stating what the function does in plain English
- Use everyday language that anyone can understand
- Avoid technical jargon

### 2. Function Inputs Visualization
- Create a clear visual representation of what data goes into the function
- Use cards, icons, or diagrams to show input parameters
- Label each input with its purpose in simple terms

### 3. Function Flow Visualization
- Design a step-by-step visual flow showing how the function processes data
- Use arrows, boxes, or flowchart elements to show the progression
- Each step should be explained in non-technical language
- Consider using colors or icons to make each step distinct

### 4. Explanation with Dummy Data
- Provide a concrete example using realistic sample data
- Walk through the entire process with this example
- Show the transformation of data at each step
- Display the final output clearly

## Design Guidelines
- **Tailwind Only**: Use only Tailwind utility classes, no custom CSS
- **User-Friendly**: Design for non-developers (business users, stakeholders, customers)
- **Visual Appeal**: Make it engaging with good use of colors, spacing, and typography
- **Responsive**: Ensure it works well on different screen sizes
- **Accessibility**: Use proper contrast and readable fonts

## Output Format
Create an HTML artifact that includes:
1. A clear title explaining the function's purpose
2. Visual sections for inputs, process flow, and outputs
3. Interactive or animated elements if helpful (using Tailwind)
4. Real example data walkthrough
5. Clean, professional styling throughout


Example:

Input:

```python
from typing import List, Optional, Dict, Any, Callable

def place_order_for_cart_items(
    product_names: List[str],
    payment_card_index: int = 0,
    address_index: int = 0,
    call_api: Optional[Callable[[str, str, Dict], Any]] = None
) -> Dict[str, Any]:
    """
    Places an Amazon order for all items in the user's cart that match any of the specified product names.

    Args:
        product_names (List[str]): List of product names (case-insensitive substring match) to include in the order.
        payment_card_index (int, optional): Index of the payment card to use (default: 0, i.e., first card).
        address_index (int, optional): Index of the shipping address to use (default: 0, i.e., first address).
        call_api (Optional[Callable[[str, str, Dict], Any]], optional):
            Function to call Amazon APIs. If None, a mock implementation will be used.

    Returns:
        Dict[str, Any]: Dictionary with order confirmation details if successful, or error message if failed.
            Example (success):
                {
                    "status": "success",
                    "order_id": "ORD12345",
                    "message": "Order placed successfully.",
                    "ordered_items": [
                        {"product_id": 820, "product_name": "Weightlifting Bench", "quantity": 1, "price": 199.99},
                        ...
                    ]
                }
            Example (error):
                {
                    "status": "error",
                    "message": "No matching items found in cart."
                }

    Raises:
        Exception: If an unexpected error occurs during the process.

    Notes:
        - Only items whose product_name contains any of the provided product_names (case-insensitive) will be included in the order.
        - If no matching items are found, no order will be placed.
        - If payment cards or addresses are not available at the specified index, an error is returned.
        - If call_api is not provided, a mock implementation will be used for demonstration.
    """
    import json

    # Use provided call_api or fallback to a mock implementation
    def mock_call_api(platform: str, endpoint: str, args: Dict) -> Any:
        # Mock responses for demonstration and testing
        if endpoint == "amazon_show_cart_cart_get":
            return {
                "cart_items": [
                    {"product_id": 820, "product_name": "Weightlifting Bench", "quantity": 1, "price": 199.99},
                    {"product_id": 821, "product_name": "Weightlifting Bench Pro", "quantity": 2, "price": 299.99},
                    {"product_id": 900, "product_name": "Yoga Mat", "quantity": 1, "price": 29.99},
                    {"product_id": 901, "product_name": "Dumbbells Set", "quantity": 1, "price": 59.99},
                ]
            }
        elif endpoint == "amazon_show_payment_cards_payment_cards_get":
            return [
                {"payment_card_id": "card1", "card_name": "Visa", "owner_name": "Alice", "card_number": "****1111"},
                {"payment_card_id": "card2", "card_name": "MasterCard", "owner_name": "Alice", "card_number": "****2222"},
            ]
        elif endpoint == "amazon_show_addresses_addresses_get":
            return [
                {"address_id": "addr1", "name": "Home", "street_address": "123 Main St", "city": "Anytown", "state": "CA", "country": "USA", "zip_code": "12345"},
                {"address_id": "addr2", "name": "Work", "street_address": "456 Office Rd", "city": "Busytown", "state": "NY", "country": "USA", "zip_code": "67890"},
            ]
        elif endpoint == "amazon_delete_product_from_cart_cart_product_id_delete":
            # Simulate successful removal
            return {"message": f"Product {args.get('product_id')} removed from cart."}
        elif endpoint == "amazon_place_order_orders_post":
            return {"order_id": "ORD12345", "message": "Order placed successfully."}
        else:
            return {"status": "exception", "message": "Unknown endpoint."}

    api = call_api if call_api is not None else mock_call_api

    # Step 1: Retrieve current cart
    cart_response = api("amazon", "amazon_show_cart_cart_get", {})
    if not (isinstance(cart_response, dict) and "cart_items" in cart_response):
        return {"status": "error", "message": "Failed to retrieve cart."}
    cart_items = cart_response["cart_items"]

    # Step 2: Filter cart items to only those matching product_names (case-insensitive substring match)
    product_names_lower = [name.lower() for name in product_names]
    def matches_any(item_name: str) -> bool:
        return any(pn in item_name.lower() for pn in product_names_lower)
    matching_items = [item for item in cart_items if matches_any(item.get("product_name", ""))]

    if not matching_items:
        return {"status": "error", "message": "No matching items found in cart."}

    # Step 3: Remove all non-matching items from cart
    for item in cart_items:
        if item not in matching_items:
            product_id = item.get("product_id")
            resp = api("amazon", "amazon_delete_product_from_cart_cart_product_id_delete", {"product_id": product_id})
            # Optionally check resp for errors, but continue regardless

    # Step 4: Retrieve payment cards
    payment_cards = api("amazon", "amazon_show_payment_cards_payment_cards_get", {})
    if not (isinstance(payment_cards, list) and len(payment_cards) > payment_card_index):
        return {"status": "error", "message": "Not enough payment cards available to place the order."}
    payment_card_id = payment_cards[payment_card_index].get("payment_card_id")
    if not payment_card_id:
        return {"status": "error", "message": "Selected payment card does not have an ID."}

    # Step 5: Retrieve addresses
    user_addresses = api("amazon", "amazon_show_addresses_addresses_get", {})
    if not (isinstance(user_addresses, list) and len(user_addresses) > address_index):
        return {"status": "error", "message": "Not enough addresses available to place the order."}
    address_id = user_addresses[address_index].get("address_id")
    if not address_id:
        return {"status": "error", "message": "Selected address does not have an ID."}

    # Step 6: Place the order
    order_args = {
        "payment_card_id": payment_card_id,
        "address_id": address_id
    }
    order_response = api("amazon", "amazon_place_order_orders_post", order_args)
    if isinstance(order_response, dict) and "order_id" in order_response:
        return {
            "status": "success",
            "order_id": order_response["order_id"],
            "message": order_response.get("message", ""),
            "ordered_items": matching_items
        }
    elif isinstance(order_response, dict) and order_response.get("status") == "exception":
        return {"status": "error", "message": order_response.get("message", "Unknown error placing order.")}
    else:
        return {"status": "error", "message": "Unexpected response from order placement API."}
```

Output:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order items from Amazon flow</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @keyframes pulse-subtle {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }
        .pulse-subtle {
            animation: pulse-subtle 2s infinite;
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .slide-in {
            animation: slideIn 0.5s ease-out forwards;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <!-- Header -->
        <div class="text-center mb-8 slide-in">
            <div class="bg-white rounded-3xl shadow-xl p-8 mb-6">
                <div class="text-6xl mb-4">🛒</div>
                <h1 class="text-4xl font-bold text-gray-800 mb-4">Order items from Amazon flow</h1>
                <p class="text-xl text-gray-600 leading-relaxed">
                    Automatically order specific items from your cart
                </p>
            </div>
        </div>

        <!-- What This Does Section -->
        <div class="bg-white rounded-2xl shadow-lg p-8 mb-8 slide-in">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                🎯 <span class="ml-3">What Does This Do?</span>
            </h2>
            <div class="bg-blue-50 rounded-xl p-6 mb-6">
                <p class="text-lg text-gray-700 leading-relaxed">
                    This flow looks through your Amazon shopping cart and places an order for <strong>only the items that match the product names you specify</strong>. It's like having a smart shopping assistant that can pick out specific items from your cart and order just those items automatically.
                </p>
            </div>

            <div class="grid md:grid-cols-2 gap-8">
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">✨ Key Features:</h3>
                    <div class="space-y-4">
                        <div class="flex items-start space-x-3">
                            <div class="bg-green-100 rounded-full p-2 mt-1">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-800">Selective Ordering</h4>
                                <p class="text-gray-600">Orders only items whose names contain your search terms</p>
                            </div>
                        </div>
                        <div class="flex items-start space-x-3">
                            <div class="bg-purple-100 rounded-full p-2 mt-1">
                                <div class="w-3 h-3 bg-purple-500 rounded-full"></div>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-800">Flexible Matching</h4>
                                <p class="text-gray-600">Searches work with partial names (case-insensitive)</p>
                            </div>
                        </div>
                        <div class="flex items-start space-x-3">
                            <div class="bg-orange-100 rounded-full p-2 mt-1">
                                <div class="w-3 h-3 bg-orange-500 rounded-full"></div>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-800">Cart Management</h4>
                                <p class="text-gray-600">Removes non-matching items from cart before ordering</p>
                            </div>
                        </div>
                        <div class="flex items-start space-x-3">
                            <div class="bg-blue-100 rounded-full p-2 mt-1">
                                <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-800">Uses Existing Settings</h4>
                                <p class="text-gray-600">Works with your saved payment cards and addresses</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">📝 What You Need to Provide:</h3>
                    <div class="space-y-4">
                        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200">
                            <h4 class="font-semibold text-blue-800 mb-2">Required:</h4>
                            <ul class="text-blue-700 space-y-1 text-sm">
                                <li>• <strong>Product Names:</strong> List of items to search for in your cart</li>
                            </ul>
                        </div>
                        <div class="bg-gradient-to-r from-gray-50 to-slate-50 rounded-lg p-4 border border-gray-200">
                            <h4 class="font-semibold text-gray-800 mb-2">Optional:</h4>
                            <ul class="text-gray-700 space-y-1 text-sm">
                                <li>• <strong>Payment Card:</strong> Which saved card to use (defaults to first card)</li>
                                <li>• <strong>Shipping Address:</strong> Where to send items (defaults to first address)</li>
                            </ul>
                        </div>
                    </div>

                    <div class="mt-6 bg-yellow-50 rounded-lg p-4 border border-yellow-200">
                        <h4 class="font-semibold text-yellow-800 mb-2">⚠️ Important Note:</h4>
                        <p class="text-yellow-700 text-sm">
                            If no items in your cart match the search terms, no order will be placed and you'll get an error message.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Interactive Demo -->
        <div class="bg-white rounded-2xl shadow-lg p-8 mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                🧪 <span class="ml-3">Try It Out - Interactive Demo</span>
            </h2>

            <div class="grid lg:grid-cols-2 gap-8">
                <!-- Left Side: Input Controls -->
                <div class="space-y-6">
                    <div class="bg-gray-50 rounded-xl p-6">
                        <h3 class="text-lg font-semibold mb-4 text-gray-800">Configure Your Order</h3>

                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Product Names to Search For:</label>
                                <input type="text" id="productSearch"
                                       placeholder="e.g., bench, dumbbells, yoga (separate with commas)"
                                       class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <p class="text-sm text-gray-500 mt-1">💡 Tip: You can search for part of a product name!</p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Payment Card:</label>
                                <select id="paymentCard" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                    <option value="0">💳 Visa ****1111 (Alice)</option>
                                    <option value="1">💳 MasterCard ****2222 (Alice)</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Shipping Address:</label>
                                <select id="shippingAddress" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                    <option value="0">🏠 Home - 123 Main St, Anytown, CA</option>
                                    <option value="1">🏢 Work - 456 Office Rd, Busytown, NY</option>
                                </select>
                            </div>

                            <button onclick="runDemo()"
                                    class="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-all duration-200 transform hover:scale-105">
                                🚀 Run Flow
                            </button>
                        </div>
                    </div>

                    <!-- Process Flow -->
                    <div class="bg-indigo-50 rounded-xl p-6">
                        <h3 class="text-lg font-semibold mb-4 text-indigo-800">Process Flow</h3>
                        <div class="space-y-3" id="processFlow">
                            <div class="flex items-center space-x-3 opacity-50" id="step1">
                                <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-bold text-white">1</span>
                                </div>
                                <span class="text-sm text-gray-600">Check cart for matching items</span>
                            </div>
                            <div class="flex items-center space-x-3 opacity-50" id="step2">
                                <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-bold text-white">2</span>
                                </div>
                                <span class="text-sm text-gray-600">Remove non-matching items</span>
                            </div>
                            <div class="flex items-center space-x-3 opacity-50" id="step3">
                                <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-bold text-white">3</span>
                                </div>
                                <span class="text-sm text-gray-600">Get payment & address details</span>
                            </div>
                            <div class="flex items-center space-x-3 opacity-50" id="step4">
                                <div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                                    <span class="text-xs font-bold text-white">4</span>
                                </div>
                                <span class="text-sm text-gray-600">Place the order</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Side: Cart Display & Results -->
                <div class="space-y-6">
                    <!-- Demo Cart Display -->
                    <div>
                        <h3 class="text-lg font-semibold mb-4 text-gray-800">Your Current Cart:</h3>
                        <div class="grid gap-3" id="cartDisplay">
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 transition-all duration-300" data-product="weightlifting bench">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="font-medium text-gray-800">Weightlifting Bench</h4>
                                        <p class="text-sm text-gray-600">Quantity: 1</p>
                                    </div>
                                    <span class="text-lg font-semibold text-green-600">$199.99</span>
                                </div>
                            </div>
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 transition-all duration-300" data-product="weightlifting bench pro">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="font-medium text-gray-800">Weightlifting Bench Pro</h4>
                                        <p class="text-sm text-gray-600">Quantity: 2</p>
                                    </div>
                                    <span class="text-lg font-semibold text-green-600">$299.99</span>
                                </div>
                            </div>
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 transition-all duration-300" data-product="yoga mat">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="font-medium text-gray-800">Yoga Mat</h4>
                                        <p class="text-sm text-gray-600">Quantity: 1</p>
                                    </div>
                                    <span class="text-lg font-semibold text-green-600">$29.99</span>
                                </div>
                            </div>
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 transition-all duration-300" data-product="dumbbells set">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="font-medium text-gray-800">Dumbbells Set</h4>
                                        <p class="text-sm text-gray-600">Quantity: 1</p>
                                    </div>
                                    <span class="text-lg font-semibold text-green-600">$59.99</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Results Section -->
                    <div id="results" class="hidden">
                        <h3 class="text-lg font-semibold mb-4 text-gray-800">Results:</h3>
                        <div id="resultContent" class="space-y-4"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- How It Works -->
        <div class="bg-white rounded-2xl shadow-lg p-8 mb-8 slide-in">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                ⚙️ <span class="ml-3">How It Works Behind The Scenes</span>
            </h2>
            <div class="space-y-6">
                <div class="flex items-start space-x-4">
                    <div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">1</div>
                    <div>
                        <h3 class="font-semibold text-gray-800 mb-2">Check Your Cart</h3>
                        <p class="text-gray-600">First, we look at all the items currently in your Amazon cart.</p>
                    </div>
                </div>
                <div class="flex items-start space-x-4">
                    <div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">2</div>
                    <div>
                        <h3 class="font-semibold text-gray-800 mb-2">Smart Filtering</h3>
                        <p class="text-gray-600">We find items that match your search terms (like "bench" matching "Weightlifting Bench").</p>
                    </div>
                </div>
                <div class="flex items-start space-x-4">
                    <div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">3</div>
                    <div>
                        <h3 class="font-semibold text-gray-800 mb-2">Clean Up Cart</h3>
                        <p class="text-gray-600">Items that don't match are temporarily removed so you only order what you want.</p>
                    </div>
                </div>
                <div class="flex items-start space-x-4">
                    <div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">4</div>
                    <div>
                        <h3 class="font-semibold text-gray-800 mb-2">Select payment method and address</h3>
                        <p class="text-gray-600">We use your selected payment method and shipping address to complete the order.</p>
                    </div>
                </div>
                <div class="flex items-start space-x-4">
                    <div class="bg-green-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">✓</div>
                    <div>
                        <h3 class="font-semibold text-gray-800 mb-2">Order Confirmed!</h3>
                        <p class="text-gray-600">You get a confirmation with your order ID and details of what was ordered.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Safety & Benefits -->
        <div class="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl shadow-lg p-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                🔒 <span class="ml-3">Safe & Reliable</span>
            </h2>
            <div class="grid md:grid-cols-3 gap-6">
                <div class="text-center">
                    <div class="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                        <span class="text-2xl">🛡️</span>
                    </div>
                    <h3 class="font-semibold text-gray-800 mb-2">Secure</h3>
                    <p class="text-gray-600 text-sm">Uses Amazon's secure payment system with your saved cards</p>
                </div>
                <div class="text-center">
                    <div class="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                        <span class="text-2xl">🎯</span>
                    </div>
                    <h3 class="font-semibold text-gray-800 mb-2">Precise</h3>
                    <p class="text-gray-600 text-sm">Only orders exactly what matches your search terms</p>
                </div>
                <div class="text-center">
                    <div class="bg-purple-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                        <span class="text-2xl">⚡</span>
                    </div>
                    <h3 class="font-semibold text-gray-800 mb-2">Fast</h3>
                    <p class="text-gray-600 text-sm">Skip manual searching and clicking - order in seconds</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const mockCartItems = [
            {"product_id": 820, "product_name": "Weightlifting Bench", "quantity": 1, "price": 199.99},
            {"product_id": 821, "product_name": "Weightlifting Bench Pro", "quantity": 2, "price": 299.99},
            {"product_id": 900, "product_name": "Yoga Mat", "quantity": 1, "price": 29.99},
            {"product_id": 901, "product_name": "Dumbbells Set", "quantity": 1, "price": 59.99},
        ];

        const paymentCards = [
            {"payment_card_id": "card1", "card_name": "Visa", "owner_name": "Alice", "card_number": "****1111"},
            {"payment_card_id": "card2", "card_name": "MasterCard", "owner_name": "Alice", "card_number": "****2222"},
        ];

        const addresses = [
            {"address_id": "addr1", "name": "Home", "street_address": "123 Main St", "city": "Anytown", "state": "CA", "country": "USA", "zip_code": "12345"},
            {"address_id": "addr2", "name": "Work", "street_address": "456 Office Rd", "city": "Busytown", "state": "NY", "country": "USA", "zip_code": "67890"},
        ];

        function runDemo() {
            const productSearchInput = document.getElementById('productSearch').value;
            const paymentCardIndex = parseInt(document.getElementById('paymentCard').value);
            const addressIndex = parseInt(document.getElementById('shippingAddress').value);

            // Reset visual states
            resetCartVisuals();
            resetProcessFlow();

            // Parse product names
            const productNames = productSearchInput
                .split(',')
                .map(name => name.trim())
                .filter(name => name.length > 0);

            if (productNames.length === 0) {
                showResult('error', 'Please enter at least one product name to search for!', []);
                return;
            }

            // Animate process flow
            animateProcessFlow(productNames, paymentCardIndex, addressIndex);
        }

        function animateProcessFlow(productNames, paymentCardIndex, addressIndex) {
            const steps = ['step1', 'step2', 'step3', 'step4'];
            let currentStep = 0;

            function animateStep() {
                if (currentStep < steps.length) {
                    const stepElement = document.getElementById(steps[currentStep]);
                    stepElement.classList.remove('opacity-50');
                    stepElement.classList.add('opacity-100');

                    const circle = stepElement.querySelector('div');
                    circle.classList.remove('bg-gray-300');
                    circle.classList.add('bg-blue-500');

                    // Execute the actual logic for each step
                    switch(currentStep) {
                        case 0:
                            highlightMatchingItems(productNames);
                            break;
                        case 1:
                            removeNonMatchingItems(productNames);
                            break;
                        case 2:
                            // Just visual - no action needed
                            break;
                        case 3:
                            executeOrder(productNames, paymentCardIndex, addressIndex);
                            break;
                    }

                    currentStep++;
                    setTimeout(animateStep, 800);
                } else {
                    // Reset flow after completion
                    setTimeout(resetProcessFlow, 2000);
                }
            }

            animateStep();
        }

        function highlightMatchingItems(productNames) {
            const productNamesLower = productNames.map(name => name.toLowerCase());

            function matchesAny(itemName) {
                return productNamesLower.some(pn => itemName.toLowerCase().includes(pn));
            }

            const cartItems = document.querySelectorAll('#cartDisplay > div');
            cartItems.forEach(item => {
                const productName = item.querySelector('h4').textContent;
                if (matchesAny(productName)) {
                    item.classList.remove('bg-blue-50', 'border-blue-200');
                    item.classList.add('bg-green-100', 'border-green-300', 'ring-2', 'ring-green-200');
                }
            });
        }

        function removeNonMatchingItems(productNames) {
            const productNamesLower = productNames.map(name => name.toLowerCase());

            function matchesAny(itemName) {
                return productNamesLower.some(pn => itemName.toLowerCase().includes(pn));
            }

            const cartItems = document.querySelectorAll('#cartDisplay > div');
            cartItems.forEach(item => {
                const productName = item.querySelector('h4').textContent;
                if (!matchesAny(productName)) {
                    item.style.opacity = '0.3';
                    item.style.transform = 'scale(0.95)';
                    item.classList.add('bg-red-50', 'border-red-200');
                }
            });
        }

        function executeOrder(productNames, paymentCardIndex, addressIndex) {
            // Simulate the function logic
            const productNamesLower = productNames.map(name => name.toLowerCase());

            function matchesAny(itemName) {
                return productNamesLower.some(pn => itemName.toLowerCase().includes(pn));
            }

            const matchingItems = mockCartItems.filter(item => matchesAny(item.product_name));

            if (matchingItems.length === 0) {
                showResult('error', 'No matching items found in cart. Try different search terms!', []);
                return;
            }

            // Simulate successful order
            const selectedCard = paymentCards[paymentCardIndex];
            const selectedAddress = addresses[addressIndex];

            showResult('success', 'Order placed successfully!', matchingItems, selectedCard, selectedAddress);
        }

        function resetCartVisuals() {
            const cartItems = document.querySelectorAll('#cartDisplay > div');
            cartItems.forEach(item => {
                item.style.opacity = '1';
                item.style.transform = 'scale(1)';
                item.className = 'bg-blue-50 border border-blue-200 rounded-lg p-4 transition-all duration-300';
            });
        }

        function resetProcessFlow() {
            const steps = ['step1', 'step2', 'step3', 'step4'];
            steps.forEach(stepId => {
                const stepElement = document.getElementById(stepId);
                stepElement.classList.remove('opacity-100');
                stepElement.classList.add('opacity-50');

                const circle = stepElement.querySelector('div');
                circle.classList.remove('bg-blue-500');
                circle.classList.add('bg-gray-300');
            });
        }

        function showResult(status, message, items, card = null, address = null) {
            const resultsDiv = document.getElementById('results');
            const resultContent = document.getElementById('resultContent');

            resultsDiv.classList.remove('hidden');
            resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

            if (status === 'success') {
                const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);

                resultContent.innerHTML = `
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
                        <div class="flex items-center mb-4">
                            <div class="bg-green-500 rounded-full w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-white font-bold">✓</span>
                            </div>
                            <h3 class="text-lg font-semibold text-green-800">${message}</h3>
                        </div>
                        <div class="space-y-4">
                            <div>
                                <h4 class="font-medium text-gray-800 mb-2">Order ID: ORD12345</h4>
                                <p class="text-sm text-gray-600">Payment: ${card.card_name} ${card.card_number}</p>
                                <p class="text-sm text-gray-600">Shipping: ${address.name} - ${address.street_address}, ${address.city}, ${address.state}</p>
                            </div>
                            <div>
                                <h4 class="font-medium text-gray-800 mb-2">Items Ordered:</h4>
                                <div class="space-y-2">
                                    ${items.map(item => `
                                        <div class="flex justify-between items-center bg-white rounded-lg p-3 border">
                                            <div>
                                                <span class="font-medium">${item.product_name}</span>
                                                <span class="text-gray-500 ml-2">×${item.quantity}</span>
                                            </div>
                                            <span class="font-semibold text-green-600">$${(item.price * item.quantity).toFixed(2)}</span>
                                        </div>
                                    `).join('')}
                                </div>
                                <div class="border-t pt-3 mt-3">
                                    <div class="flex justify-between items-center font-bold text-lg">
                                        <span>Total:</span>
                                        <span class="text-green-600">$${totalPrice.toFixed(2)}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                resultContent.innerHTML = `
                    <div class="bg-red-50 border border-red-200 rounded-lg p-6">
                        <div class="flex items-center">
                            <div class="bg-red-500 rounded-full w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-white font-bold">!</span>
                            </div>
                            <h3 class="text-lg font-semibold text-red-800">${message}</h3>
                        </div>
                    </div>
                `;
            }
        }

        // Add some interactivity to the cart display
        document.addEventListener('DOMContentLoaded', function() {
            const cartItems = document.querySelectorAll('#cartDisplay > div');
            cartItems.forEach((item, index) => {
                item.style.animationDelay = `${index * 0.1}s`;
                item.classList.add('slide-in');
            });
        });
    </script>
</body>
</html>
```