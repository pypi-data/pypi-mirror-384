# Examples demonstrating list and dictionary membership operations

- name: list_basic_membership
  category: list_operations
  description: "Check if an element exists in a list using 'in'"
  expression: "'admin' in user.roles"
  expected: true
  context:
    user:
      roles: [ "user", "admin", "editor" ]
      name: "John Doe"

- name: list_membership_with_variable_item
  category: list_operations
  description: "Use a variable as the item to check in a list"
  expression: "requested_role in available_roles"
  expected: true
  context:
    requested_role: "manager"
    available_roles: [ "user", "admin", "manager", "guest" ]

- name: list_contains_syntax
  category: list_operations
  description: "Alternative contains syntax for list membership"
  expression: "permissions contains 'delete'"
  expected: true
  context:
    permissions: [ "read", "write", "delete", "share" ]

- name: list_membership_missing_element
  category: list_operations
  description: "Check behavior when element is not in list"
  expression: "'superadmin' in user.roles"
  expected: false
  context:
    user:
      roles: [ "user", "admin", "editor" ]

- name: object_key_membership
  category: object_operations
  description: "Check if a key exists in a dictionary"
  expression: "'address' in user.profile"
  expected: true
  context:
    user:
      profile:
        name: "Jane Smith"
        email: "jane@example.com"
        address: "123 Main St"
        phone: "555-1234"

- name: object_key_membership_with_variable
  category: object_operations
  description: "Use a variable to check dictionary key membership"
  expression: "required_field in form_data"
  expected: false
  context:
    required_field: "tax_id"
    form_data:
      name: "Company Inc"
      email: "info@company.com"
      address: "456 Business Ave"

- name: object_contains_operator
  category: object_operations
  description: "Use contains operator with dictionary"
  expression: "config contains 'debug_mode'"
  expected: true
  context:
    config:
      app_name: "MyApp"
      version: "1.2.3"
      debug_mode: true
      theme: "dark"

- name: nested_list_in_dict
  category: mixed_collections
  description: "Check membership in a list nested upcoming within a dictionary"
  expression: "'python' in user.skills.programming"
  expected: true
  context:
    user:
      name: "Alex Developer"
      skills:
        programming: [ "javascript", "python", "go" ]
        languages: [ "english", "spanish" ]

- name: combined_collection_operations
  category: mixed_collections
  description: "Combine collection operators with other logical operators"
  expression: "'admin' in user.roles and user.settings contains 'notifications' and user.settings.notifications"
  expected: true
  context:
    user:
      roles: [ "user", "admin" ]
      settings:
        theme: "light"
        notifications: true
        privacy: "high"

- name: list_equality_comparison
  category: collection_equality
  description: "Compare two lists for equality"
  expression: "user.permissions == required_permissions"
  expected: true
  context:
    user:
      permissions: [ "read", "write", "delete" ]
    required_permissions: [ "read", "write", "delete" ]

- name: object_equality_comparison
  category: collection_equality
  description: "Compare two dictionaries for equality"
  expression: "user.preferences == default_preferences"
  expected: false
  context:
    user:
      preferences:
        theme: "dark"
        font_size: "medium"
    default_preferences:
      theme: "light"
      font_size: "medium"

- name: membership_with_composite_expression
  category: complex_scenarios
  description: "Use membership test with a composite condition"
  expression: "(user.role in admin_roles) or (user.domain in approved_domains and user.verified)"
  expected: true
  context:
    user:
      role: "manager"
      email: "user@company.com"
      domain: "company.com"
      verified: true
    admin_roles: [ "admin", "superadmin" ]
    approved_domains: [ "company.com", "partner.org" ]

- name: array_indexing_lookup
  category: path_syntax
  description: "Look up elements in arrays using indexing"
  expression: "teams[0].name == 'Frontend'"
  expected: true
  context:
    teams:
    - name: "Frontend"
      members: [ "Alice", "Bob" ]
    - name: "Backend"
      members: [ "Charlie", "Dave" ]

- name: nested_array_lookups
  category: path_syntax
  description: "Use nested array indexing in paths"
  expression: "departments[0].teams[1].name == 'Backend'"
  expected: true
  context:
    departments:
    - name: "Engineering"
      teams:
      - name: "Frontend"
        members: [ "Alice", "Bob" ]
      - name: "Backend"
        members: [ "Charlie", "Dave" ]
    - name: "Marketing"
      teams:
      - name: "Digital"
        members: [ "Eve", "Frank" ]

- name: array_element_property_test
  category: path_syntax
  description: "Test property of an element accessed through indexing"
  expression: "users[1].role == 'admin' and users[1].verified"
  expected: true
  context:
    users:
    - username: "johndoe"
      role: "user"
      verified: false
    - username: "janedoe"
      role: "admin"
      verified: true

- name: array_lookup_with_membership
  category: path_syntax
  description: "Combine array indexing with membership test"
  expression: "'testing' in projects[0].tags and projects[1].status == 'completed'"
  expected: true
  context:
    projects:
    - name: "Feature A"
      tags: [ "important", "testing", "frontend" ]
      status: "in_progress"
    - name: "Feature B"
      tags: [ "backend", "documentation" ]
      status: "completed"

- name: combined_lookup_expression
  category: complex_path_operations
  description: "Complex expression combining array lookups with object properties"
  expression: "organization.departments[0].teams[0].members[1] == 'Bob' and organization.departments[1].teams[0].members[0] == 'Eve'"
  expected: true
  context:
    organization:
      name: "Acme Corp"
      departments:
      - name: "Engineering"
        teams:
        - name: "Frontend"
          members: [ "Alice", "Bob" ]
        - name: "Backend"
          members: [ "Charlie", "Dave" ]
      - name: "Marketing"
        teams:
        - name: "Digital"
          members: [ "Eve", "Frank" ]

- name: container_emptiness_check
  category: container_operations
  description: "Check if containers are empty using 'is $empty'"
  expression: "ghost_crew is $empty and deserted_mansion is $empty and (treasure_chest is $empty) == false"
  expected: true
  context:
    ghost_crew: [] # Empty list
    treasure_chest: [ "ancient coin", "golden chalice", "ruby necklace" ]
    deserted_mansion: {} # Empty dictionary
    dragon_hoard:
      golden_crown: 1500
      enchanted_sword: 3000
      crystal_orb: 750

- name: possesive_lookup_in
  category: critical_path
  description: "Test lookup of nested attributes by possesive English syntax"
  expression: "'admin' in user's roles "
  expected: true
  context:
    user:
      roles: [ "reader", "writer", "admin" ]

- name: possesive_lookup_contains
  category: critical_path
  description: "Test lookup of nested attributes by possesive English syntax"
  expression: " user's roles contains 'reader' "
  expected: true
  context:
    user:
      roles: [ "reader", "writer", "admin" ]
