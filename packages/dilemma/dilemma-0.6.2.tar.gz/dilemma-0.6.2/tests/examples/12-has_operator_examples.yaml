# Examples demonstrating the 'has' property existence operator

- name: basic_property_check
  category: property_existence
  description: "Check if an object has a specific property using string literal"
  expression: "user has 'email'"
  expected: true
  context:
    user:
      name: "Alice Smith"
      email: "alice@example.com"
      age: 28

- name: missing_property_check
  category: property_existence
  description: "Check for a property that doesn't exist"
  expression: "user has 'phone'"
  expected: false
  context:
    user:
      name: "Bob Jones"
      email: "bob@example.com"

- name: variable_property_name
  category: property_existence
  description: "Use a variable to specify the property name to check"
  expression: "config has required_field"
  expected: true
  context:
    config:
      database_url: "postgresql://localhost/myapp"
      debug_mode: true
      secret_key: "my-secret-key"
    required_field: "database_url"

- name: nested_object_property
  category: property_existence
  description: "Check if a nested object has a property"
  expression: "user.profile has 'bio'"
  expected: true
  context:
    user:
      name: "Charlie Brown"
      profile:
        bio: "Software developer and coffee enthusiast"
        location: "San Francisco"
        website: "https://charlie.dev"

- name: deep_nested_property
  category: property_existence
  description: "Check properties in deeply nested structures"
  expression: "app.settings.security has 'encryption'"
  expected: true
  context:
    app:
      name: "MyApp"
      settings:
        ui:
          theme: "dark"
          language: "en"
        security:
          encryption: "AES-256"
          two_factor: true

- name: list_item_existence
  category: property_existence
  description: "Check if a list contains an item using 'has' (similar to 'contains')"
  expression: "user.roles has 'admin'"
  expected: true
  context:
    user:
      username: "adminuser"
      roles: ["user", "admin", "moderator"]

- name: combined_with_logical_operators
  category: property_existence
  description: "Combine 'has' with logical operators for complex conditions"
  expression: "user has 'email' and user has 'verified' and user.verified"
  expected: true
  context:
    user:
      name: "Diana Prince"
      email: "diana@example.com"
      verified: true
      created_at: "2024-01-15"

- name: multiple_property_checks
  category: property_existence
  description: "Check multiple properties with OR logic"
  expression: "contact has 'email' or contact has 'phone'"
  expected: true
  context:
    contact:
      name: "Emergency Contact"
      phone: "+1-555-0123"

- name: property_check_with_equality
  category: property_existence
  description: "Combine property existence check with value comparison"
  expression: "user has 'role' and user.role == 'admin'"
  expected: true
  context:
    user:
      username: "superuser"
      role: "admin"
      permissions: ["read", "write", "delete"]

- name: readability_comparison
  category: syntax_comparison
  description: "Demonstrate improved readability compared to 'in' operator"
  expression: "customer.preferences has 'newsletter' and customer.account has 'premium'"
  expected: true
  context:
    customer:
      name: "Jane Customer"
      preferences:
        newsletter: true
        marketing: false
      account:
        premium: true
        credits: 150

- name: missing_nested_property
  category: property_existence
  description: "Check for missing property in nested structure"
  expression: "product.details has 'warranty'"
  expected: false
  context:
    product:
      name: "Laptop"
      price: 999.99
      details:
        brand: "TechCorp"
        model: "Pro 2024"
        color: "silver"

- name: empty_object_check
  category: property_existence
  description: "Check properties in empty objects"
  expression: "empty_config has 'setting'"
  expected: false
  context:
    empty_config: {}
    non_empty:
      setting: "value"

- name: complex_validation_example
  category: real_world_usage
  description: "Real-world example: validate required fields in user registration"
  expression: "registration has 'username' and registration has 'email' and registration has 'password'"
  expected: true
  context:
    registration:
      username: "newuser123"
      email: "newuser@example.com"
      password: "secure-password"
      terms_accepted: true

- name: feature_flag_checking
  category: real_world_usage
  description: "Check if specific feature flags exist in configuration"
  expression: "features has 'dark_mode' and features has 'notifications'"
  expected: true
  context:
    features:
      dark_mode: true
      notifications: false
      beta_features: true

- name: api_response_validation
  category: real_world_usage
  description: "Validate API response structure"
  expression: "response has 'data' and response has 'status' and response.status == 'success'"
  expected: true
  context:
    response:
      status: "success"
      data:
        users: [
          {"id": 1, "name": "Alice"},
          {"id": 2, "name": "Bob"}
        ]
      meta:
        total: 2
        page: 1
