# Examples of date comparison functionality

# Basic date state comparisons
- name: past_date_verification
  category: date_state
  description: "Verify a date in the past"
  expression: "past_date is $past"
  expected: true
  context:
    past_date: "__YESTERDAY__"

- name: future_date_verification
  category: date_state
  description: "Verify a date in the future"
  expression: "future_date is $future"
  expected: true
  context:
    future_date: "__TOMORROW__"

- name: today_date_verification
  category: date_state
  description: "Verify a date is $today"
  expression: "today_date is $today"
  expected: true
  context:
    today_date: "__NOW__"

# Time window comparisons
- name: upcoming within_hours_window
  category: time_window
  description: "Check event upcoming within recent hours"
  expression: "recent_event upcoming within 12 hours"
  expected: true
  context:
    recent_event: "__HOUR_AGO__"

- name: older_than_week
  category: time_window
  description: "Check event older than a week"
  expression: "old_event older than 1 week"
  expected: true
  context:
    old_event: "__LAST_WEEK__"

# Date comparison operations
- name: date_before_comparison
  category: date_comparison
  description: "Compare two dates with before"
  expression: "start_date before end_date"
  expected: true
  context:
    start_date: "__YESTERDAY__"
    end_date: "__TOMORROW__"

- name: date_after_comparison
  category: date_comparison
  description: "Compare two dates with after"
  expression: "end_date after start_date"
  expected: true
  context:
    start_date: "__YESTERDAY__"
    end_date: "__TOMORROW__"

- name: same_day_true_comparison
  category: date_comparison
  description: "Check same day (should be true)"
  expression: "same_day_morning same_day_as same_day_evening"
  expected: true
  context:
    same_day_morning: "2023-05-10T08:00:00Z"
    same_day_evening: "2023-05-10T20:00:00Z"

- name: same_day_false_comparison
  category: date_comparison
  description: "Check same day (should be false)"
  expression: "different_days same_day_as other_day"
  expected: false
  context:
    different_days: "2023-05-10T08:00:00Z"
    other_day: "2023-05-11T08:00:00Z"

# Complex expressions with dates
- name: project_timeline_active
  category: complex
  description: "Check if project is currently active"
  expression: "project_start is $past and project_end is $future"
  expected: true
  context:
    project_start: "__YESTERDAY__"
    project_end: "__TOMORROW__"

- name: recent_user_with_history
  category: complex
  description: "Recent login but account not new"
  expression: "last_login upcoming within 4 hours and signup_date older than 1 day"
  expected: true
  context:
    last_login: "__HOUR_AGO__"
    signup_date: "__YESTERDAY__"

# String and literal date handling
- name: iso_format_comparison
  category: string_dates
  description: "Compare ISO formatted date string"
  expression: "iso_date before '2030-01-01'"
  expected: true
  context:
    iso_date: "2023-05-10T00:00:00Z"

- name: literal_date_past
  category: string_dates
  description: "Check literal date is $past"
  expression: "'2020-01-01' is $past"
  expected: true

- name: literal_date_older_than
  category: string_dates
  description: "Check literal date older than period"
  expression: "'2020-01-01' older than 1 year"
  expected: true

# Different time units
- name: upcoming within_hours_unit
  category: time_units
  description: "Use hours time unit"
  expression: "hour_ago upcoming within 2 hours"
  expected: true
  context:
    hour_ago: "__HOUR_AGO__"

- name: upcoming within_minutes_unit
  category: time_units
  description: "Use minutes time unit"
  expression: "hour_ago upcoming within 120 minutes"
  expected: true
  context:
    hour_ago: "__HOUR_AGO__"

- name: older_than_days_unit
  category: time_units
  description: "Use days time unit"
  expression: "week_ago older than 6 days"
  expected: true
  context:
    week_ago: "__LAST_WEEK__"
