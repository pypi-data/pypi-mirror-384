Metadata-Version: 2.4
Name: minidraw
Version: 0.1.0
Summary: A minimal Python drawing library.
Project-URL: Homepage, https://github.com/liborw/minidraw
Project-URL: Repository, https://github.com/liborw/minidraw
Project-URL: Issues, https://github.com/liborw/minidraw/issues
Author: Libor Wagner
License: MIT
License-File: LICENSE.txt
Keywords: canvas,drawing,graphics,minimal,rendering,svg
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Multimedia :: Graphics
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.9
Provides-Extra: dev
Requires-Dist: mypy>=1.10; extra == 'dev'
Requires-Dist: ruff>=0.6; extra == 'dev'
Description-Content-Type: text/markdown

# minidraw

**minidraw** is a minimal, pure-Python 2D drawing library designed around composable geometric primitives and spatial transformations. It enables you to build structured vector graphics, transform them fluently, and export them into multiple formats such as **SVG** or **Python code**.

---

## âœ¨ Features

* **Composable primitives**: Line, Circle, Rectangle, Polyline, Arc, and Text.
* **Hierarchical grouping** with transformation inheritance.
* **Fluent spatial transformations** â€” translate, rotate, scale, and mirror any element.
* **Declarative styling** using the `Style` dataclass.
* **Multiple rendering backends**:
  * `SVGBackend` â†’ export as `.svg`
  * `PythonBackend` â†’ generate equivalent Python source code.
* **Simple, readable API** that keeps math and rendering separate.

---

## ðŸ§± Core Modules

| Module          | Description                                                |
| --------------- | ---------------------------------------------------------- |
| `point.py`      | Defines `Point`, a transformable 2D coordinate class.      |
| `spatial.py`    | Abstract base class defining the transformation interface. |
| `primitives.py` | Geometric shapes and `Group` container.                    |
| `style.py`      | Explicit visual style dataclass shared by primitives.      |
| `transform.py`  | Math helpers for rotation, scaling, and mirroring.         |
| `drawing.py`    | Top-level `Drawing` object with backend rendering.         |

---

## ðŸ§© Basic Example

```python
from minidraw import Drawing, Line, Circle, Style

d = Drawing()

# Add some primitives
l = Line((10, 10), (80, 80), style=Style(stroke="black"))
c = Circle((50, 50), 20, style=Style(stroke="red", fill="none"))

d.add(l, c)

# Apply transformations
c.copy().translate(40, 0).scale(1.2)

# Export
print(d.render_to_string("python"))   # â†’ Python code output
d.render_to_file("example.svg")       # â†’ SVG file
```

---

## ðŸ”„ Transformations

All primitives implement:

* `translate(dx, dy)` â€“ move by offset.
* `rotate(angle, center=None)` â€“ rotate around a point.
* `resize(sx, sy, center=None)` â€“ scale along axes.
* `scale(factor, center=None)` â€“ uniform scale.
* `mirror(point, angle)` â€“ reflect across an arbitrary line.
* `mirror_vertical(x)` / `mirror_horizontal(y)` â€“ convenient reflections.

Transformations mutate the object in place, but `copy()` creates deep copies for safe chaining.

---

## ðŸŽ¨ Styling

The `Style` dataclass allows fine-grained control over stroke, fill, text, and opacity:

```python
Style(
    stroke="black",
    stroke_width=2.0,
    fill="none",
    opacity=0.8,
    font_size=14,
    text_anchor="middle",
)
```

`Style` objects can be merged using `.merged(parent)` to inherit defaults.

---

## ðŸ§  Example: Spatial Transform Demo

`demo_spatial_transforms.py` showcases all core transformations:

```python
from minidraw import Drawing, Rectangle, Circle, Line, Polyline, Arc, Text, Style, Group

d = Drawing()
g = Group()

base = Rectangle((10, 10), (30, 20), style=Style(stroke="#999"))
rotated = base.copy().rotate(30, (25, 20)).set_style(Style(stroke="red"))

g.add(base, rotated)
d.add(g)

d.render_to_file("spatial_transforms_demo.svg")
```

Produces an SVG illustrating translation, rotation, scaling, and mirroring.

---

## ðŸ§° Backends

* **`SVGBackend`** â€“ converts primitives into valid SVG markup.
* **`PythonBackend`** â€“ generates equivalent Python code that recreates the drawing.

Custom backends can be implemented by subclassing `Backend` and overriding:

```python
def render_to_string(self, elements: list[Primitive]) -> str:
    ...

def render_to_file(self, path: Path, elements: list[Primitive]) -> None:
    ...
```

---

## ðŸ“¦ Installation

```bash
pip install minidraw
```

*(for now, clone and install locally until released on PyPI)*

```bash
git clone https://github.com/yourname/minidraw.git
cd minidraw
pip install -e .
```

---

## ðŸ§¾ License

MIT License Â© 2025 â€” Designed for simplicity and educational clarity.
