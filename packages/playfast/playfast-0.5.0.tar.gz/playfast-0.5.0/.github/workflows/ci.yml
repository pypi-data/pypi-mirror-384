name: CI

on:
  push:
    branches: [main, master]
    paths:
      - 'python/**'
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'python/**'
      - 'src/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary tests - full coverage
          - os: ubuntu-latest
            python-version: '3.11'
            run-tests: true
          # Quick compatibility checks
          - os: ubuntu-latest
            python-version: '3.12'
            run-tests: true
          # macOS build verification
          - os: macos-latest
            python-version: '3.11'
            run-tests: false
          # Note: Windows CI removed - verified via release workflow
          # Windows users install pre-built wheels from PyPI

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "."
          cache-on-failure: true
          shared-key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      # Use mold linker for faster linking (50-70% speedup on Linux)
      - name: Setup mold linker
        if: runner.os == 'Linux'
        uses: rui314/setup-mold@v1

      # Temporarily disabled due to GitHub Actions cache service issues
      # - name: Install sccache
      #   uses: mozilla-actions/sccache-action@v0.0.6

      - name: Install dependencies (CI test group only)
        run: uv sync --only-group ci-test

      - name: Build Rust extension
        run: uv run maturin develop --release

      - name: Run tests
        if: matrix.run-tests
        run: uv run pytest --cov=python/playfast --cov-report=xml --cov-report=html

      - name: Quick smoke test (build-only platforms)
        if: ${{ !matrix.run-tests }}
        run: uv run python -c "import playfast; print(f'playfast {playfast.__version__} imported successfully')"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Coverage Summary
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          uv run pytest --cov=python/playfast --cov-report=term-missing

      - name: Extract coverage percentage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        id: coverage
        run: |
          COVERAGE=$(uv run python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Create coverage badge
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: playfast-coverage.json
          label: coverage
          message: ${{ steps.coverage.outputs.percentage }}%
          valColorRange: ${{ steps.coverage.outputs.percentage }}
          maxColorRange: 100
          minColorRange: 0

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies (CI lint group only)
        run: uv sync --only-group ci-lint --no-install-project

      - name: Check formatting
        run: uv run ruff format --check .

      - name: Lint
        run: uv run ruff check .

      - name: Type check
        run: uv run pyright
