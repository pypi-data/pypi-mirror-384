[project]
name = "playfast"
version = "0.4.0"
description = "Playfast - Lightning-Fast Google Play Store Scraper"
readme = "README.md"
authors = [
    { name = "Taeyun Jang", email = "taeyun16@pm.me" }
]
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = [
    "google-play",
    "scraper",
    "async",
    "rust",
    "pyo3",
    "performance",
    "free-threading"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Rust",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp>=3.13.0",
    "pydantic>=2.12.0",
]

[project.urls]
source = "https://github.com/mixL1nk/playfast"
documentation = "https://mixl1nk.github.io/playfast/"
changelog = "https://github.com/mixL1nk/playfast/blob/master/CHANGELOG.md"


[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[dependency-groups]
dev = [
    "git-cliff>=2.10.1",
    "maturin>=1.9.6",
    "mypy>=1.18.2",
    "poethepoet>=0.37.0",
    "pre-commit>=4.3.0",
    "pyright>=1.1.406",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "python-semantic-release>=10.4.1",
    "rich>=14.2.0",
    "ruff>=0.14.0",
    "tomli>=2.3.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.21",
    "mkdocstrings[python]>=0.28.0",
]
profile = [
    "memory-profiler>=0.61.0",
]

[project.scripts]
playfast = "playfast:main"

[tool.maturin]
module-name = "playfast.core"
python-packages = ["playfast"]
python-source = "python"

[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { file = "src/**/*.rs" }, { file = "Cargo.toml" }, { file = "Cargo.lock" }]

[tool.ruff]
line-length = 88
fix = true
exclude = [
    ".git",
    ".venv",
    ".pytest_cache",
    "__pycache__",
    "target",
    "dist",
    "examples",
]
target-version = "py312"  # minimum supported version

[tool.ruff.format]
# Black compatible settings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 100

[tool.ruff.lint]
select = [
  "ANN", # flake8-annotations
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "D417", # undocumented-param
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FBT001", # flake8-boolean-trap
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "PERF", # perflint
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RUF", # ruff-specific rules
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle
]

ignore = [
  # ------------------------------------------------------------------
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D203", # 1 blank line required before class docstring (conflicts with D211)
  "D213", # Multi-line docstring summary should start at the second line (conflicts with D212)
  # ------------------------------------------------------------------
  "ANN401", # Dynamically typed expressions (Any) are disallowed
  "D401", # Relax NumPy docstring convention: first line should be imperative
  "E501", # Line length regulated by formatter
  "FBT001", # Boolean-typed positional argument - acceptable design pattern
  "PT011", # pytest.raises is too broad, set match or use a more specific exception
  "PT012", # pytest.raises block with try/except - needed for testing exception chaining
  "PYI041", # Use float instead of int | float
  "RUF022", # `__all__` is not sorted
  "RUF005", # Consider expression instead of concatenation
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM108", # Use ternary operator
  "SIM114", # Combine `if` branches
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.isort]
known-first-party = ["playfast"]
force-single-line = false
lines-after-imports = 2
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow star imports in __init__
"tests/**" = ["T20", "ANN", "D200", "B017", "RUF059", "SIM105", "SIM117", "PERF401"]  # Allow print and relaxed rules in tests
"python/playfast/core.pyi" = ["F811"]  # Allow stub overloads

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.mypy]
strict = true
python_version = "3.12"
exclude = ["src/", "examples/", ".venv", "tests/"]

[[tool.mypy.overrides]]
module = "playfast.rust_client"
disable_error_code = ["valid-type", "attr-defined"]

[tool.pyright]
include = ["python"]
exclude = ["src", "tests", "examples", "benchmarks"]
typeCheckingMode = "strict"
pythonVersion = "3.12"
reportUnnecessaryIsInstance = false
reportMissingTypeStubs = false
reportUnusedVariable = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
addopts = "-q --cov=python/playfast --cov-report=html"
testpaths = ["tests/python"]
doctest_optionflags = ["ELLIPSIS", "NORMALIZE_WHITESPACE"]
markers = [
    "integration: integration tests requiring network access",
    "asyncio: async tests",
]

[tool.coverage.run]
source = ["python/playfast"]
omit = []

[tool.coverage.report]
fail_under = 85
skip_covered = true
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "except ImportError",
  "if TYPE_CHECKING:",
  "from typing_extensions import ",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = []
# build_command disabled - changelog generation handled separately
# build_command = "python scripts/generate_changelog.py"
# build_command_env = ["NEW_VERSION"]
# Keep 0.x.x versions, don't auto-jump to 1.0.0
major_on_zero = false
# Allow version to remain at 0.x.x
allow_zero_version = true
tag_format = "v{version}"
commit_message = "chore(release): {version}"
# Use 'conventional' instead of deprecated 'angular'
commit_parser = "conventional"
changelog_file = "CHANGELOG.md"
# Disable GitHub release creation for now
upload_to_vcs_release = false
remote.type = "github"
remote.token.env = "GH_TOKEN"
# commit_author: Use default git config (local dev) or set in CI (e.g., github-actions[bot])

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "perf", "refactor", "docs", "chore", "style", "test", "ci"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor", "chore", "ci", "docs"]  # ci/chore/docs also trigger patch

[tool.poe]
executor.type = "uv"

[tool.poe.tasks]
install = "uv sync --all-packages --all-extras --dev -U --prerelease=if-necessary-or-explicit"
pre-commit-install = "uv run pre-commit install --install-hooks --overwrite"
fmt = "ruff format"
format.ref = "fmt"
lint = "ruff check"
pyright = "pyright"
mypy = "mypy python"
fix = "ruff check --fix ."
fix_unsafe = "ruff check --fix --unsafe-fixes ."
build_docs = "mkdocs build"
serve_docs = "mkdocs serve"
test = "pytest"
build = "maturin build --release"
dev = "maturin develop --release"
clean = "cargo clean"
deploy = "uv publish"

# Changelog management (git-cliff)
changelog = "git cliff -o CHANGELOG.md"
changelog_unreleased = "git cliff --unreleased"
changelog_tag = "git cliff --tag ${tag} -o CHANGELOG.md"
changelog_preview = "git cliff --unreleased --prepend CHANGELOG.md"

# combine multiple tasks
check = ["fmt", "lint", "pyright", "mypy", "test"]
pre-commit-check = ["fmt", "lint", "pyright", "mypy", "test"]

# Version & Release automation (semantic-release)
[tool.poe.tasks.version_check]
cmd = "semantic-release version --print"
env = { PYTHONUTF8 = "1" }

[tool.poe.tasks.version_bump]
cmd = "semantic-release version --no-push --no-tag --no-commit"
env = { PYTHONUTF8 = "1" }

[tool.poe.tasks.release]
help = "Create a new release (local only, no push)"
sequence = [
  { cmd = "semantic-release version --no-push", env = { PYTHONUTF8 = "1", SKIP = "uv-lock" } },
  { script = "scripts.generate_changelog:main" },
  { script = "scripts.finalize_release:main" },
]

[tool.poe.tasks.release_with_push]
help = "Create a new release and push to remote (deprecated - semantic-release handles push)"
cmd = "semantic-release version"
env = { PYTHONUTF8 = "1", SKIP = "uv-lock" }

[tool.poe.tasks.release_publish]
cmd = "semantic-release publish"
env = { PYTHONUTF8 = "1" }
