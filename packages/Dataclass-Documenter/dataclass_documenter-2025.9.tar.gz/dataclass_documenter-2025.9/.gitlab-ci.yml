pages:
  artifacts:
    paths:
    - public
  image: sphinxdoc/sphinx
  only:
  - main
  script:
  - bash scripts/build_doc.sh
  stage: deploy
  tags: &id001
  - ci.inria.fr
  - linux
  - small
pylint:
  artifacts:
    paths:
    - ./pylint/
  before_script:
  - pip install -U pip
  - pip install -U uv
  - uv venv venv
  - source venv/bin/activate
  - uv pip install -U pylint anybadge .
  image: python:latest
  only:
  - main
  script:
  - mkdir pylint
  - source venv/bin/activate
  - (LC_ALL=C pylint --output-format=text src | tee ./pylint/pylint.txt) || true
  - pylint_score=$(sed -n "s@Your code has been rated at \([^/]\+\)/.*@\1@p" "./pylint/pylint.txt")
  - anybadge -o -l pylint -v "$pylint_score" -f ./pylint/pylint.svg 2=red 4=orange
    8=yellow 10=green
  stage: test
  tags: *id001
register_python_package:
  image: python:latest
  only:
  - main
  script:
  - pip install build twine
  - python -m build
  - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine
    upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    dist/*
  stage: deploy
  tags: *id001
release_job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  release:
    description: Release $CI_COMMIT_TAG
    tag_name: $CI_COMMIT_TAG
  rules:
  - if: $CI_COMMIT_TAG =~ /^v./
  script:
  - echo "Running release_job"
  stage: release
  tags: *id001
stages:
- test
- release
- deploy
test:
  artifacts:
    paths:
    - tmp/pylint
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /^TOTAL.+ ([0-9]{1,3}%)$/
  image: python:latest
  script:
  - bash scripts/pylint.sh -b
  - bash scripts/test.sh xml
  stage: test
  tags: *id001
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
