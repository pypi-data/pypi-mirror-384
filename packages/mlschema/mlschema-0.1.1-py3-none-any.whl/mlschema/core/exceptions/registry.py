# mlschema/core/exceptions/registry.py
from __future__ import annotations

from typing import Any

from mlschema.core.exceptions._base import InvalidValueError


class FieldRegistryError(InvalidValueError):
    """Domain-root for **registry-layer** validation failures.

    Triggered when an operation on the strategy registry receives an
    invalid, conflicting, or otherwise disallowed value.

    Args:
        param: Logical argument name that caused the fault
        value: Offending value (already normalised by the caller).
        message: Human-readable description.  If *None*, a neutral default is autogenerated.
        context: Arbitrary diagnosticsâ€”module, strategy ID, etc.

    Attributes:
        param: Same as the *param* constructor argument.
        value: Same as the *value* constructor argument.
        context: Same as the *context* constructor argument.

    Example
    -------
    ```python
    if type_name in registry:
        raise FieldRegistryError(
            param="type_name",
            value=type_name,
            message=f"Strategy {type_name!r} already exists",
            context={"existing_cls": registry[type_name]},
        )
    ```
    """

    def __init__(
        self,
        param: str,
        value: Any,
        message: str | None = None,
        *,
        context: dict[str, Any] | None = None,
    ) -> None:
        # build default fallback only if the caller omitted a custom message
        default_msg = f"Registry received an invalid value for {param!r}: {value!r}."
        super().__init__(param, value, message or default_msg, context=context)


class StrategyNameAlreadyRegisteredError(FieldRegistryError):
    """Conflict: two strategies contend for the same **type_name**."""

    def __init__(self, type_name: str) -> None:
        super().__init__(
            param="type_name",
            value=type_name,
            message=f'Strategy for type_name "{type_name}" is already registered.',
            context={"offender": type_name},
        )


class StrategyDtypeAlreadyRegisteredError(FieldRegistryError):
    """Conflict: two strategies contend for the same **dtype** key."""

    def __init__(self, dtype_key: str) -> None:
        super().__init__(
            param="dtype",
            value=dtype_key,
            message=f'Strategy for dtype "{dtype_key}" is already registered.',
            context={"offender": dtype_key},
        )
