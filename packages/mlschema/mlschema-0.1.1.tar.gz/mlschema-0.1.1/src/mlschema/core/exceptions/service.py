# mlschema/core/exceptions/service.py
from __future__ import annotations

from typing import Any

from ._base import InvalidValueError


class FieldServiceError(InvalidValueError):
    """Domain-root for **service-layer** validation failures.

    Triggered when runtime data or configuration supplied to the *Service*
    component is missing, malformed, or otherwise unusable.

    Args:
        param: Logical argument name that caused the fault
            (e.g., ``"dataframe"``, ``"dtype"``, ``"fallback_strategy"``).
        value: Offending valueâ€”typically the incoming DataFrame, a dtype string,
            or a strategy identifier.
        message: Human-readable description.  If *None*, a neutral default is
            autogenerated.
        context: Arbitrary diagnostics for logs or metrics
            (row/column counts, offending dtype, etc.).

    Attributes:
        param: Mirrors the *param* constructor argument.
        value: Mirrors the *value* constructor argument.
        context: Mirrors the *context* constructor argument.

    Example
    -------
    ```python
    if df.empty:
        raise FieldServiceError(
            param="dataframe",
            value=df,
            message="Input DataFrame is empty",
            context={"rows": 0, "cols": 0},
        )
    ```
    """

    def __init__(
        self,
        param: str,
        value: Any,
        message: str | None = None,
        *,
        context: dict[str, Any] | None = None,
    ) -> None:
        default = f"Service received an invalid value for {param!r}: {value!r}."
        super().__init__(param, value, message or default, context=context)


class EmptyDataFrameError(FieldServiceError):
    """Conflict: Service received a DataFrame with **zero** rows *or* columns."""

    def __init__(self, df) -> None:
        super().__init__(
            param="dataframe",
            value=df,
            message="DataFrame contains no columns or rows.",
            context={"rows": len(df.index), "cols": len(df.columns)},
        )


class FallbackStrategyMissingError(FieldServiceError):
    """
    Conflict: No registered strategy matches the column dtype, and the fallback ``"text"`` strategy is absent.
    """

    def __init__(self, dtype_str: str) -> None:
        super().__init__(
            param="dtype",
            value=dtype_str,
            message=(
                f'No strategy registered for dtype "{dtype_str}"; attempted '
                'fallback "text" but it is not available.'
            ),
            context={"dtype": dtype_str},
        )
