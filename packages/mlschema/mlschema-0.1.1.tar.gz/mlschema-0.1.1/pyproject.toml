[project]
name = "mlschema"
version = "0.1.1"
description = "Production-ready DataFrame to JSON Schema converter with extensible validation strategies"
readme = { file = "README.md", content-type = "text/markdown" }
license = { text = "MIT" }
authors = [
    { name = "Pablo Ulloa Santín", email = "pablo.ulloa.santin@udc.es" }
]
maintainers = [
    { name = "Pablo Ulloa Santín", email = "pablo.ulloa.santin@udc.es" }
]
keywords = [
    "pandas",
    "dataframe",
    "json-schema",
    "validation",
    "pydantic",
    "schema-inference",
    "data-validation",
    "machine-learning",
    "data-science",
    "etl",
    "type-inference",
    "frontend-integration",
]
classifiers = [
    # Development Status
    "Development Status :: 4 - Beta",

    # Intended Audience
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",

    # License
    "License :: OSI Approved :: MIT License",

    # Natural Language
    "Natural Language :: English",

    # Operating System
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",

    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",

    # Topic
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Utilities",

    # Typing
    "Typing :: Typed",

    # Framework
    "Framework :: Pydantic",
    "Framework :: Pytest",
]
requires-python = ">=3.14,<3.15"
dependencies = [
    "pandas>=2.3.3,<3.0.0",
    "pydantic>=2.12.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/UlloaSP/mlschema"
Documentation = "https://ulloasp.github.io/mlschema/"
Repository = "https://github.com/UlloaSP/mlschema"
"Bug Tracker" = "https://github.com/UlloaSP/mlschema/issues"
"Source Code" = "https://github.com/UlloaSP/mlschema"
Changelog = "https://github.com/UlloaSP/mlschema/blob/main/CHANGELOG.md"
Discussions = "https://github.com/UlloaSP/mlschema/discussions"
Funding = "https://github.com/sponsors/UlloaSP"
"Release Notes" = "https://github.com/UlloaSP/mlschema/releases"

[dependency-groups]
# Development dependencies
dev = [
    "mlschema[test,docs,lint]",
    "pre-commit>=4.3.0",
]

# Testing dependencies
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",  # Parallel testing
    "coverage[toml]>=7.6.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-minify-plugin>=0.8.0",
]

# Linting and formatting dependencies
lint = [
    "pyright>=1.1.402",
    "ruff>=0.14.1",
]

# All dependencies (for easy installation)
all = [
    "mlschema[dev,test,docs,lint]",
]

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/mlschema/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/test",
    "/docs",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "SECURITY.md",
    "AUTHORS.md",
    "THIRD_PARTY_LICENSES.md",
    "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mlschema"]

# ============================================================================
# Testing Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["test"]
pythonpath = ["src"]
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Require markers to be registered
    "--strict-config",        # Require valid pytest configuration
    "--showlocals",           # Show local variables in tracebacks
    "--tb=short",             # Short traceback format
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",                  # Turn warnings into errors
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/test/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# Ruff Configuration (Linting & Formatting)
# ============================================================================

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "test"]
extend-exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "C90",    # mccabe complexity
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "SIM",    # flake8-simplify
    "DTZ",    # flake8-datetimez
    "RET",    # flake8-return
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented-out code)
    "PL",     # pylint
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "RET504",  # Unnecessary variable assignment before return
]

[tool.ruff.lint.per-file-ignores]
"test/**/*.py" = [
    "ARG",     # Unused arguments are common in tests (fixtures)
    "PLR2004", # Magic values are acceptable in tests
    "PLR0124", # Self-comparison acceptable (NaN checks)
    "PLC0415", # Import at function level (avoid circular imports in tests)
    "S101",    # assert statements are expected in tests
    "DTZ",     # datetime without timezone acceptable in tests
]
"src/mlschema/core/app/strategy.py" = [
    "ARG002",  # Unused method argument (base class interface)
]

[tool.ruff.lint.isort]
known-first-party = ["mlschema"]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

# ============================================================================
# Pyright Configuration (Type Checking)
# ============================================================================

[tool.pyright]
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/node_modules",
    ".venv",
    "build",
    "dist",
]
pythonVersion = "3.14"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportPrivateUsage = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true

# ============================================================================
# MyPy Configuration (Alternative Type Checker)
# ============================================================================

[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# ============================================================================
# Bandit Configuration (Security)
# ============================================================================

[tool.bandit]
exclude_dirs = ["test", "tests", ".venv"]
skips = ["B101"]  # Skip assert_used (legitimate in tests)

# ============================================================================
# Interrogate Configuration (Docstring Coverage)
# ============================================================================

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
fail-under = 80
exclude = ["test", "tests", "setup.py", "docs"]
verbose = 2
quiet = false
color = true
