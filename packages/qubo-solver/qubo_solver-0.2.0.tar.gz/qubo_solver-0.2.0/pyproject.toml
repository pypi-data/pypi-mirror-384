[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qubo-solver"
description = "A Quadratic Unconstrained Binary Optimization (QUBO) solver library using quantum and classical approaches."
readme = "README.md"
version = "0.2.0"
requires-python = ">=3.10,<3.13"
license = { text = "MIT-derived" }
keywords = ["quantum", "qubo", "solver", "optimization", "combinatorial"]
authors = [
  { name = "Manu Lahariya", email = "manu.lahariya@pasqal.com" },
  { name = "Charles Moussa", email = "c.moussa@pasqal.com" },
  { name = "Yassine Naghmouchi", email = "yassine.naghmouchi@pasqal.com" },
  { name = "Quentin Ma", email = "quentin.ma@pasqal.com" },
  { name = "Monique Garzillo", email = "monique.garzillo@pasqal.com" },
  { name = "Daniele Cucurachi", email = "daniele.cucurachi@pasqal.com" },
  { name = "ClÃ©ment de Terrasson de Montleau", email = "clement.de-terrasson@pasqal.com" },
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

# always specify a version for each package
# to maintain consistency
dependencies = [
  "numpy",
  "torch",
  "scikit-learn",
  "pandas",
  "seaborn",
  "scikit-optimize",
  "PyMaxflow",
  "cplex",
  "pydantic>=2",
  "qoolqit[solvers]==0.2.0",
]

[tool.hatch.metadata]
allow-direct-references = true
allow-ambiguous-features = true

[project.optional-dependencies]
extras = [
  "jupyter",
  "tqdm",
]

[project.urls]
Documentation = "https://pasqal-io.github.io/qubo-solver/latest/"
Issues = "https://github.com/pasqal-io/qubo-solver/issues"
Source = "https://github.com/pasqal-io/qubo-solver"

[tool.hatch.envs.default]
installer = "uv"
features = ["extras"]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "nbconvert",
  "ipykernel",
  "pre-commit",
  "black",
  "ruff",
  "requests-mock",
]


[tool.hatch.envs.default.scripts]
test = "pytest -n auto -vvv --cov-report=term-missing --cov-config=pyproject.toml --cov=qubosolver --cov=tests --ignore=./tests/test_examples.py --ignore=./tests/test_notebooks.py {args}"
test-notebooks = "pytest -n auto -vvv ./tests/test_notebooks.py {args}"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = """-vvv --cov-report=xml --cov-config=pyproject.toml --cov=mis --cov=tests"""
xfail_strict = true
filterwarnings = [
  "ignore:Call to deprecated create function FieldDescriptor",
  "ignore:Call to deprecated create function Descriptor",
  "ignore:Call to deprecated create function EnumDescriptor",
  "ignore:Call to deprecated create function EnumValueDescriptor",
  "ignore:Call to deprecated create function FileDescriptor",
  "ignore:Call to deprecated create function OneofDescriptor",
  "ignore:distutils Version classes are deprecated.",
]
asyncio_mode="auto"
asyncio_default_fixture_loop_scope="function"

[tool.hatch.envs.docs]
installer = "uv"
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocstrings-python",
  "mkdocs-section-index",
  "mkdocs-exclude",
  "mkdocs-jupyter",
  "markdown-exec",
  "mike",
  "python-markdown-math",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict {args}"
serve = "mkdocs serve --dev-addr localhost:8000"
test = "mkdocs build --clean --strict"

[[tool.hatch.envs.test.matrix]]
python = ["310", "311", "312"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.gitignore",
    "/.pre-commit-config.yml",
    "/tests",
    "/docs",
    "/examples",
]

[tool.hatch.build.targets.wheel]
packages = ["qubosolver"]

[tool.coverage.run]
branch = true
parallel = true
# uncomment to omit any file from the
# coverage. Regexps can be used
# to select all files from a folder
#omit = [
#  "template_python/to_omit.py",
#]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.ruff]
line-length = 100

[lint]
extend-ignore = ["F841"]
select = ["E", "F", "I", "Q"]

[lint.isort]
required-imports = ["from __future__ import annotations"]

[lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[lint.mccabe]
max-complexity = 15

[lint.flake8-quotes]
docstring-quotes = "double"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = false
ignore_missing_imports = true
