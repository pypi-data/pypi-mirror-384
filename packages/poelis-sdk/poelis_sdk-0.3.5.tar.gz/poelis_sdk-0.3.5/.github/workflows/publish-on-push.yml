name: Publish on version bump

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
  workflow_dispatch: {}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: 'latest'

    - name: Extract version
      id: v
      run: |
        VER=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
        echo "version=$VER" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: tag
      run: |
        if git rev-parse --verify --quiet refs/tags/v${{ steps.v.outputs.version }}; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create tag
      if: steps.tag.outputs.exists == 'false'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git tag v${{ steps.v.outputs.version }}
        git push origin v${{ steps.v.outputs.version }}

    - name: Install build tooling
      run: |
        uv sync --dev

    - name: Build sdist and wheel
      run: |
        uv run python -m build

    - name: List built packages
      run: |
        ls -la dist/
        echo "Package contents:"
        for pkg in dist/*; do
          echo "Package: $pkg"
          if [[ $pkg == *.whl ]]; then
            unzip -l "$pkg" | head -10
          elif [[ $pkg == *.tar.gz ]]; then
            tar -tzf "$pkg" | head -10
          fi
        done

    - name: Install twine
      run: |
        uv add twine

    - name: Publish to PyPI with twine
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv run twine upload --skip-existing --verbose dist/*

