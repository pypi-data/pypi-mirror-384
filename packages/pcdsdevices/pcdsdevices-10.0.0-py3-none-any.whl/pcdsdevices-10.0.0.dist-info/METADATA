Metadata-Version: 2.4
Name: pcdsdevices
Version: 10.0.0
Summary: Ophyd Device definitions for LCLS Beamline components
Author: SLAC National Accelerator Laboratory
License: Copyright (c) 2023, The Board of Trustees of the Leland Stanford Junior
        University, through SLAC National Accelerator Laboratory (subject to receipt
        of any required approvals from the U.S. Dept. of Energy). All rights reserved.
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        (1) Redistributions of source code must retain the above copyright notice,
            this list of conditions and the following disclaimer.
        
        (2) Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        (3) Neither the name of the Leland Stanford Junior University, SLAC National
            Accelerator Laboratory, U.S. Dept. of Energy nor the names of its
            contributors may be used to endorse or promote products derived from this
            software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER, THE UNITED STATES GOVERNMENT,
        OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
        OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
        IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
        OF SUCH DAMAGE.
        
        You are under no obligation whatsoever to provide any bug fixes, patches, or
        upgrades to the features, functionality or performance of the source code
        ("Enhancements") to anyone; however, if you choose to make your Enhancements
        available either publicly, or directly to SLAC National Accelerator Laboratory,
        without imposing a separate written license agreement for such Enhancements,
        then you hereby grant the following license: a non-exclusive, royalty-free
        perpetual license to install, use, modify, prepare derivative works, incorporate
        into other computer software, distribute, and sublicense such Enhancements or
        derivative works thereof, in binary and source code form.
        
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.md
License-File: AUTHORS.rst
Requires-Dist: bluesky>=1.6.4
Requires-Dist: happi
Requires-Dist: jsonschema
Requires-Dist: lightpath>=1.0.5
Requires-Dist: numpy
Requires-Dist: ophyd>=1.7.0
Requires-Dist: pcdscalc>=0.2.0
Requires-Dist: pcdsutils>=0.4.0
Requires-Dist: prettytable
Requires-Dist: pyepics<3.5.8,>=3.4.2
Requires-Dist: pytmc>=2.7.0
Requires-Dist: pyyaml
Requires-Dist: schema
Requires-Dist: scipy
Requires-Dist: sympy
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-timeout; extra == "test"
Requires-Dist: matplotlib; extra == "test"
Requires-Dist: typhos; extra == "test"
Provides-Extra: doc
Requires-Dist: docs-versions-menu; extra == "doc"
Requires-Dist: sphinx>=3.3.1; extra == "doc"
Requires-Dist: sphinx_rtd_theme; extra == "doc"
Requires-Dist: whatrecord; extra == "doc"
Requires-Dist: ipython; extra == "doc"
Requires-Dist: sphinxcontrib-jquery; extra == "doc"
Requires-Dist: PyQt5; extra == "doc"
Dynamic: license-file

<h1 align="center">PCDS Devices</h1>

<div align="center">
  <strong>Collection of Ophyd Device subclasses for IOCs unique to PCDS</strong>
</div>

<p align="center">
  <a href="#motivation">Motivation</a> â€¢
  <a href="#installation">Installation</a>
</p>

## Motivation

Ophyd presents a uniform set of abstractions for EPICS devices. Many devices at
the LCLS are covered by ophyd-provided classes such as ``EpicsMotor`` and
``AreaDetector``, but there are also many more custom and unique devices.

This repository:

* Defines unique device classes required by the LCLS, referenced by happi
  and our [device_config](https://github.com/pcdshub/device_config/) database.
* Offers LCLS-tailored solutions for functionality not provided by ophyd
* Provides essential tools to aid in the creation of new devices for specific
  applications
* Acts as a proving ground for features that may eventually be destined for
  ophyd
* ... and more!

Much of the core re-used functionality can be found in
``pcdsdevices.device``, ``pcdsdevices.interface``, ``pcdsdevices.pseudopos``,
and ``pcdsdevices.signal``.

## Installation

Install the most recent tagged build:

```bash
$ conda install -c conda-forge pcdsdevices
```

Install the most recent development build:

```bash
$ conda install pcdsdevices -c pcds-dev -c lightsource2-tag -c conda-forge
```

Or alternatively:

```bash
# Install the tagged version for the dependencies
$ conda install -c conda-forge pcdsdevices

# Clone the master branch:
$ git clone https://github.com/pcdshub/pcdsdevices
$ cd pcdsdevices

# And perform a development install:
$ python -m pip install -e .
```

## Testing

### Testing from psbuild-rhel7

Use the pcds conda environment:

```bash
$ source /cds/group/pcds/pyps/conda/pcds_conda
```

### Testing without PCDS servers

Ensure you have all of the development requirements available:

```bash
$ pip install -r dev-requirements.txt
```

### General testing steps

```bash
$ git clone https://github.com/pcdshub/pcdsdevices
$ cd pcdsdevices

# Switch to a branch that reflects what you're working on:
$ git checkout -b my_feature_branch_name

# Make your changes to files
# Install pre-commit to allow for style checks before committing
$ pre-commit install

# Run the test suite
$ python run_tests.py -v
```

If all is well, commit and push your changes.

If pre-commit complains about an issue, you will need to resolve it and try
again.

```bash
$ git commit -a -m "ENH: my new feature"
$ git remote add my_remote git@github.com:my_username/pcdsdevices
$ git push -u my_remote my_feature_branch_name
```
