# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].39712373237291850001929057769826244787
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.95e-05,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1807164324042463798,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026595108941000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026594777382000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T08:43:15-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'LlAGPjfO0',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10363380192615184096,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026595112362000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026595109197000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.8299999999999995e-05,
          'gen_ai.usage.input_tokens': 483,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5687879115964223106,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026595478990000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026595112536000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'wzCUjvRq4',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10172050132064111684,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026595479979000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026595479170000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone"}, {"number": 2, "description": "Write the year to a file"}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.18e-05,
          'gen_ai.usage.input_tokens': 518,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5885670640581518449,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026596171980000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026595480140000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev0+g8e34f9a88.d20250915',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2795294992452118289,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 39712373237291850001929057769826244787,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026599652409000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026594771631000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].273475590164507581703505203264503192396
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.72e-05,
          'gen_ai.usage.input_tokens': 672,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2932848494077650092,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026586853189000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17348474965005769013,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026586341103000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T08:43:06-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'jbUWqgIUr',
          'gen_ai.tool.description': '''
            Get current time in a specific timezones
            
            Args:
                timezone: IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user.
          ''',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14962216559073945637,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026586857290000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 16887867178883245156,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026586853654000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 7.7e-05,
          'gen_ai.usage.input_tokens': 770,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5619252809477224583,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026587201860000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17348474965005769013,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026586857845000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'j5pzf0TaM',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7349109554078691264,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026587204475000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10221318138555217448,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026587202619000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.09e-05,
          'gen_ai.usage.input_tokens': 809,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6735089064917818756,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026587925393000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17348474965005769013,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026587207556000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'Je755BQAS',
          'gen_ai.tool.description': '''
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8045312650763315758,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026587928967000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 7027657387019838282,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026587926056000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev0+g8e34f9a88.d20250915',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8588495004904668441,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 273475590164507581703505203264503192396,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026587931400000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026586339976000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].115825058289444712299650141807529952578
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Found the current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Wrote the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.45e-05,
          'gen_ai.usage.input_tokens': 245,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12072964954527026452,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028601275757000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028600965362000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T09:16:41-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': '''
            Get current time in a specific timezones
            
            Args:
                timezone: IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'America/New_York' as local timezone if no timezone provided by the user.
          ''',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17250783977442180996,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028601280591000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028601277624000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.31e-05,
          'gen_ai.usage.input_tokens': 331,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11409606448387202450,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028601516648000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028601281821000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
                    Args:
                        text (str): The text to write to the file.
            
                    Returns:
                        None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18344230493271694625,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028601519026000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028601518149000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.6599999999999995e-05,
          'gen_ai.usage.input_tokens': 366,
          'gen_ai.usage.output_cost': 9.9e-06,
          'gen_ai.usage.output_tokens': 33,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3673965111321899285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028602113531000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028601520276000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.2e-05,
          'gen_ai.usage.input_tokens': 320,
          'gen_ai.usage.output_cost': 1.8599999999999998e-05,
          'gen_ai.usage.output_tokens': 62,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17360679537864909106,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028602753586000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028602115388000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev3+g8bf65aae1.d20250916',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15531323892744358789,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 115825058289444712299650141807529952578,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028602753668000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028600960730000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].183122279777172322684744876400756953563
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.9699999999999998e-05,
          'gen_ai.usage.input_tokens': 197,
          'gen_ai.usage.output_cost': 1.08e-05,
          'gen_ai.usage.output_tokens': 36,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4679246220570242795,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028499914934000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028498931090000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T09:14:59-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': '''
            get_current_time(*, timezone: str) -> str
            Get current time in a specific timezones
          ''',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10228776255392323169,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028499919034000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028499915928000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.62e-05,
          'gen_ai.usage.input_tokens': 262,
          'gen_ai.usage.output_cost': 9.9e-06,
          'gen_ai.usage.output_tokens': 33,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9269503876317208151,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028500146680000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028499920240000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            :param text: The text to write to the file.
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15403562707434381698,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028500148457000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028500147635000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.8499999999999998e-05,
          'gen_ai.usage.input_tokens': 285,
          'gen_ai.usage.output_cost': 2.8199999999999998e-05,
          'gen_ai.usage.output_tokens': 94,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1726412464743061000,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028500732051000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028500149729000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool | dict[str, typing.Any] | list[typing.Any]]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18066273280650095232,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028500734292000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028500733145000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here is the list of steps I have taken:
            
            1. Get current time in the America/New_York timezone.
            2. Write the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.03e-05,
          'gen_ai.usage.input_tokens': 403,
          'gen_ai.usage.output_cost': 9.6e-06,
          'gen_ai.usage.output_tokens': 32,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6597376107037947816,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028502141305000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028500735645000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.61e-05,
          'gen_ai.usage.input_tokens': 161,
          'gen_ai.usage.output_cost': 1.8e-05,
          'gen_ai.usage.output_tokens': 60,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15563885816911253146,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028502855627000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028502143530000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev3+g8bf65aae1.d20250916',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12253070288137891175,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 183122279777172322684744876400756953563,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758028502855731000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.37.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758028498928802000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].100927429609276267646756448943279827607
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.69e-05,
          'gen_ai.usage.input_tokens': 269,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9295669169508793927,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026593449611000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593210770000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T08:43:13-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13687147528289423029,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026593452926000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593450406000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.59e-05,
          'gen_ai.usage.input_tokens': 359,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1954108595464389762,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026593767325000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593453682000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3402142098134531952,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026593771373000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593769194000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.92e-05,
          'gen_ai.usage.input_tokens': 392,
          'gen_ai.usage.output_cost': 1.38e-05,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10907162358052518539,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026594435103000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593773377000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev0+g8e34f9a88.d20250915',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12324293800750531911,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100927429609276267646756448943279827607,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026594436486000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026593209236000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].193014249579837554382251753808266698816
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get the current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.769999999999999e-05,
          'gen_ai.usage.input_tokens': 677,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5217401444604234849,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026600205276000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026599903043000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T08:43:20-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6362149822438609756,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026600209406000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026600206847000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 7.819999999999999e-05,
          'gen_ai.usage.input_tokens': 782,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1718758194134576853,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026600499567000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026600209578000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15036084660665439760,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026600502243000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026600500018000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get the current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.35e-05,
          'gen_ai.usage.input_tokens': 835,
          'gen_ai.usage.output_cost': 1.71e-05,
          'gen_ai.usage.output_tokens': 57,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14876458401309029265,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026601057378000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026600502982000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get the current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get the current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13738272699182380164,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026601060767000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026601057895000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev0+g8e34f9a88.d20250915',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2377815918452923285,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 193014249579837554382251753808266698816,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026601061025000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026599902637000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].200754113673326459792359196831899614724
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
        dict({
          'description': 'Return the list of steps taken.',
          'number': 3,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.28e-05,
          'gen_ai.usage.input_tokens': 328,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17462846557343803630,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026601631557000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026601289496000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-09-16T08:43:21-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12552362084418536424,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026601634284000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026601631711000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.14e-05,
          'gen_ai.usage.input_tokens': 414,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9395046233243236617,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026602963917000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026601634336000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13094185588603238916,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026602967081000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026602964206000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"1. Get current time in the America/New_York timezone. 2. Write the year to a file. 3. Return the list of steps taken.\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.49e-05,
          'gen_ai.usage.input_tokens': 449,
          'gen_ai.usage.output_cost': 1.29e-05,
          'gen_ai.usage.output_tokens': 43,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12817121744145091219,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026603465838000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026602967229000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '1. Get current time in the America/New_York timezone. 2. Write the year to a file. 3. Return the list of steps taken.',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"answer": "1. Get current time in the America/New_York timezone. 2. Write the year to a file. 3. Return the list of steps taken."}',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7916564517670538421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026603472241000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026603470642000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year to a file."
                },
                {
                  "number": 3,
                  "description": "Return the list of steps taken."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.78e-05,
          'gen_ai.usage.input_tokens': 178,
          'gen_ai.usage.output_cost': 2.49e-05,
          'gen_ai.usage.output_tokens': 83,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 549755261599922540,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026604388771000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026603472911000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'any_agent.version': '1.9.1.dev0+g8e34f9a88.d20250915',
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10398286333944367643,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 200754113673326459792359196831899614724,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1758026604388853000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1758026601289354000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
