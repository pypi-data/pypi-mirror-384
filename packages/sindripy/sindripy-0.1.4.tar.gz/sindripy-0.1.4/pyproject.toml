[project]
name = "sindripy"
version = "0.1.4"
description = "Value Object and Object Mother patterns implementation for Python"
authors = [{name = "dimanu-py", email = "dimanu.py@gmail.com"}]
dependencies = [
]
requires-python = ">=3.10, <3.14"
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Typing :: Typed",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Software Development :: Testing :: BDD",
    "Framework :: FastAPI"
]

[project.urls]
documentation = "https://dimanu-py.github.io/sindri/home/"
repository = "https://github.com/dimanu-py/sindri/"

[dependency-groups]
dev = [
    {include-group = "lint"},
    {include-group = "test"},
    {include-group = "release"},
]

release = [
    "python-semantic-release",
]
lint = [
    "mypy",
    "ruff",
    "pip-audit",
    "pre-commit",
]
test = [
    "expects>=0.9.0",
    "faker",
    "pytest",
    "pytest-asyncio",
    "pytest-sugar>=1.1.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-macros-plugin>=1.4.0",
    "mkdocs-material>=9.6.21",
    "mkdocs-section-index>=0.3.10",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["E", "F", "W", "B", "C4", "UP", "I"]
ignore = ["B008", "E501"]

[tool.ruff.lint.isort]
known-first-party = ["sindripy", "test"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/sindripy"]

[tool.hatch.build.targets.sdist]
include = [
    "src/sindripy",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
]

[tool.pytest.ini_options]
markers = [
    "unit: mark a test as a unit test",
    "acceptance: mark a test as an acceptance test",
    "integration: mark a test as an integration test",
]
testpaths = ["test"]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/sindripy/__init__.py:__version__"]
commit_message = "bump: new version {version} created"
commit_parser = "conventional"
major_on_zero = false
allow_zero_version = true
no_git_verify = false
tag_format = "{version}"
build_command = """
    pip install -e '.[build]'
    uv lock --upgrade-package instant-python
    git add uv.lock
"""

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor", "test", "build"]
allowed_tags = ["feat", "fix", "refactor", "perf", "build"]
default_bump_level = 0
parse_squash_commits = false
ignore_merge_commits = true

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = ['''^Merge pull request #''', '''^Merge branch ''']
mode = "update"
#template_dir = "docs/changelog"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG"
output_format = "md"
mask_initial_release = false
