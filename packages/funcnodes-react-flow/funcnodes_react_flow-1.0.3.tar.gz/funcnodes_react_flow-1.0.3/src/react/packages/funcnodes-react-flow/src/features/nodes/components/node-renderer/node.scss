:root {
  --node_border_radius: 5px;
  --node_border_width: 2px;
  --handle_outer_radius: 4px;
  --handle_inner_radius: 2px;
  --handle_width: 10;
  --handle_width_hover: 15;
  --handle_overlap: 3;
  --nodeinput_margin: 2;
  --nodeio_shift: calc(var(--handle_overlap) - var(--nodeinput_margin));

  --node_inner_ele_radius: calc(
    var(--node_border_radius) - var(--node_border_width)
  );
}

.react-flow {
  &__node {
    padding: 0;
    border-radius: var(--node_border_radius);
    background-color: var(--fn-node-background);
    display: flex;
    flex-direction: column;
    color: var(--fn-text-color-neutral);
    box-sizing: content-box;
    transform: translate(-50%, -50%);
    border: var(--node_border_width) solid
      var(--fn-node-border-color, #ffffff00);
    font-size: var(--fn-font-size-xs);
    width: auto;
    max-width: 250px;
    min-width: 100px;
    max-height: 2000px;
    &.selected {
      border-color: var(--fn-primary-color, #ffffff99);
    }
    background-clip: content-box;

    & * {
      box-sizing: border-box;
    }
  }

  &__handle {
    height: calc(100% - 4px);
    border-radius: 0;
    width: calc(var(--handle_width) * 1px);

    transition: left 0.2s ease-in-out, right 0.2s ease-in-out,
      width 0.2s ease-in-out;
    &:hover {
      width: calc(var(--handle_width_hover) * 1px);
    }

    &.source {
      background-color: var(--fn-node-handle-source-color);
    }
    &.target {
      background-color: var(--fn-node-handle-target-color);
    }
    &-left {
      border-radius: var(--handle_outer_radius) var(--handle_inner_radius)
        var(--handle_inner_radius) var(--handle_outer_radius);
      left: calc((var(--nodeio_shift) - var(--handle_width) / 2) * 1px);
      &:hover {
        left: calc((var(--nodeio_shift) - var(--handle_width_hover) / 2) * 1px);
      }
    }
    &-right {
      border-radius: var(--handle_inner_radius) var(--handle_outer_radius)
        var(--handle_outer_radius) var(--handle_inner_radius);
      right: calc((var(--nodeio_shift) - var(--handle_width) / 2) * 1px);
      &:hover {
        right: calc(
          (var(--nodeio_shift) - var(--handle_width_hover) / 2) * 1px
        );
      }
    }
    &-top {
      border-radius: var(--handle_outer_radius) var(--handle_outer_radius)
        var(--handle_inner_radius) var(--handle_inner_radius);
    }
    &-bottom {
      border-radius: var(--handle_inner_radius) var(--handle_inner_radius)
        var(--handle_outer_radius) var(--handle_outer_radius);
    }
  }
}

.innernode {
  width: 100%;
  height: 100%;
  flex-direction: column;
  display: flex;
  // padding: 2px;
  box-sizing: border-box;
  max-height: inherit;

  &.intrigger {
    & .nodeheader {
      background-color: #abb408;
    }
  }

  &.error {
    & .nodeheader {
      background-color: #ff0000;
    }
  }
}
.nodeheader {
  box-sizing: border-box;
  background-color: var(--fn-node-header-color);
  width: 100%;
  padding: 0.1rem;
  border-radius: var(--node_inner_ele_radius) var(--node_inner_ele_radius) 0 0;
  display: flex; /* Use flex layout */
  align-items: center; /* Align items vertically in the center */
  justify-content: space-between; /* Distribute space between items */
  color: var(--fn-text-color-neutral);

  &_element {
    display: flex; /* Enable flex within each child to center content */
    align-items: center; /* Align items vertically in the center */
  }
  &_title {
    flex-grow: 1; /* Allow the text div to grow and fill available space */
    margin: 0 10px; /* Add some space around the text for aesthetics */
    white-space: nowrap; /* Prevent wrapping */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis to overflow */
    justify-content: center; /* Center the text horizontally */
    &_text {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      max-width: 100%; /* Ensure it does not overflow the parent */
    }
  }

  & .nodeheaderbutton {
    cursor: pointer;
    margin-left: var(--fn-space-xs);

    &:hover {
      color: var(--fn-primary-color, #0cc3f5);
    }
    &:active {
      color: #075d74;
    }
  }
}

.nodename_input {
  // remove the default
  border: 1px solid var(--fn-node-header-color, #000000);
  border-radius: 2px;
  background: none;
  color: var(--fn-text-color-neutral);
  text-align: center;

  font-size: inherit;
  margin: 2px;
  box-sizing: border-box;
}

.nodefooter {
  background-color: var(--fn-node-footer-color);
  width: 100%;
  padding: 0.1rem;
  border-radius: 0 0 var(--node_inner_ele_radius) var(--node_inner_ele_radius);
  color: var(--fn-text-color-neutral);
  &:empty {
    display: none;
  }
  & .nodeerror {
    border: 1px solid #ff0000;
    border-radius: 2px;
    padding: 0.25rem;
    background-color: #ff000075;
  }
}

.nodebody {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 0;
}

.nodedatabody {
  overflow: auto;
  flex: 1;
  display: flex;
}

.nodedatabody > * {
  max-height: 100%;
  max-width: 100%;
}

.nodedatabutton {
  flex: 1;
  max-height: 40rem;
}

.nodedatabutton > * {
  max-height: 100%;
  max-width: 100%;
}

.noderesizecontrol {
  background: transparent !important;
  border: none !important;
  font-size: var(--fn-font-size-xs);
}
.noderesizeicon {
  position: absolute;
  bottom: 4px;
  right: 4px;
  font-size: var(--fn-font-size-xs);
}

.nodeio {
  width: auto;
  background-color: inherit;
  padding: 0.1rem;
  margin-top: 0.1rem;
  margin-bottom: 0.1rem;
  position: relative;
  display: flex;
  flex-direction: row;

  border: 1px solid var(--fn-neutral-element-border, #ffffff88);
  border-radius: 3px;
  box-sizing: border-box;
  margin-left: calc(var(--nodeinput_margin) * 1px);
  margin-right: calc(var(--nodeinput_margin) * 1px);
  align-items: center;
}

.nodeinput {
  @extend .nodeio;
}

.nodeoutput {
  @extend .nodeio;
}

.iovaluefield {
  // overflow: hidden;
  align-items: start;
  justify-content: start;
  margin: 0.2rem;
  line-break: anywhere;
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  & > input {
    width: 100%;
  }

  & > textarea {
    width: 100%;
    max-width: 100%;

    resize: none;
    box-sizing: border-box;
    min-height: 1rem;
    max-height: 2rem;
    transition: max-height 0.2s ease-in-out;

    &:focus {
      max-height: 25rem;
      resize: both;
    }
  }
}

.nodeinput > .iovaluefield {
  overflow: visible;
}
.ioname {
  // flex-grow: 1;
  // flex-shrink: 1;
  color: var(--fn-text-color-neutral);
  margin: 0.2rem;
  // min-width: 2rem;
  flex: 0 0 auto;
  min-width: 1rem;
  max-width: 6rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  .nodeinput & {
    text-align: left;
  }
  .nodeoutput & {
    text-align: right;
  }
}

.nodedatainput {
  height: 1.5rem;
  display: flex;
  align-items: center;
  max-width: 100%;
}

input.nodedatainput {
  &:focus {
    outline: none;
  }
}

.nodedatastyledelement {
  background-color: var(--fn-node-header-color);
  color: var(--fn-text-color-neutral);
  font-size: var(--fn-font-size-xs);
  height: 1.5rem;

  &:disabled {
    opacity: 0.5;
  }
}

input.nodedatainput.styledinput,
textarea.nodedatainput.styledinput,
.nodedatainput.styleddropdown {
  @extend .nodedatastyledelement;
  width: 100%;
}

.nodeprogress {
  width: 100%;
  height: 10px;
  transition: height 0.1s ease;
  overflow: hidden;

  &-text {
    text-align: center;
    color: var(--fn-text-color-neutral);
    mix-blend-mode: difference;
  }
  &-bar {
    border-radius: 3px;
  }
  &-progress {
    background-color: var(--fn-node-progress-color);
    border-radius: 3px;
    transition: width 0.3s ease;
  }
}

.nodesettings-dialog {
  width: 80vw;
  height: 80vh;
  max-width: 80vw;
  max-height: 80vh;
}
