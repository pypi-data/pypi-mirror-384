# src/weighted_cardinality_estimation/__init__.pyi


class Sketch:
    def add(self, x: str, weight: float = ...) -> None: ...
    def add_many(self, elems: list[str], weights: list[float]) -> None: ...
    def estimate(self) -> float: ...
    def memory_usage_total(self) -> int: ...
    def memory_usage_write(self) -> int: ...
    def memory_usage_estimate(self) -> int: ...

class ExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def jaccard_struct(self, other: "ExpSketch") -> float: ...

class FastExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def jaccard_struct(self, other: "FastExpSketch") -> float: ...

class FastGMExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int]) -> None: ...
    def jaccard_struct(self, other: "FastGMExpSketch") -> float: ...

class BaseQSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...

class FastQSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...

class QSketchDyn(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int, g_seed: int = ...) -> None: ...

class QSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int) -> None: ...

class BaseLogExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int, logarithm_base: float) -> None: ...

class FastLogExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int, logarithm_base: float) -> None: ...

class BaseShiftedLogExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int, logarithm_base: float) -> None: ...

class FastShiftedLogExpSketch(Sketch):
    def __init__(self, m: int, seeds: list[int], amount_bits: int, logarithm_base: float) -> None: ...