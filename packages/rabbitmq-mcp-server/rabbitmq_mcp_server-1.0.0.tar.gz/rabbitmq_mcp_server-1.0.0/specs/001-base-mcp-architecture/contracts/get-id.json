{
  "name": "get-id",
  "description": "Retrieve detailed schema, documentation, and usage examples for a specific RabbitMQ operation. Returns complete operation details including parameter requirements, response format, and examples.",
  "inputSchema": {
    "type": "object",
    "properties": {
      "endpoint_id": {
        "type": "string",
        "description": "Operation identifier obtained from search-ids results (format: {namespace}.{name})",
        "pattern": "^[a-z-]+\\.[a-z-]+$",
        "examples": ["queues.list", "exchanges.create", "bindings.delete"]
      }
    },
    "required": ["endpoint_id"],
    "additionalProperties": false
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "operation_id": {
        "type": "string",
        "description": "Unique operation identifier",
        "pattern": "^[a-z-]+\\.[a-z-]+$"
      },
      "name": {
        "type": "string",
        "description": "Human-readable operation name"
      },
      "description": {
        "type": "string",
        "description": "Detailed operation description"
      },
      "namespace": {
        "type": "string",
        "description": "Operation namespace/category"
      },
      "request_schema": {
        "type": "object",
        "description": "JSON Schema for request parameters",
        "properties": {
          "type": {"type": "string"},
          "properties": {"type": "object"},
          "required": {
            "type": "array",
            "items": {"type": "string"}
          },
          "additionalProperties": {"type": "boolean"}
        }
      },
      "response_schema": {
        "type": "object",
        "description": "JSON Schema for response data",
        "properties": {
          "type": {"type": "string"},
          "properties": {"type": "object"},
          "items": {"type": "object"}
        }
      },
      "examples": {
        "type": "array",
        "description": "Usage examples with input/output pairs",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Example name"
            },
            "description": {
              "type": "string",
              "description": "What this example demonstrates"
            },
            "input": {
              "type": "object",
              "description": "Example input parameters"
            },
            "output": {
              "description": "Example output result"
            }
          },
          "required": ["name", "input", "output"]
        }
      },
      "deprecated": {
        "type": "boolean",
        "description": "Whether this operation is deprecated"
      },
      "deprecation_message": {
        "type": "string",
        "description": "Deprecation notice and migration guidance (if deprecated)"
      },
      "requires_auth": {
        "type": "boolean",
        "description": "Whether this operation requires RabbitMQ authentication"
      },
      "timeout_seconds": {
        "type": "integer",
        "description": "Maximum execution timeout in seconds",
        "minimum": 1,
        "maximum": 30
      },
      "supports_pagination": {
        "type": "boolean",
        "description": "Whether this operation supports pagination parameters"
      },
      "error_scenarios": {
        "type": "array",
        "description": "Common error scenarios and how to handle them",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "Error code"
            },
            "condition": {
              "type": "string",
              "description": "When this error occurs"
            },
            "resolution": {
              "type": "string",
              "description": "How to resolve this error"
            }
          }
        }
      }
    },
    "required": [
      "operation_id",
      "name",
      "description",
      "namespace",
      "request_schema",
      "response_schema",
      "deprecated",
      "requires_auth",
      "timeout_seconds",
      "supports_pagination"
    ],
    "additionalProperties": false
  },
  "examples": [
    {
      "input": {
        "endpoint_id": "queues.list"
      },
      "output": {
        "operation_id": "queues.list",
        "name": "List Queues",
        "description": "List all queues in a virtual host with optional filtering. Returns queue details including message counts, consumers, and configuration.",
        "namespace": "queues",
        "request_schema": {
          "type": "object",
          "properties": {
            "vhost": {
              "type": "string",
              "description": "Virtual host name",
              "default": "/"
            },
            "page": {
              "type": "integer",
              "description": "Page number for pagination",
              "minimum": 1,
              "default": 1
            },
            "pageSize": {
              "type": "integer",
              "description": "Items per page",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          },
          "required": ["vhost"],
          "additionalProperties": false
        },
        "response_schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "vhost": {"type": "string"},
              "durable": {"type": "boolean"},
              "messages": {"type": "integer"},
              "consumers": {"type": "integer"}
            }
          }
        },
        "examples": [
          {
            "name": "List queues in default vhost",
            "description": "Get all queues in the default virtual host",
            "input": {
              "vhost": "/"
            },
            "output": [
              {
                "name": "my-queue",
                "vhost": "/",
                "durable": true,
                "messages": 42,
                "consumers": 2
              }
            ]
          }
        ],
        "deprecated": false,
        "requires_auth": true,
        "timeout_seconds": 30,
        "supports_pagination": true,
        "error_scenarios": [
          {
            "code": -32602,
            "condition": "vhost parameter is missing",
            "resolution": "Provide the 'vhost' parameter (e.g., '/' for default)"
          },
          {
            "code": -32000,
            "condition": "RabbitMQ is unreachable",
            "resolution": "Check RabbitMQ connection and credentials"
          }
        ]
      }
    },
    {
      "input": {
        "endpoint_id": "exchanges.create"
      },
      "output": {
        "operation_id": "exchanges.create",
        "name": "Create Exchange",
        "description": "Create a new exchange in a virtual host with specified type and properties.",
        "namespace": "exchanges",
        "request_schema": {
          "type": "object",
          "properties": {
            "vhost": {
              "type": "string",
              "description": "Virtual host name"
            },
            "name": {
              "type": "string",
              "description": "Exchange name"
            },
            "type": {
              "type": "string",
              "description": "Exchange type",
              "enum": ["direct", "fanout", "topic", "headers"]
            },
            "durable": {
              "type": "boolean",
              "description": "Whether exchange survives broker restart",
              "default": true
            },
            "auto_delete": {
              "type": "boolean",
              "description": "Whether exchange is deleted when last queue is unbound",
              "default": false
            }
          },
          "required": ["vhost", "name", "type"],
          "additionalProperties": false
        },
        "response_schema": {
          "type": "object",
          "properties": {
            "status": {"type": "string"},
            "message": {"type": "string"}
          }
        },
        "examples": [
          {
            "name": "Create direct exchange",
            "description": "Create a durable direct exchange",
            "input": {
              "vhost": "/",
              "name": "my-exchange",
              "type": "direct",
              "durable": true
            },
            "output": {
              "status": "success",
              "message": "Exchange created successfully"
            }
          }
        ],
        "deprecated": false,
        "requires_auth": true,
        "timeout_seconds": 30,
        "supports_pagination": false,
        "error_scenarios": [
          {
            "code": -32602,
            "condition": "Invalid exchange type",
            "resolution": "Use one of: direct, fanout, topic, headers"
          },
          {
            "code": -32603,
            "condition": "Exchange already exists",
            "resolution": "Choose a different name or delete the existing exchange"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": -32601,
      "message": "Method not found: operation 'invalid.operation' does not exist",
      "condition": "endpoint_id does not match any known operation"
    },
    {
      "code": -32602,
      "message": "Invalid params: endpoint_id must match pattern ^[a-z-]+\\.[a-z-]+$",
      "condition": "endpoint_id format is invalid"
    },
    {
      "code": -32603,
      "message": "Internal error: operation registry unavailable",
      "condition": "database connection failed"
    }
  ],
  "performance": {
    "targetLatency": "< 50ms",
    "maxLatency": "100ms",
    "cacheEnabled": true,
    "cacheTTL": "5 minutes"
  },
  "metadata": {
    "version": "1.0.0",
    "protocol": "MCP",
    "category": "semantic-discovery",
    "requiredCapabilities": ["operation-registry", "schema-validation"]
  }
}

