[project]
name = "rabbitmq-mcp-server"
version = "1.0.0"
description = "MCP server for RabbitMQ with semantic discovery (search-ids, get-id, call-id)"
authors = [
    {name = "Your Name", email = "you@example.com"}
]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["mcp", "rabbitmq", "model-context-protocol", "llm", "ai", "semantic-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications",
    "Topic :: System :: Monitoring",
]

dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "jsonschema>=4.20",
    "pyyaml>=6.0",
    "httpx>=0.27",
    "structlog>=24.1",
    "opentelemetry-api>=1.22",
    "opentelemetry-sdk>=1.22",
    "opentelemetry-instrumentation>=0.43b0",
    "slowapi>=0.1",
    "pika>=1.3",
]

[project.urls]
Homepage = "https://github.com/guercheLE/rabbitmq-mcp-server"
Repository = "https://github.com/guercheLE/rabbitmq-mcp-server"
Issues = "https://github.com/guercheLE/rabbitmq-mcp-server/issues"
Changelog = "https://github.com/guercheLE/rabbitmq-mcp-server/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "pytest-mock>=3.12",
    "testcontainers>=3.7",
    "datamodel-code-generator>=0.25",
    "black>=24.1",
    "ruff>=0.2",
    "mypy>=1.8",
    "python-semantic-release>=9.0",
]

[project.scripts]
generate-schemas = "scripts.generate_schemas:main"
generate-embeddings = "scripts.generate_embeddings:main"
validate-openapi = "scripts.validate_openapi:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_server"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/mcp_server/__init__.py:__version__"]
branch = "main"
upload_to_vcs_release = true
upload_to_pypi = true
build_command = "uv build"
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore", "revert"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = []

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
