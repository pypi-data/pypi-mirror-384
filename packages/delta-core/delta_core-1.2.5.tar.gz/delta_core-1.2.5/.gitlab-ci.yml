stages:
  - validate
  - test
  - sonarqube-check
  - deploy

pep8_check_style:
  tags:
    - delta-docker
  image: python:3.11
  stage: validate
  before_script:
    - pip install -r requirements.txt -r requirements-dev.txt
  script:
    - pycodestyle --show-source --show-pep8  --exclude=delta/alembic/*  .

check_dependency_licenses:
  tags:
    - delta-docker
  image: python:3.11
  stage: validate
  before_script:
    - pip install --extra-index-url https://${TWINE_USERNAME}:${TWINE_PASSWORD}@repository.gael-systems.com/repository/python-gael/simple -r requirements.txt -r requirements-dev.txt
  script:
    - licensecheck --show-only-failing

unit_tests_3.11:
  tags:
    - delta-docker
  image: python:3.11
  stage: test
  before_script:
    - pip install --extra-index-url https://${TWINE_USERNAME}:${TWINE_PASSWORD}@repository.gael-systems.com/repository/python-gael/simple -r requirements.txt -r requirements-dev.txt
    - python -m build
  script:
    - coverage run
    - coverage xml -o coverage.xml
    - coverage report
    - coverage-badge
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 day

# Check with Python linter and code formatter https://docs.astral.sh/ruff/
ruff_check:
  tags:
    - delta-docker
  image: python:3.11
  stage: validate
  before_script:
    - pip install --extra-index-url https://${TWINE_USERNAME}:${TWINE_PASSWORD}@repository.gael-systems.com/repository/python-gael/simple -r requirements.txt -r requirements-dev.txt
    - pip install ruff
  script:
    - ruff check --output-format gitlab > ruff-code-quality-report.json
  artifacts:
    name: "${CI_PROJECT_NAME}_code_quality"
    when: always
    reports:
      codequality: ruff-code-quality-report.json
    expire_in: 1 day

#Check the code and anlyse it with Sonar
sonarqube-check:
  tags:
    - delta-docker
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

release:
  tags:
    - delta-docker
  image: python:3.11
  stage: deploy
  before_script:
    - pip install -r requirements-dev.txt
    - pip install --extra-index-url https://${TWINE_USERNAME}:${TWINE_PASSWORD}@repository.gael-systems.com/repository/python-gael/simple -r requirements.txt
    - BUILD_VERSION=$CI_COMMIT_TAG python -m build
  script:
    - pip install dist/delta_core-$CI_COMMIT_TAG.tar.gz
    - python -m twine upload dist/*
  only:
    - tags
