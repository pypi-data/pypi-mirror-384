"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['init_console_logging', 'init_configuration']

# %% ../nbs/00_core.ipynb 3
import os
import logging
import configparser

# %% ../nbs/00_core.ipynb 4
def init_console_logging(name, level=logging.INFO, timestamp=True, formatstring=""):
    '''Setup none-blocking stream handler for sending loggin to the console.'''

    # Only if no handlers defined.
    if not logging.getLogger(name).handlers:

        logger = logging.getLogger()
        logger.setLevel(level)

        console = logging.StreamHandler()
        console.setLevel(level)

        if formatstring:
            formatter = logging.Formatter(formatstring, datefmt='%Y-%m-%dT%H:%M:%S%z')
        else:
            if timestamp:
                formatter = logging.Formatter("%(asctime)s %(levelname)s\t%(process)d\t%(name)s\t%(filename)s\t%(lineno)d\t%(message)s", datefmt='%Y-%m-%dT%H:%M:%S%z')
            else:
                formatter = logging.Formatter("%(levelname)s\t%(process)d\t%(name)s\t%(filename)s\t%(lineno)d\t%(message)s")
            
        # tell the handler to use this format
        console.setFormatter(formatter)

        # add the handler to the root logger
        logger.addHandler(console)
        return logger
    else:
        #logging.getLogger(name).info(f'There already is a logger installed for {name}.')
        return logging.getLogger(name)



# %% ../nbs/00_core.ipynb 5
syslog = init_console_logging(f"root.{__name__}")


# %% ../nbs/00_core.ipynb 7
def get_config_path(appname, *subpaths):
    basepath =os.getenv('APPDATA', os.getenv('HOME', os.getenv('USERPROFILE', os.getcwd())))
    config_path = os.path.join(basepath, '.config' ,f'{appname}', *subpaths)
    os.makedirs(config_path, exist_ok=True)
    return config_path

def get_log_path(appname, *subpaths):
    log_path = os.path.join(get_config_path(appname, *subpaths), 'logs')
    os.makedirs(log_path, exist_ok=True)
    return log_path

# %% ../nbs/00_core.ipynb 9
def init_configuration(
        configuration_path,
        configuration_file = 'config.ini'
    ):
    
    """
        Opens the specified configuration file (.ini) and 
        returns a proxy-object that saves on modify.
    """

    if not hasattr(init_configuration, 'configurations'):
        init_configuration.configurations = {}

    config_file = os.path.abspath(os.path.join(configuration_path, configuration_file))
    syslog.info(f"init configuration for {config_file}")

    if config_file in init_configuration.configurations:
        return init_configuration.configurations[config_file]

    config_parser = configparser.ConfigParser()
    
    def update_config():
        syslog.info(f"updating configuration for {config_file}")
        with open(config_file, 'w' if os.path.exists(config_file) else 'x') as f:
            config_parser.write(f)

    class _config_section_proxy():
        def __init__(self, section_key):
            syslog.info(f"init configuration for {config_file}, section {section_key}")
            if not config_parser.has_section(section_key):
                config_parser.add_section(section_key)
                
            self.section_key = section_key

        def __getitem__(self, key):
            return config_parser.__getitem__(self.section_key).__getitem__(key)

        def __setitem__(self, key, value):
            config_parser.__getitem__(self.section_key).__setitem__(key, str(value))
            update_config()

        def __delitem__(self, key):
            config_parser.__getitem__(self.section_key).__delitem__(key)
            update_config()

        def __contains__(self, key):
            return config_parser.__getitem__(self.section_key).__contains__(key)

        def __repr__(self):
            return config_parser.__getitem__(self.section_key).__repr__()

    class _config_proxy():
        def __init__(self, config_file):
            syslog.info(f"init configuration for {config_file}")
            config_parser.read(config_file, encoding='utf-8')

        def __getitem__(self, key):
            return _config_section_proxy(key)

        def __setitem__(self, key, value):
            config_parser.__setitem__(key, value)
            update_config()

        def __delitem__(self, key):
            config_parser.__delitem__(key)
            update_config()

        def __contains__(self, key):
            return config_parser.__contains__(key)

        def __repr__(self):
            return f"Configuration proxy for {config_file} using {config_parser.__repr__()}"
    
    init_configuration.configurations[config_file] = _config_proxy(config_file)

    return init_configuration.configurations[config_file]

