name: CI / pytest + codecov

# CI workflow: pytest with coverage and optional Codecov upload.
# Triggers: push and pull_request on the listed branches.
# Edit the `branches` list below to change which branches trigger the workflow.
on:
  push:
    # Run on all branches so branch-specific badges (CI/Codecov) stay up to date
    branches: ["**"]
  pull_request:
    # Run for PRs targeting any branch
    branches: ["**"]

jobs:
  pytest-codecov:
    # Short timeout to keep CI responsive; increase if your test-suite needs more time.
    timeout-minutes: 20
    runs-on: ubuntu-latest

    # Matrix: change python versions here (add/remove 3.12 as needed).
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    # Environment defaults for test runs: do NOT run examples by default.
    env:
      PYPARTICLE_RUN_EXAMPLES: "0"   # examples are gated off by default in CI
      PYPARTICLE_TEST_MODE: "1"      # hint to code/examples that tests are running

    steps:
      # 1) Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # fetch full history so coverage/other steps that rely on tags/refs work properly
          fetch-depth: 0

      # 2) Set up Python from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3) Cache pip cache to speed up installs (keyed by python-version and dependency files)
      - name: Cache pip
        uses: actions/cache@v4
        with:
          # Cache location for pip wheel/cache (platform-dependent)
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # 4) Install dependencies and package (editable)
      - name: Install dependencies
        # Keep this step simple and offline-friendly; guard requirements.txt usage.
        run: |
          python -m pip install --upgrade pip
          # editable install of the package so tests import the checked-out code
          pip install -e .
          # If a requirements.txt exists, install it (guarded so workflow is robust)
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Ensure test tooling is available
          pip install pytest pytest-cov codecov
        # Do not print tokens or secrets here.

      # 5) Run pytest with coverage
      - name: Run pytest with coverage
        # Keep output concise; fail quickly on first test failure to save CI minutes.
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml
        # If you want to change the coverage target, edit --cov-fail-under above.

      # 6) Upload coverage.xml as an artifact (preserve results even if Codecov upload skipped)
      - name: Upload coverage.xml artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml

      # 7) Upload to Codecov (optional token). Do NOT echo secrets.
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # CODECOV_TOKEN is optional for public repos. Add it to repository secrets for private repos.
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: unittests
          slug: lfierce2/PyParticle
          # Do not fail the workflow if Codecov upload fails (keeps CI robust if token is missing)
          fail_ci_if_error: false
          verbose: true

# Notes for reviewers / maintainers (in-file guidance):
#
# - To change Python versions, edit `matrix.python-version`.
# - To change coverage threshold, modify `--cov-fail-under=80` in the pytest step.
# - To change branches that trigger CI, edit the `on.push.branches` and `on.pull_request.branches` lists.
# - `PYPARTICLE_RUN_EXAMPLES` is set to "0" so examples are not run by default in CI. If you'd like a
#   separate job to run examples in a gated fashion, create a separate workflow or job and set
#   `PYPARTICLE_RUN_EXAMPLES=1` there (and ensure examples are fast/testable).
# - CODECOV_TOKEN: add as a repository secret if you want Codecov uploads for a private repository.
#   For public repos Codecov often accepts unauthenticated uploads, but setting the secret is recommended.
# - Security: the workflow never prints secrets and avoids running untrusted code. Do not add steps that
#   echo `${{ secrets.* }}`.
#
# Optional enhancements:
# - Upload an HTML coverage report alongside the XML (generate with `coverage html` then upload).
# - Add a nightly job that runs examples with `PYPARTICLE_RUN_EXAMPLES=1` after ensuring examples support
#   a fast/test mode (set `PYPARTICLE_FAST=1`).
# - If you have heavy dependencies, consider creating a conda-based job or pre-built wheel caching.
