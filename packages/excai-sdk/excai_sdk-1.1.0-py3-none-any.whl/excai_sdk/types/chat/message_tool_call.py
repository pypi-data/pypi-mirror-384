# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Union
from typing_extensions import Literal, Annotated, TypeAlias

from ..._utils import PropertyInfo
from ..._models import BaseModel

__all__ = ["ChatCompletionMessageToolCallUnion", "Function", "FunctionFunction", "Custom", "CustomCustom"]


class FunctionFunction(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class Function(BaseModel):
    id: str
    """The ID of the tool call."""

    function: FunctionFunction
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class CustomCustom(BaseModel):
    input: str
    """The input for the custom tool call generated by the model."""

    name: str
    """The name of the custom tool to call."""


class Custom(BaseModel):
    id: str
    """The ID of the tool call."""

    custom: CustomCustom
    """The custom tool that the model called."""

    type: Literal["custom"]
    """The type of the tool. Always `custom`."""


ChatCompletionMessageToolCallUnion: TypeAlias = Annotated[Union[Function, Custom], PropertyInfo(discriminator="type")]
