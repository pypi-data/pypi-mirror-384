# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable, Optional
from typing_extensions import Literal, Required, TypeAlias, TypedDict

from ..chat.metadata_param import MetadataParam
from .assistant_tools_code_param import AssistantToolsCodeParam
from .message_content_image_url_param import MessageContentImageURLParam
from .message_content_image_file_param import MessageContentImageFileParam
from .assistant_tools_file_search_type_only_param import AssistantToolsFileSearchTypeOnlyParam

__all__ = [
    "MessageCreateParams",
    "ContentArrayOfContentPart",
    "ContentArrayOfContentPartText",
    "Attachment",
    "AttachmentTool",
]


class MessageCreateParams(TypedDict, total=False):
    content: Required[Union[str, Iterable[ContentArrayOfContentPart]]]
    """The text contents of the message."""

    role: Required[Literal["user", "assistant"]]
    """The role of the entity that is creating the message. Allowed values include:

    - `user`: Indicates the message is sent by an actual user and should be used in
      most cases to represent user-generated messages.
    - `assistant`: Indicates the message is generated by the assistant. Use this
      value to insert messages from the assistant into the conversation.
    """

    attachments: Optional[Iterable[Attachment]]
    """A list of files attached to the message, and the tools they should be added to."""

    metadata: Optional[MetadataParam]
    """Set of 16 key-value pairs that can be attached to an object.

    This can be useful for storing additional information about the object in a
    structured format, and querying for objects via API or the dashboard.

    Keys are strings with a maximum length of 64 characters. Values are strings with
    a maximum length of 512 characters.
    """


class ContentArrayOfContentPartText(TypedDict, total=False):
    text: Required[str]
    """Text content to be sent to the model"""

    type: Required[Literal["text"]]
    """Always `text`."""


ContentArrayOfContentPart: TypeAlias = Union[
    MessageContentImageFileParam, MessageContentImageURLParam, ContentArrayOfContentPartText
]

AttachmentTool: TypeAlias = Union[AssistantToolsCodeParam, AssistantToolsFileSearchTypeOnlyParam]


class Attachment(TypedDict, total=False):
    file_id: str
    """The ID of the file to attach to the message."""

    tools: Iterable[AttachmentTool]
    """The tools to add this file to."""
