# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import Controller_V1_pb2 as Controller__V1__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in Controller_V1_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ControllerAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSession = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/StartSession',
                request_serializer=Controller__V1__pb2.Request_StartSession.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_StartSession.FromString,
                _registered_method=True)
        self.EndSession = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/EndSession',
                request_serializer=Controller__V1__pb2.Request_EndSession.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.Send = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/Send',
                request_serializer=Controller__V1__pb2.Request_Send.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Send.FromString,
                _registered_method=True)
        self.Poll = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/Poll',
                request_serializer=Controller__V1__pb2.Request_Poll.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Poll.FromString,
                _registered_method=True)
        self.StartExecution = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/StartExecution',
                request_serializer=Controller__V1__pb2.Request_StartExecution.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.StopExecution = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/StopExecution',
                request_serializer=Controller__V1__pb2.Request_StopExecution.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.RunRecordedAction = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/RunRecordedAction',
                request_serializer=Controller__V1__pb2.Request_RunRecordedAction.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_RunRecordedAction.FromString,
                _registered_method=True)
        self.ScheduleBatchedAction = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/ScheduleBatchedAction',
                request_serializer=Controller__V1__pb2.Request_ScheduleBatchedAction.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_ScheduleBatchedAction.FromString,
                _registered_method=True)
        self.StartBatchRun = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/StartBatchRun',
                request_serializer=Controller__V1__pb2.Request_StartBatchRun.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.StopBatchRun = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/StopBatchRun',
                request_serializer=Controller__V1__pb2.Request_StopBatchRun.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.GetActionCount = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetActionCount',
                request_serializer=Controller__V1__pb2.Request_GetActionCount.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetActionCount.FromString,
                _registered_method=True)
        self.GetAction = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetAction',
                request_serializer=Controller__V1__pb2.Request_GetAction.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetAction.FromString,
                _registered_method=True)
        self.RemoveAction = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/RemoveAction',
                request_serializer=Controller__V1__pb2.Request_RemoveAction.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.RemoveAllActions = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/RemoveAllActions',
                request_serializer=Controller__V1__pb2.Request_RemoveAllActions.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.CaptureScreen = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/CaptureScreen',
                request_serializer=Controller__V1__pb2.Request_CaptureScreen.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_CaptureScreen.FromString,
                _registered_method=True)
        self.SetTestConfiguration = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetTestConfiguration',
                request_serializer=Controller__V1__pb2.Reuqest_SetTestConfiguration.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.SetMouseDelay = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetMouseDelay',
                request_serializer=Controller__V1__pb2.Request_SetMouseDelay.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.SetKeyboardDelay = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetKeyboardDelay',
                request_serializer=Controller__V1__pb2.Request_SetKeyboardDelay.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.GetDisplayInformation = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetDisplayInformation',
                request_serializer=Controller__V1__pb2.Request_Void.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetDisplayInformation.FromString,
                _registered_method=True)
        self.GetMousePosition = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetMousePosition',
                request_serializer=Controller__V1__pb2.Request_Void.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetMousePosition.FromString,
                _registered_method=True)
        self.GetProcessList = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetProcessList',
                request_serializer=Controller__V1__pb2.Request_GetProcessList.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetProcessList.FromString,
                _registered_method=True)
        self.GetWindowList = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetWindowList',
                request_serializer=Controller__V1__pb2.Request_GetWindowList.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetWindowList.FromString,
                _registered_method=True)
        self.GetAutomationTargetList = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetAutomationTargetList',
                request_serializer=Controller__V1__pb2.Request_Void.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetAutomationTargetList.FromString,
                _registered_method=True)
        self.SetActiveDisplay = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetActiveDisplay',
                request_serializer=Controller__V1__pb2.Request_SetActiveDisplay.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.SetActiveWindow = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetActiveWindow',
                request_serializer=Controller__V1__pb2.Request_SetActiveWindow.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.SetActiveAutomationTarget = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetActiveAutomationTarget',
                request_serializer=Controller__V1__pb2.Request_SetActiveAutomationTarget.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)
        self.GetColor = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetColor',
                request_serializer=Controller__V1__pb2.Request_GetColor.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetColor.FromString,
                _registered_method=True)
        self.GetPixelColor = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/GetPixelColor',
                request_serializer=Controller__V1__pb2.Request_GetPixelColor.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_GetPixelColor.FromString,
                _registered_method=True)
        self.SetDisplayLabel = channel.unary_unary(
                '/Askui.API.TDKv1.ControllerAPI/SetDisplayLabel',
                request_serializer=Controller__V1__pb2.Request_SetDisplayLabel.SerializeToString,
                response_deserializer=Controller__V1__pb2.Response_Void.FromString,
                _registered_method=True)


class ControllerAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartSession(self, request, context):
        """General
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Poll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRecordedAction(self, request, context):
        """Run action and record it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleBatchedAction(self, request, context):
        """Schedule an action
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBatchRun(self, request, context):
        """Start and stop batched execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBatchRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActionCount(self, request, context):
        """Recorded or batched actions access
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAction(self, request, context):
        """Modify actions batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAllActions(self, request, context):
        """Clear all batched or recorded actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CaptureScreen(self, request, context):
        """Capturing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTestConfiguration(self, request, context):
        """Configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMouseDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKeyboardDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDisplayInformation(self, request, context):
        """Device Information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMousePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcessList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAutomationTargetList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveDisplay(self, request, context):
        """Device Configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveWindow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveAutomationTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetColor(self, request, context):
        """Deprecated Utilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPixelColor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDisplayLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSession,
                    request_deserializer=Controller__V1__pb2.Request_StartSession.FromString,
                    response_serializer=Controller__V1__pb2.Response_StartSession.SerializeToString,
            ),
            'EndSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndSession,
                    request_deserializer=Controller__V1__pb2.Request_EndSession.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=Controller__V1__pb2.Request_Send.FromString,
                    response_serializer=Controller__V1__pb2.Response_Send.SerializeToString,
            ),
            'Poll': grpc.unary_unary_rpc_method_handler(
                    servicer.Poll,
                    request_deserializer=Controller__V1__pb2.Request_Poll.FromString,
                    response_serializer=Controller__V1__pb2.Response_Poll.SerializeToString,
            ),
            'StartExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExecution,
                    request_deserializer=Controller__V1__pb2.Request_StartExecution.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'StopExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExecution,
                    request_deserializer=Controller__V1__pb2.Request_StopExecution.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'RunRecordedAction': grpc.unary_unary_rpc_method_handler(
                    servicer.RunRecordedAction,
                    request_deserializer=Controller__V1__pb2.Request_RunRecordedAction.FromString,
                    response_serializer=Controller__V1__pb2.Response_RunRecordedAction.SerializeToString,
            ),
            'ScheduleBatchedAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleBatchedAction,
                    request_deserializer=Controller__V1__pb2.Request_ScheduleBatchedAction.FromString,
                    response_serializer=Controller__V1__pb2.Response_ScheduleBatchedAction.SerializeToString,
            ),
            'StartBatchRun': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBatchRun,
                    request_deserializer=Controller__V1__pb2.Request_StartBatchRun.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'StopBatchRun': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBatchRun,
                    request_deserializer=Controller__V1__pb2.Request_StopBatchRun.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'GetActionCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActionCount,
                    request_deserializer=Controller__V1__pb2.Request_GetActionCount.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetActionCount.SerializeToString,
            ),
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=Controller__V1__pb2.Request_GetAction.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetAction.SerializeToString,
            ),
            'RemoveAction': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAction,
                    request_deserializer=Controller__V1__pb2.Request_RemoveAction.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'RemoveAllActions': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAllActions,
                    request_deserializer=Controller__V1__pb2.Request_RemoveAllActions.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'CaptureScreen': grpc.unary_unary_rpc_method_handler(
                    servicer.CaptureScreen,
                    request_deserializer=Controller__V1__pb2.Request_CaptureScreen.FromString,
                    response_serializer=Controller__V1__pb2.Response_CaptureScreen.SerializeToString,
            ),
            'SetTestConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTestConfiguration,
                    request_deserializer=Controller__V1__pb2.Reuqest_SetTestConfiguration.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'SetMouseDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMouseDelay,
                    request_deserializer=Controller__V1__pb2.Request_SetMouseDelay.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'SetKeyboardDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKeyboardDelay,
                    request_deserializer=Controller__V1__pb2.Request_SetKeyboardDelay.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'GetDisplayInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDisplayInformation,
                    request_deserializer=Controller__V1__pb2.Request_Void.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetDisplayInformation.SerializeToString,
            ),
            'GetMousePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMousePosition,
                    request_deserializer=Controller__V1__pb2.Request_Void.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetMousePosition.SerializeToString,
            ),
            'GetProcessList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcessList,
                    request_deserializer=Controller__V1__pb2.Request_GetProcessList.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetProcessList.SerializeToString,
            ),
            'GetWindowList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowList,
                    request_deserializer=Controller__V1__pb2.Request_GetWindowList.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetWindowList.SerializeToString,
            ),
            'GetAutomationTargetList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAutomationTargetList,
                    request_deserializer=Controller__V1__pb2.Request_Void.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetAutomationTargetList.SerializeToString,
            ),
            'SetActiveDisplay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveDisplay,
                    request_deserializer=Controller__V1__pb2.Request_SetActiveDisplay.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'SetActiveWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveWindow,
                    request_deserializer=Controller__V1__pb2.Request_SetActiveWindow.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'SetActiveAutomationTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveAutomationTarget,
                    request_deserializer=Controller__V1__pb2.Request_SetActiveAutomationTarget.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
            'GetColor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetColor,
                    request_deserializer=Controller__V1__pb2.Request_GetColor.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetColor.SerializeToString,
            ),
            'GetPixelColor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPixelColor,
                    request_deserializer=Controller__V1__pb2.Request_GetPixelColor.FromString,
                    response_serializer=Controller__V1__pb2.Response_GetPixelColor.SerializeToString,
            ),
            'SetDisplayLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDisplayLabel,
                    request_deserializer=Controller__V1__pb2.Request_SetDisplayLabel.FromString,
                    response_serializer=Controller__V1__pb2.Response_Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Askui.API.TDKv1.ControllerAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Askui.API.TDKv1.ControllerAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControllerAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/StartSession',
            Controller__V1__pb2.Request_StartSession.SerializeToString,
            Controller__V1__pb2.Response_StartSession.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/EndSession',
            Controller__V1__pb2.Request_EndSession.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/Send',
            Controller__V1__pb2.Request_Send.SerializeToString,
            Controller__V1__pb2.Response_Send.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Poll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/Poll',
            Controller__V1__pb2.Request_Poll.SerializeToString,
            Controller__V1__pb2.Response_Poll.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/StartExecution',
            Controller__V1__pb2.Request_StartExecution.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/StopExecution',
            Controller__V1__pb2.Request_StopExecution.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunRecordedAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/RunRecordedAction',
            Controller__V1__pb2.Request_RunRecordedAction.SerializeToString,
            Controller__V1__pb2.Response_RunRecordedAction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleBatchedAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/ScheduleBatchedAction',
            Controller__V1__pb2.Request_ScheduleBatchedAction.SerializeToString,
            Controller__V1__pb2.Response_ScheduleBatchedAction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartBatchRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/StartBatchRun',
            Controller__V1__pb2.Request_StartBatchRun.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopBatchRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/StopBatchRun',
            Controller__V1__pb2.Request_StopBatchRun.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActionCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetActionCount',
            Controller__V1__pb2.Request_GetActionCount.SerializeToString,
            Controller__V1__pb2.Response_GetActionCount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetAction',
            Controller__V1__pb2.Request_GetAction.SerializeToString,
            Controller__V1__pb2.Response_GetAction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/RemoveAction',
            Controller__V1__pb2.Request_RemoveAction.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAllActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/RemoveAllActions',
            Controller__V1__pb2.Request_RemoveAllActions.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CaptureScreen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/CaptureScreen',
            Controller__V1__pb2.Request_CaptureScreen.SerializeToString,
            Controller__V1__pb2.Response_CaptureScreen.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTestConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetTestConfiguration',
            Controller__V1__pb2.Reuqest_SetTestConfiguration.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMouseDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetMouseDelay',
            Controller__V1__pb2.Request_SetMouseDelay.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetKeyboardDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetKeyboardDelay',
            Controller__V1__pb2.Request_SetKeyboardDelay.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDisplayInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetDisplayInformation',
            Controller__V1__pb2.Request_Void.SerializeToString,
            Controller__V1__pb2.Response_GetDisplayInformation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMousePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetMousePosition',
            Controller__V1__pb2.Request_Void.SerializeToString,
            Controller__V1__pb2.Response_GetMousePosition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProcessList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetProcessList',
            Controller__V1__pb2.Request_GetProcessList.SerializeToString,
            Controller__V1__pb2.Response_GetProcessList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetWindowList',
            Controller__V1__pb2.Request_GetWindowList.SerializeToString,
            Controller__V1__pb2.Response_GetWindowList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAutomationTargetList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetAutomationTargetList',
            Controller__V1__pb2.Request_Void.SerializeToString,
            Controller__V1__pb2.Response_GetAutomationTargetList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetActiveDisplay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetActiveDisplay',
            Controller__V1__pb2.Request_SetActiveDisplay.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetActiveWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetActiveWindow',
            Controller__V1__pb2.Request_SetActiveWindow.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetActiveAutomationTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetActiveAutomationTarget',
            Controller__V1__pb2.Request_SetActiveAutomationTarget.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetColor',
            Controller__V1__pb2.Request_GetColor.SerializeToString,
            Controller__V1__pb2.Response_GetColor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPixelColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/GetPixelColor',
            Controller__V1__pb2.Request_GetPixelColor.SerializeToString,
            Controller__V1__pb2.Response_GetPixelColor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDisplayLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Askui.API.TDKv1.ControllerAPI/SetDisplayLabel',
            Controller__V1__pb2.Request_SetDisplayLabel.SerializeToString,
            Controller__V1__pb2.Response_Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
