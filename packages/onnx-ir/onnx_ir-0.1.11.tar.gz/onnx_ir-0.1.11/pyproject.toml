[build-system]
requires = ["setuptools>=77"]
build-backend = "setuptools.build_meta"

[project]
name = "onnx-ir"
dynamic = ["version"]
description = "Efficient in-memory representation for ONNX"
authors = [
    {name = "ONNX Contributors", email = "onnx-technical-discuss@lists.lfaidata.foundation"},
]
readme = "README.md"
requires-python = ">=3.9"
license = "Apache-2.0"
license-files = ["LICEN[CS]E*"]
classifiers = [
  "Development Status :: 4 - Beta",
]
dependencies = ["numpy", "onnx>=1.16", "typing_extensions>=4.10", "ml_dtypes>=0.5.0"]

[project.urls]
Homepage = "https://onnx.ai/ir-py"
Issues = "https://github.com/onnx/ir-py/issues"
Repository = "https://github.com/onnx/ir-py"

[tool.setuptools.dynamic]
version = {attr = "onnx_ir.__version__"}

[tool.pytest.ini_options]
addopts = "--tb=short --color=yes"

[tool.mypy]
check_untyped_defs = true
disable_error_code = 'override,import-untyped'
disallow_any_generics = false
disallow_untyped_decorators = true
show_column_numbers = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = false

[tool.ruff]
line-length = 95
target-version = "py39"

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # modern numpy
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLOT", # flake8-slot
    "T10", # flake8-debugger
    "TID", # Disallow relative imports
    "TRY", # flake8-try-except-raise
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
# Select preview rules
preview = true
ignore = [
    "B9",  # Opinionated bugbear rules
    "C408", # Sometimes it is preferable when we construct kwargs
    "D1", # D1 is for missing docstrings, which is not yet enforced.
    "D401", # First line of docstring should be in imperative mood
    "E1", "E2", "E3", # Pycodestyle formatting rules that conflicts with the formatter
    "E501", # Line length. Not enforced because black will handle formatting
    "SIM103", # "Return the condition directly" obscures logic sometimes
    "N802", # Nxx: ONNX Script function sometimes use upper case for names.
    "N803",
    "N806",
    "N999", # Invalid module name
    "NPY002", # We may not always need a generator
    "PERF203", # try-except in loops sometimes necessary
    "PERF401", # List comprehension is not always readable
    "PYI041", # int | float is more clear
    "RUF022", # We don't need to sort __all__ for elements to be grouped
    "RUF031", # Parentheses for tuple in subscripts is more readable
    "RUF052", # Variables with `_` prefix may not be dummy variables in all cases
    "SIM102", # Collapible if statements are not always more readable
    "SIM108", # We don't always encourage ternary operators
    "SIM114", # Don't always combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
    "TRY003", # Messages can be constructed in the exception
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pathlib".msg = "Using pathlib can impact performance. Use os.path instead"
"onnx.helper".msg = "onnx helpers tend to be protobuf-y and slow. Consider using ir.tensor, ir.DataType and related methods instead"
"onnx.numpy_helper".msg = "onnx numpy helpers tend to be slow. Consider using ir.tensor, ir.DataType and related methods instead"
"onnx".msg = "Use onnx_ir methods and classes instead, or create an exception with `# noqa: TID251` if you need to use onnx directly"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["TID252"] # Allow relative imports in init files
"setup.py" = ["TID251"] # pathlib is allowed in supporting code
"**/*_test.py" = ["TID251"] # pathlib is allowed in tests
"tools/**/*.py" = ["TID251"] # OK to use in tools
"src/onnx_ir/testing.py" = ["TID251"] # OK to use in tools

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"
