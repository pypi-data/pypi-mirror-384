## Custom Docker Image Project - {{ projectname }}

Created project {{ projectname }} with custom {% if model %}model,{% endif %}{% if explainer %} explainer,{% endif %}{% if transformer %} transformer{% endif %}.

Project directory has been created. The sample files and references are generated in the project directory. 
>You can initialize new git repo inside the created project directory. This is the repository that should be added as repository in Deeploy, in order to deploy the model/explainer/transformer on the platform.

Two types of sub directories are created inside project directory: Docker Images and Deeploy Reference Folders.

**Docker Images** \
{% if model %}The directory containing the docker images for model is: {{ projectname }}_model/ \{% endif %}
{% if explainer %}The directory containing the docker images for explainer is: {{ projectname }}_explainer/ \{% endif %}
{% if transformer %}The directory containing the docker images for transformer is: {{ projectname }}_transformer/ {% endif %}

These are the folders where generated sample docker file and code is present. Each model/explainer/transformer has their own docker file. You can modify and build these docker images and push to a docker repository. 

Once the docker images have been pushed, you need to modify the reference of the model/explainer/transformer 
in their respective Deeploy Reference Folder. 
Eg. if you have pushed the Dockerfile for the model to repository 'my_repository' on dockerhub with username 'test', go to folder model/ and in the reference.json file insert 'my_repository' where it currently says \<docker repository\> and "test" where it currently says \<docker username\>. 
>We assume the tag is latest else you need to modify this in both reference.json and build script file.

> NOTE: All images will be build for `platform=linux/amd64`. 
For testing locally using a different platform (e.g. for apple silicon chips) temporarily remove the platform definition from the Dockerfiles. 

**Deeploy Reference Folders** \
These are the folders where Deeploy's required references are added. After you build and push the custom docker images then you need to modify the equivalent reference file pointing to you docker hub image.

The directories generated based on your initialization choices of in are: \
{% if model %} model/,{% endif %}{% if explainer %} explainer/,{% endif %}{% if transformer %} transformer/{% endif %}.

> NOTE: You always need a model or a model reference. Look up documentation for more information.

> NOTE (In case you have a non-custom model and/or explainer) : If the model/explainer artifact exists in blob storage then you need to create a different reference file (Look up documentation for more info). On the other hand, If you wish to use a local object without custom model/explainer, put the object file in the equivalent model or explainer reference folder instead of reference file.

> NOTE: The sample references generated are for public docker hub repository. Look up the documentation for using with private docker hub repositories.

**Defining individual files and utilizing the library** \
The generated code has instructions explaining how you can define your own custom docker image. We provide you with an example that implements an xgboost classification model trained on the Adult Census dataset, a custom shap explainer and a simple transformer.

## RUN Build Script
Once all steps have been completed, run: 
```
sh build.sh
```

The build file provided builds images and pushes to docker hub. Make sure the current directory for your CLI is inside {{ projectname }} directory.

## Overview of Workflow
1. Generate Sample Project using CLI
2. Initialize the generated project folder "{{ projectname }}" as git repo.
3. Create/Modify for your implementation of ModelWrapper/ExplainerWrapper/TransformerWrapper/
4. (Optional) In case you have your own model/explainer object place it in their respective directories.
5. Build and push the images to docker hub on your own or using script.
6. Update references of the docker images in respective ***reference.json*** files.
7. Update the metadata.json with feature information and sample input for your model.
8. Push your local changes to your github repository.
9. Add this github repository to Deeploy.
10. Create a new deployment using this added repository.
