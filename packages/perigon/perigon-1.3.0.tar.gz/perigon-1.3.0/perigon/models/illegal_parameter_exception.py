# coding: utf-8

"""
Perigon API

The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.

The version of the OpenAPI document: 1.0.0
Contact: data@perigon.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from perigon.models.auth_exception_cause import AuthExceptionCause
from perigon.models.auth_exception_cause_stack_trace_inner import (
    AuthExceptionCauseStackTraceInner,
)
from perigon.models.auth_exception_suppressed_inner import AuthExceptionSuppressedInner


class IllegalParameterException(BaseModel):
    """
    IllegalParameterException
    """  # noqa: E501

    cause: Optional[AuthExceptionCause] = None
    stack_trace: Optional[List[AuthExceptionCauseStackTraceInner]] = Field(
        default=None, alias="stackTrace"
    )
    message: Optional[StrictStr] = None
    suppressed: Optional[List[AuthExceptionSuppressedInner]] = None
    localized_message: Optional[StrictStr] = Field(
        default=None, alias="localizedMessage"
    )
    __properties: ClassVar[List[str]] = [
        "cause",
        "stackTrace",
        "message",
        "suppressed",
        "localizedMessage",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IllegalParameterException from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cause
        if self.cause:
            _dict["cause"] = self.cause.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stack_trace (list)
        _items = []
        if self.stack_trace:
            for _item_stack_trace in self.stack_trace:
                if _item_stack_trace:
                    _items.append(_item_stack_trace.to_dict())
            _dict["stackTrace"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suppressed (list)
        _items = []
        if self.suppressed:
            for _item_suppressed in self.suppressed:
                if _item_suppressed:
                    _items.append(_item_suppressed.to_dict())
            _dict["suppressed"] = _items
        # set to None if cause (nullable) is None
        # and model_fields_set contains the field
        if self.cause is None and "cause" in self.model_fields_set:
            _dict["cause"] = None

        # set to None if stack_trace (nullable) is None
        # and model_fields_set contains the field
        if self.stack_trace is None and "stack_trace" in self.model_fields_set:
            _dict["stackTrace"] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict["message"] = None

        # set to None if suppressed (nullable) is None
        # and model_fields_set contains the field
        if self.suppressed is None and "suppressed" in self.model_fields_set:
            _dict["suppressed"] = None

        # set to None if localized_message (nullable) is None
        # and model_fields_set contains the field
        if (
            self.localized_message is None
            and "localized_message" in self.model_fields_set
        ):
            _dict["localizedMessage"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IllegalParameterException from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "cause": (
                    AuthExceptionCause.from_dict(obj["cause"])
                    if obj.get("cause") is not None
                    else None
                ),
                "stackTrace": (
                    [
                        AuthExceptionCauseStackTraceInner.from_dict(_item)
                        for _item in obj["stackTrace"]
                    ]
                    if obj.get("stackTrace") is not None
                    else None
                ),
                "message": obj.get("message"),
                "suppressed": (
                    [
                        AuthExceptionSuppressedInner.from_dict(_item)
                        for _item in obj["suppressed"]
                    ]
                    if obj.get("suppressed") is not None
                    else None
                ),
                "localizedMessage": obj.get("localizedMessage"),
            }
        )
        return _obj
