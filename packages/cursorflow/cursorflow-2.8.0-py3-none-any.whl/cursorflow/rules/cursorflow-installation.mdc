---
title: CursorFlow Installation & Setup Guide for Cursor
description: How to install and configure CursorFlow for complete page intelligence in AI-driven development
alwaysApply: true
---

# CursorFlow Installation & Setup Guide for Cursor

## ‚ö†Ô∏è **CRITICAL: Two-Step Installation Process**

**If you are reading this file, Step 2 is already complete for this project.**

CursorFlow requires **TWO installations**:

1. **Step 1 - Package Installation** (once per Python environment):
   ```bash
   pip install cursorflow
   playwright install chromium
   ```

2. **Step 2 - Project Initialization** (once per project):
   ```bash
   cursorflow install-rules
   ```
   This step created THIS FILE you're reading right now.

**If Cursor reports "command not found: cursorflow"**, the user needs Step 1.  
**If you can run cursorflow but tests fail**, check `.cursorflow/config.json` configuration.

## üöÄ **When to Install CursorFlow**

### **Automatically Install When:**
- User mentions UI testing, visual debugging, or layout issues
- User asks to "test this component" or "check if this works"
- User is working on CSS/layout modifications
- User reports frontend bugs or authentication issues
- New project setup where comprehensive UI analysis would be valuable

### **Project Types That Benefit:**
- Web applications (React, Vue, Angular, PHP, Django, Rails)
- Component libraries and design systems
- E-commerce sites with complex user flows
- Admin dashboards and data visualization
- Any project with user authentication
- Development projects using Vite, Webpack, Next.js, Parcel, Laravel Mix

## üì¶ **Installation Steps**

### **1. Verify Package Installation:**
```bash
# Check if CursorFlow is installed
cursorflow --version

# If not installed or outdated:
pip install --upgrade cursorflow

# Install browser automation dependencies
playwright install chromium

# Verify installation and check v2.0.0 features
cursorflow --version
```

### **2. Initialize Project:**
```bash
# Initialize CursorFlow in the project (creates config + installs Cursor rules)
cursorflow init .

# This automatically:
# - Creates cursor-test-config.json with smart defaults
# - Sets up .cursorflow/ directory structure  
# - Configures for your web technology stack
# - Installs Cursor AI rules for autonomous operation
```

### **3. Verify v2.0.0 Installation:**
```bash
# Test comprehensive data capture
cursorflow test --base-url http://localhost:3000 --path "/"

# Check configuration
cat cursor-test-config.json

# Verify artifacts directory structure
ls -la .cursorflow/artifacts/
ls -la .cursorflow/artifacts/diagnostics/
ls -la .cursorflow/artifacts/traces/
```

## ‚öôÔ∏è **Auto-Generated Configuration**

CursorFlow creates smart defaults based on your project:

```json
{
  "environments": {
    "local": {
      "base_url": "http://localhost:3000",
      "logs": "local",
      "log_paths": {
        "app": "logs/app.log"
      }
    },
    "staging": {
      "base_url": "https://staging.example.com",
      "logs": "ssh",
      "ssh_config": {
        "hostname": "staging-server",
        "username": "deploy"
      },
      "log_paths": {
        "app_error": "/var/log/app/error.log"
      }
    }
  }
}
```

## üéØ **CursorFlow 2.0.0 Quick Start Examples**

### **Test UI Component with Complete Intelligence:**
```bash
# Test any UI component with comprehensive data capture
cursorflow test --base-url http://localhost:3000 --path "/dashboard"

# Results include:
# - üî• Hot Reload Intelligence (framework auto-detection)
# - üß† Advanced Element Intelligence (7 selector strategies)
# - üìä Comprehensive Page Analysis (fonts, animations, resources, storage)
# - üéØ Enhanced Error Context (smart screenshot deduplication)
# - ‚ö° Enhanced Browser Data (Playwright traces, network intelligence)
```

### **Debug Authentication with Rich Context:**
```bash
# Test login flow with comprehensive error context
cursorflow test \
  --base-url http://localhost:3000 \
  --actions '[
    {"navigate": "/login"},
    {"fill": {"selector": "#username", "value": "test@example.com"}},
    {"fill": {"selector": "#password", "value": "testpass"}},
    {"click": "#login-button"},
    {"wait_for": ".dashboard, .error-message"},
    {"screenshot": "login-result"}
  ]'

# Analyze comprehensive output for:
# - Authentication errors with full context
# - Network request/response details
# - Console error correlation
# - Element interaction intelligence
```

### **CSS Development with HMR Intelligence:**
```bash
# Before: Test current state with framework detection
cursorflow test --base-url http://localhost:3000 --path "/component"

# Apply CSS changes to actual files
# CursorFlow automatically detects your framework (Vite, Webpack, Next.js, etc.)

# After: Test improved state with HMR correlation
cursorflow test --base-url http://localhost:3000 --path "/component"

# Compare comprehensive data:
# - Screenshots in .cursorflow/artifacts/screenshots/
# - HMR event correlation in results JSON
# - Performance impact analysis
# - Element intelligence changes
```

## üåç **Environment-Specific Setup**

### **Local Development:**
```json
{
  "local": {
    "base_url": "http://localhost:3000",
    "logs": "local",
    "log_paths": {"app": "logs/app.log"}
  }
}
```

### **Staging/Production Testing:**
```json
{
  "staging": {
    "base_url": "https://staging.example.com", 
    "logs": "ssh",
    "ssh_config": {
      "hostname": "staging-server",
      "username": "deploy",
      "key_file": "~/.ssh/staging_key"
    },
    "log_paths": {
      "app_error": "/var/log/app/error.log",
      "access_log": "/var/log/nginx/access.log"
    }
  }
}
```

## üìã **Verification Steps**

### **Test CLI Installation:**
```bash
# Check version
cursorflow --version

# View available commands
cursorflow --help

# Test project initialization
cursorflow init test-project

# Verify config creation
cat test-project/cursor-test-config.json
```

### **Test Component Testing:**
```bash
# Test any component (requires running dev server)
cursorflow test component-name --base-url http://localhost:3000

# Check artifacts were created
ls -la .cursorflow/artifacts/sessions/

# Verify JSON output structure
# Should contain: timeline, artifacts, summary
```

## üö® **Troubleshooting Common Issues**

### **Installation Problems:**
```bash
# If pip install fails
pip install --upgrade pip
pip install cursorflow --no-cache-dir

# If browser dependencies missing
cursorflow install-deps

# If permission issues
pip install --user cursorflow
```

### **Configuration Issues:**
```bash
# Re-initialize project
rm cursor-test-config.json
cursorflow init .

# Check config validity
cat cursor-test-config.json

# Test with explicit URL
cursorflow test homepage --base-url http://localhost:3000
```

### **Testing Issues:**
```bash
# Verify dev server is running
curl http://localhost:3000

# Check artifacts directory permissions
ls -la .cursorflow/

# View detailed help
cursorflow test --help
```

## üí° **Best Practices for Installation**

### **1. Project-Specific Setup**
- Always run `cursorflow init .` in each project
- Customize cursor-test-config.json for your stack
- Test locally before staging/production

### **2. Team Setup**
- Add cursor-test-config.json to version control
- Document environment-specific settings
- Share CLI commands for common workflows

### **3. Maintenance**
```bash
# Check for updates
cursorflow check-updates

# Update CursorFlow and rules
cursorflow update

# Keep browser dependencies current
cursorflow install-deps
```

## üé™ **Essential CLI Commands**

### **Setup:**
```bash
pip install cursorflow    # Install CLI
cursorflow init .         # Initialize project
cursorflow install-deps   # Install browser automation
```

### **Testing:**
```bash
cursorflow test component --base-url http://localhost:3000
cursorflow auto-test      # Auto-detect and test
```

### **Maintenance:**
```bash
cursorflow check-updates  # Check for new versions
cursorflow update        # Update package and rules
cursorflow --help        # View all commands
```

## üéØ **Success Criteria**

### **Installation Complete When:**
- `cursorflow --version` shows current version
- `cursorflow init .` creates cursor-test-config.json
- `cursorflow test component` returns structured JSON
- `.cursorflow/artifacts/` directory contains test results

### **Ready for Autonomous Operation When:**
- All CLI commands work without errors
- Configuration matches your development environment  
- Test artifacts are created and organized properly
- Cursor can use `cursorflow test` for any component

## üåü **Result: Cursor AI Superpowers Activated with v2.0.0!**

Once installed, Cursor can autonomously leverage complete page intelligence:

### **üî• Hot Reload Intelligence:**
- Auto-detect development frameworks (Vite, Webpack, Next.js, Parcel, Laravel Mix)
- Monitor WebSocket connections for HMR events
- Correlate CSS changes with visual updates
- Optimize testing timing with framework-specific intelligence

### **üß† Advanced Element Intelligence:**
- Utilize 7 selector strategies for robust element targeting
- Access comprehensive accessibility analysis
- Leverage visual context data for interaction decisions
- Apply computed style intelligence for CSS debugging

### **üìä Comprehensive Page Analysis:**
- Monitor font loading status and performance
- Track animation states and transitions
- Analyze resource loading patterns and optimization opportunities
- Inspect storage state (localStorage, sessionStorage, cookies)

### **üéØ Enhanced Error Context Collection:**
- Automatic error detection with rich diagnostic data
- Smart screenshot deduplication to avoid redundancy
- Comprehensive error correlation across browser and network layers
- Diagnostic artifacts organized for AI analysis

### **‚ö° Enhanced Browser Data Capture:**
- Full Playwright trace recording for complex debugging
- Network request/response intelligence with performance data
- Console message correlation with interaction timeline
- Performance metrics and optimization insights

**CursorFlow 2.0.0 Installation Complete = AI-Driven Development Superpowers Activated!** üöÄ