# Purpose: Python project configuration for CLI application using Poetry for dependency management
# Scope: Package metadata, dependencies, build configuration, and development tooling setup
# Overview: Comprehensive project configuration using Poetry for isolated virtual environments and dependency
#     management. Defines package metadata for PyPI distribution, runtime and development dependencies,
#     CLI entry points for installation, and configuration for development tools (ruff, pytest, mypy).
#     Uses Poetry to ensure isolated environments and prevent corrupting the user's machine.
# Dependencies: Poetry (>=1.5.0) for dependency management and virtual environment isolation
# Exports: Package configuration for Poetry, build tools, and development tooling
# Interfaces: Poetry build backend, isolated venv, ruff/pytest/mypy configuration
# Environment: Poetry-managed virtual environment (Python {{PYTHON_VERSION}})
# Related: poetry.lock, .ai/howtos/python-cli/how-to-package-cli-tool.md
# Philosophy: Don't corrupt the user's machine - all deps in isolated Poetry venv

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "thailint"
version = "0.4.4"
description = "The AI Linter - Enterprise-grade linting and governance for AI-generated code across multiple languages"
authors = ["Steve Jackson"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/be-wise-be-kind/thai-lint"
repository = "https://github.com/be-wise-be-kind/thai-lint"
documentation = "https://github.com/be-wise-be-kind/thai-lint#readme"
keywords = [
    "linter",
    "ai",
    "code-quality",
    "static-analysis",
    "file-placement",
    "governance",
    "multi-language",
    "cli",
    "docker",
    "python",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
packages = [{include = "src"}]
include = [
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]
exclude = [
    "tests",
    "tests/*",
    ".github",
    ".ai",
    "docs",
    "examples",
]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.0"
pyyaml = "^6.0"
tree-sitter = "^0.25.2"
tree-sitter-typescript = "^0.23.2"
pyprojroot = "^0.3.0"

[tool.poetry.group.dev.dependencies]
# Core testing and linting
pytest = "^8.4.2"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
ruff = "^0.13.0"
mypy = "^1.18.1"
types-pyyaml = "^6.0.0"
bandit = "^1.7.5"

# Comprehensive linters
pylint = "^3.3.3"
flake8 = "^7.1.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^24.11.19"
flake8-comprehensions = "^3.15.0"
flake8-simplify = "^0.21.0"

# Complexity analysis
radon = "^6.0.1"
xenon = "^0.9.3"

# Comprehensive security
safety = "^3.2.11"
pip-audit = "^2.8.0"
loguru = "^0.7.3"
pytest-xdist = "^3.8.0"

[tool.poetry.scripts]
thailint = "src.cli:cli"
thai-lint = "src.cli:cli"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101"]  # Allow assert in tests

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__init__.py",
]
dynamic_context = "test_function"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
show_contexts = true

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.cli"
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.config"
warn_return_any = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.linter_config.*"
warn_return_any = false

[[tool.mypy.overrides]]
module = "src.linters.*"
warn_return_any = false
disallow_incomplete_defs = false

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "duplicate-code",
    "C0111",  # missing-docstring (handled by flake8-docstrings)
    "R0903",  # too-few-public-methods (often fine for CLIs)
    "R0912",  # too-many-branches (validation methods intentionally have many branches)
    "R0911",  # too-many-return-statements (early returns improve readability)
    "C0415",  # import-outside-toplevel (intentional for performance optimization)
    "W0718",  # broad-exception-caught (acceptable for config loading fallbacks)
    "W0613",  # unused-argument (interface compliance requires some unused args)
    "R0401",  # cyclic-import (false positive with TYPE_CHECKING guards)
    "W0622",  # redefined-builtin (format parameter in CLI is acceptable)
    "W1203",  # logging-fstring-interpolation (template code to be replaced)
    "E1120",  # no-value-for-parameter (template Click code)
    "W0621",  # redefined-outer-name (template Click code)
    "W0107",  # unnecessary-pass (empty exception classes are fine)
]

[tool.pylint.format]
max-line-length = 120

# Flake8 configuration (in .flake8 file, not pyproject.toml)
# Note: Flake8 doesn't support pyproject.toml natively
# Create .flake8 file with:
# [flake8]
# max-line-length = 120
# extend-ignore = E203, E501
# docstring-convention = google

# Radon configuration
[tool.radon]
cc_min = "C"  # Warn on complexity >= C
show_complexity = true

# Xenon configuration
[tool.xenon]
max-absolute = "B"
max-modules = "B"
max-average = "A"
