Metadata-Version: 2.4
Name: cvasl
Version: 0.1.7
Summary: A package for analysis of MRI
Author-email: A team including the NLeSC and the Amsterdam Medical Center <s.amiri@esciencecenter.nl>
Maintainer-email: Saba Amiri <s.amiri@esciencecenter.nl>, Peter Kok <p.kok@esciencecenter.nl>, Mathijs Dijsselhof <m.b.dijsselhof@amsterdamumc.nl>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2023 [Netherlands eScience Center and Amsterdam UMC]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Project-URL: Repository, https://github.com/brainspinner/cvasl
Keywords: MRI,harmonisation
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE.md
Requires-Dist: k_means_constrained>=0.5.2
Requires-Dist: kneed
Requires-Dist: matplotlib
Requires-Dist: neuroharmonize>=2.4.5
Requires-Dist: neurocombat>=0.2.12
Requires-Dist: nibabel
Requires-Dist: nipy
Requires-Dist: numpy<2
Requires-Dist: opencv-python
Requires-Dist: pandas>=1.2.0
Requires-Dist: patsy
Requires-Dist: pingouin
Requires-Dist: grad-cam
Requires-Dist: pyxdf
Requires-Dist: scikit-image
Requires-Dist: scikit-learn>=0.23.2
Requires-Dist: scipy>=1.5.4
Requires-Dist: seaborn
Requires-Dist: simpleitk>=2.0.1
Requires-Dist: statsmodels>=0.14.4
Requires-Dist: torch
Requires-Dist: torchvision
Requires-Dist: tqdm>=4.59
Requires-Dist: umap-learn>=0.5.1
Requires-Dist: wandb
Requires-Dist: yellowbrick>=1.3
Provides-Extra: dev
Requires-Dist: ipympl; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: nbmake; extra == "dev"
Requires-Dist: pycodestyle; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-datadir>=1.7.2; extra == "dev"
Requires-Dist: build; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: piccolo_theme; extra == "docs"
Dynamic: license-file

<p align="center">
    <img style="width: 35%; height: 35%" src="cv_asl_svg.svg">
</p>

[![DOI](https://zenodo.org/badge/618300539.svg)](https://zenodo.org/badge/latestdoi/618300539)
[![PyPI- to be made, placeholder](https://img.shields.io/pypi/v/cvasl.svg)](https://pypi.python.org/pypi/cvasl/)
[![Sanity](https://github.com/ExploreASL/cvasl/actions/workflows/on-commit.yml/badge.svg)](https://github.com/ExploreASL/cvasl/actions/workflows/on-commit.yml)
[![Citation](https://img.shields.io/badge/Cite%20as-cvasl-blue)](https://github.com/ExploreASL/cvasl/#citation)


**cvasl** is an open source collaborative python library for analysis
of brain MRIs. Many functions relate to arterial spin labeled sequences.



This library
supports the ongoing research at University of Amsterdam Medical Center on brain ageing, but
is being buit for the entire community of radiology researchers across all university and academic medical centers and beyond.


## License

This project is licensed under the Apache-2.0 License - see the [LICENSE](LICENSE) file for details.

## Citation

If you use this software in your research, please cite it. You can find the citation information by clicking the "Cite this repository" button in the sidebar on the right.

```bibtex
@software{Amiri_cvasl_2025,
author = {Amiri, Saba and Kok, Peter and Moore, Candace Makeda and Crocioni, Giulia and Dijsselhof, Mathijs and Mutsaerts, Henk JMM and Petr, Jan and Bodor, Dani},
license = {Apache-2.0},
month = jul,
title = {{cvasl}},
url = {https://github.com/ExploreASL/cvasl},
version = {1.1.0},
year = {2025}
}
```

# Command-Line Interface

You can preprocess, train and use models, and perform harmonization using the command-line interface.


## MRIdataset Class

The `MRIdataset` class in `cvasl.dataset` is designed to load and preprocess MRI datasets for harmonization and analysis. It supports loading data from CSV files, preprocessing steps like feature dropping, categorical encoding, and adding derived features (ICV, decade).

**MRIdataset Initialization Parameters:**

*   `path` (str or list): Path to the CSV file or a list of paths for datasets spanning multiple files (e.g., for datasets like Site0 which might be spread across 'TOP_input.csv' and 'StrokeMRI_input.csv').
*   `site_id` (int or str): Identifier for the data acquisition site. This is crucial for harmonization to distinguish between datasets from different sites.
*   `patient_identifier` (str, optional): Column name that uniquely identifies each patient. Defaults to `"participant_id"`.
*   `features_to_drop` (list, optional): List of feature names (columns) to be dropped from the dataset during preprocessing. Defaults to `["m0", "id"]`.
*   `cat_features_to_encode` (list, optional): List of categorical feature names to be encoded into numerical representations. This is important for harmonizers and models that require numerical input. Defaults to `None`.
*   `ICV` (bool, optional): If `True`, adds Intracranial Volume (ICV) related features, assuming 'gm\_vol' and 'gm\_icvratio' columns are available. Defaults to `False`.
*   `decade` (bool, optional): If `True`, adds a 'decade' feature derived from the 'age' column. Defaults to `False`.
*   `features_to_bin` (list, optional): List of features to be binned. Defaults to `None`.
*   `binning_method` (str, optional): Method for binning, either `"equal_width"` or `"equal_frequency"`. Defaults to `"equal_width"`.
*   `num_bins` (int, optional): Number of bins to create for binning. Defaults to `10`.
*   `bin_labels` (list, optional): Custom labels for the bins. Defaults to `None`.

Example of creating `MRIdataset` objects in `runharmonize.py`:

```python
Site0_path = ['../data/Site001_input.csv','../data/Site002_input.csv']
Site1_path = '../data/Site1_input.csv'
Site2_path = '../data/Site2_input.csv'
Site3_path = '../data/Site3_input.csv'
Site4_path = '../data/Site4_input.csv'

features_to_drop = ["m0", "id"]
features_to_map = ['readout', 'labelling', 'sex']
patient_identifier = 'participant_id'

Site0 = MRIdataset(Site0_path, site_id=3, decade=True, ICV = True, patient_identifier=patient_identifier, features_to_drop=features_to_drop)
Site1 = MRIdataset(Site1_path, site_id=0, decade=True, ICV = True, patient_identifier=patient_identifier, features_to_drop=features_to_drop)
Site2 = MRIdataset(Site2_path, site_id=1, decade=True, ICV = True, patient_identifier=patient_identifier, features_to_drop=features_to_drop)
Site3 = MRIdataset(Site3_path, site_id=2, decade=True, ICV = True, patient_identifier=patient_identifier, features_to_drop=features_to_drop)
Site4 = MRIdataset(Site4_path, site_id=4, decade=True, ICV = True, patient_identifier=patient_identifier, features_to_drop=features_to_drop)

datasets = [Site0, Site1, Site2, Site3, Site4]
[_d.preprocess() for _d in datasets] # Preprocess all datasets
datasets = encode_cat_features(datasets,features_to_map) # Encode categorical features across datasets
```

## Harmonization Methods

The `cvasl.harmonizers` module provides several harmonization techniques to reduce site-specific variance in MRI data. Below is a guide to the available harmonizers and how to run them via the command-line interface using `harmonizer_cli.py`.

### Running Harmonization via CLI

To run harmonization, use the `harmonizer_cli.py` script with the following general command structure:

```bash
python harmonizer_cli.py --dataset_paths <dataset_paths> --site_ids <site_ids> --method <harmonization_method> [harmonizer_specific_options] [dataset_options]
```

*   `--dataset_paths`: Comma-separated paths to your dataset CSV files. For datasets with multiple input paths (like Site0), use semicolons to separate paths within a dataset entry, and commas to separate different datasets (e.g., `path1,path2,"path3;path4",path5`).
*   `--site_ids`: Comma-separated site IDs corresponding to each dataset path provided in `--dataset_paths`.
*   `--method`: The name of the harmonization method to be used. Available methods are: `neuroharmonize`, `covbat`, `neurocombat`, `nestedcombat`, `comscanneuroharmonize`, `autocombat`, `relief`, `combat++`.
*   `[harmonizer_specific_options]`: Placeholders for parameters specific to each harmonization method. These are detailed below for each harmonizer.
*   `[dataset_options]`: Options related to dataset loading and preprocessing, such as `--patient_identifier`, `--features_to_drop`, `--features_to_map`, `--decade`, and `--icv`. These options are common across all harmonizers.

### Harmonization Methods and Example Commands

Below are example commands for each harmonization method. Adjust dataset paths and parameters as needed for your data.

**NeuroHarmonize:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method neuroharmonize --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nh_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --nh_covariates age,sex,icv,site --nh_site_indicator site
```

**Covbat:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method covbat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --cb_features_to_harmonize participant_id,site,age,sex,site,aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --cb_covariates age,sex --cb_numerical_covariates age --cb_site_indicator site
```

**NeuroCombat:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method neurocombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nc_features_to_harmonize ACA_B_CoV,MCA_B_CoV,PCA_B_CoV,TotalGM_B_CoV,ACA_B_CBF,MCA_B_CBF,PCA_B_CBF,TotalGM_B_CBF --nc_discrete_covariates sex --nc_continuous_covariates age --nc_site_indicator site
```

**NestedComBat:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method nestedcombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nest_features_to_harmonize ACA_B_CoV,MCA_B_CoV,PCA_B_CoV,TotalGM_B_CoV,ACA_B_CBF,MCA_B_CBF,PCA_B_CBF,TotalGM_B_CBF --nest_batch_list_harmonisations readout,ld,pld --nest_site_indicator site --nest_discrete_covariates sex --nest_continuous_covariates age --nest_use_gmm False
```

**Combat++:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method combat++ --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --compp_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --compp_discrete_covariates sex --compp_continuous_covariates age --compp_discrete_covariates_to_remove labelling --compp_continuous_covariates_to_remove ld --compp_site_indicator site
```

**ComscanNeuroHarmonize:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method comscanneuroharmonize --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --csnh_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --csnh_discrete_covariates sex --csnh_continuous_covariates decade --csnh_site_indicator site
```

**AutoComBat:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method autocombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --ac_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --ac_data_subset aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf,site,readout,labelling,pld,ld,sex,age --ac_discrete_covariates sex --ac_continuous_covariates age --ac_site_indicator site,readout,pld,ld --ac_discrete_cluster_features site,readout --ac_continuous_cluster_features pld,ld
```

**RELIEF:**
```bash
python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method relief --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --relief_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --relief_covariates sex,age --relief_patient_identifier participant_id
```

### Important Notes

*   **Adjust Paths:** Ensure that you replace placeholder paths (e.g., `../data/Site1_input.csv`) with the actual paths to your data files.
*   **Parameter Tuning:** The provided commands use example parameters. You may need to adjust harmonization parameters (features to harmonize, covariates, etc.) based on your dataset and harmonization goals. Consult the documentation or code comments for each harmonizer to understand specific parameter options.
*   **R Requirement:** Methods like `RELIEF` and `Combat++` require R to be installed and accessible in your environment, along with the necessary R packages (`denoiseR`, `RcppCNPy`, `matrixStats`).
*   **Output Files:** Harmonized datasets will be saved as new CSV files in the same directory as your input datasets, with filenames appended with `output_<harmonization_method>`.

By following these guidelines, you can effectively utilize the harmonization functionalities within `cvasl` to process your MRI datasets and mitigate site-related biases.

## Harmonization Guide

This section provides a guide on using the `cvasl` library for MRI data harmonization. It covers the `MRIdataset` class for data loading and preprocessing, and various harmonization methods available in the `cvasl.harmonizers` module.

### MRIdataset Class

The `MRIdataset` class in `cvasl.dataset` is designed to handle MRI datasets from different sites, preparing them for harmonization and analysis.

**Initialization Parameters:**

*   `path` (str or list): Path to the CSV file or a list of paths. For multiple paths, use a list of strings.
*   `site_id` (int or str): Identifier for the data acquisition site.
*   `patient_identifier` (str, optional): Column name for patient IDs. Defaults to `"participant_id"`.
*   `cat_features_to_encode` (list, optional): List of categorical features to encode. Defaults to `None`.
*   `ICV` (bool, optional): Whether to add Intracranial Volume (ICV) related features. Defaults to `False`.
*   `decade` (bool, optional): Whether to add decade-related features based on age. Defaults to `False`.
*   `features_to_drop` (list, optional): List of features to drop during preprocessing. Defaults to `["m0", "id"]`.
*   `features_to_bin` (list, optional): List of features to bin. Defaults to `None`.
*   `binning_method` (str, optional): Binning method to use; `"equal_width"` or `"equal_frequency"`. Defaults to `"equal_width"`.
*   `num_bins` (int, optional): Number of bins for binning. Defaults to `10`.
*   `bin_labels` (list, optional): Labels for bins. Defaults to `None`.

**Usage Example:**

```python
from cvasl.dataset import MRIdataset

Site1 = MRIdataset(path='../data/Site1_input.csv', site_id=0, decade=True, ICV=True, patient_identifier='participant_id', features_to_drop=["m0", "id"])
Site2 = MRIdataset(path='../data/Site2_input.csv', site_id=1, decade=True, ICV=True, patient_identifier='participant_id', features_to_drop=["m0", "id"])
Site0 = MRIdataset(path=['../data/Site001_input.csv','../data/Site002_input.csv'], site_id=3, decade=True, ICV=True, patient_identifier='participant_id', features_to_drop=["m0", "id"])
```

**Preprocessing:**

After initializing `MRIdataset` objects, you can preprocess them using the `preprocess()` method:

```python
datasets = [Site1, Site2, Site0] # Example list of MRIdataset objects
[_d.preprocess() for _d in datasets]
```

**Categorical Feature Encoding:**

For categorical feature encoding across datasets, use the `encode_cat_features` function:

```python
from cvasl.dataset import encode_cat_features

features_to_map = ['readout', 'labelling', 'sex']
datasets = encode_cat_features(datasets, features_to_map)
```

### Harmonization Methods

The `cvasl.harmonizers` module provides several state-of-the-art harmonization methods. Below is a guide to each method and how to run them using the command-line interface (CLI).

**Running Harmonization via CLI:**

The `harmonizer_cli.py` script in `cvasl` allows you to run various harmonization methods from the command line. You need to specify the dataset paths, site IDs, harmonization method, and method-specific parameters.

**General CLI Usage:**

```bash
python harmonizer_cli.py --dataset_paths <dataset_path1>,<dataset_path2>,... --site_ids <site_id1>,<site_id2>,... --method <harmonization_method> [method_specific_options]
```

**Available Harmonization Methods and CLI Commands:**

1.  **NeuroHarmonize:**

    *   Method Class: `NeuroHarmonize`
    *   CLI `--method` value: `neuroharmonize`
    *   Method-specific CLI Options:
        *   `--nh_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--nh_covariates`: Covariates (comma-separated).
        *   `--nh_smooth_terms`: Smooth terms (comma-separated, optional).
        *   `--nh_site_indicator`: Site indicator column name.
        *   `--nh_empirical_bayes`: Use empirical Bayes (True/False).

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method neuroharmonize --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nh_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --nh_covariates age,sex,icv,site --nh_site_indicator site
        ```

2.  **Covbat:**

    *   Method Class: `Covbat`
    *   CLI `--method` value: `covbat`
    *   Method-specific CLI Options:
        *   `--cb_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--cb_covariates`: Covariates (comma-separated).
        *   `--cb_site_indicator`: Site indicator column name.
        *   `--cb_patient_identifier`: Patient identifier column name.
        *   `--cb_numerical_covariates`: Numerical covariates (comma-separated).
        *   `--cb_empirical_bayes`: Use empirical Bayes (True/False).

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method covbat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --cb_features_to_harmonize participant_id,site,age,sex,site,aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --cb_covariates age,sex --cb_numerical_covariates age --cb_site_indicator site
        ```

3.  **NeuroCombat:**

    *   Method Class: `NeuroCombat`
    *   CLI `--method` value: `neurocombat`
    *   Method-specific CLI Options:
        *   `--nc_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--nc_discrete_covariates`: Discrete covariates (comma-separated).
        *   `--nc_continuous_covariates`: Continuous covariates (comma-separated).
        *   `--nc_site_indicator`: Site indicator column name.
        *   `--nc_patient_identifier`: Patient identifier column name.
        *   `--nc_empirical_bayes`: Use empirical Bayes (True/False).
        *   `--nc_mean_only`: Mean-only adjustment (True/False).
        *   `--nc_parametric`: Parametric adjustment (True/False).

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method neurocombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nc_features_to_harmonize ACA_B_CoV,MCA_B_CoV,PCA_B_CoV,TotalGM_B_CoV,ACA_B_CBF,MCA_B_CBF,PCA_B_CBF,TotalGM_B_CBF --nc_discrete_covariates sex --nc_continuous_covariates age --nc_site_indicator site
        ```

4.  **NestedComBat:**

    *   Method Class: `NestedComBat`
    *   CLI `--method` value: `nestedcombat`
    *   Method-specific CLI Options:
        *   `--nest_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--nest_batch_list_harmonisations`: Batch variables for nested ComBat (comma-separated).
        *   `--nest_site_indicator`: Site indicator column name.
        *   `--nest_discrete_covariates`: Discrete covariates (comma-separated).
        *   `--nest_continuous_covariates`: Continuous covariates (comma-separated).
        *   `--nest_intermediate_results_path`: Path for intermediate results.
        *   `--nest_patient_identifier`: Patient identifier column name.
        *   `--nest_return_extended`: Return extended outputs (True/False).
        *   `--nest_use_gmm`: Use Gaussian Mixture Model (True/False).

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method nestedcombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --nest_features_to_harmonize ACA_B_CoV,MCA_B_CoV,PCA_B_CoV,TotalGM_B_CoV,ACA_B_CBF,MCA_B_CBF,PCA_B_CBF,TotalGM_B_CBF --nest_batch_list_harmonisations readout,ld,pld --nest_site_indicator site --nest_discrete_covariates sex --nest_continuous_covariates age --nest_use_gmm False
        ```

5.  **Combat++:**

    *   Method Class: `CombatPlusPlus`
    *   CLI `--method` value: `combat++`
    *   Method-specific CLI Options:
        *   `--compp_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--compp_discrete_covariates`: Discrete covariates (comma-separated).
        *   `--compp_continuous_covariates`: Continuous covariates (comma-separated).
        *   `--compp_discrete_covariates_to_remove`: Discrete covariates to remove (comma-separated).
        *   `--compp_continuous_covariates_to_remove`: Continuous covariates to remove (comma-separated).
        *   `--compp_site_indicator`: Site indicator column name.
        *   `--compp_patient_identifier`: Patient identifier column name.
        *   `--compp_intermediate_results_path`: Path for intermediate results.

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method combat++ --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --compp_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --compp_discrete_covariates sex --compp_continuous_covariates age --compp_discrete_covariates_to_remove labelling --compp_continuous_covariates_to_remove ld --compp_site_indicator site
        ```

6.  **ComscanNeuroHarmonize:**

    *   Method Class: `ComscanNeuroCombat`
    *   CLI `--method` value: `comscanneuroharmonize`
    *   Method-specific CLI Options:
        *   `--csnh_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--csnh_discrete_covariates`: Discrete covariates (comma-separated).
        *   `--csnh_continuous_covariates`: Continuous covariates (comma-separated).
        *   `--csnh_site_indicator`: Site indicator column name.

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method comscanneuroharmonize --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --csnh_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --csnh_discrete_covariates sex --csnh_continuous_covariates decade --csnh_site_indicator site
        ```

7.  **AutoComBat:**

    *   Method Class: `AutoCombat`
    *   CLI `--method` value: `autocombat`
    *   Method-specific CLI Options:
        *   `--ac_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--ac_data_subset`: Data subset features (comma-separated).
        *   `--ac_discrete_covariates`: Discrete covariates (comma-separated).
        *   `--ac_continuous_covariates`: Continuous covariates (comma-separated).
        *   `--ac_site_indicator`: Site indicator column name(s), comma-separated if multiple.
        *   `--ac_discrete_cluster_features`: Discrete cluster features (comma-separated).
        *   `--ac_continuous_cluster_features`: Continuous cluster features (comma-separated).
        *   `--ac_metric`: Metric for cluster optimization (`distortion`, `silhouette`, `calinski_harabasz`).
        *   `--ac_features_reduction`: Feature reduction method (`pca`, `umap`, `None`).
        *   `--ac_feature_reduction_dimensions`: Feature reduction dimensions (int).
        *   `--ac_empirical_bayes`: Use empirical Bayes (True/False).

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method autocombat --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --ac_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --ac_data_subset aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf,site,readout,labelling,pld,ld,sex,age --ac_discrete_covariates sex --ac_continuous_covariates age --ac_site_indicator site,readout,pld,ld --ac_discrete_cluster_features site,readout --ac_continuous_cluster_features pld,ld
        ```

8.  **RELIEF:**

    *   Method Class: `RELIEF`
    *   CLI `--method` value: `relief`
    *   Method-specific CLI Options:
        *   `--relief_features_to_harmonize`: Features to harmonize (comma-separated).
        *   `--relief_covariates`: Covariates (comma-separated).
        *   `--relief_patient_identifier`: Patient identifier column name.
        *   `--relief_intermediate_results_path`: Path for intermediate results.

    *   **Example Command:**

        ```bash
        python harmonizer_cli.py --dataset_paths "../data/Site001_input.csv','../data/Site002_input.csv", ../data/Site1_input.csv,../data/Site2_input.csv,../data/Site3_input.csv,../data/Site4_input.csv --site_ids 0,1,2,3,4 --method relief --patient_identifier participant_id --features_to_drop m0,id --features_to_map readout,labelling,sex --decade True --icv True --relief_features_to_harmonize aca_b_cov,mca_b_cov,pca_b_cov,totalgm_b_cov,aca_b_cbf,mca_b_cbf,pca_b_cbf,totalgm_b_cbf --relief_covariates sex,age --relief_patient_identifier participant_id
        ```

**Note:**  For datasets with multiple paths (like Site0 in the examples), use semicolons (`;`) to separate paths within the `--dataset_paths` argument, while using commas (`,`) to separate different datasets.

✨Copyright 2025 Netherlands eScience Center and U. Amsterdam Medical Center
Licensed under <TBA> See LICENSE for details.✨
