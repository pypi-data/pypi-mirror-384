# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PaIRS_PIV
else:
    import _PaIRS_PIV

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MOD_PaIRS = _PaIRS_PIV.MOD_PaIRS
MOD_PIV = _PaIRS_PIV.MOD_PIV
MOD_TrTomo = _PaIRS_PIV.MOD_TrTomo
MOD_TrPathOld = _PaIRS_PIV.MOD_TrPathOld
MOD_TrPath = _PaIRS_PIV.MOD_TrPath
MOD_Disparity = _PaIRS_PIV.MOD_Disparity
MOD_DisparityAvgCorr = _PaIRS_PIV.MOD_DisparityAvgCorr
MOD_StereoPIV = _PaIRS_PIV.MOD_StereoPIV
MOD_Soloff = _PaIRS_PIV.MOD_Soloff
MOD_TomoPIV = _PaIRS_PIV.MOD_TomoPIV
MOD_piv3d = _PaIRS_PIV.MOD_piv3d
MOD_SelfCal = _PaIRS_PIV.MOD_SelfCal
MOD_TomoPI = _PaIRS_PIV.MOD_TomoPI
MOD_RotCalib = _PaIRS_PIV.MOD_RotCalib
MOD_ParCorr = _PaIRS_PIV.MOD_ParCorr
MOD_Calib = _PaIRS_PIV.MOD_Calib

def Version(Flag):
    return _PaIRS_PIV.Version(Flag)

def SizeOfReal():
    return _PaIRS_PIV.SizeOfReal()
IDEN_INT = _PaIRS_PIV.IDEN_INT
IDEN_DOUBLE = _PaIRS_PIV.IDEN_DOUBLE
IDEN_FLOAT = _PaIRS_PIV.IDEN_FLOAT
IDEN_LONG = _PaIRS_PIV.IDEN_LONG
class PIV_Input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RisX = property(_PaIRS_PIV.PIV_Input_RisX_get, _PaIRS_PIV.PIV_Input_RisX_set)
    RisY = property(_PaIRS_PIV.PIV_Input_RisY_get, _PaIRS_PIV.PIV_Input_RisY_set)
    dt = property(_PaIRS_PIV.PIV_Input_dt_get, _PaIRS_PIV.PIV_Input_dt_set)
    ImgH = property(_PaIRS_PIV.PIV_Input_ImgH_get, _PaIRS_PIV.PIV_Input_ImgH_set)
    ImgW = property(_PaIRS_PIV.PIV_Input_ImgW_get, _PaIRS_PIV.PIV_Input_ImgW_set)
    FlagLog = property(_PaIRS_PIV.PIV_Input_FlagLog_get, _PaIRS_PIV.PIV_Input_FlagLog_set)
    HCellaVec = property(_PaIRS_PIV.PIV_Input_HCellaVec_get, _PaIRS_PIV.PIV_Input_HCellaVec_set)
    WCellaVec = property(_PaIRS_PIV.PIV_Input_WCellaVec_get, _PaIRS_PIV.PIV_Input_WCellaVec_set)
    HOverlapVec = property(_PaIRS_PIV.PIV_Input_HOverlapVec_get, _PaIRS_PIV.PIV_Input_HOverlapVec_set)
    WOverlapVec = property(_PaIRS_PIV.PIV_Input_WOverlapVec_get, _PaIRS_PIV.PIV_Input_WOverlapVec_set)
    MaxDispInCCVec = property(_PaIRS_PIV.PIV_Input_MaxDispInCCVec_get, _PaIRS_PIV.PIV_Input_MaxDispInCCVec_set)
    FlagCalcVelVec = property(_PaIRS_PIV.PIV_Input_FlagCalcVelVec_get, _PaIRS_PIV.PIV_Input_FlagCalcVelVec_set)
    FlagWindowingVec = property(_PaIRS_PIV.PIV_Input_FlagWindowingVec_get, _PaIRS_PIV.PIV_Input_FlagWindowingVec_set)
    SemiDimCalcVelVec = property(_PaIRS_PIV.PIV_Input_SemiDimCalcVelVec_get, _PaIRS_PIV.PIV_Input_SemiDimCalcVelVec_set)
    FlagDirectCorrVec = property(_PaIRS_PIV.PIV_Input_FlagDirectCorrVec_get, _PaIRS_PIV.PIV_Input_FlagDirectCorrVec_set)
    NIterazioni = property(_PaIRS_PIV.PIV_Input_NIterazioni_get, _PaIRS_PIV.PIV_Input_NIterazioni_set)
    FlagBordo = property(_PaIRS_PIV.PIV_Input_FlagBordo_get, _PaIRS_PIV.PIV_Input_FlagBordo_set)
    IntIniz = property(_PaIRS_PIV.PIV_Input_IntIniz_get, _PaIRS_PIV.PIV_Input_IntIniz_set)
    FlagInt = property(_PaIRS_PIV.PIV_Input_FlagInt_get, _PaIRS_PIV.PIV_Input_FlagInt_set)
    IntFin = property(_PaIRS_PIV.PIV_Input_IntFin_get, _PaIRS_PIV.PIV_Input_IntFin_set)
    IntCorr = property(_PaIRS_PIV.PIV_Input_IntCorr_get, _PaIRS_PIV.PIV_Input_IntCorr_set)
    IntVel = property(_PaIRS_PIV.PIV_Input_IntVel_get, _PaIRS_PIV.PIV_Input_IntVel_set)
    FlagValid = property(_PaIRS_PIV.PIV_Input_FlagValid_get, _PaIRS_PIV.PIV_Input_FlagValid_set)
    SemiDimValid = property(_PaIRS_PIV.PIV_Input_SemiDimValid_get, _PaIRS_PIV.PIV_Input_SemiDimValid_set)
    SogliaMed = property(_PaIRS_PIV.PIV_Input_SogliaMed_get, _PaIRS_PIV.PIV_Input_SogliaMed_set)
    ErroreMed = property(_PaIRS_PIV.PIV_Input_ErroreMed_get, _PaIRS_PIV.PIV_Input_ErroreMed_set)
    FlagAttivaValSN = property(_PaIRS_PIV.PIV_Input_FlagAttivaValSN_get, _PaIRS_PIV.PIV_Input_FlagAttivaValSN_set)
    SogliaSN = property(_PaIRS_PIV.PIV_Input_SogliaSN_get, _PaIRS_PIV.PIV_Input_SogliaSN_set)
    SogliaFcl = property(_PaIRS_PIV.PIV_Input_SogliaFcl_get, _PaIRS_PIV.PIV_Input_SogliaFcl_set)
    FlagValidNog = property(_PaIRS_PIV.PIV_Input_FlagValidNog_get, _PaIRS_PIV.PIV_Input_FlagValidNog_set)
    SogliaMedia = property(_PaIRS_PIV.PIV_Input_SogliaMedia_get, _PaIRS_PIV.PIV_Input_SogliaMedia_set)
    SogliaNumVet = property(_PaIRS_PIV.PIV_Input_SogliaNumVet_get, _PaIRS_PIV.PIV_Input_SogliaNumVet_set)
    SogliaNoise = property(_PaIRS_PIV.PIV_Input_SogliaNoise_get, _PaIRS_PIV.PIV_Input_SogliaNoise_set)
    SogliaStd = property(_PaIRS_PIV.PIV_Input_SogliaStd_get, _PaIRS_PIV.PIV_Input_SogliaStd_set)
    FlagCorrHart = property(_PaIRS_PIV.PIV_Input_FlagCorrHart_get, _PaIRS_PIV.PIV_Input_FlagCorrHart_set)
    FlagSecMax = property(_PaIRS_PIV.PIV_Input_FlagSecMax_get, _PaIRS_PIV.PIV_Input_FlagSecMax_set)
    FlagCorrezioneVel = property(_PaIRS_PIV.PIV_Input_FlagCorrezioneVel_get, _PaIRS_PIV.PIV_Input_FlagCorrezioneVel_set)
    InfoSi = property(_PaIRS_PIV.PIV_Input_InfoSi_get, _PaIRS_PIV.PIV_Input_InfoSi_set)
    InfoNo = property(_PaIRS_PIV.PIV_Input_InfoNo_get, _PaIRS_PIV.PIV_Input_InfoNo_set)
    FlagCalcVel = property(_PaIRS_PIV.PIV_Input_FlagCalcVel_get, _PaIRS_PIV.PIV_Input_FlagCalcVel_set)
    FlagWindowing = property(_PaIRS_PIV.PIV_Input_FlagWindowing_get, _PaIRS_PIV.PIV_Input_FlagWindowing_set)
    SemiDimCalcVel = property(_PaIRS_PIV.PIV_Input_SemiDimCalcVel_get, _PaIRS_PIV.PIV_Input_SemiDimCalcVel_set)
    FlagDirectCorr = property(_PaIRS_PIV.PIV_Input_FlagDirectCorr_get, _PaIRS_PIV.PIV_Input_FlagDirectCorr_set)
    FlagSommaProd = property(_PaIRS_PIV.PIV_Input_FlagSommaProd_get, _PaIRS_PIV.PIV_Input_FlagSommaProd_set)
    flagAdaptive = property(_PaIRS_PIV.PIV_Input_flagAdaptive_get, _PaIRS_PIV.PIV_Input_flagAdaptive_set)
    MaxC = property(_PaIRS_PIV.PIV_Input_MaxC_get, _PaIRS_PIV.PIV_Input_MaxC_set)
    MinC = property(_PaIRS_PIV.PIV_Input_MinC_get, _PaIRS_PIV.PIV_Input_MinC_set)
    LarMin = property(_PaIRS_PIV.PIV_Input_LarMin_get, _PaIRS_PIV.PIV_Input_LarMin_set)
    LarMax = property(_PaIRS_PIV.PIV_Input_LarMax_get, _PaIRS_PIV.PIV_Input_LarMax_set)
    ItAtt = property(_PaIRS_PIV.PIV_Input_ItAtt_get, _PaIRS_PIV.PIV_Input_ItAtt_set)
    FlagFilt = property(_PaIRS_PIV.PIV_Input_FlagFilt_get, _PaIRS_PIV.PIV_Input_FlagFilt_set)
    CutOffH = property(_PaIRS_PIV.PIV_Input_CutOffH_get, _PaIRS_PIV.PIV_Input_CutOffH_set)
    CutOffW = property(_PaIRS_PIV.PIV_Input_CutOffW_get, _PaIRS_PIV.PIV_Input_CutOffW_set)
    VelCutH = property(_PaIRS_PIV.PIV_Input_VelCutH_get, _PaIRS_PIV.PIV_Input_VelCutH_set)
    VelCutW = property(_PaIRS_PIV.PIV_Input_VelCutW_get, _PaIRS_PIV.PIV_Input_VelCutW_set)
    FlagRemNoise = property(_PaIRS_PIV.PIV_Input_FlagRemNoise_get, _PaIRS_PIV.PIV_Input_FlagRemNoise_set)
    PercCap = property(_PaIRS_PIV.PIV_Input_PercCap_get, _PaIRS_PIV.PIV_Input_PercCap_set)
    PercFc = property(_PaIRS_PIV.PIV_Input_PercFc_get, _PaIRS_PIV.PIV_Input_PercFc_set)
    numInitIt = property(_PaIRS_PIV.PIV_Input_numInitIt_get, _PaIRS_PIV.PIV_Input_numInitIt_set)
    NomeFile = property(_PaIRS_PIV.PIV_Input_NomeFile_get, _PaIRS_PIV.PIV_Input_NomeFile_set)
    FlagNumThreads = property(_PaIRS_PIV.PIV_Input_FlagNumThreads_get, _PaIRS_PIV.PIV_Input_FlagNumThreads_set)
    Out = property(_PaIRS_PIV.PIV_Input_Out_get, _PaIRS_PIV.PIV_Input_Out_set)
    FlagRad = property(_PaIRS_PIV.PIV_Input_FlagRad_get, _PaIRS_PIV.PIV_Input_FlagRad_set)
    rImgA = property(_PaIRS_PIV.PIV_Input_rImgA_get, _PaIRS_PIV.PIV_Input_rImgA_set)
    rImgB = property(_PaIRS_PIV.PIV_Input_rImgB_get, _PaIRS_PIV.PIV_Input_rImgB_set)

    def __init__(self):
        _PaIRS_PIV.PIV_Input_swiginit(self, _PaIRS_PIV.new_PIV_Input())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Input

# Register PIV_Input in _PaIRS_PIV:
_PaIRS_PIV.PIV_Input_swigregister(PIV_Input)
class ProcessingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NitTot = property(_PaIRS_PIV.ProcessingData_NitTot_get, _PaIRS_PIV.ProcessingData_NitTot_set)
    It = property(_PaIRS_PIV.ProcessingData_It_get, _PaIRS_PIV.ProcessingData_It_set)
    WCella = property(_PaIRS_PIV.ProcessingData_WCella_get, _PaIRS_PIV.ProcessingData_WCella_set)
    HCella = property(_PaIRS_PIV.ProcessingData_HCella_get, _PaIRS_PIV.ProcessingData_HCella_set)
    W = property(_PaIRS_PIV.ProcessingData_W_get, _PaIRS_PIV.ProcessingData_W_set)
    H = property(_PaIRS_PIV.ProcessingData_H_get, _PaIRS_PIV.ProcessingData_H_set)
    NVect = property(_PaIRS_PIV.ProcessingData_NVect_get, _PaIRS_PIV.ProcessingData_NVect_set)
    ContErorreDc = property(_PaIRS_PIV.ProcessingData_ContErorreDc_get, _PaIRS_PIV.ProcessingData_ContErorreDc_set)
    ContRemNoise = property(_PaIRS_PIV.ProcessingData_ContRemNoise_get, _PaIRS_PIV.ProcessingData_ContRemNoise_set)
    ContCap = property(_PaIRS_PIV.ProcessingData_ContCap_get, _PaIRS_PIV.ProcessingData_ContCap_set)
    FlagWindowing = property(_PaIRS_PIV.ProcessingData_FlagWindowing_get, _PaIRS_PIV.ProcessingData_FlagWindowing_set)
    FlagDirectCorr = property(_PaIRS_PIV.ProcessingData_FlagDirectCorr_get, _PaIRS_PIV.ProcessingData_FlagDirectCorr_set)
    Fc = property(_PaIRS_PIV.ProcessingData_Fc_get, _PaIRS_PIV.ProcessingData_Fc_set)
    FcMedia = property(_PaIRS_PIV.ProcessingData_FcMedia_get, _PaIRS_PIV.ProcessingData_FcMedia_set)

    def __init__(self):
        _PaIRS_PIV.ProcessingData_swiginit(self, _PaIRS_PIV.new_ProcessingData())
    __swig_destroy__ = _PaIRS_PIV.delete_ProcessingData

# Register ProcessingData in _PaIRS_PIV:
_PaIRS_PIV.ProcessingData_swigregister(ProcessingData)
class PIV_Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.PIV_Output_swiginit(self, _PaIRS_PIV.new_PIV_Output())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Output
    u = property(_PaIRS_PIV.PIV_Output_u_get, _PaIRS_PIV.PIV_Output_u_set)
    v = property(_PaIRS_PIV.PIV_Output_v_get, _PaIRS_PIV.PIV_Output_v_set)
    sn = property(_PaIRS_PIV.PIV_Output_sn_get, _PaIRS_PIV.PIV_Output_sn_set)
    FCl = property(_PaIRS_PIV.PIV_Output_FCl_get, _PaIRS_PIV.PIV_Output_FCl_set)
    Info = property(_PaIRS_PIV.PIV_Output_Info_get, _PaIRS_PIV.PIV_Output_Info_set)
    x = property(_PaIRS_PIV.PIV_Output_x_get, _PaIRS_PIV.PIV_Output_x_set)
    y = property(_PaIRS_PIV.PIV_Output_y_get, _PaIRS_PIV.PIV_Output_y_set)
    w = property(_PaIRS_PIV.PIV_Output_w_get, _PaIRS_PIV.PIV_Output_w_set)
    z = property(_PaIRS_PIV.PIV_Output_z_get, _PaIRS_PIV.PIV_Output_z_set)
    flagStereo = property(_PaIRS_PIV.PIV_Output_flagStereo_get, _PaIRS_PIV.PIV_Output_flagStereo_set)

# Register PIV_Output in _PaIRS_PIV:
_PaIRS_PIV.PIV_Output_swigregister(PIV_Output)
class PIV(PIV_Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Inp = property(_PaIRS_PIV.PIV_Inp_get, _PaIRS_PIV.PIV_Inp_set)

    def __init__(self):
        _PaIRS_PIV.PIV_swiginit(self, _PaIRS_PIV.new_PIV())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV

    def PIV_Cfg(self, NomeFile):
        return _PaIRS_PIV.PIV_PIV_Cfg(self, NomeFile)

    def DefaultValues(self):
        return _PaIRS_PIV.PIV_DefaultValues(self)

    def readCfgProc(self, cfgName):
        return _PaIRS_PIV.PIV_readCfgProc(self, cfgName)

    def PIV_Run(self, p=None):
        return _PaIRS_PIV.PIV_PIV_Run(self, p)

    def SetVect(self, p):
        return _PaIRS_PIV.PIV_SetVect(self, p)

    def SetWindowingVect(self, List):
        return _PaIRS_PIV.PIV_SetWindowingVect(self, List)

    def GetVect(self):
        return _PaIRS_PIV.PIV_GetVect(self)

    def GetWindowingVect(self):
        return _PaIRS_PIV.PIV_GetWindowingVect(self)

    def SetImg(self, p):
        return _PaIRS_PIV.PIV_SetImg(self, p)
    PD = property(_PaIRS_PIV.PIV_PD_get, _PaIRS_PIV.PIV_PD_set)

# Register PIV in _PaIRS_PIV:
_PaIRS_PIV.PIV_swigregister(PIV)

def Punto(x,y):
  return  _Punto().build(x,y)   
from dataclasses import dataclass
@dataclass
class CalFlags:
#// mask values and shifts
   MASK     =    0xF    #//Si usano solo blocchi da 16 bit 
   SHIFT    =    0       #//numero di bit da rimuovere (o aggiungere) per arrivare a Cal
   SHIFT_CYL=    0x4   #//numero di bit da rimuovere (o aggiungere) per arrivare a Cyl 
   SHIFT_PH =    0x8   #//numero di bit da rimuovere per arrivare a
   SHIFT_PAR=    0xC   #//numero di bit da rimuovere per arrivare a
#  #// La prima indica il tipo di calibrazione Cal=(TipoCal>>tipoCalSHIFT )&tipoCalMASK  
#// cal types
   NORMALE  =    0   #//Calibrazione normale
   PER_PIANI=    1   #//Calibrazione per piani
   SOLOPIANO=    2   #//Calibrazione solo piano
   CYL      =    3   #//Calibrazione cilindrica
   SELFCAL  =    10   #//Calibrazione cilindrica per selfcal 
   Flag_PINHOLE = (0b0001<< SHIFT_PAR)   #//Flag Pinhole
   Flag_PIANI   = (0b0010<<SHIFT_PAR )  #//Flag piani
   Flag_LIN_VI  = (0b0100<<SHIFT_PAR )  #//Flag per salvare linee di vista   

# // Point flags
   P_NOT_FOUND    =  0   #//Point not found 
   P_FOUND        =  1   #//Point  found   
   P_REMOVED      =  4   #//Point  removes
   P_REMOVED_BULK =  8   #// Point removed bulk è acceso solo se in precedenza il punto era stato trovato
# // Plane flags
   PLANE_NOT_FOUND            =  1  #// Plane not found
   PLANE_ORIGIN_NOT_FOUND     =  2  #// Origin not found
   PLANE_NOT_INIT_TROVA_PUNTO =  4  #// findPlane not initialised
   PLANE_CLEAN                =  PLANE_NOT_FOUND| PLANE_ORIGIN_NOT_FOUND|PLANE_NOT_INIT_TROVA_PUNTO #//Clean all falgs

class Calib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    percorsoOut = property(_PaIRS_PIV.Calib_percorsoOut_get, _PaIRS_PIV.Calib_percorsoOut_set)
    NomeFileOut = property(_PaIRS_PIV.Calib_NomeFileOut_get, _PaIRS_PIV.Calib_NomeFileOut_set)
    EstensioneIn = property(_PaIRS_PIV.Calib_EstensioneIn_get, _PaIRS_PIV.Calib_EstensioneIn_set)
    percorso = property(_PaIRS_PIV.Calib_percorso_get, _PaIRS_PIV.Calib_percorso_set)
    NCam = property(_PaIRS_PIV.Calib_NCam_get, _PaIRS_PIV.Calib_NCam_set)
    PercErrMax = property(_PaIRS_PIV.Calib_PercErrMax_get, _PaIRS_PIV.Calib_PercErrMax_set)
    raggioInizialeRicerca = property(_PaIRS_PIV.Calib_raggioInizialeRicerca_get, _PaIRS_PIV.Calib_raggioInizialeRicerca_set)
    TipoTarget = property(_PaIRS_PIV.Calib_TipoTarget_get, _PaIRS_PIV.Calib_TipoTarget_set)
    dx = property(_PaIRS_PIV.Calib_dx_get, _PaIRS_PIV.Calib_dx_set)
    dy = property(_PaIRS_PIV.Calib_dy_get, _PaIRS_PIV.Calib_dy_set)
    dz = property(_PaIRS_PIV.Calib_dz_get, _PaIRS_PIV.Calib_dz_set)
    FlagCam = property(_PaIRS_PIV.Calib_FlagCam_get, _PaIRS_PIV.Calib_FlagCam_set)
    ColPart = property(_PaIRS_PIV.Calib_ColPart_get, _PaIRS_PIV.Calib_ColPart_set)
    RigaPart = property(_PaIRS_PIV.Calib_RigaPart_get, _PaIRS_PIV.Calib_RigaPart_set)
    TipoCal = property(_PaIRS_PIV.Calib_TipoCal_get, _PaIRS_PIV.Calib_TipoCal_set)
    FlagCal = property(_PaIRS_PIV.Calib_FlagCal_get, _PaIRS_PIV.Calib_FlagCal_set)
    NumCostCalib = property(_PaIRS_PIV.Calib_NumCostCalib_get, _PaIRS_PIV.Calib_NumCostCalib_set)
    NumCostCalib_All = property(_PaIRS_PIV.Calib_NumCostCalib_All_get, _PaIRS_PIV.Calib_NumCostCalib_All_set)
    Numpiani_PerCam = property(_PaIRS_PIV.Calib_Numpiani_PerCam_get, _PaIRS_PIV.Calib_Numpiani_PerCam_set)
    Numpiani = property(_PaIRS_PIV.Calib_Numpiani_get, _PaIRS_PIV.Calib_Numpiani_set)
    pasX = property(_PaIRS_PIV.Calib_pasX_get, _PaIRS_PIV.Calib_pasX_set)
    pasY = property(_PaIRS_PIV.Calib_pasY_get, _PaIRS_PIV.Calib_pasY_set)
    ImgW = property(_PaIRS_PIV.Calib_ImgW_get, _PaIRS_PIV.Calib_ImgW_set)
    ImgH = property(_PaIRS_PIV.Calib_ImgH_get, _PaIRS_PIV.Calib_ImgH_set)
    WinH = property(_PaIRS_PIV.Calib_WinH_get, _PaIRS_PIV.Calib_WinH_set)
    WinW = property(_PaIRS_PIV.Calib_WinW_get, _PaIRS_PIV.Calib_WinW_set)
    Threshold = property(_PaIRS_PIV.Calib_Threshold_get, _PaIRS_PIV.Calib_Threshold_set)
    FlagPos = property(_PaIRS_PIV.Calib_FlagPos_get, _PaIRS_PIV.Calib_FlagPos_set)
    piano = property(_PaIRS_PIV.Calib_piano_get, _PaIRS_PIV.Calib_piano_set)
    DimMat = property(_PaIRS_PIV.Calib_DimMat_get, _PaIRS_PIV.Calib_DimMat_set)
    Npti = property(_PaIRS_PIV.Calib_Npti_get, _PaIRS_PIV.Calib_Npti_set)
    NptiCorr = property(_PaIRS_PIV.Calib_NptiCorr_get, _PaIRS_PIV.Calib_NptiCorr_set)
    NptiNew = property(_PaIRS_PIV.Calib_NptiNew_get, _PaIRS_PIV.Calib_NptiNew_set)
    jMax = property(_PaIRS_PIV.Calib_jMax_get, _PaIRS_PIV.Calib_jMax_set)
    kMax = property(_PaIRS_PIV.Calib_kMax_get, _PaIRS_PIV.Calib_kMax_set)
    xMax = property(_PaIRS_PIV.Calib_xMax_get, _PaIRS_PIV.Calib_xMax_set)
    yMax = property(_PaIRS_PIV.Calib_yMax_get, _PaIRS_PIV.Calib_yMax_set)
    zMax = property(_PaIRS_PIV.Calib_zMax_get, _PaIRS_PIV.Calib_zMax_set)
    XMax = property(_PaIRS_PIV.Calib_XMax_get, _PaIRS_PIV.Calib_XMax_set)
    YMax = property(_PaIRS_PIV.Calib_YMax_get, _PaIRS_PIV.Calib_YMax_set)
    Errrms = property(_PaIRS_PIV.Calib_Errrms_get, _PaIRS_PIV.Calib_Errrms_set)
    ErrMax = property(_PaIRS_PIV.Calib_ErrMax_get, _PaIRS_PIV.Calib_ErrMax_set)
    DimWinCC = property(_PaIRS_PIV.Calib_DimWinCC_get, _PaIRS_PIV.Calib_DimWinCC_set)

    def __init__(self):
        _PaIRS_PIV.Calib_swiginit(self, _PaIRS_PIV.new_Calib())
    __swig_destroy__ = _PaIRS_PIV.delete_Calib

# Register Calib in _PaIRS_PIV:
_PaIRS_PIV.Calib_swigregister(Calib)
class _Punto(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_PaIRS_PIV._Punto_x_get, _PaIRS_PIV._Punto_x_set)
    y = property(_PaIRS_PIV._Punto_y_get, _PaIRS_PIV._Punto_y_set)

    def build(self, x, y):
        return _PaIRS_PIV._Punto_build(self, x, y)

    def __init__(self):
        _PaIRS_PIV._Punto_swiginit(self, _PaIRS_PIV.new__Punto())
    __swig_destroy__ = _PaIRS_PIV.delete__Punto

# Register _Punto in _PaIRS_PIV:
_PaIRS_PIV._Punto_swigregister(_Punto)
class CalibVect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cam = property(_PaIRS_PIV.CalibVect_cam_get, _PaIRS_PIV.CalibVect_cam_set)
    XOr = property(_PaIRS_PIV.CalibVect_XOr_get, _PaIRS_PIV.CalibVect_XOr_set)
    YOr = property(_PaIRS_PIV.CalibVect_YOr_get, _PaIRS_PIV.CalibVect_YOr_set)
    z = property(_PaIRS_PIV.CalibVect_z_get, _PaIRS_PIV.CalibVect_z_set)
    angCol = property(_PaIRS_PIV.CalibVect_angCol_get, _PaIRS_PIV.CalibVect_angCol_set)
    angRow = property(_PaIRS_PIV.CalibVect_angRow_get, _PaIRS_PIV.CalibVect_angRow_set)
    xOrShift = property(_PaIRS_PIV.CalibVect_xOrShift_get, _PaIRS_PIV.CalibVect_xOrShift_set)
    yOrShift = property(_PaIRS_PIV.CalibVect_yOrShift_get, _PaIRS_PIV.CalibVect_yOrShift_set)
    remPointsUp = property(_PaIRS_PIV.CalibVect_remPointsUp_get, _PaIRS_PIV.CalibVect_remPointsUp_set)
    remPointsDo = property(_PaIRS_PIV.CalibVect_remPointsDo_get, _PaIRS_PIV.CalibVect_remPointsDo_set)
    remPointsLe = property(_PaIRS_PIV.CalibVect_remPointsLe_get, _PaIRS_PIV.CalibVect_remPointsLe_set)
    remPointsRi = property(_PaIRS_PIV.CalibVect_remPointsRi_get, _PaIRS_PIV.CalibVect_remPointsRi_set)
    W = property(_PaIRS_PIV.CalibVect_W_get, _PaIRS_PIV.CalibVect_W_set)
    H = property(_PaIRS_PIV.CalibVect_H_get, _PaIRS_PIV.CalibVect_H_set)
    dColPix = property(_PaIRS_PIV.CalibVect_dColPix_get, _PaIRS_PIV.CalibVect_dColPix_set)
    dRigPix = property(_PaIRS_PIV.CalibVect_dRigPix_get, _PaIRS_PIV.CalibVect_dRigPix_set)
    nPointsPlane = property(_PaIRS_PIV.CalibVect_nPointsPlane_get, _PaIRS_PIV.CalibVect_nPointsPlane_set)
    flagPlane = property(_PaIRS_PIV.CalibVect_flagPlane_get, _PaIRS_PIV.CalibVect_flagPlane_set)
    costPlanes = property(_PaIRS_PIV.CalibVect_costPlanes_get, _PaIRS_PIV.CalibVect_costPlanes_set)
    X = property(_PaIRS_PIV.CalibVect_X_get, _PaIRS_PIV.CalibVect_X_set)
    Y = property(_PaIRS_PIV.CalibVect_Y_get, _PaIRS_PIV.CalibVect_Y_set)
    Xc = property(_PaIRS_PIV.CalibVect_Xc_get, _PaIRS_PIV.CalibVect_Xc_set)
    Yc = property(_PaIRS_PIV.CalibVect_Yc_get, _PaIRS_PIV.CalibVect_Yc_set)
    x = property(_PaIRS_PIV.CalibVect_x_get, _PaIRS_PIV.CalibVect_x_set)
    y = property(_PaIRS_PIV.CalibVect_y_get, _PaIRS_PIV.CalibVect_y_set)
    flag = property(_PaIRS_PIV.CalibVect_flag_get, _PaIRS_PIV.CalibVect_flag_set)
    cost = property(_PaIRS_PIV.CalibVect_cost_get, _PaIRS_PIV.CalibVect_cost_set)

    def __init__(self):
        _PaIRS_PIV.CalibVect_swiginit(self, _PaIRS_PIV.new_CalibVect())
    __swig_destroy__ = _PaIRS_PIV.delete_CalibVect

# Register CalibVect in _PaIRS_PIV:
_PaIRS_PIV.CalibVect_swigregister(CalibVect)
class Cal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_PaIRS_PIV.Cal_data_get, _PaIRS_PIV.Cal_data_set)
    vect = property(_PaIRS_PIV.Cal_vect_get, _PaIRS_PIV.Cal_vect_set)
    flagCalibrated = property(_PaIRS_PIV.Cal_flagCalibrated_get, _PaIRS_PIV.Cal_flagCalibrated_set)
    flagWorking = property(_PaIRS_PIV.Cal_flagWorking_get, _PaIRS_PIV.Cal_flagWorking_set)

    def __init__(self):
        _PaIRS_PIV.Cal_swiginit(self, _PaIRS_PIV.new_Cal())
    __swig_destroy__ = _PaIRS_PIV.delete_Cal

    def DefaultValues(self):
        return _PaIRS_PIV.Cal_DefaultValues(self)

    def setImgs(self, List):
        return _PaIRS_PIV.Cal_setImgs(self, List)

    def findPoint(self, p):
        return _PaIRS_PIV.Cal_findPoint(self, p)

    def initFindPoint(self, p):
        return _PaIRS_PIV.Cal_initFindPoint(self, p)

    def getMask(self):
        return _PaIRS_PIV.Cal_getMask(self)

    def cleanPlanes(self):
        return _PaIRS_PIV.Cal_cleanPlanes(self)

    def evalAngles(self, plane, flagOper, pp):
        return _PaIRS_PIV.Cal_evalAngles(self, plane, flagOper, pp)

    def getCams(self):
        return _PaIRS_PIV.Cal_getCams(self)

    def getImgRoot(self, plane):
        return _PaIRS_PIV.Cal_getImgRoot(self, plane)

    def setImgRoot(self, plane, name):
        return _PaIRS_PIV.Cal_setImgRoot(self, plane, name)

    def readCfg(self, fileName):
        return _PaIRS_PIV.Cal_readCfg(self, fileName)

    def findPlane(self, plane):
        return _PaIRS_PIV.Cal_findPlane(self, plane)

    def calibrate(self, pFunOut):
        return _PaIRS_PIV.Cal_calibrate(self, pFunOut)

    def saveCfg(self, FlagPiano, nomeFileCfg):
        return _PaIRS_PIV.Cal_saveCfg(self, FlagPiano, nomeFileCfg)

    def saveConst(self):
        return _PaIRS_PIV.Cal_saveConst(self)

    def pointFromCalib(self, List, cam):
        return _PaIRS_PIV.Cal_pointFromCalib(self, List, cam)

    def setAllFlagPlane(self, list):
        return _PaIRS_PIV.Cal_setAllFlagPlane(self, list)

    def setFlagPlane(self, plane, flag):
        return _PaIRS_PIV.Cal_setFlagPlane(self, plane, flag)

    def setOriginFound(self, p, flag):
        return _PaIRS_PIV.Cal_setOriginFound(self, p, flag)

    def originFound(self, p):
        return _PaIRS_PIV.Cal_originFound(self, p)

    def indFromCoord(self, i, j, p):
        return _PaIRS_PIV.Cal_indFromCoord(self, i, j, p)

    def removeMaxErrPoint(self):
        return _PaIRS_PIV.Cal_removeMaxErrPoint(self)

    def removePoint(self, p):
        return _PaIRS_PIV.Cal_removePoint(self, p)

    def removeBulk(self):
        return _PaIRS_PIV.Cal_removeBulk(self)

    def setPuTrovaCC(self, list, plane):
        return _PaIRS_PIV.Cal_setPuTrovaCC(self, list, plane)

    def getPuTrovaCC(self, plane):
        return _PaIRS_PIV.Cal_getPuTrovaCC(self, plane)

    def savePoints(self):
        return _PaIRS_PIV.Cal_savePoints(self)

    def allocAndinit(self, list, flag):
        return _PaIRS_PIV.Cal_allocAndinit(self, list, flag)

    def checkCalibration(self):
        return _PaIRS_PIV.Cal_checkCalibration(self)

# Register Cal in _PaIRS_PIV:
_PaIRS_PIV.Cal_swigregister(Cal)
class MappingFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.MappingFunction_swiginit(self, _PaIRS_PIV.new_MappingFunction())
    __swig_destroy__ = _PaIRS_PIV.delete_MappingFunction

    def readCal(self, list):
        return _PaIRS_PIV.MappingFunction_readCal(self, list)

    def worldToImgPoint(self, list, cam):
        return _PaIRS_PIV.MappingFunction_worldToImgPoint(self, list, cam)

    def worldToImg(self, inpArray, cam, outArray):
        return _PaIRS_PIV.MappingFunction_worldToImg(self, inpArray, cam, outArray)

    def imgToWorldPoint(self, worldPoint, z, cam):
        return _PaIRS_PIV.MappingFunction_imgToWorldPoint(self, worldPoint, z, cam)

    def imgToWorld(self, inpArray, cam, outArray):
        return _PaIRS_PIV.MappingFunction_imgToWorld(self, inpArray, cam, outArray)
    nCam = property(_PaIRS_PIV.MappingFunction_nCam_get, _PaIRS_PIV.MappingFunction_nCam_set)
    numCostCalib = property(_PaIRS_PIV.MappingFunction_numCostCalib_get, _PaIRS_PIV.MappingFunction_numCostCalib_set)
    flagCal = property(_PaIRS_PIV.MappingFunction_flagCal_get, _PaIRS_PIV.MappingFunction_flagCal_set)

# Register MappingFunction in _PaIRS_PIV:
_PaIRS_PIV.MappingFunction_swigregister(MappingFunction)
class PyFunOutCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def funOutCalib(self, a, s):
        return _PaIRS_PIV.PyFunOutCalib_funOutCalib(self, a, s)
    __swig_destroy__ = _PaIRS_PIV.delete_PyFunOutCalib

    def __init__(self):
        if self.__class__ == PyFunOutCalib:
            _self = None
        else:
            _self = self
        _PaIRS_PIV.PyFunOutCalib_swiginit(self, _PaIRS_PIV.new_PyFunOutCalib(_self, ))
    def __disown__(self):
        self.this.disown()
        _PaIRS_PIV.disown_PyFunOutCalib(self)
        return weakref.proxy(self)

# Register PyFunOutCalib in _PaIRS_PIV:
_PaIRS_PIV.PyFunOutCalib_swigregister(PyFunOutCalib)

def getPyFunCalib(funOutCalib):
    return _PaIRS_PIV.getPyFunCalib(funOutCalib)

#// PythonOutFromPIV class is defined and derived from C++ class PyFunOutCalib
class PythonOutFromLib(PyFunOutCalib) :
   Count = 0
#// Define Python class 'constructor'
   def __init__(self) :
#// Call C++ base class constructor
      PyFunOutCalib.__init__(self)
      self.Count=0
#// Override C++ method: virtual int handle
   def funOutCalib(self, a, o) :
      self.Count += 1
#print(f"PyOut {self.Count} {a}  {b}")
#if self.Count== 2:
#return  -1
      return 0



class DatiProcVect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_PaIRS_PIV.DatiProcVect_h_get, _PaIRS_PIV.DatiProcVect_h_set)
    w = property(_PaIRS_PIV.DatiProcVect_w_get, _PaIRS_PIV.DatiProcVect_w_set)
    Xinf = property(_PaIRS_PIV.DatiProcVect_Xinf_get, _PaIRS_PIV.DatiProcVect_Xinf_set)
    Yinf = property(_PaIRS_PIV.DatiProcVect_Yinf_get, _PaIRS_PIV.DatiProcVect_Yinf_set)
    Xsup = property(_PaIRS_PIV.DatiProcVect_Xsup_get, _PaIRS_PIV.DatiProcVect_Xsup_set)
    Ysup = property(_PaIRS_PIV.DatiProcVect_Ysup_get, _PaIRS_PIV.DatiProcVect_Ysup_set)
    PianoLaser = property(_PaIRS_PIV.DatiProcVect_PianoLaser_get, _PaIRS_PIV.DatiProcVect_PianoLaser_set)
    teta = property(_PaIRS_PIV.DatiProcVect_teta_get, _PaIRS_PIV.DatiProcVect_teta_set)
    dOrt = property(_PaIRS_PIV.DatiProcVect_dOrt_get, _PaIRS_PIV.DatiProcVect_dOrt_set)
    dPar = property(_PaIRS_PIV.DatiProcVect_dPar_get, _PaIRS_PIV.DatiProcVect_dPar_set)
    dParOld = property(_PaIRS_PIV.DatiProcVect_dParOld_get, _PaIRS_PIV.DatiProcVect_dParOld_set)
    widthPar = property(_PaIRS_PIV.DatiProcVect_widthPar_get, _PaIRS_PIV.DatiProcVect_widthPar_set)
    maxCC = property(_PaIRS_PIV.DatiProcVect_maxCC_get, _PaIRS_PIV.DatiProcVect_maxCC_set)
    x = property(_PaIRS_PIV.DatiProcVect_x_get, _PaIRS_PIV.DatiProcVect_x_set)
    y = property(_PaIRS_PIV.DatiProcVect_y_get, _PaIRS_PIV.DatiProcVect_y_set)
    z = property(_PaIRS_PIV.DatiProcVect_z_get, _PaIRS_PIV.DatiProcVect_z_set)
    info = property(_PaIRS_PIV.DatiProcVect_info_get, _PaIRS_PIV.DatiProcVect_info_set)
    tanCsi = property(_PaIRS_PIV.DatiProcVect_tanCsi_get, _PaIRS_PIV.DatiProcVect_tanCsi_set)
    CC = property(_PaIRS_PIV.DatiProcVect_CC_get, _PaIRS_PIV.DatiProcVect_CC_set)
    init4DArrayRot = property(_PaIRS_PIV.DatiProcVect_init4DArrayRot_get, _PaIRS_PIV.DatiProcVect_init4DArrayRot_set)
    CCrot = property(_PaIRS_PIV.DatiProcVect_CCrot_get, _PaIRS_PIV.DatiProcVect_CCrot_set)

    def __init__(self):
        _PaIRS_PIV.DatiProcVect_swiginit(self, _PaIRS_PIV.new_DatiProcVect())
    __swig_destroy__ = _PaIRS_PIV.delete_DatiProcVect

# Register DatiProcVect in _PaIRS_PIV:
_PaIRS_PIV.DatiProcVect_swigregister(DatiProcVect)
class datiproc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ImgHRad = property(_PaIRS_PIV.datiproc_ImgHRad_get, _PaIRS_PIV.datiproc_ImgHRad_set)
    ImgWRad = property(_PaIRS_PIV.datiproc_ImgWRad_get, _PaIRS_PIV.datiproc_ImgWRad_set)
    FlagCoordRad = property(_PaIRS_PIV.datiproc_FlagCoordRad_get, _PaIRS_PIV.datiproc_FlagCoordRad_set)
    RigaPart = property(_PaIRS_PIV.datiproc_RigaPart_get, _PaIRS_PIV.datiproc_RigaPart_set)
    ColPart = property(_PaIRS_PIV.datiproc_ColPart_get, _PaIRS_PIV.datiproc_ColPart_set)
    Sfas = property(_PaIRS_PIV.datiproc_Sfas_get, _PaIRS_PIV.datiproc_Sfas_set)
    FlagZonaCom = property(_PaIRS_PIV.datiproc_FlagZonaCom_get, _PaIRS_PIV.datiproc_FlagZonaCom_set)
    xinfZC = property(_PaIRS_PIV.datiproc_xinfZC_get, _PaIRS_PIV.datiproc_xinfZC_set)
    yinfZC = property(_PaIRS_PIV.datiproc_yinfZC_get, _PaIRS_PIV.datiproc_yinfZC_set)
    xsupZC = property(_PaIRS_PIV.datiproc_xsupZC_get, _PaIRS_PIV.datiproc_xsupZC_set)
    ysupZC = property(_PaIRS_PIV.datiproc_ysupZC_get, _PaIRS_PIV.datiproc_ysupZC_set)
    xinf = property(_PaIRS_PIV.datiproc_xinf_get, _PaIRS_PIV.datiproc_xinf_set)
    yinf = property(_PaIRS_PIV.datiproc_yinf_get, _PaIRS_PIV.datiproc_yinf_set)
    xsup = property(_PaIRS_PIV.datiproc_xsup_get, _PaIRS_PIV.datiproc_xsup_set)
    ysup = property(_PaIRS_PIV.datiproc_ysup_get, _PaIRS_PIV.datiproc_ysup_set)
    RisxRadd = property(_PaIRS_PIV.datiproc_RisxRadd_get, _PaIRS_PIV.datiproc_RisxRadd_set)
    RisyRadd = property(_PaIRS_PIV.datiproc_RisyRadd_get, _PaIRS_PIV.datiproc_RisyRadd_set)
    dt = property(_PaIRS_PIV.datiproc_dt_get, _PaIRS_PIV.datiproc_dt_set)
    tipo = property(_PaIRS_PIV.datiproc_tipo_get, _PaIRS_PIV.datiproc_tipo_set)
    Cam = property(_PaIRS_PIV.datiproc_Cam_get, _PaIRS_PIV.datiproc_Cam_set)
    FlagInt = property(_PaIRS_PIV.datiproc_FlagInt_get, _PaIRS_PIV.datiproc_FlagInt_set)
    NumVetx = property(_PaIRS_PIV.datiproc_NumVetx_get, _PaIRS_PIV.datiproc_NumVetx_set)
    NumVety = property(_PaIRS_PIV.datiproc_NumVety_get, _PaIRS_PIV.datiproc_NumVety_set)
    ImgW = property(_PaIRS_PIV.datiproc_ImgW_get, _PaIRS_PIV.datiproc_ImgW_set)
    ImgH = property(_PaIRS_PIV.datiproc_ImgH_get, _PaIRS_PIV.datiproc_ImgH_set)
    FlagCal = property(_PaIRS_PIV.datiproc_FlagCal_get, _PaIRS_PIV.datiproc_FlagCal_set)
    IntPar = property(_PaIRS_PIV.datiproc_IntPar_get, _PaIRS_PIV.datiproc_IntPar_set)
    NumCostCalib = property(_PaIRS_PIV.datiproc_NumCostCalib_get, _PaIRS_PIV.datiproc_NumCostCalib_set)
    FlagImgProc = property(_PaIRS_PIV.datiproc_FlagImgProc_get, _PaIRS_PIV.datiproc_FlagImgProc_set)

    def __init__(self):
        _PaIRS_PIV.datiproc_swiginit(self, _PaIRS_PIV.new_datiproc())
    __swig_destroy__ = _PaIRS_PIV.delete_datiproc

# Register datiproc in _PaIRS_PIV:
_PaIRS_PIV.datiproc_swigregister(datiproc)
class SPIVinput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Tag = property(_PaIRS_PIV.SPIVinput_Tag_get, _PaIRS_PIV.SPIVinput_Tag_set)
    nomecfgPiv = property(_PaIRS_PIV.SPIVinput_nomecfgPiv_get, _PaIRS_PIV.SPIVinput_nomecfgPiv_set)
    nomecal = property(_PaIRS_PIV.SPIVinput_nomecal_get, _PaIRS_PIV.SPIVinput_nomecal_set)
    NomeCostPiano = property(_PaIRS_PIV.SPIVinput_NomeCostPiano_get, _PaIRS_PIV.SPIVinput_NomeCostPiano_set)
    percorsocal = property(_PaIRS_PIV.SPIVinput_percorsocal_get, _PaIRS_PIV.SPIVinput_percorsocal_set)
    ImgRoot = property(_PaIRS_PIV.SPIVinput_ImgRoot_get, _PaIRS_PIV.SPIVinput_ImgRoot_set)
    InDir = property(_PaIRS_PIV.SPIVinput_InDir_get, _PaIRS_PIV.SPIVinput_InDir_set)
    InExt = property(_PaIRS_PIV.SPIVinput_InExt_get, _PaIRS_PIV.SPIVinput_InExt_set)
    OutRoot = property(_PaIRS_PIV.SPIVinput_OutRoot_get, _PaIRS_PIV.SPIVinput_OutRoot_set)
    OutDir = property(_PaIRS_PIV.SPIVinput_OutDir_get, _PaIRS_PIV.SPIVinput_OutDir_set)
    OutExt = property(_PaIRS_PIV.SPIVinput_OutExt_get, _PaIRS_PIV.SPIVinput_OutExt_set)
    NomeFileAttuale = property(_PaIRS_PIV.SPIVinput_NomeFileAttuale_get, _PaIRS_PIV.SPIVinput_NomeFileAttuale_set)
    FirstImg = property(_PaIRS_PIV.SPIVinput_FirstImg_get, _PaIRS_PIV.SPIVinput_FirstImg_set)
    LastImg = property(_PaIRS_PIV.SPIVinput_LastImg_get, _PaIRS_PIV.SPIVinput_LastImg_set)
    Digit = property(_PaIRS_PIV.SPIVinput_Digit_get, _PaIRS_PIV.SPIVinput_Digit_set)
    OutFlag = property(_PaIRS_PIV.SPIVinput_OutFlag_get, _PaIRS_PIV.SPIVinput_OutFlag_set)
    WrtFlag = property(_PaIRS_PIV.SPIVinput_WrtFlag_get, _PaIRS_PIV.SPIVinput_WrtFlag_set)
    StatFlag = property(_PaIRS_PIV.SPIVinput_StatFlag_get, _PaIRS_PIV.SPIVinput_StatFlag_set)
    salvarad = property(_PaIRS_PIV.SPIVinput_salvarad_get, _PaIRS_PIV.SPIVinput_salvarad_set)
    FlagRotImg = property(_PaIRS_PIV.SPIVinput_FlagRotImg_get, _PaIRS_PIV.SPIVinput_FlagRotImg_set)
    FlagImgTau = property(_PaIRS_PIV.SPIVinput_FlagImgTau_get, _PaIRS_PIV.SPIVinput_FlagImgTau_set)
    Niter = property(_PaIRS_PIV.SPIVinput_Niter_get, _PaIRS_PIV.SPIVinput_Niter_set)
    FlagParallel = property(_PaIRS_PIV.SPIVinput_FlagParallel_get, _PaIRS_PIV.SPIVinput_FlagParallel_set)
    FlagRis = property(_PaIRS_PIV.SPIVinput_FlagRis_get, _PaIRS_PIV.SPIVinput_FlagRis_set)
    dt = property(_PaIRS_PIV.SPIVinput_dt_get, _PaIRS_PIV.SPIVinput_dt_set)
    RigaPart = property(_PaIRS_PIV.SPIVinput_RigaPart_get, _PaIRS_PIV.SPIVinput_RigaPart_set)
    ColPart = property(_PaIRS_PIV.SPIVinput_ColPart_get, _PaIRS_PIV.SPIVinput_ColPart_set)
    Sfas = property(_PaIRS_PIV.SPIVinput_Sfas_get, _PaIRS_PIV.SPIVinput_Sfas_set)

    def __init__(self):
        _PaIRS_PIV.SPIVinput_swiginit(self, _PaIRS_PIV.new_SPIVinput())
    __swig_destroy__ = _PaIRS_PIV.delete_SPIVinput

# Register SPIVinput in _PaIRS_PIV:
_PaIRS_PIV.SPIVinput_swigregister(SPIVinput)
class DispAvgCorr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HCella = property(_PaIRS_PIV.DispAvgCorr_HCella_get, _PaIRS_PIV.DispAvgCorr_HCella_set)
    WCella = property(_PaIRS_PIV.DispAvgCorr_WCella_get, _PaIRS_PIV.DispAvgCorr_WCella_set)
    HGrid = property(_PaIRS_PIV.DispAvgCorr_HGrid_get, _PaIRS_PIV.DispAvgCorr_HGrid_set)
    WGrid = property(_PaIRS_PIV.DispAvgCorr_WGrid_get, _PaIRS_PIV.DispAvgCorr_WGrid_set)
    H = property(_PaIRS_PIV.DispAvgCorr_H_get, _PaIRS_PIV.DispAvgCorr_H_set)
    W = property(_PaIRS_PIV.DispAvgCorr_W_get, _PaIRS_PIV.DispAvgCorr_W_set)
    ic = property(_PaIRS_PIV.DispAvgCorr_ic_get, _PaIRS_PIV.DispAvgCorr_ic_set)
    jc = property(_PaIRS_PIV.DispAvgCorr_jc_get, _PaIRS_PIV.DispAvgCorr_jc_set)
    NImg = property(_PaIRS_PIV.DispAvgCorr_NImg_get, _PaIRS_PIV.DispAvgCorr_NImg_set)
    nIterMaxValid = property(_PaIRS_PIV.DispAvgCorr_nIterMaxValid_get, _PaIRS_PIV.DispAvgCorr_nIterMaxValid_set)
    numStd = property(_PaIRS_PIV.DispAvgCorr_numStd_get, _PaIRS_PIV.DispAvgCorr_numStd_set)
    dOrtMean = property(_PaIRS_PIV.DispAvgCorr_dOrtMean_get, _PaIRS_PIV.DispAvgCorr_dOrtMean_set)
    dParMean = property(_PaIRS_PIV.DispAvgCorr_dParMean_get, _PaIRS_PIV.DispAvgCorr_dParMean_set)
    percOutlier = property(_PaIRS_PIV.DispAvgCorr_percOutlier_get, _PaIRS_PIV.DispAvgCorr_percOutlier_set)
    DeltaZ = property(_PaIRS_PIV.DispAvgCorr_DeltaZ_get, _PaIRS_PIV.DispAvgCorr_DeltaZ_set)
    ta0Mean = property(_PaIRS_PIV.DispAvgCorr_ta0Mean_get, _PaIRS_PIV.DispAvgCorr_ta0Mean_set)
    ta1Mean = property(_PaIRS_PIV.DispAvgCorr_ta1Mean_get, _PaIRS_PIV.DispAvgCorr_ta1Mean_set)
    RisxRadd = property(_PaIRS_PIV.DispAvgCorr_RisxRadd_get, _PaIRS_PIV.DispAvgCorr_RisxRadd_set)
    RaggioFiltro = property(_PaIRS_PIV.DispAvgCorr_RaggioFiltro_get, _PaIRS_PIV.DispAvgCorr_RaggioFiltro_set)
    SogliaCor = property(_PaIRS_PIV.DispAvgCorr_SogliaCor_get, _PaIRS_PIV.DispAvgCorr_SogliaCor_set)
    N_NormEpi = property(_PaIRS_PIV.DispAvgCorr_N_NormEpi_get, _PaIRS_PIV.DispAvgCorr_N_NormEpi_set)
    minStdDOrt = property(_PaIRS_PIV.DispAvgCorr_minStdDOrt_get, _PaIRS_PIV.DispAvgCorr_minStdDOrt_set)
    minStdDPar = property(_PaIRS_PIV.DispAvgCorr_minStdDPar_get, _PaIRS_PIV.DispAvgCorr_minStdDPar_set)
    minStdMaxCC = property(_PaIRS_PIV.DispAvgCorr_minStdMaxCC_get, _PaIRS_PIV.DispAvgCorr_minStdMaxCC_set)

    def __init__(self):
        _PaIRS_PIV.DispAvgCorr_swiginit(self, _PaIRS_PIV.new_DispAvgCorr())
    __swig_destroy__ = _PaIRS_PIV.delete_DispAvgCorr

# Register DispAvgCorr in _PaIRS_PIV:
_PaIRS_PIV.DispAvgCorr_swigregister(DispAvgCorr)
class StereoBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.StereoBase_swiginit(self, _PaIRS_PIV.new_StereoBase())
    __swig_destroy__ = _PaIRS_PIV.delete_StereoBase

    def evalCommonZone(self):
        return _PaIRS_PIV.StereoBase_evalCommonZone(self)

    def readCalConst(self):
        return _PaIRS_PIV.StereoBase_readCalConst(self)

    def setCalConst(self, flagCal, numCostCalib, pyCost):
        return _PaIRS_PIV.StereoBase_setCalConst(self, flagCal, numCostCalib, pyCost)

    def readPlaneConst(self):
        return _PaIRS_PIV.StereoBase_readPlaneConst(self)
    SPIVIn = property(_PaIRS_PIV.StereoBase_SPIVIn_get, _PaIRS_PIV.StereoBase_SPIVIn_set)
    dataProc = property(_PaIRS_PIV.StereoBase_dataProc_get, _PaIRS_PIV.StereoBase_dataProc_set)
    vect = property(_PaIRS_PIV.StereoBase_vect_get, _PaIRS_PIV.StereoBase_vect_set)
    flagWorking = property(_PaIRS_PIV.StereoBase_flagWorking_get, _PaIRS_PIV.StereoBase_flagWorking_set)

# Register StereoBase in _PaIRS_PIV:
_PaIRS_PIV.StereoBase_swigregister(StereoBase)
class Stereo(StereoBase, PIV):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.Stereo_swiginit(self, _PaIRS_PIV.new_Stereo())
    __swig_destroy__ = _PaIRS_PIV.delete_Stereo

    def readAllCfgs(self, fileName):
        return _PaIRS_PIV.Stereo_readAllCfgs(self, fileName)

    def initAlloc(self, pOut):
        return _PaIRS_PIV.Stereo_initAlloc(self, pOut)

    def run(self, list):
        return _PaIRS_PIV.Stereo_run(self, list)
    PD0 = property(_PaIRS_PIV.Stereo_PD0_get, _PaIRS_PIV.Stereo_PD0_set)
    PD1 = property(_PaIRS_PIV.Stereo_PD1_get, _PaIRS_PIV.Stereo_PD1_set)

# Register Stereo in _PaIRS_PIV:
_PaIRS_PIV.Stereo_swigregister(Stereo)
class StereoDisp(StereoBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.StereoDisp_swiginit(self, _PaIRS_PIV.new_StereoDisp())
    __swig_destroy__ = _PaIRS_PIV.delete_StereoDisp

    def readAllCfgs(self, fileName):
        return _PaIRS_PIV.StereoDisp_readAllCfgs(self, fileName)

    def readCfg(self, fileName):
        return _PaIRS_PIV.StereoDisp_readCfg(self, fileName)

    def initAllocDisp(self):
        return _PaIRS_PIV.StereoDisp_initAllocDisp(self)

    def deWarpAndCalcCC(self, list):
        return _PaIRS_PIV.StereoDisp_deWarpAndCalcCC(self, list)

    def calcDisparity(self):
        return _PaIRS_PIV.StereoDisp_calcDisparity(self)

    def evaldXdY(self):
        return _PaIRS_PIV.StereoDisp_evaldXdY(self)
    dispAvCo = property(_PaIRS_PIV.StereoDisp_dispAvCo_get, _PaIRS_PIV.StereoDisp_dispAvCo_set)

# Register StereoDisp in _PaIRS_PIV:
_PaIRS_PIV.StereoDisp_swigregister(StereoDisp)
class AniDiff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nIt = property(_PaIRS_PIV.AniDiff_nIt_get, _PaIRS_PIV.AniDiff_nIt_set)
    K = property(_PaIRS_PIV.AniDiff_K_get, _PaIRS_PIV.AniDiff_K_set)
    lam = property(_PaIRS_PIV.AniDiff_lam_get, _PaIRS_PIV.AniDiff_lam_set)
    semiLen = property(_PaIRS_PIV.AniDiff_semiLen_get, _PaIRS_PIV.AniDiff_semiLen_set)
    flagFilter = property(_PaIRS_PIV.AniDiff_flagFilter_get, _PaIRS_PIV.AniDiff_flagFilter_set)
    flagBC = property(_PaIRS_PIV.AniDiff_flagBC_get, _PaIRS_PIV.AniDiff_flagBC_set)
    numThreads = property(_PaIRS_PIV.AniDiff_numThreads_get, _PaIRS_PIV.AniDiff_numThreads_set)
    numBoxes = property(_PaIRS_PIV.AniDiff_numBoxes_get, _PaIRS_PIV.AniDiff_numBoxes_set)
    indBoxes = property(_PaIRS_PIV.AniDiff_indBoxes_get, _PaIRS_PIV.AniDiff_indBoxes_set)

    def __init__(self):
        _PaIRS_PIV.AniDiff_swiginit(self, _PaIRS_PIV.new_AniDiff())
    __swig_destroy__ = _PaIRS_PIV.delete_AniDiff

# Register AniDiff in _PaIRS_PIV:
_PaIRS_PIV.AniDiff_swigregister(AniDiff)
class AniDif(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.AniDif_swiginit(self, _PaIRS_PIV.new_AniDif())
    __swig_destroy__ = _PaIRS_PIV.delete_AniDif

    def SizeOfReal(self):
        return _PaIRS_PIV.AniDif_SizeOfReal(self)

    def run(self, npArr):
        return _PaIRS_PIV.AniDif_run(self, npArr)

    def initAll(self, npArr):
        return _PaIRS_PIV.AniDif_initAll(self, npArr)
    data = property(_PaIRS_PIV.AniDif_data_get, _PaIRS_PIV.AniDif_data_set)
    indBoxes = property(_PaIRS_PIV.AniDif_indBoxes_get, _PaIRS_PIV.AniDif_indBoxes_set)
    boxAverage = property(_PaIRS_PIV.AniDif_boxAverage_get, _PaIRS_PIV.AniDif_boxAverage_set)

# Register AniDif in _PaIRS_PIV:
_PaIRS_PIV.AniDif_swigregister(AniDif)
class DataFromPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_PaIRS_PIV.DataFromPIV_a_get, _PaIRS_PIV.DataFromPIV_a_set)
    b = property(_PaIRS_PIV.DataFromPIV_b_get, _PaIRS_PIV.DataFromPIV_b_set)
    Out = property(_PaIRS_PIV.DataFromPIV_Out_get, _PaIRS_PIV.DataFromPIV_Out_set)

    def __init__(self):
        _PaIRS_PIV.DataFromPIV_swiginit(self, _PaIRS_PIV.new_DataFromPIV())
    __swig_destroy__ = _PaIRS_PIV.delete_DataFromPIV

# Register DataFromPIV in _PaIRS_PIV:
_PaIRS_PIV.DataFromPIV_swigregister(DataFromPIV)
class PyFunOutPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def FunOut(self, a, b, o):
        return _PaIRS_PIV.PyFunOutPIV_FunOut(self, a, b, o)
    __swig_destroy__ = _PaIRS_PIV.delete_PyFunOutPIV

    def __init__(self):
        if self.__class__ == PyFunOutPIV:
            _self = None
        else:
            _self = self
        _PaIRS_PIV.PyFunOutPIV_swiginit(self, _PaIRS_PIV.new_PyFunOutPIV(_self, ))
    def __disown__(self):
        self.this.disown()
        _PaIRS_PIV.disown_PyFunOutPIV(self)
        return weakref.proxy(self)

# Register PyFunOutPIV in _PaIRS_PIV:
_PaIRS_PIV.PyFunOutPIV_swigregister(PyFunOutPIV)

def GetPyFunction(FunOut):
    return _PaIRS_PIV.GetPyFunction(FunOut)

#// PythonOutFromPIV class is defined and derived from C++ class PyFunOutPIV
class PythonOutFromPIV(PyFunOutPIV) :
   Count = 0
#// Define Python class 'constructor'
   def __init__(self) :
#// Call C++ base class constructor
      PyFunOutPIV.__init__(self)

#// Override C++ method: virtual int handle
   def FunOut(self, a, b, o) :
      self.Count += 1
#print(f"PyOut {self.Count} {a}  {b}")
#if self.Count== 2:
#return  -1
      return 0




