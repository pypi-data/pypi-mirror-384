# DO NOT MODIFY -- This file is generated by type_spec
# ruff: noqa: E402 Q003
# fmt: off
# isort: skip_file
from __future__ import annotations
import typing  # noqa: F401
import datetime  # noqa: F401
from decimal import Decimal  # noqa: F401
import dataclasses
from pkgs.serialization import serial_class
from pkgs.serialization import serial_alias_annotation
from . import base_t

__all__: list[str] = [
    "IdentifierKey",
    "IdentifierKeyBatchReference",
    "IdentifierKeyId",
    "IdentifierKeyRefName",
]


# DO NOT MODIFY -- This file is generated by type_spec
@serial_class(
    named_type_path="sdk.identifier.IdentifierKeyId",
    parse_require={"type"},
)
@dataclasses.dataclass(slots=base_t.ENABLE_SLOTS, kw_only=True, frozen=True, eq=True)  # type: ignore[literal-required]
class IdentifierKeyId:
    type: typing.Literal["id"] = "id"
    id: base_t.ObjectId


# DO NOT MODIFY -- This file is generated by type_spec
@serial_class(
    named_type_path="sdk.identifier.IdentifierKeyRefName",
    parse_require={"type"},
)
@dataclasses.dataclass(slots=base_t.ENABLE_SLOTS, kw_only=True, frozen=True, eq=True)  # type: ignore[literal-required]
class IdentifierKeyRefName:
    type: typing.Literal["ref_name"] = "ref_name"
    ref_name: str


# DO NOT MODIFY -- This file is generated by type_spec
@serial_class(
    named_type_path="sdk.identifier.IdentifierKeyBatchReference",
    parse_require={"type"},
)
@dataclasses.dataclass(slots=base_t.ENABLE_SLOTS, kw_only=True, frozen=True, eq=True)  # type: ignore[literal-required]
class IdentifierKeyBatchReference:
    type: typing.Literal["batch_reference"] = "batch_reference"
    reference: str


# DO NOT MODIFY -- This file is generated by type_spec
IdentifierKey = typing.Annotated[
    IdentifierKeyId | IdentifierKeyBatchReference | IdentifierKeyRefName,
    serial_alias_annotation(
    named_type_path="sdk.identifier.IdentifierKey",
    ),
]
# DO NOT MODIFY -- This file is generated by type_spec
