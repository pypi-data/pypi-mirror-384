# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from flowhunt.models.sort_direction import SortDirection
from typing import Optional, Set
from typing_extensions import Self

class LogsSearchRequest(BaseModel):
    """
    Request model for searching logs.
    """ # noqa: E501
    log_types: Optional[List[StrictStr]] = None
    log_levels: Optional[List[StrictStr]] = None
    category_id: Optional[StrictStr] = None
    from_date: Optional[StrictStr] = None
    to_date: Optional[StrictStr] = None
    search_text: Optional[StrictStr] = None
    page: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=1, description="Page number for pagination")
    page_size: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=50, description="Number of results per page")
    sort_by: Optional[StrictStr] = Field(default='created_at', description="Field to sort results by")
    sort_direction: Optional[SortDirection] = Field(default=None, description="Sort direction (asc or desc)")
    __properties: ClassVar[List[str]] = ["log_types", "log_levels", "category_id", "from_date", "to_date", "search_text", "page", "page_size", "sort_by", "sort_direction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogsSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if log_types (nullable) is None
        # and model_fields_set contains the field
        if self.log_types is None and "log_types" in self.model_fields_set:
            _dict['log_types'] = None

        # set to None if log_levels (nullable) is None
        # and model_fields_set contains the field
        if self.log_levels is None and "log_levels" in self.model_fields_set:
            _dict['log_levels'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['category_id'] = None

        # set to None if from_date (nullable) is None
        # and model_fields_set contains the field
        if self.from_date is None and "from_date" in self.model_fields_set:
            _dict['from_date'] = None

        # set to None if to_date (nullable) is None
        # and model_fields_set contains the field
        if self.to_date is None and "to_date" in self.model_fields_set:
            _dict['to_date'] = None

        # set to None if search_text (nullable) is None
        # and model_fields_set contains the field
        if self.search_text is None and "search_text" in self.model_fields_set:
            _dict['search_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogsSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "log_types": obj.get("log_types"),
            "log_levels": obj.get("log_levels"),
            "category_id": obj.get("category_id"),
            "from_date": obj.get("from_date"),
            "to_date": obj.get("to_date"),
            "search_text": obj.get("search_text"),
            "page": obj.get("page") if obj.get("page") is not None else 1,
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 50,
            "sort_by": obj.get("sort_by") if obj.get("sort_by") is not None else 'created_at',
            "sort_direction": obj.get("sort_direction")
        })
        return _obj


