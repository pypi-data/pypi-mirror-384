# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.flow_branch import FlowBranch
from typing import Optional, Set
from typing_extensions import Self

class FlowSessionCreateFromFlowRequest(BaseModel):
    """
    FlowSessionCreateFromFlowRequest
    """ # noqa: E501
    url: Optional[StrictStr] = None
    lang: Optional[StrictStr] = None
    access_token: Optional[StrictStr] = None
    refresh_token: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    variables: Optional[Dict[str, StrictStr]] = None
    flow_id: StrictStr = Field(description="The flow ID")
    on_chat_opened_postback_url: Optional[StrictStr] = None
    flow_branch: Optional[FlowBranch] = Field(default=None, description="The flow branch")
    __properties: ClassVar[List[str]] = ["url", "lang", "access_token", "refresh_token", "username", "password", "variables", "flow_id", "on_chat_opened_postback_url", "flow_branch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlowSessionCreateFromFlowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if lang (nullable) is None
        # and model_fields_set contains the field
        if self.lang is None and "lang" in self.model_fields_set:
            _dict['lang'] = None

        # set to None if access_token (nullable) is None
        # and model_fields_set contains the field
        if self.access_token is None and "access_token" in self.model_fields_set:
            _dict['access_token'] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict['refresh_token'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if variables (nullable) is None
        # and model_fields_set contains the field
        if self.variables is None and "variables" in self.model_fields_set:
            _dict['variables'] = None

        # set to None if on_chat_opened_postback_url (nullable) is None
        # and model_fields_set contains the field
        if self.on_chat_opened_postback_url is None and "on_chat_opened_postback_url" in self.model_fields_set:
            _dict['on_chat_opened_postback_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlowSessionCreateFromFlowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "lang": obj.get("lang"),
            "access_token": obj.get("access_token"),
            "refresh_token": obj.get("refresh_token"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "variables": obj.get("variables"),
            "flow_id": obj.get("flow_id"),
            "on_chat_opened_postback_url": obj.get("on_chat_opened_postback_url"),
            "flow_branch": obj.get("flow_branch")
        })
        return _obj


