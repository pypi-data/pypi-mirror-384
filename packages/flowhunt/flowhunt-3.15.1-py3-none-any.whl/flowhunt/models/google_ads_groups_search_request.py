# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.google_ads_action_type import GoogleAdsActionType
from flowhunt.models.google_ads_group_status import GoogleAdsGroupStatus
from flowhunt.models.pagination import Pagination
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsGroupsSearchRequest(BaseModel):
    """
    GoogleAdsGroupsSearchRequest
    """ # noqa: E501
    customer_id: Optional[StrictStr] = None
    campaign_id: Optional[StrictStr] = None
    group_id: Optional[StrictStr] = None
    group_name: Optional[StrictStr] = None
    language_code: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    action_type: Optional[GoogleAdsActionType] = None
    group_status: Optional[GoogleAdsGroupStatus] = None
    limit: Optional[StrictInt] = Field(default=50, description="Limit of the search")
    pagination: Optional[Pagination] = None
    __properties: ClassVar[List[str]] = ["customer_id", "campaign_id", "group_id", "group_name", "language_code", "country", "action_type", "group_status", "limit", "pagination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsGroupsSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['group_id'] = None

        # set to None if group_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_name is None and "group_name" in self.model_fields_set:
            _dict['group_name'] = None

        # set to None if language_code (nullable) is None
        # and model_fields_set contains the field
        if self.language_code is None and "language_code" in self.model_fields_set:
            _dict['language_code'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if action_type (nullable) is None
        # and model_fields_set contains the field
        if self.action_type is None and "action_type" in self.model_fields_set:
            _dict['action_type'] = None

        # set to None if group_status (nullable) is None
        # and model_fields_set contains the field
        if self.group_status is None and "group_status" in self.model_fields_set:
            _dict['group_status'] = None

        # set to None if pagination (nullable) is None
        # and model_fields_set contains the field
        if self.pagination is None and "pagination" in self.model_fields_set:
            _dict['pagination'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsGroupsSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "campaign_id": obj.get("campaign_id"),
            "group_id": obj.get("group_id"),
            "group_name": obj.get("group_name"),
            "language_code": obj.get("language_code"),
            "country": obj.get("country"),
            "action_type": obj.get("action_type"),
            "group_status": obj.get("group_status"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 50,
            "pagination": Pagination.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None
        })
        return _obj


