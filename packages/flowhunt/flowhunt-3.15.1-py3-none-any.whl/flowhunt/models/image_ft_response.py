# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.ft_status import FTStatus
from flowhunt.models.ft_type import FTType
from typing import Optional, Set
from typing_extensions import Self

class ImageFTResponse(BaseModel):
    """
    ImageFTResponse
    """ # noqa: E501
    ft_type: FTType = Field(description="Fine tuning type")
    ft_id: StrictStr = Field(description="Fine tuning id")
    name: StrictStr = Field(description="Fine tuning name")
    steps: StrictInt = Field(description="Number of steps")
    lora_rank: StrictInt = Field(description="Lora rank")
    trigger_word: StrictStr = Field(description="Trigger word")
    training_images: List[StrictStr] = Field(description="Training images")
    status: FTStatus = Field(description="Status")
    cover_image: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["ft_type", "ft_id", "name", "steps", "lora_rank", "trigger_word", "training_images", "status", "cover_image"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageFTResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cover_image (nullable) is None
        # and model_fields_set contains the field
        if self.cover_image is None and "cover_image" in self.model_fields_set:
            _dict['cover_image'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageFTResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ft_type": obj.get("ft_type"),
            "ft_id": obj.get("ft_id"),
            "name": obj.get("name"),
            "steps": obj.get("steps"),
            "lora_rank": obj.get("lora_rank"),
            "trigger_word": obj.get("trigger_word"),
            "training_images": obj.get("training_images"),
            "status": obj.get("status"),
            "cover_image": obj.get("cover_image")
        })
        return _obj


