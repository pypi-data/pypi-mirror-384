# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.billing_provider import BillingProvider
from flowhunt.models.subscription_plan import SubscriptionPlan
from typing import Optional, Set
from typing_extensions import Self

class UserResponse(BaseModel):
    """
    UserResponse
    """ # noqa: E501
    user_id: StrictStr = Field(description="User ID")
    email: StrictStr = Field(description="Email of the user")
    username: StrictStr = Field(description="Name of the user")
    is_active: Optional[StrictBool] = None
    avatar_url: Optional[StrictStr] = None
    api_key_workspace_id: Optional[StrictStr] = None
    product_plans: Optional[Dict[str, SubscriptionPlan]] = None
    billing_provider: Optional[BillingProvider] = None
    __properties: ClassVar[List[str]] = ["user_id", "email", "username", "is_active", "avatar_url", "api_key_workspace_id", "product_plans", "billing_provider"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['is_active'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatar_url'] = None

        # set to None if api_key_workspace_id (nullable) is None
        # and model_fields_set contains the field
        if self.api_key_workspace_id is None and "api_key_workspace_id" in self.model_fields_set:
            _dict['api_key_workspace_id'] = None

        # set to None if product_plans (nullable) is None
        # and model_fields_set contains the field
        if self.product_plans is None and "product_plans" in self.model_fields_set:
            _dict['product_plans'] = None

        # set to None if billing_provider (nullable) is None
        # and model_fields_set contains the field
        if self.billing_provider is None and "billing_provider" in self.model_fields_set:
            _dict['billing_provider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "is_active": obj.get("is_active"),
            "avatar_url": obj.get("avatar_url"),
            "api_key_workspace_id": obj.get("api_key_workspace_id"),
            "product_plans": dict((_k, _v) for _k, _v in obj.get("product_plans").items()) if obj.get("product_plans") is not None else None,
            "billing_provider": obj.get("billing_provider")
        })
        return _obj


