# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from flowhunt.models.flow_assistant_add_component_metadata import FlowAssistantAddComponentMetadata
from flowhunt.models.flow_assistant_add_connection_metadata import FlowAssistantAddConnectionMetadata
from flowhunt.models.flow_assistant_create_blank_flow_metadata import FlowAssistantCreateBlankFlowMetadata
from flowhunt.models.flow_assistant_delete_component_metadata import FlowAssistantDeleteComponentMetadata
from flowhunt.models.flow_assistant_delete_connection_metadata import FlowAssistantDeleteConnectionMetadata
from flowhunt.models.flow_assistant_update_component_metadata import FlowAssistantUpdateComponentMetadata
from flowhunt.models.flow_session_loading_metadata import FlowSessionLoadingMetadata
from flowhunt.models.flow_session_message_feedback_metadata import FlowSessionMessageFeedbackMetadata
from flowhunt.models.flow_session_message_metadata import FlowSessionMessageMetadata
from flowhunt.models.flow_session_task_response_metadata import FlowSessionTaskResponseMetadata
from flowhunt.models.flow_session_tool_call_metadata import FlowSessionToolCallMetadata
from flowhunt.models.system_message_metadata import SystemMessageMetadata
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

METADATA_ANY_OF_SCHEMAS = ["FlowAssistantAddComponentMetadata", "FlowAssistantAddConnectionMetadata", "FlowAssistantCreateBlankFlowMetadata", "FlowAssistantDeleteComponentMetadata", "FlowAssistantDeleteConnectionMetadata", "FlowAssistantUpdateComponentMetadata", "FlowSessionLoadingMetadata", "FlowSessionMessageFeedbackMetadata", "FlowSessionMessageMetadata", "FlowSessionTaskResponseMetadata", "FlowSessionToolCallMetadata", "SystemMessageMetadata"]

class Metadata(BaseModel):
    """
    Metadata
    """

    # data type: FlowSessionMessageMetadata
    anyof_schema_1_validator: Optional[FlowSessionMessageMetadata] = None
    # data type: FlowSessionLoadingMetadata
    anyof_schema_2_validator: Optional[FlowSessionLoadingMetadata] = None
    # data type: FlowSessionMessageFeedbackMetadata
    anyof_schema_3_validator: Optional[FlowSessionMessageFeedbackMetadata] = None
    # data type: FlowSessionToolCallMetadata
    anyof_schema_4_validator: Optional[FlowSessionToolCallMetadata] = None
    # data type: FlowSessionTaskResponseMetadata
    anyof_schema_5_validator: Optional[FlowSessionTaskResponseMetadata] = None
    # data type: FlowAssistantAddComponentMetadata
    anyof_schema_6_validator: Optional[FlowAssistantAddComponentMetadata] = None
    # data type: FlowAssistantDeleteComponentMetadata
    anyof_schema_7_validator: Optional[FlowAssistantDeleteComponentMetadata] = None
    # data type: FlowAssistantUpdateComponentMetadata
    anyof_schema_8_validator: Optional[FlowAssistantUpdateComponentMetadata] = None
    # data type: FlowAssistantAddConnectionMetadata
    anyof_schema_9_validator: Optional[FlowAssistantAddConnectionMetadata] = None
    # data type: FlowAssistantDeleteConnectionMetadata
    anyof_schema_10_validator: Optional[FlowAssistantDeleteConnectionMetadata] = None
    # data type: FlowAssistantCreateBlankFlowMetadata
    anyof_schema_11_validator: Optional[FlowAssistantCreateBlankFlowMetadata] = None
    # data type: SystemMessageMetadata
    anyof_schema_12_validator: Optional[SystemMessageMetadata] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[FlowAssistantAddComponentMetadata, FlowAssistantAddConnectionMetadata, FlowAssistantCreateBlankFlowMetadata, FlowAssistantDeleteComponentMetadata, FlowAssistantDeleteConnectionMetadata, FlowAssistantUpdateComponentMetadata, FlowSessionLoadingMetadata, FlowSessionMessageFeedbackMetadata, FlowSessionMessageMetadata, FlowSessionTaskResponseMetadata, FlowSessionToolCallMetadata, SystemMessageMetadata]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "FlowAssistantAddComponentMetadata", "FlowAssistantAddConnectionMetadata", "FlowAssistantCreateBlankFlowMetadata", "FlowAssistantDeleteComponentMetadata", "FlowAssistantDeleteConnectionMetadata", "FlowAssistantUpdateComponentMetadata", "FlowSessionLoadingMetadata", "FlowSessionMessageFeedbackMetadata", "FlowSessionMessageMetadata", "FlowSessionTaskResponseMetadata", "FlowSessionToolCallMetadata", "SystemMessageMetadata" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        if v is None:
            return v

        instance = Metadata.model_construct()
        error_messages = []
        # validate data type: FlowSessionMessageMetadata
        if not isinstance(v, FlowSessionMessageMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowSessionMessageMetadata`")
        else:
            return v

        # validate data type: FlowSessionLoadingMetadata
        if not isinstance(v, FlowSessionLoadingMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowSessionLoadingMetadata`")
        else:
            return v

        # validate data type: FlowSessionMessageFeedbackMetadata
        if not isinstance(v, FlowSessionMessageFeedbackMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowSessionMessageFeedbackMetadata`")
        else:
            return v

        # validate data type: FlowSessionToolCallMetadata
        if not isinstance(v, FlowSessionToolCallMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowSessionToolCallMetadata`")
        else:
            return v

        # validate data type: FlowSessionTaskResponseMetadata
        if not isinstance(v, FlowSessionTaskResponseMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowSessionTaskResponseMetadata`")
        else:
            return v

        # validate data type: FlowAssistantAddComponentMetadata
        if not isinstance(v, FlowAssistantAddComponentMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantAddComponentMetadata`")
        else:
            return v

        # validate data type: FlowAssistantDeleteComponentMetadata
        if not isinstance(v, FlowAssistantDeleteComponentMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantDeleteComponentMetadata`")
        else:
            return v

        # validate data type: FlowAssistantUpdateComponentMetadata
        if not isinstance(v, FlowAssistantUpdateComponentMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantUpdateComponentMetadata`")
        else:
            return v

        # validate data type: FlowAssistantAddConnectionMetadata
        if not isinstance(v, FlowAssistantAddConnectionMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantAddConnectionMetadata`")
        else:
            return v

        # validate data type: FlowAssistantDeleteConnectionMetadata
        if not isinstance(v, FlowAssistantDeleteConnectionMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantDeleteConnectionMetadata`")
        else:
            return v

        # validate data type: FlowAssistantCreateBlankFlowMetadata
        if not isinstance(v, FlowAssistantCreateBlankFlowMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowAssistantCreateBlankFlowMetadata`")
        else:
            return v

        # validate data type: SystemMessageMetadata
        if not isinstance(v, SystemMessageMetadata):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SystemMessageMetadata`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Metadata with anyOf schemas: FlowAssistantAddComponentMetadata, FlowAssistantAddConnectionMetadata, FlowAssistantCreateBlankFlowMetadata, FlowAssistantDeleteComponentMetadata, FlowAssistantDeleteConnectionMetadata, FlowAssistantUpdateComponentMetadata, FlowSessionLoadingMetadata, FlowSessionMessageFeedbackMetadata, FlowSessionMessageMetadata, FlowSessionTaskResponseMetadata, FlowSessionToolCallMetadata, SystemMessageMetadata. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        # anyof_schema_1_validator: Optional[FlowSessionMessageMetadata] = None
        try:
            instance.actual_instance = FlowSessionMessageMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FlowSessionLoadingMetadata] = None
        try:
            instance.actual_instance = FlowSessionLoadingMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[FlowSessionMessageFeedbackMetadata] = None
        try:
            instance.actual_instance = FlowSessionMessageFeedbackMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[FlowSessionToolCallMetadata] = None
        try:
            instance.actual_instance = FlowSessionToolCallMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[FlowSessionTaskResponseMetadata] = None
        try:
            instance.actual_instance = FlowSessionTaskResponseMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[FlowAssistantAddComponentMetadata] = None
        try:
            instance.actual_instance = FlowAssistantAddComponentMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[FlowAssistantDeleteComponentMetadata] = None
        try:
            instance.actual_instance = FlowAssistantDeleteComponentMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[FlowAssistantUpdateComponentMetadata] = None
        try:
            instance.actual_instance = FlowAssistantUpdateComponentMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[FlowAssistantAddConnectionMetadata] = None
        try:
            instance.actual_instance = FlowAssistantAddConnectionMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[FlowAssistantDeleteConnectionMetadata] = None
        try:
            instance.actual_instance = FlowAssistantDeleteConnectionMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[FlowAssistantCreateBlankFlowMetadata] = None
        try:
            instance.actual_instance = FlowAssistantCreateBlankFlowMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[SystemMessageMetadata] = None
        try:
            instance.actual_instance = SystemMessageMetadata.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Metadata with anyOf schemas: FlowAssistantAddComponentMetadata, FlowAssistantAddConnectionMetadata, FlowAssistantCreateBlankFlowMetadata, FlowAssistantDeleteComponentMetadata, FlowAssistantDeleteConnectionMetadata, FlowAssistantUpdateComponentMetadata, FlowSessionLoadingMetadata, FlowSessionMessageFeedbackMetadata, FlowSessionMessageMetadata, FlowSessionTaskResponseMetadata, FlowSessionToolCallMetadata, SystemMessageMetadata. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FlowAssistantAddComponentMetadata, FlowAssistantAddConnectionMetadata, FlowAssistantCreateBlankFlowMetadata, FlowAssistantDeleteComponentMetadata, FlowAssistantDeleteConnectionMetadata, FlowAssistantUpdateComponentMetadata, FlowSessionLoadingMetadata, FlowSessionMessageFeedbackMetadata, FlowSessionMessageMetadata, FlowSessionTaskResponseMetadata, FlowSessionToolCallMetadata, SystemMessageMetadata]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


