# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ImageInferenceResponse(BaseModel):
    """
    ImageInferenceResponse
    """ # noqa: E501
    inference_id: StrictStr = Field(description="The ID of the inference")
    image_url_outputs: List[StrictStr] = Field(description="The URL of the image")
    date_created: datetime = Field(description="The date the image was created")
    prompt: StrictStr = Field(description="The prompt used for the inference")
    styles: List[StrictStr] = Field(description="The styles used for the inference")
    effects: List[StrictStr] = Field(description="The effects used for the inference")
    aspect_ratio: StrictStr = Field(description="The aspect ratio of the output images")
    ai_model: StrictStr = Field(description="The AI model used for the inference")
    status: StrictStr = Field(description="The status of the inference")
    __properties: ClassVar[List[str]] = ["inference_id", "image_url_outputs", "date_created", "prompt", "styles", "effects", "aspect_ratio", "ai_model", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageInferenceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageInferenceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inference_id": obj.get("inference_id"),
            "image_url_outputs": obj.get("image_url_outputs"),
            "date_created": obj.get("date_created"),
            "prompt": obj.get("prompt"),
            "styles": obj.get("styles"),
            "effects": obj.get("effects"),
            "aspect_ratio": obj.get("aspect_ratio"),
            "ai_model": obj.get("ai_model"),
            "status": obj.get("status")
        })
        return _obj


