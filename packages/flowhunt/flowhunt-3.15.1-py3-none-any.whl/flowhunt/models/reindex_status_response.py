# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.reindex_progress import ReindexProgress
from flowhunt.models.reindex_scope import ReindexScope
from flowhunt.models.reindex_status import ReindexStatus
from typing import Optional, Set
from typing_extensions import Self

class ReindexStatusResponse(BaseModel):
    """
    ReindexStatusResponse
    """ # noqa: E501
    scope: ReindexScope
    workspace_id: Optional[StrictStr] = None
    embedding_model: StrictStr
    overall_status: ReindexStatus
    sources: Dict[str, ReindexProgress]
    collection_name: StrictStr
    new_collection_name: Optional[StrictStr] = None
    started_at: datetime
    completed_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["scope", "workspace_id", "embedding_model", "overall_status", "sources", "collection_name", "new_collection_name", "started_at", "completed_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReindexStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in sources (dict)
        _field_dict = {}
        if self.sources:
            for _key_sources in self.sources:
                if self.sources[_key_sources]:
                    _field_dict[_key_sources] = self.sources[_key_sources].to_dict()
            _dict['sources'] = _field_dict
        # set to None if workspace_id (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_id is None and "workspace_id" in self.model_fields_set:
            _dict['workspace_id'] = None

        # set to None if new_collection_name (nullable) is None
        # and model_fields_set contains the field
        if self.new_collection_name is None and "new_collection_name" in self.model_fields_set:
            _dict['new_collection_name'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReindexStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "workspace_id": obj.get("workspace_id"),
            "embedding_model": obj.get("embedding_model"),
            "overall_status": obj.get("overall_status"),
            "sources": dict(
                (_k, ReindexProgress.from_dict(_v))
                for _k, _v in obj["sources"].items()
            )
            if obj.get("sources") is not None
            else None,
            "collection_name": obj.get("collection_name"),
            "new_collection_name": obj.get("new_collection_name"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at")
        })
        return _obj


