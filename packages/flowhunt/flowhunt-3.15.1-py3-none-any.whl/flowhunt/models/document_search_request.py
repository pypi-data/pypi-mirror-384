# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.document_status import DocumentStatus
from flowhunt.models.document_type import DocumentType
from flowhunt.models.pagination import Pagination
from flowhunt.models.user_document_status import UserDocumentStatus
from typing import Optional, Set
from typing_extensions import Self

class DocumentSearchRequest(BaseModel):
    """
    DocumentSearchRequest
    """ # noqa: E501
    doc_id: Optional[StrictStr] = None
    cat_id: Optional[StrictStr] = None
    doc_name: Optional[StrictStr] = None
    doc_type: Optional[DocumentType] = None
    status: Optional[DocumentStatus] = None
    user_status: Optional[UserDocumentStatus] = None
    updated_at_from: Optional[datetime] = None
    updated_at_to: Optional[datetime] = None
    limit: Optional[StrictInt] = None
    pagination: Optional[Pagination] = None
    __properties: ClassVar[List[str]] = ["doc_id", "cat_id", "doc_name", "doc_type", "status", "user_status", "updated_at_from", "updated_at_to", "limit", "pagination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # set to None if doc_id (nullable) is None
        # and model_fields_set contains the field
        if self.doc_id is None and "doc_id" in self.model_fields_set:
            _dict['doc_id'] = None

        # set to None if cat_id (nullable) is None
        # and model_fields_set contains the field
        if self.cat_id is None and "cat_id" in self.model_fields_set:
            _dict['cat_id'] = None

        # set to None if doc_name (nullable) is None
        # and model_fields_set contains the field
        if self.doc_name is None and "doc_name" in self.model_fields_set:
            _dict['doc_name'] = None

        # set to None if doc_type (nullable) is None
        # and model_fields_set contains the field
        if self.doc_type is None and "doc_type" in self.model_fields_set:
            _dict['doc_type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if user_status (nullable) is None
        # and model_fields_set contains the field
        if self.user_status is None and "user_status" in self.model_fields_set:
            _dict['user_status'] = None

        # set to None if updated_at_from (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at_from is None and "updated_at_from" in self.model_fields_set:
            _dict['updated_at_from'] = None

        # set to None if updated_at_to (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at_to is None and "updated_at_to" in self.model_fields_set:
            _dict['updated_at_to'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if pagination (nullable) is None
        # and model_fields_set contains the field
        if self.pagination is None and "pagination" in self.model_fields_set:
            _dict['pagination'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_id": obj.get("doc_id"),
            "cat_id": obj.get("cat_id"),
            "doc_name": obj.get("doc_name"),
            "doc_type": obj.get("doc_type"),
            "status": obj.get("status"),
            "user_status": obj.get("user_status"),
            "updated_at_from": obj.get("updated_at_from"),
            "updated_at_to": obj.get("updated_at_to"),
            "limit": obj.get("limit"),
            "pagination": Pagination.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None
        })
        return _obj


