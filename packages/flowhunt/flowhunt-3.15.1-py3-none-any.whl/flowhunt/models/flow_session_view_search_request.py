# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.pagination import Pagination
from typing import Optional, Set
from typing_extensions import Self

class FlowSessionViewSearchRequest(BaseModel):
    """
    FlowSessionViewSearchRequest
    """ # noqa: E501
    chatbot_id: Optional[StrictStr] = None
    flow_id: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    limit: Optional[StrictInt] = None
    created_at_filter: Optional[Dict[str, Any]] = None
    last_message_at_filter: Optional[Dict[str, Any]] = None
    duration_filter: Optional[Dict[str, Any]] = None
    msg_count_filter: Optional[Dict[str, Any]] = None
    credits_filter: Optional[Dict[str, Any]] = None
    chatbot_name: Optional[StrictStr] = None
    flow_name: Optional[StrictStr] = None
    ipaddress_filter: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    positive_feedback: Optional[StrictInt] = None
    negative_feedback: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["chatbot_id", "flow_id", "tags", "limit", "created_at_filter", "last_message_at_filter", "duration_filter", "msg_count_filter", "credits_filter", "chatbot_name", "flow_name", "ipaddress_filter", "pagination", "positive_feedback", "negative_feedback"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlowSessionViewSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # set to None if chatbot_id (nullable) is None
        # and model_fields_set contains the field
        if self.chatbot_id is None and "chatbot_id" in self.model_fields_set:
            _dict['chatbot_id'] = None

        # set to None if flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.flow_id is None and "flow_id" in self.model_fields_set:
            _dict['flow_id'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if created_at_filter (nullable) is None
        # and model_fields_set contains the field
        if self.created_at_filter is None and "created_at_filter" in self.model_fields_set:
            _dict['created_at_filter'] = None

        # set to None if last_message_at_filter (nullable) is None
        # and model_fields_set contains the field
        if self.last_message_at_filter is None and "last_message_at_filter" in self.model_fields_set:
            _dict['last_message_at_filter'] = None

        # set to None if duration_filter (nullable) is None
        # and model_fields_set contains the field
        if self.duration_filter is None and "duration_filter" in self.model_fields_set:
            _dict['duration_filter'] = None

        # set to None if msg_count_filter (nullable) is None
        # and model_fields_set contains the field
        if self.msg_count_filter is None and "msg_count_filter" in self.model_fields_set:
            _dict['msg_count_filter'] = None

        # set to None if credits_filter (nullable) is None
        # and model_fields_set contains the field
        if self.credits_filter is None and "credits_filter" in self.model_fields_set:
            _dict['credits_filter'] = None

        # set to None if chatbot_name (nullable) is None
        # and model_fields_set contains the field
        if self.chatbot_name is None and "chatbot_name" in self.model_fields_set:
            _dict['chatbot_name'] = None

        # set to None if flow_name (nullable) is None
        # and model_fields_set contains the field
        if self.flow_name is None and "flow_name" in self.model_fields_set:
            _dict['flow_name'] = None

        # set to None if ipaddress_filter (nullable) is None
        # and model_fields_set contains the field
        if self.ipaddress_filter is None and "ipaddress_filter" in self.model_fields_set:
            _dict['ipaddress_filter'] = None

        # set to None if pagination (nullable) is None
        # and model_fields_set contains the field
        if self.pagination is None and "pagination" in self.model_fields_set:
            _dict['pagination'] = None

        # set to None if positive_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.positive_feedback is None and "positive_feedback" in self.model_fields_set:
            _dict['positive_feedback'] = None

        # set to None if negative_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.negative_feedback is None and "negative_feedback" in self.model_fields_set:
            _dict['negative_feedback'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlowSessionViewSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatbot_id": obj.get("chatbot_id"),
            "flow_id": obj.get("flow_id"),
            "tags": obj.get("tags"),
            "limit": obj.get("limit"),
            "created_at_filter": obj.get("created_at_filter"),
            "last_message_at_filter": obj.get("last_message_at_filter"),
            "duration_filter": obj.get("duration_filter"),
            "msg_count_filter": obj.get("msg_count_filter"),
            "credits_filter": obj.get("credits_filter"),
            "chatbot_name": obj.get("chatbot_name"),
            "flow_name": obj.get("flow_name"),
            "ipaddress_filter": obj.get("ipaddress_filter"),
            "pagination": Pagination.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None,
            "positive_feedback": obj.get("positive_feedback"),
            "negative_feedback": obj.get("negative_feedback")
        })
        return _obj


