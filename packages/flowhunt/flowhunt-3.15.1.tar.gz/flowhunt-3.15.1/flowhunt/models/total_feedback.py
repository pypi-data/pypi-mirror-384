# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TotalFeedback(BaseModel):
    """
    TotalFeedback
    """ # noqa: E501
    positive: Optional[StrictInt] = Field(default=0, description="Total count of positive feedback")
    negative: Optional[StrictInt] = Field(default=0, description="Total count of negative feedback")
    session_count: Optional[StrictInt] = Field(default=0, description="Total count of unique sessions (visitor count)")
    human_message_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Average human messages per session")
    tool_calling_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Average tool calls per session")
    __properties: ClassVar[List[str]] = ["positive", "negative", "session_count", "human_message_count", "tool_calling_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TotalFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TotalFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "positive": obj.get("positive") if obj.get("positive") is not None else 0,
            "negative": obj.get("negative") if obj.get("negative") is not None else 0,
            "session_count": obj.get("session_count") if obj.get("session_count") is not None else 0,
            "human_message_count": obj.get("human_message_count") if obj.get("human_message_count") is not None else 0.0,
            "tool_calling_count": obj.get("tool_calling_count") if obj.get("tool_calling_count") is not None else 0.0
        })
        return _obj


