# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.google_ads_match_type import GoogleAdsMatchType
from flowhunt.models.serp_search_engine_type import SerpSearchEngineType
from typing import Optional, Set
from typing_extensions import Self

class SerpClusterKeywordResponse(BaseModel):
    """
    SerpClusterKeywordResponse
    """ # noqa: E501
    unique_id: StrictStr = Field(description="Unique ID")
    keyword_id: StrictStr = Field(description="Query ID")
    keyword: StrictStr = Field(description="Query")
    country: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    is_negative: Optional[StrictBool] = None
    match_type: Optional[GoogleAdsMatchType]
    campaign_id: StrictStr = Field(description="Campaign ID")
    group_id: StrictStr = Field(description="Group ID")
    search_engine: Optional[SerpSearchEngineType]
    __properties: ClassVar[List[str]] = ["unique_id", "keyword_id", "keyword", "country", "language", "is_negative", "match_type", "campaign_id", "group_id", "search_engine"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SerpClusterKeywordResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if is_negative (nullable) is None
        # and model_fields_set contains the field
        if self.is_negative is None and "is_negative" in self.model_fields_set:
            _dict['is_negative'] = None

        # set to None if match_type (nullable) is None
        # and model_fields_set contains the field
        if self.match_type is None and "match_type" in self.model_fields_set:
            _dict['match_type'] = None

        # set to None if search_engine (nullable) is None
        # and model_fields_set contains the field
        if self.search_engine is None and "search_engine" in self.model_fields_set:
            _dict['search_engine'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SerpClusterKeywordResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unique_id": obj.get("unique_id"),
            "keyword_id": obj.get("keyword_id"),
            "keyword": obj.get("keyword"),
            "country": obj.get("country"),
            "language": obj.get("language"),
            "is_negative": obj.get("is_negative"),
            "match_type": obj.get("match_type"),
            "campaign_id": obj.get("campaign_id"),
            "group_id": obj.get("group_id"),
            "search_engine": obj.get("search_engine")
        })
        return _obj


