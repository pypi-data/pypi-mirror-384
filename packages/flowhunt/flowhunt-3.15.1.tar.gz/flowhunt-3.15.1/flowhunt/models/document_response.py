# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentResponse(BaseModel):
    """
    DocumentResponse
    """ # noqa: E501
    doc_id: StrictStr = Field(description="Document ID")
    cat_id: StrictStr = Field(description="Category ID")
    workspace_id: StrictStr = Field(description="Workspace ID")
    doc_name: StrictStr = Field(description="Document name")
    url: Optional[StrictStr] = None
    doc_type: StrictStr = Field(description="Document type")
    user_status: StrictStr = Field(description="User status")
    status: StrictStr = Field(description="Document status")
    updated_at: datetime = Field(description="Document updated at")
    __properties: ClassVar[List[str]] = ["doc_id", "cat_id", "workspace_id", "doc_name", "url", "doc_type", "user_status", "status", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_id": obj.get("doc_id"),
            "cat_id": obj.get("cat_id"),
            "workspace_id": obj.get("workspace_id"),
            "doc_name": obj.get("doc_name"),
            "url": obj.get("url"),
            "doc_type": obj.get("doc_type"),
            "user_status": obj.get("user_status"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


