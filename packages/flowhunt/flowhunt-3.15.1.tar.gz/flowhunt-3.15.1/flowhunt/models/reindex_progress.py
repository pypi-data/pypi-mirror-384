# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.reindex_data_source import ReindexDataSource
from flowhunt.models.reindex_status import ReindexStatus
from typing import Optional, Set
from typing_extensions import Self

class ReindexProgress(BaseModel):
    """
    ReindexProgress
    """ # noqa: E501
    workspace_id: Optional[StrictStr] = None
    embedding_model: StrictStr
    status: ReindexStatus
    data_source: ReindexDataSource
    total_items: Optional[StrictInt] = 0
    processed_items: Optional[StrictInt] = 0
    failed_items: Optional[StrictInt] = 0
    started_at: datetime
    updated_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["workspace_id", "embedding_model", "status", "data_source", "total_items", "processed_items", "failed_items", "started_at", "updated_at", "completed_at", "error_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReindexProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if workspace_id (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_id is None and "workspace_id" in self.model_fields_set:
            _dict['workspace_id'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReindexProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "embedding_model": obj.get("embedding_model"),
            "status": obj.get("status"),
            "data_source": obj.get("data_source"),
            "total_items": obj.get("total_items") if obj.get("total_items") is not None else 0,
            "processed_items": obj.get("processed_items") if obj.get("processed_items") is not None else 0,
            "failed_items": obj.get("failed_items") if obj.get("failed_items") is not None else 0,
            "started_at": obj.get("started_at"),
            "updated_at": obj.get("updated_at"),
            "completed_at": obj.get("completed_at"),
            "error_message": obj.get("error_message")
        })
        return _obj


