# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.bool_char import BoolChar
from flowhunt.models.schedule_frequency import ScheduleFrequency
from flowhunt.models.schedule_status import ScheduleStatus
from flowhunt.models.schedule_type import ScheduleType
from typing import Optional, Set
from typing_extensions import Self

class ScheduleResponse(BaseModel):
    """
    ScheduleResponse
    """ # noqa: E501
    workspace_id: StrictStr = Field(description="Workspace ID")
    schedule_id: StrictStr = Field(description="Schedule ID")
    url: StrictStr = Field(description="URL to be scheduled")
    frequency: ScheduleFrequency = Field(description="Frequency of the schedule D - Daily, W - Weekly, M - Monthly, Y - Yearly")
    schedule_type: ScheduleType = Field(description="Type of the schedule (U - URL, D - Domain, S - Sitemap)")
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    status: ScheduleStatus = Field(description="Status of the schedule (N - New, F - Finished, P - Pending, E - Error, C - Cancelled")
    status_message: Optional[StrictStr] = None
    cnt_scheduled: Optional[StrictInt]
    cnt_completed: Optional[StrictInt]
    cnt_failed: Optional[StrictInt]
    with_screenshot: Optional[BoolChar]
    with_browser: Optional[BoolChar]
    follow_links: Optional[BoolChar]
    with_proxy_rotation: Optional[StrictStr] = None
    disallow_urls: Optional[StrictStr] = None
    filter_urls: Optional[StrictStr] = None
    custom_headers: Optional[StrictStr] = None
    urls_extra_config: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["workspace_id", "schedule_id", "url", "frequency", "schedule_type", "start_time", "end_time", "status", "status_message", "cnt_scheduled", "cnt_completed", "cnt_failed", "with_screenshot", "with_browser", "follow_links", "with_proxy_rotation", "disallow_urls", "filter_urls", "custom_headers", "urls_extra_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if status_message (nullable) is None
        # and model_fields_set contains the field
        if self.status_message is None and "status_message" in self.model_fields_set:
            _dict['status_message'] = None

        # set to None if cnt_scheduled (nullable) is None
        # and model_fields_set contains the field
        if self.cnt_scheduled is None and "cnt_scheduled" in self.model_fields_set:
            _dict['cnt_scheduled'] = None

        # set to None if cnt_completed (nullable) is None
        # and model_fields_set contains the field
        if self.cnt_completed is None and "cnt_completed" in self.model_fields_set:
            _dict['cnt_completed'] = None

        # set to None if cnt_failed (nullable) is None
        # and model_fields_set contains the field
        if self.cnt_failed is None and "cnt_failed" in self.model_fields_set:
            _dict['cnt_failed'] = None

        # set to None if with_screenshot (nullable) is None
        # and model_fields_set contains the field
        if self.with_screenshot is None and "with_screenshot" in self.model_fields_set:
            _dict['with_screenshot'] = None

        # set to None if with_browser (nullable) is None
        # and model_fields_set contains the field
        if self.with_browser is None and "with_browser" in self.model_fields_set:
            _dict['with_browser'] = None

        # set to None if follow_links (nullable) is None
        # and model_fields_set contains the field
        if self.follow_links is None and "follow_links" in self.model_fields_set:
            _dict['follow_links'] = None

        # set to None if with_proxy_rotation (nullable) is None
        # and model_fields_set contains the field
        if self.with_proxy_rotation is None and "with_proxy_rotation" in self.model_fields_set:
            _dict['with_proxy_rotation'] = None

        # set to None if disallow_urls (nullable) is None
        # and model_fields_set contains the field
        if self.disallow_urls is None and "disallow_urls" in self.model_fields_set:
            _dict['disallow_urls'] = None

        # set to None if filter_urls (nullable) is None
        # and model_fields_set contains the field
        if self.filter_urls is None and "filter_urls" in self.model_fields_set:
            _dict['filter_urls'] = None

        # set to None if custom_headers (nullable) is None
        # and model_fields_set contains the field
        if self.custom_headers is None and "custom_headers" in self.model_fields_set:
            _dict['custom_headers'] = None

        # set to None if urls_extra_config (nullable) is None
        # and model_fields_set contains the field
        if self.urls_extra_config is None and "urls_extra_config" in self.model_fields_set:
            _dict['urls_extra_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "schedule_id": obj.get("schedule_id"),
            "url": obj.get("url"),
            "frequency": obj.get("frequency"),
            "schedule_type": obj.get("schedule_type"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "status": obj.get("status"),
            "status_message": obj.get("status_message"),
            "cnt_scheduled": obj.get("cnt_scheduled"),
            "cnt_completed": obj.get("cnt_completed"),
            "cnt_failed": obj.get("cnt_failed"),
            "with_screenshot": obj.get("with_screenshot"),
            "with_browser": obj.get("with_browser"),
            "follow_links": obj.get("follow_links"),
            "with_proxy_rotation": obj.get("with_proxy_rotation"),
            "disallow_urls": obj.get("disallow_urls"),
            "filter_urls": obj.get("filter_urls"),
            "custom_headers": obj.get("custom_headers"),
            "urls_extra_config": obj.get("urls_extra_config")
        })
        return _obj


