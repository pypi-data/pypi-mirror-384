# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from flowhunt.models.tracking_events_response import TrackingEventsResponse

class TestTrackingEventsResponse(unittest.TestCase):
    """TrackingEventsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TrackingEventsResponse:
        """Test TrackingEventsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TrackingEventsResponse`
        """
        model = TrackingEventsResponse()
        if include_optional:
            return TrackingEventsResponse(
                events = [
                    flowhunt.models.tracking_event_response.TrackingEventResponse(
                        event_id = '', 
                        unique_id = '', 
                        url = '', 
                        event_name = '', 
                        event_value = 1.337, 
                        currency = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        valid_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        include_in_conversions_metric = True, 
                        event_data = [
                            flowhunt.models.tracking_event_data.TrackingEventData(
                                key = '', 
                                value_text = '', 
                                value_number = 1.337, 
                                value_boolean = True, 
                                value_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        link_ids = [
                            null
                            ], )
                    ]
            )
        else:
            return TrackingEventsResponse(
                events = [
                    flowhunt.models.tracking_event_response.TrackingEventResponse(
                        event_id = '', 
                        unique_id = '', 
                        url = '', 
                        event_name = '', 
                        event_value = 1.337, 
                        currency = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        valid_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        include_in_conversions_metric = True, 
                        event_data = [
                            flowhunt.models.tracking_event_data.TrackingEventData(
                                key = '', 
                                value_text = '', 
                                value_number = 1.337, 
                                value_boolean = True, 
                                value_datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        link_ids = [
                            null
                            ], )
                    ],
        )
        """

    def testTrackingEventsResponse(self):
        """Test TrackingEventsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
