# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from flowhunt.models.data import Data

class TestData(unittest.TestCase):
    """Data unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Data:
        """Test Data
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Data`
        """
        model = Data()
        if include_optional:
            return Data(
                schedule_id = '',
                domain_id = '',
                url_id = '',
                url = '',
                last_text_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                page_screenshot = flowhunt.models.url_screenshot_response.UrlScreenshotResponse(
                    original_image = '', 
                    thumbnail_image = '', 
                    original_image_full_page = '', 
                    thumbnail_image_full_page = '', ),
                url_title = '',
                url_meta_description = '',
                url_og_image = '',
                is_original_url = True,
                dest_url_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                url_text = [
                    {
                        'key' : ''
                        }
                    ],
                faq_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                workspace_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                cat_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                question = 'What is LiveAgent?',
                answer = '',
                parent_faq_id = '',
                status = 'N',
                updated_at = '2021-01-01T00:00:00',
                indexed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                doc_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                doc_name = 'Document name',
                doc_type = 'PDF',
                user_status = 'N'
            )
        else:
            return Data(
                schedule_id = '',
                domain_id = '',
                url_id = '',
                url = '',
                last_text_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                page_screenshot = flowhunt.models.url_screenshot_response.UrlScreenshotResponse(
                    original_image = '', 
                    thumbnail_image = '', 
                    original_image_full_page = '', 
                    thumbnail_image_full_page = '', ),
                url_title = '',
                url_meta_description = '',
                url_og_image = '',
                is_original_url = True,
                dest_url_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                url_text = [
                    {
                        'key' : ''
                        }
                    ],
                faq_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                workspace_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                cat_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                question = 'What is LiveAgent?',
                status = 'N',
                updated_at = '2021-01-01T00:00:00',
                doc_id = 'd719f5f5-5433-4cb4-9993-8053bda1a384',
                doc_name = 'Document name',
                doc_type = 'PDF',
                user_status = 'N',
        )
        """

    def testData(self):
        """Test Data"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
