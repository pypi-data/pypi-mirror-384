Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ENTRY = ENTRY
Rule 2     expression -> expression & expression
Rule 3     expression -> expression | expression
Rule 4     expression -> ( expression )

Terminals, with rules where they appear

&                    : 2
(                    : 4
)                    : 4
=                    : 1
ENTRY                : 1 1
error                : 
|                    : 3

Nonterminals, with rules where they appear

expression           : 2 2 3 3 4 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ENTRY = ENTRY
    (2) expression -> . expression & expression
    (3) expression -> . expression | expression
    (4) expression -> . ( expression )

    ENTRY           shift and go to state 2
    (               shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (2) expression -> expression . & expression
    (3) expression -> expression . | expression

    &               shift and go to state 4
    |               shift and go to state 5


state 2

    (1) expression -> ENTRY . = ENTRY

    =               shift and go to state 6


state 3

    (4) expression -> ( . expression )
    (1) expression -> . ENTRY = ENTRY
    (2) expression -> . expression & expression
    (3) expression -> . expression | expression
    (4) expression -> . ( expression )

    ENTRY           shift and go to state 2
    (               shift and go to state 3

    expression                     shift and go to state 7

state 4

    (2) expression -> expression & . expression
    (1) expression -> . ENTRY = ENTRY
    (2) expression -> . expression & expression
    (3) expression -> . expression | expression
    (4) expression -> . ( expression )

    ENTRY           shift and go to state 2
    (               shift and go to state 3

    expression                     shift and go to state 8

state 5

    (3) expression -> expression | . expression
    (1) expression -> . ENTRY = ENTRY
    (2) expression -> . expression & expression
    (3) expression -> . expression | expression
    (4) expression -> . ( expression )

    ENTRY           shift and go to state 2
    (               shift and go to state 3

    expression                     shift and go to state 9

state 6

    (1) expression -> ENTRY = . ENTRY

    ENTRY           shift and go to state 10


state 7

    (4) expression -> ( expression . )
    (2) expression -> expression . & expression
    (3) expression -> expression . | expression

    )               shift and go to state 11
    &               shift and go to state 4
    |               shift and go to state 5


state 8

    (2) expression -> expression & expression .
    (2) expression -> expression . & expression
    (3) expression -> expression . | expression

    &               reduce using rule 2 (expression -> expression & expression .)
    |               reduce using rule 2 (expression -> expression & expression .)
    $end            reduce using rule 2 (expression -> expression & expression .)
    )               reduce using rule 2 (expression -> expression & expression .)

  ! &               [ shift and go to state 4 ]
  ! |               [ shift and go to state 5 ]


state 9

    (3) expression -> expression | expression .
    (2) expression -> expression . & expression
    (3) expression -> expression . | expression

    &               reduce using rule 3 (expression -> expression | expression .)
    |               reduce using rule 3 (expression -> expression | expression .)
    $end            reduce using rule 3 (expression -> expression | expression .)
    )               reduce using rule 3 (expression -> expression | expression .)

  ! &               [ shift and go to state 4 ]
  ! |               [ shift and go to state 5 ]


state 10

    (1) expression -> ENTRY = ENTRY .

    &               reduce using rule 1 (expression -> ENTRY = ENTRY .)
    |               reduce using rule 1 (expression -> ENTRY = ENTRY .)
    $end            reduce using rule 1 (expression -> ENTRY = ENTRY .)
    )               reduce using rule 1 (expression -> ENTRY = ENTRY .)


state 11

    (4) expression -> ( expression ) .

    &               reduce using rule 4 (expression -> ( expression ) .)
    |               reduce using rule 4 (expression -> ( expression ) .)
    $end            reduce using rule 4 (expression -> ( expression ) .)
    )               reduce using rule 4 (expression -> ( expression ) .)

