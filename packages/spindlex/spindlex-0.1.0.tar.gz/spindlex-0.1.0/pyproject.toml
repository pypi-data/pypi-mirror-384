[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spindlex"
version = "0.1.0"
description = "A pure-Python SSHv2 client/server library"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SpindleX Team", email = "team@spindlex.org"}
]
maintainers = [
    {name = "SpindleX Team", email = "team@spindlex.org"}
]
keywords = ["ssh", "sftp", "client", "server", "cryptography", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "cryptography>=3.0",
    "typing-extensions>=4.0; python_version<'3.10'",
]

[project.optional-dependencies]
async = [
    "asyncio-dgram>=2.0",
]
gssapi = [
    "gssapi>=1.6.0; sys_platform!='win32'",
]
dev = [
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.15",
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "pytest-asyncio>=0.18",
    "pytest-xdist>=2.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
    "sphinx-autobuild>=2021.3.14",
    "sphinxcontrib-spelling>=7.6",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "pytest-asyncio>=0.18",
    "pytest-xdist>=2.0",
    "coverage>=6.0",
]

[project.urls]
Homepage = "https://gitlab.com/daveops.world/development/python/spindlex"
Documentation = "https://spindlex.readthedocs.io/"
Repository = "https://gitlab.com/daveops.world/development/python/spindlex.git"
Issues = "https://gitlab.com/daveops.world/development/python/spindlex/-/issues"
Changelog = "https://gitlab.com/daveops.world/development/python/spindlex/-/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["spindlex*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
spindlex = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["spindlex"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "performance: Performance and benchmark tests",
    "security: Security-focused tests",
    "slow: Tests that take a long time to run",
]

[tool.coverage.run]
source = ["spindlex"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]