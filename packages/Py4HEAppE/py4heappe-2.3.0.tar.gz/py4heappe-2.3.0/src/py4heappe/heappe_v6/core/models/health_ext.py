# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v6.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_healthy': 'bool',
        'timestamp': 'datetime',
        'version': 'str',
        'component': 'HealthComponent_'
    }

    attribute_map = {
        'is_healthy': 'IsHealthy',
        'timestamp': 'Timestamp',
        'version': 'Version',
        'component': 'Component'
    }

    def __init__(self, is_healthy=None, timestamp=None, version=None, component=None):  # noqa: E501
        """HealthExt - a model defined in Swagger"""  # noqa: E501
        self._is_healthy = None
        self._timestamp = None
        self._version = None
        self._component = None
        self.discriminator = None
        if is_healthy is not None:
            self.is_healthy = is_healthy
        if timestamp is not None:
            self.timestamp = timestamp
        if version is not None:
            self.version = version
        if component is not None:
            self.component = component

    @property
    def is_healthy(self):
        """Gets the is_healthy of this HealthExt.  # noqa: E501

        IsHealthy  # noqa: E501

        :return: The is_healthy of this HealthExt.  # noqa: E501
        :rtype: bool
        """
        return self._is_healthy

    @is_healthy.setter
    def is_healthy(self, is_healthy):
        """Sets the is_healthy of this HealthExt.

        IsHealthy  # noqa: E501

        :param is_healthy: The is_healthy of this HealthExt.  # noqa: E501
        :type: bool
        """

        self._is_healthy = is_healthy

    @property
    def timestamp(self):
        """Gets the timestamp of this HealthExt.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this HealthExt.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HealthExt.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this HealthExt.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def version(self):
        """Gets the version of this HealthExt.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this HealthExt.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthExt.

        Version  # noqa: E501

        :param version: The version of this HealthExt.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def component(self):
        """Gets the component of this HealthExt.  # noqa: E501


        :return: The component of this HealthExt.  # noqa: E501
        :rtype: HealthComponent_
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this HealthExt.


        :param component: The component of this HealthExt.  # noqa: E501
        :type: HealthComponent_
        """

        self._component = component

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
