# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v6.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vault_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_healthy': 'bool',
        'info': 'VaultInfo_'
    }

    attribute_map = {
        'is_healthy': 'IsHealthy',
        'info': 'Info'
    }

    def __init__(self, is_healthy=None, info=None):  # noqa: E501
        """Vault_ - a model defined in Swagger"""  # noqa: E501
        self._is_healthy = None
        self._info = None
        self.discriminator = None
        if is_healthy is not None:
            self.is_healthy = is_healthy
        if info is not None:
            self.info = info

    @property
    def is_healthy(self):
        """Gets the is_healthy of this Vault_.  # noqa: E501

        Vault is healthy  # noqa: E501

        :return: The is_healthy of this Vault_.  # noqa: E501
        :rtype: bool
        """
        return self._is_healthy

    @is_healthy.setter
    def is_healthy(self, is_healthy):
        """Sets the is_healthy of this Vault_.

        Vault is healthy  # noqa: E501

        :param is_healthy: The is_healthy of this Vault_.  # noqa: E501
        :type: bool
        """

        self._is_healthy = is_healthy

    @property
    def info(self):
        """Gets the info of this Vault_.  # noqa: E501


        :return: The info of this Vault_.  # noqa: E501
        :rtype: VaultInfo_
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Vault_.


        :param info: The info of this Vault_.  # noqa: E501
        :type: VaultInfo_
        """

        self._info = info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vault_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vault_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
