# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v6.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VaultInfo_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initialized': 'bool',
        'sealed': 'bool',
        'stand_by': 'bool',
        'performance_standby': 'bool'
    }

    attribute_map = {
        'initialized': 'Initialized',
        'sealed': 'Sealed',
        'stand_by': 'StandBy',
        'performance_standby': 'PerformanceStandby'
    }

    def __init__(self, initialized=None, sealed=None, stand_by=None, performance_standby=None):  # noqa: E501
        """VaultInfo_ - a model defined in Swagger"""  # noqa: E501
        self._initialized = None
        self._sealed = None
        self._stand_by = None
        self._performance_standby = None
        self.discriminator = None
        if initialized is not None:
            self.initialized = initialized
        if sealed is not None:
            self.sealed = sealed
        if stand_by is not None:
            self.stand_by = stand_by
        if performance_standby is not None:
            self.performance_standby = performance_standby

    @property
    def initialized(self):
        """Gets the initialized of this VaultInfo_.  # noqa: E501

        Vault is initialized  # noqa: E501

        :return: The initialized of this VaultInfo_.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this VaultInfo_.

        Vault is initialized  # noqa: E501

        :param initialized: The initialized of this VaultInfo_.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def sealed(self):
        """Gets the sealed of this VaultInfo_.  # noqa: E501

        Vault is sealed  # noqa: E501

        :return: The sealed of this VaultInfo_.  # noqa: E501
        :rtype: bool
        """
        return self._sealed

    @sealed.setter
    def sealed(self, sealed):
        """Sets the sealed of this VaultInfo_.

        Vault is sealed  # noqa: E501

        :param sealed: The sealed of this VaultInfo_.  # noqa: E501
        :type: bool
        """

        self._sealed = sealed

    @property
    def stand_by(self):
        """Gets the stand_by of this VaultInfo_.  # noqa: E501

        Vault is in stand by  # noqa: E501

        :return: The stand_by of this VaultInfo_.  # noqa: E501
        :rtype: bool
        """
        return self._stand_by

    @stand_by.setter
    def stand_by(self, stand_by):
        """Sets the stand_by of this VaultInfo_.

        Vault is in stand by  # noqa: E501

        :param stand_by: The stand_by of this VaultInfo_.  # noqa: E501
        :type: bool
        """

        self._stand_by = stand_by

    @property
    def performance_standby(self):
        """Gets the performance_standby of this VaultInfo_.  # noqa: E501

        Vault is in performance stand by  # noqa: E501

        :return: The performance_standby of this VaultInfo_.  # noqa: E501
        :rtype: bool
        """
        return self._performance_standby

    @performance_standby.setter
    def performance_standby(self, performance_standby):
        """Sets the performance_standby of this VaultInfo_.

        Vault is in performance stand by  # noqa: E501

        :param performance_standby: The performance_standby of this VaultInfo_.  # noqa: E501
        :type: bool
        """

        self._performance_standby = performance_standby

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VaultInfo_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultInfo_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
