# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v6.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterAccountStatusExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterExt',
        'project': 'ProjectExt',
        'is_initialized': 'bool'
    }

    attribute_map = {
        'cluster': 'Cluster',
        'project': 'Project',
        'is_initialized': 'IsInitialized'
    }

    def __init__(self, cluster=None, project=None, is_initialized=None):  # noqa: E501
        """ClusterAccountStatusExt - a model defined in Swagger"""  # noqa: E501
        self._cluster = None
        self._project = None
        self._is_initialized = None
        self.discriminator = None
        if cluster is not None:
            self.cluster = cluster
        if project is not None:
            self.project = project
        if is_initialized is not None:
            self.is_initialized = is_initialized

    @property
    def cluster(self):
        """Gets the cluster of this ClusterAccountStatusExt.  # noqa: E501


        :return: The cluster of this ClusterAccountStatusExt.  # noqa: E501
        :rtype: ClusterExt
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ClusterAccountStatusExt.


        :param cluster: The cluster of this ClusterAccountStatusExt.  # noqa: E501
        :type: ClusterExt
        """

        self._cluster = cluster

    @property
    def project(self):
        """Gets the project of this ClusterAccountStatusExt.  # noqa: E501


        :return: The project of this ClusterAccountStatusExt.  # noqa: E501
        :rtype: ProjectExt
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ClusterAccountStatusExt.


        :param project: The project of this ClusterAccountStatusExt.  # noqa: E501
        :type: ProjectExt
        """

        self._project = project

    @property
    def is_initialized(self):
        """Gets the is_initialized of this ClusterAccountStatusExt.  # noqa: E501

        Is initialized  # noqa: E501

        :return: The is_initialized of this ClusterAccountStatusExt.  # noqa: E501
        :rtype: bool
        """
        return self._is_initialized

    @is_initialized.setter
    def is_initialized(self, is_initialized):
        """Sets the is_initialized of this ClusterAccountStatusExt.

        Is initialized  # noqa: E501

        :param is_initialized: The is_initialized of this ClusterAccountStatusExt.  # noqa: E501
        :type: bool
        """

        self._is_initialized = is_initialized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterAccountStatusExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterAccountStatusExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
