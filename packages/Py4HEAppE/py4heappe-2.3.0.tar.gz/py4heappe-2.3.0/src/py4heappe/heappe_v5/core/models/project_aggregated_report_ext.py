# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class ProjectAggregatedReportExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'accounting_string': 'str',
        'total_usage': 'float',
        'usage_type': 'UsageTypeExt',
        'sub_projects': 'list[SubProjectAggregatedReportExt]',
        'clusters': 'list[ClusterAggregatedReportExt]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'accounting_string': 'AccountingString',
        'total_usage': 'TotalUsage',
        'usage_type': 'UsageType',
        'sub_projects': 'SubProjects',
        'clusters': 'Clusters'
    }

    def __init__(self, id=None, name=None, accounting_string=None, total_usage=None, usage_type=None, sub_projects=None, clusters=None, _configuration=None):  # noqa: E501
        """ProjectAggregatedReportExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._accounting_string = None
        self._total_usage = None
        self._usage_type = None
        self._sub_projects = None
        self._clusters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if accounting_string is not None:
            self.accounting_string = accounting_string
        if total_usage is not None:
            self.total_usage = total_usage
        if usage_type is not None:
            self.usage_type = usage_type
        if sub_projects is not None:
            self.sub_projects = sub_projects
        if clusters is not None:
            self.clusters = clusters

    @property
    def id(self):
        """Gets the id of this ProjectAggregatedReportExt.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectAggregatedReportExt.

        Id  # noqa: E501

        :param id: The id of this ProjectAggregatedReportExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectAggregatedReportExt.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectAggregatedReportExt.

        Name  # noqa: E501

        :param name: The name of this ProjectAggregatedReportExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accounting_string(self):
        """Gets the accounting_string of this ProjectAggregatedReportExt.  # noqa: E501

        Accounting string  # noqa: E501

        :return: The accounting_string of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: str
        """
        return self._accounting_string

    @accounting_string.setter
    def accounting_string(self, accounting_string):
        """Sets the accounting_string of this ProjectAggregatedReportExt.

        Accounting string  # noqa: E501

        :param accounting_string: The accounting_string of this ProjectAggregatedReportExt.  # noqa: E501
        :type: str
        """

        self._accounting_string = accounting_string

    @property
    def total_usage(self):
        """Gets the total_usage of this ProjectAggregatedReportExt.  # noqa: E501

        Total usage  # noqa: E501

        :return: The total_usage of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: float
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this ProjectAggregatedReportExt.

        Total usage  # noqa: E501

        :param total_usage: The total_usage of this ProjectAggregatedReportExt.  # noqa: E501
        :type: float
        """

        self._total_usage = total_usage

    @property
    def usage_type(self):
        """Gets the usage_type of this ProjectAggregatedReportExt.  # noqa: E501


        :return: The usage_type of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: UsageTypeExt
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this ProjectAggregatedReportExt.


        :param usage_type: The usage_type of this ProjectAggregatedReportExt.  # noqa: E501
        :type: UsageTypeExt
        """

        self._usage_type = usage_type

    @property
    def sub_projects(self):
        """Gets the sub_projects of this ProjectAggregatedReportExt.  # noqa: E501

        List of sub project aggregated reports  # noqa: E501

        :return: The sub_projects of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: list[SubProjectAggregatedReportExt]
        """
        return self._sub_projects

    @sub_projects.setter
    def sub_projects(self, sub_projects):
        """Sets the sub_projects of this ProjectAggregatedReportExt.

        List of sub project aggregated reports  # noqa: E501

        :param sub_projects: The sub_projects of this ProjectAggregatedReportExt.  # noqa: E501
        :type: list[SubProjectAggregatedReportExt]
        """

        self._sub_projects = sub_projects

    @property
    def clusters(self):
        """Gets the clusters of this ProjectAggregatedReportExt.  # noqa: E501

        List of cluster aggregated reports  # noqa: E501

        :return: The clusters of this ProjectAggregatedReportExt.  # noqa: E501
        :rtype: list[ClusterAggregatedReportExt]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ProjectAggregatedReportExt.

        List of cluster aggregated reports  # noqa: E501

        :param clusters: The clusters of this ProjectAggregatedReportExt.  # noqa: E501
        :type: list[ClusterAggregatedReportExt]
        """

        self._clusters = clusters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectAggregatedReportExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectAggregatedReportExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectAggregatedReportExt):
            return True

        return self.to_dict() != other.to_dict()
