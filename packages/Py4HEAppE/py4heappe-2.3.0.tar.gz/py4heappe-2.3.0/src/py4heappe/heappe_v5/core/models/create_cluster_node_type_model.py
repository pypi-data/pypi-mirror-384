# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class CreateClusterNodeTypeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_code': 'str',
        'name': 'str',
        'description': 'str',
        'number_of_nodes': 'int',
        'cores_per_node': 'int',
        'queue': 'str',
        'quality_of_service': 'str',
        'max_walltime': 'int',
        'cluster_allocation_name': 'str',
        'cluster_id': 'int',
        'file_transfer_method_id': 'int',
        'cluster_node_type_aggregation_id': 'int'
    }

    attribute_map = {
        'session_code': 'SessionCode',
        'name': 'Name',
        'description': 'Description',
        'number_of_nodes': 'NumberOfNodes',
        'cores_per_node': 'CoresPerNode',
        'queue': 'Queue',
        'quality_of_service': 'QualityOfService',
        'max_walltime': 'MaxWalltime',
        'cluster_allocation_name': 'ClusterAllocationName',
        'cluster_id': 'ClusterId',
        'file_transfer_method_id': 'FileTransferMethodId',
        'cluster_node_type_aggregation_id': 'ClusterNodeTypeAggregationId'
    }

    def __init__(self, session_code=None, name=None, description=None, number_of_nodes=None, cores_per_node=None, queue=None, quality_of_service=None, max_walltime=None, cluster_allocation_name=None, cluster_id=None, file_transfer_method_id=None, cluster_node_type_aggregation_id=None, _configuration=None):  # noqa: E501
        """CreateClusterNodeTypeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._session_code = None
        self._name = None
        self._description = None
        self._number_of_nodes = None
        self._cores_per_node = None
        self._queue = None
        self._quality_of_service = None
        self._max_walltime = None
        self._cluster_allocation_name = None
        self._cluster_id = None
        self._file_transfer_method_id = None
        self._cluster_node_type_aggregation_id = None
        self.discriminator = None

        if session_code is not None:
            self.session_code = session_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if number_of_nodes is not None:
            self.number_of_nodes = number_of_nodes
        if cores_per_node is not None:
            self.cores_per_node = cores_per_node
        if queue is not None:
            self.queue = queue
        if quality_of_service is not None:
            self.quality_of_service = quality_of_service
        if max_walltime is not None:
            self.max_walltime = max_walltime
        if cluster_allocation_name is not None:
            self.cluster_allocation_name = cluster_allocation_name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if file_transfer_method_id is not None:
            self.file_transfer_method_id = file_transfer_method_id
        if cluster_node_type_aggregation_id is not None:
            self.cluster_node_type_aggregation_id = cluster_node_type_aggregation_id

    @property
    def session_code(self):
        """Gets the session_code of this CreateClusterNodeTypeModel.  # noqa: E501

        Session code  # noqa: E501

        :return: The session_code of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._session_code

    @session_code.setter
    def session_code(self, session_code):
        """Sets the session_code of this CreateClusterNodeTypeModel.

        Session code  # noqa: E501

        :param session_code: The session_code of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) > 50):
            raise ValueError("Invalid value for `session_code`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) < 0):
            raise ValueError("Invalid value for `session_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._session_code = session_code

    @property
    def name(self):
        """Gets the name of this CreateClusterNodeTypeModel.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterNodeTypeModel.

        Name  # noqa: E501

        :param name: The name of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateClusterNodeTypeModel.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateClusterNodeTypeModel.

        Description  # noqa: E501

        :param description: The description of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def number_of_nodes(self):
        """Gets the number_of_nodes of this CreateClusterNodeTypeModel.  # noqa: E501

        Number of nodes  # noqa: E501

        :return: The number_of_nodes of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._number_of_nodes

    @number_of_nodes.setter
    def number_of_nodes(self, number_of_nodes):
        """Sets the number_of_nodes of this CreateClusterNodeTypeModel.

        Number of nodes  # noqa: E501

        :param number_of_nodes: The number_of_nodes of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._number_of_nodes = number_of_nodes

    @property
    def cores_per_node(self):
        """Gets the cores_per_node of this CreateClusterNodeTypeModel.  # noqa: E501

        Number of cores per node  # noqa: E501

        :return: The cores_per_node of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._cores_per_node

    @cores_per_node.setter
    def cores_per_node(self, cores_per_node):
        """Sets the cores_per_node of this CreateClusterNodeTypeModel.

        Number of cores per node  # noqa: E501

        :param cores_per_node: The cores_per_node of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._cores_per_node = cores_per_node

    @property
    def queue(self):
        """Gets the queue of this CreateClusterNodeTypeModel.  # noqa: E501

        Queue  # noqa: E501

        :return: The queue of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this CreateClusterNodeTypeModel.

        Queue  # noqa: E501

        :param queue: The queue of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                queue is not None and len(queue) > 30):
            raise ValueError("Invalid value for `queue`, length must be less than or equal to `30`")  # noqa: E501
        if (self._configuration.client_side_validation and
                queue is not None and len(queue) < 0):
            raise ValueError("Invalid value for `queue`, length must be greater than or equal to `0`")  # noqa: E501

        self._queue = queue

    @property
    def quality_of_service(self):
        """Gets the quality_of_service of this CreateClusterNodeTypeModel.  # noqa: E501

        Quality of service  # noqa: E501

        :return: The quality_of_service of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._quality_of_service

    @quality_of_service.setter
    def quality_of_service(self, quality_of_service):
        """Sets the quality_of_service of this CreateClusterNodeTypeModel.

        Quality of service  # noqa: E501

        :param quality_of_service: The quality_of_service of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                quality_of_service is not None and len(quality_of_service) > 40):
            raise ValueError("Invalid value for `quality_of_service`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                quality_of_service is not None and len(quality_of_service) < 0):
            raise ValueError("Invalid value for `quality_of_service`, length must be greater than or equal to `0`")  # noqa: E501

        self._quality_of_service = quality_of_service

    @property
    def max_walltime(self):
        """Gets the max_walltime of this CreateClusterNodeTypeModel.  # noqa: E501

        Maximum walltime  # noqa: E501

        :return: The max_walltime of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._max_walltime

    @max_walltime.setter
    def max_walltime(self, max_walltime):
        """Sets the max_walltime of this CreateClusterNodeTypeModel.

        Maximum walltime  # noqa: E501

        :param max_walltime: The max_walltime of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._max_walltime = max_walltime

    @property
    def cluster_allocation_name(self):
        """Gets the cluster_allocation_name of this CreateClusterNodeTypeModel.  # noqa: E501

        Cluster allocation name  # noqa: E501

        :return: The cluster_allocation_name of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: str
        """
        return self._cluster_allocation_name

    @cluster_allocation_name.setter
    def cluster_allocation_name(self, cluster_allocation_name):
        """Sets the cluster_allocation_name of this CreateClusterNodeTypeModel.

        Cluster allocation name  # noqa: E501

        :param cluster_allocation_name: The cluster_allocation_name of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cluster_allocation_name is not None and len(cluster_allocation_name) > 40):
            raise ValueError("Invalid value for `cluster_allocation_name`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cluster_allocation_name is not None and len(cluster_allocation_name) < 0):
            raise ValueError("Invalid value for `cluster_allocation_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._cluster_allocation_name = cluster_allocation_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this CreateClusterNodeTypeModel.  # noqa: E501

        Cluster id  # noqa: E501

        :return: The cluster_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this CreateClusterNodeTypeModel.

        Cluster id  # noqa: E501

        :param cluster_id: The cluster_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def file_transfer_method_id(self):
        """Gets the file_transfer_method_id of this CreateClusterNodeTypeModel.  # noqa: E501

        File transfer method id  # noqa: E501

        :return: The file_transfer_method_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._file_transfer_method_id

    @file_transfer_method_id.setter
    def file_transfer_method_id(self, file_transfer_method_id):
        """Sets the file_transfer_method_id of this CreateClusterNodeTypeModel.

        File transfer method id  # noqa: E501

        :param file_transfer_method_id: The file_transfer_method_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._file_transfer_method_id = file_transfer_method_id

    @property
    def cluster_node_type_aggregation_id(self):
        """Gets the cluster_node_type_aggregation_id of this CreateClusterNodeTypeModel.  # noqa: E501

        Cluster node type aggregation id  # noqa: E501

        :return: The cluster_node_type_aggregation_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :rtype: int
        """
        return self._cluster_node_type_aggregation_id

    @cluster_node_type_aggregation_id.setter
    def cluster_node_type_aggregation_id(self, cluster_node_type_aggregation_id):
        """Sets the cluster_node_type_aggregation_id of this CreateClusterNodeTypeModel.

        Cluster node type aggregation id  # noqa: E501

        :param cluster_node_type_aggregation_id: The cluster_node_type_aggregation_id of this CreateClusterNodeTypeModel.  # noqa: E501
        :type: int
        """

        self._cluster_node_type_aggregation_id = cluster_node_type_aggregation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateClusterNodeTypeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterNodeTypeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateClusterNodeTypeModel):
            return True

        return self.to_dict() != other.to_dict()
