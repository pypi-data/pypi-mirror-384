# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class AccountingStateExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'state': 'AccountingStateTypeExt',
        'computing_start_date': 'datetime',
        'computing_end_date': 'datetime',
        'triggered_at': 'datetime',
        'last_updated_at': 'datetime'
    }

    attribute_map = {
        'project_id': 'ProjectId',
        'state': 'State',
        'computing_start_date': 'ComputingStartDate',
        'computing_end_date': 'ComputingEndDate',
        'triggered_at': 'TriggeredAt',
        'last_updated_at': 'LastUpdatedAt'
    }

    def __init__(self, project_id=None, state=None, computing_start_date=None, computing_end_date=None, triggered_at=None, last_updated_at=None, _configuration=None):  # noqa: E501
        """AccountingStateExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._state = None
        self._computing_start_date = None
        self._computing_end_date = None
        self._triggered_at = None
        self._last_updated_at = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if state is not None:
            self.state = state
        if computing_start_date is not None:
            self.computing_start_date = computing_start_date
        if computing_end_date is not None:
            self.computing_end_date = computing_end_date
        if triggered_at is not None:
            self.triggered_at = triggered_at
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at

    @property
    def project_id(self):
        """Gets the project_id of this AccountingStateExt.  # noqa: E501

        Project id  # noqa: E501

        :return: The project_id of this AccountingStateExt.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AccountingStateExt.

        Project id  # noqa: E501

        :param project_id: The project_id of this AccountingStateExt.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this AccountingStateExt.  # noqa: E501


        :return: The state of this AccountingStateExt.  # noqa: E501
        :rtype: AccountingStateTypeExt
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountingStateExt.


        :param state: The state of this AccountingStateExt.  # noqa: E501
        :type: AccountingStateTypeExt
        """

        self._state = state

    @property
    def computing_start_date(self):
        """Gets the computing_start_date of this AccountingStateExt.  # noqa: E501

        Comuputing start date  # noqa: E501

        :return: The computing_start_date of this AccountingStateExt.  # noqa: E501
        :rtype: datetime
        """
        return self._computing_start_date

    @computing_start_date.setter
    def computing_start_date(self, computing_start_date):
        """Sets the computing_start_date of this AccountingStateExt.

        Comuputing start date  # noqa: E501

        :param computing_start_date: The computing_start_date of this AccountingStateExt.  # noqa: E501
        :type: datetime
        """

        self._computing_start_date = computing_start_date

    @property
    def computing_end_date(self):
        """Gets the computing_end_date of this AccountingStateExt.  # noqa: E501

        Comuputing end date  # noqa: E501

        :return: The computing_end_date of this AccountingStateExt.  # noqa: E501
        :rtype: datetime
        """
        return self._computing_end_date

    @computing_end_date.setter
    def computing_end_date(self, computing_end_date):
        """Sets the computing_end_date of this AccountingStateExt.

        Comuputing end date  # noqa: E501

        :param computing_end_date: The computing_end_date of this AccountingStateExt.  # noqa: E501
        :type: datetime
        """

        self._computing_end_date = computing_end_date

    @property
    def triggered_at(self):
        """Gets the triggered_at of this AccountingStateExt.  # noqa: E501

        Triggered at  # noqa: E501

        :return: The triggered_at of this AccountingStateExt.  # noqa: E501
        :rtype: datetime
        """
        return self._triggered_at

    @triggered_at.setter
    def triggered_at(self, triggered_at):
        """Sets the triggered_at of this AccountingStateExt.

        Triggered at  # noqa: E501

        :param triggered_at: The triggered_at of this AccountingStateExt.  # noqa: E501
        :type: datetime
        """

        self._triggered_at = triggered_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this AccountingStateExt.  # noqa: E501

        Last updated at  # noqa: E501

        :return: The last_updated_at of this AccountingStateExt.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this AccountingStateExt.

        Last updated at  # noqa: E501

        :param last_updated_at: The last_updated_at of this AccountingStateExt.  # noqa: E501
        :type: datetime
        """

        self._last_updated_at = last_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingStateExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingStateExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountingStateExt):
            return True

        return self.to_dict() != other.to_dict()
