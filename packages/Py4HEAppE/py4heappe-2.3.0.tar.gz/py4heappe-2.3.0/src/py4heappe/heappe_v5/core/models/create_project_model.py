# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class CreateProjectModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_code': 'str',
        'name': 'str',
        'description': 'str',
        'accounting_string': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'usage_type': 'UsageTypeExt',
        'use_accounting_string_for_scheduler': 'bool',
        'pi_email': 'str'
    }

    attribute_map = {
        'session_code': 'SessionCode',
        'name': 'Name',
        'description': 'Description',
        'accounting_string': 'AccountingString',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'usage_type': 'UsageType',
        'use_accounting_string_for_scheduler': 'UseAccountingStringForScheduler',
        'pi_email': 'PIEmail'
    }

    def __init__(self, session_code=None, name=None, description=None, accounting_string=None, start_date=None, end_date=None, usage_type=None, use_accounting_string_for_scheduler=None, pi_email=None, _configuration=None):  # noqa: E501
        """CreateProjectModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._session_code = None
        self._name = None
        self._description = None
        self._accounting_string = None
        self._start_date = None
        self._end_date = None
        self._usage_type = None
        self._use_accounting_string_for_scheduler = None
        self._pi_email = None
        self.discriminator = None

        if session_code is not None:
            self.session_code = session_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if accounting_string is not None:
            self.accounting_string = accounting_string
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if usage_type is not None:
            self.usage_type = usage_type
        if use_accounting_string_for_scheduler is not None:
            self.use_accounting_string_for_scheduler = use_accounting_string_for_scheduler
        if pi_email is not None:
            self.pi_email = pi_email

    @property
    def session_code(self):
        """Gets the session_code of this CreateProjectModel.  # noqa: E501

        Session code  # noqa: E501

        :return: The session_code of this CreateProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._session_code

    @session_code.setter
    def session_code(self, session_code):
        """Sets the session_code of this CreateProjectModel.

        Session code  # noqa: E501

        :param session_code: The session_code of this CreateProjectModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) > 50):
            raise ValueError("Invalid value for `session_code`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) < 0):
            raise ValueError("Invalid value for `session_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._session_code = session_code

    @property
    def name(self):
        """Gets the name of this CreateProjectModel.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this CreateProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProjectModel.

        Name  # noqa: E501

        :param name: The name of this CreateProjectModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateProjectModel.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CreateProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectModel.

        Description  # noqa: E501

        :param description: The description of this CreateProjectModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 100):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def accounting_string(self):
        """Gets the accounting_string of this CreateProjectModel.  # noqa: E501

        Accounting string  # noqa: E501

        :return: The accounting_string of this CreateProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._accounting_string

    @accounting_string.setter
    def accounting_string(self, accounting_string):
        """Sets the accounting_string of this CreateProjectModel.

        Accounting string  # noqa: E501

        :param accounting_string: The accounting_string of this CreateProjectModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                accounting_string is not None and len(accounting_string) > 20):
            raise ValueError("Invalid value for `accounting_string`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                accounting_string is not None and len(accounting_string) < 0):
            raise ValueError("Invalid value for `accounting_string`, length must be greater than or equal to `0`")  # noqa: E501

        self._accounting_string = accounting_string

    @property
    def start_date(self):
        """Gets the start_date of this CreateProjectModel.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this CreateProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateProjectModel.

        Start date  # noqa: E501

        :param start_date: The start_date of this CreateProjectModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CreateProjectModel.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this CreateProjectModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateProjectModel.

        End date  # noqa: E501

        :param end_date: The end_date of this CreateProjectModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def usage_type(self):
        """Gets the usage_type of this CreateProjectModel.  # noqa: E501


        :return: The usage_type of this CreateProjectModel.  # noqa: E501
        :rtype: UsageTypeExt
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this CreateProjectModel.


        :param usage_type: The usage_type of this CreateProjectModel.  # noqa: E501
        :type: UsageTypeExt
        """

        self._usage_type = usage_type

    @property
    def use_accounting_string_for_scheduler(self):
        """Gets the use_accounting_string_for_scheduler of this CreateProjectModel.  # noqa: E501

        Use accounting string for scheduler  # noqa: E501

        :return: The use_accounting_string_for_scheduler of this CreateProjectModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_accounting_string_for_scheduler

    @use_accounting_string_for_scheduler.setter
    def use_accounting_string_for_scheduler(self, use_accounting_string_for_scheduler):
        """Sets the use_accounting_string_for_scheduler of this CreateProjectModel.

        Use accounting string for scheduler  # noqa: E501

        :param use_accounting_string_for_scheduler: The use_accounting_string_for_scheduler of this CreateProjectModel.  # noqa: E501
        :type: bool
        """

        self._use_accounting_string_for_scheduler = use_accounting_string_for_scheduler

    @property
    def pi_email(self):
        """Gets the pi_email of this CreateProjectModel.  # noqa: E501

        PIEmail  # noqa: E501

        :return: The pi_email of this CreateProjectModel.  # noqa: E501
        :rtype: str
        """
        return self._pi_email

    @pi_email.setter
    def pi_email(self, pi_email):
        """Sets the pi_email of this CreateProjectModel.

        PIEmail  # noqa: E501

        :param pi_email: The pi_email of this CreateProjectModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                pi_email is not None and len(pi_email) > 255):
            raise ValueError("Invalid value for `pi_email`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                pi_email is not None and len(pi_email) < 0):
            raise ValueError("Invalid value for `pi_email`, length must be greater than or equal to `0`")  # noqa: E501

        self._pi_email = pi_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateProjectModel):
            return True

        return self.to_dict() != other.to_dict()
