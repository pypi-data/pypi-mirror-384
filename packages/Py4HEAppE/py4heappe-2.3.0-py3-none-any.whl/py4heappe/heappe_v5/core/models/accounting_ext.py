# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class AccountingExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'formula': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'validity_from': 'datetime',
        'validity_to': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'formula': 'Formula',
        'created_at': 'CreatedAt',
        'modified_at': 'ModifiedAt',
        'validity_from': 'ValidityFrom',
        'validity_to': 'ValidityTo'
    }

    def __init__(self, id=None, formula=None, created_at=None, modified_at=None, validity_from=None, validity_to=None, _configuration=None):  # noqa: E501
        """AccountingExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._formula = None
        self._created_at = None
        self._modified_at = None
        self._validity_from = None
        self._validity_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if formula is not None:
            self.formula = formula
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if validity_from is not None:
            self.validity_from = validity_from
        if validity_to is not None:
            self.validity_to = validity_to

    @property
    def id(self):
        """Gets the id of this AccountingExt.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this AccountingExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountingExt.

        Id  # noqa: E501

        :param id: The id of this AccountingExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def formula(self):
        """Gets the formula of this AccountingExt.  # noqa: E501

        Formula  # noqa: E501

        :return: The formula of this AccountingExt.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this AccountingExt.

        Formula  # noqa: E501

        :param formula: The formula of this AccountingExt.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def created_at(self):
        """Gets the created_at of this AccountingExt.  # noqa: E501

        Created at date  # noqa: E501

        :return: The created_at of this AccountingExt.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountingExt.

        Created at date  # noqa: E501

        :param created_at: The created_at of this AccountingExt.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this AccountingExt.  # noqa: E501

        Modified at date  # noqa: E501

        :return: The modified_at of this AccountingExt.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this AccountingExt.

        Modified at date  # noqa: E501

        :param modified_at: The modified_at of this AccountingExt.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def validity_from(self):
        """Gets the validity_from of this AccountingExt.  # noqa: E501

        Validity from date  # noqa: E501

        :return: The validity_from of this AccountingExt.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_from

    @validity_from.setter
    def validity_from(self, validity_from):
        """Sets the validity_from of this AccountingExt.

        Validity from date  # noqa: E501

        :param validity_from: The validity_from of this AccountingExt.  # noqa: E501
        :type: datetime
        """

        self._validity_from = validity_from

    @property
    def validity_to(self):
        """Gets the validity_to of this AccountingExt.  # noqa: E501

        Validity to date  # noqa: E501

        :return: The validity_to of this AccountingExt.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_to

    @validity_to.setter
    def validity_to(self, validity_to):
        """Sets the validity_to of this AccountingExt.

        Validity to date  # noqa: E501

        :param validity_to: The validity_to of this AccountingExt.  # noqa: E501
        :type: datetime
        """

        self._validity_to = validity_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountingExt):
            return True

        return self.to_dict() != other.to_dict()
