# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class AdaptorUserExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'public_key': 'str',
        'email': 'str',
        'user_type': 'AdaptorUserTypeExt',
        'adaptor_user_groups': 'list[AdaptorUserGroupExt]'
    }

    attribute_map = {
        'id': 'Id',
        'username': 'Username',
        'public_key': 'PublicKey',
        'email': 'Email',
        'user_type': 'UserType',
        'adaptor_user_groups': 'AdaptorUserGroups'
    }

    def __init__(self, id=None, username=None, public_key=None, email=None, user_type=None, adaptor_user_groups=None, _configuration=None):  # noqa: E501
        """AdaptorUserExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._username = None
        self._public_key = None
        self._email = None
        self._user_type = None
        self._adaptor_user_groups = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if public_key is not None:
            self.public_key = public_key
        if email is not None:
            self.email = email
        if user_type is not None:
            self.user_type = user_type
        if adaptor_user_groups is not None:
            self.adaptor_user_groups = adaptor_user_groups

    @property
    def id(self):
        """Gets the id of this AdaptorUserExt.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this AdaptorUserExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdaptorUserExt.

        Id  # noqa: E501

        :param id: The id of this AdaptorUserExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this AdaptorUserExt.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this AdaptorUserExt.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdaptorUserExt.

        Username  # noqa: E501

        :param username: The username of this AdaptorUserExt.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def public_key(self):
        """Gets the public_key of this AdaptorUserExt.  # noqa: E501

        Public key  # noqa: E501

        :return: The public_key of this AdaptorUserExt.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AdaptorUserExt.

        Public key  # noqa: E501

        :param public_key: The public_key of this AdaptorUserExt.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def email(self):
        """Gets the email of this AdaptorUserExt.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this AdaptorUserExt.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdaptorUserExt.

        Email  # noqa: E501

        :param email: The email of this AdaptorUserExt.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def user_type(self):
        """Gets the user_type of this AdaptorUserExt.  # noqa: E501


        :return: The user_type of this AdaptorUserExt.  # noqa: E501
        :rtype: AdaptorUserTypeExt
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this AdaptorUserExt.


        :param user_type: The user_type of this AdaptorUserExt.  # noqa: E501
        :type: AdaptorUserTypeExt
        """

        self._user_type = user_type

    @property
    def adaptor_user_groups(self):
        """Gets the adaptor_user_groups of this AdaptorUserExt.  # noqa: E501

        Array of adaptor user groups  # noqa: E501

        :return: The adaptor_user_groups of this AdaptorUserExt.  # noqa: E501
        :rtype: list[AdaptorUserGroupExt]
        """
        return self._adaptor_user_groups

    @adaptor_user_groups.setter
    def adaptor_user_groups(self, adaptor_user_groups):
        """Sets the adaptor_user_groups of this AdaptorUserExt.

        Array of adaptor user groups  # noqa: E501

        :param adaptor_user_groups: The adaptor_user_groups of this AdaptorUserExt.  # noqa: E501
        :type: list[AdaptorUserGroupExt]
        """

        self._adaptor_user_groups = adaptor_user_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdaptorUserExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdaptorUserExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdaptorUserExt):
            return True

        return self.to_dict() != other.to_dict()
