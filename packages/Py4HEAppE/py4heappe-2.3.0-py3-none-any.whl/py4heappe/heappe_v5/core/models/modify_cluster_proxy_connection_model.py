# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class ModifyClusterProxyConnectionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_code': 'str',
        'id': 'int',
        'host': 'str',
        'port': 'int',
        'username': 'str',
        'password': 'str',
        'type': 'ProxyType'
    }

    attribute_map = {
        'session_code': 'SessionCode',
        'id': 'Id',
        'host': 'Host',
        'port': 'Port',
        'username': 'Username',
        'password': 'Password',
        'type': 'Type'
    }

    def __init__(self, session_code=None, id=None, host=None, port=None, username=None, password=None, type=None, _configuration=None):  # noqa: E501
        """ModifyClusterProxyConnectionModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._session_code = None
        self._id = None
        self._host = None
        self._port = None
        self._username = None
        self._password = None
        self._type = None
        self.discriminator = None

        if session_code is not None:
            self.session_code = session_code
        if id is not None:
            self.id = id
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if type is not None:
            self.type = type

    @property
    def session_code(self):
        """Gets the session_code of this ModifyClusterProxyConnectionModel.  # noqa: E501

        Session code  # noqa: E501

        :return: The session_code of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._session_code

    @session_code.setter
    def session_code(self, session_code):
        """Sets the session_code of this ModifyClusterProxyConnectionModel.

        Session code  # noqa: E501

        :param session_code: The session_code of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) > 50):
            raise ValueError("Invalid value for `session_code`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                session_code is not None and len(session_code) < 0):
            raise ValueError("Invalid value for `session_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._session_code = session_code

    @property
    def id(self):
        """Gets the id of this ModifyClusterProxyConnectionModel.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModifyClusterProxyConnectionModel.

        Id  # noqa: E501

        :param id: The id of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def host(self):
        """Gets the host of this ModifyClusterProxyConnectionModel.  # noqa: E501

        Host  # noqa: E501

        :return: The host of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ModifyClusterProxyConnectionModel.

        Host  # noqa: E501

        :param host: The host of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                host is not None and len(host) > 40):
            raise ValueError("Invalid value for `host`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host is not None and len(host) < 0):
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `0`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this ModifyClusterProxyConnectionModel.  # noqa: E501

        Port  # noqa: E501

        :return: The port of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ModifyClusterProxyConnectionModel.

        Port  # noqa: E501

        :param port: The port of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def username(self):
        """Gets the username of this ModifyClusterProxyConnectionModel.  # noqa: E501

        User name  # noqa: E501

        :return: The username of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ModifyClusterProxyConnectionModel.

        User name  # noqa: E501

        :param username: The username of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                username is not None and len(username) > 50):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                username is not None and len(username) < 0):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `0`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ModifyClusterProxyConnectionModel.  # noqa: E501

        Password  # noqa: E501

        :return: The password of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ModifyClusterProxyConnectionModel.

        Password  # noqa: E501

        :param password: The password of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 50):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def type(self):
        """Gets the type of this ModifyClusterProxyConnectionModel.  # noqa: E501


        :return: The type of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :rtype: ProxyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModifyClusterProxyConnectionModel.


        :param type: The type of this ModifyClusterProxyConnectionModel.  # noqa: E501
        :type: ProxyType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyClusterProxyConnectionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyClusterProxyConnectionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyClusterProxyConnectionModel):
            return True

        return self.to_dict() != other.to_dict()
