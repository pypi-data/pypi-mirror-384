# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class FileTransferKeyCredentialsExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'cipher_type': 'FileTransferCipherTypeExt',
        'credentials_auth_type': 'ClusterAuthenticationCredentialsAuthTypeExt',
        'private_key': 'str',
        'private_key_certificate': 'str',
        'public_key': 'str',
        'passphrase': 'str'
    }

    attribute_map = {
        'username': 'Username',
        'password': 'Password',
        'cipher_type': 'CipherType',
        'credentials_auth_type': 'CredentialsAuthType',
        'private_key': 'PrivateKey',
        'private_key_certificate': 'PrivateKeyCertificate',
        'public_key': 'PublicKey',
        'passphrase': 'Passphrase'
    }

    def __init__(self, username=None, password=None, cipher_type=None, credentials_auth_type=None, private_key=None, private_key_certificate=None, public_key=None, passphrase=None, _configuration=None):  # noqa: E501
        """FileTransferKeyCredentialsExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._password = None
        self._cipher_type = None
        self._credentials_auth_type = None
        self._private_key = None
        self._private_key_certificate = None
        self._public_key = None
        self._passphrase = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if cipher_type is not None:
            self.cipher_type = cipher_type
        if credentials_auth_type is not None:
            self.credentials_auth_type = credentials_auth_type
        if private_key is not None:
            self.private_key = private_key
        if private_key_certificate is not None:
            self.private_key_certificate = private_key_certificate
        if public_key is not None:
            self.public_key = public_key
        if passphrase is not None:
            self.passphrase = passphrase

    @property
    def username(self):
        """Gets the username of this FileTransferKeyCredentialsExt.  # noqa: E501

        User name  # noqa: E501

        :return: The username of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this FileTransferKeyCredentialsExt.

        User name  # noqa: E501

        :param username: The username of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                username is not None and len(username) > 100):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                username is not None and len(username) < 0):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `0`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this FileTransferKeyCredentialsExt.  # noqa: E501

        Password  # noqa: E501

        :return: The password of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FileTransferKeyCredentialsExt.

        Password  # noqa: E501

        :param password: The password of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def cipher_type(self):
        """Gets the cipher_type of this FileTransferKeyCredentialsExt.  # noqa: E501


        :return: The cipher_type of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: FileTransferCipherTypeExt
        """
        return self._cipher_type

    @cipher_type.setter
    def cipher_type(self, cipher_type):
        """Sets the cipher_type of this FileTransferKeyCredentialsExt.


        :param cipher_type: The cipher_type of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: FileTransferCipherTypeExt
        """

        self._cipher_type = cipher_type

    @property
    def credentials_auth_type(self):
        """Gets the credentials_auth_type of this FileTransferKeyCredentialsExt.  # noqa: E501


        :return: The credentials_auth_type of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: ClusterAuthenticationCredentialsAuthTypeExt
        """
        return self._credentials_auth_type

    @credentials_auth_type.setter
    def credentials_auth_type(self, credentials_auth_type):
        """Sets the credentials_auth_type of this FileTransferKeyCredentialsExt.


        :param credentials_auth_type: The credentials_auth_type of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: ClusterAuthenticationCredentialsAuthTypeExt
        """

        self._credentials_auth_type = credentials_auth_type

    @property
    def private_key(self):
        """Gets the private_key of this FileTransferKeyCredentialsExt.  # noqa: E501

        Private key  # noqa: E501

        :return: The private_key of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this FileTransferKeyCredentialsExt.

        Private key  # noqa: E501

        :param private_key: The private_key of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def private_key_certificate(self):
        """Gets the private_key_certificate of this FileTransferKeyCredentialsExt.  # noqa: E501

        Private key certificate  # noqa: E501

        :return: The private_key_certificate of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._private_key_certificate

    @private_key_certificate.setter
    def private_key_certificate(self, private_key_certificate):
        """Sets the private_key_certificate of this FileTransferKeyCredentialsExt.

        Private key certificate  # noqa: E501

        :param private_key_certificate: The private_key_certificate of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """

        self._private_key_certificate = private_key_certificate

    @property
    def public_key(self):
        """Gets the public_key of this FileTransferKeyCredentialsExt.  # noqa: E501

        Public key  # noqa: E501

        :return: The public_key of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this FileTransferKeyCredentialsExt.

        Public key  # noqa: E501

        :param public_key: The public_key of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def passphrase(self):
        """Gets the passphrase of this FileTransferKeyCredentialsExt.  # noqa: E501

        Passphrase  # noqa: E501

        :return: The passphrase of this FileTransferKeyCredentialsExt.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this FileTransferKeyCredentialsExt.

        Passphrase  # noqa: E501

        :param passphrase: The passphrase of this FileTransferKeyCredentialsExt.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileTransferKeyCredentialsExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileTransferKeyCredentialsExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileTransferKeyCredentialsExt):
            return True

        return self.to_dict() != other.to_dict()
