# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class TaskParalizationParameterExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpi_processes': 'int',
        'open_mp_threads': 'int',
        'max_cores': 'int'
    }

    attribute_map = {
        'mpi_processes': 'MPIProcesses',
        'open_mp_threads': 'OpenMPThreads',
        'max_cores': 'MaxCores'
    }

    def __init__(self, mpi_processes=None, open_mp_threads=None, max_cores=None, _configuration=None):  # noqa: E501
        """TaskParalizationParameterExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mpi_processes = None
        self._open_mp_threads = None
        self._max_cores = None
        self.discriminator = None

        if mpi_processes is not None:
            self.mpi_processes = mpi_processes
        if open_mp_threads is not None:
            self.open_mp_threads = open_mp_threads
        if max_cores is not None:
            self.max_cores = max_cores

    @property
    def mpi_processes(self):
        """Gets the mpi_processes of this TaskParalizationParameterExt.  # noqa: E501

        MPI processes  # noqa: E501

        :return: The mpi_processes of this TaskParalizationParameterExt.  # noqa: E501
        :rtype: int
        """
        return self._mpi_processes

    @mpi_processes.setter
    def mpi_processes(self, mpi_processes):
        """Sets the mpi_processes of this TaskParalizationParameterExt.

        MPI processes  # noqa: E501

        :param mpi_processes: The mpi_processes of this TaskParalizationParameterExt.  # noqa: E501
        :type: int
        """

        self._mpi_processes = mpi_processes

    @property
    def open_mp_threads(self):
        """Gets the open_mp_threads of this TaskParalizationParameterExt.  # noqa: E501

        Open MP threads  # noqa: E501

        :return: The open_mp_threads of this TaskParalizationParameterExt.  # noqa: E501
        :rtype: int
        """
        return self._open_mp_threads

    @open_mp_threads.setter
    def open_mp_threads(self, open_mp_threads):
        """Sets the open_mp_threads of this TaskParalizationParameterExt.

        Open MP threads  # noqa: E501

        :param open_mp_threads: The open_mp_threads of this TaskParalizationParameterExt.  # noqa: E501
        :type: int
        """

        self._open_mp_threads = open_mp_threads

    @property
    def max_cores(self):
        """Gets the max_cores of this TaskParalizationParameterExt.  # noqa: E501

        Maximum cores  # noqa: E501

        :return: The max_cores of this TaskParalizationParameterExt.  # noqa: E501
        :rtype: int
        """
        return self._max_cores

    @max_cores.setter
    def max_cores(self, max_cores):
        """Sets the max_cores of this TaskParalizationParameterExt.

        Maximum cores  # noqa: E501

        :param max_cores: The max_cores of this TaskParalizationParameterExt.  # noqa: E501
        :type: int
        """

        self._max_cores = max_cores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskParalizationParameterExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskParalizationParameterExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskParalizationParameterExt):
            return True

        return self.to_dict() != other.to_dict()
