# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class ExtendedClusterExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'master_node_name': 'str',
        'scheduler_type': 'SchedulerTypeExt',
        'time_zone': 'str',
        'port': 'int',
        'connection_protocol': 'ClusterConnectionProtocolExt',
        'update_job_state_by_service_account': 'bool',
        'domain_name': 'str',
        'proxy_connection': 'ClusterProxyConnectionExt',
        'node_types': 'list[ClusterNodeTypeExt]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'master_node_name': 'MasterNodeName',
        'scheduler_type': 'SchedulerType',
        'time_zone': 'TimeZone',
        'port': 'Port',
        'connection_protocol': 'ConnectionProtocol',
        'update_job_state_by_service_account': 'UpdateJobStateByServiceAccount',
        'domain_name': 'DomainName',
        'proxy_connection': 'ProxyConnection',
        'node_types': 'NodeTypes'
    }

    def __init__(self, id=None, name=None, description=None, master_node_name=None, scheduler_type=None, time_zone=None, port=None, connection_protocol=None, update_job_state_by_service_account=None, domain_name=None, proxy_connection=None, node_types=None, _configuration=None):  # noqa: E501
        """ExtendedClusterExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._master_node_name = None
        self._scheduler_type = None
        self._time_zone = None
        self._port = None
        self._connection_protocol = None
        self._update_job_state_by_service_account = None
        self._domain_name = None
        self._proxy_connection = None
        self._node_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if master_node_name is not None:
            self.master_node_name = master_node_name
        if scheduler_type is not None:
            self.scheduler_type = scheduler_type
        if time_zone is not None:
            self.time_zone = time_zone
        if port is not None:
            self.port = port
        if connection_protocol is not None:
            self.connection_protocol = connection_protocol
        if update_job_state_by_service_account is not None:
            self.update_job_state_by_service_account = update_job_state_by_service_account
        if domain_name is not None:
            self.domain_name = domain_name
        if proxy_connection is not None:
            self.proxy_connection = proxy_connection
        if node_types is not None:
            self.node_types = node_types

    @property
    def id(self):
        """Gets the id of this ExtendedClusterExt.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ExtendedClusterExt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedClusterExt.

        Id  # noqa: E501

        :param id: The id of this ExtendedClusterExt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExtendedClusterExt.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ExtendedClusterExt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtendedClusterExt.

        Name  # noqa: E501

        :param name: The name of this ExtendedClusterExt.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExtendedClusterExt.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ExtendedClusterExt.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtendedClusterExt.

        Description  # noqa: E501

        :param description: The description of this ExtendedClusterExt.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def master_node_name(self):
        """Gets the master_node_name of this ExtendedClusterExt.  # noqa: E501

        Master node name  # noqa: E501

        :return: The master_node_name of this ExtendedClusterExt.  # noqa: E501
        :rtype: str
        """
        return self._master_node_name

    @master_node_name.setter
    def master_node_name(self, master_node_name):
        """Sets the master_node_name of this ExtendedClusterExt.

        Master node name  # noqa: E501

        :param master_node_name: The master_node_name of this ExtendedClusterExt.  # noqa: E501
        :type: str
        """

        self._master_node_name = master_node_name

    @property
    def scheduler_type(self):
        """Gets the scheduler_type of this ExtendedClusterExt.  # noqa: E501


        :return: The scheduler_type of this ExtendedClusterExt.  # noqa: E501
        :rtype: SchedulerTypeExt
        """
        return self._scheduler_type

    @scheduler_type.setter
    def scheduler_type(self, scheduler_type):
        """Sets the scheduler_type of this ExtendedClusterExt.


        :param scheduler_type: The scheduler_type of this ExtendedClusterExt.  # noqa: E501
        :type: SchedulerTypeExt
        """

        self._scheduler_type = scheduler_type

    @property
    def time_zone(self):
        """Gets the time_zone of this ExtendedClusterExt.  # noqa: E501

        Time zone  # noqa: E501

        :return: The time_zone of this ExtendedClusterExt.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ExtendedClusterExt.

        Time zone  # noqa: E501

        :param time_zone: The time_zone of this ExtendedClusterExt.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def port(self):
        """Gets the port of this ExtendedClusterExt.  # noqa: E501

        SSH port  # noqa: E501

        :return: The port of this ExtendedClusterExt.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ExtendedClusterExt.

        SSH port  # noqa: E501

        :param port: The port of this ExtendedClusterExt.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def connection_protocol(self):
        """Gets the connection_protocol of this ExtendedClusterExt.  # noqa: E501


        :return: The connection_protocol of this ExtendedClusterExt.  # noqa: E501
        :rtype: ClusterConnectionProtocolExt
        """
        return self._connection_protocol

    @connection_protocol.setter
    def connection_protocol(self, connection_protocol):
        """Sets the connection_protocol of this ExtendedClusterExt.


        :param connection_protocol: The connection_protocol of this ExtendedClusterExt.  # noqa: E501
        :type: ClusterConnectionProtocolExt
        """

        self._connection_protocol = connection_protocol

    @property
    def update_job_state_by_service_account(self):
        """Gets the update_job_state_by_service_account of this ExtendedClusterExt.  # noqa: E501

        Update Job State By ServiceAccount  # noqa: E501

        :return: The update_job_state_by_service_account of this ExtendedClusterExt.  # noqa: E501
        :rtype: bool
        """
        return self._update_job_state_by_service_account

    @update_job_state_by_service_account.setter
    def update_job_state_by_service_account(self, update_job_state_by_service_account):
        """Sets the update_job_state_by_service_account of this ExtendedClusterExt.

        Update Job State By ServiceAccount  # noqa: E501

        :param update_job_state_by_service_account: The update_job_state_by_service_account of this ExtendedClusterExt.  # noqa: E501
        :type: bool
        """

        self._update_job_state_by_service_account = update_job_state_by_service_account

    @property
    def domain_name(self):
        """Gets the domain_name of this ExtendedClusterExt.  # noqa: E501

        DomainName  # noqa: E501

        :return: The domain_name of this ExtendedClusterExt.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ExtendedClusterExt.

        DomainName  # noqa: E501

        :param domain_name: The domain_name of this ExtendedClusterExt.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def proxy_connection(self):
        """Gets the proxy_connection of this ExtendedClusterExt.  # noqa: E501


        :return: The proxy_connection of this ExtendedClusterExt.  # noqa: E501
        :rtype: ClusterProxyConnectionExt
        """
        return self._proxy_connection

    @proxy_connection.setter
    def proxy_connection(self, proxy_connection):
        """Sets the proxy_connection of this ExtendedClusterExt.


        :param proxy_connection: The proxy_connection of this ExtendedClusterExt.  # noqa: E501
        :type: ClusterProxyConnectionExt
        """

        self._proxy_connection = proxy_connection

    @property
    def node_types(self):
        """Gets the node_types of this ExtendedClusterExt.  # noqa: E501

        Array of node types  # noqa: E501

        :return: The node_types of this ExtendedClusterExt.  # noqa: E501
        :rtype: list[ClusterNodeTypeExt]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this ExtendedClusterExt.

        Array of node types  # noqa: E501

        :param node_types: The node_types of this ExtendedClusterExt.  # noqa: E501
        :type: list[ClusterNodeTypeExt]
        """

        self._node_types = node_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedClusterExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedClusterExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtendedClusterExt):
            return True

        return self.to_dict() != other.to_dict()
