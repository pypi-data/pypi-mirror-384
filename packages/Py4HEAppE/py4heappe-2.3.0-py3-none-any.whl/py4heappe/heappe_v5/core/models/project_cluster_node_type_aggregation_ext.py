# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py4heappe.heappe_v5.core.configuration import Configuration


class ProjectClusterNodeTypeAggregationExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'cluster_node_type_aggregation_id': 'int',
        'allocation_amount': 'int',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'project_id': 'ProjectId',
        'cluster_node_type_aggregation_id': 'ClusterNodeTypeAggregationId',
        'allocation_amount': 'AllocationAmount',
        'created_at': 'CreatedAt',
        'modified_at': 'ModifiedAt'
    }

    def __init__(self, project_id=None, cluster_node_type_aggregation_id=None, allocation_amount=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """ProjectClusterNodeTypeAggregationExt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._cluster_node_type_aggregation_id = None
        self._allocation_amount = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if cluster_node_type_aggregation_id is not None:
            self.cluster_node_type_aggregation_id = cluster_node_type_aggregation_id
        if allocation_amount is not None:
            self.allocation_amount = allocation_amount
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def project_id(self):
        """Gets the project_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501

        Project id  # noqa: E501

        :return: The project_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectClusterNodeTypeAggregationExt.

        Project id  # noqa: E501

        :param project_id: The project_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def cluster_node_type_aggregation_id(self):
        """Gets the cluster_node_type_aggregation_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501

        Cluster node type aggregation id  # noqa: E501

        :return: The cluster_node_type_aggregation_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :rtype: int
        """
        return self._cluster_node_type_aggregation_id

    @cluster_node_type_aggregation_id.setter
    def cluster_node_type_aggregation_id(self, cluster_node_type_aggregation_id):
        """Sets the cluster_node_type_aggregation_id of this ProjectClusterNodeTypeAggregationExt.

        Cluster node type aggregation id  # noqa: E501

        :param cluster_node_type_aggregation_id: The cluster_node_type_aggregation_id of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :type: int
        """

        self._cluster_node_type_aggregation_id = cluster_node_type_aggregation_id

    @property
    def allocation_amount(self):
        """Gets the allocation_amount of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501

        Allocation amount  # noqa: E501

        :return: The allocation_amount of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :rtype: int
        """
        return self._allocation_amount

    @allocation_amount.setter
    def allocation_amount(self, allocation_amount):
        """Sets the allocation_amount of this ProjectClusterNodeTypeAggregationExt.

        Allocation amount  # noqa: E501

        :param allocation_amount: The allocation_amount of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :type: int
        """

        self._allocation_amount = allocation_amount

    @property
    def created_at(self):
        """Gets the created_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501

        Created at date  # noqa: E501

        :return: The created_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectClusterNodeTypeAggregationExt.

        Created at date  # noqa: E501

        :param created_at: The created_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501

        Modified at date  # noqa: E501

        :return: The modified_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ProjectClusterNodeTypeAggregationExt.

        Modified at date  # noqa: E501

        :param modified_at: The modified_at of this ProjectClusterNodeTypeAggregationExt.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectClusterNodeTypeAggregationExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectClusterNodeTypeAggregationExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectClusterNodeTypeAggregationExt):
            return True

        return self.to_dict() != other.to_dict()
