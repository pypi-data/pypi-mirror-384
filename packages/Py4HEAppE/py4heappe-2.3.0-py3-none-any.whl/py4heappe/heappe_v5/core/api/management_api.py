# coding: utf-8

"""
    py4heappe API

    Merged API documentation for py4heappe client  # noqa: E501

    OpenAPI spec version: v5.0.0
    Contact: support.heappe@it4i.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from py4heappe.heappe_v5.core.api_client import ApiClient


class ManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def heappe_management_accounting_delete(self, **kwargs):  # noqa: E501
        """Remove Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_accounting_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_accounting_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_accounting_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_accounting_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Accounting', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_accounting_get(self, **kwargs):  # noqa: E501
        """Get Accounting by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_accounting_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_accounting_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_accounting_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Accounting by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_accounting_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Accounting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountingExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_accounting_post(self, **kwargs):  # noqa: E501
        """Create Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountingModel body: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_accounting_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_accounting_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_accounting_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAccountingModel body: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_accounting_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Accounting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountingExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_accounting_put(self, **kwargs):  # noqa: E501
        """Modify Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyAccountingModel body: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_accounting_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_accounting_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_accounting_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify Accounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyAccountingModel body: 
        :return: AccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_accounting_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Accounting', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountingExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_accounting_state_post(self, **kwargs):  # noqa: E501
        """heappe_management_accounting_state_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_state_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId:
        :param str SessionCode:
        :return: AccountingStateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_accounting_state_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_accounting_state_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_accounting_state_post_with_http_info(self, **kwargs):  # noqa: E501
        """heappe_management_accounting_state_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_accounting_state_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId:
        :param str SessionCode:
        :return: AccountingStateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_accounting_state_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/AccountingState', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountingStateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_delete(self, **kwargs):  # noqa: E501
        """Remove Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Cluster', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_get(self, **kwargs):  # noqa: E501
        """Get Cluster by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Cluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedClusterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_accounting_delete(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeTypeAggregationAccounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeAggregationAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_accounting_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_accounting_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_accounting_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeTypeAggregationAccounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeAggregationAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_accounting_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregationAccounting', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_accounting_get(self, **kwargs):  # noqa: E501
        """Get ClusterNodeTypeAggregationAccounting by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ClusterNodeTypeAggregationId: 
        :param int AccountingId: 
        :param str SessionCode: 
        :return: ClusterNodeTypeAggregationAccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_accounting_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_accounting_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_accounting_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ClusterNodeTypeAggregationAccounting by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ClusterNodeTypeAggregationId: 
        :param int AccountingId: 
        :param str SessionCode: 
        :return: ClusterNodeTypeAggregationAccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ClusterNodeTypeAggregationId', 'AccountingId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_accounting_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ClusterNodeTypeAggregationId' in params:
            query_params.append(('ClusterNodeTypeAggregationId', params['ClusterNodeTypeAggregationId']))  # noqa: E501
        if 'AccountingId' in params:
            query_params.append(('AccountingId', params['AccountingId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregationAccounting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeAggregationAccountingExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_accounting_post(self, **kwargs):  # noqa: E501
        """Create ClusterNodeTypeAggregationAccounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeAggregationAccountingModel body: 
        :return: ClusterNodeTypeAggregationAccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_accounting_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_accounting_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_accounting_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ClusterNodeTypeAggregationAccounting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_accounting_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeAggregationAccountingModel body: 
        :return: ClusterNodeTypeAggregationAccountingExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_accounting_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregationAccounting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeAggregationAccountingExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_delete(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeAggregationModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeAggregationModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_get(self, **kwargs):  # noqa: E501
        """Get ClusterNodeTypeAggregation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ClusterNodeTypeAggregation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_post(self, **kwargs):  # noqa: E501
        """Create ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeAggregationModel body: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeAggregationModel body: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregation_put(self, **kwargs):  # noqa: E501
        """Modify ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterNodeTypeAggregationModel body: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregation_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregation_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregation_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregation_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterNodeTypeAggregationModel body: 
        :return: ClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregation_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregation', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_aggregations_get(self, **kwargs):  # noqa: E501
        """Get all ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :return: list[ClusterNodeTypeAggregationExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_aggregations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_aggregations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_aggregations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all ClusterNodeTypeAggregations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_aggregations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :return: list[ClusterNodeTypeAggregationExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_aggregations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeTypeAggregations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterNodeTypeAggregationExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_delete(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterNodeTypeModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeType', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_get(self, **kwargs):  # noqa: E501
        """Get ClusterNodeType by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ClusterNodeType by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeType', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_post(self, **kwargs):  # noqa: E501
        """Create ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeModel body: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterNodeTypeModel body: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeType', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_node_type_put(self, **kwargs):  # noqa: E501
        """Modify ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterNodeTypeModel body: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_node_type_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_node_type_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_node_type_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify ClusterNodeType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_node_type_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterNodeTypeModel body: 
        :return: ClusterNodeTypeExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_node_type_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterNodeType', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeTypeExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_post(self, **kwargs):  # noqa: E501
        """Create Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterModel body: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterModel body: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Cluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedClusterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_proxy_connection_delete(self, **kwargs):  # noqa: E501
        """Remove ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterProxyConnectionModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_proxy_connection_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_proxy_connection_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_proxy_connection_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClusterProxyConnectionModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_proxy_connection_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterProxyConnection', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_proxy_connection_get(self, **kwargs):  # noqa: E501
        """Get ClusterProxyConnection by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_proxy_connection_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_proxy_connection_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_proxy_connection_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ClusterProxyConnection by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_proxy_connection_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterProxyConnection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProxyConnectionExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_proxy_connection_post(self, **kwargs):  # noqa: E501
        """Create ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterProxyConnectionModel body: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_proxy_connection_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_proxy_connection_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_proxy_connection_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateClusterProxyConnectionModel body: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_proxy_connection_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterProxyConnection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProxyConnectionExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_proxy_connection_put(self, **kwargs):  # noqa: E501
        """Modify ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterProxyConnectionModel body: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_proxy_connection_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_proxy_connection_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_proxy_connection_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify ClusterProxyConnection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_proxy_connection_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterProxyConnectionModel body: 
        :return: ClusterProxyConnectionExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_proxy_connection_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ClusterProxyConnection', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProxyConnectionExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_cluster_put(self, **kwargs):  # noqa: E501
        """Update Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterModel body: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_cluster_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_cluster_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_cluster_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update Cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_cluster_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyClusterModel body: 
        :return: ExtendedClusterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_cluster_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Cluster', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedClusterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_clusters_get(self, **kwargs):  # noqa: E501
        """Get all clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_clusters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :return: list[ExtendedClusterExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_clusters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_clusters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_clusters_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_clusters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :return: list[ExtendedClusterExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_clusters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExtendedClusterExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_from_generic_post(self, **kwargs):  # noqa: E501
        """Create Command Template from Generic Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_from_generic_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateFromGenericModel body: CreateCommandTemplateFromGenericModel
        :return: CommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_from_generic_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_from_generic_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_from_generic_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Command Template from Generic Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_from_generic_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateFromGenericModel body: CreateCommandTemplateFromGenericModel
        :return: CommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_from_generic_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateFromGeneric', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommandTemplateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_from_generic_put(self, **kwargs):  # noqa: E501
        """Modify Command Template based on Generic Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_from_generic_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateFromGenericModel body: ModifyCommandTemplateFromGenericModel
        :return: CommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_from_generic_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_from_generic_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_from_generic_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify Command Template based on Generic Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_from_generic_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateFromGenericModel body: ModifyCommandTemplateFromGenericModel
        :return: CommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_from_generic_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateFromGeneric', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommandTemplateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_get(self, **kwargs):  # noqa: E501
        """List Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :param int Id: 
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_get_with_http_info(self, **kwargs):  # noqa: E501
        """List Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :param int Id: 
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode', 'Id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_parameter_delete(self, **kwargs):  # noqa: E501
        """Remove Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveCommandTemplateParameterModel body: RemoveCommandTemplateParameterModel
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_parameter_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_parameter_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_parameter_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveCommandTemplateParameterModel body: RemoveCommandTemplateParameterModel
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_parameter_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateParameter', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_parameter_get(self, **kwargs):  # noqa: E501
        """Get CommandTemplateParameter by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_parameter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_parameter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_parameter_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get CommandTemplateParameter by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_parameter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateParameter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateParameterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_parameter_post(self, **kwargs):  # noqa: E501
        """Create Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateParameterModel body: CreateCommandTemplateModel
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_parameter_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_parameter_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_parameter_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateParameterModel body: CreateCommandTemplateModel
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_parameter_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateParameter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateParameterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_parameter_put(self, **kwargs):  # noqa: E501
        """Modify Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateParameterModel body: ModifyCommandTemplateParameterModel
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_parameter_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_parameter_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_parameter_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_parameter_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateParameterModel body: ModifyCommandTemplateParameterModel
        :return: ExtendedCommandTemplateParameterExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_parameter_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplateParameter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateParameterExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_post(self, **kwargs):  # noqa: E501
        """Create Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateModel body: CreateCommandTemplateModel
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCommandTemplateModel body: CreateCommandTemplateModel
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_template_put(self, **kwargs):  # noqa: E501
        """Modify Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateModel body: ModifyCommandTemplateModel
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_template_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_template_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_template_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify Static Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_template_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyCommandTemplateModel body: ModifyCommandTemplateModel
        :return: ExtendedCommandTemplateExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_template_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtendedCommandTemplateExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_command_templates_get(self, **kwargs):  # noqa: E501
        """List Command Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_templates_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :param int ProjectId: 
        :return: list[ExtendedCommandTemplateExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_command_templates_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_command_templates_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_command_templates_get_with_http_info(self, **kwargs):  # noqa: E501
        """List Command Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_command_templates_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: 
        :param int ProjectId: 
        :return: list[ExtendedCommandTemplateExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode', 'ProjectId']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_command_templates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/CommandTemplates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExtendedCommandTemplateExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_compute_accounting_post(self, **kwargs):  # noqa: E501
        """Compute accounting - calculate accounting via accounting formulas  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_compute_accounting_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_compute_accounting_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_compute_accounting_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_compute_accounting_post_with_http_info(self, **kwargs):  # noqa: E501
        """Compute accounting - calculate accounting via accounting formulas  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_compute_accounting_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeAccountingModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_compute_accounting_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ComputeAccounting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_file_transfer_method_delete(self, **kwargs):  # noqa: E501
        """Remove FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveFileTransferMethodModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_file_transfer_method_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_file_transfer_method_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_file_transfer_method_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveFileTransferMethodModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_file_transfer_method_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/FileTransferMethod', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_file_transfer_method_get(self, **kwargs):  # noqa: E501
        """Get FileTransferMethod by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_file_transfer_method_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_file_transfer_method_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_file_transfer_method_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get FileTransferMethod by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_file_transfer_method_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/FileTransferMethod', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileTransferMethodNoCredentialsExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_file_transfer_method_post(self, **kwargs):  # noqa: E501
        """Create FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFileTransferMethodModel body: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_file_transfer_method_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_file_transfer_method_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_file_transfer_method_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFileTransferMethodModel body: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_file_transfer_method_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/FileTransferMethod', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileTransferMethodNoCredentialsExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_file_transfer_method_put(self, **kwargs):  # noqa: E501
        """Modify FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyFileTransferMethodModel body: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_file_transfer_method_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_file_transfer_method_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_file_transfer_method_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify FileTransferMethod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_file_transfer_method_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyFileTransferMethodModel body: 
        :return: FileTransferMethodNoCredentialsExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_file_transfer_method_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/FileTransferMethod', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileTransferMethodNoCredentialsExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_generate_secure_shell_key_post(self, **kwargs):  # noqa: E501
        """Generate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_generate_secure_shell_key_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSecureShellKeyModel body: 
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_generate_secure_shell_key_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_generate_secure_shell_key_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_generate_secure_shell_key_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_generate_secure_shell_key_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSecureShellKeyModel body: 
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_generate_secure_shell_key_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/GenerateSecureShellKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicKeyExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_initialize_cluster_script_directory_post(self, **kwargs):  # noqa: E501
        """Initialize cluster script directory for SSH HPC Account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_initialize_cluster_script_directory_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitializeClusterScriptDirectoryModel body: 
        :return: list[ClusterInitReportExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_initialize_cluster_script_directory_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_initialize_cluster_script_directory_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_initialize_cluster_script_directory_post_with_http_info(self, **kwargs):  # noqa: E501
        """Initialize cluster script directory for SSH HPC Account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_initialize_cluster_script_directory_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitializeClusterScriptDirectoryModel body: 
        :return: list[ClusterInitReportExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_initialize_cluster_script_directory_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/InitializeClusterScriptDirectory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterInitReportExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_instance_information_get(self, **kwargs):  # noqa: E501
        """Get HEAppE Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_instance_information_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: SessionCode
        :return: InstanceInformationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_instance_information_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_instance_information_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_instance_information_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get HEAppE Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_instance_information_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: SessionCode
        :return: InstanceInformationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_instance_information_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/InstanceInformation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstanceInformationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_assignment_to_cluster_delete(self, **kwargs):  # noqa: E501
        """Remove project assignment to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectAssignmentToClusterModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_assignment_to_cluster_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_assignment_to_cluster_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_assignment_to_cluster_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove project assignment to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectAssignmentToClusterModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_assignment_to_cluster_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectAssignmentToCluster', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_assignment_to_cluster_get(self, **kwargs):  # noqa: E501
        """Get ProjectAssignmentToCluster by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param int ClusterId: 
        :param str SessionCode: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_assignment_to_cluster_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_assignment_to_cluster_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_assignment_to_cluster_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ProjectAssignmentToCluster by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param int ClusterId: 
        :param str SessionCode: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'ClusterId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_assignment_to_cluster_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'ClusterId' in params:
            query_params.append(('ClusterId', params['ClusterId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectAssignmentToCluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_assignment_to_cluster_post(self, **kwargs):  # noqa: E501
        """Assign project to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectAssignmentToClusterModel body: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_assignment_to_cluster_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_assignment_to_cluster_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_assignment_to_cluster_post_with_http_info(self, **kwargs):  # noqa: E501
        """Assign project to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectAssignmentToClusterModel body: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_assignment_to_cluster_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectAssignmentToCluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_assignment_to_cluster_put(self, **kwargs):  # noqa: E501
        """Modify project assignment to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectAssignmentToClusterModel body: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_assignment_to_cluster_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_assignment_to_cluster_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_assignment_to_cluster_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify project assignment to the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_assignment_to_cluster_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectAssignmentToClusterModel body: 
        :return: ClusterProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_assignment_to_cluster_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectAssignmentToCluster', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_cluster_node_type_aggregation_delete(self, **kwargs):  # noqa: E501
        """Remove ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectClusterNodeTypeAggregationModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_cluster_node_type_aggregation_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_cluster_node_type_aggregation_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_cluster_node_type_aggregation_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectClusterNodeTypeAggregationModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_cluster_node_type_aggregation_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectClusterNodeTypeAggregation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_cluster_node_type_aggregation_get(self, **kwargs):  # noqa: E501
        """Get ProjectClusterNodeTypeAggregation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param int ClusterNodeTypeAggregationId: 
        :param str SessionCode: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_cluster_node_type_aggregation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_cluster_node_type_aggregation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_cluster_node_type_aggregation_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ProjectClusterNodeTypeAggregation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param int ClusterNodeTypeAggregationId: 
        :param str SessionCode: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'ClusterNodeTypeAggregationId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_cluster_node_type_aggregation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'ClusterNodeTypeAggregationId' in params:
            query_params.append(('ClusterNodeTypeAggregationId', params['ClusterNodeTypeAggregationId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectClusterNodeTypeAggregation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_cluster_node_type_aggregation_post(self, **kwargs):  # noqa: E501
        """Create ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectClusterNodeTypeAggregationModel body: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_cluster_node_type_aggregation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_cluster_node_type_aggregation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_cluster_node_type_aggregation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectClusterNodeTypeAggregationModel body: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_cluster_node_type_aggregation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectClusterNodeTypeAggregation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_cluster_node_type_aggregation_put(self, **kwargs):  # noqa: E501
        """Modify ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectClusterNodeTypeAggregationModel body: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_cluster_node_type_aggregation_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_cluster_node_type_aggregation_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_cluster_node_type_aggregation_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify ProjectClusterNodeTypeAggregation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregation_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectClusterNodeTypeAggregationModel body: 
        :return: ProjectClusterNodeTypeAggregationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_cluster_node_type_aggregation_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectClusterNodeTypeAggregation', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectClusterNodeTypeAggregationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_cluster_node_type_aggregations_get(self, **kwargs):  # noqa: E501
        """Get ProjectClusterNodeTypeAggregations by ProjectId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param str SessionCode: 
        :return: list[ProjectClusterNodeTypeAggregationExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_cluster_node_type_aggregations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_cluster_node_type_aggregations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_cluster_node_type_aggregations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ProjectClusterNodeTypeAggregations by ProjectId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_cluster_node_type_aggregations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param str SessionCode: 
        :return: list[ProjectClusterNodeTypeAggregationExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_cluster_node_type_aggregations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectClusterNodeTypeAggregations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectClusterNodeTypeAggregationExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_delete(self, **kwargs):  # noqa: E501
        """Remove project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveProjectModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Project', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_get(self, **kwargs):  # noqa: E501
        """Get Project by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Project by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int Id: 
        :param str SessionCode: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Id', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Id' in params:
            query_params.append(('Id', params['Id']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_post(self, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectModel body: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProjectModel body: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Project', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_project_put(self, **kwargs):  # noqa: E501
        """Modify project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectModel body: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_project_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_project_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_project_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_project_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifyProjectModel body: 
        :return: ProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_project_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/Project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_projects_by_accounting_strings_get(self, **kwargs):  # noqa: E501
        """Get project by accounting string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_projects_by_accounting_strings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] AccountingString: 
        :param str SessionCode: 
        :return: list[ProjectExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_projects_by_accounting_strings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_projects_by_accounting_strings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_projects_by_accounting_strings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get project by accounting string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_projects_by_accounting_strings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] AccountingString: 
        :param str SessionCode: 
        :return: list[ProjectExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['AccountingString', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_projects_by_accounting_strings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'AccountingString' in params:
            query_params.append(('AccountingString', params['AccountingString']))  # noqa: E501
            collection_formats['AccountingString'] = 'multi'  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/ProjectsByAccountingStrings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_regenerate_secure_shell_key_put(self, **kwargs):  # noqa: E501
        """Regenerate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_regenerate_secure_shell_key_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegenerateSecureShellKeyModel body: 
        :return: PublicKeyExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_regenerate_secure_shell_key_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_regenerate_secure_shell_key_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_regenerate_secure_shell_key_put_with_http_info(self, **kwargs):  # noqa: E501
        """Regenerate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_regenerate_secure_shell_key_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegenerateSecureShellKeyModel body: 
        :return: PublicKeyExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_regenerate_secure_shell_key_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/RegenerateSecureShellKey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicKeyExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_remove_command_template_delete(self, **kwargs):  # noqa: E501
        """Remove Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_remove_command_template_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveCommandTemplateModel body: RemoveCommandTemplateModel
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_remove_command_template_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_remove_command_template_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_remove_command_template_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove Command Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_remove_command_template_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveCommandTemplateModel body: RemoveCommandTemplateModel
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_remove_command_template_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/RemoveCommandTemplate', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_remove_secure_shell_key_delete(self, **kwargs):  # noqa: E501
        """Remove SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_remove_secure_shell_key_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSecureShellKeyModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_remove_secure_shell_key_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_remove_secure_shell_key_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_remove_secure_shell_key_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_remove_secure_shell_key_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSecureShellKeyModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_remove_secure_shell_key_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/RemoveSecureShellKey', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_secure_shell_key_delete(self, **kwargs):  # noqa: E501
        """Remove SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSecureShellKeyModelObsolete body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_secure_shell_key_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_secure_shell_key_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_secure_shell_key_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSecureShellKeyModelObsolete body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_secure_shell_key_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SecureShellKey', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_secure_shell_key_post(self, **kwargs):  # noqa: E501
        """Generate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSecureShellKeyModelObsolete body: 
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_secure_shell_key_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_secure_shell_key_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_secure_shell_key_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSecureShellKeyModelObsolete body: 
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_secure_shell_key_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SecureShellKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicKeyExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_secure_shell_key_put(self, **kwargs):  # noqa: E501
        """Regenerate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegenerateSecureShellKeyModelObsolete body: 
        :return: PublicKeyExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_secure_shell_key_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_secure_shell_key_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_secure_shell_key_put_with_http_info(self, **kwargs):  # noqa: E501
        """Regenerate SSH key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_key_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegenerateSecureShellKeyModelObsolete body: 
        :return: PublicKeyExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_secure_shell_key_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SecureShellKey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicKeyExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_secure_shell_keys_get(self, **kwargs):  # noqa: E501
        """Get SSH keys for project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_keys_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId:
        :param str SessionCode:
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_secure_shell_keys_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_secure_shell_keys_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_secure_shell_keys_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get SSH keys for project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_secure_shell_keys_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId:
        :param str SessionCode:
        :return: list[PublicKeyExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_secure_shell_keys_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SecureShellKeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicKeyExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_sub_project_delete(self, **kwargs):  # noqa: E501
        """Remove SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSubProjectModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_sub_project_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_sub_project_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_sub_project_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveSubProjectModel body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_sub_project_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SubProject', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_sub_project_get(self, **kwargs):  # noqa: E501
        """List SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int SubProjectId: 
        :param str SessionCode: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_sub_project_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_sub_project_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_sub_project_get_with_http_info(self, **kwargs):  # noqa: E501
        """List SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int SubProjectId: 
        :param str SessionCode: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SubProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_sub_project_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SubProjectId' in params:
            query_params.append(('SubProjectId', params['SubProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SubProject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_sub_project_post(self, **kwargs):  # noqa: E501
        """Create SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSubProjectModel body: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_sub_project_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_sub_project_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_sub_project_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSubProjectModel body: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_sub_project_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SubProject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_sub_project_put(self, **kwargs):  # noqa: E501
        """Modify SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifySubProjectModel body: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_sub_project_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_sub_project_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_sub_project_put_with_http_info(self, **kwargs):  # noqa: E501
        """Modify SubProject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_project_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModifySubProjectModel body: 
        :return: SubProjectExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_sub_project_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SubProject', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubProjectExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_sub_projects_get(self, **kwargs):  # noqa: E501
        """List SubProjects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_projects_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param str SessionCode: 
        :return: list[SubProjectExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_sub_projects_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_sub_projects_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_sub_projects_get_with_http_info(self, **kwargs):  # noqa: E501
        """List SubProjects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_sub_projects_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ProjectId: 
        :param str SessionCode: 
        :return: list[SubProjectExt]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_sub_projects_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/SubProjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SubProjectExt]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_test_cluster_access_for_account_get(self, **kwargs):  # noqa: E501
        """Test cluster access for robot account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_test_cluster_access_for_account_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str Username: 
        :param int ProjectId: 
        :param str SessionCode: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_test_cluster_access_for_account_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_test_cluster_access_for_account_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_test_cluster_access_for_account_get_with_http_info(self, **kwargs):  # noqa: E501
        """Test cluster access for robot account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_test_cluster_access_for_account_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str Username: 
        :param int ProjectId: 
        :param str SessionCode: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Username', 'ProjectId', 'SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_test_cluster_access_for_account_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'Username' in params:
            query_params.append(('Username', params['Username']))  # noqa: E501
        if 'ProjectId' in params:
            query_params.append(('ProjectId', params['ProjectId']))  # noqa: E501
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/TestClusterAccessForAccount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_test_cluster_access_for_account_post(self, **kwargs):  # noqa: E501
        """Test cluster access for robot account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_test_cluster_access_for_account_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestClusterAccessForAccountModelObsolete body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_test_cluster_access_for_account_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_test_cluster_access_for_account_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_test_cluster_access_for_account_post_with_http_info(self, **kwargs):  # noqa: E501
        """Test cluster access for robot account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_test_cluster_access_for_account_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestClusterAccessForAccountModelObsolete body: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_test_cluster_access_for_account_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/TestClusterAccessForAccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def heappe_management_version_information_get(self, **kwargs):  # noqa: E501
        """Get HEAppE Version Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_version_information_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: SessionCode
        :return: VersionInformationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.heappe_management_version_information_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.heappe_management_version_information_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def heappe_management_version_information_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get HEAppE Version Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.heappe_management_version_information_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str SessionCode: SessionCode
        :return: VersionInformationExt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['SessionCode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method heappe_management_version_information_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'SessionCode' in params:
            query_params.append(('SessionCode', params['SessionCode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/heappe/Management/VersionInformation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionInformationExt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
