[build-system]
requires = ["hatchling>=1.0.0"]
build-backend = "hatchling.build"

[project]
name = "aiogram-sentinel"
version = "1.1.0"
description = "Edge hygiene library for aiogram v3 with middlewares, router, and storage backends"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "aiogram-sentinel contributors"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.10"
dependencies = [
    "aiogram>=3.0.0",
    "redis>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pyright>=1.1.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "pip-audit>=2.0.0",
    "build>=1.0.0",
    "twine>=5.0.0",
]
redis = [
    "redis>=5.0",
]
sentry = [
    "sentry-sdk>=1.40.0",
]

[project.urls]
Homepage = "https://github.com/aiogram-sentinel/aiogram-sentinel"
Repository = "https://github.com/aiogram-sentinel/aiogram-sentinel"
Issues = "https://github.com/aiogram-sentinel/aiogram-sentinel/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/aiogram_sentinel"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["aiogram_sentinel"]

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
strictReturn = true
strictVariableTypes = true
strictTypeChecking = true

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "perf: Performance tests", 
    "integration: Integration tests",
    "slow: Slow tests",
    "asyncio: Async tests",
    "benchmark: Performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "hatchling>=1.27.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.20",
    "mkdocstrings[python]>=0.30.1",
    "pyright>=1.1.405",
]

[tool.towncrier]
package = "aiogram_sentinel"
package_dir = "src"
filename = "CHANGELOG.md"
directory = "CHANGES"
# template = "CHANGES/.template.rst.jinja2"
start_string = "<!-- towncrier release notes start -->\n"
title_format = "## [{version}] - {project_date}"
issue_format = "[#{issue}](https://github.com/ArmanAvanesyan/aiogram-sentinel/issues/{issue})"
underlines = ["", "", ""]
wrap = true
all_bullets = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous"
showcontent = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/aiogram_sentinel/version.py:__version__"]
build_command = "uv run python -m hatchling build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = false
upload_to_release = false
commit_subject = "chore(release): {version} [skip ci]"
commit_message = "chore(release): {version} [skip ci]"
tag_commit = true
tag_message = "Release {version}"
major_on_zero = false
prerelease = false

[tool.semantic_release.branches.main]
match = "main"
prerelease = false


[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
major_tags = ["BREAKING CHANGE"]
