{
    "description": "<div class=\"document\" id=\"traited-class-tvb-simulator-integrators-eulerstochastic\">\n<h1 class=\"title\">Traited class [tvb.simulator.integrators.EulerStochastic]</h1>\n<blockquote>\nIt is the simplest difference methods for the initial value problem. The\nrecursive structure of Euler scheme, which evaluates approximate values to\nthe Ito process at the discretization instants only, is the key to its\nsuccessful implementation.</blockquote>\n<div class=\"section\" id=\"attributes-declared\">\n<h1>Attributes declared</h1>\n<dl class=\"docutils\">\n<dt>noise <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.integrators.IntegratorStochastic.noise = Attr(field_type=&lt;class 'tvb.simulator.noise.Noise'&gt;, default=&lt;class 'tvb.simulator.noise.Additive'&gt;, required=True)</span></dt>\n<dd>The stochastic integrator's noise source. It incorporates its\nown instance of Numpy's RandomState.</dd>\n<dt>dt <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.integrators.Integrator.dt = Float(field_type=&lt;class 'float'&gt;, default=0.01220703125, required=True)</span></dt>\n<dd>The step size used by the integration routine in ms. This\nshould be chosen to be small enough for the integration to be\nnumerically stable. It is also necessary to consider the desired sample\nperiod of the Monitors, as they are restricted to being integral\nmultiples of this value. The default value is set such that all built-in\nmodels are numerically stable with there default parameters and because\nit is consitent with Monitors using sample periods corresponding to\npowers of 2 from 128 to 4096Hz.</dd>\n</dl>\n<p>bounded_state_variable_indices : tvb.simulator.integrators.Integrator.bounded_state_variable_indices = NArray(label=&quot;indices of the state variables to be bounded by the integrators within the boundaries in the boundaries' values array&quot;, dtype=int64, default=None, dim_names=(), ndim=None, required=False)</p>\n<p>state_variable_boundaries : tvb.simulator.integrators.Integrator.state_variable_boundaries = NArray(label='The boundary values of the state variables', dtype=float64, default=None, dim_names=(), ndim=None, required=False)</p>\n<p>clamped_state_variable_indices : tvb.simulator.integrators.Integrator.clamped_state_variable_indices = NArray(label='indices of the state variables to be clamped by the integrators to the values in the clamped_values array', dtype=int64, default=None, dim_names=(), ndim=None, required=False)</p>\n<p>clamped_state_variable_values : tvb.simulator.integrators.Integrator.clamped_state_variable_values = NArray(label='The values of the state variables which are clamped ', dtype=float64, default=None, dim_names=(), ndim=None, required=False)</p>\n<p>gid : tvb.basic.neotraits._core.HasTraits.gid = Attr(field_type=&lt;class 'uuid.UUID'&gt;, default=None, required=True)</p>\n</div>\n</div>\n",
    "arguments": {
        "noise": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The stochastic integrator's noise source. It incorporates its</dt>\n<dd>own instance of Numpy's RandomState.</dd>\n</dl>\n</div>\n",
        "dt": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The step size used by the integration routine in ms. This</dt>\n<dd>should be chosen to be small enough for the integration to be\nnumerically stable. It is also necessary to consider the desired sample\nperiod of the Monitors, as they are restricted to being integral\nmultiples of this value. The default value is set such that all built-in\nmodels are numerically stable with there default parameters and because\nit is consitent with Monitors using sample periods corresponding to\npowers of 2 from 128 to 4096Hz.</dd>\n</dl>\n</div>\n"
    }
}