{
    "description": "<div class=\"document\" id=\"traited-class-tvb-simulator-models-zerlaut-zerlautadaptationfirstorder\">\n<h1 class=\"title\">Traited class [tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder]</h1>\n<blockquote>\n<p><strong>References</strong>:\n.. [ZD_2018]  Zerlaut, Y., Chemla, S., Chavane, F. et al. <em>Modeling mesoscopic cortical dynamics using a mean-field\nmodel of conductance-based networks of adaptive\nexponential integrate-and-fire neurons</em>,\nJ Comput Neurosci (2018) 44: 45. <a class=\"reference external\" href=\"https://doi-org.lama.univ-amu.fr/10.1007/s10827-017-0668-2\">https://doi-org.lama.univ-amu.fr/10.1007/s10827-017-0668-2</a>\n.. [MV_2018]  Matteo di Volo, Alberto Romagnoni, Cristiano Capone, Alain Destexhe (2018)\n<em>Mean-field model for the dynamics of conductance-based networks of excitatory and inhibitory spiking neurons\nwith adaptation</em>, bioRxiv, doi: <a class=\"reference external\" href=\"https://doi.org/10.1101/352393\">https://doi.org/10.1101/352393</a></p>\n<p>Used Eqns 4 from [MV_2018]_ in <tt class=\"docutils literal\">dfun</tt>.</p>\n<p>The default parameters are taken from table 1 of [ZD_2018]_, pag.47 and modify for the adaptation [MV_2018]\n+---------------------------+------------+\n|                 Table 1                |\n+--------------+------------+------------+\n|Parameter     |  Value     | Unit       |\n+==============+============+============+\n|             cellular property          |\n+--------------+------------+------------+\n| g_L          |   10.00    |   nS       |\n+--------------+------------+------------+\n| E_L_e        |  -60.00    |   mV       |\n+--------------+------------+------------+\n| E_L_i        |  -65.00    |   mV       |\n+--------------+------------+------------+\n| C_m          |   200.0    |   pF       |\n+--------------+------------+------------+\n| b_e          |   60.0     |   nS       |\n+--------------+------------+------------+\n| b_i          |   0.0      |   nS       |\n+--------------+------------+------------+\n| a_e          |   4.0      |   nS       |\n+--------------+------------+------------+\n| a_i          |   0.0      |   nS       |\n+--------------+------------+------------+\n| tau_w_e      |   500.0    |   ms       |\n+--------------+------------+------------+\n| tau_w_i      |   0.0      |   ms       |\n+--------------+------------+------------+\n| T            |   20.0      |   ms       |\n+--------------+------------+------------+\n|          synaptic properties           |\n+--------------+------------+------------+\n| E_e          |    0.0     | mV         |\n+--------------+------------+------------+\n| E_i          |   -80.0    | mV         |\n+--------------+------------+------------+\n| Q_e          |    1.0     | nS         |\n+--------------+------------+------------+\n| Q_i          |    5.0     | nS         |\n+--------------+------------+------------+\n| tau_e        |    5.0     | ms         |\n+--------------+------------+------------+\n| tau_i        |    5.0     | ms         |\n+--------------+------------+------------+\n|          numerical network             |\n+--------------+------------+------------+\n| N_tot        |  10000     |            |\n+--------------+------------+------------+\n| p_connect    |    5.0 %   |            |\n+--------------+------------+------------+\n| g            |   20.0 %   |            |\n+--------------+------------+------------+\n| K_e_ext      |   400      |            |\n+--------------+------------+------------+\n| K_i_ext      |   0        |            |\n+--------------+------------+------------+\n|external_input|    0.000   | Hz         |\n+--------------+------------+------------+</p>\n<p>The default coefficients of the transfer function are taken from table I of [MV_2018]_, pag.49\n+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+\n|      excitatory cell      |\n+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+\n|  -4.98e-02  |   5.06e-03  |  -2.5e-02   |   1.4e-03   |  -4.1e-04   |   1.05e-02  |  -3.6e-02   |   7.4e-03   |   1.2e-03   |  -4.07e-02  |\n+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+\n|      inhibitory cell      |\n+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+\n|  -5.14e-02  |   4.0e-03   |  -8.3e-03   |   2.0e-04   |  -5.0e-04   |   1.4e-03   |  -1.46e-02  |   4.5e-03   |   2.8e-03   |  -1.53e-02  |\n+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+-------------+</p>\n<p>The models (<span class=\"math first last\">\\(E\\)</span>, <span class=\"math first last\">\\(I\\)</span>) phase-plane, including a representation of\nthe vector field as well as its null-clines, using default parameters, can be\nseen below:</p>\n<p>The general formulation for the Zerlaut adaptation first order model as a\ndynamical unit at a node $k$ in a BNM with $l$ nodes reads:</p>\n<div class=\"math first last\">\n\\begin{align*}\nT\\dot{E}_k &amp;= F_e-E_k \\\\\nT\\dot{I}_k &amp;= F_i-I_k \\\\\n\\dot{W}_k &amp;= W_k/tau_w-b*E_k \\\\\nF_\\lambda = Erfc(V^{eff}_{thre}-\\mu_V/\\sqrt(2)\\sigma_V)\n\\end{align*}\n</div>\n</blockquote>\n<div class=\"section\" id=\"attributes-declared\">\n<h1>Attributes declared</h1>\n<dl class=\"docutils\">\n<dt>g_L <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.g_L = NArray(label='<span class=\"math first last\">\\(g_{L}\\)</span>', dtype=float64, default=array([10.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak conductance [nS]</dd>\n<dt>E_L_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_L_e = NArray(label='<span class=\"math first last\">\\(E_{Le}\\)</span>', dtype=float64, default=array([-65.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak reversal potential for excitatory [mV]</dd>\n<dt>E_L_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_L_i = NArray(label='<span class=\"math first last\">\\(E_{Li}\\)</span>', dtype=float64, default=array([-65.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak reversal potential for inhibitory [mV]</dd>\n<dt>C_m <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.C_m = NArray(label='<span class=\"math first last\">\\(C_{m}\\)</span>', dtype=float64, default=array([200.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>membrane capacitance [pF]</dd>\n<dt>b_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.b_e = NArray(label='<span class=\"math first last\">\\(b_e\\)</span>', dtype=float64, default=array([60.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Excitatory adaptation current increment [pA]</dd>\n<dt>a_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.a_e = NArray(label='<span class=\"math first last\">\\(a_e\\)</span>', dtype=float64, default=array([4.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Excitatory adaptation conductance [nS]</dd>\n<dt>b_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.b_i = NArray(label='<span class=\"math first last\">\\(b_i\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Inhibitory adaptation current increment [pA]</dd>\n<dt>a_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.a_i = NArray(label='<span class=\"math first last\">\\(a_i\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Inhibitory adaptation conductance [nS]</dd>\n<dt>tau_w_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_w_e = NArray(label='<span class=\"math first last\">\\(\\\\tau_{we}\\)</span>', dtype=float64, default=array([500.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Adaptation time constant of excitatory neurons [ms]</dd>\n<dt>tau_w_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_w_i = NArray(label='<span class=\"math first last\">\\(\\\\tau_{wi}\\)</span>', dtype=float64, default=array([1.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Adaptation time constant of inhibitory neurons [ms]</dd>\n<dt>E_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_e = NArray(label='<span class=\"math first last\">\\(E_e\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory reversal potential [mV]</dd>\n<dt>E_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_i = NArray(label='<span class=\"math first last\">\\(E_i\\)</span>', dtype=float64, default=array([-80.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory reversal potential [mV]</dd>\n<dt>Q_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.Q_e = NArray(label='<span class=\"math first last\">\\(Q_e\\)</span>', dtype=float64, default=array([1.5]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory quantal conductance [nS]</dd>\n<dt>Q_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.Q_i = NArray(label='<span class=\"math first last\">\\(Q_i\\)</span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory quantal conductance [nS]</dd>\n<dt>tau_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_e = NArray(label='<span class=\"math first last\">\\(\\\\tau_e\\)</span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory decay [ms]</dd>\n<dt>tau_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_i = NArray(label='<span class=\"math first last\">\\(\\\\tau_i\\)</span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory decay [ms]</dd>\n<dt>N_tot <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.N_tot = NArray(label='<span class=\"math first last\">\\(N_{tot}\\)</span>', dtype=int64, default=array([10000]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>cell number</dd>\n<dt>p_connect_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.p_connect_e = NArray(label='<span class=\"math first last\">\\(\\\\epsilon\\)</span>', dtype=float64, default=array([0.05]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>connectivity probability</dd>\n<dt>p_connect_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.p_connect_i = NArray(label='<span class=\"math first last\">\\(\\\\epsilon\\)</span>', dtype=float64, default=array([0.05]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>connectivity probability</dd>\n<dt>g <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.g = NArray(label='<span class=\"math first last\">\\(g\\)</span>', dtype=float64, default=array([0.2]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>fraction of inhibitory cells</dd>\n<dt>K_ext_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.K_ext_e = NArray(label='<span class=\"math first last\">\\(K_ext_e\\)</span>', dtype=int64, default=array([400]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Number of excitatory connexions from external population</dd>\n<dt>K_ext_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.K_ext_i = NArray(label='<span class=\"math first last\">\\(K_ext_i\\)</span>', dtype=int64, default=array([0]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Number of inhibitory connexions from external population</dd>\n<dt>T <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.T = NArray(label='<span class=\"math first last\">\\(T\\)</span>', dtype=float64, default=array([20.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>time scale of describing network activity</dd>\n<dt>P_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.P_e = NArray(label='<span class=\"math first last\">\\(P_e\\)</span>', dtype=float64, default=array([-0.04983106,  0.00506355, -0.02347012,  0.00229515, -0.00041053,</span></dt>\n<dd><blockquote class=\"first\">\n0.01054705, -0.03659253,  0.00743749,  0.00126506, -0.04072161]), dim_names=(), ndim=None, required=True)</blockquote>\n<p class=\"last\">Polynome of excitatory phenomenological threshold (order 9)</p>\n</dd>\n<dt>P_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.P_i = NArray(label='<span class=\"math first last\">\\(P_i\\)</span>', dtype=float64, default=array([-0.05149122,  0.00400369, -0.00835201,  0.00024142, -0.00050706,</span></dt>\n<dd><blockquote class=\"first\">\n0.00143454, -0.01468669,  0.00450271,  0.00284722, -0.0153578 ]), dim_names=(), ndim=None, required=True)</blockquote>\n<p class=\"last\">Polynome of inhibitory phenomenological threshold (order 9)</p>\n</dd>\n<dt>external_input_ex_ex <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_ex_ex = NArray(label='<span class=\"math first last\">\\(\\\\nu_e^{drive}\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_ex_in <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_ex_in = NArray(label='<span class=\"math first last\">\\(\\\\nu_e^{drive}\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_in_ex <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_in_ex = NArray(label='<span class=\"math first last\">\\(\\\\nu_e^{drive}\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_in_in <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_in_in = NArray(label='<span class=\"math first last\">\\(\\\\nu_e^{drive}\\)</span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>tau_OU <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_OU = NArray(label='<span class=\"math first last\">\\(\\\\tau\\)</span> noise', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>time constant noise</dd>\n<dt>weight_noise <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.weight_noise = NArray(label='Weight noise', dtype=float64, default=array([10.5]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>weight noise</dd>\n<dt>S_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.S_i = NArray(label='Scaling Inh', dtype=float64, default=array([1.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Scaling of the remote input for the inhibitory population with\nrespect to the excitatory population.</dd>\n<dt>state_variable_range <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.state_variable_range = Final(field_type=&lt;class 'dict'&gt;, default={'E': array([0.001, 0.25 ]), 'I': array([0.001, 0.25 ]), 'W_e': array([  0., 200.]), 'W_i': array([0., 0.]), 'ou_drift': array([0., 0.])}, required=True)</span></dt>\n<dd><p class=\"first\">The values for each state-variable should be set to encompass\nthe expected dynamic range of that state-variable for the current\nparameters, it is used as a mechanism for bounding random initial\nconditions when the simulation isn't started from an explicit history,\nit is also provides the default range of phase-plane plots.</p>\n<p>E: firing rate of excitatory population in KHz</p>\n<p>I: firing rate of inhibitory population in KHz</p>\n<p>W_e: level of adaptation of excitatory in pA</p>\n<p class=\"last\">W_i: level of adaptation of inhibitory in pA</p>\n</dd>\n<dt>variables_of_interest <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.variables_of_interest = List(of=&lt;class 'str'&gt;, default=('E',), required=True)</span></dt>\n<dd>This represents the default state-variables of this Model to be\nmonitored. It can be overridden for each Monitor if desired. The\ncorresponding state-variable indices for this model are <span class=\"math first last\">\\(E = 0\\)</span>,\n<span class=\"math first last\">\\(I = 1\\)</span> and <span class=\"math first last\">\\(W = 2\\)</span>.</dd>\n<dt>state_variable_boundaries <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.state_variable_boundaries = Final(field_type=&lt;class 'dict'&gt;, default={'E': array([0.0, None], dtype=object), 'I': array([0.0, None], dtype=object)}, required=True)</span></dt>\n<dd>The values for each state-variable should be set to encompass\nthe boundaries of the dynamic range of that state-variable. Set None for one-sided boundaries</dd>\n</dl>\n<p>gid : tvb.basic.neotraits._core.HasTraits.gid = Attr(field_type=&lt;class 'uuid.UUID'&gt;, default=None, required=True)</p>\n</div>\n</div>\n",
    "arguments": {
        "g_L": "<div class=\"document\">\n<p>leak conductance [nS]</p>\n</div>\n",
        "E_L_e": "<div class=\"document\">\n<p>leak reversal potential for excitatory [mV]</p>\n</div>\n",
        "E_L_i": "<div class=\"document\">\n<p>leak reversal potential for inhibitory [mV]</p>\n</div>\n",
        "C_m": "<div class=\"document\">\n<p>membrane capacitance [pF]</p>\n</div>\n",
        "b_e": "<div class=\"document\">\n<p>Excitatory adaptation current increment [pA]</p>\n</div>\n",
        "a_e": "<div class=\"document\">\n<p>Excitatory adaptation conductance [nS]</p>\n</div>\n",
        "b_i": "<div class=\"document\">\n<p>Inhibitory adaptation current increment [pA]</p>\n</div>\n",
        "a_i": "<div class=\"document\">\n<p>Inhibitory adaptation conductance [nS]</p>\n</div>\n",
        "tau_w_e": "<div class=\"document\">\n<p>Adaptation time constant of excitatory neurons [ms]</p>\n</div>\n",
        "tau_w_i": "<div class=\"document\">\n<p>Adaptation time constant of inhibitory neurons [ms]</p>\n</div>\n",
        "E_e": "<div class=\"document\">\n<p>excitatory reversal potential [mV]</p>\n</div>\n",
        "E_i": "<div class=\"document\">\n<p>inhibitory reversal potential [mV]</p>\n</div>\n",
        "Q_e": "<div class=\"document\">\n<p>excitatory quantal conductance [nS]</p>\n</div>\n",
        "Q_i": "<div class=\"document\">\n<p>inhibitory quantal conductance [nS]</p>\n</div>\n",
        "tau_e": "<div class=\"document\">\n<p>excitatory decay [ms]</p>\n</div>\n",
        "tau_i": "<div class=\"document\">\n<p>inhibitory decay [ms]</p>\n</div>\n",
        "N_tot": "<div class=\"document\">\n<p>cell number</p>\n</div>\n",
        "p_connect_e": "<div class=\"document\">\n<p>connectivity probability</p>\n</div>\n",
        "p_connect_i": "<div class=\"document\">\n<p>connectivity probability</p>\n</div>\n",
        "g": "<div class=\"document\">\n<p>fraction of inhibitory cells</p>\n</div>\n",
        "K_ext_e": "<div class=\"document\">\n<p>Number of excitatory connexions from external population</p>\n</div>\n",
        "K_ext_i": "<div class=\"document\">\n<p>Number of inhibitory connexions from external population</p>\n</div>\n",
        "T": "<div class=\"document\">\n<p>time scale of describing network activity</p>\n</div>\n",
        "P_e": "<div class=\"document\">\n<p>Polynome of excitatory phenomenological threshold (order 9)</p>\n</div>\n",
        "P_i": "<div class=\"document\">\n<p>Polynome of inhibitory phenomenological threshold (order 9)</p>\n</div>\n",
        "external_input_ex_ex": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_ex_in": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_in_ex": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_in_in": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "tau_OU": "<div class=\"document\">\n<p>time constant noise</p>\n</div>\n",
        "weight_noise": "<div class=\"document\">\n<p>weight noise</p>\n</div>\n",
        "S_i": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>Scaling of the remote input for the inhibitory population with</dt>\n<dd>respect to the excitatory population.</dd>\n</dl>\n</div>\n",
        "state_variable_range": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The values for each state-variable should be set to encompass</dt>\n<dd><p class=\"first\">the expected dynamic range of that state-variable for the current\nparameters, it is used as a mechanism for bounding random initial\nconditions when the simulation isn't started from an explicit history,\nit is also provides the default range of phase-plane plots.</p>\n<p>E: firing rate of excitatory population in KHz</p>\n<p>I: firing rate of inhibitory population in KHz</p>\n<p>W_e: level of adaptation of excitatory in pA</p>\n<p class=\"last\">W_i: level of adaptation of inhibitory in pA</p>\n</dd>\n</dl>\n</div>\n",
        "variables_of_interest": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>This represents the default state-variables of this Model to be</dt>\n<dd>monitored. It can be overridden for each Monitor if desired. The\ncorresponding state-variable indices for this model are <span class=\"math first last\">\\(E = 0\\)</span>,\n<span class=\"math first last\">\\(I = 1\\)</span> and <span class=\"math first last\">\\(W = 2\\)</span>.</dd>\n</dl>\n</div>\n",
        "state_variable_boundaries": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The values for each state-variable should be set to encompass</dt>\n<dd>the boundaries of the dynamic range of that state-variable. Set None for one-sided boundaries</dd>\n</dl>\n</div>\n"
    }
}