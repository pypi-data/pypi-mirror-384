[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-modular-framework"
version = "1.0.0"
description = "一个功能完整的Python模块化框架，支持组件化开发、依赖注入、中间件系统、插件机制等现代软件开发的核心特性"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Python模块化框架开发团队", email = "dev@python-modular-framework.org"}
]
maintainers = [
    {name = "Python模块化框架开发团队", email = "dev@python-modular-framework.org"}
]
keywords = ["framework", "modular", "dependency-injection", "middleware", "plugins"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.20.0",
]
redis = [
    "redis>=4.0.0",
]
postgresql = [
    "psycopg2-binary>=2.9.0",
]
mysql = [
    "pymysql>=1.0.0",
]
all = [
    "python-modular-framework[dev,redis,postgresql,mysql]",
]

[project.urls]
Homepage = "https://github.com/python-modular-framework/python-modular-framework"
Documentation = "https://python-modular-framework.readthedocs.io"
Repository = "https://github.com/python-modular-framework/python-modular-framework.git"
Issues = "https://github.com/python-modular-framework/python-modular-framework/issues"
Changelog = "https://github.com/python-modular-framework/python-modular-framework/blob/main/CHANGELOG.md"

[project.scripts]
framework = "framework.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "psycopg2.*",
    "pymysql.*",
    "yaml.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=framework",
    "--cov=components",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["framework", "components"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
output = "json"