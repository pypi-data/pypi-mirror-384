Description: Active Controls â€“ Disconnect
Category: Control
Classes:
  # Note - A is explicitly omitted, this test is ONLY for subscription clients
  - S

TargetVersions:
  - v1.2
  - v1.3-beta/storage

Criteria:
  checks:
    - type: all-steps-complete
      parameters: {}
    - type: all-notifications-transmitted
      parameters: {}

Preconditions:
  init_actions:
    - type: set-comms-rate
      parameters:
        dcap_poll_seconds: 60
        edev_list_poll_seconds: 60
        fsa_list_poll_seconds: 60
        der_list_poll_seconds: 900 # Set this to a large value - testing they respond due to notification - not polling
        derp_list_poll_seconds: 900 # Set this to a large value - testing they respond due to notification - not polling
        mup_post_seconds: 60
  checks:
    - type: end-device-contents
      parameters: {}
  actions:
    # (a, b)
    - type: create-der-control
      parameters:
        start: $(now)
        duration_seconds: 300
        opModConnect: false
  instructions:
    - EndDevice should be registered with active subscriptions before starting.
    - DER shall be generating or consuming at least 50% of its active power rating.
    
Steps:
  
  # (c, d)
  PUT-DERSTATUS-DISCONNECT:
    event:
      type: PUT-request-received
      parameters:
        endpoint: /edev/1/der/1/ders
        serve_request_first: true # Run this AFTER server receives the request
      # Only trigger this if the server has an updated DERStatus
      checks:
        - type: der-status-contents
          parameters: 
            genConnectStatus_bit0: false
    actions:
      - type: enable-steps
        parameters:
          steps:
            - PUT-DERSTATUS-CONNECT
            - WAIT-TEST-END
      - type: create-der-control
        parameters:
          start: $(now)
          duration_seconds: 600
          opModConnect: true
      - type: remove-steps
        parameters:
          steps:
            - PUT-DERSTATUS-DISCONNECT

  # (f)
  PUT-DERSTATUS-CONNECT:
    event:
      type: PUT-request-received
      parameters:
        endpoint: /edev/1/der/1/ders
        serve_request_first: true # Run this AFTER server receives the request
      # Only trigger this if the server has an updated DERStatus
      checks:
        - type: der-status-contents
          parameters: 
            genConnectStatus_bit0: true
    actions:
      - type: remove-steps
        parameters:
          steps:
            - PUT-DERSTATUS-CONNECT

  # (e) We give the client a minute to respond with a reconnect
  WAIT-TEST-END:
    event:
      type: wait
      parameters:
        duration_seconds: 60
    actions:
      - type: remove-steps
        parameters:
          steps:
            - WAIT-TEST-END
      - type: finish-test
        parameters: {}
