from typing import ClassVar, Optional

from typing import overload

class Config:
    configVersion: Optional[str]
    model: Model
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, configVersion: str, model: Model) -> None: ...

class DataType:
    __members__: ClassVar[dict] = ...  # read-only
    BOOLEAN: ClassVar[DataType] = ...
    FLOAT16: ClassVar[DataType] = ...
    FLOAT32: ClassVar[DataType] = ...
    FLOAT64: ClassVar[DataType] = ...
    INT16: ClassVar[DataType] = ...
    INT32: ClassVar[DataType] = ...
    INT4: ClassVar[DataType] = ...
    INT64: ClassVar[DataType] = ...
    INT8: ClassVar[DataType] = ...
    STRING: ClassVar[DataType] = ...
    UINT16: ClassVar[DataType] = ...
    UINT32: ClassVar[DataType] = ...
    UINT4: ClassVar[DataType] = ...
    UINT64: ClassVar[DataType] = ...
    UINT8: ClassVar[DataType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Head:
    metadata: Metadata
    name: Optional[str]
    outputs: Optional[list[str]]
    parser: str
    def __init__(self) -> None: ...

class Input:
    dtype: DataType
    inputType: InputType
    layout: Optional[str]
    name: str
    preprocessing: PreprocessingBlock
    shape: list[int]
    def __init__(self) -> None: ...

class InputType:
    __members__: ClassVar[dict] = ...  # read-only
    IMAGE: ClassVar[InputType] = ...
    RAW: ClassVar[InputType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Metadata:
    anchors: Optional[list[list[list[float]]]]
    anglesOutputs: Optional[list[str]]
    boxesOutputs: Optional[str]
    classes: Optional[list[str]]
    confThreshold: Optional[float]
    extraParams: json
    iouThreshold: Optional[float]
    isSoftmax: Optional[bool]
    keypointsOutputs: Optional[list[str]]
    maskOutputs: Optional[list[str]]
    maxDet: Optional[int]
    nClasses: Optional[int]
    nKeypoints: Optional[int]
    nPrototypes: Optional[int]
    postprocessorPath: Optional[str]
    protosOutputs: Optional[str]
    scoresOutputs: Optional[str]
    subtype: Optional[str]
    yoloOutputs: Optional[list[str]]
    def __init__(self) -> None: ...

class MetadataClass:
    name: str
    path: str
    precision: Optional[DataType]
    def __init__(self) -> None: ...

class Model:
    heads: Optional[list[Head]]
    inputs: list[Input]
    metadata: MetadataClass
    outputs: list[Output]
    def __init__(self) -> None: ...

class Output:
    dtype: DataType
    layout: Optional[str]
    name: str
    shape: Optional[list[int]]
    def __init__(self) -> None: ...

class PreprocessingBlock:
    daiType: Optional[str]
    interleavedToPlanar: Optional[bool]
    mean: Optional[list[float]]
    reverseChannels: Optional[bool]
    scale: Optional[list[float]]
    def __init__(self) -> None: ...
