from typing import Any, ClassVar

class MedianFilter:
    __members__: ClassVar[dict] = ...  # read-only
    KERNEL_3x3: ClassVar[MedianFilter] = ...
    KERNEL_5x5: ClassVar[MedianFilter] = ...
    KERNEL_7x7: ClassVar[MedianFilter] = ...
    MEDIAN_OFF: ClassVar[MedianFilter] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class SpatialFilter:
    alpha: float
    delta: int
    enable: bool
    holeFillingRadius: int
    numIterations: int
    def __init__(self) -> None: ...

class SpeckleFilter:
    differenceThreshold: int
    enable: bool
    speckleRange: int
    def __init__(self) -> None: ...

class TemporalFilter:
    class PersistencyMode:
        __members__: ClassVar[dict] = ...  # read-only
        PERSISTENCY_INDEFINITELY: ClassVar[TemporalFilter.PersistencyMode] = ...
        PERSISTENCY_OFF: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_1_IN_LAST_2: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_1_IN_LAST_5: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_1_IN_LAST_8: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_2_IN_LAST_3: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_2_IN_LAST_4: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_2_OUT_OF_8: ClassVar[TemporalFilter.PersistencyMode] = ...
        VALID_8_OUT_OF_8: ClassVar[TemporalFilter.PersistencyMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    alpha: float
    delta: int
    enable: bool
    persistencyMode: Any
    def __init__(self) -> None: ...
