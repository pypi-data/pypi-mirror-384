# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from v4_proto.cosmos.circuit.v1 import tx_pb2 as cosmos_dot_circuit_dot_v1_dot_tx__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in cosmos/circuit/v1/tx_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MsgStub(object):
    """Msg defines the circuit Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthorizeCircuitBreaker = channel.unary_unary(
                '/cosmos.circuit.v1.Msg/AuthorizeCircuitBreaker',
                request_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreaker.SerializeToString,
                response_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreakerResponse.FromString,
                _registered_method=True)
        self.TripCircuitBreaker = channel.unary_unary(
                '/cosmos.circuit.v1.Msg/TripCircuitBreaker',
                request_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreaker.SerializeToString,
                response_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreakerResponse.FromString,
                _registered_method=True)
        self.ResetCircuitBreaker = channel.unary_unary(
                '/cosmos.circuit.v1.Msg/ResetCircuitBreaker',
                request_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreaker.SerializeToString,
                response_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreakerResponse.FromString,
                _registered_method=True)


class MsgServicer(object):
    """Msg defines the circuit Msg service.
    """

    def AuthorizeCircuitBreaker(self, request, context):
        """AuthorizeCircuitBreaker allows a super-admin to grant (or revoke) another
        account's circuit breaker permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TripCircuitBreaker(self, request, context):
        """TripCircuitBreaker pauses processing of Msg's in the state machine.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetCircuitBreaker(self, request, context):
        """ResetCircuitBreaker resumes processing of Msg's in the state machine that
        have been been paused using TripCircuitBreaker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthorizeCircuitBreaker': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeCircuitBreaker,
                    request_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreaker.FromString,
                    response_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreakerResponse.SerializeToString,
            ),
            'TripCircuitBreaker': grpc.unary_unary_rpc_method_handler(
                    servicer.TripCircuitBreaker,
                    request_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreaker.FromString,
                    response_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreakerResponse.SerializeToString,
            ),
            'ResetCircuitBreaker': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetCircuitBreaker,
                    request_deserializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreaker.FromString,
                    response_serializer=cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreakerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosmos.circuit.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cosmos.circuit.v1.Msg', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the circuit Msg service.
    """

    @staticmethod
    def AuthorizeCircuitBreaker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cosmos.circuit.v1.Msg/AuthorizeCircuitBreaker',
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreaker.SerializeToString,
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgAuthorizeCircuitBreakerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TripCircuitBreaker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cosmos.circuit.v1.Msg/TripCircuitBreaker',
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreaker.SerializeToString,
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgTripCircuitBreakerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetCircuitBreaker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cosmos.circuit.v1.Msg/ResetCircuitBreaker',
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreaker.SerializeToString,
            cosmos_dot_circuit_dot_v1_dot_tx__pb2.MsgResetCircuitBreakerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
