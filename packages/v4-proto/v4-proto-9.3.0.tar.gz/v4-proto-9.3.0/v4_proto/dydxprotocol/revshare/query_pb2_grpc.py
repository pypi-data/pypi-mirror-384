# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from v4_proto.dydxprotocol.revshare import query_pb2 as dydxprotocol_dot_revshare_dot_query__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dydxprotocol/revshare/query_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MarketMapperRevenueShareParams = channel.unary_unary(
                '/dydxprotocol.revshare.Query/MarketMapperRevenueShareParams',
                request_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParams.SerializeToString,
                response_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParamsResponse.FromString,
                _registered_method=True)
        self.MarketMapperRevShareDetails = channel.unary_unary(
                '/dydxprotocol.revshare.Query/MarketMapperRevShareDetails',
                request_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetails.SerializeToString,
                response_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetailsResponse.FromString,
                _registered_method=True)
        self.UnconditionalRevShareConfig = channel.unary_unary(
                '/dydxprotocol.revshare.Query/UnconditionalRevShareConfig',
                request_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfig.SerializeToString,
                response_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfigResponse.FromString,
                _registered_method=True)
        self.OrderRouterRevShare = channel.unary_unary(
                '/dydxprotocol.revshare.Query/OrderRouterRevShare',
                request_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShare.SerializeToString,
                response_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShareResponse.FromString,
                _registered_method=True)


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def MarketMapperRevenueShareParams(self, request, context):
        """MarketMapperRevenueShareParams queries the revenue share params for the
        market mapper
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarketMapperRevShareDetails(self, request, context):
        """Queries market mapper revenue share details for a specific market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnconditionalRevShareConfig(self, request, context):
        """Queries unconditional revenue share config
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderRouterRevShare(self, request, context):
        """Queries order router rev share
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MarketMapperRevenueShareParams': grpc.unary_unary_rpc_method_handler(
                    servicer.MarketMapperRevenueShareParams,
                    request_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParams.FromString,
                    response_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParamsResponse.SerializeToString,
            ),
            'MarketMapperRevShareDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.MarketMapperRevShareDetails,
                    request_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetails.FromString,
                    response_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetailsResponse.SerializeToString,
            ),
            'UnconditionalRevShareConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UnconditionalRevShareConfig,
                    request_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfig.FromString,
                    response_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfigResponse.SerializeToString,
            ),
            'OrderRouterRevShare': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderRouterRevShare,
                    request_deserializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShare.FromString,
                    response_serializer=dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShareResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dydxprotocol.revshare.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dydxprotocol.revshare.Query', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def MarketMapperRevenueShareParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dydxprotocol.revshare.Query/MarketMapperRevenueShareParams',
            dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParams.SerializeToString,
            dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevenueShareParamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarketMapperRevShareDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dydxprotocol.revshare.Query/MarketMapperRevShareDetails',
            dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetails.SerializeToString,
            dydxprotocol_dot_revshare_dot_query__pb2.QueryMarketMapperRevShareDetailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnconditionalRevShareConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dydxprotocol.revshare.Query/UnconditionalRevShareConfig',
            dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfig.SerializeToString,
            dydxprotocol_dot_revshare_dot_query__pb2.QueryUnconditionalRevShareConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OrderRouterRevShare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dydxprotocol.revshare.Query/OrderRouterRevShare',
            dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShare.SerializeToString,
            dydxprotocol_dot_revshare_dot_query__pb2.QueryOrderRouterRevShareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
