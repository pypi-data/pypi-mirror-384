[build-system]
requires = [ "setuptools==80.9.0", "wheel",]
build-backend = "setuptools.build_meta"

[project]
name = "lintro"
version = "0.13.2"
description = "A unified CLI tool for code formatting, linting, and quality assurance"
keywords = [ "linting", "formatting", "code-quality", "cli", "python", "javascript", "yaml", "docker",]
classifiers = [ "Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.13", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities",]
requires-python = ">=3.13"
dependencies = [ "click==8.1.8", "coverage-badge==1.1.2", "darglint==1.8.1", "loguru==0.7.3", "tabulate==0.9.0", "yamllint==1.37.1", "httpx==0.28.1", "toml==0.10.2", "defusedxml==0.7.1",]
[[project.authors]]
name = "TurboCoder13"
email = "turbocoder13@gmail.com"

[dependency-groups]
dev = [ "build==1.3.0", "pytest==8.4.2", "pytest-cov==7.0.0", "pytest-xdist==3.8.0", "twine==6.2.0", "assertpy==1.1", "pytest-mock==3.15.1", "darglint==1.8.1", "bandit==1.8.6", "black==25.9.0", "ruff==0.14.0", "yamllint==1.37.1",]

[project.license]
file = "LICENSE"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.optional-dependencies]
dev = [ "pytest==8.4.2", "pytest-cov==7.0.0", "pytest-mock==3.15.1", "pytest-xdist==3.8.0", "tox==4.31.0", "allure-pytest==2.15.0", "ruff", "mypy", "coverage-badge==1.1.2", "python-semantic-release==10.4.1", "assertpy==1.1", "httpx==0.28.1",]
test = [ "pytest==8.4.2", "pytest-cov==7.0.0", "pytest-mock==3.15.1", "pytest-xdist==3.8.0", "assertpy==1.1",]
typing = [ "types-setuptools==80.9.0.20250822", "types-tabulate==0.9.0.20241207",]

[project.scripts]
lintro = "lintro.cli:main"

[project.urls]
Homepage = "https://github.com/TurboCoder13/py-lintro"
Documentation = "https://github.com/TurboCoder13/py-lintro/docs"
Source = "https://github.com/TurboCoder13/py-lintro"

[tool.setuptools]
packages = [ "lintro", "lintro.cli_utils", "lintro.cli_utils.commands", "lintro.enums", "lintro.exceptions", "lintro.formatters", "lintro.formatters.core", "lintro.formatters.styles", "lintro.formatters.tools", "lintro.models", "lintro.models.core", "lintro.parsers", "lintro.parsers.black", "lintro.parsers.darglint", "lintro.parsers.hadolint", "lintro.parsers.prettier", "lintro.parsers.ruff", "lintro.parsers.yamllint", "lintro.parsers.actionlint", "lintro.tools", "lintro.tools.core", "lintro.tools.implementations", "lintro.utils",]

[tool.semantic_release]
branch = "main"
version_variables = [ "pyproject.toml:project.version", "lintro/__init__.py:__version__",]
upload_to_release = false
build_command = ""
changelog_file = "CHANGELOG.md"
commit_parser = "angular"
tag_format = "v{version}"
major_on_zero = false

[tool.ruff]
line-length = 88
target-version = "py313"
unsafe-fixes = false
exclude = [ ".venv", "venv", "env", "build", "dist", "__pycache__", "test_samples",]

[tool.bandit]
exclude_dirs = [ "tests", "test_samples",]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [ "E", "F", "W", "I", "COM", "N", "D", "UP", "ANN", "B", "C4", "SIM",]
ignore = [ "ANN",]

[tool.lintro.post_checks]
enabled = true
tools = [ "black",]
enforce_failure = true

[tool.lintro.ruff]

[tool.pytest.ini_options]
testpaths = [ "tests",]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff.lint.pydocstyle]
convention = "google"
