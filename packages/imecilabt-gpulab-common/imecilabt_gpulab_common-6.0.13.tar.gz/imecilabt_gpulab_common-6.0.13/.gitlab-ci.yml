---
variables:
  UV_VERSION: "0.9.2"
  PYTHON_VERSION: "3.13"
  BASE_LAYER: trixie
  # GitLab CI creates a separate mountpoint for the build directory,
  # so we need to copy instead of using hard links.
  UV_LINK_MODE: copy
  UV_CACHE_DIR: .uv-cache

image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER

# https://docs.astral.sh/uv/guides/integration/gitlab/#cachinghttps://pip.pypa.io/en/stable/topics/caching/
cache:
  - key:
      files:
        - uv.lock
    paths:
      - $UV_CACHE_DIR

before_script:
  - uv sync --all-extras --dev

after_script:
  - uv cache prune --ci

pre-commit:
  stage: test
  script:
    - uv run pre-commit run --all-files
  rules:
    - if: "$TESTING_DISABLED"
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"

ruff:
  stage: test
  script:
    - >
      uv run ruff check src/
      $(if [ -e tests/ ]; then echo tests/; fi)
      --output-format=gitlab > ruff-code-quality-report.json
  artifacts:
    when: always
    paths:
      - ruff-code-quality-report.json
    reports:
      codequality: ruff-code-quality-report.json
    expire_in: 1 week
  rules:
    - if: "$CODE_QUALITY_DISABLED"
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"

pyright:
  stage: test
  before_script:
    - uv sync --all-extras --dev
    - uv pip install pyright pyright-to-gitlab-ci
  script:
    - uv run pyright src/ --outputjson > report_raw.json
  after_script:
    - uv run pyright-to-gitlab-ci --src report_raw.json --output pyright-code-quality-report.json --base_path .
  artifacts:
    when: always
    paths:
      - pyright-code-quality-report.json
    reports:
      codequality: pyright-code-quality-report.json
  rules:
    - if: "$CODE_QUALITY_DISABLED"
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"

pytest:
  stage: test
  script:
    - uv run pytest --junit-xml=pytest_report.xml
  artifacts:
    when: always
    reports:
      junit: pytest_report.xml
  rules:
    - if: "$TESTING_DISABLED"
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"

build-job:
  stage: build
  script:
    - uv build
  artifacts:
    paths:
      - dist
    expire_in: 1 week

deploy-job:
  stage: deploy
  dependencies:
    - build-job
  needs:
    - job: build-job
      artifacts: true
  variables:
    UV_PUBLISH_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    UV_PUBLISH_USERNAME: "gitlab-ci-token"
    UV_PUBLISH_PASSWORD: "${CI_JOB_TOKEN}"
  script:
    - uv build
    - uv publish
  rules:
    - if: "$CI_COMMIT_TAG"
