[project]
name = "imecilabt-gpulab-common"
description = "GPULab Common"
license = { file = "LICENSE" }
authors = [
    { name = "Thijs Walcarius", email = "thijs.walcarius@ugent.be" },
    { name = "Wim Van de Meersche", email = "wim.vandemeersche@ugent.be" },
    { name = "Brecht Vermeulen", email = "brecht.vermeulen@ugent.be" },
]
readme = "README.md"
requires-python = ">=3.10"

dynamic = ["version"]


classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Operating System :: OS Independent",
]


dependencies = [
    "snakecase",
    "python-dateutil",
    "pyyaml",
    "pydantic[email]>=2.11.7,<3",
    "pydantic-yaml>=1.5.1,<2",
    "pydantic-settings>=2.10.1,<3",
    "imecilabt-utils >=1.5.0, <2",
    "pytz",
]

[project.urls]
HomePage = "https://gpulab.ilabt.imec.be"
Repository = "https://gitlab.ilabt.imec.be/ilabt/gpulab/gpulab-common"

[dependency-groups]
dev = [
    "codespell==2.4.1",
    "covdefaults==2.3.0",
    "coverage[toml]==7.10.7",
    "jsondiff",
    "mypy==1.18.2",
    "pre-commit==4.3.0",
    "pre-commit-hooks==6.0.0",
    "pytest",
    "pytest-cov==7.0.0",
    "ruff==0.14.0",
    "types-pytz",
    "yamllint==1.37.1",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/imecilabt"]


[tool.pyright]
pythonVersion = "3.10"

[tool.ruff]
line-length = 120

[tool.ruff.lint]

select = [
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # bugbear
    "C",      # complexity
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "D",      # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",      # pycodestyle
    "F",      # pyflakes/autoflake
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420
    "INT",    # flake8-gettext
    "ISC",    # flake8-implicit-str-concat
    "LOG",    # flake8-logging
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops,
    "T20",    # flake8-print
    "UP",     # pyupgrade
    "W",      # pycodestyle
]

ignore = [
    "D107",   # undocumented-public-init
    "D202",   # No blank lines allowed after function docstring
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "S101",   # allow asserts
    "TRY003", # raise-vanilla-args

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",

    "PYI019", # Don't use Self as long as we target python 3.10
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["imecilabt.gpulab"]
omit = []

[tool.coverage.report]
show_missing = true
fail_under = 60

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.12"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
