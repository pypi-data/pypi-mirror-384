[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "optimum-onnx"
dynamic = ["version"]
description = "Optimum ONNX is an interface between the Hugging Face libraries and ONNX / ONNX Runtime"
readme = "README.md"
requires-python = ">=3.9.0"
license = { text = "Apache-2.0" }
authors = [
    { name = "HuggingFace Inc. Special Ops Team", email = "hardware@huggingface.co" },
]
keywords = ["transformers", "quantization", "inference", "onnx", "onnxruntime"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = ["optimum~=2.0.0", "transformers>=4.36.0,<4.56.0", "onnx"]

[project.urls]
Homepage = "https://github.com/huggingface/optimum-onnx"

[project.optional-dependencies]
onnxruntime = ["onnxruntime>=1.18.0"]
onnxruntime-gpu = ["onnxruntime-gpu>=1.18.0"]
tests = [
    "accelerate>=0.26.0",
    "datasets",
    "einops",
    "hf_xet",
    "parameterized",
    "Pillow",
    "pytest-xdist",
    "pytest",
    "safetensors",
    "scipy",
    "sentencepiece",
    "timm",
    "onnxslim>=0.1.60",
    # not sure they are necessary
    "rjieba",
    "sacremoses",
]
quality = ["ruff==0.12.3"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["optimum*"]

[tool.setuptools.dynamic]
version = { attr = "optimum.onnx.version.__version__" }

[tool.ruff]
line-length = 119
target-version = "py39"

[tool.ruff.lint]
ignore = [
    "B9",      # Opinionated bugbear rules
    "C901",
    "D1",
    "D205",
    "D401",
    "D403",
    "E501",    # Never enforce line length violations
    "E741",
    "G004",    # FIXME: Re-enable when autofix is available
    "NPY002",  # We may not always need a generator
    "PERF203", # try-except in loops sometimes necessary
    "PERF401", # List comprehension is not always readable
    "SIM102",  # Collapible if statements are not always more readable
    "SIM108",  # We don't always encourage ternary operators
    "SIM114",  # Don't always combine if branches for debugability
    "SIM116",  # Don't use dict lookup to replace if-else
    "TRY003",  # Messages can be constructed in the exception
]
select = [
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle
    "F",    # Pyflakes
    "G",    # flake8-logging-format
    "I",    # isort
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "NPY",  # modern numpy
    "PERF", # Perflint
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slot
    "T10",  # flake8-debugger
    "TID",  # Disallow relative imports
    "TRY",  # flake8-try-except-raise
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["optimum"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
markers = [
    "gpu_test",
    "cuda_ep_test",
    "trt_ep_test",
    "rocm_ep_test",
    "run_in_series",
    "run_slow",
    "quantization",
]
