# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from eval_studio_client.api.models.v1_leaderboard_report_actual_output_meta import V1LeaderboardReportActualOutputMeta
from eval_studio_client.api.models.v1_leaderboard_report_result_relationship import V1LeaderboardReportResultRelationship
from eval_studio_client.api.models.v1_metric_score import V1MetricScore
from typing import Optional, Set
from typing_extensions import Self

class V1LeaderboardReportResult(BaseModel):
    """
    V1LeaderboardReportResult
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="Output only. Composite unique key of the result formed by the model key and test case key.")
    input: Optional[StrictStr] = Field(default=None, description="Output only. Input prompt or text to be processed.")
    corpus: Optional[List[StrictStr]] = Field(default=None, description="Output only. Collection of corpus documents to be used during evaluation.")
    context: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of contextual information or references.")
    categories: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of categories or labels for classification.")
    relationships: Optional[List[V1LeaderboardReportResultRelationship]] = Field(default=None, description="Output only. List of relationships or associations between entities.")
    expected_output: Optional[StrictStr] = Field(default=None, description="Output only. Expected output or target result.", alias="expectedOutput")
    output_constraints: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of constraints that should be applied to the output.", alias="outputConstraints")
    output_condition: Optional[StrictStr] = Field(default=None, description="Output only. Condition that output should satisfy.", alias="outputCondition")
    actual_output: Optional[StrictStr] = Field(default=None, description="Output only. Actual output produced by the model.", alias="actualOutput")
    actual_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Duration of processing in seconds.", alias="actualDuration")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Cost of processing in currency units.")
    model_key: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier for the model used.", alias="modelKey")
    test_case_key: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier for the test case.", alias="testCaseKey")
    metrics: Optional[List[V1MetricScore]] = Field(default=None, description="Optional. All metrics values for the result.")
    result_error_message: Optional[StrictStr] = Field(default=None, description="Output only. Error message if processing resulted in failure.", alias="resultErrorMessage")
    actual_output_meta: Optional[List[V1LeaderboardReportActualOutputMeta]] = Field(default=None, description="Output only. Additional metadata about the actual output.", alias="actualOutputMeta")
    __properties: ClassVar[List[str]] = ["key", "input", "corpus", "context", "categories", "relationships", "expectedOutput", "outputConstraints", "outputCondition", "actualOutput", "actualDuration", "cost", "modelKey", "testCaseKey", "metrics", "resultErrorMessage", "actualOutputMeta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "key",
            "input",
            "corpus",
            "context",
            "categories",
            "relationships",
            "expected_output",
            "output_constraints",
            "output_condition",
            "actual_output",
            "actual_duration",
            "cost",
            "model_key",
            "test_case_key",
            "result_error_message",
            "actual_output_meta",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item in self.relationships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in actual_output_meta (list)
        _items = []
        if self.actual_output_meta:
            for _item in self.actual_output_meta:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actualOutputMeta'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "input": obj.get("input"),
            "corpus": obj.get("corpus"),
            "context": obj.get("context"),
            "categories": obj.get("categories"),
            "relationships": [V1LeaderboardReportResultRelationship.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "expectedOutput": obj.get("expectedOutput"),
            "outputConstraints": obj.get("outputConstraints"),
            "outputCondition": obj.get("outputCondition"),
            "actualOutput": obj.get("actualOutput"),
            "actualDuration": obj.get("actualDuration"),
            "cost": obj.get("cost"),
            "modelKey": obj.get("modelKey"),
            "testCaseKey": obj.get("testCaseKey"),
            "metrics": [V1MetricScore.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "resultErrorMessage": obj.get("resultErrorMessage"),
            "actualOutputMeta": [V1LeaderboardReportActualOutputMeta.from_dict(_item) for _item in obj["actualOutputMeta"]] if obj.get("actualOutputMeta") is not None else None
        })
        return _obj


