# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_leaderboard_report_evaluator_parameter import V1LeaderboardReportEvaluatorParameter
from eval_studio_client.api.models.v1_leaderboard_report_explanation import V1LeaderboardReportExplanation
from eval_studio_client.api.models.v1_leaderboard_report_metrics_meta_entry import V1LeaderboardReportMetricsMetaEntry
from typing import Optional, Set
from typing_extensions import Self

class V1LeaderboardReportEvaluator(BaseModel):
    """
    Evaluator represents the evaluator which evaluated the model outputs to create the results.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Output only. Evaluator ID.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Evaluator short name based on its class name.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Evaluator display name.", alias="displayName")
    tagline: Optional[StrictStr] = Field(default=None, description="Optional. Evaluator one row description.")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Evaluator description.")
    brief_description: Optional[StrictStr] = Field(default=None, description="Optional. Brief description.", alias="briefDescription")
    model_types: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of model types like rag.", alias="modelTypes")
    can_explain: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of experiment types the Explainer can explain like regression or multinomial.", alias="canExplain")
    explanation_scopes: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of explanation scopes like global or local.", alias="explanationScopes")
    explanations: Optional[List[V1LeaderboardReportExplanation]] = Field(default=None, description="Output only. List of explanation types created by the Evaluator.")
    parameters: Optional[List[V1LeaderboardReportEvaluatorParameter]] = Field(default=None, description="Output only. List of parameter type definitions.")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of keywords.")
    metrics_meta: Optional[List[V1LeaderboardReportMetricsMetaEntry]] = Field(default=None, description="Output only. List of metrics metadata for metrics created by the Evaluator.", alias="metricsMeta")
    __properties: ClassVar[List[str]] = ["id", "name", "displayName", "tagline", "description", "briefDescription", "modelTypes", "canExplain", "explanationScopes", "explanations", "parameters", "keywords", "metricsMeta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportEvaluator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "display_name",
            "description",
            "model_types",
            "explanation_scopes",
            "explanations",
            "parameters",
            "keywords",
            "metrics_meta",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in explanations (list)
        _items = []
        if self.explanations:
            for _item in self.explanations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['explanations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics_meta (list)
        _items = []
        if self.metrics_meta:
            for _item in self.metrics_meta:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metricsMeta'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportEvaluator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "tagline": obj.get("tagline"),
            "description": obj.get("description"),
            "briefDescription": obj.get("briefDescription"),
            "modelTypes": obj.get("modelTypes"),
            "canExplain": obj.get("canExplain"),
            "explanationScopes": obj.get("explanationScopes"),
            "explanations": [V1LeaderboardReportExplanation.from_dict(_item) for _item in obj["explanations"]] if obj.get("explanations") is not None else None,
            "parameters": [V1LeaderboardReportEvaluatorParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "keywords": obj.get("keywords"),
            "metricsMeta": [V1LeaderboardReportMetricsMetaEntry.from_dict(_item) for _item in obj["metricsMeta"]] if obj.get("metricsMeta") is not None else None
        })
        return _obj


