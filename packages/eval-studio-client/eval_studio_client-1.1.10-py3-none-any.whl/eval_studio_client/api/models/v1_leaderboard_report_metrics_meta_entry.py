# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1LeaderboardReportMetricsMetaEntry(BaseModel):
    """
    MetricsMetaEntry represents the metadata about the metric.
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="Output only. Metric key.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Metric display name.", alias="displayName")
    data_type: Optional[StrictStr] = Field(default=None, description="Output only. Metric data type like float or string.", alias="dataType")
    display_value: Optional[StrictStr] = Field(default=None, description="Output only. Metric display value.", alias="displayValue")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Metric description.")
    value_range: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Optional. Metric value range for numeric scores.", alias="valueRange")
    value_enum: Optional[List[StrictStr]] = Field(default=None, description="Optional. Metric value enum for non-numeric scores.", alias="valueEnum")
    higher_is_better: Optional[StrictBool] = Field(default=None, description="Output only. Metric higher is better.", alias="higherIsBetter")
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Metric threshold.")
    is_primary_metric: Optional[StrictBool] = Field(default=None, description="Output only. Metric is primary.", alias="isPrimaryMetric")
    parent_metric: Optional[StrictStr] = Field(default=None, description="Output only. This metric parent.", alias="parentMetric")
    exclude: Optional[StrictBool] = Field(default=None, description="Output only. Whether to exclude the metric.")
    __properties: ClassVar[List[str]] = ["key", "displayName", "dataType", "displayValue", "description", "valueRange", "valueEnum", "higherIsBetter", "threshold", "isPrimaryMetric", "parentMetric", "exclude"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportMetricsMetaEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "key",
            "display_name",
            "data_type",
            "display_value",
            "description",
            "higher_is_better",
            "threshold",
            "is_primary_metric",
            "parent_metric",
            "exclude",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1LeaderboardReportMetricsMetaEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "displayName": obj.get("displayName"),
            "dataType": obj.get("dataType"),
            "displayValue": obj.get("displayValue"),
            "description": obj.get("description"),
            "valueRange": obj.get("valueRange"),
            "valueEnum": obj.get("valueEnum"),
            "higherIsBetter": obj.get("higherIsBetter"),
            "threshold": obj.get("threshold"),
            "isPrimaryMetric": obj.get("isPrimaryMetric"),
            "parentMetric": obj.get("parentMetric"),
            "exclude": obj.get("exclude")
        })
        return _obj


