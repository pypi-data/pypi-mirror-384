# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from eval_studio_client.api.models.v1_import_test_cases_request import V1ImportTestCasesRequest
from eval_studio_client.api.models.v1_list_prompt_library_items_response import V1ListPromptLibraryItemsResponse
from eval_studio_client.api.models.v1_operation import V1Operation

from eval_studio_client.api.api_client import ApiClient, RequestSerialized
from eval_studio_client.api.api_response import ApiResponse
from eval_studio_client.api.rest import RESTResponseType


class PromptLibraryServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def prompt_library_service_import_test_cases(
        self,
        body: V1ImportTestCasesRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Operation:
        """prompt_library_service_import_test_cases


        :param body: (required)
        :type body: V1ImportTestCasesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_import_test_cases_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prompt_library_service_import_test_cases_with_http_info(
        self,
        body: V1ImportTestCasesRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Operation]:
        """prompt_library_service_import_test_cases


        :param body: (required)
        :type body: V1ImportTestCasesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_import_test_cases_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prompt_library_service_import_test_cases_without_preload_content(
        self,
        body: V1ImportTestCasesRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prompt_library_service_import_test_cases


        :param body: (required)
        :type body: V1ImportTestCasesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_import_test_cases_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prompt_library_service_import_test_cases_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/promptLibraryItems:importTestCases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def prompt_library_service_list_prompt_library_items(
        self,
        filter_by_categories: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by categories.")] = None,
        filter_by_purposes: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by purposes.")] = None,
        filter_by_evaluates: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by evaluates.")] = None,
        filter_by_origin: Annotated[Optional[StrictStr], Field(description="Optional. Filter by origin.")] = None,
        filter_by_test_case_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test case count.")] = None,
        filter_by_test_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test count.")] = None,
        filter_by_fts: Annotated[Optional[StrictStr], Field(description="Optional. Filter by FTS.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1ListPromptLibraryItemsResponse:
        """prompt_library_service_list_prompt_library_items


        :param filter_by_categories: Optional. Filter by categories.
        :type filter_by_categories: List[str]
        :param filter_by_purposes: Optional. Filter by purposes.
        :type filter_by_purposes: List[str]
        :param filter_by_evaluates: Optional. Filter by evaluates.
        :type filter_by_evaluates: List[str]
        :param filter_by_origin: Optional. Filter by origin.
        :type filter_by_origin: str
        :param filter_by_test_case_count: Optional. Filter by test case count.
        :type filter_by_test_case_count: int
        :param filter_by_test_count: Optional. Filter by test count.
        :type filter_by_test_count: int
        :param filter_by_fts: Optional. Filter by FTS.
        :type filter_by_fts: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_list_prompt_library_items_serialize(
            filter_by_categories=filter_by_categories,
            filter_by_purposes=filter_by_purposes,
            filter_by_evaluates=filter_by_evaluates,
            filter_by_origin=filter_by_origin,
            filter_by_test_case_count=filter_by_test_case_count,
            filter_by_test_count=filter_by_test_count,
            filter_by_fts=filter_by_fts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListPromptLibraryItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prompt_library_service_list_prompt_library_items_with_http_info(
        self,
        filter_by_categories: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by categories.")] = None,
        filter_by_purposes: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by purposes.")] = None,
        filter_by_evaluates: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by evaluates.")] = None,
        filter_by_origin: Annotated[Optional[StrictStr], Field(description="Optional. Filter by origin.")] = None,
        filter_by_test_case_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test case count.")] = None,
        filter_by_test_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test count.")] = None,
        filter_by_fts: Annotated[Optional[StrictStr], Field(description="Optional. Filter by FTS.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1ListPromptLibraryItemsResponse]:
        """prompt_library_service_list_prompt_library_items


        :param filter_by_categories: Optional. Filter by categories.
        :type filter_by_categories: List[str]
        :param filter_by_purposes: Optional. Filter by purposes.
        :type filter_by_purposes: List[str]
        :param filter_by_evaluates: Optional. Filter by evaluates.
        :type filter_by_evaluates: List[str]
        :param filter_by_origin: Optional. Filter by origin.
        :type filter_by_origin: str
        :param filter_by_test_case_count: Optional. Filter by test case count.
        :type filter_by_test_case_count: int
        :param filter_by_test_count: Optional. Filter by test count.
        :type filter_by_test_count: int
        :param filter_by_fts: Optional. Filter by FTS.
        :type filter_by_fts: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_list_prompt_library_items_serialize(
            filter_by_categories=filter_by_categories,
            filter_by_purposes=filter_by_purposes,
            filter_by_evaluates=filter_by_evaluates,
            filter_by_origin=filter_by_origin,
            filter_by_test_case_count=filter_by_test_case_count,
            filter_by_test_count=filter_by_test_count,
            filter_by_fts=filter_by_fts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListPromptLibraryItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prompt_library_service_list_prompt_library_items_without_preload_content(
        self,
        filter_by_categories: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by categories.")] = None,
        filter_by_purposes: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by purposes.")] = None,
        filter_by_evaluates: Annotated[Optional[List[StrictStr]], Field(description="Optional. Filter by evaluates.")] = None,
        filter_by_origin: Annotated[Optional[StrictStr], Field(description="Optional. Filter by origin.")] = None,
        filter_by_test_case_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test case count.")] = None,
        filter_by_test_count: Annotated[Optional[StrictInt], Field(description="Optional. Filter by test count.")] = None,
        filter_by_fts: Annotated[Optional[StrictStr], Field(description="Optional. Filter by FTS.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """prompt_library_service_list_prompt_library_items


        :param filter_by_categories: Optional. Filter by categories.
        :type filter_by_categories: List[str]
        :param filter_by_purposes: Optional. Filter by purposes.
        :type filter_by_purposes: List[str]
        :param filter_by_evaluates: Optional. Filter by evaluates.
        :type filter_by_evaluates: List[str]
        :param filter_by_origin: Optional. Filter by origin.
        :type filter_by_origin: str
        :param filter_by_test_case_count: Optional. Filter by test case count.
        :type filter_by_test_case_count: int
        :param filter_by_test_count: Optional. Filter by test count.
        :type filter_by_test_count: int
        :param filter_by_fts: Optional. Filter by FTS.
        :type filter_by_fts: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prompt_library_service_list_prompt_library_items_serialize(
            filter_by_categories=filter_by_categories,
            filter_by_purposes=filter_by_purposes,
            filter_by_evaluates=filter_by_evaluates,
            filter_by_origin=filter_by_origin,
            filter_by_test_case_count=filter_by_test_case_count,
            filter_by_test_count=filter_by_test_count,
            filter_by_fts=filter_by_fts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListPromptLibraryItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prompt_library_service_list_prompt_library_items_serialize(
        self,
        filter_by_categories,
        filter_by_purposes,
        filter_by_evaluates,
        filter_by_origin,
        filter_by_test_case_count,
        filter_by_test_count,
        filter_by_fts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filterByCategories': 'multi',
            'filterByPurposes': 'multi',
            'filterByEvaluates': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_by_categories is not None:
            
            _query_params.append(('filterByCategories', filter_by_categories))
            
        if filter_by_purposes is not None:
            
            _query_params.append(('filterByPurposes', filter_by_purposes))
            
        if filter_by_evaluates is not None:
            
            _query_params.append(('filterByEvaluates', filter_by_evaluates))
            
        if filter_by_origin is not None:
            
            _query_params.append(('filterByOrigin', filter_by_origin))
            
        if filter_by_test_case_count is not None:
            
            _query_params.append(('filterByTestCaseCount', filter_by_test_case_count))
            
        if filter_by_test_count is not None:
            
            _query_params.append(('filterByTestCount', filter_by_test_count))
            
        if filter_by_fts is not None:
            
            _query_params.append(('filterByFts', filter_by_fts))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/promptLibraryItems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


