# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from eval_studio_client.api.models.v1_create_evaluation_request import V1CreateEvaluationRequest
from eval_studio_client.api.models.v1_import_evaluation_request import V1ImportEvaluationRequest
from eval_studio_client.api.models.v1_list_llm_models_response import V1ListLLMModelsResponse
from eval_studio_client.api.models.v1_list_rag_collections_response import V1ListRAGCollectionsResponse
from eval_studio_client.api.models.v1_operation import V1Operation

from eval_studio_client.api.api_client import ApiClient, RequestSerialized
from eval_studio_client.api.api_response import ApiResponse
from eval_studio_client.api.rest import RESTResponseType


class EvaluationServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def evaluation_service_create_evaluation(
        self,
        body: V1CreateEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Operation:
        """evaluation_service_create_evaluation


        :param body: (required)
        :type body: V1CreateEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_create_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def evaluation_service_create_evaluation_with_http_info(
        self,
        body: V1CreateEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Operation]:
        """evaluation_service_create_evaluation


        :param body: (required)
        :type body: V1CreateEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_create_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def evaluation_service_create_evaluation_without_preload_content(
        self,
        body: V1CreateEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """evaluation_service_create_evaluation


        :param body: (required)
        :type body: V1CreateEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_create_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _evaluation_service_create_evaluation_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/evaluations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def evaluation_service_import_evaluation(
        self,
        body: V1ImportEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1Operation:
        """evaluation_service_import_evaluation


        :param body: (required)
        :type body: V1ImportEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_import_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def evaluation_service_import_evaluation_with_http_info(
        self,
        body: V1ImportEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1Operation]:
        """evaluation_service_import_evaluation


        :param body: (required)
        :type body: V1ImportEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_import_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def evaluation_service_import_evaluation_without_preload_content(
        self,
        body: V1ImportEvaluationRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """evaluation_service_import_evaluation


        :param body: (required)
        :type body: V1ImportEvaluationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_import_evaluation_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _evaluation_service_import_evaluation_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/evaluations:import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def evaluation_service_list_llm_models(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        retries: Annotated[Optional[StrictInt], Field(description="Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1ListLLMModelsResponse:
        """evaluation_service_list_llm_models


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param retries: Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.
        :type retries: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_llm_models_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            retries=retries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListLLMModelsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def evaluation_service_list_llm_models_with_http_info(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        retries: Annotated[Optional[StrictInt], Field(description="Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1ListLLMModelsResponse]:
        """evaluation_service_list_llm_models


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param retries: Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.
        :type retries: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_llm_models_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            retries=retries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListLLMModelsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def evaluation_service_list_llm_models_without_preload_content(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        retries: Annotated[Optional[StrictInt], Field(description="Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """evaluation_service_list_llm_models


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param retries: Optional. The number of retries to attempt when querying the model for available LLM models. Defaults to 5.
        :type retries: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_llm_models_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            retries=retries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListLLMModelsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _evaluation_service_list_llm_models_serialize(
        self,
        model_name,
        model_create_time,
        model_creator,
        model_update_time,
        model_updater,
        model_delete_time,
        model_deleter,
        model_display_name,
        model_description,
        model_url,
        model_api_key,
        model_type,
        model_parameters,
        model_demo,
        retries,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if model_name is not None:
            
            _query_params.append(('model.name', model_name))
            
        if model_create_time is not None:
            if isinstance(model_create_time, datetime):
                _query_params.append(
                    (
                        'model.createTime',
                        model_create_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.createTime', model_create_time))
            
        if model_creator is not None:
            
            _query_params.append(('model.creator', model_creator))
            
        if model_update_time is not None:
            if isinstance(model_update_time, datetime):
                _query_params.append(
                    (
                        'model.updateTime',
                        model_update_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.updateTime', model_update_time))
            
        if model_updater is not None:
            
            _query_params.append(('model.updater', model_updater))
            
        if model_delete_time is not None:
            if isinstance(model_delete_time, datetime):
                _query_params.append(
                    (
                        'model.deleteTime',
                        model_delete_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.deleteTime', model_delete_time))
            
        if model_deleter is not None:
            
            _query_params.append(('model.deleter', model_deleter))
            
        if model_display_name is not None:
            
            _query_params.append(('model.displayName', model_display_name))
            
        if model_description is not None:
            
            _query_params.append(('model.description', model_description))
            
        if model_url is not None:
            
            _query_params.append(('model.url', model_url))
            
        if model_api_key is not None:
            
            _query_params.append(('model.apiKey', model_api_key))
            
        if model_type is not None:
            
            _query_params.append(('model.type', model_type))
            
        if model_parameters is not None:
            
            _query_params.append(('model.parameters', model_parameters))
            
        if model_demo is not None:
            
            _query_params.append(('model.demo', model_demo))
            
        if retries is not None:
            
            _query_params.append(('retries', retries))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/evaluations:llm_models',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def evaluation_service_list_rag_collections(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V1ListRAGCollectionsResponse:
        """evaluation_service_list_rag_collections


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_rag_collections_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListRAGCollectionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def evaluation_service_list_rag_collections_with_http_info(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V1ListRAGCollectionsResponse]:
        """evaluation_service_list_rag_collections


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_rag_collections_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListRAGCollectionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def evaluation_service_list_rag_collections_without_preload_content(
        self,
        model_name: Annotated[Optional[StrictStr], Field(description="Output only. Name of the Model resource. e.g.: \"models/<UUID>\"")] = None,
        model_create_time: Annotated[Optional[datetime], Field(description="Output only. Timestamp when the Model was created.")] = None,
        model_creator: Annotated[Optional[StrictStr], Field(description="Output only. Name of the user or service that requested creation of the Model.")] = None,
        model_update_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Timestamp when the Model was last updated.")] = None,
        model_updater: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested update of the Model.")] = None,
        model_delete_time: Annotated[Optional[datetime], Field(description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.")] = None,
        model_deleter: Annotated[Optional[StrictStr], Field(description="Output only. Optional. Name of the user or service that requested deletion of the Model.")] = None,
        model_display_name: Annotated[Optional[StrictStr], Field(description="Human readable name of the Model.")] = None,
        model_description: Annotated[Optional[StrictStr], Field(description="Optional. Arbitrary description of the Model.")] = None,
        model_url: Annotated[Optional[StrictStr], Field(description="Optional. Immutable. Absolute URL to the Model.")] = None,
        model_api_key: Annotated[Optional[StrictStr], Field(description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.")] = None,
        model_type: Annotated[Optional[StrictStr], Field(description="Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.")] = None,
        model_parameters: Annotated[Optional[StrictStr], Field(description="Optional. Model specific parameters in JSON format.")] = None,
        model_demo: Annotated[Optional[StrictBool], Field(description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """evaluation_service_list_rag_collections


        :param model_name: Output only. Name of the Model resource. e.g.: \"models/<UUID>\"
        :type model_name: str
        :param model_create_time: Output only. Timestamp when the Model was created.
        :type model_create_time: datetime
        :param model_creator: Output only. Name of the user or service that requested creation of the Model.
        :type model_creator: str
        :param model_update_time: Output only. Optional. Timestamp when the Model was last updated.
        :type model_update_time: datetime
        :param model_updater: Output only. Optional. Name of the user or service that requested update of the Model.
        :type model_updater: str
        :param model_delete_time: Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.
        :type model_delete_time: datetime
        :param model_deleter: Output only. Optional. Name of the user or service that requested deletion of the Model.
        :type model_deleter: str
        :param model_display_name: Human readable name of the Model.
        :type model_display_name: str
        :param model_description: Optional. Arbitrary description of the Model.
        :type model_description: str
        :param model_url: Optional. Immutable. Absolute URL to the Model.
        :type model_url: str
        :param model_api_key: Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.
        :type model_api_key: str
        :param model_type: Immutable. Type of this Model.   - MODEL_TYPE_UNSPECIFIED: Unspecified type.  - MODEL_TYPE_H2OGPTE_RAG: h2oGPTe RAG.  - MODEL_TYPE_OPENAI_RAG: OpenAI Assistant RAG.  - MODEL_TYPE_H2OGPTE_LLM: h2oGPTe LLM.  - MODEL_TYPE_H2OGPT_LLM: h2oGPT LLM.  - MODEL_TYPE_OPENAI_CHAT: OpenAI chat.  - MODEL_TYPE_AZURE_OPENAI_CHAT: Microsoft Azure hosted OpenAI Chat.  - MODEL_TYPE_OPENAI_API_CHAT: OpenAI API chat.  - MODEL_TYPE_H2OLLMOPS: H2O LLMOps.  - MODEL_TYPE_OLLAMA: Ollama.  - MODEL_TYPE_AMAZON_BEDROCK: Amazon Bedrock.
        :type model_type: str
        :param model_parameters: Optional. Model specific parameters in JSON format.
        :type model_parameters: str
        :param model_demo: Output only. Whether the Model is a demo resource or not. Demo resources are read only.
        :type model_demo: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._evaluation_service_list_rag_collections_serialize(
            model_name=model_name,
            model_create_time=model_create_time,
            model_creator=model_creator,
            model_update_time=model_update_time,
            model_updater=model_updater,
            model_delete_time=model_delete_time,
            model_deleter=model_deleter,
            model_display_name=model_display_name,
            model_description=model_description,
            model_url=model_url,
            model_api_key=model_api_key,
            model_type=model_type,
            model_parameters=model_parameters,
            model_demo=model_demo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V1ListRAGCollectionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _evaluation_service_list_rag_collections_serialize(
        self,
        model_name,
        model_create_time,
        model_creator,
        model_update_time,
        model_updater,
        model_delete_time,
        model_deleter,
        model_display_name,
        model_description,
        model_url,
        model_api_key,
        model_type,
        model_parameters,
        model_demo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if model_name is not None:
            
            _query_params.append(('model.name', model_name))
            
        if model_create_time is not None:
            if isinstance(model_create_time, datetime):
                _query_params.append(
                    (
                        'model.createTime',
                        model_create_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.createTime', model_create_time))
            
        if model_creator is not None:
            
            _query_params.append(('model.creator', model_creator))
            
        if model_update_time is not None:
            if isinstance(model_update_time, datetime):
                _query_params.append(
                    (
                        'model.updateTime',
                        model_update_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.updateTime', model_update_time))
            
        if model_updater is not None:
            
            _query_params.append(('model.updater', model_updater))
            
        if model_delete_time is not None:
            if isinstance(model_delete_time, datetime):
                _query_params.append(
                    (
                        'model.deleteTime',
                        model_delete_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('model.deleteTime', model_delete_time))
            
        if model_deleter is not None:
            
            _query_params.append(('model.deleter', model_deleter))
            
        if model_display_name is not None:
            
            _query_params.append(('model.displayName', model_display_name))
            
        if model_description is not None:
            
            _query_params.append(('model.description', model_description))
            
        if model_url is not None:
            
            _query_params.append(('model.url', model_url))
            
        if model_api_key is not None:
            
            _query_params.append(('model.apiKey', model_api_key))
            
        if model_type is not None:
            
            _query_params.append(('model.type', model_type))
            
        if model_parameters is not None:
            
            _query_params.append(('model.parameters', model_parameters))
            
        if model_demo is not None:
            
            _query_params.append(('model.demo', model_demo))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/evaluations:rag_collections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


