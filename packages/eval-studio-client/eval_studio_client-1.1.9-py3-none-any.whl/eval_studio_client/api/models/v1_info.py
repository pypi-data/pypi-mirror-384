# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1Info(BaseModel):
    """
    V1Info
    """ # noqa: E501
    base_url: Optional[StrictStr] = Field(default=None, description="The base absolute URL of the Eval Studio instance.", alias="baseUrl")
    version: Optional[StrictStr] = Field(default=None, description="The version of the Eval Studio instance.")
    oauth2_login_url: Optional[StrictStr] = Field(default=None, description="The URL for initiating the OAuth2 flow.", alias="oauth2LoginUrl")
    oauth2_logout_url: Optional[StrictStr] = Field(default=None, description="The URL for logging out.", alias="oauth2LogoutUrl")
    h2o_gpte_allowlist: Optional[List[StrictStr]] = Field(default=None, description="Allowlist of H2OGPTe models for UI that can be used in Eval Studio. E.g. gpt-35-turbo-1106, h2oai/h2ogpt-4096-llama2-13b-chat, h2oai/h2ogpt-4096-llama2-70b-chat-4bit, HuggingFaceH4/zephyr-7b-beta, h2oai/h2ogpt-gm-7b-mistral-chat-sft-dpo-v1, h2oai/h2ogpt-gm-experimental.", alias="h2oGpteAllowlist")
    h2o_gpte_client_version: Optional[StrictStr] = Field(default=None, description="The version of h2oGPTe client used by the workers.", alias="h2oGpteClientVersion")
    h2o_sonar_version: Optional[StrictStr] = Field(default=None, description="The version of H2O Sonar used by the workers.", alias="h2oSonarVersion")
    preferred_llms_for_test_generation: Optional[List[StrictStr]] = Field(default=None, description="Ordered list of LLMs preferred for test generation. The value might be a regular expression.", alias="preferredLlmsForTestGeneration")
    h2o_cloud_url: Optional[StrictStr] = Field(default=None, description="The URL for the H2O Cloud host.", alias="h2oCloudUrl")
    public_instance: Optional[StrictBool] = Field(default=None, description="If the Eval Studio instance is public.", alias="publicInstance")
    __properties: ClassVar[List[str]] = ["baseUrl", "version", "oauth2LoginUrl", "oauth2LogoutUrl", "h2oGpteAllowlist", "h2oGpteClientVersion", "h2oSonarVersion", "preferredLlmsForTestGeneration", "h2oCloudUrl", "publicInstance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Info from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Info from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseUrl": obj.get("baseUrl"),
            "version": obj.get("version"),
            "oauth2LoginUrl": obj.get("oauth2LoginUrl"),
            "oauth2LogoutUrl": obj.get("oauth2LogoutUrl"),
            "h2oGpteAllowlist": obj.get("h2oGpteAllowlist"),
            "h2oGpteClientVersion": obj.get("h2oGpteClientVersion"),
            "h2oSonarVersion": obj.get("h2oSonarVersion"),
            "preferredLlmsForTestGeneration": obj.get("preferredLlmsForTestGeneration"),
            "h2oCloudUrl": obj.get("h2oCloudUrl"),
            "publicInstance": obj.get("publicInstance")
        })
        return _obj


