# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1BatchImportTestsRequest(BaseModel):
    """
    V1BatchImportTestsRequest
    """ # noqa: E501
    tests_json: Optional[StrictStr] = Field(default=None, description="Tests in JSON format.", alias="testsJson")
    url: Optional[StrictStr] = Field(default=None, description="URL pointing to the Tests in JSON format to import.")
    test_display_name_prefix: Optional[StrictStr] = Field(default=None, description="Required. Display name prefix of the newly created Test. If more than one Test is to be created, the display name of second and following Tests will be the display name prefix followed by a number.", alias="testDisplayNamePrefix")
    test_description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the newly created Tests.", alias="testDescription")
    __properties: ClassVar[List[str]] = ["testsJson", "url", "testDisplayNamePrefix", "testDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1BatchImportTestsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1BatchImportTestsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "testsJson": obj.get("testsJson"),
            "url": obj.get("url"),
            "testDisplayNamePrefix": obj.get("testDisplayNamePrefix"),
            "testDescription": obj.get("testDescription")
        })
        return _obj


