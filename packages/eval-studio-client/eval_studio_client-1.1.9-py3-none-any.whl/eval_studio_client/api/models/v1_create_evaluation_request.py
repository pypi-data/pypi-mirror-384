# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_evaluation_test import V1EvaluationTest
from eval_studio_client.api.models.v1_model import V1Model
from typing import Optional, Set
from typing_extensions import Self

class V1CreateEvaluationRequest(BaseModel):
    """
    V1CreateEvaluationRequest
    """ # noqa: E501
    evaluator_identifiers: Optional[List[StrictStr]] = Field(default=None, description="Required. Evaluator identifiers to use, not the resource names.", alias="evaluatorIdentifiers")
    model: Optional[V1Model] = None
    evaluation_tests: Optional[List[V1EvaluationTest]] = Field(default=None, description="TODO: breaks https://google.aip.dev/144 Required. Defines the evaluation configuration.", alias="evaluationTests")
    operation: Optional[StrictStr] = Field(default=None, description="Required. Resource name of the long-running operation.")
    llm_models: Optional[List[StrictStr]] = Field(default=None, description="Optional. If specified, the evaluation will be run on the specified LLM models. If empty, the evaluation will be run on all available LLM models.", alias="llmModels")
    use_cache: Optional[StrictBool] = Field(default=None, description="Optional. If true, the evaluation will use the TestLab cache, if available, to speedup the evaluation.", alias="useCache")
    evaluators_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Additional evaluators configuration, for all the evaluators used in the evaluation. Key is the evaluator identifier, and the value is a JSON string containing the configuration dictionary.", alias="evaluatorsParameters")
    model_parameters: Optional[StrictStr] = Field(default=None, description="Optional. Parameters overrides in JSON format.", alias="modelParameters")
    h2ogpte_collection: Optional[StrictStr] = Field(default=None, description="The existing collection name in H2OGPTe.", alias="h2ogpteCollection")
    default_h2ogpte_model: Optional[V1Model] = Field(default=None, alias="defaultH2ogpteModel")
    __properties: ClassVar[List[str]] = ["evaluatorIdentifiers", "model", "evaluationTests", "operation", "llmModels", "useCache", "evaluatorsParameters", "modelParameters", "h2ogpteCollection", "defaultH2ogpteModel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1CreateEvaluationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in evaluation_tests (list)
        _items = []
        if self.evaluation_tests:
            for _item in self.evaluation_tests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['evaluationTests'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_h2ogpte_model
        if self.default_h2ogpte_model:
            _dict['defaultH2ogpteModel'] = self.default_h2ogpte_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1CreateEvaluationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evaluatorIdentifiers": obj.get("evaluatorIdentifiers"),
            "model": V1Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "evaluationTests": [V1EvaluationTest.from_dict(_item) for _item in obj["evaluationTests"]] if obj.get("evaluationTests") is not None else None,
            "operation": obj.get("operation"),
            "llmModels": obj.get("llmModels"),
            "useCache": obj.get("useCache"),
            "evaluatorsParameters": obj.get("evaluatorsParameters"),
            "modelParameters": obj.get("modelParameters"),
            "h2ogpteCollection": obj.get("h2ogpteCollection"),
            "defaultH2ogpteModel": V1Model.from_dict(obj["defaultH2ogpteModel"]) if obj.get("defaultH2ogpteModel") is not None else None
        })
        return _obj


