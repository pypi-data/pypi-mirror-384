# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_model_type import V1ModelType
from typing import Optional, Set
from typing_extensions import Self

class RequiredTheModelToUpdate(BaseModel):
    """
    RequiredTheModelToUpdate
    """ # noqa: E501
    create_time: Optional[datetime] = Field(default=None, description="Output only. Timestamp when the Model was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested creation of the Model.")
    update_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Timestamp when the Model was last updated.", alias="updateTime")
    updater: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested update of the Model.")
    delete_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Set when the Model is deleted. When set Model should be considered as deleted.", alias="deleteTime")
    deleter: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested deletion of the Model.")
    display_name: Optional[StrictStr] = Field(default=None, description="Human readable name of the Model.", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Arbitrary description of the Model.")
    url: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. Absolute URL to the Model.")
    api_key: Optional[StrictStr] = Field(default=None, description="Optional. API key used to access the Model. Not set for read calls (i.e. get, list) by public clients (front-end). Set only for internal (server-to-worker) communication.", alias="apiKey")
    type: Optional[V1ModelType] = None
    parameters: Optional[StrictStr] = Field(default=None, description="Optional. Model specific parameters in JSON format.")
    demo: Optional[StrictBool] = Field(default=None, description="Output only. Whether the Model is a demo resource or not. Demo resources are read only.")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "updateTime", "updater", "deleteTime", "deleter", "displayName", "description", "url", "apiKey", "type", "parameters", "demo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequiredTheModelToUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "update_time",
            "updater",
            "delete_time",
            "deleter",
            "demo",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequiredTheModelToUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "updateTime": obj.get("updateTime"),
            "updater": obj.get("updater"),
            "deleteTime": obj.get("deleteTime"),
            "deleter": obj.get("deleter"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "apiKey": obj.get("apiKey"),
            "type": obj.get("type"),
            "parameters": obj.get("parameters"),
            "demo": obj.get("demo")
        })
        return _obj


