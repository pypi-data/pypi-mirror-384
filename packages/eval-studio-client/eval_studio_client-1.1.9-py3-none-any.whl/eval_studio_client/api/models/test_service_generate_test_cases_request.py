# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_context import V1Context
from eval_studio_client.api.models.v1_test_cases_generator import V1TestCasesGenerator
from typing import Optional, Set
from typing_extensions import Self

class TestServiceGenerateTestCasesRequest(BaseModel):
    """
    TestServiceGenerateTestCasesRequest
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="Required. The number of TestCases to generate.")
    model: Optional[StrictStr] = Field(default=None, description="Optional. The Model to use for generating TestCases. If not specified, the default RAG h2oGPTe will be used. Error is returned, if no default model is specified and this field is not set.")
    base_llm_model: Optional[StrictStr] = Field(default=None, description="Optional. The base LLM model to use for generating the prompts. Selected automatically if not specified.", alias="baseLlmModel")
    generators: Optional[List[V1TestCasesGenerator]] = Field(default=None, description="Optional. Generators to use for generation. If not specified, all generators are selected.")
    h2ogpte_collection_id: Optional[StrictStr] = Field(default=None, description="Optional. ID of the h2oGPTe collection to use. If provided, documents referenced by Test and any specified chunks are ignored. This field is required if Test does not reference any documents and no chunks are provided. If this field is left empty, a temporary collection will be created.", alias="h2ogpteCollectionId")
    topics: Optional[List[StrictStr]] = Field(default=None, description="Optional. Topics to generate questions for. If not specified, use document summarization as topic generation.")
    chunks: Optional[List[V1Context]] = Field(default=None, description="Optional. The list of chunks to use for generation. If set, the Documents assigned to the Test and h2ogpte_collection_id are ignored.")
    __properties: ClassVar[List[str]] = ["count", "model", "baseLlmModel", "generators", "h2ogpteCollectionId", "topics", "chunks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestServiceGenerateTestCasesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chunks (list)
        _items = []
        if self.chunks:
            for _item in self.chunks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chunks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestServiceGenerateTestCasesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "model": obj.get("model"),
            "baseLlmModel": obj.get("baseLlmModel"),
            "generators": obj.get("generators"),
            "h2ogpteCollectionId": obj.get("h2ogpteCollectionId"),
            "topics": obj.get("topics"),
            "chunks": [V1Context.from_dict(_item) for _item in obj["chunks"]] if obj.get("chunks") is not None else None
        })
        return _obj


