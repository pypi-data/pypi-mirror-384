# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1ProblemAndAction(BaseModel):
    """
    V1ProblemAndAction
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Output only. Problem description.")
    severity: Optional[StrictStr] = Field(default=None, description="Output only. Problem severity.")
    problem_type: Optional[StrictStr] = Field(default=None, description="Output only. Problem type.", alias="problemType")
    problem_attrs: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Problem attributes.", alias="problemAttrs")
    actions_description: Optional[StrictStr] = Field(default=None, description="Output only. Description of actions to mitigate the problem.", alias="actionsDescription")
    explainer_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the explainer which identified the problem.", alias="explainerId")
    explainer_name: Optional[StrictStr] = Field(default=None, description="Output only. Display name of the explainer which identified the problem.", alias="explainerName")
    explanation_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the explanation which can clarify the problem.", alias="explanationType")
    explanation_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the explanation which can clarify the problem.", alias="explanationName")
    explanation_mime: Optional[StrictStr] = Field(default=None, description="Output only. Media type of the explanation which can clarify the problem.", alias="explanationMime")
    resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. Problem resources.")
    __properties: ClassVar[List[str]] = ["description", "severity", "problemType", "problemAttrs", "actionsDescription", "explainerId", "explainerName", "explanationType", "explanationName", "explanationMime", "resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ProblemAndAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "severity",
            "problem_type",
            "problem_attrs",
            "actions_description",
            "explainer_id",
            "explainer_name",
            "explanation_type",
            "explanation_name",
            "explanation_mime",
            "resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ProblemAndAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "severity": obj.get("severity"),
            "problemType": obj.get("problemType"),
            "problemAttrs": obj.get("problemAttrs"),
            "actionsDescription": obj.get("actionsDescription"),
            "explainerId": obj.get("explainerId"),
            "explainerName": obj.get("explainerName"),
            "explanationType": obj.get("explanationType"),
            "explanationName": obj.get("explanationName"),
            "explanationMime": obj.get("explanationMime"),
            "resources": obj.get("resources")
        })
        return _obj


