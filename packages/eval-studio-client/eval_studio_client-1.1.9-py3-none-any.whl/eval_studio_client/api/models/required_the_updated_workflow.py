# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_workflow_node_artifacts import V1WorkflowNodeArtifacts
from eval_studio_client.api.models.v1_workflow_type import V1WorkflowType
from typing import Optional, Set
from typing_extensions import Self

class RequiredTheUpdatedWorkflow(BaseModel):
    """
    RequiredTheUpdatedWorkflow
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable name of the Workflow.", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Optional description of the Workflow.")
    create_time: Optional[datetime] = Field(default=None, description="Output only. Immutable. Creation time of the Workflow.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Name of the user or service that requested creation of the Workflow.")
    update_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Last update time of the Workflow.", alias="updateTime")
    updater: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested update of the Workflow.")
    delete_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Deletion time of the Workflow.", alias="deleteTime")
    deleter: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested deletion of the Workflow.")
    type: Optional[V1WorkflowType] = None
    model: Optional[StrictStr] = Field(default=None, description="Immutable. Resource name of the Model associated with this Workflow.")
    nodes: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of the WorkflowNodes in the Workflow.")
    edges: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of the WorkflowEdges in the Workflow.")
    outputs: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Output only. Optional. Computed outputs of all the WorkflowNodes in the Workflow.")
    output_artifacts: Optional[Dict[str, V1WorkflowNodeArtifacts]] = Field(default=None, description="Output only. Optional. List of the WorkflowNodeArtifacts produces by all the WorkflowNodes in the Workflow.", alias="outputArtifacts")
    llm_model: Optional[StrictStr] = Field(default=None, description="Immutable. LLM Model to use.", alias="llmModel")
    model_parameters: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. Model parameter overrides in JSON format.", alias="modelParameters")
    document: Optional[StrictStr] = Field(default=None, description="The resource name of a Document.")
    h2ogpte_collection: Optional[StrictStr] = Field(default=None, description="Existing h2oGPTe collection.", alias="h2ogpteCollection")
    cloned_from_workflow: Optional[StrictStr] = Field(default=None, description="Optional. Output only. The Workflow that this Workflow was cloned from.", alias="clonedFromWorkflow")
    __properties: ClassVar[List[str]] = ["displayName", "description", "createTime", "creator", "updateTime", "updater", "deleteTime", "deleter", "type", "model", "nodes", "edges", "outputs", "outputArtifacts", "llmModel", "modelParameters", "document", "h2ogpteCollection", "clonedFromWorkflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequiredTheUpdatedWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "update_time",
            "updater",
            "delete_time",
            "deleter",
            "nodes",
            "edges",
            "outputs",
            "output_artifacts",
            "cloned_from_workflow",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in output_artifacts (dict)
        _field_dict = {}
        if self.output_artifacts:
            for _key in self.output_artifacts:
                if self.output_artifacts[_key]:
                    _field_dict[_key] = self.output_artifacts[_key].to_dict()
            _dict['outputArtifacts'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequiredTheUpdatedWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "updateTime": obj.get("updateTime"),
            "updater": obj.get("updater"),
            "deleteTime": obj.get("deleteTime"),
            "deleter": obj.get("deleter"),
            "type": obj.get("type"),
            "model": obj.get("model"),
            "nodes": obj.get("nodes"),
            "edges": obj.get("edges"),
            "outputs": obj.get("outputs"),
            "outputArtifacts": dict(
                (_k, V1WorkflowNodeArtifacts.from_dict(_v))
                for _k, _v in obj["outputArtifacts"].items()
            )
            if obj.get("outputArtifacts") is not None
            else None,
            "llmModel": obj.get("llmModel"),
            "modelParameters": obj.get("modelParameters"),
            "document": obj.get("document"),
            "h2ogpteCollection": obj.get("h2ogpteCollection"),
            "clonedFromWorkflow": obj.get("clonedFromWorkflow")
        })
        return _obj


