# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_model import V1Model
from eval_studio_client.api.models.v1_repeated_context import V1RepeatedContext
from eval_studio_client.api.models.v1_repeated_string import V1RepeatedString
from eval_studio_client.api.models.v1_test_cases_generator import V1TestCasesGenerator
from typing import Optional, Set
from typing_extensions import Self

class PromptGenerationServiceAutoGeneratePromptsRequest(BaseModel):
    """
    PromptGenerationServiceAutoGeneratePromptsRequest
    """ # noqa: E501
    operation: Optional[StrictStr] = Field(default=None, description="Required. The Operation processing this prompt generation process.")
    model: Optional[V1Model] = None
    count: Optional[StrictInt] = Field(default=None, description="Required. The number of TestCases to generate.")
    base_llm_model: Optional[StrictStr] = Field(default=None, description="Required. Base LLM model to use for generating the prompts.", alias="baseLlmModel")
    document_urls: Optional[V1RepeatedString] = Field(default=None, alias="documentUrls")
    chunks: Optional[V1RepeatedContext] = None
    generators: Optional[List[V1TestCasesGenerator]] = Field(default=None, description="Optional. Type of questions to generate TestCases for. If not specified, all types of questions are selected.")
    h2ogpte_collection_id: Optional[StrictStr] = Field(default=None, description="Optional. The ID of the h2oGPTe collection to use. If empty, new temporary collection will be created.", alias="h2ogpteCollectionId")
    topics: Optional[List[StrictStr]] = Field(default=None, description="Optional. Topics to generate questions for. If not specified, use document summarization as topic generation.")
    __properties: ClassVar[List[str]] = ["operation", "model", "count", "baseLlmModel", "documentUrls", "chunks", "generators", "h2ogpteCollectionId", "topics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromptGenerationServiceAutoGeneratePromptsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_urls
        if self.document_urls:
            _dict['documentUrls'] = self.document_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chunks
        if self.chunks:
            _dict['chunks'] = self.chunks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromptGenerationServiceAutoGeneratePromptsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "model": V1Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "count": obj.get("count"),
            "baseLlmModel": obj.get("baseLlmModel"),
            "documentUrls": V1RepeatedString.from_dict(obj["documentUrls"]) if obj.get("documentUrls") is not None else None,
            "chunks": V1RepeatedContext.from_dict(obj["chunks"]) if obj.get("chunks") is not None else None,
            "generators": obj.get("generators"),
            "h2ogpteCollectionId": obj.get("h2ogpteCollectionId"),
            "topics": obj.get("topics")
        })
        return _obj


