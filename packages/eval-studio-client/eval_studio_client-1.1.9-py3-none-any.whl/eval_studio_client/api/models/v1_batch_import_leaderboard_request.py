# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_leaderboard_type import V1LeaderboardType
from typing import Optional, Set
from typing_extensions import Self

class V1BatchImportLeaderboardRequest(BaseModel):
    """
    V1BatchImportLeaderboardRequest
    """ # noqa: E501
    test_lab_json: Optional[StrictStr] = Field(default=None, description="Test Lab in JSON format.", alias="testLabJson")
    url: Optional[StrictStr] = Field(default=None, description="URL pointing to a Test Lab in JSON format to import.")
    evaluators: Optional[List[StrictStr]] = Field(default=None, description="Required. Resource name of the Evaluator used in this Leaderboard.")
    model: Optional[StrictStr] = Field(default=None, description="Required. Resource name of the Model used in this Leaderboard.")
    test_display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the newly created Test.", alias="testDisplayName")
    test_description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the newly created Test.", alias="testDescription")
    leaderboard_type: Optional[V1LeaderboardType] = Field(default=None, alias="leaderboardType")
    dashboard_display_name: Optional[StrictStr] = Field(default=None, description="Optional. Display name for the dashboard that will group the leaderboards.", alias="dashboardDisplayName")
    dashboard_description: Optional[StrictStr] = Field(default=None, description="Optional. Description for the dashboard that will group the leaderboards.", alias="dashboardDescription")
    __properties: ClassVar[List[str]] = ["testLabJson", "url", "evaluators", "model", "testDisplayName", "testDescription", "leaderboardType", "dashboardDisplayName", "dashboardDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1BatchImportLeaderboardRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1BatchImportLeaderboardRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "testLabJson": obj.get("testLabJson"),
            "url": obj.get("url"),
            "evaluators": obj.get("evaluators"),
            "model": obj.get("model"),
            "testDisplayName": obj.get("testDisplayName"),
            "testDescription": obj.get("testDescription"),
            "leaderboardType": obj.get("leaderboardType"),
            "dashboardDisplayName": obj.get("dashboardDisplayName"),
            "dashboardDescription": obj.get("dashboardDescription")
        })
        return _obj


