# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from eval_studio_client.api.models.v1_evaluator_parameter import V1EvaluatorParameter
from typing import Optional, Set
from typing_extensions import Self

class V1Evaluator(BaseModel):
    """
    V1Evaluator
    """ # noqa: E501
    name: Optional[StrictStr] = None
    create_time: Optional[datetime] = Field(default=None, description="Output only. Timestamp when the Evaluator was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested creation of the Evaluator.")
    update_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Timestamp when the Evaluator was last updated.", alias="updateTime")
    updater: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested update of the Evaluator.")
    delete_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Set when the Evaluator is deleted. When set Evaluator should be considered as deleted.", alias="deleteTime")
    deleter: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested deletion of the Evaluator.")
    display_name: Optional[StrictStr] = Field(default=None, description="Human readable name of the Evaluator.", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Arbitrary description of the Evaluator.")
    content: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="Base64 encoded Evaluator implementation.")
    mime_type: Optional[StrictStr] = Field(default=None, description="MIME type of the Evaluator implementation, e.g.: \"text/x-python\" or \"application/zip\".", alias="mimeType")
    filename: Optional[StrictStr] = Field(default=None, description="Filename of the Evaluator implementation, e.g.: \"evaluator.py\" or \"evaluator.zip\".")
    identifier: Optional[StrictStr] = Field(default=None, description="Well known identifier of the Evaluator implementation.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. Tags or other identifiers of the Evaluator.")
    parameters: Optional[List[V1EvaluatorParameter]] = Field(default=None, description="Optional. Additional parameters of the Evaluator.")
    brief_description: Optional[StrictStr] = Field(default=None, description="Optional. Short preview of the Evaluator's description.", alias="briefDescription")
    enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether this Evaluator can be used for creating evaluations. Evaluator might be disabled because it has some external requirements that are not met.")
    tagline: Optional[StrictStr] = Field(default=None, description="Output only. Tagline is a short (single-line) and high-level description of the evaluator.")
    primary_metric: Optional[StrictStr] = Field(default=None, description="Output only. Optional. The name of the primary metric.", alias="primaryMetric")
    primary_metric_default_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Optional. Default threshold of the primary metric. Value must be ignored if primary_metric is invalid.", alias="primaryMetricDefaultThreshold")
    __properties: ClassVar[List[str]] = ["name", "createTime", "creator", "updateTime", "updater", "deleteTime", "deleter", "displayName", "description", "content", "mimeType", "filename", "identifier", "tags", "parameters", "briefDescription", "enabled", "tagline", "primaryMetric", "primaryMetricDefaultThreshold"]

    @field_validator('content')
    def content_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Evaluator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "create_time",
            "creator",
            "update_time",
            "updater",
            "delete_time",
            "deleter",
            "enabled",
            "tagline",
            "primary_metric",
            "primary_metric_default_threshold",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Evaluator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "updateTime": obj.get("updateTime"),
            "updater": obj.get("updater"),
            "deleteTime": obj.get("deleteTime"),
            "deleter": obj.get("deleter"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "content": obj.get("content"),
            "mimeType": obj.get("mimeType"),
            "filename": obj.get("filename"),
            "identifier": obj.get("identifier"),
            "tags": obj.get("tags"),
            "parameters": [V1EvaluatorParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "briefDescription": obj.get("briefDescription"),
            "enabled": obj.get("enabled"),
            "tagline": obj.get("tagline"),
            "primaryMetric": obj.get("primaryMetric"),
            "primaryMetricDefaultThreshold": obj.get("primaryMetricDefaultThreshold")
        })
        return _obj


