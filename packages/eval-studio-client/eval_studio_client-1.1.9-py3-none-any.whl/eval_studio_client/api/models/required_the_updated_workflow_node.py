# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.v1_workflow_node_artifact import V1WorkflowNodeArtifact
from eval_studio_client.api.models.v1_workflow_node_attributes import V1WorkflowNodeAttributes
from eval_studio_client.api.models.v1_workflow_node_status import V1WorkflowNodeStatus
from eval_studio_client.api.models.v1_workflow_node_type import V1WorkflowNodeType
from typing import Optional, Set
from typing_extensions import Self

class RequiredTheUpdatedWorkflowNode(BaseModel):
    """
    RequiredTheUpdatedWorkflowNode
    """ # noqa: E501
    parent: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Resource name of the parent Workflow in format of `workflows/{workflow_id}/`.")
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable name of the WorkflowNode.", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Optional description of the WorkflowNode.")
    create_time: Optional[datetime] = Field(default=None, description="Output only. Immutable. Creation time of the WorkflowNode.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Name of the user or service that requested creation of the WorkflowNode.")
    update_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Last update time of the WorkflowNode.", alias="updateTime")
    updater: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested update of the WorkflowNode.")
    delete_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Deletion time of the WorkflowNode.", alias="deleteTime")
    deleter: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested deletion of the WorkflowNode.")
    type: Optional[V1WorkflowNodeType] = None
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="User-given parameters for the WorkflowNode.")
    outputs: Optional[Dict[str, Any]] = Field(default=None, description="Output only. Computed outputs of the WorkflowNode.")
    output_artifacts: Optional[List[V1WorkflowNodeArtifact]] = Field(default=None, description="Output only. Optional. List of the WorkflowNodeArtifacts produces by the WorkflowNode.", alias="outputArtifacts")
    status: Optional[V1WorkflowNodeStatus] = None
    attributes: Optional[V1WorkflowNodeAttributes] = None
    processed_by_operation: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Resource name of the latest Operation that has processed or is currently processing this WorkflowNode.", alias="processedByOperation")
    __properties: ClassVar[List[str]] = ["parent", "displayName", "description", "createTime", "creator", "updateTime", "updater", "deleteTime", "deleter", "type", "parameters", "outputs", "outputArtifacts", "status", "attributes", "processedByOperation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequiredTheUpdatedWorkflowNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "parent",
            "create_time",
            "creator",
            "update_time",
            "updater",
            "delete_time",
            "deleter",
            "outputs",
            "output_artifacts",
            "processed_by_operation",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in output_artifacts (list)
        _items = []
        if self.output_artifacts:
            for _item in self.output_artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outputArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequiredTheUpdatedWorkflowNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parent": obj.get("parent"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "updateTime": obj.get("updateTime"),
            "updater": obj.get("updater"),
            "deleteTime": obj.get("deleteTime"),
            "deleter": obj.get("deleter"),
            "type": obj.get("type"),
            "parameters": obj.get("parameters"),
            "outputs": obj.get("outputs"),
            "outputArtifacts": [V1WorkflowNodeArtifact.from_dict(_item) for _item in obj["outputArtifacts"]] if obj.get("outputArtifacts") is not None else None,
            "status": obj.get("status"),
            "attributes": V1WorkflowNodeAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "processedByOperation": obj.get("processedByOperation")
        })
        return _obj


