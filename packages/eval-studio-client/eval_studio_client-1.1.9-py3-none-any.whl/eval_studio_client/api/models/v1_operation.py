# coding: utf-8

"""
    ai/h2o/eval_studio/v1/insight.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eval_studio_client.api.models.protobuf_any import ProtobufAny
from eval_studio_client.api.models.rpc_status import RpcStatus
from typing import Optional, Set
from typing_extensions import Self

class V1Operation(BaseModel):
    """
    This resource represents a long-running operation that is the result of a network API call.
    """ # noqa: E501
    name: Optional[StrictStr] = None
    create_time: Optional[datetime] = Field(default=None, description="Output only. Timestamp when the Operation was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Name of the user or service that requested creation of the Operation.")
    update_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Timestamp when the Operation was last updated.", alias="updateTime")
    updater: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested update of the Operation.")
    delete_time: Optional[datetime] = Field(default=None, description="Output only. Optional. Set when the Operation is deleted. When set Operation should be considered as deleted.", alias="deleteTime")
    deleter: Optional[StrictStr] = Field(default=None, description="Output only. Optional. Name of the user or service that requested deletion of the Operation.")
    metadata: Optional[ProtobufAny] = None
    done: Optional[StrictBool] = Field(default=None, description="If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.")
    error: Optional[RpcStatus] = None
    response: Optional[ProtobufAny] = None
    __properties: ClassVar[List[str]] = ["name", "createTime", "creator", "updateTime", "updater", "deleteTime", "deleter", "metadata", "done", "error", "response"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "create_time",
            "creator",
            "update_time",
            "updater",
            "delete_time",
            "deleter",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "updateTime": obj.get("updateTime"),
            "updater": obj.get("updater"),
            "deleteTime": obj.get("deleteTime"),
            "deleter": obj.get("deleter"),
            "metadata": ProtobufAny.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "done": obj.get("done"),
            "error": RpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "response": ProtobufAny.from_dict(obj["response"]) if obj.get("response") is not None else None
        })
        return _obj


