[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semanticscout"
version = "3.4.0"
description = "A language-aware semantic code search MCP server with intelligent filtering and 9.3x better dependency analysis"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Psynosaur", email = "psynosaur@gmail.com"}
]
maintainers = [
    {name = "Psynosaur", email = "psynosaur@gmail.com"}
]
keywords = ["mcp", "context-engine", "code-search", "vector-database", "ai-agents", "semantic-search", "ollama", "chromadb"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mcp[cli]>=1.2.0",
    "chromadb>=0.4.0",
    "openai>=1.0.0",
    "tree-sitter>=0.20.0,<0.22",
    "tree-sitter-languages>=1.10.0; python_version < '3.13'",
    "httpx>=0.25.0",
    "pathspec>=0.11.0",
    "watchdog>=3.0.0",
    "python-dotenv>=1.0.0",
    # Enhancement dependencies
    "networkx>=3.2.1",
    "psutil>=5.9.0",
    # Fast embedding provider
    "sentence-transformers>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/Psynosaur/SemanticScout"
Repository = "https://github.com/Psynosaur/SemanticScout.git"
Issues = "https://github.com/Psynosaur/SemanticScout/issues"
Documentation = "https://github.com/Psynosaur/SemanticScout#readme"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
fast = [
    "sentence-transformers>=2.2.0",
]

[project.scripts]
semanticscout = "semanticscout.mcp_server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src/semanticscout",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

