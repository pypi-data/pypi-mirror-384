# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .data_pool_dto_current_user_permission import DataPoolDtoCurrentUserPermission


class DataPoolDto(UniversalBaseModel):
    current_user_permission: typing_extensions.Annotated[
        typing.Optional[DataPoolDtoCurrentUserPermission], FieldMetadata(alias="currentUserPermission")
    ] = pydantic.Field(default=None)
    """
    The access permission role for this entity of the current user
    """

    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    short_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="shortDescription")] = None
    description: typing.Optional[str] = None
    created_at: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdAt")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
