Metadata-Version: 2.4
Name: pybrige
Version: 0.5.1
Summary: Um toolkit de produtividade para desenvolvedores em Python
Project-URL: Homepage, https://github.com/juliobrige/pybrige
Project-URL: Bug Tracker, https://github.com/juliobrige/pybrige/issues
Project-URL: Documentation, https://github.com/juliobrige/pybrige/blob/main/README.md
Author-email: Julio Benjamim Bernardo Brige <juliobenjamimbernardo36@gmail.com>
License: MIT
License-File: LICENSE
Requires-Python: >=3.8
Requires-Dist: python-dotenv
Requires-Dist: rich
Description-Content-Type: text/markdown

# pybrige

[![PyPI version](https://img.shields.io/pypi/v/pybrige.svg)](https://pypi.org/project/pybrige/)
[![Python versions](https://img.shields.io/pypi/pyversions/pybrige.svg)](https://pypi.org/project/pybrige/)
[![License](https://img.shields.io/pypi/l/pybrige.svg)](https://github.com/juliobrige/pybrige/blob/main/LICENSE)
[![GitHub Workflow Status](https://github.com/juliobrige/pybrige/actions/workflows/python-tests.yml/badge.svg)](https://github.com/juliobrige/pybrige/actions/workflows/python-tests.yml)
[![Coverage Status](https://img.shields.io/badge/coverage-92%25-brightgreen)](https://github.com/juliobrige/pybrige)

<br>

**pt-BR**: Uma cole√ß√£o de **utilit√°rios para desenvolvedores Python** ‚Äî logging elegante, medi√ß√£o de tempo, retry autom√°tico, manipula√ß√£o de JSON, tratamento de strings e muito mais.

**en-US**: A collection of **developer utilities for Python** ‚Äî elegant logging, timing, retry decorator, JSON helpers, string utilities and more.

---

## ‚ú® Vis√£o Geral

O **pybrige** √© um toolkit de produtividade para desenvolvedores Python, projetado para acelerar tarefas comuns do dia a dia com ferramentas robustas e f√°ceis de usar.

Chega de copiar e colar o mesmo c√≥digo de utilidade em todos os seus projetos! Com `pybrige` voc√™ obt√©m solu√ß√µes prontas e testadas para configura√ß√£o, logging, debugging e manipula√ß√£o de dados.

---

## üöÄ Instala√ß√£o

```bash
pip install pybrige

---

## ‚ö° Guia R√°pido (Quick Start)

Veja como o `pybrige` pode simplificar seu c√≥digo:

```python
import logging
import requests
from pybrige import setup_logging, load_env, EnvSpec, VarSpec, timer, retry, print_table

# 1. Configure logs coloridos
setup_logging(colors=True)

# 2. Defina e carregue a configura√ß√£o da aplica√ß√£o
try:
    config = load_env(EnvSpec(
        vars=[
            VarSpec("API_URL", help="URL da API de dados"),
            VarSpec("RETRIES", type="int", default=3),
        ],
        prefix="APP_"
    ))
except Exception as e:
    logging.error(f"Erro de configura√ß√£o: {e}")
    exit(1)

# 3. Use decorators para resili√™ncia e an√°lise de performance
@retry(tries=config["RETRIES"], delay=1, exceptions=(requests.exceptions.RequestException,))
@timer(template="[PERF] '{func_name}' contactou a API em {elapsed:.2f}s")
def buscar_dados():
    logging.info(f"A contactar a API em {config['API_URL']}...")
    response = requests.get(config["API_URL"])
    response.raise_for_status()
    return response.json()

# 4. Execute e apresente resultados
try:
    dados = buscar_dados()
    logging.info("Dados recebidos com sucesso!")
    print_table(dados, title="Relat√≥rio de Utilizadores")
except Exception as e:
    logging.critical(f"N√£o foi poss√≠vel obter os dados: {e}")
```

---

## üîß Funcionalidades Principais

- **Configura√ß√£o Segura**: Carregue e valide vari√°veis de ambiente (`load_env`, `EnvSpec`, `VarSpec`).
- **Logging Inteligente**: Configure logs coloridos e amig√°veis ao terminal (`setup_logging`).
- **Decorators Poderosos**: 
  - `@retry` ‚Üí adiciona retentativas autom√°ticas.  
  - `@timer` ‚Üí mede o tempo de execu√ß√£o de fun√ß√µes.
- **Utilidades de Dados**:  
  - Manipula√ß√£o de JSON (`read_json`, `write_json`, `append_json_line`, `pretty_print_json`).  
  - Transforma√ß√µes de texto (`slugify`, `camel_to_snake`, `snake_to_camel`, `normalize_whitespace`).  
  - Extra√ß√£o (`extract_emails`, `extract_urls`, `remove_html_tags`).  
  - Impress√£o de tabelas (`print_table` com `rich`).

---

## üìö Exemplos de Uso

### Logging
```python
from pybrige import setup_logging
import logging

setup_logging(colors=True)
logging.info("Mensagem colorida!")
```

### Timer
```python
from pybrige import timer, setup_logging

setup_logging(colors=True)

@timer()
def process_data():
    return sum(range(100000))

process_data()
```

### Retry
```python
from pybrige import retry
import random

@retry(tries=3, delay=1, backoff=2)
def unstable():
    if random.random() < 0.7:
        raise ValueError("Falhou")
    return "Sucesso!"

print(unstable())
```

### JSON Helpers
```python
from pybrige import write_json, read_json

data = {"id": 1, "name": "Alice"}
write_json("data.json", data)

print(read_json("data.json"))
```

### String Utils
```python
from pybrige import slugify, camel_to_snake, snake_to_camel, extract_emails, extract_urls

print(slugify("T√≠tulo de Exemplo com √Åccentos"))  
print(camel_to_snake("CamelCaseTest"))  
print(snake_to_camel("snake_case_test"))  
print(extract_emails("contato: dev@helper.org"))  
print(extract_urls("Veja https://example.com"))  
```

### Hacker Style
```python
from pybrige import ascii_banner_hacker, matrix_rain_preview

print(ascii_banner_hacker("F SOCIETY", subtitle="we are everyone"))
print(matrix_rain_preview(lines=5, width=20))
```

---

## üìå Roadmap

- [ ] Suporte a YAML (`io_utils`)  
- [ ] Novas transforma√ß√µes de texto (snake ‚Üí kebab, title case etc.)  
- [ ] CLI para acessar utilit√°rios diretamente no terminal  

---

## üìñ Refer√™ncia da API (v0.2.0)

### `validate_bi`
Verifica o formato de um Bilhete de Identidade de Mo√ßambique de 13 caracteres.

```python
from pybrige import validate_bi

# Casos v√°lidos
print(validate_bi("123456789012A"))
# Sa√≠da: True

print(validate_bi(" 123456-789012-B ")) # Lida com espa√ßos e h√≠fens
# Sa√≠da: True

# Caso inv√°lido
print(validate_bi("documento_invalido"))
# Sa√≠da: False

### Core
- `load_env(spec: EnvSpec)` ‚Üí valida e carrega vari√°veis de ambiente.  
- `require_vars(vars: list[str])` ‚Üí garante que vari√°veis existem (vers√£o legada).  
- `setup_logging(level, colors, file, logger_name)` ‚Üí configura logging.  

### Decorators
- `@timer(level, template, logger)` ‚Üí mede e loga tempo de execu√ß√£o.  
- `@retry(tries, delay, backoff, exceptions, ...)` ‚Üí retentativas autom√°ticas em caso de falha.  

### Utils
- `print_table(data, title)` ‚Üí imprime tabelas com estilo (`rich`).  
- `slugify(text, allow_unicode)` ‚Üí texto ‚Üí slug.  
- `camel_to_snake(text)` / `snake_to_camel(text)` ‚Üí convers√µes de nomenclatura.  
- `normalize_whitespace(text)` ‚Üí remove espa√ßos extras.  
- `remove_html_tags(text)` ‚Üí remove tags HTML.  
- `extract_emails(text)` / `extract_urls(text)` ‚Üí extra√ß√µes de emails e URLs.  
- `read_json(path, safe)` / `write_json(path, data)` ‚Üí helpers JSON.  
- `append_json_line(path, record)` ‚Üí escreve no formato JSON Lines.  
- `pretty_print_json(data)` ‚Üí retorna JSON formatado.  
### `utils.text`
* `slugify`, `camel_to_snake`, `snake_to_camel`, `normalize_whitespace`, `remove_html_tags`, `extract_emails`, `extract_urls`, **`validate_bi`**.




## ü§ù Contribuindo

Contribui√ß√µes s√£o bem-vindas!  
Sinta-se livre para abrir **issues** ou enviar um **pull request** no GitHub.  

1. Fork o reposit√≥rio  
2. Crie sua branch: `git checkout -b minha-feature`  
3. Commit: `git commit -m "Nova feature"`  
4. Push: `git push origin minha-feature`  
5. Abra o PR üöÄ  

---

## üìÑ Licen√ßa

Distribu√≠do sob a licen√ßa MIT.  
Veja [LICENSE](LICENSE) para mais detalhes.
