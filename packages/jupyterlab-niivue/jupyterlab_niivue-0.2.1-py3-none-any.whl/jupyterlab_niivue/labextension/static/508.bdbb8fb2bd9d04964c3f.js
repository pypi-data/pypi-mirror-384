"use strict";(self.webpackChunk_niivue_jupyter=self.webpackChunk_niivue_jupyter||[]).push([[508],{508:(e,i,t)=>{t.r(i),t.d(i,{default:()=>p});var n,a=t(427),s=t(57),o=t(593),r=t(134),d=t(256);class l extends d.Widget{constructor(e,i){super(),this._context=e,this._docManager=i,this.addClass("jp-NiivueWidget"),this._iframe=document.createElement("iframe"),this._iframe.style.width="100%",this._iframe.style.height="100%",this._iframe.style.border="none",this.node.appendChild(this._iframe),this._initializeViewer()}_initializeViewer(){try{const e=this._context.path;console.log("Initializing this.onResize Niivue viewer for file:",e);const i=this._getHtmlForViewer();this._iframe.srcdoc=i,window.addEventListener("message",this._handleIframeMessage.bind(this)),this._iframe.onload=()=>{console.log("Iframe loaded, initializing viewer"),setTimeout(()=>{this._sendInitSettings(),setTimeout(()=>{console.log("Sending message with image: ",e),this._sendAddImageMessage(e)},500)},100)},console.log("Niivue viewer initialized successfully")}catch(e){console.error("Failed to initialize Niivue viewer:",e),this._showError(`Failed to initialize viewer: ${e instanceof Error?e.message:"Unknown error"}`)}}_getHtmlForViewer(){return'<!doctype html>\n          <html lang="en">\n            <head>\n              <meta charset="utf-8" />\n              <style>\n                /* Embed critical CSS to avoid loading issues */\n                body { margin: 0; padding: 0; background: #1a1a1a; color: white; font-family: system-ui, sans-serif; }\n                #app { width: 100vw; height: 100vh; }\n                .loading { display: flex; justify-content: center; align-items: center; height: 100vh; }\n                .error { display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; color: #ff6b6b; }\n              </style>\n              <link rel="stylesheet" crossorigin href="/lab/extensions/@niivue/jupyter/static/niivue/index.css">\n            </head>\n            <body class="text-white p-0">\n              <div id="app" class="w-screen h-screen">\n                <div class="loading">Loading NIfTI viewer...</div>\n              </div>\n              <script>\n                // Mock vscode API for Jupyter environment\n                window.vscode = {\n                  postMessage: function(message) {\n                    window.parent.postMessage(message, \'*\');\n                  }\n                };\n              <\/script>\n              <script type="module" crossorigin src="/lab/extensions/@niivue/jupyter/static/niivue/index.js"\n                      onerror="document.getElementById(\'app\').innerHTML = \'<div class=\\"error\\"><h3>Failed to load NIfTI viewer</h3><p>Could not load the required JavaScript files</p></div>\';">\n              <\/script>\n            </body>\n          </html>'}_sendInitSettings(){if(this._iframe.contentWindow){const e={showCrosshairs:!0,interpolation:!0,colorbar:!1,radiologicalConvention:!1,zoomDragMode:!1,defaultVolumeColormap:"gray",defaultOverlayColormap:"redyell"};console.log("Sending init settings:",e),this._iframe.contentWindow.postMessage({type:"initSettings",body:e},"*")}}async _sendAddImageMessage(e){if(this._iframe.contentWindow)try{console.log("Reading file data for:",e);const i=`/files/${e}`;console.log("Fetching file from URL:",i);const t=await fetch(i);if(!t.ok)throw new Error(`Failed to fetch file: ${t.statusText}`);const n=await t.arrayBuffer();console.log("Sending file data to iframe, size:",n.byteLength),this._iframe.contentWindow.postMessage({type:"addImage",body:{data:n,uri:e}},"*")}catch(i){console.error("Error reading file:",i),this._showError(`Could not load file: ${e}`)}}_showError(e){const i=document.createElement("div");i.className="jp-NiivueWidget-error",i.innerHTML=`\n      <div style="padding: 20px; text-align: center; color: #d32f2f;">\n        <h3>Error Loading NIfTI File</h3>\n        <p>${e}</p>\n      </div>\n    `,this.node.innerHTML="",this.node.appendChild(i)}async _handleIframeMessage(e){if(e.source!==this._iframe.contentWindow)return;const i=e.data;switch(i.type){case"addImages":await this._handleAddImages();break;case"addOverlay":await this._handleAddOverlay(i.body);break;case"addDcmFolder":await this._handleAddDcmFolder()}}async _handleAddImages(){try{const e=await s.FileDialog.getOpenFiles({manager:this._docManager,filter:e=>{if("directory"===e.type)return!0;const i=e.name.toLowerCase();return i.endsWith(".nii")||i.endsWith(".nii.gz")||i.endsWith(".dcm")||i.endsWith(".mgh")||i.endsWith(".mgz")||i.endsWith(".mha")||i.endsWith(".mhd")||i.endsWith(".nrrd")||i.endsWith(".nhdr")||i.endsWith(".v")||i.endsWith(".v16")}});if(e.button.accept&&e.value&&e.value.length>0&&this._iframe.contentWindow){this._iframe.contentWindow.postMessage({type:"initCanvas",body:{n:e.value.length}},"*");for(const i of e.value){const e=i.path;await this._loadFileAndSend(e,"addImage",void 0)}}}catch(e){console.error("Error opening file dialog:",e)}}async _loadFileAndSend(e,i,t){if(this._iframe.contentWindow)try{const n=`/files/${e}`,a=await fetch(n);if(!a.ok)throw new Error(`Failed to fetch file: ${a.statusText}`);const s=await a.arrayBuffer();this._iframe.contentWindow.postMessage({type:i,body:{data:s,uri:e,...t}},"*")}catch(i){console.error("Error reading file:",i),this._showError(`Could not load file: ${e}`)}}async _handleAddOverlay(e){try{const i=await s.FileDialog.getOpenFiles({manager:this._docManager,filter:e=>{if("directory"===e.type)return!0;const i=e.name.toLowerCase();return i.endsWith(".nii")||i.endsWith(".nii.gz")||i.endsWith(".dcm")||i.endsWith(".mgh")||i.endsWith(".mgz")||i.endsWith(".mha")||i.endsWith(".mhd")||i.endsWith(".nrrd")||i.endsWith(".nhdr")||i.endsWith(".v")||i.endsWith(".v16")}});if(i.button.accept&&i.value&&i.value.length>0){const t=i.value[0].path;await this._loadFileAndSend(t,e.type,{index:e.index})}}catch(e){console.error("Error opening file dialog:",e)}}async _handleAddDcmFolder(){const e=await s.FileDialog.getExistingDirectory({manager:this._docManager});if(e.button.accept&&e.value&&e.value.length>0&&this._iframe.contentWindow){const i=e.value[0].path;try{const e=await fetch(`/api/contents/${i}`);if(!e.ok)throw new Error(`Failed to list directory: ${e.statusText}`);const t=(await e.json()).content.filter(e=>"file"===e.type);if(t.length>0){const e=await Promise.all(t.map(async e=>{const i=`/files/${e.path}`,t=await fetch(i);if(!t.ok)throw new Error(`Failed to fetch file: ${t.statusText}`);return t.arrayBuffer()}));this._iframe.contentWindow.postMessage({type:"addImage",body:{data:e,uri:t.map(e=>e.name)}},"*")}}catch(e){console.error("Error reading DICOM folder:",e),this._showError(`Could not load DICOM folder: ${i}`)}}}onResize(){console.log("Widget resized")}dispose(){window.removeEventListener("message",this._handleIframeMessage.bind(this)),this._iframe&&this._iframe.remove(),super.dispose()}}!function(e){class i extends r.ABCWidgetFactory{constructor(e,i){super(e),this._docManager=i}createNewWidget(e){console.log("Creating new Niivue widget for context:",e);const i=new l(e,this._docManager);return new r.DocumentWidget({content:i,context:e})}}e.Factory=i,e.createCompareView=function(e,i,t){const n=new m(t,i);n.title.label=`Compare (${t.length} images)`,n.title.closable=!0,e.shell.add(n,"main"),e.shell.activateById(n.id)}}(n||(n={}));class m extends l{constructor(e,i){super({path:"",localPath:"",pathChanged:{connect:()=>{}}},i),this._selectedItems=e,this.removeClass("jp-NiivueWidget"),this.addClass("jp-NiivueCompareWidget"),this.id=`niivue-compare-${Date.now()}`,this._initializeCompareView()}_initializeCompareView(){this._iframe.onload=()=>{console.log("Compare view iframe loaded"),setTimeout(()=>{this._sendInitSettings(),this._iframe.contentWindow&&this._iframe.contentWindow.postMessage({type:"initCanvas",body:{n:this._selectedItems.length}},"*"),setTimeout(()=>{this._loadAllImages()},500)},100)},this._iframe.contentWindow&&this._iframe.onload(new Event("load"))}async _loadAllImages(){for(const e of this._selectedItems)await this._loadFileAndSend(e.path,"addImage")}}const c="jupyterlab-niivue:compare",p={id:"jupyterlab-niivue:plugin",description:"A JupyterLab extension for viewing NIfTI files with Niivue",autoStart:!0,requires:[a.IDocumentManager,s.IFileBrowserFactory],optional:[o.ITranslator],activate:(e,i,t,a)=>{console.log("JupyterLab extension jupyterlab-niivue is activated!");const s=(null!=a?a:o.nullTranslator).load("jupyterlab"),r=["nii","nii.gz","dcm","mih","mif","mif.gz","nhdr","nrrd","mhd","mha","mgh","mgz","v","v16","vmr","mz3","gii","mnc","mnc.gz","npy","npz"],d=new n.Factory({name:"Niivue Viewer",fileTypes:r,defaultFor:r,modelName:"base64"},i);d.widgetCreated.connect((e,i)=>{console.log("Niivue widget created:",i),i.context.pathChanged.connect(()=>{i.title.label=i.context.localPath.split("/").pop()||""})}),e.docRegistry.addWidgetFactory(d),e.commands.addCommand(c,{label:s.__("Compare in NiiVue"),caption:s.__("Open selected images in NiiVue compare view"),execute:()=>{const{tracker:a}=t,s=a.currentWidget;if(!s)return;const o=Array.from(s.selectedItems());o.length<2?console.warn("Please select at least 2 files to compare"):n.createCompareView(e,i,o)},isVisible:()=>{const{tracker:e}=t,i=e.currentWidget;if(!i)return!1;const n=Array.from(i.selectedItems());return n.length>=2&&n.every(e=>{const i=e.name.toLowerCase();return r.some(e=>i.endsWith(`.${e}`))})}}),e.contextMenu.addItem({command:c,selector:'.jp-DirListing-item[data-isdir="false"]',rank:3}),[{name:"nii",displayName:"NIfTI File",extensions:[".nii"],mimeTypes:["application/x-nifti"]},{name:"nii.gz",displayName:"Compressed NIfTI File",extensions:[".nii.gz"],mimeTypes:["application/x-nifti-gz"]},{name:"dcm",displayName:"DICOM File",extensions:[".dcm"],mimeTypes:["application/dicom"]},{name:"mih",displayName:"MIH File",extensions:[".mih"],mimeTypes:["application/octet-stream"]},{name:"mif",displayName:"MIF File",extensions:[".mif"],mimeTypes:["application/octet-stream"]},{name:"mif.gz",displayName:"Compressed MIF File",extensions:[".mif.gz"],mimeTypes:["application/octet-stream"]},{name:"nhdr",displayName:"NRRD Header File",extensions:[".nhdr"],mimeTypes:["application/octet-stream"]},{name:"nrrd",displayName:"NRRD File",extensions:[".nrrd"],mimeTypes:["application/octet-stream"]},{name:"mhd",displayName:"MetaImage Header File",extensions:[".mhd"],mimeTypes:["application/octet-stream"]},{name:"mha",displayName:"MetaImage File",extensions:[".mha"],mimeTypes:["application/octet-stream"]},{name:"mgh",displayName:"MGH File",extensions:[".mgh"],mimeTypes:["application/octet-stream"]},{name:"mgz",displayName:"Compressed MGH File",extensions:[".mgz"],mimeTypes:["application/octet-stream"]},{name:"v",displayName:"BrainVoyager V File",extensions:[".v"],mimeTypes:["application/octet-stream"]},{name:"v16",displayName:"BrainVoyager V16 File",extensions:[".v16"],mimeTypes:["application/octet-stream"]},{name:"vmr",displayName:"BrainVoyager VMR File",extensions:[".vmr"],mimeTypes:["application/octet-stream"]},{name:"mz3",displayName:"MZ3 Mesh File",extensions:[".mz3"],mimeTypes:["application/octet-stream"]},{name:"gii",displayName:"GIFTI File",extensions:[".gii"],mimeTypes:["application/octet-stream"]},{name:"mnc",displayName:"MINC File",extensions:[".mnc"],mimeTypes:["application/octet-stream"]},{name:"mnc.gz",displayName:"Compressed MINC File",extensions:[".mnc.gz"],mimeTypes:["application/octet-stream"]},{name:"npy",displayName:"NumPy Array File",extensions:[".npy"],mimeTypes:["application/octet-stream"]},{name:"npz",displayName:"NumPy Compressed Archive",extensions:[".npz"],mimeTypes:["application/octet-stream"]}].forEach(i=>{e.docRegistry.addFileType({name:i.name,displayName:i.displayName,extensions:i.extensions,mimeTypes:i.mimeTypes,iconClass:"jp-Icon jp-NiivueFileIcon"})})}}}}]);