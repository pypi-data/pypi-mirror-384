[project]
name = "devops-mcps"
version = "0.9.1"
description = "A FastMCP-based, Readonly MCP server for DevOps"
authors = [{ name = "Jien Huang", email = "huangjien@gmail.com" }]
readme = "README.md"
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Programming Language :: Python :: 3.12",
]

keywords = [
    "devops",
    "mcp",
    "python",
    "cli",
    "jenkins",
    "azure",
    "github",
]

dependencies = [
    "fastmcp>=2.11.0",
    "pydantic",
    "python-dotenv",
    "toml",
    "dotenv>=0.9.9",
    "pygithub>=2.6.1",
    "jenkinsapi==0.3.14",
    "fastapi>=0.115.12",
    "azure-identity>=1.15.0",
    "azure-mgmt-compute>=30.6.0",
    "azure-mgmt-containerservice>=28.1.0",
    "azure-mgmt-subscription>=3.1.1",
    "azure-mgmt-web>=7.0.0",
]
requires-python = ">=3.12"

[project.urls]
Homepage = "https://www.huangjien.com"
Repository = "https://github.com/huangjien/devops-mcps"

[project.optional-dependencies]
dev = [
    "pyright>=1.1.389",
    "ruff>=0.7.4",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-asyncio",
]

[project.scripts]
devops-mcps = "devops_mcps.core:main"
devops-mcps-stream-http = "devops_mcps.core:main_stream_http"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.uv]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 2

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Some test files intentionally redefine test functions/classes for parametrization-like patterns
"tests/test_github.py" = ["F811"]
"tests/test_jenkins_view_api.py" = ["F811"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = "-v"
