name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"  # Default version for most jobs
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Restore UV cache
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --dev --python ${{ matrix.python-version }}

    - name: Run tests
      run: |
        uv run pytest --verbose --tb=short

  quality:
    name: Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Restore UV cache
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check code formatting with Black
      run: |
        uv run black --check --diff .

    - name: Check import sorting with isort
      run: |
        uv run isort --check-only --diff .

    - name: Lint with Ruff
      run: |
        uv run ruff check .

    - name: Type check with mypy
      run: |
        uv run mypy src/ || echo "Mypy completed with warnings"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Build package
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, quality, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read   # Required to read repository contents
    
    steps:
    - name: Debug repository info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        verbose: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## Changes in ${{ steps.version.outputs.tag }}
          
          This release was automatically created from the main branch.
          
          ### Package Information
          - **Package**: ayz-auth
          - **Version**: ${{ steps.version.outputs.version }}
          - **PyPI**: https://pypi.org/project/ayz-auth/${{ steps.version.outputs.version }}/
          
          See the [changelog](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
