import itertools
from pathlib import Path
from textwrap import dedent

import torch
from e3nn import o3


def gen_rtps(max_l: int = 4):
    """Precompute all combinations of reduced tensor products for irreps up to l=max_l.

    Parameters
    ----------
    max_l :
        Maximum input l to store.

    Returns
    -------
    dict
        A dictionary with keys (i_irrep, j_irrep, symmetry), where symmetry is either
        "ij" or "ij=ji", and i_irrep and j_irrep are the input irreps as a string like
        "0e", "1o", ..., "4e", "4o" (the maximum l is defined by max_l).
        For each key (i.e. for each tensor product), the stored value is a dictionary
        that contains the change of basis matrix ("change_of_basis") and the irreps
        of the output ("irreps_out").
    """
    ALL_RTPS = {}
    store_irreps = [irrep for l in range(max_l) for irrep in (f"{l}e", f"{l}o")]

    for i_irrep, j_irrep in itertools.product(store_irreps, store_irreps):
        rtp = o3.ReducedTensorProducts("ij", i=i_irrep, j=j_irrep)

        ALL_RTPS[(i_irrep, j_irrep, "ij")] = {
            "change_of_basis": rtp.change_of_basis,
            "irreps_out": rtp.irreps_out,
        }

        if i_irrep == j_irrep:
            rtp_symm = o3.ReducedTensorProducts("ij=ji", i=i_irrep, j=j_irrep)

            ALL_RTPS[(i_irrep, j_irrep, "ij=ji")] = {
                "change_of_basis": rtp_symm.change_of_basis,
                "irreps_out": rtp_symm.irreps_out,
            }

    return ALL_RTPS


def store_precomputed_rtps(max_l: int = 4):
    torch.set_printoptions(precision=8, sci_mode=True, threshold=1e10)

    ALL_RTPS = gen_rtps(max_l=max_l)

    file = dedent(
        f"""
    # THIS FILE IS AUTOMATICALLY GENERATED, DO NOT MODIFY!
    # The file contains the precomputed change of basis and irreps_out
    # for reasonable combinations of irreps in Graph2Mat, to avoid the
    # very expensive initialization of e3nn.o3.ReducedTensorProducts

    # It stores all combinations of tensor products for irreps up to l={max_l}.

    from torch import tensor
    from e3nn import o3
    """
    )

    file += "\nALL_RTPS = {"

    for k, v in ALL_RTPS.items():
        file += f"\n  {k}: " + "{"
        file += f"\n    'irreps_out': o3.Irreps('{v['irreps_out']}'),"
        file += f"\n    'change_of_basis': {v['change_of_basis']}"
        file += "\n  },"

    file += "\n}"

    with open(Path(__file__).parent / "_stored_rtps.py", "w") as f:
        f.write(file)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Precompute and store the change of basis and irreps_out for reasonable combinations of irreps in Graph2Mat, to avoid the very expensive initialization of e3nn.o3.ReducedTensorProducts"
    )
    parser.add_argument(
        "--max_l",
        type=int,
        default=4,
        help="Maximum irreps l to store",
    )
    args = parser.parse_args()
    store_precomputed_rtps(max_l=args.max_l)
