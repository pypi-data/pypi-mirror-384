# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# graph2mat documentation build configuration file, created by
# sphinx-quickstart on Wed Dec  2 19:55:34 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import pathlib
import sys
from datetime import date

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# make sure the source version is preferred (#3567)
_root = pathlib.Path(__file__).absolute().parent.parent

sys.path.insert(0, str(_root))

# Print standard information about executable and path...
print("python exec:", sys.executable)
print("sys.path:", sys.path)

import graph2mat

print(f"Located graph2mat here: {graph2mat.__path__}")

# General information about the project.
project = "graph2mat"
author = "Pol Febrer, Peter Bjørn Jørgensen"

# -- General configuration ------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.intersphinx",
    "sphinx.ext.extlinks",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    # "sphinx_autodoc_typehints",
    # "sphinx_inline_tabs",
    # plotting and advanced usage
    # "IPython.sphinxext.ipython_directive",
    # "IPython.sphinxext.ipython_console_highlighting",
    "sphinx.ext.inheritance_diagram",
    "sphinx_copybutton",
    "nbsphinx",
    # "sphinx_gallery.load_style",
    # bibtex stuff
    # "sphinxcontrib.bibtex",
]
napoleon_numpy_docstring = True
napoleon_use_param = True

# There currently is a bug with mathjax >= 3, so we resort to 2.7.7
# mathjax_path = "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS-MML_HTMLorMML"
# mathjax_path = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# Short-hand for :doi:
extlinks = {}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# prepend/append this snippet in _all_ sources
rst_prolog = """
.. highlight:: python
"""
# Insert the links into the epilog (globally)
# This means that every document has access to the links
# rst_epilog = ''.join(open('epilog.dummy').readlines())

autosummary_generate = True

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
version = str(graph2mat.__version__)
print(f"graph2mat version {version}")


# Add __init__ classes to the documentation
autoclass_content = "class"
autodoc_default_options = {
    "members": True,
    "undoc-members": True,
    "special-members": "__init__,__call__",
    "inherited-members": False,
    "show-inheritance": True,
}

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "build",
    "**/setupegg.py",
    "**/setup.rst",
    "**/tests",
    "**.ipynb_checkpoints",
]

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = "autolink"

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = False

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = ["graph2mat."]


# -- Options for HTML output ----------------------------------------------

html_theme = "sphinx_rtd_theme"
# html_theme = "furo"

if html_theme == "furo":
    html_theme_options = {
        "source_repository": "https://github.com/BIG-MAP/graph2mat",
        "source_branch": "main",
        "source_directory": "docs/",
    }

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = f"graph2mat {version}"

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = "graph2mat"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
if os.path.exists("_static"):
    html_static_path = ["_static"]
else:
    html_static_path = []

# Add any extra style files that we need
html_css_files = [
    "css/custom_styles.css",
]

# If false, no index is generated.
html_use_modindex = True
html_use_index = True

# Options for typehints
typehints_use_signature = True
typehints_use_signature_return = True

# from sphinx_autodoc_typehints import format_annotation

# def typehints_formatter(ann, config):
#     config['typehints_formatter'] = None
#     formatted = format_annotation(ann, config)

#     return formatted + "HEY"

# Insert a link to download the IPython notebook
nbsphinx_prolog = r"""
{% set docname = env.doc2path(env.docname, base="docs") %}

.. raw:: html

     <div align="right">
     <a href="https://raw.githubusercontent.com/BIG-MAP/graph2mat/main/{{ docname }}"><img alt="ipynb download badge" src="https://img.shields.io/badge/download-ipynb-blue.svg" style="vertical-align:text-bottom"></a>.
     </div>

"""


def process_sig(app, what, name, obj, options, signature, return_annotation):
    if signature is not None:
        return (
            signature.replace("<class '", "").replace("'>,", ",").replace("'>)", ")"),
            return_annotation,
        )


def setup(app):
    app.connect("autodoc-process-signature", process_sig)


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    "papersize": "a4paper",
    # The font size ('10pt', '11pt' or '12pt').
    "pointsize": "11pt",
    # Additional stuff for the LaTeX preamble.
    "preamble": r"",
    # Latex figure (float) alignment
    "figure_align": "!htbp",
}


# -----------------------------------------------------------------------------
# Intersphinx configuration
# -----------------------------------------------------------------------------
intersphinx_mapping = {
    "python": ("https://docs.python.org/3/", None),
    "sisl": ("https://https://sisl.readthedocs.io/en/stable/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "scipy": ("https://docs.scipy.org/doc/scipy/", None),
    "plotly": ("https://plotly.com/python-api-reference/", None),
    "torch": ("https://pytorch.org/docs/stable/", None),
    "e3nn": ("https://docs.e3nn.org/en/stable/", None),
    "pytorch_lightning": ("https://lightning.ai/docs/pytorch/stable/", None),
}

# Write the documentation for available conversions.

from graph2mat import conversions
from graph2mat.bindings.torch import *

docs_root = pathlib.Path(__file__).parent
# Write the conversion functions to a file
with open(docs_root / "api" / "conversions.rst", "w") as f:
    f.write(
        """
.. _g2m.conversions:

Format conversions
==================

When `graph2mat` is initialized, a global `graph2mat.ConversionManager` is created and made available
at `graph2mat.conversions`. It can be imported like:

.. code-block:: python

    import graph2mat
    # Use it like
    graph2mat.conversions

    # Or alternatively
    from graph2mat import conversions

This conversion manager contains all the conversions between formats implemented in `graph2mat`.

.. note::
    See the documentation of `graph2mat.ConversionManager` for some remarks on how to
    access/use the existing converters, as well as how to add new ones.

.. currentmodule:: graph2mat.conversions

Summary of available conversions
--------------------------------

The following table summarizes all the available conversions.
Each row contains:

- **Source**: The format to convert from.
- **Target**: The format to convert to.
- **Function**: The function that performs the conversion, click on it to go to its documentation.

See `graph2mat.Formats` for a list of all available formats, together with
a description of what each format is.

.. list-table::
    :header-rows: 1
    :widths: 20 20 60

    * - Source
      - Target
      - Function

"""
    )
    converters_list = list(
        (source, target, f"{source}_to_{target}", converter)
        for (source, target), converter in sorted(conversions._converters.items())
    )

    for source, target, func_name, converter in converters_list:
        f.write(
            f"""
    * - {source}
      - {target}
      - :func:`{func_name}`
"""
        )

    f.write(
        """

Documentation of conversion functions
-------------------------------------

"""
    )
    # Write a list with all available conversions and a link to the function
    for source, target, func_name, converter in converters_list:
        source_format = Formats.string_to_attr_name(source)
        target_format = Formats.string_to_attr_name(target)

        f.write(
            f"""

.. container:: g2m-conversion-func-header

    :func:`Formats.{source_format}` -> :func:`Formats.{target_format}`\n\n

"""
        )
        f.write(f".. autofunction:: {func_name}\n")
