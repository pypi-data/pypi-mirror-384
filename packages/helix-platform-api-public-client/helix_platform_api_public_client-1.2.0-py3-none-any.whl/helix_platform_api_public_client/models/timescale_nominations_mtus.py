# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from helix_platform_api_public_client.models.timescale_nomination_mtu_status import TimescaleNominationMtuStatus
from helix_platform_api_public_client.models.timescale_nominations_mtus_current_nomination import TimescaleNominationsMtusCurrentNomination
from typing import Optional, Set
from typing_extensions import Self

class TimescaleNominationsMtus(BaseModel):
    """
    * `mtuStatus`   - LOCKED => if either of the following cases are true for the MTU:     - the MTU nomination window for the selected timescale is closed     - the MTU was curtailed     - every MTU is by definition LOCKED if       - the specified Participant has `ableToNominate = FALSE` AND       - does not have an `onBehalfParticipantId` specified       - **in eihter markets**   - EDITABLE => if either of the following cases are true for the MTU:     - MTU nom window for the selected timescale is either not yet open or currently open     - There was no curtailment for the MTU   - NO_TR => if either of the following cases are true for the MTU:     - the user has no TR for the specific MTU, therefore there is nothing to nominate   - CANCELLED => the MTU was part of a \"Nomination Cancellation\" * `totalTrs` - Total value of Transmission Rights in kilowatts * `currentNomination.value` - Current value of Nominations in kilowatts * `notNominatedTrs` - Difference between total TRs and currentNomination.value * `reinstated` - Boolean flag indicating if the MTU was reinstated 
    """ # noqa: E501
    mtu: datetime = Field(description="The first moment (inclusive) of an MTU period  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute MTU start point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format - only with `XX:00:00`, `XX:15:00`, `XX:30:00` and `XX:45:00` time parts are valid values (depending on MTU size) ")
    mtu_status: TimescaleNominationMtuStatus = Field(alias="mtuStatus")
    total_trs: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="totalTrs")
    current_nomination: Optional[TimescaleNominationsMtusCurrentNomination] = Field(default=None, alias="currentNomination")
    not_nominated_trs: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="notNominatedTrs")
    reinstated: StrictBool
    __properties: ClassVar[List[str]] = ["mtu", "mtuStatus", "totalTrs", "currentNomination", "notNominatedTrs", "reinstated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimescaleNominationsMtus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_nomination
        if self.current_nomination:
            _dict['currentNomination'] = self.current_nomination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimescaleNominationsMtus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mtu": obj.get("mtu"),
            "mtuStatus": obj.get("mtuStatus"),
            "totalTrs": obj.get("totalTrs"),
            "currentNomination": TimescaleNominationsMtusCurrentNomination.from_dict(obj["currentNomination"]) if obj.get("currentNomination") is not None else None,
            "notNominatedTrs": obj.get("notNominatedTrs"),
            "reinstated": obj.get("reinstated")
        })
        return _obj


