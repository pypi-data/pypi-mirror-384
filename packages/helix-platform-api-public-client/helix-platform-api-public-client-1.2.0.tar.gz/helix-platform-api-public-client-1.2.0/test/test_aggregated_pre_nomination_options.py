# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Helix**, the nomination platform of ElecLink_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/eleclink-helix/platform-api) 

    The version of the OpenAPI document: 1.2.0
    Contact: team.eleclink@eleclink.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from helix_platform_api_public_client.models.aggregated_pre_nomination_options import AggregatedPreNominationOptions

class TestAggregatedPreNominationOptions(unittest.TestCase):
    """AggregatedPreNominationOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AggregatedPreNominationOptions:
        """Test AggregatedPreNominationOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AggregatedPreNominationOptions`
        """
        model = AggregatedPreNominationOptions()
        if include_optional:
            return AggregatedPreNominationOptions(
                long_term = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ],
                day_ahead = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ],
                intra_day = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ]
            )
        else:
            return AggregatedPreNominationOptions(
                long_term = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ],
                day_ahead = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ],
                intra_day = [
                    helix_platform_api_public_client.models.aggregated_pre_nomination_options_timescale.AggregatedPreNominationOptionsTimescale(
                        direction = 'GB_FR', 
                        pre_nominations_exists = True, )
                    ],
        )
        """

    def testAggregatedPreNominationOptions(self):
        """Test AggregatedPreNominationOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
