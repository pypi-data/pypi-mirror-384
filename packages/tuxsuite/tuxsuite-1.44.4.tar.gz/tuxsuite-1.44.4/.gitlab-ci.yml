include:
  - '/support/docker/tuxsuite-ci-images.yml'
  - https://gitlab.com/Linaro/tuxpkg/-/raw/v0.16.0/gitlab-ci-pipeline.yml

variables:
  TUXPKG_PROJECT: tuxsuite

stages:
  - .pre
  - build-ci-images
  - publish-ci-images
  - unit-tests
  - code-checks
  - build
  - test
  - deploy
  - .post

.job:
  script:
  - make $CI_JOB_NAME

.tuxsuite:
  except:
    - schedules

.arm64:
  only:
    - branches@Linaro/tuxsuite
  tags:
    - saas-linux-medium-arm64

.code-checks:
  extends: .tuxsuite
  stage: code-checks
  needs: []

stylecheck:
  image: $CI_REGISTRY_IMAGE:ci-debian
  extends: .code-checks
  script:
    - python3 -m pip install -I --force-reinstall --break-system-packages -r requirements-dev.txt
    - make style

test-markdown:
  extends: .code-checks
  image: docker.io/pipelinecomponents/markdownlint
  script:
    - scripts/markdownlint

codespell:
  extends: .code-checks
  image: $CI_REGISTRY_IMAGE:ci-debian
  script:
    - make codespell

wheel:
  image: $CI_REGISTRY_IMAGE:ci-debian
  stage: build
  script:
    - flit build
  artifacts:
    paths:
      - dist/*.whl

.docker:
  services:
    - name: docker:dind
  image: docker
  only:
    - tags
  before_script:
    - docker info
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - export tag="tuxsuite/tuxsuite:${CI_COMMIT_TAG##v}${TAG_APPEND}"
    - export latest="tuxsuite/tuxsuite:latest${TAG_APPEND}"
  script:
    - docker build --pull --tag "${tag}" --tag "${latest}" .
    - docker run "${tag}" tuxsuite --version
    - docker run "${latest}" tuxsuite --version
    - docker push "${tag}"
    - docker push "${latest}"
  needs:
    - wheel

docker-amd64:
  extends: .docker
  stage: deploy
  variables:
    TAG_APPEND: -amd64

docker-arm64:
  extends: .docker
  stage: deploy
  tags:
     - saas-linux-medium-arm64
  variables:
    TAG_APPEND: -arm64

publish-dockerhub:
  extends: .docker
  stage: .post
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  script:
    - docker manifest create "${tag}" "${tag}-amd64" "${tag}-arm64"
    - docker manifest create "${latest}" "${latest}-amd64" "${latest}-arm64"
    - docker manifest push "${tag}"
    - docker manifest push "${latest}"
  needs:
    - docker-amd64
    - docker-arm64

doc:
  extends: .job
  image: $CI_REGISTRY_IMAGE:ci-debian
  stage: build
  artifacts:
    paths:
      - public
  before_script:
    - python3 -m pip install --break-system-packages mkdocs-material mkdocs-mermaid2-plugin

pages:
  extends: .job
  image: $CI_REGISTRY_IMAGE:ci-debian
  stage: deploy
  needs:
    - doc
    - repository
  artifacts:
    paths:
      - public
  only:
    - tags
  script:
    - cp -r dist/repo public/packages/

.public-ecr:
  services:
    - name: docker:dind
  image: docker
  only:
    - tags
  before_script:
    - apk add --no-cache python3 py3-pip aws-cli
    - docker info
    - aws --region $AWS_DEFAULT_REGION ecr-public get-login-password | docker login --username AWS --password-stdin "${PUBLIC_ECR}"
    - export tag="${PUBLIC_ECR}:${CI_COMMIT_TAG##v}${TAG_APPEND}"
    - export latest="${PUBLIC_ECR}:latest${TAG_APPEND}"
  script:
    - docker build --pull --tag "${tag}" --tag "${latest}" .
    - docker run "${tag}" tuxsuite --version
    - docker run "${latest}" tuxsuite --version
    - docker push "${tag}"
    - docker push "${latest}"
  needs:
    - wheel

public-ecr-amd64:
  extends: .public-ecr
  stage: deploy
  variables:
    TAG_APPEND: -amd64

public-ecr-arm64:
  extends: .public-ecr
  stage: deploy
  tags:
    - saas-linux-medium-arm64
  variables:
    TAG_APPEND: -arm64

publish-public-ecr:
  extends: .public-ecr
  stage: .post
  variables:
    DOCKER_CLI_EXPERIMENTAL: "enabled"
  script:
    - docker manifest create "${tag}" "${tag}-amd64" "${tag}-arm64"
    - docker manifest create "${latest}" "${latest}-amd64" "${latest}-arm64"
    - docker manifest push "${tag}"
    - docker manifest push "${latest}"
  needs:
    - public-ecr-amd64
    - public-ecr-arm64

.unit-tests:
  extends: .tuxsuite
  stage: unit-tests
  script:
    - pip install -r requirements-dev.txt
    - make test

unit-tests-python3.7:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.7

unit-tests-python3.8:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.8

unit-tests-python3.9:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.9

unit-tests-python3.10:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.10

unit-tests-python3.11:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.11

unit-tests-python3.12:
  extends: .unit-tests
  image: $CI_REGISTRY_IMAGE:ci-python-3.12

unit-tests-python3.7-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.7

unit-tests-python3.8-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.8

unit-tests-python3.9-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.9

unit-tests-python3.10-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.10

unit-tests-python3.11-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.11

unit-tests-python3.12-arm64:
  extends: [.unit-tests, .arm64]
  image: $CI_REGISTRY_IMAGE:ci-python-3.12
