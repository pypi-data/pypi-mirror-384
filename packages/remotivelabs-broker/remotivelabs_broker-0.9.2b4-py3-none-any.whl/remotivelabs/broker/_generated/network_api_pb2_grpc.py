# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from remotivelabs.broker._generated import common_pb2 as common__pb2
from remotivelabs.broker._generated import network_api_pb2 as network__api__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in network_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NetworkServiceStub(object):
    """/ Signal publish, subscribe and read.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToSignals = channel.unary_stream(
                '/base.NetworkService/SubscribeToSignals',
                request_serializer=network__api__pb2.SubscriberConfig.SerializeToString,
                response_deserializer=network__api__pb2.Signals.FromString,
                _registered_method=True)
        self.SubscribeToSignalWithScript = channel.unary_stream(
                '/base.NetworkService/SubscribeToSignalWithScript',
                request_serializer=network__api__pb2.SubscriberWithScriptConfig.SerializeToString,
                response_deserializer=network__api__pb2.Signals.FromString,
                _registered_method=True)
        self.SubscribeToFramesDistribution = channel.unary_stream(
                '/base.NetworkService/SubscribeToFramesDistribution',
                request_serializer=network__api__pb2.FramesDistributionConfig.SerializeToString,
                response_deserializer=network__api__pb2.FramesDistribution.FromString,
                _registered_method=True)
        self.PublishSignals = channel.unary_unary(
                '/base.NetworkService/PublishSignals',
                request_serializer=network__api__pb2.PublisherConfig.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                _registered_method=True)
        self.ReadSignals = channel.unary_unary(
                '/base.NetworkService/ReadSignals',
                request_serializer=network__api__pb2.SignalIds.SerializeToString,
                response_deserializer=network__api__pb2.Signals.FromString,
                _registered_method=True)


class NetworkServiceServicer(object):
    """/ Signal publish, subscribe and read.
    """

    def SubscribeToSignals(self, request, context):
        """/ Subscribe to signals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToSignalWithScript(self, request, context):
        """/ Subscribe to signals with transform provided as a LUA script.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToFramesDistribution(self, request, context):
        """/ A stream which emits frames distributions of a provided namespace. Useful for diagnostic purposes. Counts are reset every 500 ms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishSignals(self, request, context):
        """/ Publish signals with values.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSignals(self, request, context):
        """/ Read signals from cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToSignals': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToSignals,
                    request_deserializer=network__api__pb2.SubscriberConfig.FromString,
                    response_serializer=network__api__pb2.Signals.SerializeToString,
            ),
            'SubscribeToSignalWithScript': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToSignalWithScript,
                    request_deserializer=network__api__pb2.SubscriberWithScriptConfig.FromString,
                    response_serializer=network__api__pb2.Signals.SerializeToString,
            ),
            'SubscribeToFramesDistribution': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToFramesDistribution,
                    request_deserializer=network__api__pb2.FramesDistributionConfig.FromString,
                    response_serializer=network__api__pb2.FramesDistribution.SerializeToString,
            ),
            'PublishSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishSignals,
                    request_deserializer=network__api__pb2.PublisherConfig.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'ReadSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSignals,
                    request_deserializer=network__api__pb2.SignalIds.FromString,
                    response_serializer=network__api__pb2.Signals.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.NetworkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('base.NetworkService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NetworkService(object):
    """/ Signal publish, subscribe and read.
    """

    @staticmethod
    def SubscribeToSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/base.NetworkService/SubscribeToSignals',
            network__api__pb2.SubscriberConfig.SerializeToString,
            network__api__pb2.Signals.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToSignalWithScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/base.NetworkService/SubscribeToSignalWithScript',
            network__api__pb2.SubscriberWithScriptConfig.SerializeToString,
            network__api__pb2.Signals.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToFramesDistribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/base.NetworkService/SubscribeToFramesDistribution',
            network__api__pb2.FramesDistributionConfig.SerializeToString,
            network__api__pb2.FramesDistribution.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.NetworkService/PublishSignals',
            network__api__pb2.PublisherConfig.SerializeToString,
            common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.NetworkService/ReadSignals',
            network__api__pb2.SignalIds.SerializeToString,
            network__api__pb2.Signals.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
