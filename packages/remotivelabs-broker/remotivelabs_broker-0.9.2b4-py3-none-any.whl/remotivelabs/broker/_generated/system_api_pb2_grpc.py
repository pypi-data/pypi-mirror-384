# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from remotivelabs.broker._generated import common_pb2 as common__pb2
from remotivelabs.broker._generated import system_api_pb2 as system__api__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in system_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SystemServiceStub(object):
    """/ Handle configuration of the RemotiveBroker server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfiguration = channel.unary_unary(
                '/base.SystemService/GetConfiguration',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=system__api__pb2.Configuration.FromString,
                _registered_method=True)
        self.ListSignals = channel.unary_unary(
                '/base.SystemService/ListSignals',
                request_serializer=common__pb2.NameSpace.SerializeToString,
                response_deserializer=common__pb2.Frames.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/base.SystemService/HealthCheck',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                _registered_method=True)
        self.UploadFileChunk = channel.unary_unary(
                '/base.SystemService/UploadFileChunk',
                request_serializer=system__api__pb2.FileUploadChunkRequest.SerializeToString,
                response_deserializer=system__api__pb2.FileUploadResponse.FromString,
                _registered_method=True)
        self.UploadFile = channel.stream_unary(
                '/base.SystemService/UploadFile',
                request_serializer=system__api__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=system__api__pb2.FileUploadResponse.FromString,
                _registered_method=True)
        self.BatchDeleteFiles = channel.unary_unary(
                '/base.SystemService/BatchDeleteFiles',
                request_serializer=system__api__pb2.FileDescriptions.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                _registered_method=True)
        self.BatchDownloadFiles = channel.unary_stream(
                '/base.SystemService/BatchDownloadFiles',
                request_serializer=system__api__pb2.FileDescriptions.SerializeToString,
                response_deserializer=system__api__pb2.FileDownloadResponse.FromString,
                _registered_method=True)
        self.BatchDownloadFileChunks = channel.unary_unary(
                '/base.SystemService/BatchDownloadFileChunks',
                request_serializer=system__api__pb2.BatchDownloadFileChunksRequest.SerializeToString,
                response_deserializer=system__api__pb2.BatchDownloadFileChunksResponse.FromString,
                _registered_method=True)
        self.ReloadConfiguration = channel.unary_unary(
                '/base.SystemService/ReloadConfiguration',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=system__api__pb2.ReloadMessage.FromString,
                _registered_method=True)
        self.GetLicenseInfo = channel.unary_unary(
                '/base.SystemService/GetLicenseInfo',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=system__api__pb2.LicenseInfo.FromString,
                _registered_method=True)
        self.SetLicense = channel.unary_unary(
                '/base.SystemService/SetLicense',
                request_serializer=system__api__pb2.License.SerializeToString,
                response_deserializer=system__api__pb2.LicenseInfo.FromString,
                _registered_method=True)
        self.SetProperty = channel.unary_unary(
                '/base.SystemService/SetProperty',
                request_serializer=system__api__pb2.PropertyValue.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                _registered_method=True)


class SystemServiceServicer(object):
    """/ Handle configuration of the RemotiveBroker server.
    """

    def GetConfiguration(self, request, context):
        """/ Get current configuration of server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSignals(self, request, context):
        """/ Get list of all available frames and signals on server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """/ Check if broker is running and ready to serve
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFileChunk(self, request, context):
        """*
        Upload file using chunks (without streams), specifically useful for
        gRPC-web which does not support Client-side streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """*
        Upload file using streams, preferred option for client with Client-side
        streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDeleteFiles(self, request, context):
        """/ Delete a single or multiple files from server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDownloadFiles(self, request, context):
        """/ Download a single or multiple files from server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDownloadFileChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadConfiguration(self, request, context):
        """*
        Will not return until new configuration is tested an active, make sure
        to set timeout to a large value. (fibex on pi > 50s).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLicenseInfo(self, request, context):
        """/ Get information about server license.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLicense(self, request, context):
        """/ Set server license.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetProperty(self, request, context):
        """/ Sets a custom property, such as SecOc parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfiguration,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=system__api__pb2.Configuration.SerializeToString,
            ),
            'ListSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSignals,
                    request_deserializer=common__pb2.NameSpace.FromString,
                    response_serializer=common__pb2.Frames.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'UploadFileChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFileChunk,
                    request_deserializer=system__api__pb2.FileUploadChunkRequest.FromString,
                    response_serializer=system__api__pb2.FileUploadResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=system__api__pb2.FileUploadRequest.FromString,
                    response_serializer=system__api__pb2.FileUploadResponse.SerializeToString,
            ),
            'BatchDeleteFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDeleteFiles,
                    request_deserializer=system__api__pb2.FileDescriptions.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'BatchDownloadFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.BatchDownloadFiles,
                    request_deserializer=system__api__pb2.FileDescriptions.FromString,
                    response_serializer=system__api__pb2.FileDownloadResponse.SerializeToString,
            ),
            'BatchDownloadFileChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDownloadFileChunks,
                    request_deserializer=system__api__pb2.BatchDownloadFileChunksRequest.FromString,
                    response_serializer=system__api__pb2.BatchDownloadFileChunksResponse.SerializeToString,
            ),
            'ReloadConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadConfiguration,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=system__api__pb2.ReloadMessage.SerializeToString,
            ),
            'GetLicenseInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLicenseInfo,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=system__api__pb2.LicenseInfo.SerializeToString,
            ),
            'SetLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLicense,
                    request_deserializer=system__api__pb2.License.FromString,
                    response_serializer=system__api__pb2.LicenseInfo.SerializeToString,
            ),
            'SetProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.SetProperty,
                    request_deserializer=system__api__pb2.PropertyValue.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.SystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('base.SystemService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SystemService(object):
    """/ Handle configuration of the RemotiveBroker server.
    """

    @staticmethod
    def GetConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/GetConfiguration',
            common__pb2.Empty.SerializeToString,
            system__api__pb2.Configuration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/ListSignals',
            common__pb2.NameSpace.SerializeToString,
            common__pb2.Frames.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/HealthCheck',
            common__pb2.Empty.SerializeToString,
            common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFileChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/UploadFileChunk',
            system__api__pb2.FileUploadChunkRequest.SerializeToString,
            system__api__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/base.SystemService/UploadFile',
            system__api__pb2.FileUploadRequest.SerializeToString,
            system__api__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchDeleteFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/BatchDeleteFiles',
            system__api__pb2.FileDescriptions.SerializeToString,
            common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchDownloadFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/base.SystemService/BatchDownloadFiles',
            system__api__pb2.FileDescriptions.SerializeToString,
            system__api__pb2.FileDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchDownloadFileChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/BatchDownloadFileChunks',
            system__api__pb2.BatchDownloadFileChunksRequest.SerializeToString,
            system__api__pb2.BatchDownloadFileChunksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/ReloadConfiguration',
            common__pb2.Empty.SerializeToString,
            system__api__pb2.ReloadMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLicenseInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/GetLicenseInfo',
            common__pb2.Empty.SerializeToString,
            system__api__pb2.LicenseInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/SetLicense',
            system__api__pb2.License.SerializeToString,
            system__api__pb2.LicenseInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/base.SystemService/SetProperty',
            system__api__pb2.PropertyValue.SerializeToString,
            common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
