# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatflow

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from typing import Optional
np = import_numpy()

# `SymInt` records a value within the symbolic shape of a tensor.
class SymInt(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls) -> int:
        return 16

    # SymInt
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SymInt
    def Data(self, j = None):
        if j is None:
            return [self._tab.Get(flatbuffers.number_types.Int64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + i * 8)) for i in range(self.DataLength())]
        elif j >= 0 and j < self.DataLength():
            return self._tab.Get(flatbuffers.number_types.Int64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + j * 8))
        else:
            return None

    # SymInt
    def DataAsNumpy(self):
        return self._tab.GetArrayAsNumpy(flatbuffers.number_types.Int64Flags, self._tab.Pos + 0, self.DataLength())

    # SymInt
    def DataLength(self) -> int:
        return 2

    # SymInt
    def DataIsNone(self) -> bool:
        return False


def CreateSymInt(builder, data):
    builder.Prep(8, 16)
    for _idx0 in range(2 , 0, -1):
        builder.PrependInt64(data[_idx0-1])
    return builder.Offset()


# `TensorMetadata` is a structure containing pertinent information
# about a tensor within a PyTorch program.
class TensorMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TensorMetadata
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorMetadata
    def Dtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TensorMetadata
    def Shape(self, j: int) -> Optional[SymInt]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            obj = SymInt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TensorMetadata
    def ShapeLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorMetadata
    def ShapeIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def TensorMetadataStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def TensorMetadataAddDtype(builder: flatbuffers.Builder, dtype: int):
    builder.PrependUint8Slot(0, dtype, 0)

def TensorMetadataAddShape(builder: flatbuffers.Builder, shape: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def TensorMetadataStartShapeVector(builder, numElems: int) -> int:
    return builder.StartVector(16, numElems, 8)

def TensorMetadataEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



# `Node` is a data structure that represents individual operations in the
# computational graph. Each node contains an opcode identifying operators
# and the input/output shapes of the operator. Unlike `torch.fx.Node`,
# this excludes operations other than callsites to ATen operators;
# i.e., operations whose `op` property are not `call_function`.
class Node(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Node()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Node
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Node
    def Target(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Node
    def Args(self, j: int) -> Optional[TensorMetadata]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = TensorMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Node
    def ArgsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Node
    def ArgsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Node
    def Meta(self) -> Optional[TensorMetadata]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = TensorMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NodeStart(builder: flatbuffers.Builder):
    builder.StartObject(3)

def NodeAddTarget(builder: flatbuffers.Builder, target: int):
    builder.PrependUint16Slot(0, target, 0)

def NodeAddArgs(builder: flatbuffers.Builder, args: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def NodeStartArgsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def NodeAddMeta(builder: flatbuffers.Builder, meta: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(meta), 0)

def NodeEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



# `Graph` is the main data structure for tracing a given model at the
# intermediate representation (IR) level. It consists of a series of `Node`s,
# each representing callsites such as opcode and the input/output shapes of
# the corresponding operator.
class Graph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Graph()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGraph(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Graph
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Graph
    def Nodes(self, j: int) -> Optional[Node]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Node()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Graph
    def NodesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Graph
    def NodesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def GraphStart(builder: flatbuffers.Builder):
    builder.StartObject(1)

def GraphAddNodes(builder: flatbuffers.Builder, nodes: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def GraphStartNodesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def GraphEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()



