from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from flatflow.ops.graph_generated import Graph

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class InitRequest(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> InitRequest: ...
  @classmethod
  def GetRootAsInitRequest(cls, buf: bytes, offset: int) -> InitRequest: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def DataParallelRank(self) -> int: ...
  def DataParallelWorldSize(self) -> int: ...
  def GlobalBatchSize(self) -> int: ...
  def MicroBatchSize(self) -> int: ...
  def Graph(self) -> Graph | None: ...
  def Sizes(self, i: int) -> typing.List[int]: ...
  def SizesAsNumpy(self) -> np.ndarray: ...
  def SizesLength(self) -> int: ...
  def SizesIsNone(self) -> bool: ...
def InitRequestStart(builder: flatbuffers.Builder) -> None: ...
def InitRequestAddDataParallelRank(builder: flatbuffers.Builder, dataParallelRank: int) -> None: ...
def InitRequestAddDataParallelWorldSize(builder: flatbuffers.Builder, dataParallelWorldSize: int) -> None: ...
def InitRequestAddGlobalBatchSize(builder: flatbuffers.Builder, globalBatchSize: int) -> None: ...
def InitRequestAddMicroBatchSize(builder: flatbuffers.Builder, microBatchSize: int) -> None: ...
def InitRequestAddGraph(builder: flatbuffers.Builder, graph: uoffset) -> None: ...
def InitRequestAddSizes(builder: flatbuffers.Builder, sizes: uoffset) -> None: ...
def InitRequestStartSizesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def InitRequestEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ScatterRequest(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ScatterRequest: ...
  @classmethod
  def GetRootAsScatterRequest(cls, buf: bytes, offset: int) -> ScatterRequest: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Epoch(self) -> int: ...
  def Indices(self, i: int) -> typing.List[int]: ...
  def IndicesAsNumpy(self) -> np.ndarray: ...
  def IndicesLength(self) -> int: ...
  def IndicesIsNone(self) -> bool: ...
def ScatterRequestStart(builder: flatbuffers.Builder) -> None: ...
def ScatterRequestAddEpoch(builder: flatbuffers.Builder, epoch: int) -> None: ...
def ScatterRequestAddIndices(builder: flatbuffers.Builder, indices: uoffset) -> None: ...
def ScatterRequestStartIndicesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ScatterRequestEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ScatterResponse(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ScatterResponse: ...
  @classmethod
  def GetRootAsScatterResponse(cls, buf: bytes, offset: int) -> ScatterResponse: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Indices(self, i: int) -> typing.List[int]: ...
  def IndicesAsNumpy(self) -> np.ndarray: ...
  def IndicesLength(self) -> int: ...
  def IndicesIsNone(self) -> bool: ...
def ScatterResponseStart(builder: flatbuffers.Builder) -> None: ...
def ScatterResponseAddIndices(builder: flatbuffers.Builder, indices: uoffset) -> None: ...
def ScatterResponseStartIndicesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ScatterResponseEnd(builder: flatbuffers.Builder) -> uoffset: ...

