[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aisberg"
version = "0.4.4"
description = "Aisberg SDK for Python - A simple and powerful SDK to interact with the Aisberg API"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "Private License" }
authors = [
    { name = "Mathis Lambert", email = "mathis.lambert@freepro.com" },
    { name = "Free Pro" }
]
dependencies = [
    "httpx>=0.28.1",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: Other/Proprietary License"
]

#[project.urls]
#Homepage = "https://iliad.fr"
#Documentation = "https://your.docs"
#Source = "https://your.repo"

[project.optional-dependencies]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.16.1",
    "flake8>=7.3.0"
]

[tool.setuptools]
packages = { find = { } }

[tool.commitizen]
name = "cz_customize"
version = "0.4.0"
version_files = [
    "pyproject.toml:version"
]

[tool.commitizen.customize]
message_template = "{change_type}{scope}: {subject}"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    {value = "feat", name = "feat: A new feature"},
    {value = "fix", name = "fix: A bug fix"},
    {value = "docs", name = "docs: Documentation only changes"},
    {value = "style", name = "style: Changes that do not affect the meaning of the code"},
    {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
    {value = "perf", name = "perf: A code change that improves performance"},
    {value = "test", name = "test: Adding missing tests or correcting existing tests"}
]
message = "Select the type of change you're committing"

[[tool.commitizen.customize.questions]]
type = "list"
name = "scope"
message = "What is the scope of this change?\n"
choices = [
    {value = "core", name = "core: Changement sur le cœur du client"},
    {value = "api", name = "api: Changement lié aux endpoints ou à la communication API"},
    {value = "chat", name = "chat: Changement sur le module de chat"},
    {value = "embeddings", name = "embeddings: Changement sur les embeddings"},
    {value = "collections", name = "collections: Changement sur les collections"},
    {value = "documents", name = "documents: Changement sur les documents"},
    {value = "workflows", name = "workflows: Changement sur les workflows"},
    {value = "tools", name = "tools: Changement dans la gestion des outils (tools)"},
    {value = "models", name = "models: Changement sur les modèles Pydantic"},
    {value = "config", name = "config: Changement de configuration"},
    {value = "docs", name = "docs: Changement de documentation"}
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "Write a short and imperative summary of the code changes:\n"
