// ------ Attacker x Defender -------
// Attacker needs to get from the left part of the map to the right part.
// There are two outposts with defenders, who try to stop the attacker by stepping on the same square.
// If a predefined maximum number of rounds is reached, the defenders win.
// Defenders are the optimizing player and thus have only partial observability. Attakcer has full observability.

smg

// MAP CONSTANTS
const int WIDTH = 6;
const int HEIGHT = 3;

const int xMIN = 1;
const int xMAX = WIDTH;
const int yMIN = 1;
const int yMAX = HEIGHT;
 

// PLAYERS
player d
	defender1, [d1up], [d1down],
	defender2, [d2up], [d2down]
endplayer

player a
	attacker, [aup], [adown], [aright]
endplayer


// END CONDITION
formula catch = (ax=d1x & ay=d1y) | (ax=d2x & ay=d2y);
formula d_win = catch;
formula a_win = ax=xMAX;
formula done = d_win | a_win;

label "goal" = a_win;


// OBSERVATIONS
observable "d1y" = d1y;
observable "d2y" = d2y;
observable "started" = started;
observable "was21" = d1y=1 & was21;
observable "was22" = d1y=2 & was22;
observable "was23" = d1y=3 & was23;
observable "clk" = clk;
observable "done" = done;

// CLOCK MODULE
// To make game alternating and to count rounds.
// Defenders have to start to simulate concurent actions, because they have imperfect observations.
const int defender_units = 2;
const int all_units = defender_units+1;

formula next_clk = mod(clk+1, all_units+1);

module clk
	// clk=0 means it's attacker's turn
	clk : [0..3] init 0;

	[aup] 		!done & clk=0 -> (clk'=next_clk);
	[adown] 	!done & clk=0 -> (clk'=next_clk);
	[aright]	!done & clk=0 -> (clk'=next_clk);
	[astay]		!done & clk=0 -> (clk'=next_clk);

	[d1up]		!done & clk=1 -> (clk'=next_clk);
	[d1down]	!done & clk=1 -> (clk'=next_clk);

	[d2up]		!done & clk=2 -> (clk'=next_clk);
	[d2down]	!done & clk=2 -> (clk'=next_clk);

	[tracks]	!done & clk=3 -> (clk'=next_clk);

endmodule


// DEFENDER MODULES
const double d_slip = 0.3;

formula move_up = min(d1y+1, yMAX);
formula move_down = max(d1y-1, yMIN);

const int d1x = xMIN+1;
const int d1y_init = 2;

module defender1
	d1y : [yMIN..yMAX] init d1y_init;

	[d1up]		true -> 1-d_slip : (d1y'=move_up) + d_slip : (d1y'=move_down);
	[d1down] 	true -> 1-d_slip : (d1y'=move_down) + d_slip : (d1y'=move_up); 

endmodule


const int d2x = xMAX-1;
const int d2y_init = 2;

module defender2 = defender1
	[ d1y=d2y, d1y_init=d2y_init, d1up=d2up, d1down=d2down ]
endmodule


// ATTACKER MODULE
const double a_slip = 0.1;

const int ax_init = xMIN;
const int ay_init = 2;

module attacker
	ax : [xMIN..xMAX] init ax_init;
	ay : [yMIN..yMAX] init ay_init;
	started : bool init false;

	[aup]		!started -> 1 : (ay'=ay+1) & (started'=true);
	[adown]		!started -> 1 : (ay'=ay-1) & (started'=true);
	[aright]	true -> 1-a_slip : (ax'=ax+1) + a_slip : true;
	[astay]		true -> 1-a_slip : true + a_slip : (ax'=ax+1);

endmodule

module tracks
	was21 : bool init false;
	was22 : bool init false;
	was23 : bool init false;

	[tracks] ax=2 & ay=1 -> 1 : (was21'=true);
	[tracks] ax=2 & ay=2 -> 1 : (was22'=true);
	[tracks] ax=2 & ay=3 -> 1 : (was23'=true);
	[tracks] ax!=2 	     -> 1 : true;

endmodule














