// ------ Attacker x Defender -------
// Attacker needs to get from the left part of the map to the right part.
// There are two outposts with defenders, who try to stop the attacker by stepping on the same square.
// Defenders are the optimizing player and thus have only partial observability. Attakcer has full observability.

smg

// MAP CONSTANTS
const int WIDTH = 5;
const int HEIGHT = 3;

const int xMIN = 1;
const int xMAX = WIDTH;
const int yMIN = 1;
const int yMAX = HEIGHT;
 

// PLAYERS
player d
	defender,
	[d1ud2u], [d1ud2d], [d1ud2s],
	[d1dd2u], [d1dd2d], [d1dd2s],
	[d1sd2u], [d1sd2d], [d1sd2s]
endplayer

player a
	attacker,
	[aup], [adown], [aright], [astay]
endplayer


// END CONDITION

formula catch = (ax=d1x & ay=d1y) | (ax=d2x & ay=d2y);
formula d_win = catch;
formula a_win = ax=xMAX;
formula done = d_win | a_win;

label "goal" = a_win;


// OBSERVATIONS
observable "d1y" = d1y;
observable "d2y" = d2y;
observable "was21" = d1y=1 & was21;
observable "was22" = d1y=2 & was22;
observable "was23" = d1y=3 & was23;
observable "clk" = clk;
observable "done" = done;


// CLOCK MODULE
// Attacker has to start to simulate concurrent actions, because they have full observation except for defender's next move.
const int player_count = 2;

formula next_clk = mod(clk+1, player_count+1);

module clk
	// clk=0 means it's attacker's turn
	clk : [0..player_count] init 0;

	
	[aup] 		!done & clk=0 -> (clk'=next_clk);
	[adown] 	!done & clk=0 -> (clk'=next_clk);
	[aright]	!done & clk=0 -> (clk'=next_clk);
	[astay]		!done & clk=0 -> (clk'=next_clk); 

	[d1ud2u]	!done & clk=1 -> (clk'=next_clk);
	[d1ud2d]	!done & clk=1 -> (clk'=next_clk);
	[d1ud2s]	!done & clk=1 -> (clk'=next_clk);
	[d1dd2u]	!done & clk=1 -> (clk'=next_clk);
	[d1dd2d]	!done & clk=1 -> (clk'=next_clk);
	[d1dd2s]	!done & clk=1 -> (clk'=next_clk);
	[d1sd2u]	!done & clk=1 -> (clk'=next_clk);
	[d1sd2d]	!done & clk=1 -> (clk'=next_clk);
	[d1sd2s]	!done & clk=1 -> (clk'=next_clk);

	[tracks]	!done & clk=2 -> (clk'=next_clk);

endmodule


// DEFENDER MODULES
const double slip = 0.3;

formula d1_up = min(d1y+1, yMAX);
formula d1_down = max(d1y-1, yMIN);
formula d2_up = min(d2y+1, yMAX);
formula d2_down = max(d2y-1, yMIN);

const int d1x = xMIN+1;
const int d1y_init = 2;
const int d2x = xMAX-1;
const int d2y_init = 2;

module defender
	d1y : [yMIN..yMAX] init d1y_init;
	d2y : [yMIN..yMAX] init d2y_init;
	
	// d1 - defender 1, d2 - defender 2
	// u - up; d - down, s - stay
	[d1ud2u]	true -> 1-(2*slip) : (d1y'=d1_up)&(d2y'=d2_up)   + slip : (d1y'=d1_up) + slip : (d2y'=d2_up);
	[d1ud2d]	true -> 1-(2*slip) : (d1y'=d1_up)&(d2y'=d2_down) + slip : (d1y'=d1_up) + slip : (d2y'=d2_down);
	[d1ud2s]	true -> 1-slip 	   : (d1y'=d1_up) 		 + slip : true;

	[d1dd2u]	true -> 1-(2*slip) : (d1y'=d1_down)&(d2y'=d2_up)   + slip : (d1y'=d1_down) + slip : (d2y'=d2_up);
	[d1dd2d]	true -> 1-(2*slip) : (d1y'=d1_down)&(d2y'=d2_down) + slip : (d1y'=d1_down) + slip : (d2y'=d2_down);
	[d1dd2s]	true -> 1-slip     : (d1y'=d1_down)		   + slip : true;

	[d1sd2u]	true -> 1-slip : (d2y'=d2_up)	+ slip : true;
	[d1sd2d]	true -> 1-slip : (d2y'=d2_down) + slip : true;
	[d1sd2s]	true -> 1 : true;	

endmodule



// ATTACKER MODULE
const int ax_init = xMIN;
const int ay_init = 2;

module attacker
	ax : [xMIN..xMAX] init ax_init;
	ay : [yMIN..yMAX] init ay_init;

	[aup]		true -> 1 : (ay'=min(ay+1, yMAX));
	[adown]		true -> 1 : (ay'=max(ay-1, yMIN));
	[aright]	true -> 1 : (ax'=min(ax+1, xMAX));
	[astay]		true -> 1 : true;
endmodule

module tracks
	was21 : bool init false;
	was22 : bool init false;
	was23 : bool init false;

	[tracks] ax=2 & ay=1 -> 1 : (was21'=true);
	[tracks] ax=2 & ay=2 -> 1 : (was22'=true);
	[tracks] ax=2 & ay=3 -> 1 : (was23'=true);
	[tracks] ax!=2 	     -> 1 : true;

endmodule










