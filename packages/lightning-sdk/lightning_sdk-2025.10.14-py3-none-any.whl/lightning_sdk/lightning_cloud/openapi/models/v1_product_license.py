# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ProductLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'created_at': 'datetime',
        'expires_at': 'datetime',
        'is_valid': 'bool',
        'license_id': 'str',
        'license_key': 'str',
        'license_type': 'str',
        'owner_name': 'str',
        'owner_type': 'str',
        'product_name': 'str',
        'product_type': 'str',
        'product_version': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'active': 'active',
        'created_at': 'createdAt',
        'expires_at': 'expiresAt',
        'is_valid': 'isValid',
        'license_id': 'licenseId',
        'license_key': 'licenseKey',
        'license_type': 'licenseType',
        'owner_name': 'ownerName',
        'owner_type': 'ownerType',
        'product_name': 'productName',
        'product_type': 'productType',
        'product_version': 'productVersion',
        'updated_at': 'updatedAt'
    }

    def __init__(self, active: 'bool' =None, created_at: 'datetime' =None, expires_at: 'datetime' =None, is_valid: 'bool' =None, license_id: 'str' =None, license_key: 'str' =None, license_type: 'str' =None, owner_name: 'str' =None, owner_type: 'str' =None, product_name: 'str' =None, product_type: 'str' =None, product_version: 'str' =None, updated_at: 'datetime' =None):  # noqa: E501
        """V1ProductLicense - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._created_at = None
        self._expires_at = None
        self._is_valid = None
        self._license_id = None
        self._license_key = None
        self._license_type = None
        self._owner_name = None
        self._owner_type = None
        self._product_name = None
        self._product_type = None
        self._product_version = None
        self._updated_at = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at
        if is_valid is not None:
            self.is_valid = is_valid
        if license_id is not None:
            self.license_id = license_id
        if license_key is not None:
            self.license_key = license_key
        if license_type is not None:
            self.license_type = license_type
        if owner_name is not None:
            self.owner_name = owner_name
        if owner_type is not None:
            self.owner_type = owner_type
        if product_name is not None:
            self.product_name = product_name
        if product_type is not None:
            self.product_type = product_type
        if product_version is not None:
            self.product_version = product_version
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def active(self) -> 'bool':
        """Gets the active of this V1ProductLicense.  # noqa: E501


        :return: The active of this V1ProductLicense.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: 'bool'):
        """Sets the active of this V1ProductLicense.


        :param active: The active of this V1ProductLicense.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1ProductLicense.  # noqa: E501


        :return: The created_at of this V1ProductLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1ProductLicense.


        :param created_at: The created_at of this V1ProductLicense.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self) -> 'datetime':
        """Gets the expires_at of this V1ProductLicense.  # noqa: E501


        :return: The expires_at of this V1ProductLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: 'datetime'):
        """Sets the expires_at of this V1ProductLicense.


        :param expires_at: The expires_at of this V1ProductLicense.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def is_valid(self) -> 'bool':
        """Gets the is_valid of this V1ProductLicense.  # noqa: E501


        :return: The is_valid of this V1ProductLicense.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid: 'bool'):
        """Sets the is_valid of this V1ProductLicense.


        :param is_valid: The is_valid of this V1ProductLicense.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def license_id(self) -> 'str':
        """Gets the license_id of this V1ProductLicense.  # noqa: E501


        :return: The license_id of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id: 'str'):
        """Sets the license_id of this V1ProductLicense.


        :param license_id: The license_id of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def license_key(self) -> 'str':
        """Gets the license_key of this V1ProductLicense.  # noqa: E501


        :return: The license_key of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key: 'str'):
        """Sets the license_key of this V1ProductLicense.


        :param license_key: The license_key of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def license_type(self) -> 'str':
        """Gets the license_type of this V1ProductLicense.  # noqa: E501


        :return: The license_type of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type: 'str'):
        """Sets the license_type of this V1ProductLicense.


        :param license_type: The license_type of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def owner_name(self) -> 'str':
        """Gets the owner_name of this V1ProductLicense.  # noqa: E501


        :return: The owner_name of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name: 'str'):
        """Sets the owner_name of this V1ProductLicense.


        :param owner_name: The owner_name of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def owner_type(self) -> 'str':
        """Gets the owner_type of this V1ProductLicense.  # noqa: E501


        :return: The owner_type of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type: 'str'):
        """Sets the owner_type of this V1ProductLicense.


        :param owner_type: The owner_type of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._owner_type = owner_type

    @property
    def product_name(self) -> 'str':
        """Gets the product_name of this V1ProductLicense.  # noqa: E501


        :return: The product_name of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name: 'str'):
        """Sets the product_name of this V1ProductLicense.


        :param product_name: The product_name of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_type(self) -> 'str':
        """Gets the product_type of this V1ProductLicense.  # noqa: E501


        :return: The product_type of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type: 'str'):
        """Sets the product_type of this V1ProductLicense.


        :param product_type: The product_type of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def product_version(self) -> 'str':
        """Gets the product_version of this V1ProductLicense.  # noqa: E501


        :return: The product_version of this V1ProductLicense.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version: 'str'):
        """Sets the product_version of this V1ProductLicense.


        :param product_version: The product_version of this V1ProductLicense.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1ProductLicense.  # noqa: E501


        :return: The updated_at of this V1ProductLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1ProductLicense.


        :param updated_at: The updated_at of this V1ProductLicense.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProductLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ProductLicense') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProductLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ProductLicense') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
