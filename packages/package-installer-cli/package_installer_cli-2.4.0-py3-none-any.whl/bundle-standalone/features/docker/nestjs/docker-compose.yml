# NestJS Docker Compose Configuration
# Created by Package Installer CLI

version: '3.8'

services:
  nestjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database configuration
      # - DATABASE_URL=postgresql://username:password@postgres:5432/nestdb
      # - TYPEORM_HOST=postgres
      # - TYPEORM_PORT=5432
      # - TYPEORM_USERNAME=username
      # - TYPEORM_PASSWORD=password
      # - TYPEORM_DATABASE=nestdb
      # JWT and Auth
      # - JWT_SECRET=your-super-secret-jwt-key
      # - JWT_EXPIRATION_TIME=3600
      # External services
      # - REDIS_HOST=redis
      # - REDIS_PORT=6379
      # - MAIL_HOST=smtp.gmail.com
      # - MAIL_PORT=587
    depends_on:
      postgres:
        condition: service_healthy
      # redis:
      #   condition: service_started
    volumes:
      # Mount for logs
      - ./logs:/app/logs
      # Development mode (uncomment for dev)
      # - .:/app
      # - /app/node_modules
    restart: unless-stopped
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=nestdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U username -d nestdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   networks:
  #     - nestjs-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   restart: unless-stopped

  # Adminer Database UI (uncomment for development)
  # adminer:
  #   image: adminer
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - nestjs-network

  # Nginx Reverse Proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - nestjs-app
  #   networks:
  #     - nestjs-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  # redis_data:

networks:
  nestjs-network:
    driver: bridge
