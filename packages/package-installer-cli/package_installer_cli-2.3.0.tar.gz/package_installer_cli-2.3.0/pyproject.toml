[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "package-installer-cli"
version = "2.3.0"
description = "A powerful CLI tool to bootstrap projects with pre-configured templates and features"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "0xshariq", email = "khanshariq92213@gmail.com"}
]
maintainers = [
    {name = "0xshariq", email = "khanshariq92213@gmail.com"}
]
keywords = [
    "cli",
    "template",
    "react",
    "nextjs",
    "vuejs",
    "ruby",
    "django",
    "go",
    "golang",
    "ai",
    "aws",
    "analytics",
    "angular",
    "express",
    "nestjs",
    "rust",
    "database",
    "orm",
    "mongodb",
    "postgresql",
    "mysql",
    "prisma",
    "drizzle",
    "typeorm",
    "mongoose",
    "typegoose",
    "starter",
    "project-generator",
    "docker",
    "github",
    "payment",
    "razorpay",
    "stripe",
    "paypal",
    "daisy",
    "ui",
    "shadcn",
    "tailwind",
    "storage",
    "testing",
    "monitoring"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Environment :: Console",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "isort>=5.10.0",
    "pre-commit>=2.17.0",
    "twine>=4.0.0",
    "build>=0.8.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.7.0",
]

[project.urls]
Homepage = "https://github.com/0xshariq/py_package_installer_cli"
Documentation = "https://github.com/0xshariq/py_package_installer_cli#readme"
Repository = "https://github.com/0xshariq/py_package_installer_cli.git"
"Bug Tracker" = "https://github.com/0xshariq/py_package_installer_cli/issues"
Changelog = "https://github.com/0xshariq/py_package_installer_cli/blob/main/CHANGELOG.md"

[project.scripts]
pi = "cli:main"
package-installer = "cli:main"
0xshariq-installer = "cli:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "examples*", ".git*"]

[tool.setuptools.package-data]
"*" = [
    "bundle-standalone/**/*",
    "*.json",
    "*.md",
    "*.txt",
    "*.yml",
    "*.yaml",
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | templates
  | features
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cli"]
skip_glob = ["templates/*", "features/*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "templates/",
    "features/",
    "build/",
    "dist/"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "templates/*",
    "features/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
