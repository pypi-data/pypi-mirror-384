[build-system]
# Using hatchling for modern Python packaging with better performance than setuptools
# ASSUMPTION: Hatchling provides cleaner configuration and faster builds than legacy setuptools
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "project-manager-mcp"
version = "0.2.1"
description = "Project Manager MCP with SQLite database layer and atomic locking"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Project Manager MCP Contributors"}
]
maintainers = [
    {name = "Project Manager MCP Contributors"}
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "project-management",
    "sqlite",
    "fastapi",
    "asyncio"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
]

# ASSUMPTION: Python >=3.9 requirement justified by modern asyncio features and better typing support
# Upgraded from existing >=3.8 to leverage asyncio improvements
requires-python = ">=3.9"

# Core runtime dependencies with strategic version pinning
# ASSUMPTION: FastMCP >=0.1.0 is available on PyPI and stable for production use
dependencies = [
    "fastmcp>=0.1.0",              # MCP server implementation (ASSUMPTION: Available and stable)
    "fastapi>=0.100.0",            # Web framework - major version pinned for API stability
    "uvicorn[standard]>=0.20.0",   # ASGI server with performance extras
    "websockets>=11.0",            # WebSocket support for real-time features
    "click>=8.0",                  # CLI framework - stable, minor versions allowed
    "pyyaml>=6.0",                 # YAML processing for project configuration
    "pydantic>=2.0",               # Data validation - major version pinned for model compatibility
    "aiohttp>=3.8.0",              # Async HTTP client for server readiness checks
    "psutil>=5.9.0",               # System and process monitoring for performance metrics
    "watchdog>=3.0.0",             # File system monitoring for planning mode live updates
]

# Optional development dependencies for testing and development workflow
[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",        # Async test support
    "pytest-cov>=4.0",             # Coverage reporting  
    "httpx>=0.24",                 # Async HTTP client for API testing
    "websockets>=11.0",            # WebSocket client for MCP testing
    "selenium>=4.0",               # Browser automation for cross-browser testing
    "requests>=2.31.0",            # HTTP requests for health checks and API calls
    "pytest-xdist>=3.0",           # Parallel test execution
    "pytest-html>=3.0",            # HTML test reports
    "pytest-benchmark>=4.0",       # Performance benchmarking in tests
    "playwright>=1.30.0",          # Modern browser automation alternative to Selenium
]

test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "httpx>=0.24",
    "websockets>=11.0",
    "selenium>=4.0",               # #COMPLETION_DRIVE_IMPL: Cross-browser testing requires Selenium
    "requests>=2.31.0",            # #COMPLETION_DRIVE_IMPL: CLI health checks need requests library
    "playwright>=1.30.0",          # #COMPLETION_DRIVE_IMPL: Modern browser automation for better reliability
]

lint = [
    "black>=23.0",                 # Code formatting
    "ruff>=0.1.0",                 # Fast linter and formatter
    "mypy>=1.0",                   # Type checking
    "types-PyYAML",                # Type stubs for PyYAML
]

# Console script entry points
# ASSUMPTION: CLI module structure at task_manager.cli:main is correct and stable
[project.scripts]
project-manager-mcp = "task_manager.cli:main"
pm-install-claude-assets = "task_manager.install:main"

[project.urls]
Homepage = "https://github.com/Commands-com/pm"
Repository = "https://github.com/Commands-com/pm"
Documentation = "https://github.com/Commands-com/pm#readme"
"Bug Tracker" = "https://github.com/Commands-com/pm/issues"

# Hatchling build configuration for src-layout package structure
# ASSUMPTION: Explicit src mapping needed for proper package discovery in editable installs
[tool.hatch.build.targets.wheel]
packages = ["src/task_manager"]

[tool.hatch.build.targets.editable]
dev-mode-dirs = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/examples",
    "/test",
    "/.claude/agents",
    "/.claude/commands",
    "pyproject.toml",
    "README.md",
]
exclude = [
    "*.pyc",
    "__pycache__",
    ".pytest_cache",
    "*.db",
    ".env*",
    "/.claude/settings.local.json",
]

# Development tool configuration
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"test/*" = ["B011"]  # Allow assert False in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["fastmcp.*", "uvicorn.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
]
testpaths = ["test"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "packaging: marks tests as packaging-related tests",
    "performance: marks tests as performance/load tests",
    "ra_validation: marks tests as RA methodology compliance validation",
    "browser: marks tests requiring browser automation",
    "multi_session: marks tests requiring multiple browser sessions",
    "stress: marks tests as stress/load testing with large datasets",
    "cross_browser: marks tests requiring cross-browser compatibility validation",
    "benchmark: marks tests as performance benchmarking tests",
]
