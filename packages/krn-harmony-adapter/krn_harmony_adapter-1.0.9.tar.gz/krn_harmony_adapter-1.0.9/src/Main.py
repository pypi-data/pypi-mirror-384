#!/usr/bin/env python3
"""
ÈáçÊûÑÂêéÁöÑÈ∏øËíôÈÄÇÈÖçÂô®‰∏ªÊñá‰ª∂
ÈááÁî®Ê®°ÂùóÂåñÊû∂ÊûÑÔºåÂäüËÉΩÊ∏ÖÊô∞ÂàÜÁ¶ª
"""
import concurrent.futures
import sys
import os
from typing import Dict, Any, List, Optional


# Ê∑ªÂä†Ê®°ÂùóË∑ØÂæÑ
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

from modules.check.Check import Check
from modules.adapt.Adapter import Adapter
from modules.sync.Sync import Sync
from modules.doc.UrlDetector import UrlDetector
from modules.doc.DocGenerator import DocGenerator


"""È∏øËíôÈÄÇÈÖçÂô®‰∏ªÁ±ª"""
class Main:
    
    def __init__(self, basePath: str = "."):
        self.basePath = basePath
        
        # ÂàùÂßãÂåñÂêÑ‰∏™Ê®°Âùó
        self.syncer = Sync()
        self.checker = Check()
        self.adapter = Adapter()
        self.urlDetetor = UrlDetector()
        self.docGenerator = DocGenerator()
    
    def syncMissingModules(self):
        """ÂäüËÉΩ1: Ëá™Âä®ÂêåÊ≠•masterÂàÜÊîØÊúâÔºå‰ΩÜÊòØÂΩìÂâçÂàÜÊîØÊ≤°ÊúâÁöÑÊ®°Âùó"""
        self.syncer.syncMissingModules()
    
    def checkAllModulesAdaptation(self) -> Dict[str, Any]:
        """ÂäüËÉΩ2: Ëá™Âä®ËØÜÂà´Âì™‰∫õÊ®°ÂùóÊ≤°ÊúâÈÄÇÈÖçÈ∏øËíô"""
        return self.checker.checkAllModulesAdaptation()

    def adaptSingleModule(self, moduleName: str, aiType: str):
        """ÂäüËÉΩ3: ÊåâÁÖßËßÑÂÆö‰∏ÄÈîÆÈÄÇÈÖçÊåáÂÆöÊ®°Âùó"""
        print(f"üîß ÈÄÇÈÖçÊ®°Âùó - {moduleName}")
        print("=" * 50)
        self.adapter.adaptSingleModule(moduleName, aiType)
        self.urlDetetor.checkModuleUrl(moduleName)
    
    def adaptBatchModules(self, moduleType: str = "all", aiType: str = ""):
        """ÂäüËÉΩ4ÔºöÊâπÈáèÈÄÇÈÖçÊ®°Âùó"""
        print(f"üîß ÊâπÈáèÈÄÇÈÖç - {moduleType}")
        self.adapter.adaptBatchModules(moduleType, aiType)
    
    def checkUrlRegisteryStatus(self,
                                      domain: Optional[str] = 'harmonyos-lbs.kwailocallife.com', 
                                      paths: Optional[List[str]] = None):
        """ÂäüËÉΩ6ÔºöÊ£ÄÊµãÊé•Âè£Ê≥®ÂÜåÁä∂ÊÄÅ"""
        print(f"üîß Ê£ÄÊü•Êé•Âè£Ê≥®ÂÜåÁä∂ÊÄÅ")
        self.urlDetetor.checkUrlRegisteryStatus(domain, paths)
    
    def generateDocumentation(self) -> bool:
        """ÂäüËÉΩ7ÔºöÁîüÊàêÊñáÊ°£"""
        return self.docGenerator.generateAllDocs()
    
    def interactive_menu(self) -> None:
        """‰∫§‰∫íÂºèËèúÂçï"""
        while True:
            print("\n" + "=" * 60)
            print("üöÄ È∏øËíôÈÄÇÈÖçÂô®")
            print("=" * 60)
            print("1. ÂêåÊ≠•Áº∫Â§±Ê®°Âùó")
            print("2. Ê£ÄÊü•ÊâÄÊúâÊ®°ÂùóÈÄÇÈÖçÁä∂ÊÄÅ")
            print("3. ÈÄÇÈÖçÊåáÂÆöÊ®°Âùó")
            print("4. ÊâπÈáèÈÄÇÈÖçÊ®°Âùó")
            print("5. Ê£ÄÊü•Êé•Âè£Ê≥®ÂÜåÁä∂ÊÄÅ")
            print("6. ÁîüÊàêÊñáÊ°£")
            print("0. ÈÄÄÂá∫")
            print("=" * 60)
            
            try:
                choice = input("ËØ∑ÈÄâÊã©ÂäüËÉΩ (0-6): ").strip()
                
                if choice == '0':
                    print("üëã ÂÜçËßÅ!")
                    break
                elif choice == '1':
                    self.syncMissingModules()
                elif choice == '2':
                    self.checkAllModulesAdaptation()
                elif choice == '3':
                    moduleName = input("ËØ∑ËæìÂÖ•Ê®°ÂùóÂêç: ").strip()
                    aiType = input("ËØ∑ËæìÂÖ•AIÁ±ªÂûã (ÂèØÈÄâ, kwaipilot/openai): ").strip()
                    if moduleName:
                        self.adaptSingleModule(moduleName, aiType)
                elif choice == '4':
                    print("ÊâπÈáèÈÄÇÈÖçÈÄâÈ°π:")
                    print("1. ÊâÄÊúâÊú™ÈÄÇÈÖçÊ®°Âùó")
                    print("2. ‰ªÖÁõ¥Êí≠Bundle")
                    print("3. ‰ªÖÈùûÁõ¥Êí≠Bundle")
                    batch_choice = input("ËØ∑ÈÄâÊã© (1-3): ").strip()
                    aiType = input("ËØ∑ËæìÂÖ•AIÁ±ªÂûã (ÂèØÈÄâ, kwaipilot/openai): ").strip()
                    
                    if batch_choice == '1':
                        self.adaptBatchModules("all", aiType)
                    elif batch_choice == '2':
                        self.adaptBatchModules("live", aiType)
                    elif batch_choice == '3':
                        self.adaptBatchModules("non_live", aiType)
                elif choice == '5':
                    self.checkUrlRegisteryStatus()
                elif choice == '6':
                    self.generateDocumentation()
                else:
                    print("‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•")
                    
            except KeyboardInterrupt:
                print("\nüëã ÂÜçËßÅ!")
                break
            except Exception as e:
                print(f"‚ùå Êìç‰ΩúÂ§±Ë¥•: {e}")


def main():
    """‰∏ªÂáΩÊï∞"""
    if len(sys.argv) > 1:
        # ÂëΩ‰ª§Ë°åÊ®°Âºè
        adapter = Main()
        command = sys.argv[1]
        
        if command == "sync":
            adapter.syncMissingModules()
        elif command == "check":
            adapter.checkAllModulesAdaptation()
        elif command == "adapt" and len(sys.argv) > 2:
            for m in sys.argv[2:]:
                adapter.adaptSingleModule(m, "")
        elif command == "batch":
            moduleType = sys.argv[2] if len(sys.argv) > 2 else "all"
            aiType = sys.argv[3] if len(sys.argv) > 3 else ""
            adapter.adaptBatchModules(moduleType, aiType)
        elif command == "url":
            if (len(sys.argv) >= 2):
                if (sys.argv[2].startswith('/')):
                    adapter.checkUrlRegisteryStatus('harmonyos-lbs.kwailocallife.com', sys.argv[2:])
                else:
                    adapter.checkUrlRegisteryStatus(sys.argv[2], sys.argv[3:])
            else:
                adapter.checkUrlRegisteryStatus()
        elif command == "doc":
            adapter.generateDocumentation()
        else:
            print("Áî®Ê≥ï: python harmony_adapter_refactored.py [sync|check|adapt <module>|batch [all|live|non_live]|doc|url]")
    else:
        # ‰∫§‰∫íÂºèÊ®°Âºè
        adapter = Main()
        adapter.interactive_menu()


if __name__ == "__main__":
    main()